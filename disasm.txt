
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 38 02 c0       	mov    eax,0xc00238c4
c0000025:	3d c4 38 02 c0       	cmp    eax,0xc00238c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 38 02 c0       	push   0xc00238c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 38 02 c0       	mov    eax,0xc00238c4
c0000051:	2d c4 38 02 c0       	sub    eax,0xc00238c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 38 02 c0       	push   0xc00238c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c ff 01 c0       	mov    ebx,0xc001ff9c
c0000097:	81 eb 98 ff 01 c0    	sub    ebx,0xc001ff98
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 ff 01 c0       	mov    esi,0xc001ff98
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 38 02 c0       	push   0xc00238c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 c4 38 02 c0       	push   0xc00238c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 df 51 01 00       	call   c001548c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 bd 51 01 00       	call   c001548c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ca 56 01 00       	call   c00159b8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 89 5d 01 00       	call   c0016080 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 05 10 01 00       	jmp    c0011384 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0060],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0060],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0060],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0060],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0060],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 a4 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff5c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 86 78 01 00       	jmp    c0019628 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 b0 78 01 00       	jmp    c0019668 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 d1 78 01 00       	jmp    c00196a8 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 00 02 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfe00]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 00 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe00]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba e4 28 02 c0       	mov    edx,0xc00228e4
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba bc 00 02 c0       	mov    edx,0xc00200bc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 c2 00 02 c0       	mov    eax,0xc00200c2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 80 01 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfe80]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 cb 00 02 c0       	mov    eax,0xc00200cb
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 00 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe00]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 50 01 02 c0       	mov    eax,0xc0020150
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 40 01 02 c0       	mov    ebx,0xc0020140
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 20 01 02 c0       	mov    eax,0xc0020120
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 30 01 02 c0       	mov    eax,0xc0020130
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba d2 00 02 c0       	mov    edx,0xc00200d2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba de 00 02 c0       	mov    edx,0xc00200de
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba f2 00 02 c0       	mov    edx,0xc00200f2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 20 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020520
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 20 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020520
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 20 03 02 c0       	mov    eax,0xc0020320
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 60 02 02 c0       	mov    eax,0xc0020260
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 20 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfde0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 20 06 02 c0       	push   0xc0020620
c000611b:	e8 a4 3e 01 00       	call   c0019fc4 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 2e 06 02 c0       	push   0xc002062e
c0006153:	e8 6c 3e 01 00       	call   c0019fc4 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 d5 3d 01 00       	call   c0019f68 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 3d 06 02 c0       	push   0xc002063d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 40 06 02 c0       	push   0xc0020640
c0006812:	e8 ad 37 01 00       	call   c0019fc4 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 c1 37 01 00       	call   c0019fe0 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 45 06 02 c0 	mov    DWORD PTR [esp],0xc0020645
c000682c:	e8 93 37 01 00       	call   c0019fc4 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 a3 37 01 00       	call   c0019fe0 <iso_kprintfd>
c000683d:	c7 04 24 4b 06 02 c0 	mov    DWORD PTR [esp],0xc002064b
c0006844:	e8 7b 37 01 00       	call   c0019fc4 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 8b 37 01 00       	call   c0019fe0 <iso_kprintfd>
c0006855:	c7 04 24 51 06 02 c0 	mov    DWORD PTR [esp],0xc0020651
c000685c:	e8 63 37 01 00       	call   c0019fc4 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 73 37 01 00       	call   c0019fe0 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 3d 06 02 c0       	push   0xc002063d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 5a 06 02 c0       	push   0xc002065a
c0006a31:	e8 8e 35 01 00       	call   c0019fc4 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 65 06 02 c0       	push   0xc0020665
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 6c 06 02 c0       	push   0xc002066c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 73 06 02 c0       	push   0xc0020673
c0006b48:	e8 77 34 01 00       	call   c0019fc4 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 7e 06 02 c0       	push   0xc002067e
c0006b63:	e8 5c 34 01 00       	call   c0019fc4 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 72 9f 00 00       	call   c0010be4 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 07 5c 00 00       	call   c000c888 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 8f 06 02 c0       	push   0xc002068f
c0006cb2:	e8 0c a0 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 a8 06 02 c0       	push   0xc00206a8
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 05 eb 00 00       	call   c00157e4 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 14 ed 00 00       	call   c0015a08 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 f0 64 01 c0       	push   0xc00164f0
c0006d03:	52                   	push   edx
c0006d04:	e8 ff ec 00 00       	call   c0015a08 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 a4 07 02 c0       	push   0xc00207a4
c0006d16:	e8 a8 9f 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 2b a8 00 00       	call   c0011552 <KeInitRand()>
c0006d27:	e8 e7 fb 00 00       	call   c0016913 <Vm::initialise8086()>
c0006d2c:	e8 8f 48 00 00       	call   c000b5c0 <Fs::initVFS()>
c0006d31:	c7 04 24 b5 06 02 c0 	mov    DWORD PTR [esp],0xc00206b5
c0006d38:	e8 86 9f 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 a4 07 02 c0       	push   0xc00207a4
c0006d5c:	e8 62 9f 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0006d61:	e8 37 45 00 00       	call   c000b29d <KeInitialiseSymlinks()>
c0006d66:	e8 91 a4 00 00       	call   c00111fc <KeLoadSystemEnv()>
c0006d6b:	e8 ee a6 00 00       	call   c001145e <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 cf 06 02 c0       	push   0xc00206cf
c0006d7a:	68 d8 06 02 c0       	push   0xc00206d8
c0006d7f:	e8 ac cc 00 00       	call   c0013a30 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 5c 54 00 00       	call   c000c1e8 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 c8 07 02 c0 	mov    DWORD PTR [esp],0xc00207c8
c0006d93:	e8 2b 9f 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 dc 5a 00 00       	call   c000c886 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 e0 06 02 c0 	mov    DWORD PTR [esp],0xc00206e0
c0006db1:	e8 0d 9f 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 f1 06 02 c0       	push   0xc00206f1
c0006dc5:	e8 30 e4 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 58 e6 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 8c f0 00 00       	call   c0015e6c <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 0d 07 02 c0       	push   0xc002070d
c0006df5:	50                   	push   eax
c0006df6:	e8 07 5b 00 00       	call   c000c902 <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 14 08 02 c0       	mov    edx,0xc0020814
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 a1 80 01 00       	call   c001ef96 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 c9 91 00 00       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 a2 91 00 00       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 80 91 00 00       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 5e 91 00 00       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 6b 90 00 00       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 46 90 00 00       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 00 7f 01 00       	call   c001ef50 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 4e 7b 01 00       	call   c001ebc0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 5c 90 00 00       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 16 07 02 c0       	push   0xc0020716
c00070e2:	e8 b2 a2 00 00       	call   c0011399 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 1c 07 02 c0       	push   0xc002071c
c000711e:	e8 76 a2 00 00       	call   c0011399 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 a9 89 00 00       	jmp    c000fb14 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 22 07 02 c0       	push   0xc0020722
c00071c3:	0f 94 05 20 31 02 c0 	sete   BYTE PTR ds:0xc0023120
c00071ca:	e8 f4 9a 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 a3 84 00 00       	call   c000f688 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 76 55 00 00       	call   c000c76a <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 3a 07 02 c0 	mov    DWORD PTR [esp],0xc002073a
c000720d:	e8 b1 9a 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 8c 8f 00 00       	call   c00101b4 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 33 55 00 00       	call   c000c76a <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 e8 07 02 c0       	push   0xc00207e8
c0007254:	e8 6a 9a 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0007259:	e8 f2 08 01 00       	call   c0017b50 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 54 07 02 c0 	mov    DWORD PTR [esp],0xc0020754
c0007265:	e8 59 9a 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 be e8 00 00       	call   c0015b34 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 6f 07 02 c0       	push   0xc002076f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 80 07 02 c0       	push   0xc0020780
c00072ed:	e8 a7 a0 00 00       	call   c0011399 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 8d 07 02 c0       	push   0xc002078d
c0007302:	e8 92 a0 00 00       	call   c0011399 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 97 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020797
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 78 a0 00 00       	jmp    c0011399 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 09 03 01 00       	call   c001781c <HalSystemIdle()>
c0007513:	e8 3a 80 01 00       	call   c001f552 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 50 ec 01 c0       	push   0xc001ec50
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 60 ec 01 c0       	push   0xc001ec60
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 6a ec 01 c0       	push   0xc001ec6a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 74 ec 01 c0       	push   0xc001ec74
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 7e ec 01 c0       	push   0xc001ec7e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 88 ec 01 c0       	push   0xc001ec88
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 92 ec 01 c0       	push   0xc001ec92
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 9c ec 01 c0       	push   0xc001ec9c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 a6 ec 01 c0       	push   0xc001eca6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 ae ec 01 c0       	push   0xc001ecae
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 b8 ec 01 c0       	push   0xc001ecb8
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 c0 ec 01 c0       	push   0xc001ecc0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 c8 ec 01 c0       	push   0xc001ecc8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 d0 ec 01 c0       	push   0xc001ecd0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 ea ec 01 c0       	push   0xc001ecea
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 f2 ec 01 c0       	push   0xc001ecf2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 fc ec 01 c0       	push   0xc001ecfc
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 06 ed 01 c0       	push   0xc001ed06
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 10 ed 01 c0       	push   0xc001ed10
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 aa ed 01 c0       	push   0xc001edaa
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 b1 ed 01 c0       	push   0xc001edb1
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 9c ed 01 c0       	push   0xc001ed9c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 a3 ed 01 c0       	push   0xc001eda3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 1a ed 01 c0       	push   0xc001ed1a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 24 ed 01 c0       	push   0xc001ed24
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 2e ed 01 c0       	push   0xc001ed2e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 38 ed 01 c0       	push   0xc001ed38
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 42 ed 01 c0       	push   0xc001ed42
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 4c ed 01 c0       	push   0xc001ed4c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 56 ed 01 c0       	push   0xc001ed56
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 60 ed 01 c0       	push   0xc001ed60
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 6a ed 01 c0       	push   0xc001ed6a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 74 ed 01 c0       	push   0xc001ed74
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 7e ed 01 c0       	push   0xc001ed7e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 88 ed 01 c0       	push   0xc001ed88
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 92 ed 01 c0       	push   0xc001ed92
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 ec ee 01 c0       	push   0xc001eeec
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 f6 ee 01 c0       	push   0xc001eef6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 00 ef 01 c0       	push   0xc001ef00
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 0a ef 01 c0       	push   0xc001ef0a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 14 ef 01 c0       	push   0xc001ef14
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 1e ef 01 c0       	push   0xc001ef1e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 28 ef 01 c0       	push   0xc001ef28
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 32 ef 01 c0       	push   0xc001ef32
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 a6 ec 01 c0       	push   0xc001eca6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 14 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023114
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 14 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023114
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 14 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023114,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 14 31 02 c0       	mov    eax,ds:0xc0023114
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 38 08 02 c0       	push   0xc0020838
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 68 08 02 c0       	push   0xc0020868
c0007a27:	e8 6d 99 00 00       	call   c0011399 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 6d 08 02 c0       	push   0xc002086d
c0007a3d:	e8 57 99 00 00       	call   c0011399 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 74 08 02 c0       	push   0xc0020874
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 de 90 00 00       	call   c0010c47 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 07 90 00 00       	call   c0010b91 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 4a 79 01 00       	call   c001f4ea <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 8c 08 02 c0       	push   0xc002088c
c0007c31:	e8 63 97 00 00       	call   c0011399 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 8c 08 02 c0       	push   0xc002088c
c0007ca2:	e8 f2 96 00 00       	call   c0011399 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 18 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023118
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 18 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023118
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 18 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023118
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 31 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020931
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 ec 95 00 00       	jmp    c0011399 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 b4 08 02 c0       	push   0xc00208b4
c0007e31:	e8 63 95 00 00       	call   c0011399 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 47 09 02 c0       	push   0xc0020947
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 e4 08 02 c0       	push   0xc00208e4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 08 09 02 c0       	push   0xc0020908
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 6d 09 02 c0       	push   0xc002096d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 5f 09 02 c0       	push   0xc002095f
c000813c:	e8 58 92 00 00       	call   c0011399 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba cc 09 02 c0       	mov    edx,0xc00209cc
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 89 09 02 c0       	push   0xc0020989
c0008311:	e8 83 90 00 00       	call   c0011399 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 f9 d8 00 00       	call   c0015c58 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 d9 6f 01 00       	call   c001f3d0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 a6 09 02 c0       	push   0xc00209a6
c000840c:	e8 88 8f 00 00       	call   c0011399 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba cc 09 02 c0       	mov    edx,0xc00209cc
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 14 0a 02 c0       	mov    edx,0xc0020a14
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 4e 51 00 00       	call   c000d644 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 f4 04 01 00       	call   c0018a10 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 40 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcec0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 40 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcec0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 f8 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd008]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 d0 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd030]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 26 02 01 00       	call   c00188a4 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 83 02 01 00       	jmp    c00189ac <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 e0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209e0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 23 8c 00 00       	jmp    c0011399 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 bc 38 00 00       	jmp    c000c18f <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ee 09 02 c0       	mov    esi,0xc00209ee
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 8a fd 00 00       	call   c00189ac <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 14 0a 02 c0       	mov    edx,0xc0020a14
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 ff 09 02 c0       	push   0xc00209ff
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 05 0a 02 c0       	push   0xc0020a05
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 80 31 02 c0       	mov    eax,ds:0xc0023180
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 80 31 02 c0    	mov    DWORD PTR ds:0xc0023180,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 b7 63 01 00       	call   c001f5b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba f8 0a 02 c0       	mov    edx,0xc0020af8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 b7 62 01 00       	call   c001f68c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 ab 62 01 00       	call   c001f694 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 b1 61 01 00       	call   c001f5b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 b4 0a 02 c0       	push   0xc0020ab4
c000942c:	e8 68 7f 00 00       	call   c0011399 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba f8 0a 02 c0       	mov    edx,0xc0020af8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 b6 61 01 00       	call   c001f68c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 43 62 01 00       	call   c001f736 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 01 60 01 00       	call   c001f576 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 10 31 02 c0       	push   0xc0023110
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 74 f5 01 c0       	push   0xc001f574
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 88 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023188
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 88 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023188
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 84 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023184
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 84 31 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023184,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 84 31 02 c0    	mov    DWORD PTR ds:0xc0023184,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 0c 0b 02 c0       	push   0xc0020b0c
c0009689:	e8 0b 7d 00 00       	call   c0011399 <KePanic(char const*)>
c000968e:	8b 35 84 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023184
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 84 31 02 c0    	mov    DWORD PTR ds:0xc0023184,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 84 31 02 c0       	mov    eax,ds:0xc0023184
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 84 31 02 c0    	mov    DWORD PTR ds:0xc0023184,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 84 31 02 c0       	mov    ds:0xc0023184,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 8c 31 02 c0    	mov    edx,DWORD PTR ds:0xc002318c
c000975f:	8b 0d 94 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023194
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 8c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002318c
c000977a:	a1 90 31 02 c0       	mov    eax,ds:0xc0023190
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 90 31 02 c0    	cmp    DWORD PTR ds:0xc0023190,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 a0 0d 02 c0       	push   0xc0020da0
c00097c0:	e8 d4 7b 00 00       	call   c0011399 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 b7 0d 02 c0       	push   0xc0020db7
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 90 31 02 c0    	mov    DWORD PTR ds:0xc0023190,ebx
c0009864:	c6 05 98 31 02 c0 43 	mov    BYTE PTR ds:0xc0023198,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 94 31 02 c0       	mov    ds:0xc0023194,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 8c 31 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002318c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 90 31 02 c0       	mov    eax,ds:0xc0023190
c0009896:	f7 35 8c 31 02 c0    	div    DWORD PTR ds:0xc002318c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 2c 0b 02 c0       	push   0xc0020b2c
c00098d1:	e8 c3 7a 00 00       	call   c0011399 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ce 0d 02 c0       	push   0xc0020dce
c00099a3:	e8 f1 79 00 00       	call   c0011399 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 50 0b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020b50
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 8e 79 00 00       	jmp    c0011399 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 ea 0d 02 c0       	push   0xc0020dea
c0009a18:	e8 7c 79 00 00       	call   c0011399 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 06 0e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020e06
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 32 79 00 00       	jmp    c0011399 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 74 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b74
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 98 0b 02 c0       	push   0xc0020b98
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 00 0c 02 c0       	push   0xc0020c00
c0009dad:	e8 e7 75 00 00       	call   c0011399 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 24 0c 02 c0       	push   0xc0020c24
c0009e99:	e8 fb 74 00 00       	call   c0011399 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 50 0c 02 c0       	push   0xc0020c50
c0009fed:	e8 a7 73 00 00       	call   c0011399 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 da 27 00 00       	call   c000c9fe <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 20 0e 02 c0       	push   0xc0020e20
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 8c 31 02 c0       	mov    eax,ds:0xc002318c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 98 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023198
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 ae 38 00 00       	call   c000dbb8 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 8c 31 02 c0    	cmp    DWORD PTR ds:0xc002318c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 74 0c 02 c0       	push   0xc0020c74
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 2e 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020e2e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 51 0e 02 c0       	push   0xc0020e51
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 3f 0e 02 c0       	push   0xc0020e3f
c000a3db:	e8 b9 6f 00 00       	call   c0011399 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 51 0e 02 c0       	push   0xc0020e51
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 8c 31 02 c0    	mov    edx,DWORD PTR ds:0xc002318c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 98 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023198
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 c5 36 00 00       	call   c000db4c <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 8c 31 02 c0    	cmp    DWORD PTR ds:0xc002318c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 64 0e 02 c0       	push   0xc0020e64
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 a4 0c 02 c0       	push   0xc0020ca4
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 c4 0c 02 c0       	push   0xc0020cc4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 24 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d24
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 79 0e 02 c0       	push   0xc0020e79
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 8d 0e 02 c0       	push   0xc0020e8d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 a0 0e 02 c0       	push   0xc0020ea0
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 ad 0e 02 c0       	push   0xc0020ead
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 c6 0e 02 c0       	push   0xc0020ec6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 c6 0e 02 c0       	push   0xc0020ec6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ce 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ece
c000a7f8:	e8 9c 6b 00 00       	call   c0011399 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 e6 0e 02 c0       	push   0xc0020ee6
c000a80a:	e8 8a 6b 00 00       	call   c0011399 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be ef 09 02 c0       	mov    esi,0xc00209ef
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ee 09 02 c0       	mov    al,ds:0xc00209ee
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 fc 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf104]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 4c 10 02 c0       	push   0xc002104c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 60 10 02 c0       	push   0xc0021060
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 6a 10 02 c0       	push   0xc002106a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 74 10 02 c0       	push   0xc0021074
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 b8 11 02 c0       	push   0xc00211b8
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 7e 10 02 c0       	push   0xc002107e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 d8 11 02 c0       	push   0xc00211d8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 93 10 02 c0       	push   0xc0021093
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 ad 10 02 c0       	push   0xc00210ad
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 00 12 02 c0       	push   0xc0021200
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 b8 11 02 c0       	push   0xc00211b8
c000abb4:	e8 e0 67 00 00       	call   c0011399 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 48 12 02 c0       	push   0xc0021248
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 48 12 02 c0       	push   0xc0021248
c000abe3:	e8 b1 67 00 00       	call   c0011399 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 b8 10 02 c0       	push   0xc00210b8
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 b8 10 02 c0       	push   0xc00210b8
c000ac0f:	e8 85 67 00 00       	call   c0011399 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 d5 10 02 c0       	push   0xc00210d5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 d5 10 02 c0       	push   0xc00210d5
c000ac3b:	e8 59 67 00 00       	call   c0011399 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 68 12 02 c0       	push   0xc0021268
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 68 12 02 c0       	push   0xc0021268
c000ac67:	e8 2d 67 00 00       	call   c0011399 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 8c 12 02 c0       	push   0xc002128c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 8c 12 02 c0       	push   0xc002128c
c000ac93:	e8 01 67 00 00       	call   c0011399 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 f1 10 02 c0       	push   0xc00210f1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 f1 10 02 c0       	push   0xc00210f1
c000acbf:	e8 d5 66 00 00       	call   c0011399 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 0d 11 02 c0       	push   0xc002110d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 0d 11 02 c0       	push   0xc002110d
c000aceb:	e8 a9 66 00 00       	call   c0011399 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 ac 12 02 c0       	push   0xc00212ac
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 ac 12 02 c0       	push   0xc00212ac
c000ad17:	e8 7d 66 00 00       	call   c0011399 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 d0 12 02 c0       	push   0xc00212d0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 d0 12 02 c0       	push   0xc00212d0
c000ad43:	e8 51 66 00 00       	call   c0011399 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 89 67 00 00       	call   c00114e7 <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 ef 12 02 c0       	push   0xc00212ef
c000ad97:	e8 fd 65 00 00       	call   c0011399 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 f8 12 02 c0       	push   0xc00212f8
c000addc:	50                   	push   eax
c000addd:	e8 66 0a 00 00       	call   c000b848 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 16 13 02 c0       	push   0xc0021316
c000adf1:	e8 a3 65 00 00       	call   c0011399 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 0d 0b 00 00       	call   c000b910 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 30 13 02 c0       	push   0xc0021330
c000ae12:	e8 82 65 00 00       	call   c0011399 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 4a 13 02 c0       	push   0xc002134a
c000ae59:	e8 3b 65 00 00       	call   c0011399 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 f7 0a 00 00       	call   c000b96e <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 44             	sub    esp,0x44
c000af52:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af56:	56                   	push   esi
c000af57:	68 64 13 02 c0       	push   0xc0021364
c000af5c:	e8 e4 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af61:	89 34 24             	mov    DWORD PTR [esp],esi
c000af64:	e8 9b ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	89 c7                	mov    edi,eax
c000af6e:	89 d0                	mov    eax,edx
c000af70:	09 f8                	or     eax,edi
c000af72:	0f 84 de 01 00 00    	je     c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af78:	89 d5                	mov    ebp,edx
c000af7a:	53                   	push   ebx
c000af7b:	53                   	push   ebx
c000af7c:	57                   	push   edi
c000af7d:	68 7e 13 02 c0       	push   0xc002137e
c000af82:	e8 be f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af87:	58                   	pop    eax
c000af88:	5a                   	pop    edx
c000af89:	55                   	push   ebp
c000af8a:	68 8c 13 02 c0       	push   0xc002138c
c000af8f:	e8 b1 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af9b:	e8 16 cb ff ff       	call   c0007ab6 <malloc>
c000afa0:	83 c4 0c             	add    esp,0xc
c000afa3:	89 c3                	mov    ebx,eax
c000afa5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000afab:	56                   	push   esi
c000afac:	50                   	push   eax
c000afad:	e8 96 08 00 00       	call   c000b848 <File::File(char const*, Process*)>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	85 db                	test   ebx,ebx
c000afb7:	0f 84 68 01 00 00    	je     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000afbd:	83 ec 0c             	sub    esp,0xc
c000afc0:	68 80 1f 02 c0       	push   0xc0021f80
c000afc5:	e8 7b f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000afca:	5a                   	pop    edx
c000afcb:	59                   	pop    ecx
c000afcc:	6a 01                	push   0x1
c000afce:	53                   	push   ebx
c000afcf:	e8 3c 09 00 00       	call   c000b910 <File::open(FileOpenMode)>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	85 c0                	test   eax,eax
c000afd9:	74 0b                	je     c000afe6 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe0:	53                   	push   ebx
c000afe1:	e9 39 01 00 00       	jmp    c000b11f <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afe6:	83 ec 0c             	sub    esp,0xc
c000afe9:	68 86 09 02 c0       	push   0xc0020986
c000afee:	e8 52 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff3:	58                   	pop    eax
c000aff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000affa:	56                   	push   esi
c000affb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afff:	52                   	push   edx
c000b000:	6a 00                	push   0x0
c000b002:	6a 08                	push   0x8
c000b004:	53                   	push   ebx
c000b005:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b008:	83 c4 20             	add    esp,0x20
c000b00b:	85 c0                	test   eax,eax
c000b00d:	0f 85 fe 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b013:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b018:	0f 85 f3 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	68 b2 1f 02 c0       	push   0xc0021fb2
c000b026:	e8 1a f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b02d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b031:	89 34 24             	mov    DWORD PTR [esp],esi
c000b034:	52                   	push   edx
c000b035:	6a 00                	push   0x0
c000b037:	6a 08                	push   0x8
c000b039:	53                   	push   ebx
c000b03a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b03d:	83 c4 20             	add    esp,0x20
c000b040:	85 c0                	test   eax,eax
c000b042:	0f 85 c9 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b048:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b04d:	0f 85 be 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b053:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b057:	0f 85 f9 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b05d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b061:	0f 85 ef 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b067:	83 ec 0c             	sub    esp,0xc
c000b06a:	68 9a 13 02 c0       	push   0xc002139a
c000b06f:	e8 d1 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b074:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b07c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b084:	83 c4 0c             	add    esp,0xc
c000b087:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b08b:	50                   	push   eax
c000b08c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b090:	50                   	push   eax
c000b091:	53                   	push   ebx
c000b092:	e8 7b 0b 00 00       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b09f:	75 70                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0a1:	31 ff                	xor    edi,edi
c000b0a3:	b8 0f 00 00 00       	mov    eax,0xf
c000b0a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0ac:	89 f8                	mov    eax,edi
c000b0ae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b0b2:	73 5d                	jae    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0b4:	83 ec 0c             	sub    esp,0xc
c000b0b7:	68 9a 13 02 c0       	push   0xc002139a
c000b0bc:	e8 84 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b0c9:	83 c0 f0             	add    eax,0xfffffff0
c000b0cc:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0d1:	83 d2 ff             	adc    edx,0xffffffff
c000b0d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	39 c1                	cmp    ecx,eax
c000b0e1:	19 d7                	sbb    edi,edx
c000b0e3:	72 40                	jb     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0e5:	83 ec 0c             	sub    esp,0xc
c000b0e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ea:	56                   	push   esi
c000b0eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0ef:	52                   	push   edx
c000b0f0:	50                   	push   eax
c000b0f1:	53                   	push   ebx
c000b0f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0f5:	83 c4 20             	add    esp,0x20
c000b0f8:	85 c0                	test   eax,eax
c000b0fa:	75 15                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b100:	89 c7                	mov    edi,eax
c000b102:	c1 ff 1f             	sar    edi,0x1f
c000b105:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b109:	75 06                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b10b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b10f:	74 19                	je     c000b12a <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	53                   	push   ebx
c000b115:	e8 54 08 00 00       	call   c000b96e <File::close()>
c000b11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b11c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b11f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	83 c8 ff             	or     eax,0xffffffff
c000b128:	eb 2e                	jmp    c000b158 <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	68 92 2a 02 c0       	push   0xc0022a92
c000b132:	e8 0e f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b13a:	e8 2f 08 00 00       	call   c000b96e <File::close()>
c000b13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b147:	c7 04 24 9d 13 02 c0 	mov    DWORD PTR [esp],0xc002139d
c000b14e:	e8 f2 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	31 c0                	xor    eax,eax
c000b158:	83 c4 3c             	add    esp,0x3c
c000b15b:	5b                   	pop    ebx
c000b15c:	5e                   	pop    esi
c000b15d:	5f                   	pop    edi
c000b15e:	5d                   	pop    ebp
c000b15f:	c3                   	ret    

c000b160 <KeCreateSymlink(char const*, char const*)>:
c000b160:	55                   	push   ebp
c000b161:	57                   	push   edi
c000b162:	56                   	push   esi
c000b163:	53                   	push   ebx
c000b164:	83 ec 38             	sub    esp,0x38
c000b167:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b16b:	68 14 01 00 00       	push   0x114
c000b170:	e8 41 c9 ff ff       	call   c0007ab6 <malloc>
c000b175:	83 c4 0c             	add    esp,0xc
c000b178:	89 c3                	mov    ebx,eax
c000b17a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b180:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b184:	50                   	push   eax
c000b185:	e8 be 06 00 00       	call   c000b848 <File::File(char const*, Process*)>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	b8 01 00 00 00       	mov    eax,0x1
c000b192:	85 db                	test   ebx,ebx
c000b194:	0f 84 fb 00 00 00    	je     c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b19a:	52                   	push   edx
c000b19b:	52                   	push   edx
c000b19c:	6a 12                	push   0x12
c000b19e:	53                   	push   ebx
c000b19f:	e8 6c 07 00 00       	call   c000b910 <File::open(FileOpenMode)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	85 c0                	test   eax,eax
c000b1a9:	74 0b                	je     c000b1b6 <KeCreateSymlink(char const*, char const*)+0x56>
c000b1ab:	83 ec 0c             	sub    esp,0xc
c000b1ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b0:	53                   	push   ebx
c000b1b1:	e9 d4 00 00 00       	jmp    c000b28a <KeCreateSymlink(char const*, char const*)+0x12a>
c000b1b6:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1ba:	be a0 13 02 c0       	mov    esi,0xc00213a0
c000b1bf:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c4:	fc                   	cld    
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1ca:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d0:	56                   	push   esi
c000b1d1:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1d5:	52                   	push   edx
c000b1d6:	6a 00                	push   0x0
c000b1d8:	6a 08                	push   0x8
c000b1da:	53                   	push   ebx
c000b1db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1de:	83 c4 20             	add    esp,0x20
c000b1e1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e6:	0f 85 90 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ec:	85 c0                	test   eax,eax
c000b1ee:	0f 85 88 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1f4:	e8 57 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1f9:	83 ec 0c             	sub    esp,0xc
c000b1fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b200:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b204:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b206:	56                   	push   esi
c000b207:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b20b:	52                   	push   edx
c000b20c:	6a 00                	push   0x0
c000b20e:	6a 08                	push   0x8
c000b210:	53                   	push   ebx
c000b211:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b214:	83 c4 20             	add    esp,0x20
c000b217:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b21c:	75 5e                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b21e:	85 c0                	test   eax,eax
c000b220:	75 5a                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b227:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b22a:	55                   	push   ebp
c000b22b:	e8 40 53 ff ff       	call   c0000570 <strlen>
c000b230:	89 34 24             	mov    DWORD PTR [esp],esi
c000b233:	31 d2                	xor    edx,edx
c000b235:	55                   	push   ebp
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	53                   	push   ebx
c000b239:	ff d7                	call   edi
c000b23b:	83 c4 14             	add    esp,0x14
c000b23e:	89 c6                	mov    esi,eax
c000b240:	55                   	push   ebp
c000b241:	e8 2a 53 ff ff       	call   c0000570 <strlen>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24d:	75 2d                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b24f:	85 f6                	test   esi,esi
c000b251:	75 29                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b253:	50                   	push   eax
c000b254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b258:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b25c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b260:	e8 30 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b268:	e8 01 07 00 00       	call   c000b96e <File::close()>
c000b26d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	31 c0                	xor    eax,eax
c000b27a:	eb 19                	jmp    c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	53                   	push   ebx
c000b280:	e8 e9 06 00 00       	call   c000b96e <File::close()>
c000b285:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	b8 01 00 00 00       	mov    eax,0x1
c000b295:	83 c4 2c             	add    esp,0x2c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    

c000b29d <KeInitialiseSymlinks()>:
c000b29d:	53                   	push   ebx
c000b29e:	83 ec 10             	sub    esp,0x10
c000b2a1:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b2ab:	6a 00                	push   0x0
c000b2ad:	68 90 ae 00 c0       	push   0xc000ae90
c000b2b2:	e8 f9 58 00 00       	call   c0010bb0 <KeRegisterAtexit(void (*)(void*), void*)>
c000b2b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b2be:	e8 f3 c7 ff ff       	call   c0007ab6 <malloc>
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	89 c3                	mov    ebx,eax
c000b2c8:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b2ce:	68 f8 12 02 c0       	push   0xc00212f8
c000b2d3:	50                   	push   eax
c000b2d4:	e8 6f 05 00 00       	call   c000b848 <File::File(char const*, Process*)>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	85 db                	test   ebx,ebx
c000b2de:	75 10                	jne    c000b2f0 <KeInitialiseSymlinks()+0x53>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	68 a9 13 02 c0       	push   0xc00213a9
c000b2e8:	e8 ac 60 00 00       	call   c0011399 <KePanic(char const*)>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	83 ec 0c             	sub    esp,0xc
c000b2f3:	53                   	push   ebx
c000b2f4:	e8 db 08 00 00       	call   c000bbd4 <File::exists()>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	84 c0                	test   al,al
c000b2fe:	75 2d                	jne    c000b32d <KeInitialiseSymlinks()+0x90>
c000b300:	52                   	push   edx
c000b301:	52                   	push   edx
c000b302:	6a 12                	push   0x12
c000b304:	53                   	push   ebx
c000b305:	e8 06 06 00 00       	call   c000b910 <File::open(FileOpenMode)>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	85 c0                	test   eax,eax
c000b30f:	74 10                	je     c000b321 <KeInitialiseSymlinks()+0x84>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	68 c6 13 02 c0       	push   0xc00213c6
c000b319:	e8 7b 60 00 00       	call   c0011399 <KePanic(char const*)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	83 ec 0c             	sub    esp,0xc
c000b324:	53                   	push   ebx
c000b325:	e8 44 06 00 00       	call   c000b96e <File::close()>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	85 db                	test   ebx,ebx
c000b32f:	74 0c                	je     c000b33d <KeInitialiseSymlinks()+0xa0>
c000b331:	83 ec 0c             	sub    esp,0xc
c000b334:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b336:	53                   	push   ebx
c000b337:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	50                   	push   eax
c000b33e:	50                   	push   eax
c000b33f:	68 e3 13 02 c0       	push   0xc00213e3
c000b344:	68 f1 13 02 c0       	push   0xc00213f1
c000b349:	e8 12 fe ff ff       	call   c000b160 <KeCreateSymlink(char const*, char const*)>
c000b34e:	83 c4 18             	add    esp,0x18
c000b351:	5b                   	pop    ebx
c000b352:	c3                   	ret    
c000b353:	90                   	nop

c000b354 <File::read(unsigned long long, void*, int*)>:
c000b354:	53                   	push   ebx
c000b355:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b359:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b35d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b364:	83 f8 19             	cmp    eax,0x19
c000b367:	77 35                	ja     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b369:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b370:	85 c0                	test   eax,eax
c000b372:	74 2a                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b374:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b37a:	85 c0                	test   eax,eax
c000b37c:	74 20                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b37e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b382:	74 21                	je     c000b3a5 <File::read(unsigned long long, void*, int*)+0x51>
c000b384:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b386:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b38a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b394:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b398:	5b                   	pop    ebx
c000b399:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b39c:	ff e0                	jmp    eax
c000b39e:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a3:	eb 05                	jmp    c000b3aa <File::read(unsigned long long, void*, int*)+0x56>
c000b3a5:	b8 05 00 00 00       	mov    eax,0x5
c000b3aa:	5b                   	pop    ebx
c000b3ab:	c3                   	ret    

c000b3ac <File::write(unsigned long long, void*, int*)>:
c000b3ac:	53                   	push   ebx
c000b3ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3bc:	83 f8 19             	cmp    eax,0x19
c000b3bf:	77 35                	ja     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3c1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	74 2a                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3cc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3d2:	85 c0                	test   eax,eax
c000b3d4:	74 20                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3da:	74 21                	je     c000b3fd <File::write(unsigned long long, void*, int*)+0x51>
c000b3dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3e2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3f0:	5b                   	pop    ebx
c000b3f1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3f4:	ff e0                	jmp    eax
c000b3f6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3fb:	eb 05                	jmp    c000b402 <File::write(unsigned long long, void*, int*)+0x56>
c000b3fd:	b8 05 00 00 00       	mov    eax,0x5
c000b402:	5b                   	pop    ebx
c000b403:	c3                   	ret    

c000b404 <Directory::read(unsigned long long, void*, int*)>:
c000b404:	53                   	push   ebx
c000b405:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b409:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b40d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b414:	83 f8 19             	cmp    eax,0x19
c000b417:	77 35                	ja     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b419:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b420:	85 c0                	test   eax,eax
c000b422:	74 2a                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b424:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b42a:	85 c0                	test   eax,eax
c000b42c:	74 20                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b42e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b432:	74 21                	je     c000b455 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b434:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b436:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b43a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b440:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b448:	5b                   	pop    ebx
c000b449:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b44c:	ff e0                	jmp    eax
c000b44e:	b8 0b 00 00 00       	mov    eax,0xb
c000b453:	eb 05                	jmp    c000b45a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b455:	b8 05 00 00 00       	mov    eax,0x5
c000b45a:	5b                   	pop    ebx
c000b45b:	c3                   	ret    

c000b45c <Directory::write(unsigned long long, void*, int*)>:
c000b45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b460:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b467:	b8 0b 00 00 00       	mov    eax,0xb
c000b46c:	83 fa 19             	cmp    edx,0x19
c000b46f:	77 18                	ja     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b471:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b478:	85 d2                	test   edx,edx
c000b47a:	74 0d                	je     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b47c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b483:	19 c0                	sbb    eax,eax
c000b485:	83 e0 0a             	and    eax,0xa
c000b488:	40                   	inc    eax
c000b489:	c3                   	ret    

c000b48a <File::isAtty()>:
c000b48a:	31 c0                	xor    eax,eax
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <Directory::isAtty()>:
c000b48e:	31 c0                	xor    eax,eax
c000b490:	c3                   	ret    
c000b491:	90                   	nop

c000b492 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b492:	b8 0a 00 00 00       	mov    eax,0xa
c000b497:	c3                   	ret    

c000b498 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b498:	b8 0a 00 00 00       	mov    eax,0xa
c000b49d:	c3                   	ret    

c000b49e <Filesystem::allocateSwapfile(char const*, int)>:
c000b49e:	31 c0                	xor    eax,eax
c000b4a0:	31 d2                	xor    edx,edx
c000b4a2:	c3                   	ret    
c000b4a3:	90                   	nop

c000b4a4 <File::~File()>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	ba c0 14 02 c0       	mov    edx,0xc00214c0
c000b4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b0:	89 10                	mov    DWORD PTR [eax],edx
c000b4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b6:	83 ec 0c             	sub    esp,0xc
c000b4b9:	50                   	push   eax
c000b4ba:	e8 e5 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	90                   	nop
c000b4c3:	83 c4 0c             	add    esp,0xc
c000b4c6:	c3                   	ret    
c000b4c7:	90                   	nop

c000b4c8 <File::~File()>:
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d2:	e8 cd ff ff ff       	call   c000b4a4 <File::~File()>
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	83 ec 08             	sub    esp,0x8
c000b4dd:	68 14 01 00 00       	push   0x114
c000b4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e6:	e8 2d f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	83 c4 0c             	add    esp,0xc
c000b4f1:	c3                   	ret    

c000b4f2 <Directory::~Directory()>:
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	ba dc 14 02 c0       	mov    edx,0xc00214dc
c000b4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fe:	89 10                	mov    DWORD PTR [eax],edx
c000b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b504:	83 ec 0c             	sub    esp,0xc
c000b507:	50                   	push   eax
c000b508:	e8 97 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b50d:	83 c4 10             	add    esp,0x10
c000b510:	90                   	nop
c000b511:	83 c4 0c             	add    esp,0xc
c000b514:	c3                   	ret    
c000b515:	90                   	nop

c000b516 <Directory::~Directory()>:
c000b516:	83 ec 0c             	sub    esp,0xc
c000b519:	83 ec 0c             	sub    esp,0xc
c000b51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b520:	e8 cd ff ff ff       	call   c000b4f2 <Directory::~Directory()>
c000b525:	83 c4 10             	add    esp,0x10
c000b528:	83 ec 08             	sub    esp,0x8
c000b52b:	68 14 01 00 00       	push   0x114
c000b530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b534:	e8 df f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b539:	83 c4 10             	add    esp,0x10
c000b53c:	83 c4 0c             	add    esp,0xc
c000b53f:	c3                   	ret    

c000b540 <Filesystem::Filesystem()>:
c000b540:	ba 54 14 02 c0       	mov    edx,0xc0021454
c000b545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b549:	89 10                	mov    DWORD PTR [eax],edx
c000b54b:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b555:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b561:	90                   	nop
c000b562:	c3                   	ret    
c000b563:	90                   	nop

c000b564 <Filesystem::~Filesystem()>:
c000b564:	ba 54 14 02 c0       	mov    edx,0xc0021454
c000b569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b56d:	89 10                	mov    DWORD PTR [eax],edx
c000b56f:	90                   	nop
c000b570:	c3                   	ret    
c000b571:	90                   	nop

c000b572 <Filesystem::~Filesystem()>:
c000b572:	83 ec 0c             	sub    esp,0xc
c000b575:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b579:	e8 e6 ff ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c000b57e:	83 c4 04             	add    esp,0x4
c000b581:	83 ec 08             	sub    esp,0x8
c000b584:	6a 08                	push   0x8
c000b586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58a:	e8 89 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b58f:	83 c4 10             	add    esp,0x10
c000b592:	83 c4 0c             	add    esp,0xc
c000b595:	c3                   	ret    

c000b596 <Fs::getcwd(Process*, char*, int)>:
c000b596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b59a:	31 c0                	xor    eax,eax
c000b59c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b59f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b5a3:	7d 15                	jge    c000b5ba <Fs::getcwd(Process*, char*, int)+0x24>
c000b5a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b5a9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b5b0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b5b3:	84 c9                	test   cl,cl
c000b5b5:	74 06                	je     c000b5bd <Fs::getcwd(Process*, char*, int)+0x27>
c000b5b7:	40                   	inc    eax
c000b5b8:	eb e2                	jmp    c000b59c <Fs::getcwd(Process*, char*, int)+0x6>
c000b5ba:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b5bd:	31 c0                	xor    eax,eax
c000b5bf:	c3                   	ret    

c000b5c0 <Fs::initVFS()>:
c000b5c0:	83 ec 18             	sub    esp,0x18
c000b5c3:	6a 08                	push   0x8
c000b5c5:	e8 ec c4 ff ff       	call   c0007ab6 <malloc>
c000b5ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5cd:	e8 f2 e1 00 00       	call   c00197c4 <FAT::FAT()>
c000b5d2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b5d9:	e8 d8 c4 ff ff       	call   c0007ab6 <malloc>
c000b5de:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5e1:	e8 0a f1 00 00       	call   c001a6f0 <ISO9660::ISO9660()>
c000b5e6:	83 c4 1c             	add    esp,0x1c
c000b5e9:	c3                   	ret    

c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ea:	55                   	push   ebp
c000b5eb:	57                   	push   edi
c000b5ec:	56                   	push   esi
c000b5ed:	53                   	push   ebx
c000b5ee:	81 ec 10 04 00 00    	sub    esp,0x410
c000b5f4:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b5fb:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b602:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b60a:	68 00 04 00 00       	push   0x400
c000b60f:	6a 00                	push   0x0
c000b611:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b615:	57                   	push   edi
c000b616:	e8 d5 4e ff ff       	call   c00004f0 <memset>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b622:	75 0b                	jne    c000b62f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b624:	50                   	push   eax
c000b625:	50                   	push   eax
c000b626:	55                   	push   ebp
c000b627:	57                   	push   edi
c000b628:	e8 13 50 ff ff       	call   c0000640 <strcpy>
c000b62d:	eb 51                	jmp    c000b680 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b62f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b633:	83 f8 5c             	cmp    eax,0x5c
c000b636:	74 05                	je     c000b63d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b638:	83 f8 2f             	cmp    eax,0x2f
c000b63b:	75 1e                	jne    c000b65b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b63d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b644:	8a 00                	mov    al,BYTE PTR [eax]
c000b646:	3c 60                	cmp    al,0x60
c000b648:	7e 03                	jle    c000b64d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b64a:	83 e8 20             	sub    eax,0x20
c000b64d:	88 04 24             	mov    BYTE PTR [esp],al
c000b650:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b657:	50                   	push   eax
c000b658:	50                   	push   eax
c000b659:	eb 1e                	jmp    c000b679 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b65b:	50                   	push   eax
c000b65c:	50                   	push   eax
c000b65d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b664:	57                   	push   edi
c000b665:	e8 d6 4f ff ff       	call   c0000640 <strcpy>
c000b66a:	58                   	pop    eax
c000b66b:	5a                   	pop    edx
c000b66c:	68 03 24 02 c0       	push   0xc0022403
c000b671:	57                   	push   edi
c000b672:	e8 c9 51 ff ff       	call   c0000840 <strcat>
c000b677:	59                   	pop    ecx
c000b678:	58                   	pop    eax
c000b679:	55                   	push   ebp
c000b67a:	57                   	push   edi
c000b67b:	e8 c0 51 ff ff       	call   c0000840 <strcat>
c000b680:	83 c4 10             	add    esp,0x10
c000b683:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b686:	3c 60                	cmp    al,0x60
c000b688:	7e 03                	jle    c000b68d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b68a:	83 e8 20             	sub    eax,0x20
c000b68d:	88 04 24             	mov    BYTE PTR [esp],al
c000b690:	88 06                	mov    BYTE PTR [esi],al
c000b692:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b699:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b69f:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b6a3:	bf 03 00 00 00       	mov    edi,0x3
c000b6a8:	b8 03 00 00 00       	mov    eax,0x3
c000b6ad:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b6b1:	89 e9                	mov    ecx,ebp
c000b6b3:	85 ed                	test   ebp,ebp
c000b6b5:	0f 84 97 00 00 00    	je     c000b752 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b6bb:	8d 57 01             	lea    edx,[edi+0x1]
c000b6be:	83 fd 2f             	cmp    ebp,0x2f
c000b6c1:	74 05                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b6c3:	83 fd 5c             	cmp    ebp,0x5c
c000b6c6:	75 12                	jne    c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6c8:	89 c5                	mov    ebp,eax
c000b6ca:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b6cf:	74 09                	je     c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d1:	40                   	inc    eax
c000b6d2:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b6d6:	89 d7                	mov    edi,edx
c000b6d8:	eb d3                	jmp    c000b6ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6da:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b6df:	0f be e9             	movsx  ebp,cl
c000b6e2:	75 5e                	jne    c000b742 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e4:	83 fd 2e             	cmp    ebp,0x2e
c000b6e7:	75 59                	jne    c000b742 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e9:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b6ed:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b6f2:	74 18                	je     c000b70c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b6f4:	83 fd 2e             	cmp    ebp,0x2e
c000b6f7:	74 53                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b6f9:	89 fa                	mov    edx,edi
c000b6fb:	42                   	inc    edx
c000b6fc:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b700:	83 f9 2f             	cmp    ecx,0x2f
c000b703:	74 f6                	je     c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b705:	83 f9 5c             	cmp    ecx,0x5c
c000b708:	74 f1                	je     c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b70a:	eb ca                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b70c:	83 fd 2e             	cmp    ebp,0x2e
c000b70f:	74 3b                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b711:	83 f8 03             	cmp    eax,0x3
c000b714:	74 c0                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b716:	42                   	inc    edx
c000b717:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b71b:	83 f9 5c             	cmp    ecx,0x5c
c000b71e:	74 f6                	je     c000b716 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b720:	83 f9 2f             	cmp    ecx,0x2f
c000b723:	74 f1                	je     c000b716 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b725:	48                   	dec    eax
c000b726:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b72a:	75 06                	jne    c000b732 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b72c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b730:	eb f3                	jmp    c000b725 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b732:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b736:	74 07                	je     c000b73f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b738:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b73c:	48                   	dec    eax
c000b73d:	eb f3                	jmp    c000b732 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b73f:	40                   	inc    eax
c000b740:	eb 94                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b742:	83 fd 5c             	cmp    ebp,0x5c
c000b745:	74 8f                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b747:	83 fd 2f             	cmp    ebp,0x2f
c000b74a:	74 8a                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b74c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b74f:	40                   	inc    eax
c000b750:	eb 84                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b752:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b756:	83 ec 0c             	sub    esp,0xc
c000b759:	56                   	push   esi
c000b75a:	e8 11 4e ff ff       	call   c0000570 <strlen>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b767:	75 26                	jne    c000b78f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a5>
c000b769:	83 ec 0c             	sub    esp,0xc
c000b76c:	56                   	push   esi
c000b76d:	e8 fe 4d ff ff       	call   c0000570 <strlen>
c000b772:	83 c4 10             	add    esp,0x10
c000b775:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b77a:	74 26                	je     c000b7a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1b8>
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	56                   	push   esi
c000b780:	e8 eb 4d ff ff       	call   c0000570 <strlen>
c000b785:	83 c4 10             	add    esp,0x10
c000b788:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b78d:	eb c7                	jmp    c000b756 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b78f:	83 ec 0c             	sub    esp,0xc
c000b792:	56                   	push   esi
c000b793:	e8 d8 4d ff ff       	call   c0000570 <strlen>
c000b798:	83 c4 10             	add    esp,0x10
c000b79b:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b7a0:	74 c7                	je     c000b769 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17f>
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	56                   	push   esi
c000b7a6:	e8 c5 4d ff ff       	call   c0000570 <strlen>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	80 7c 06 ff 40       	cmp    BYTE PTR [esi+eax*1-0x1],0x40
c000b7b3:	74 04                	je     c000b7b9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000b7b5:	31 ff                	xor    edi,edi
c000b7b7:	eb 66                	jmp    c000b81f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x235>
c000b7b9:	83 ec 0c             	sub    esp,0xc
c000b7bc:	56                   	push   esi
c000b7bd:	e8 ae 4d ff ff       	call   c0000570 <strlen>
c000b7c2:	83 c4 10             	add    esp,0x10
c000b7c5:	80 7c 06 fe 40       	cmp    BYTE PTR [esi+eax*1-0x2],0x40
c000b7ca:	75 e9                	jne    c000b7b5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cb>
c000b7cc:	83 ec 0c             	sub    esp,0xc
c000b7cf:	56                   	push   esi
c000b7d0:	e8 9b 4d ff ff       	call   c0000570 <strlen>
c000b7d5:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b7da:	89 34 24             	mov    DWORD PTR [esp],esi
c000b7dd:	e8 8e 4d ff ff       	call   c0000570 <strlen>
c000b7e2:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b7e7:	5b                   	pop    ebx
c000b7e8:	5f                   	pop    edi
c000b7e9:	56                   	push   esi
c000b7ea:	68 0f 14 02 c0       	push   0xc002140f
c000b7ef:	e8 51 f1 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b7f4:	83 c4 10             	add    esp,0x10
c000b7f7:	eb 43                	jmp    c000b83c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x252>
c000b7f9:	50                   	push   eax
c000b7fa:	50                   	push   eax
c000b7fb:	56                   	push   esi
c000b7fc:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b800:	55                   	push   ebp
c000b801:	e8 3a 4e ff ff       	call   c0000640 <strcpy>
c000b806:	5a                   	pop    edx
c000b807:	59                   	pop    ecx
c000b808:	56                   	push   esi
c000b809:	55                   	push   ebp
c000b80a:	e8 3c f7 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	48                   	dec    eax
c000b813:	75 27                	jne    c000b83c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x252>
c000b815:	8d 47 01             	lea    eax,[edi+0x1]
c000b818:	83 ff 14             	cmp    edi,0x14
c000b81b:	74 08                	je     c000b825 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x23b>
c000b81d:	89 c7                	mov    edi,eax
c000b81f:	85 db                	test   ebx,ebx
c000b821:	75 d6                	jne    c000b7f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000b823:	eb 17                	jmp    c000b83c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x252>
c000b825:	83 ec 0c             	sub    esp,0xc
c000b828:	bf 15 00 00 00       	mov    edi,0x15
c000b82d:	68 24 14 02 c0       	push   0xc0021424
c000b832:	e8 62 5b 00 00       	call   c0011399 <KePanic(char const*)>
c000b837:	83 c4 10             	add    esp,0x10
c000b83a:	eb e3                	jmp    c000b81f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x235>
c000b83c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b842:	5b                   	pop    ebx
c000b843:	5e                   	pop    esi
c000b844:	5f                   	pop    edi
c000b845:	5d                   	pop    ebp
c000b846:	c3                   	ret    
c000b847:	90                   	nop

c000b848 <File::File(char const*, Process*)>:
c000b848:	83 ec 0c             	sub    esp,0xc
c000b84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b84f:	83 ec 08             	sub    esp,0x8
c000b852:	6a 00                	push   0x0
c000b854:	50                   	push   eax
c000b855:	e8 64 d9 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b85a:	83 c4 10             	add    esp,0x10
c000b85d:	ba c0 14 02 c0       	mov    edx,0xc00214c0
c000b862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b866:	89 10                	mov    DWORD PTR [eax],edx
c000b868:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b86d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000b871:	0f 95 c0             	setne  al
c000b874:	0f b6 c0             	movzx  eax,al
c000b877:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b87b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b881:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b885:	83 c2 0d             	add    edx,0xd
c000b888:	50                   	push   eax
c000b889:	51                   	push   ecx
c000b88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88e:	52                   	push   edx
c000b88f:	e8 56 fd ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b894:	83 c4 10             	add    esp,0x10
c000b897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b89b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b89e:	83 e8 41             	sub    eax,0x41
c000b8a1:	88 c2                	mov    dl,al
c000b8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8bf:	0f b6 c0             	movzx  eax,al
c000b8c2:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8c9:	85 c0                	test   eax,eax
c000b8cb:	74 3e                	je     c000b90b <File::File(char const*, Process*)+0xc3>
c000b8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8d7:	0f b6 c0             	movzx  eax,al
c000b8da:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8e1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8e7:	85 c0                	test   eax,eax
c000b8e9:	75 20                	jne    c000b90b <File::File(char const*, Process*)+0xc3>
c000b8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ef:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8f5:	0f b6 c0             	movzx  eax,al
c000b8f8:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8ff:	83 ec 0c             	sub    esp,0xc
c000b902:	50                   	push   eax
c000b903:	e8 82 21 00 00       	call   c000da8a <LogicalDisk::mount()>
c000b908:	83 c4 10             	add    esp,0x10
c000b90b:	90                   	nop
c000b90c:	83 c4 0c             	add    esp,0xc
c000b90f:	c3                   	ret    

c000b910 <File::open(FileOpenMode)>:
c000b910:	53                   	push   ebx
c000b911:	b8 0b 00 00 00       	mov    eax,0xb
c000b916:	83 ec 08             	sub    esp,0x8
c000b919:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b91d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b924:	83 fa 19             	cmp    edx,0x19
c000b927:	77 40                	ja     c000b969 <File::open(FileOpenMode)+0x59>
c000b929:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b930:	85 d2                	test   edx,edx
c000b932:	74 35                	je     c000b969 <File::open(FileOpenMode)+0x59>
c000b934:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b93a:	85 d2                	test   edx,edx
c000b93c:	74 2b                	je     c000b969 <File::open(FileOpenMode)+0x59>
c000b93e:	b8 06 00 00 00       	mov    eax,0x6
c000b943:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b947:	75 20                	jne    c000b969 <File::open(FileOpenMode)+0x59>
c000b949:	8b 02                	mov    eax,DWORD PTR [edx]
c000b94b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b951:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b955:	51                   	push   ecx
c000b956:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b959:	51                   	push   ecx
c000b95a:	52                   	push   edx
c000b95b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b95e:	83 c4 10             	add    esp,0x10
c000b961:	85 c0                	test   eax,eax
c000b963:	75 04                	jne    c000b969 <File::open(FileOpenMode)+0x59>
c000b965:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b969:	83 c4 08             	add    esp,0x8
c000b96c:	5b                   	pop    ebx
c000b96d:	c3                   	ret    

c000b96e <File::close()>:
c000b96e:	53                   	push   ebx
c000b96f:	b8 0b 00 00 00       	mov    eax,0xb
c000b974:	83 ec 08             	sub    esp,0x8
c000b977:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b97b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b982:	83 f9 19             	cmp    ecx,0x19
c000b985:	77 41                	ja     c000b9c8 <File::close()+0x5a>
c000b987:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b98e:	85 db                	test   ebx,ebx
c000b990:	74 36                	je     c000b9c8 <File::close()+0x5a>
c000b992:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b999:	74 2d                	je     c000b9c8 <File::close()+0x5a>
c000b99b:	b8 05 00 00 00       	mov    eax,0x5
c000b9a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9a4:	74 22                	je     c000b9c8 <File::close()+0x5a>
c000b9a6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b9aa:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b9b1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b9b7:	53                   	push   ebx
c000b9b8:	53                   	push   ebx
c000b9b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b9bb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b9c1:	50                   	push   eax
c000b9c2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b9c5:	83 c4 10             	add    esp,0x10
c000b9c8:	83 c4 08             	add    esp,0x8
c000b9cb:	5b                   	pop    ebx
c000b9cc:	c3                   	ret    
c000b9cd:	90                   	nop

c000b9ce <File::seek(unsigned long long)>:
c000b9ce:	56                   	push   esi
c000b9cf:	53                   	push   ebx
c000b9d0:	b8 0b 00 00 00       	mov    eax,0xb
c000b9d5:	51                   	push   ecx
c000b9d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9de:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9e9:	83 fa 19             	cmp    edx,0x19
c000b9ec:	77 31                	ja     c000ba1f <File::seek(unsigned long long)+0x51>
c000b9ee:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9f5:	85 d2                	test   edx,edx
c000b9f7:	74 26                	je     c000ba1f <File::seek(unsigned long long)+0x51>
c000b9f9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9ff:	85 d2                	test   edx,edx
c000ba01:	74 1c                	je     c000ba1f <File::seek(unsigned long long)+0x51>
c000ba03:	b8 05 00 00 00       	mov    eax,0x5
c000ba08:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba0c:	74 11                	je     c000ba1f <File::seek(unsigned long long)+0x51>
c000ba0e:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba10:	53                   	push   ebx
c000ba11:	51                   	push   ecx
c000ba12:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba18:	52                   	push   edx
c000ba19:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	5a                   	pop    edx
c000ba20:	5b                   	pop    ebx
c000ba21:	5e                   	pop    esi
c000ba22:	c3                   	ret    
c000ba23:	90                   	nop

c000ba24 <File::truncate(unsigned long long)>:
c000ba24:	56                   	push   esi
c000ba25:	53                   	push   ebx
c000ba26:	b8 0b 00 00 00       	mov    eax,0xb
c000ba2b:	51                   	push   ecx
c000ba2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba34:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba3f:	83 fa 19             	cmp    edx,0x19
c000ba42:	77 31                	ja     c000ba75 <File::truncate(unsigned long long)+0x51>
c000ba44:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba4b:	85 d2                	test   edx,edx
c000ba4d:	74 26                	je     c000ba75 <File::truncate(unsigned long long)+0x51>
c000ba4f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba55:	85 d2                	test   edx,edx
c000ba57:	74 1c                	je     c000ba75 <File::truncate(unsigned long long)+0x51>
c000ba59:	b8 05 00 00 00       	mov    eax,0x5
c000ba5e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba62:	74 11                	je     c000ba75 <File::truncate(unsigned long long)+0x51>
c000ba64:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba66:	53                   	push   ebx
c000ba67:	51                   	push   ecx
c000ba68:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba6e:	52                   	push   edx
c000ba6f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	5a                   	pop    edx
c000ba76:	5b                   	pop    ebx
c000ba77:	5e                   	pop    esi
c000ba78:	c3                   	ret    
c000ba79:	90                   	nop

c000ba7a <File::tell(unsigned long long*)>:
c000ba7a:	83 ec 0c             	sub    esp,0xc
c000ba7d:	b8 0b 00 00 00       	mov    eax,0xb
c000ba82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba86:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba8d:	83 fa 19             	cmp    edx,0x19
c000ba90:	77 34                	ja     c000bac6 <File::tell(unsigned long long*)+0x4c>
c000ba92:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba99:	85 d2                	test   edx,edx
c000ba9b:	74 29                	je     c000bac6 <File::tell(unsigned long long*)+0x4c>
c000ba9d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000baa3:	85 d2                	test   edx,edx
c000baa5:	74 1f                	je     c000bac6 <File::tell(unsigned long long*)+0x4c>
c000baa7:	b8 05 00 00 00       	mov    eax,0x5
c000baac:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bab0:	74 14                	je     c000bac6 <File::tell(unsigned long long*)+0x4c>
c000bab2:	50                   	push   eax
c000bab3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bab5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bab9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000babf:	52                   	push   edx
c000bac0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bac3:	83 c4 10             	add    esp,0x10
c000bac6:	83 c4 0c             	add    esp,0xc
c000bac9:	c3                   	ret    

c000baca <File::rewind()>:
c000baca:	83 ec 10             	sub    esp,0x10
c000bacd:	6a 00                	push   0x0
c000bacf:	6a 00                	push   0x0
c000bad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad5:	e8 f4 fe ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c000bada:	83 c4 1c             	add    esp,0x1c
c000badd:	c3                   	ret    

c000bade <File::unlink()>:
c000bade:	83 ec 0c             	sub    esp,0xc
c000bae1:	b8 0b 00 00 00       	mov    eax,0xb
c000bae6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baf1:	83 f9 19             	cmp    ecx,0x19
c000baf4:	77 2f                	ja     c000bb25 <File::unlink()+0x47>
c000baf6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bafd:	85 c9                	test   ecx,ecx
c000baff:	74 24                	je     c000bb25 <File::unlink()+0x47>
c000bb01:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb07:	85 c9                	test   ecx,ecx
c000bb09:	74 1a                	je     c000bb25 <File::unlink()+0x47>
c000bb0b:	b8 06 00 00 00       	mov    eax,0x6
c000bb10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb14:	75 0f                	jne    c000bb25 <File::unlink()+0x47>
c000bb16:	83 c2 0d             	add    edx,0xd
c000bb19:	50                   	push   eax
c000bb1a:	50                   	push   eax
c000bb1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb1d:	52                   	push   edx
c000bb1e:	51                   	push   ecx
c000bb1f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	83 c4 0c             	add    esp,0xc
c000bb28:	c3                   	ret    
c000bb29:	90                   	nop

c000bb2a <File::rename(char const*)>:
c000bb2a:	83 ec 0c             	sub    esp,0xc
c000bb2d:	b8 0b 00 00 00       	mov    eax,0xb
c000bb32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb3d:	83 f9 19             	cmp    ecx,0x19
c000bb40:	77 32                	ja     c000bb74 <File::rename(char const*)+0x4a>
c000bb42:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb49:	85 c9                	test   ecx,ecx
c000bb4b:	74 27                	je     c000bb74 <File::rename(char const*)+0x4a>
c000bb4d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb53:	85 c9                	test   ecx,ecx
c000bb55:	74 1d                	je     c000bb74 <File::rename(char const*)+0x4a>
c000bb57:	b8 06 00 00 00       	mov    eax,0x6
c000bb5c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb60:	75 12                	jne    c000bb74 <File::rename(char const*)+0x4a>
c000bb62:	83 c2 0d             	add    edx,0xd
c000bb65:	50                   	push   eax
c000bb66:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb6c:	52                   	push   edx
c000bb6d:	51                   	push   ecx
c000bb6e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb71:	83 c4 10             	add    esp,0x10
c000bb74:	83 c4 0c             	add    esp,0xc
c000bb77:	c3                   	ret    

c000bb78 <File::chfatattr(unsigned char, unsigned char)>:
c000bb78:	57                   	push   edi
c000bb79:	b8 0b 00 00 00       	mov    eax,0xb
c000bb7e:	56                   	push   esi
c000bb7f:	53                   	push   ebx
c000bb80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb8f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb93:	83 f9 19             	cmp    ecx,0x19
c000bb96:	77 37                	ja     c000bbcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb98:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb9f:	85 c9                	test   ecx,ecx
c000bba1:	74 2c                	je     c000bbcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bba3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bba9:	85 c9                	test   ecx,ecx
c000bbab:	74 22                	je     c000bbcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbad:	b8 06 00 00 00       	mov    eax,0x6
c000bbb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbb6:	75 17                	jne    c000bbcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbb8:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bbba:	89 f0                	mov    eax,esi
c000bbbc:	83 c2 0d             	add    edx,0xd
c000bbbf:	0f b6 f0             	movzx  esi,al
c000bbc2:	0f b6 db             	movzx  ebx,bl
c000bbc5:	56                   	push   esi
c000bbc6:	53                   	push   ebx
c000bbc7:	52                   	push   edx
c000bbc8:	51                   	push   ecx
c000bbc9:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bbcc:	83 c4 10             	add    esp,0x10
c000bbcf:	5b                   	pop    ebx
c000bbd0:	5e                   	pop    esi
c000bbd1:	5f                   	pop    edi
c000bbd2:	c3                   	ret    
c000bbd3:	90                   	nop

c000bbd4 <File::exists()>:
c000bbd4:	83 ec 0c             	sub    esp,0xc
c000bbd7:	31 c0                	xor    eax,eax
c000bbd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbdd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe4:	83 f9 19             	cmp    ecx,0x19
c000bbe7:	77 24                	ja     c000bc0d <File::exists()+0x39>
c000bbe9:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbf0:	85 c9                	test   ecx,ecx
c000bbf2:	74 19                	je     c000bc0d <File::exists()+0x39>
c000bbf4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbfa:	85 c9                	test   ecx,ecx
c000bbfc:	74 0f                	je     c000bc0d <File::exists()+0x39>
c000bbfe:	83 c2 0d             	add    edx,0xd
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc05:	52                   	push   edx
c000bc06:	51                   	push   ecx
c000bc07:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bc0a:	83 c4 10             	add    esp,0x10
c000bc0d:	83 c4 0c             	add    esp,0xc
c000bc10:	c3                   	ret    
c000bc11:	90                   	nop

c000bc12 <File::stat(unsigned long long*, bool*)>:
c000bc12:	56                   	push   esi
c000bc13:	53                   	push   ebx
c000bc14:	50                   	push   eax
c000bc15:	b8 0b 00 00 00       	mov    eax,0xb
c000bc1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc1e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc22:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc2d:	83 f9 19             	cmp    ecx,0x19
c000bc30:	77 3d                	ja     c000bc6f <File::stat(unsigned long long*, bool*)+0x5d>
c000bc32:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc39:	85 c9                	test   ecx,ecx
c000bc3b:	74 32                	je     c000bc6f <File::stat(unsigned long long*, bool*)+0x5d>
c000bc3d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc43:	85 c9                	test   ecx,ecx
c000bc45:	74 28                	je     c000bc6f <File::stat(unsigned long long*, bool*)+0x5d>
c000bc47:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc49:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc4d:	74 13                	je     c000bc62 <File::stat(unsigned long long*, bool*)+0x50>
c000bc4f:	83 ec 04             	sub    esp,0x4
c000bc52:	56                   	push   esi
c000bc53:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc59:	51                   	push   ecx
c000bc5a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc5d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc60:	eb 0a                	jmp    c000bc6c <File::stat(unsigned long long*, bool*)+0x5a>
c000bc62:	53                   	push   ebx
c000bc63:	83 c2 0d             	add    edx,0xd
c000bc66:	56                   	push   esi
c000bc67:	52                   	push   edx
c000bc68:	51                   	push   ecx
c000bc69:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	5a                   	pop    edx
c000bc70:	5b                   	pop    ebx
c000bc71:	5e                   	pop    esi
c000bc72:	c3                   	ret    

c000bc73 <Fs::setcwd(Process*, char*)>:
c000bc73:	55                   	push   ebp
c000bc74:	57                   	push   edi
c000bc75:	56                   	push   esi
c000bc76:	53                   	push   ebx
c000bc77:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc7d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc84:	6a 00                	push   0x0
c000bc86:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc8c:	57                   	push   edi
c000bc8d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc94:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc98:	56                   	push   esi
c000bc99:	e8 4c f9 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc9e:	89 34 24             	mov    DWORD PTR [esp],esi
c000bca1:	e8 ca 48 ff ff       	call   c0000570 <strlen>
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	83 f8 02             	cmp    eax,0x2
c000bcac:	77 15                	ja     c000bcc3 <Fs::setcwd(Process*, char*)+0x50>
c000bcae:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bcb3:	83 eb 41             	sub    ebx,0x41
c000bcb6:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bcbd:	85 c0                	test   eax,eax
c000bcbf:	75 1c                	jne    c000bcdd <Fs::setcwd(Process*, char*)+0x6a>
c000bcc1:	eb 2f                	jmp    c000bcf2 <Fs::setcwd(Process*, char*)+0x7f>
c000bcc3:	83 ec 0c             	sub    esp,0xc
c000bcc6:	56                   	push   esi
c000bcc7:	e8 a4 48 ff ff       	call   c0000570 <strlen>
c000bccc:	83 c4 10             	add    esp,0x10
c000bccf:	83 f8 03             	cmp    eax,0x3
c000bcd2:	75 57                	jne    c000bd2b <Fs::setcwd(Process*, char*)+0xb8>
c000bcd4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bcd9:	75 50                	jne    c000bd2b <Fs::setcwd(Process*, char*)+0xb8>
c000bcdb:	eb d1                	jmp    c000bcae <Fs::setcwd(Process*, char*)+0x3b>
c000bcdd:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bce4:	75 0c                	jne    c000bcf2 <Fs::setcwd(Process*, char*)+0x7f>
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	50                   	push   eax
c000bcea:	e8 9b 1d 00 00       	call   c000da8a <LogicalDisk::mount()>
c000bcef:	83 c4 10             	add    esp,0x10
c000bcf2:	b8 03 00 00 00       	mov    eax,0x3
c000bcf7:	83 fb 19             	cmp    ebx,0x19
c000bcfa:	0f 87 c6 00 00 00    	ja     c000bdc6 <Fs::setcwd(Process*, char*)+0x153>
c000bd00:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bd07:	b8 05 00 00 00       	mov    eax,0x5
c000bd0c:	85 d2                	test   edx,edx
c000bd0e:	0f 84 b2 00 00 00    	je     c000bdc6 <Fs::setcwd(Process*, char*)+0x153>
c000bd14:	b8 06 00 00 00       	mov    eax,0x6
c000bd19:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bd20:	0f 85 92 00 00 00    	jne    c000bdb8 <Fs::setcwd(Process*, char*)+0x145>
c000bd26:	e9 9b 00 00 00       	jmp    c000bdc6 <Fs::setcwd(Process*, char*)+0x153>
c000bd2b:	83 ec 0c             	sub    esp,0xc
c000bd2e:	68 14 01 00 00       	push   0x114
c000bd33:	e8 7e bd ff ff       	call   c0007ab6 <malloc>
c000bd38:	83 c4 0c             	add    esp,0xc
c000bd3b:	89 c3                	mov    ebx,eax
c000bd3d:	55                   	push   ebp
c000bd3e:	56                   	push   esi
c000bd3f:	50                   	push   eax
c000bd40:	e8 03 fb ff ff       	call   c000b848 <File::File(char const*, Process*)>
c000bd45:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd4a:	83 c4 0c             	add    esp,0xc
c000bd4d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd51:	50                   	push   eax
c000bd52:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd56:	50                   	push   eax
c000bd57:	53                   	push   ebx
c000bd58:	e8 b5 fe ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c000bd5d:	83 c4 10             	add    esp,0x10
c000bd60:	83 f8 02             	cmp    eax,0x2
c000bd63:	74 27                	je     c000bd8c <Fs::setcwd(Process*, char*)+0x119>
c000bd65:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd6a:	75 1c                	jne    c000bd88 <Fs::setcwd(Process*, char*)+0x115>
c000bd6c:	b8 02 00 00 00       	mov    eax,0x2
c000bd71:	85 db                	test   ebx,ebx
c000bd73:	74 51                	je     c000bdc6 <Fs::setcwd(Process*, char*)+0x153>
c000bd75:	83 ec 0c             	sub    esp,0xc
c000bd78:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd7a:	53                   	push   ebx
c000bd7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd7e:	83 c4 10             	add    esp,0x10
c000bd81:	b8 02 00 00 00       	mov    eax,0x2
c000bd86:	eb 3e                	jmp    c000bdc6 <Fs::setcwd(Process*, char*)+0x153>
c000bd88:	85 c0                	test   eax,eax
c000bd8a:	74 1c                	je     c000bda8 <Fs::setcwd(Process*, char*)+0x135>
c000bd8c:	b8 01 00 00 00       	mov    eax,0x1
c000bd91:	85 db                	test   ebx,ebx
c000bd93:	74 31                	je     c000bdc6 <Fs::setcwd(Process*, char*)+0x153>
c000bd95:	83 ec 0c             	sub    esp,0xc
c000bd98:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd9a:	53                   	push   ebx
c000bd9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd9e:	83 c4 10             	add    esp,0x10
c000bda1:	b8 01 00 00 00       	mov    eax,0x1
c000bda6:	eb 1e                	jmp    c000bdc6 <Fs::setcwd(Process*, char*)+0x153>
c000bda8:	85 db                	test   ebx,ebx
c000bdaa:	74 0c                	je     c000bdb8 <Fs::setcwd(Process*, char*)+0x145>
c000bdac:	83 ec 0c             	sub    esp,0xc
c000bdaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bdb1:	53                   	push   ebx
c000bdb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bdb5:	83 c4 10             	add    esp,0x10
c000bdb8:	50                   	push   eax
c000bdb9:	50                   	push   eax
c000bdba:	56                   	push   esi
c000bdbb:	57                   	push   edi
c000bdbc:	e8 7f 48 ff ff       	call   c0000640 <strcpy>
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	31 c0                	xor    eax,eax
c000bdc6:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bdcc:	5b                   	pop    ebx
c000bdcd:	5e                   	pop    esi
c000bdce:	5f                   	pop    edi
c000bdcf:	5d                   	pop    ebp
c000bdd0:	c3                   	ret    
c000bdd1:	90                   	nop

c000bdd2 <Directory::Directory(char const*, Process*)>:
c000bdd2:	83 ec 0c             	sub    esp,0xc
c000bdd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd9:	83 ec 08             	sub    esp,0x8
c000bddc:	6a 00                	push   0x0
c000bdde:	50                   	push   eax
c000bddf:	e8 da d3 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bde4:	83 c4 10             	add    esp,0x10
c000bde7:	ba dc 14 02 c0       	mov    edx,0xc00214dc
c000bdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf0:	89 10                	mov    DWORD PTR [eax],edx
c000bdf2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdf7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bdfb:	0f 95 c0             	setne  al
c000bdfe:	0f b6 c0             	movzx  eax,al
c000be01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be05:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000be0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be0f:	83 c2 0d             	add    edx,0xd
c000be12:	50                   	push   eax
c000be13:	51                   	push   ecx
c000be14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be18:	52                   	push   edx
c000be19:	e8 cc f7 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be1e:	83 c4 10             	add    esp,0x10
c000be21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be25:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000be28:	83 e8 41             	sub    eax,0x41
c000be2b:	88 c2                	mov    dl,al
c000be2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be31:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000be37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000be3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be43:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be49:	0f b6 c0             	movzx  eax,al
c000be4c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be53:	85 c0                	test   eax,eax
c000be55:	74 3e                	je     c000be95 <Directory::Directory(char const*, Process*)+0xc3>
c000be57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be61:	0f b6 c0             	movzx  eax,al
c000be64:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be6b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be71:	85 c0                	test   eax,eax
c000be73:	75 20                	jne    c000be95 <Directory::Directory(char const*, Process*)+0xc3>
c000be75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be79:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be7f:	0f b6 c0             	movzx  eax,al
c000be82:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be89:	83 ec 0c             	sub    esp,0xc
c000be8c:	50                   	push   eax
c000be8d:	e8 f8 1b 00 00       	call   c000da8a <LogicalDisk::mount()>
c000be92:	83 c4 10             	add    esp,0x10
c000be95:	90                   	nop
c000be96:	83 c4 0c             	add    esp,0xc
c000be99:	c3                   	ret    

c000be9a <Directory::open()>:
c000be9a:	53                   	push   ebx
c000be9b:	b8 0b 00 00 00       	mov    eax,0xb
c000bea0:	83 ec 08             	sub    esp,0x8
c000bea3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bea7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000beae:	83 fa 19             	cmp    edx,0x19
c000beb1:	77 3d                	ja     c000bef0 <Directory::open()+0x56>
c000beb3:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000beba:	85 d2                	test   edx,edx
c000bebc:	74 32                	je     c000bef0 <Directory::open()+0x56>
c000bebe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bec4:	85 d2                	test   edx,edx
c000bec6:	74 28                	je     c000bef0 <Directory::open()+0x56>
c000bec8:	b8 06 00 00 00       	mov    eax,0x6
c000becd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bed1:	75 1d                	jne    c000bef0 <Directory::open()+0x56>
c000bed3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bed9:	50                   	push   eax
c000beda:	8b 02                	mov    eax,DWORD PTR [edx]
c000bedc:	51                   	push   ecx
c000bedd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bee0:	51                   	push   ecx
c000bee1:	52                   	push   edx
c000bee2:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	85 c0                	test   eax,eax
c000beea:	75 04                	jne    c000bef0 <Directory::open()+0x56>
c000beec:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bef0:	83 c4 08             	add    esp,0x8
c000bef3:	5b                   	pop    ebx
c000bef4:	c3                   	ret    
c000bef5:	90                   	nop

c000bef6 <Directory::close()>:
c000bef6:	53                   	push   ebx
c000bef7:	b8 0b 00 00 00       	mov    eax,0xb
c000befc:	83 ec 08             	sub    esp,0x8
c000beff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf03:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf0a:	83 f9 19             	cmp    ecx,0x19
c000bf0d:	77 41                	ja     c000bf50 <Directory::close()+0x5a>
c000bf0f:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf16:	85 db                	test   ebx,ebx
c000bf18:	74 36                	je     c000bf50 <Directory::close()+0x5a>
c000bf1a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bf21:	74 2d                	je     c000bf50 <Directory::close()+0x5a>
c000bf23:	b8 05 00 00 00       	mov    eax,0x5
c000bf28:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf2c:	74 22                	je     c000bf50 <Directory::close()+0x5a>
c000bf2e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bf32:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bf39:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf3f:	53                   	push   ebx
c000bf40:	53                   	push   ebx
c000bf41:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bf43:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf49:	50                   	push   eax
c000bf4a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf4d:	83 c4 10             	add    esp,0x10
c000bf50:	83 c4 08             	add    esp,0x8
c000bf53:	5b                   	pop    ebx
c000bf54:	c3                   	ret    
c000bf55:	90                   	nop

c000bf56 <Directory::unlink()>:
c000bf56:	83 ec 0c             	sub    esp,0xc
c000bf59:	b8 0b 00 00 00       	mov    eax,0xb
c000bf5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf69:	83 f9 19             	cmp    ecx,0x19
c000bf6c:	77 2f                	ja     c000bf9d <Directory::unlink()+0x47>
c000bf6e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf75:	85 c9                	test   ecx,ecx
c000bf77:	74 24                	je     c000bf9d <Directory::unlink()+0x47>
c000bf79:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf7f:	85 c9                	test   ecx,ecx
c000bf81:	74 1a                	je     c000bf9d <Directory::unlink()+0x47>
c000bf83:	b8 06 00 00 00       	mov    eax,0x6
c000bf88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf8c:	75 0f                	jne    c000bf9d <Directory::unlink()+0x47>
c000bf8e:	83 c2 0d             	add    edx,0xd
c000bf91:	50                   	push   eax
c000bf92:	50                   	push   eax
c000bf93:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf95:	52                   	push   edx
c000bf96:	51                   	push   ecx
c000bf97:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf9a:	83 c4 10             	add    esp,0x10
c000bf9d:	83 c4 0c             	add    esp,0xc
c000bfa0:	c3                   	ret    
c000bfa1:	90                   	nop

c000bfa2 <Directory::rename(char const*)>:
c000bfa2:	83 ec 0c             	sub    esp,0xc
c000bfa5:	b8 0b 00 00 00       	mov    eax,0xb
c000bfaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfb5:	83 f9 19             	cmp    ecx,0x19
c000bfb8:	77 32                	ja     c000bfec <Directory::rename(char const*)+0x4a>
c000bfba:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfc1:	85 c9                	test   ecx,ecx
c000bfc3:	74 27                	je     c000bfec <Directory::rename(char const*)+0x4a>
c000bfc5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfcb:	85 c9                	test   ecx,ecx
c000bfcd:	74 1d                	je     c000bfec <Directory::rename(char const*)+0x4a>
c000bfcf:	b8 06 00 00 00       	mov    eax,0x6
c000bfd4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfd8:	75 12                	jne    c000bfec <Directory::rename(char const*)+0x4a>
c000bfda:	83 c2 0d             	add    edx,0xd
c000bfdd:	50                   	push   eax
c000bfde:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfe0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfe4:	52                   	push   edx
c000bfe5:	51                   	push   ecx
c000bfe6:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfe9:	83 c4 10             	add    esp,0x10
c000bfec:	83 c4 0c             	add    esp,0xc
c000bfef:	c3                   	ret    

c000bff0 <Directory::exists()>:
c000bff0:	83 ec 0c             	sub    esp,0xc
c000bff3:	31 c0                	xor    eax,eax
c000bff5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bff9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c000:	83 f9 19             	cmp    ecx,0x19
c000c003:	77 24                	ja     c000c029 <Directory::exists()+0x39>
c000c005:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c00c:	85 c9                	test   ecx,ecx
c000c00e:	74 19                	je     c000c029 <Directory::exists()+0x39>
c000c010:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c016:	85 c9                	test   ecx,ecx
c000c018:	74 0f                	je     c000c029 <Directory::exists()+0x39>
c000c01a:	83 c2 0d             	add    edx,0xd
c000c01d:	50                   	push   eax
c000c01e:	50                   	push   eax
c000c01f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c021:	52                   	push   edx
c000c022:	51                   	push   ecx
c000c023:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	83 c4 0c             	add    esp,0xc
c000c02c:	c3                   	ret    
c000c02d:	90                   	nop

c000c02e <Directory::read(dirent*)>:
c000c02e:	83 ec 1c             	sub    esp,0x1c
c000c031:	b8 0b 00 00 00       	mov    eax,0xb
c000c036:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c03a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c041:	83 f9 19             	cmp    ecx,0x19
c000c044:	77 30                	ja     c000c076 <Directory::read(dirent*)+0x48>
c000c046:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c04d:	85 c9                	test   ecx,ecx
c000c04f:	74 25                	je     c000c076 <Directory::read(dirent*)+0x48>
c000c051:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c058:	74 1c                	je     c000c076 <Directory::read(dirent*)+0x48>
c000c05a:	83 ec 0c             	sub    esp,0xc
c000c05d:	8b 02                	mov    eax,DWORD PTR [edx]
c000c05f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c063:	51                   	push   ecx
c000c064:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c068:	6a 00                	push   0x0
c000c06a:	68 10 01 00 00       	push   0x110
c000c06f:	52                   	push   edx
c000c070:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c073:	83 c4 20             	add    esp,0x20
c000c076:	83 c4 1c             	add    esp,0x1c
c000c079:	c3                   	ret    

c000c07a <Directory::create()>:
c000c07a:	83 ec 0c             	sub    esp,0xc
c000c07d:	b8 0b 00 00 00       	mov    eax,0xb
c000c082:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c086:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c08d:	83 f9 19             	cmp    ecx,0x19
c000c090:	77 2f                	ja     c000c0c1 <Directory::create()+0x47>
c000c092:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c099:	85 c9                	test   ecx,ecx
c000c09b:	74 24                	je     c000c0c1 <Directory::create()+0x47>
c000c09d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c0a3:	85 c9                	test   ecx,ecx
c000c0a5:	74 1a                	je     c000c0c1 <Directory::create()+0x47>
c000c0a7:	b8 06 00 00 00       	mov    eax,0x6
c000c0ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c0b0:	75 0f                	jne    c000c0c1 <Directory::create()+0x47>
c000c0b2:	83 c2 0d             	add    edx,0xd
c000c0b5:	50                   	push   eax
c000c0b6:	50                   	push   eax
c000c0b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c0b9:	52                   	push   edx
c000c0ba:	51                   	push   ecx
c000c0bb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c0be:	83 c4 10             	add    esp,0x10
c000c0c1:	83 c4 0c             	add    esp,0xc
c000c0c4:	c3                   	ret    
c000c0c5:	90                   	nop

c000c0c6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c0c6:	b8 0a 00 00 00       	mov    eax,0xa
c000c0cb:	c3                   	ret    

c000c0cc <Bus::Bus(char const*)>:
c000c0cc:	83 ec 0c             	sub    esp,0xc
c000c0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d3:	83 ec 08             	sub    esp,0x8
c000c0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0da:	50                   	push   eax
c000c0db:	e8 22 08 00 00       	call   c000c902 <Device::Device(char const*)>
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c000c0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ec:	89 10                	mov    DWORD PTR [eax],edx
c000c0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0fc:	90                   	nop
c000c0fd:	83 c4 0c             	add    esp,0xc
c000c100:	c3                   	ret    
c000c101:	90                   	nop
c000c102:	66 90                	xchg   ax,ax

c000c104 <Bus::~Bus()>:
c000c104:	83 ec 0c             	sub    esp,0xc
c000c107:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c000c10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c110:	89 10                	mov    DWORD PTR [eax],edx
c000c112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c116:	83 ec 0c             	sub    esp,0xc
c000c119:	50                   	push   eax
c000c11a:	e8 4d 05 00 00       	call   c000c66c <Device::~Device()>
c000c11f:	83 c4 10             	add    esp,0x10
c000c122:	90                   	nop
c000c123:	83 c4 0c             	add    esp,0xc
c000c126:	c3                   	ret    
c000c127:	90                   	nop

c000c128 <Bus::~Bus()>:
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	83 ec 0c             	sub    esp,0xc
c000c12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c132:	e8 cd ff ff ff       	call   c000c104 <Bus::~Bus()>
c000c137:	83 c4 10             	add    esp,0x10
c000c13a:	83 ec 08             	sub    esp,0x8
c000c13d:	68 58 01 00 00       	push   0x158
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	e8 cd e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c14b:	83 c4 10             	add    esp,0x10
c000c14e:	83 c4 0c             	add    esp,0xc
c000c151:	c3                   	ret    

c000c152 <beepThread(void*)>:
c000c152:	83 ec 0c             	sub    esp,0xc
c000c155:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c15a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15e:	48                   	dec    eax
c000c15f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c164:	75 01                	jne    c000c167 <beepThread(void*)+0x15>
c000c166:	fb                   	sti    
c000c167:	83 ec 0c             	sub    esp,0xc
c000c16a:	6b c2 0a             	imul   eax,edx,0xa
c000c16d:	50                   	push   eax
c000c16e:	e8 15 9e 00 00       	call   c0015f88 <milliTenthSleep(unsigned int)>
c000c173:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c17a:	e8 64 bd 00 00       	call   c0017ee3 <HalMakeBeep(int)>
c000c17f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c187:	83 c4 1c             	add    esp,0x1c
c000c18a:	e9 dd 9c 00 00       	jmp    c0015e6c <blockTask(TaskState)>

c000c18f <Krnl::beep(int, int, bool)>:
c000c18f:	56                   	push   esi
c000c190:	53                   	push   ebx
c000c191:	83 ec 10             	sub    esp,0x10
c000c194:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c198:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c19c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a0:	e8 3e bd 00 00       	call   c0017ee3 <HalMakeBeep(int)>
c000c1a5:	83 c4 10             	add    esp,0x10
c000c1a8:	89 f0                	mov    eax,esi
c000c1aa:	84 c0                	test   al,al
c000c1ac:	74 1e                	je     c000c1cc <Krnl::beep(int, int, bool)+0x3d>
c000c1ae:	83 ec 0c             	sub    esp,0xc
c000c1b1:	6b db 0a             	imul   ebx,ebx,0xa
c000c1b4:	53                   	push   ebx
c000c1b5:	e8 ce 9d 00 00       	call   c0015f88 <milliTenthSleep(unsigned int)>
c000c1ba:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c1c2:	83 c4 14             	add    esp,0x14
c000c1c5:	5b                   	pop    ebx
c000c1c6:	5e                   	pop    esi
c000c1c7:	e9 17 bd 00 00       	jmp    c0017ee3 <HalMakeBeep(int)>
c000c1cc:	68 e6 00 00 00       	push   0xe6
c000c1d1:	53                   	push   ebx
c000c1d2:	68 52 c1 00 c0       	push   0xc000c152
c000c1d7:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1dd:	e8 26 98 00 00       	call   c0015a08 <Process::createThread(void (*)(void*), void*, int)>
c000c1e2:	83 c4 14             	add    esp,0x14
c000c1e5:	5b                   	pop    ebx
c000c1e6:	5e                   	pop    esi
c000c1e7:	c3                   	ret    

c000c1e8 <User::loadClockSettings(int)>:
c000c1e8:	53                   	push   ebx
c000c1e9:	83 ec 14             	sub    esp,0x14
c000c1ec:	68 14 01 00 00       	push   0x114
c000c1f1:	e8 c0 b8 ff ff       	call   c0007ab6 <malloc>
c000c1f6:	83 c4 0c             	add    esp,0xc
c000c1f9:	89 c3                	mov    ebx,eax
c000c1fb:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c201:	68 1c 15 02 c0       	push   0xc002151c
c000c206:	50                   	push   eax
c000c207:	e8 3c f6 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c000c20c:	58                   	pop    eax
c000c20d:	5a                   	pop    edx
c000c20e:	6a 01                	push   0x1
c000c210:	53                   	push   ebx
c000c211:	e8 fa f6 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c000c216:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c219:	e8 50 f7 ff ff       	call   c000b96e <File::close()>
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	85 db                	test   ebx,ebx
c000c223:	74 0f                	je     c000c234 <User::loadClockSettings(int)+0x4c>
c000c225:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c227:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c22b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c22e:	83 c4 08             	add    esp,0x8
c000c231:	5b                   	pop    ebx
c000c232:	ff e0                	jmp    eax
c000c234:	83 c4 08             	add    esp,0x8
c000c237:	5b                   	pop    ebx
c000c238:	c3                   	ret    
c000c239:	90                   	nop

c000c23a <Clock::Clock(char const*)>:
c000c23a:	83 ec 0c             	sub    esp,0xc
c000c23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c241:	83 ec 08             	sub    esp,0x8
c000c244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c248:	50                   	push   eax
c000c249:	e8 b4 06 00 00       	call   c000c902 <Device::Device(char const*)>
c000c24e:	83 c4 10             	add    esp,0x10
c000c251:	ba 44 15 02 c0       	mov    edx,0xc0021544
c000c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25a:	89 10                	mov    DWORD PTR [eax],edx
c000c25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c260:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c26a:	90                   	nop
c000c26b:	83 c4 0c             	add    esp,0xc
c000c26e:	c3                   	ret    
c000c26f:	90                   	nop

c000c270 <Clock::~Clock()>:
c000c270:	83 ec 0c             	sub    esp,0xc
c000c273:	ba 44 15 02 c0       	mov    edx,0xc0021544
c000c278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27c:	89 10                	mov    DWORD PTR [eax],edx
c000c27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c282:	83 ec 0c             	sub    esp,0xc
c000c285:	50                   	push   eax
c000c286:	e8 e1 03 00 00       	call   c000c66c <Device::~Device()>
c000c28b:	83 c4 10             	add    esp,0x10
c000c28e:	90                   	nop
c000c28f:	83 c4 0c             	add    esp,0xc
c000c292:	c3                   	ret    
c000c293:	90                   	nop

c000c294 <Clock::~Clock()>:
c000c294:	83 ec 0c             	sub    esp,0xc
c000c297:	83 ec 0c             	sub    esp,0xc
c000c29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c29e:	e8 cd ff ff ff       	call   c000c270 <Clock::~Clock()>
c000c2a3:	83 c4 10             	add    esp,0x10
c000c2a6:	83 ec 08             	sub    esp,0x8
c000c2a9:	68 58 01 00 00       	push   0x158
c000c2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2b2:	e8 61 e5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c2b7:	83 c4 10             	add    esp,0x10
c000c2ba:	83 c4 0c             	add    esp,0xc
c000c2bd:	c3                   	ret    

c000c2be <Clock::timeInSecondsLocal()>:
c000c2be:	53                   	push   ebx
c000c2bf:	83 ec 14             	sub    esp,0x14
c000c2c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2c6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c2c8:	50                   	push   eax
c000c2c9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2cc:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c2d3:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c2d9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c2df:	89 cb                	mov    ebx,ecx
c000c2e1:	c1 fb 1f             	sar    ebx,0x1f
c000c2e4:	01 c8                	add    eax,ecx
c000c2e6:	11 da                	adc    edx,ebx
c000c2e8:	83 c4 10             	add    esp,0x10
c000c2eb:	31 c9                	xor    ecx,ecx
c000c2ed:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2f4:	74 05                	je     c000c2fb <Clock::timeInSecondsLocal()+0x3d>
c000c2f6:	b9 08 07 00 00       	mov    ecx,0x708
c000c2fb:	31 db                	xor    ebx,ebx
c000c2fd:	01 c8                	add    eax,ecx
c000c2ff:	11 da                	adc    edx,ebx
c000c301:	83 c4 08             	add    esp,0x8
c000c304:	5b                   	pop    ebx
c000c305:	c3                   	ret    

c000c306 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c306:	57                   	push   edi
c000c307:	56                   	push   esi
c000c308:	53                   	push   ebx
c000c309:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c30d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c311:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c313:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c317:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c31a:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c321:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c327:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c32d:	99                   	cdq    
c000c32e:	29 c6                	sub    esi,eax
c000c330:	19 d7                	sbb    edi,edx
c000c332:	89 f0                	mov    eax,esi
c000c334:	89 fa                	mov    edx,edi
c000c336:	31 f6                	xor    esi,esi
c000c338:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c33f:	74 05                	je     c000c346 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c341:	be 08 07 00 00       	mov    esi,0x708
c000c346:	31 ff                	xor    edi,edi
c000c348:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c34c:	29 f0                	sub    eax,esi
c000c34e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c352:	19 fa                	sbb    edx,edi
c000c354:	89 d8                	mov    eax,ebx
c000c356:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c35a:	5b                   	pop    ebx
c000c35b:	5e                   	pop    esi
c000c35c:	5f                   	pop    edi
c000c35d:	ff e0                	jmp    eax

c000c35f <datetimeToSeconds(datetime_t)>:
c000c35f:	55                   	push   ebp
c000c360:	57                   	push   edi
c000c361:	56                   	push   esi
c000c362:	53                   	push   ebx
c000c363:	83 ec 0c             	sub    esp,0xc
c000c366:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c36a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c36e:	89 d6                	mov    esi,edx
c000c370:	0f b6 c7             	movzx  eax,bh
c000c373:	c1 ee 10             	shr    esi,0x10
c000c376:	6b e8 3c             	imul   ebp,eax,0x3c
c000c379:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c37f:	0f b6 ce             	movzx  ecx,dh
c000c382:	89 df                	mov    edi,ebx
c000c384:	49                   	dec    ecx
c000c385:	c1 ef 10             	shr    edi,0x10
c000c388:	0f b6 db             	movzx  ebx,bl
c000c38b:	89 f8                	mov    eax,edi
c000c38d:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c393:	0f b6 f8             	movzx  edi,al
c000c396:	0f b6 d2             	movzx  edx,dl
c000c399:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c39d:	01 d8                	add    eax,ebx
c000c39f:	0f b7 de             	movzx  ebx,si
c000c3a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3a5:	c1 f8 1f             	sar    eax,0x1f
c000c3a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c3ac:	0f b6 c1             	movzx  eax,cl
c000c3af:	8b 0c 85 80 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea80]
c000c3b6:	83 f8 01             	cmp    eax,0x1
c000c3b9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c3bd:	76 27                	jbe    c000c3e6 <datetimeToSeconds(datetime_t)+0x87>
c000c3bf:	83 e6 03             	and    esi,0x3
c000c3c2:	75 22                	jne    c000c3e6 <datetimeToSeconds(datetime_t)+0x87>
c000c3c4:	31 d2                	xor    edx,edx
c000c3c6:	be 64 00 00 00       	mov    esi,0x64
c000c3cb:	89 d8                	mov    eax,ebx
c000c3cd:	f7 f6                	div    esi
c000c3cf:	85 d2                	test   edx,edx
c000c3d1:	75 12                	jne    c000c3e5 <datetimeToSeconds(datetime_t)+0x86>
c000c3d3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c3d9:	be 90 01 00 00       	mov    esi,0x190
c000c3de:	99                   	cdq    
c000c3df:	f7 fe                	idiv   esi
c000c3e1:	85 d2                	test   edx,edx
c000c3e3:	75 01                	jne    c000c3e6 <datetimeToSeconds(datetime_t)+0x87>
c000c3e5:	41                   	inc    ecx
c000c3e6:	83 fb 46             	cmp    ebx,0x46
c000c3e9:	76 48                	jbe    c000c433 <datetimeToSeconds(datetime_t)+0xd4>
c000c3eb:	be 46 00 00 00       	mov    esi,0x46
c000c3f0:	bf 64 00 00 00       	mov    edi,0x64
c000c3f5:	bd 90 01 00 00       	mov    ebp,0x190
c000c3fa:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3ff:	f7 c6 03 00 00 00    	test   esi,0x3
c000c405:	75 23                	jne    c000c42a <datetimeToSeconds(datetime_t)+0xcb>
c000c407:	89 f0                	mov    eax,esi
c000c409:	99                   	cdq    
c000c40a:	f7 ff                	idiv   edi
c000c40c:	b8 6e 01 00 00       	mov    eax,0x16e
c000c411:	85 d2                	test   edx,edx
c000c413:	75 15                	jne    c000c42a <datetimeToSeconds(datetime_t)+0xcb>
c000c415:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c41b:	99                   	cdq    
c000c41c:	f7 fd                	idiv   ebp
c000c41e:	83 fa 01             	cmp    edx,0x1
c000c421:	19 c0                	sbb    eax,eax
c000c423:	f7 d0                	not    eax
c000c425:	05 6e 01 00 00       	add    eax,0x16e
c000c42a:	01 c1                	add    ecx,eax
c000c42c:	46                   	inc    esi
c000c42d:	39 de                	cmp    esi,ebx
c000c42f:	7c c9                	jl     c000c3fa <datetimeToSeconds(datetime_t)+0x9b>
c000c431:	eb 34                	jmp    c000c467 <datetimeToSeconds(datetime_t)+0x108>
c000c433:	74 32                	je     c000c467 <datetimeToSeconds(datetime_t)+0x108>
c000c435:	b8 45 00 00 00       	mov    eax,0x45
c000c43a:	89 c2                	mov    edx,eax
c000c43c:	83 e2 03             	and    edx,0x3
c000c43f:	39 d8                	cmp    eax,ebx
c000c441:	7e 0f                	jle    c000c452 <datetimeToSeconds(datetime_t)+0xf3>
c000c443:	83 fa 01             	cmp    edx,0x1
c000c446:	19 d2                	sbb    edx,edx
c000c448:	48                   	dec    eax
c000c449:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c450:	eb e8                	jmp    c000c43a <datetimeToSeconds(datetime_t)+0xdb>
c000c452:	b8 6d 01 00 00       	mov    eax,0x16d
c000c457:	85 d2                	test   edx,edx
c000c459:	75 0a                	jne    c000c465 <datetimeToSeconds(datetime_t)+0x106>
c000c45b:	83 fb 01             	cmp    ebx,0x1
c000c45e:	19 c0                	sbb    eax,eax
c000c460:	05 6e 01 00 00       	add    eax,0x16e
c000c465:	29 c1                	sub    ecx,eax
c000c467:	b8 80 51 01 00       	mov    eax,0x15180
c000c46c:	f7 e9                	imul   ecx
c000c46e:	03 04 24             	add    eax,DWORD PTR [esp]
c000c471:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c475:	83 c4 0c             	add    esp,0xc
c000c478:	5b                   	pop    ebx
c000c479:	5e                   	pop    esi
c000c47a:	5f                   	pop    edi
c000c47b:	5d                   	pop    ebp
c000c47c:	c3                   	ret    
c000c47d:	90                   	nop

c000c47e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c47e:	57                   	push   edi
c000c47f:	56                   	push   esi
c000c480:	53                   	push   ebx
c000c481:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c485:	8b 06                	mov    eax,DWORD PTR [esi]
c000c487:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c48a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c48e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c492:	e8 c8 fe ff ff       	call   c000c35f <datetimeToSeconds(datetime_t)>
c000c497:	59                   	pop    ecx
c000c498:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c49f:	5b                   	pop    ebx
c000c4a0:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c4a6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4ac:	89 cb                	mov    ebx,ecx
c000c4ae:	c1 fb 1f             	sar    ebx,0x1f
c000c4b1:	29 c8                	sub    eax,ecx
c000c4b3:	19 da                	sbb    edx,ebx
c000c4b5:	31 c9                	xor    ecx,ecx
c000c4b7:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c4be:	74 05                	je     c000c4c5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c4c0:	b9 08 07 00 00       	mov    ecx,0x708
c000c4c5:	31 db                	xor    ebx,ebx
c000c4c7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c4cb:	29 c8                	sub    eax,ecx
c000c4cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4d1:	19 da                	sbb    edx,ebx
c000c4d3:	89 f8                	mov    eax,edi
c000c4d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c4d9:	5b                   	pop    ebx
c000c4da:	5e                   	pop    esi
c000c4db:	5f                   	pop    edi
c000c4dc:	ff e0                	jmp    eax

c000c4de <secondsToDatetime(unsigned long long)>:
c000c4de:	55                   	push   ebp
c000c4df:	57                   	push   edi
c000c4e0:	56                   	push   esi
c000c4e1:	53                   	push   ebx
c000c4e2:	83 ec 1c             	sub    esp,0x1c
c000c4e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4ed:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4f1:	6a 00                	push   0x0
c000c4f3:	68 80 51 01 00       	push   0x15180
c000c4f8:	55                   	push   ebp
c000c4f9:	57                   	push   edi
c000c4fa:	e8 d1 2d 01 00       	call   c001f2d0 <__udivdi3>
c000c4ff:	83 c4 10             	add    esp,0x10
c000c502:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c508:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c50c:	6a 00                	push   0x0
c000c50e:	68 80 51 01 00       	push   0x15180
c000c513:	55                   	push   ebp
c000c514:	57                   	push   edi
c000c515:	bf 10 0e 00 00       	mov    edi,0xe10
c000c51a:	e8 b1 2e 01 00       	call   c001f3d0 <__umoddi3>
c000c51f:	83 c4 10             	add    esp,0x10
c000c522:	99                   	cdq    
c000c523:	f7 ff                	idiv   edi
c000c525:	bf 3c 00 00 00       	mov    edi,0x3c
c000c52a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c52d:	89 d0                	mov    eax,edx
c000c52f:	99                   	cdq    
c000c530:	f7 ff                	idiv   edi
c000c532:	85 db                	test   ebx,ebx
c000c534:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c537:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c53a:	79 11                	jns    c000c54d <secondsToDatetime(unsigned long long)+0x6f>
c000c53c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c540:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c546:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c54b:	eb 07                	jmp    c000c554 <secondsToDatetime(unsigned long long)+0x76>
c000c54d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c552:	89 d8                	mov    eax,ebx
c000c554:	bf b4 05 00 00       	mov    edi,0x5b4
c000c559:	99                   	cdq    
c000c55a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c55f:	f7 f9                	idiv   ecx
c000c561:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c566:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c56a:	31 d2                	xor    edx,edx
c000c56c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c574:	01 c3                	add    ebx,eax
c000c576:	89 d8                	mov    eax,ebx
c000c578:	f7 f1                	div    ecx
c000c57a:	31 d2                	xor    edx,edx
c000c57c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c57f:	89 d8                	mov    eax,ebx
c000c581:	f7 f7                	div    edi
c000c583:	31 d2                	xor    edx,edx
c000c585:	29 c1                	sub    ecx,eax
c000c587:	89 d8                	mov    eax,ebx
c000c589:	f7 f5                	div    ebp
c000c58b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c590:	29 c1                	sub    ecx,eax
c000c592:	31 d2                	xor    edx,edx
c000c594:	89 c8                	mov    eax,ecx
c000c596:	f7 f5                	div    ebp
c000c598:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c59d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c5a1:	31 d2                	xor    edx,edx
c000c5a3:	89 c8                	mov    eax,ecx
c000c5a5:	f7 f5                	div    ebp
c000c5a7:	31 d2                	xor    edx,edx
c000c5a9:	01 c3                	add    ebx,eax
c000c5ab:	89 c8                	mov    eax,ecx
c000c5ad:	f7 f7                	div    edi
c000c5af:	bf 99 00 00 00       	mov    edi,0x99
c000c5b4:	29 c3                	sub    ebx,eax
c000c5b6:	31 d2                	xor    edx,edx
c000c5b8:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c5c0:	29 c3                	sub    ebx,eax
c000c5c2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c5c5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c5c8:	bb 05 00 00 00       	mov    ebx,0x5
c000c5cd:	83 c1 02             	add    ecx,0x2
c000c5d0:	89 c8                	mov    eax,ecx
c000c5d2:	f7 f7                	div    edi
c000c5d4:	31 d2                	xor    edx,edx
c000c5d6:	89 c7                	mov    edi,eax
c000c5d8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c5de:	83 c0 02             	add    eax,0x2
c000c5e1:	f7 f3                	div    ebx
c000c5e3:	89 eb                	mov    ebx,ebp
c000c5e5:	29 c3                	sub    ebx,eax
c000c5e7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5ed:	88 1e                	mov    BYTE PTR [esi],bl
c000c5ef:	19 c0                	sbb    eax,eax
c000c5f1:	31 d2                	xor    edx,edx
c000c5f3:	83 e0 0c             	and    eax,0xc
c000c5f6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5fa:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c602:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c606:	83 f9 01             	cmp    ecx,0x1
c000c609:	0f 96 c2             	setbe  dl
c000c60c:	41                   	inc    ecx
c000c60d:	01 d0                	add    eax,edx
c000c60f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c612:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c616:	83 c4 1c             	add    esp,0x1c
c000c619:	89 f0                	mov    eax,esi
c000c61b:	5b                   	pop    ebx
c000c61c:	5e                   	pop    esi
c000c61d:	5f                   	pop    edi
c000c61e:	5d                   	pop    ebp
c000c61f:	c2 04 00             	ret    0x4

c000c622 <Clock::timeInDatetimeLocal()>:
c000c622:	53                   	push   ebx
c000c623:	83 ec 14             	sub    esp,0x14
c000c626:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c62a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c62e:	e8 8b fc ff ff       	call   c000c2be <Clock::timeInSecondsLocal()>
c000c633:	83 c4 0c             	add    esp,0xc
c000c636:	52                   	push   edx
c000c637:	50                   	push   eax
c000c638:	53                   	push   ebx
c000c639:	e8 a0 fe ff ff       	call   c000c4de <secondsToDatetime(unsigned long long)>
c000c63e:	89 d8                	mov    eax,ebx
c000c640:	83 c4 14             	add    esp,0x14
c000c643:	5b                   	pop    ebx
c000c644:	c2 04 00             	ret    0x4
c000c647:	90                   	nop

c000c648 <Device::hibernate()>:
c000c648:	c3                   	ret    
c000c649:	90                   	nop

c000c64a <Device::wake()>:
c000c64a:	c3                   	ret    
c000c64b:	90                   	nop

c000c64c <Device::detect()>:
c000c64c:	c3                   	ret    
c000c64d:	90                   	nop

c000c64e <Device::disableLegacy()>:
c000c64e:	c3                   	ret    
c000c64f:	90                   	nop

c000c650 <Device::powerSaving(PowerSavingLevel)>:
c000c650:	c3                   	ret    
c000c651:	90                   	nop

c000c652 <DriverlessDevice::close(int, int, void*)>:
c000c652:	31 c0                	xor    eax,eax
c000c654:	c3                   	ret    
c000c655:	90                   	nop

c000c656 <DriverlessDevice::detect()>:
c000c656:	c3                   	ret    
c000c657:	90                   	nop

c000c658 <DriverlessDevice::open(int, int, void*)>:
c000c658:	83 ec 18             	sub    esp,0x18
c000c65b:	68 b0 15 02 c0       	push   0xc00215b0
c000c660:	e8 34 4d 00 00       	call   c0011399 <KePanic(char const*)>
c000c665:	83 c8 ff             	or     eax,0xffffffff
c000c668:	83 c4 1c             	add    esp,0x1c
c000c66b:	c3                   	ret    

c000c66c <Device::~Device()>:
c000c66c:	ba 10 16 02 c0       	mov    edx,0xc0021610
c000c671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c675:	89 10                	mov    DWORD PTR [eax],edx
c000c677:	90                   	nop
c000c678:	c3                   	ret    
c000c679:	90                   	nop

c000c67a <Device::~Device()>:
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c681:	e8 e6 ff ff ff       	call   c000c66c <Device::~Device()>
c000c686:	83 c4 04             	add    esp,0x4
c000c689:	83 ec 08             	sub    esp,0x8
c000c68c:	68 58 01 00 00       	push   0x158
c000c691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c695:	e8 7e e1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c69a:	83 c4 10             	add    esp,0x10
c000c69d:	83 c4 0c             	add    esp,0xc
c000c6a0:	c3                   	ret    
c000c6a1:	90                   	nop

c000c6a2 <Device::findAndLoadDriver()>:
c000c6a2:	c7 44 24 04 ce 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215ce
c000c6aa:	e9 96 e2 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c6af:	90                   	nop

c000c6b0 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c6b0:	57                   	push   edi
c000c6b1:	b9 09 00 00 00       	mov    ecx,0x9
c000c6b6:	56                   	push   esi
c000c6b7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c6bb:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c6bf:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c6c9:	81 c7 18 01 00 00    	add    edi,0x118
c000c6cf:	fc                   	cld    
c000c6d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6d2:	5e                   	pop    esi
c000c6d3:	5f                   	pop    edi
c000c6d4:	c3                   	ret    
c000c6d5:	90                   	nop

c000c6d6 <Device::preOpenACPI(void*, char*, char*)>:
c000c6d6:	57                   	push   edi
c000c6d7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c6dc:	56                   	push   esi
c000c6dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6e5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6ef:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6f5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c701:	b9 0e 00 00 00       	mov    ecx,0xe
c000c706:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c70c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c710:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c712:	5e                   	pop    esi
c000c713:	5f                   	pop    edi
c000c714:	c3                   	ret    
c000c715:	90                   	nop

c000c716 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c716:	53                   	push   ebx
c000c717:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c71b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c71f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c723:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c727:	0f b6 c0             	movzx  eax,al
c000c72a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c72e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c732:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c736:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c73a:	5b                   	pop    ebx
c000c73b:	e9 a8 05 00 00       	jmp    c000cce8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c740 <Device::getParent()>:
c000c740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c744:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c74a:	c3                   	ret    
c000c74b:	90                   	nop

c000c74c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c74c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c750:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c754:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c759:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c75d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c761:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c765:	e9 e6 06 00 00       	jmp    c000ce50 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c76a <Device::addChild(Device*)>:
c000c76a:	53                   	push   ebx
c000c76b:	83 ec 08             	sub    esp,0x8
c000c76e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c772:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c776:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c77c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c782:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c784:	85 d2                	test   edx,edx
c000c786:	74 04                	je     c000c78c <Device::addChild(Device*)+0x22>
c000c788:	89 d3                	mov    ebx,edx
c000c78a:	eb f6                	jmp    c000c782 <Device::addChild(Device*)+0x18>
c000c78c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c78f:	83 ec 0c             	sub    esp,0xc
c000c792:	6a 08                	push   0x8
c000c794:	e8 1d b3 ff ff       	call   c0007ab6 <malloc>
c000c799:	89 03                	mov    DWORD PTR [ebx],eax
c000c79b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7a8:	83 c4 18             	add    esp,0x18
c000c7ab:	5b                   	pop    ebx
c000c7ac:	c3                   	ret    
c000c7ad:	90                   	nop

c000c7ae <Device::removeAllChildren()>:
c000c7ae:	56                   	push   esi
c000c7af:	53                   	push   ebx
c000c7b0:	52                   	push   edx
c000c7b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c7b5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c7bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7be:	74 17                	je     c000c7d7 <Device::removeAllChildren()+0x29>
c000c7c0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c7c3:	85 c0                	test   eax,eax
c000c7c5:	74 0c                	je     c000c7d3 <Device::removeAllChildren()+0x25>
c000c7c7:	83 ec 0c             	sub    esp,0xc
c000c7ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7cc:	50                   	push   eax
c000c7cd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c7d0:	83 c4 10             	add    esp,0x10
c000c7d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7d5:	eb e4                	jmp    c000c7bb <Device::removeAllChildren()+0xd>
c000c7d7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7e3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7f0:	58                   	pop    eax
c000c7f1:	5b                   	pop    ebx
c000c7f2:	5e                   	pop    esi
c000c7f3:	c3                   	ret    

c000c7f4 <Device::hibernateAll()>:
c000c7f4:	53                   	push   ebx
c000c7f5:	83 ec 14             	sub    esp,0x14
c000c7f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7fe:	53                   	push   ebx
c000c7ff:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c802:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c808:	83 c4 10             	add    esp,0x10
c000c80b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c80e:	74 0f                	je     c000c81f <Device::hibernateAll()+0x2b>
c000c810:	83 ec 0c             	sub    esp,0xc
c000c813:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c816:	e8 d9 ff ff ff       	call   c000c7f4 <Device::hibernateAll()>
c000c81b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c81d:	eb e9                	jmp    c000c808 <Device::hibernateAll()+0x14>
c000c81f:	83 c4 08             	add    esp,0x8
c000c822:	5b                   	pop    ebx
c000c823:	c3                   	ret    

c000c824 <Device::wakeAll()>:
c000c824:	53                   	push   ebx
c000c825:	83 ec 14             	sub    esp,0x14
c000c828:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c82c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c82e:	53                   	push   ebx
c000c82f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c832:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c838:	83 c4 10             	add    esp,0x10
c000c83b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c83e:	74 0f                	je     c000c84f <Device::wakeAll()+0x2b>
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c846:	e8 d9 ff ff ff       	call   c000c824 <Device::wakeAll()>
c000c84b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c84d:	eb e9                	jmp    c000c838 <Device::wakeAll()+0x14>
c000c84f:	83 c4 08             	add    esp,0x8
c000c852:	5b                   	pop    ebx
c000c853:	c3                   	ret    

c000c854 <Device::detectAll()>:
c000c854:	53                   	push   ebx
c000c855:	83 ec 14             	sub    esp,0x14
c000c858:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c85c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c85e:	53                   	push   ebx
c000c85f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c862:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c868:	83 c4 10             	add    esp,0x10
c000c86b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c86e:	74 0f                	je     c000c87f <Device::detectAll()+0x2b>
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c876:	e8 d9 ff ff ff       	call   c000c854 <Device::detectAll()>
c000c87b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c87d:	eb e9                	jmp    c000c868 <Device::detectAll()+0x14>
c000c87f:	83 c4 08             	add    esp,0x8
c000c882:	5b                   	pop    ebx
c000c883:	c3                   	ret    

c000c884 <Device::disableLegacyAll()>:
c000c884:	c3                   	ret    
c000c885:	90                   	nop

c000c886 <Device::loadDriversForAll()>:
c000c886:	c3                   	ret    
c000c887:	90                   	nop

c000c888 <Device::closeAll()>:
c000c888:	53                   	push   ebx
c000c889:	83 ec 08             	sub    esp,0x8
c000c88c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c890:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c892:	6a 00                	push   0x0
c000c894:	6a 00                	push   0x0
c000c896:	6a 00                	push   0x0
c000c898:	53                   	push   ebx
c000c899:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c89c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8a2:	83 c4 10             	add    esp,0x10
c000c8a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8a8:	74 0f                	je     c000c8b9 <Device::closeAll()+0x31>
c000c8aa:	83 ec 0c             	sub    esp,0xc
c000c8ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8b0:	e8 d3 ff ff ff       	call   c000c888 <Device::closeAll()>
c000c8b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8b7:	eb e9                	jmp    c000c8a2 <Device::closeAll()+0x1a>
c000c8b9:	83 c4 08             	add    esp,0x8
c000c8bc:	5b                   	pop    ebx
c000c8bd:	c3                   	ret    

c000c8be <Device::powerSavingAll(PowerSavingLevel)>:
c000c8be:	56                   	push   esi
c000c8bf:	53                   	push   ebx
c000c8c0:	83 ec 0c             	sub    esp,0xc
c000c8c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c8cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8cd:	56                   	push   esi
c000c8ce:	53                   	push   ebx
c000c8cf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c8d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8d8:	83 c4 10             	add    esp,0x10
c000c8db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8de:	74 0f                	je     c000c8ef <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c8e0:	52                   	push   edx
c000c8e1:	52                   	push   edx
c000c8e2:	56                   	push   esi
c000c8e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8e6:	e8 d3 ff ff ff       	call   c000c8be <Device::powerSavingAll(PowerSavingLevel)>
c000c8eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8ed:	eb e9                	jmp    c000c8d8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8ef:	58                   	pop    eax
c000c8f0:	5b                   	pop    ebx
c000c8f1:	5e                   	pop    esi
c000c8f2:	c3                   	ret    
c000c8f3:	90                   	nop

c000c8f4 <Device::setName(char const*)>:
c000c8f4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8fc:	e9 3f 3d ff ff       	jmp    c0000640 <strcpy>
c000c901:	90                   	nop

c000c902 <Device::Device(char const*)>:
c000c902:	83 ec 1c             	sub    esp,0x1c
c000c905:	ba 10 16 02 c0       	mov    edx,0xc0021610
c000c90a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c90e:	89 10                	mov    DWORD PTR [eax],edx
c000c910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c914:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c922:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c92c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c930:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c93e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c948:	83 ec 08             	sub    esp,0x8
c000c94b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c953:	e8 9c ff ff ff       	call   c000c8f4 <Device::setName(char const*)>
c000c958:	83 c4 10             	add    esp,0x10
c000c95b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c963:	83 ec 0c             	sub    esp,0xc
c000c966:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c96a:	e8 47 b1 ff ff       	call   c0007ab6 <malloc>
c000c96f:	83 c4 10             	add    esp,0x10
c000c972:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c978:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c97f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c983:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c989:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c993:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c9a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ae:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c9b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c9c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ee:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9f8:	90                   	nop
c000c9f9:	83 c4 1c             	add    esp,0x1c
c000c9fc:	c3                   	ret    
c000c9fd:	90                   	nop

c000c9fe <Device::getName()>:
c000c9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca02:	05 d0 00 00 00       	add    eax,0xd0
c000ca07:	c3                   	ret    

c000ca08 <DriverlessDevice::DriverlessDevice(char const*)>:
c000ca08:	83 ec 0c             	sub    esp,0xc
c000ca0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0f:	83 ec 08             	sub    esp,0x8
c000ca12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca16:	50                   	push   eax
c000ca17:	e8 e6 fe ff ff       	call   c000c902 <Device::Device(char const*)>
c000ca1c:	83 c4 10             	add    esp,0x10
c000ca1f:	ba 3c 16 02 c0       	mov    edx,0xc002163c
c000ca24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca28:	89 10                	mov    DWORD PTR [eax],edx
c000ca2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ca38:	90                   	nop
c000ca39:	83 c4 0c             	add    esp,0xc
c000ca3c:	c3                   	ret    
c000ca3d:	90                   	nop

c000ca3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca3e:	57                   	push   edi
c000ca3f:	56                   	push   esi
c000ca40:	53                   	push   ebx
c000ca41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca53:	75 0c                	jne    c000ca61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca55:	52                   	push   edx
c000ca56:	52                   	push   edx
c000ca57:	53                   	push   ebx
c000ca58:	56                   	push   esi
c000ca59:	e8 24 2d 01 00       	call   c001f782 <LinkedList<Device>::addElement(Device*)>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca6a:	74 12                	je     c000ca7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca6c:	50                   	push   eax
c000ca6d:	57                   	push   edi
c000ca6e:	56                   	push   esi
c000ca6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca72:	e8 c7 ff ff ff       	call   c000ca3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca79:	83 c4 10             	add    esp,0x10
c000ca7c:	eb e9                	jmp    c000ca67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca7e:	5b                   	pop    ebx
c000ca7f:	5e                   	pop    esi
c000ca80:	5f                   	pop    edi
c000ca81:	c3                   	ret    

c000ca82 <getDevicesOfType(DeviceType)>:
c000ca82:	53                   	push   ebx
c000ca83:	83 ec 14             	sub    esp,0x14
c000ca86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca8a:	53                   	push   ebx
c000ca8b:	e8 ce 2d 01 00       	call   c001f85e <LinkedList<Device>::LinkedList()>
c000ca90:	83 c4 0c             	add    esp,0xc
c000ca93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca97:	53                   	push   ebx
c000ca98:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca9e:	e8 9b ff ff ff       	call   c000ca3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000caa3:	89 d8                	mov    eax,ebx
c000caa5:	83 c4 18             	add    esp,0x18
c000caa8:	5b                   	pop    ebx
c000caa9:	c2 04 00             	ret    0x4

c000caac <HardDiskController::HardDiskController(char const*)>:
c000caac:	83 ec 0c             	sub    esp,0xc
c000caaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab3:	83 ec 08             	sub    esp,0x8
c000cab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caba:	50                   	push   eax
c000cabb:	e8 42 fe ff ff       	call   c000c902 <Device::Device(char const*)>
c000cac0:	83 c4 10             	add    esp,0x10
c000cac3:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000cac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cacc:	89 10                	mov    DWORD PTR [eax],edx
c000cace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cadc:	90                   	nop
c000cadd:	83 c4 0c             	add    esp,0xc
c000cae0:	c3                   	ret    
c000cae1:	90                   	nop
c000cae2:	66 90                	xchg   ax,ax

c000cae4 <HardDiskController::~HardDiskController()>:
c000cae4:	83 ec 0c             	sub    esp,0xc
c000cae7:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000caec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf0:	89 10                	mov    DWORD PTR [eax],edx
c000caf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf6:	83 ec 0c             	sub    esp,0xc
c000caf9:	50                   	push   eax
c000cafa:	e8 6d fb ff ff       	call   c000c66c <Device::~Device()>
c000caff:	83 c4 10             	add    esp,0x10
c000cb02:	90                   	nop
c000cb03:	83 c4 0c             	add    esp,0xc
c000cb06:	c3                   	ret    
c000cb07:	90                   	nop

c000cb08 <HardDiskController::~HardDiskController()>:
c000cb08:	83 ec 0c             	sub    esp,0xc
c000cb0b:	83 ec 0c             	sub    esp,0xc
c000cb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb12:	e8 cd ff ff ff       	call   c000cae4 <HardDiskController::~HardDiskController()>
c000cb17:	83 c4 10             	add    esp,0x10
c000cb1a:	83 ec 08             	sub    esp,0x8
c000cb1d:	68 58 01 00 00       	push   0x158
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 ed dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	83 c4 0c             	add    esp,0xc
c000cb31:	c3                   	ret    

c000cb32 <PhysicalDisk::eject()>:
c000cb32:	83 c8 ff             	or     eax,0xffffffff
c000cb35:	c3                   	ret    

c000cb36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cb36:	83 ec 0c             	sub    esp,0xc
c000cb39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3d:	83 ec 08             	sub    esp,0x8
c000cb40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb44:	50                   	push   eax
c000cb45:	e8 b8 fd ff ff       	call   c000c902 <Device::Device(char const*)>
c000cb4a:	83 c4 10             	add    esp,0x10
c000cb4d:	ba 94 16 02 c0       	mov    edx,0xc0021694
c000cb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb56:	89 10                	mov    DWORD PTR [eax],edx
c000cb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb98:	90                   	nop
c000cb99:	83 c4 0c             	add    esp,0xc
c000cb9c:	c3                   	ret    
c000cb9d:	90                   	nop

c000cb9e <PhysicalDisk::startCache()>:
c000cb9e:	56                   	push   esi
c000cb9f:	53                   	push   ebx
c000cba0:	83 ec 10             	sub    esp,0x10
c000cba3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cba7:	6a 44                	push   0x44
c000cba9:	e8 08 af ff ff       	call   c0007ab6 <malloc>
c000cbae:	89 c6                	mov    esi,eax
c000cbb0:	58                   	pop    eax
c000cbb1:	5a                   	pop    edx
c000cbb2:	53                   	push   ebx
c000cbb3:	56                   	push   esi
c000cbb4:	e8 7b 17 00 00       	call   c000e334 <VCache::VCache(PhysicalDisk*)>
c000cbb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cbbf:	83 c4 14             	add    esp,0x14
c000cbc2:	5b                   	pop    ebx
c000cbc3:	5e                   	pop    esi
c000cbc4:	c3                   	ret    
c000cbc5:	90                   	nop

c000cbc6 <PhysicalDisk::~PhysicalDisk()>:
c000cbc6:	83 ec 0c             	sub    esp,0xc
c000cbc9:	ba 94 16 02 c0       	mov    edx,0xc0021694
c000cbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbd2:	89 10                	mov    DWORD PTR [eax],edx
c000cbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbd8:	83 ec 0c             	sub    esp,0xc
c000cbdb:	50                   	push   eax
c000cbdc:	e8 8b fa ff ff       	call   c000c66c <Device::~Device()>
c000cbe1:	83 c4 10             	add    esp,0x10
c000cbe4:	90                   	nop
c000cbe5:	83 c4 0c             	add    esp,0xc
c000cbe8:	c3                   	ret    
c000cbe9:	90                   	nop

c000cbea <PhysicalDisk::~PhysicalDisk()>:
c000cbea:	83 ec 0c             	sub    esp,0xc
c000cbed:	83 ec 0c             	sub    esp,0xc
c000cbf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf4:	e8 cd ff ff ff       	call   c000cbc6 <PhysicalDisk::~PhysicalDisk()>
c000cbf9:	83 c4 10             	add    esp,0x10
c000cbfc:	83 ec 08             	sub    esp,0x8
c000cbff:	68 6c 01 00 00       	push   0x16c
c000cc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc08:	e8 0b dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	83 c4 0c             	add    esp,0xc
c000cc13:	c3                   	ret    

c000cc14 <int_handler>:
c000cc14:	55                   	push   ebp
c000cc15:	57                   	push   edi
c000cc16:	56                   	push   esi
c000cc17:	53                   	push   ebx
c000cc18:	83 ec 0c             	sub    esp,0xc
c000cc1b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cc1f:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc26:	74 0b                	je     c000cc33 <int_handler+0x1f>
c000cc28:	fa                   	cli    
c000cc29:	f4                   	hlt    
c000cc2a:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc31:	75 f5                	jne    c000cc28 <int_handler+0x14>
c000cc33:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cc36:	8d 46 e0             	lea    eax,[esi-0x20]
c000cc39:	83 f8 17             	cmp    eax,0x17
c000cc3c:	76 40                	jbe    c000cc7e <int_handler+0x6a>
c000cc3e:	c1 e6 04             	shl    esi,0x4
c000cc41:	31 db                	xor    ebx,ebx
c000cc43:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc49:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc4f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc53:	85 c0                	test   eax,eax
c000cc55:	74 13                	je     c000cc6a <int_handler+0x56>
c000cc57:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc5a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc5e:	74 2c                	je     c000cc8c <int_handler+0x78>
c000cc60:	83 ec 08             	sub    esp,0x8
c000cc63:	52                   	push   edx
c000cc64:	57                   	push   edi
c000cc65:	ff d0                	call   eax
c000cc67:	83 c4 10             	add    esp,0x10
c000cc6a:	83 c3 01             	add    ebx,0x1
c000cc6d:	83 fb 04             	cmp    ebx,0x4
c000cc70:	75 dd                	jne    c000cc4f <int_handler+0x3b>
c000cc72:	83 c4 0c             	add    esp,0xc
c000cc75:	31 c0                	xor    eax,eax
c000cc77:	5b                   	pop    ebx
c000cc78:	31 d2                	xor    edx,edx
c000cc7a:	5e                   	pop    esi
c000cc7b:	5f                   	pop    edi
c000cc7c:	5d                   	pop    ebp
c000cc7d:	c3                   	ret    
c000cc7e:	83 ec 0c             	sub    esp,0xc
c000cc81:	50                   	push   eax
c000cc82:	e8 99 b2 00 00       	call   c0017f20 <HalEndOfInterrupt(int)>
c000cc87:	83 c4 10             	add    esp,0x10
c000cc8a:	eb b2                	jmp    c000cc3e <int_handler+0x2a>
c000cc8c:	83 ec 08             	sub    esp,0x8
c000cc8f:	52                   	push   edx
c000cc90:	57                   	push   edi
c000cc91:	ff d0                	call   eax
c000cc93:	83 c4 10             	add    esp,0x10
c000cc96:	83 c4 0c             	add    esp,0xc
c000cc99:	5b                   	pop    ebx
c000cc9a:	5e                   	pop    esi
c000cc9b:	5f                   	pop    edi
c000cc9c:	5d                   	pop    ebp
c000cc9d:	c3                   	ret    

c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc9e:	56                   	push   esi
c000cc9f:	31 c0                	xor    eax,eax
c000cca1:	53                   	push   ebx
c000cca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cca6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccaa:	89 ca                	mov    edx,ecx
c000ccac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccb0:	c1 e2 04             	shl    edx,0x4
c000ccb3:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000ccbb:	74 17                	je     c000ccd4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000ccbd:	83 c0 01             	add    eax,0x1
c000ccc0:	83 f8 04             	cmp    eax,0x4
c000ccc3:	75 ee                	jne    c000ccb3 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000ccc5:	c7 44 24 0c c4 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc00216c4
c000cccd:	5b                   	pop    ebx
c000ccce:	5e                   	pop    esi
c000cccf:	e9 c5 46 00 00       	jmp    c0011399 <KePanic(char const*)>
c000ccd4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ccd7:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000ccde:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cce5:	5b                   	pop    ebx
c000cce6:	5e                   	pop    esi
c000cce7:	c3                   	ret    

c000cce8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cce8:	57                   	push   edi
c000cce9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccef:	56                   	push   esi
c000ccf0:	53                   	push   ebx
c000ccf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccf9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cd00:	74 54                	je     c000cd56 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cd02:	89 c7                	mov    edi,eax
c000cd04:	84 c0                	test   al,al
c000cd06:	74 1d                	je     c000cd25 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cd08:	83 fe 0f             	cmp    esi,0xf
c000cd0b:	0f 8f d5 00 00 00    	jg     c000cde6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cd11:	0f b6 b6 c8 31 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdce38]
c000cd18:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cd20:	d1 ef                	shr    edi,1
c000cd22:	83 e7 01             	and    edi,0x1
c000cd25:	83 ec 08             	sub    esp,0x8
c000cd28:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd2d:	31 db                	xor    ebx,ebx
c000cd2f:	50                   	push   eax
c000cd30:	68 d1 16 02 c0       	push   0xc00216d1
c000cd35:	e8 0b dc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cd3a:	83 c4 10             	add    esp,0x10
c000cd3d:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd42:	85 c0                	test   eax,eax
c000cd44:	7f 55                	jg     c000cd9b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd46:	83 ec 0c             	sub    esp,0xc
c000cd49:	68 e8 16 02 c0       	push   0xc00216e8
c000cd4e:	e8 46 46 00 00       	call   c0011399 <KePanic(char const*)>
c000cd53:	83 c4 10             	add    esp,0x10
c000cd56:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd59:	89 f8                	mov    eax,edi
c000cd5b:	31 d2                	xor    edx,edx
c000cd5d:	c1 e0 04             	shl    eax,0x4
c000cd60:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd67:	85 c9                	test   ecx,ecx
c000cd69:	0f 84 8e 00 00 00    	je     c000cdfd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cd6f:	83 c2 01             	add    edx,0x1
c000cd72:	83 fa 04             	cmp    edx,0x4
c000cd75:	75 e9                	jne    c000cd60 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd77:	83 ec 0c             	sub    esp,0xc
c000cd7a:	68 3c 17 02 c0       	push   0xc002173c
c000cd7f:	e8 15 46 00 00       	call   c0011399 <KePanic(char const*)>
c000cd84:	83 c4 10             	add    esp,0x10
c000cd87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd8c:	5b                   	pop    ebx
c000cd8d:	5e                   	pop    esi
c000cd8e:	5f                   	pop    edi
c000cd8f:	c3                   	ret    
c000cd90:	83 c3 01             	add    ebx,0x1
c000cd93:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd99:	7e ab                	jle    c000cd46 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cd9b:	83 ec 08             	sub    esp,0x8
c000cd9e:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cda5:	56                   	push   esi
c000cda6:	50                   	push   eax
c000cda7:	e8 fe 18 01 00       	call   c001e6aa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	84 c0                	test   al,al
c000cdb1:	74 dd                	je     c000cd90 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cdb3:	83 ec 04             	sub    esp,0x4
c000cdb6:	89 f8                	mov    eax,edi
c000cdb8:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cdbf:	0f b6 f8             	movzx  edi,al
c000cdc2:	57                   	push   edi
c000cdc3:	8d 7e 20             	lea    edi,[esi+0x20]
c000cdc6:	6a 00                	push   0x0
c000cdc8:	89 f8                	mov    eax,edi
c000cdca:	0f b6 c0             	movzx  eax,al
c000cdcd:	50                   	push   eax
c000cdce:	89 f0                	mov    eax,esi
c000cdd0:	6a 00                	push   0x0
c000cdd2:	0f b6 c0             	movzx  eax,al
c000cdd5:	6a 00                	push   0x0
c000cdd7:	50                   	push   eax
c000cdd8:	53                   	push   ebx
c000cdd9:	e8 38 1a 01 00       	call   c001e816 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cdde:	83 c4 20             	add    esp,0x20
c000cde1:	e9 73 ff ff ff       	jmp    c000cd59 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cde6:	83 ec 0c             	sub    esp,0xc
c000cde9:	31 ff                	xor    edi,edi
c000cdeb:	68 04 17 02 c0       	push   0xc0021704
c000cdf0:	e8 a4 45 00 00       	call   c0011399 <KePanic(char const*)>
c000cdf5:	83 c4 10             	add    esp,0x10
c000cdf8:	e9 28 ff ff ff       	jmp    c000cd25 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cdfd:	8d 04 ba             	lea    eax,[edx+edi*4]
c000ce00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ce04:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ce0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ce0f:	5b                   	pop    ebx
c000ce10:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000ce17:	89 f0                	mov    eax,esi
c000ce19:	5e                   	pop    esi
c000ce1a:	5f                   	pop    edi
c000ce1b:	c3                   	ret    

c000ce1c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ce1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce24:	c1 e0 04             	shl    eax,0x4
c000ce27:	8d 50 10             	lea    edx,[eax+0x10]
c000ce2a:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce30:	74 08                	je     c000ce3a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce32:	83 c0 04             	add    eax,0x4
c000ce35:	39 d0                	cmp    eax,edx
c000ce37:	75 f1                	jne    c000ce2a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce39:	c3                   	ret    
c000ce3a:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce44:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce4e:	eb e2                	jmp    c000ce32 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce50 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce50:	53                   	push   ebx
c000ce51:	83 ec 08             	sub    esp,0x8
c000ce54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce58:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce5d:	74 0e                	je     c000ce6d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce64:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce6b:	75 37                	jne    c000cea4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000ce6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce71:	83 c0 20             	add    eax,0x20
c000ce74:	c1 e0 04             	shl    eax,0x4
c000ce77:	8d 50 10             	lea    edx,[eax+0x10]
c000ce7a:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000ce80:	74 0c                	je     c000ce8e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ce82:	83 c0 04             	add    eax,0x4
c000ce85:	39 d0                	cmp    eax,edx
c000ce87:	75 f1                	jne    c000ce7a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ce89:	83 c4 08             	add    esp,0x8
c000ce8c:	5b                   	pop    ebx
c000ce8d:	c3                   	ret    
c000ce8e:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce98:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cea2:	eb de                	jmp    c000ce82 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cea4:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000cea9:	7f 11                	jg     c000cebc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ceab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceaf:	0f b6 80 c8 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce38]
c000ceb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceba:	eb b1                	jmp    c000ce6d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cebc:	83 ec 0c             	sub    esp,0xc
c000cebf:	68 f5 16 02 c0       	push   0xc00216f5
c000cec4:	e8 d0 44 00 00       	call   c0011399 <KePanic(char const*)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	eb 9f                	jmp    c000ce6d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cece <setupINTS()>:
c000cece:	31 c0                	xor    eax,eax
c000ced0:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ceda:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cee4:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000ceee:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000cef8:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cf02:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000cf0c:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cf16:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cf20:	83 c0 10             	add    eax,0x10
c000cf23:	3d 00 10 00 00       	cmp    eax,0x1000
c000cf28:	75 a6                	jne    c000ced0 <setupINTS()+0x2>
c000cf2a:	c3                   	ret    

c000cf2b <convertLegacyIRQNumber(int)>:
c000cf2b:	83 ec 0c             	sub    esp,0xc
c000cf2e:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cf34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf38:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf3f:	74 0c                	je     c000cf4d <convertLegacyIRQNumber(int)+0x22>
c000cf41:	83 f8 0f             	cmp    eax,0xf
c000cf44:	7f 0b                	jg     c000cf51 <convertLegacyIRQNumber(int)+0x26>
c000cf46:	0f b6 80 c8 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce38]
c000cf4d:	83 c4 0c             	add    esp,0xc
c000cf50:	c3                   	ret    
c000cf51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf55:	83 ec 0c             	sub    esp,0xc
c000cf58:	68 04 17 02 c0       	push   0xc0021704
c000cf5d:	e8 37 44 00 00       	call   c0011399 <KePanic(char const*)>
c000cf62:	83 c4 10             	add    esp,0x10
c000cf65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf69:	83 c4 0c             	add    esp,0xc
c000cf6c:	c3                   	ret    
c000cf6d:	90                   	nop

c000cf6e <startGUI(void*)>:
c000cf6e:	55                   	push   ebp
c000cf6f:	89 e5                	mov    ebp,esp
c000cf71:	53                   	push   ebx
c000cf72:	83 ec 04             	sub    esp,0x4
c000cf75:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf7a:	83 e8 01             	sub    eax,0x1
c000cf7d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf82:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf87:	85 c0                	test   eax,eax
c000cf89:	75 01                	jne    c000cf8c <startGUI(void*)+0x1e>
c000cf8b:	fb                   	sti    
c000cf8c:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf92:	83 ec 08             	sub    esp,0x8
c000cf95:	6a 01                	push   0x1
c000cf97:	68 61 17 02 c0       	push   0xc0021761
c000cf9c:	e8 59 82 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c000cfa1:	83 c4 10             	add    esp,0x10
c000cfa4:	83 ec 08             	sub    esp,0x8
c000cfa7:	53                   	push   ebx
c000cfa8:	50                   	push   eax
c000cfa9:	e8 7d 84 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c000cfae:	83 c4 10             	add    esp,0x10
c000cfb1:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfb7:	83 ec 08             	sub    esp,0x8
c000cfba:	6a 01                	push   0x1
c000cfbc:	68 7b 17 02 c0       	push   0xc002177b
c000cfc1:	e8 34 82 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	83 ec 08             	sub    esp,0x8
c000cfcc:	53                   	push   ebx
c000cfcd:	50                   	push   eax
c000cfce:	e8 58 84 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c000cfd3:	83 c4 10             	add    esp,0x10
c000cfd6:	90                   	nop
c000cfd7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfda:	c9                   	leave  
c000cfdb:	c3                   	ret    

c000cfdc <startGUIVESA(void*)>:
c000cfdc:	55                   	push   ebp
c000cfdd:	89 e5                	mov    ebp,esp
c000cfdf:	53                   	push   ebx
c000cfe0:	83 ec 04             	sub    esp,0x4
c000cfe3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfe8:	83 e8 01             	sub    eax,0x1
c000cfeb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cff0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cff5:	85 c0                	test   eax,eax
c000cff7:	75 01                	jne    c000cffa <startGUIVESA(void*)+0x1e>
c000cff9:	fb                   	sti    
c000cffa:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d000:	83 ec 08             	sub    esp,0x8
c000d003:	6a 01                	push   0x1
c000d005:	68 99 17 02 c0       	push   0xc0021799
c000d00a:	e8 eb 81 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c000d00f:	83 c4 10             	add    esp,0x10
c000d012:	83 ec 08             	sub    esp,0x8
c000d015:	53                   	push   ebx
c000d016:	50                   	push   eax
c000d017:	e8 0f 84 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c000d01c:	83 c4 10             	add    esp,0x10
c000d01f:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d025:	83 ec 08             	sub    esp,0x8
c000d028:	6a 01                	push   0x1
c000d02a:	68 7b 17 02 c0       	push   0xc002177b
c000d02f:	e8 c6 81 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c000d034:	83 c4 10             	add    esp,0x10
c000d037:	83 ec 08             	sub    esp,0x8
c000d03a:	53                   	push   ebx
c000d03b:	50                   	push   eax
c000d03c:	e8 ea 83 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c000d041:	83 c4 10             	add    esp,0x10
c000d044:	90                   	nop
c000d045:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d048:	c9                   	leave  
c000d049:	c3                   	ret    

c000d04a <sendKeyToTerminal(unsigned char)>:
c000d04a:	55                   	push   ebp
c000d04b:	89 e5                	mov    ebp,esp
c000d04d:	83 ec 28             	sub    esp,0x28
c000d050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d053:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d056:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d05b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d05f:	83 ec 08             	sub    esp,0x8
c000d062:	52                   	push   edx
c000d063:	50                   	push   eax
c000d064:	e8 4d bd ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d070:	83 f8 0a             	cmp    eax,0xa
c000d073:	74 16                	je     c000d08b <sendKeyToTerminal(unsigned char)+0x41>
c000d075:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d079:	83 f8 03             	cmp    eax,0x3
c000d07c:	74 0d                	je     c000d08b <sendKeyToTerminal(unsigned char)+0x41>
c000d07e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d082:	83 f8 1c             	cmp    eax,0x1c
c000d085:	0f 85 97 00 00 00    	jne    c000d122 <sendKeyToTerminal(unsigned char)+0xd8>
c000d08b:	fa                   	cli    
c000d08c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d091:	83 c0 01             	add    eax,0x1
c000d094:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d099:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d09e:	83 c0 01             	add    eax,0x1
c000d0a1:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0a6:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d0ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0ae:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d0b8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d0bc:	74 1f                	je     c000d0dd <sendKeyToTerminal(unsigned char)+0x93>
c000d0be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0c1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d0c4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d0c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d0ca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0cd:	83 ec 0c             	sub    esp,0xc
c000d0d0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d0d3:	e8 98 90 00 00       	call   c0016170 <unblockTask(ThreadControlBlock*)>
c000d0d8:	83 c4 10             	add    esp,0x10
c000d0db:	eb db                	jmp    c000d0b8 <sendKeyToTerminal(unsigned char)+0x6e>
c000d0dd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0e2:	83 e8 01             	sub    eax,0x1
c000d0e5:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0ea:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0ef:	85 c0                	test   eax,eax
c000d0f1:	75 18                	jne    c000d10b <sendKeyToTerminal(unsigned char)+0xc1>
c000d0f3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0f8:	85 c0                	test   eax,eax
c000d0fa:	74 0f                	je     c000d10b <sendKeyToTerminal(unsigned char)+0xc1>
c000d0fc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d106:	e8 4d 8b 00 00       	call   c0015c58 <schedule()>
c000d10b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d110:	83 e8 01             	sub    eax,0x1
c000d113:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d118:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d11d:	85 c0                	test   eax,eax
c000d11f:	75 01                	jne    c000d122 <sendKeyToTerminal(unsigned char)+0xd8>
c000d121:	fb                   	sti    
c000d122:	90                   	nop
c000d123:	c9                   	leave  
c000d124:	c3                   	ret    

c000d125 <sendKeyboardToken(KeyboardToken)>:
c000d125:	55                   	push   ebp
c000d126:	89 e5                	mov    ebp,esp
c000d128:	83 ec 18             	sub    esp,0x18
c000d12b:	e8 b9 42 00 00       	call   c00113e9 <KeUserIOReceived()>
c000d130:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d136:	0f b7 c0             	movzx  eax,ax
c000d139:	83 f2 01             	xor    edx,0x1
c000d13c:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d142:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d147:	85 c0                	test   eax,eax
c000d149:	74 24                	je     c000d16f <sendKeyboardToken(KeyboardToken)+0x4a>
c000d14b:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d151:	83 ec 04             	sub    esp,0x4
c000d154:	68 40 84 02 c0       	push   0xc0028440
c000d159:	83 ec 08             	sub    esp,0x8
c000d15c:	89 e2                	mov    edx,esp
c000d15e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d161:	89 02                	mov    DWORD PTR [edx],eax
c000d163:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d166:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d16a:	ff d1                	call   ecx
c000d16c:	83 c4 10             	add    esp,0x10
c000d16f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d173:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d176:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d17b:	0f b6 d2             	movzx  edx,dl
c000d17e:	0f b6 c0             	movzx  eax,al
c000d181:	39 c2                	cmp    edx,eax
c000d183:	74 1c                	je     c000d1a1 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d185:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d188:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d18d:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d192:	0f b6 c0             	movzx  eax,al
c000d195:	83 ec 0c             	sub    esp,0xc
c000d198:	50                   	push   eax
c000d199:	e8 64 b3 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d1a4:	0f b6 c0             	movzx  eax,al
c000d1a7:	85 c0                	test   eax,eax
c000d1a9:	0f 84 da 00 00 00    	je     c000d289 <sendKeyboardToken(KeyboardToken)+0x164>
c000d1af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b2:	0f b7 c0             	movzx  eax,ax
c000d1b5:	3d 18 03 00 00       	cmp    eax,0x318
c000d1ba:	75 06                	jne    c000d1c2 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d1bc:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c5:	0f b7 c0             	movzx  eax,ax
c000d1c8:	3d 19 03 00 00       	cmp    eax,0x319
c000d1cd:	75 06                	jne    c000d1d5 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d1cf:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d1d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d8:	0f b7 c0             	movzx  eax,ax
c000d1db:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1e0:	75 06                	jne    c000d1e8 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1e2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1eb:	0f b7 c0             	movzx  eax,ax
c000d1ee:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1f3:	75 06                	jne    c000d1fb <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1f5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1fe:	0f b7 c0             	movzx  eax,ax
c000d201:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d206:	75 06                	jne    c000d20e <sendKeyboardToken(KeyboardToken)+0xe9>
c000d208:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d20e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d211:	0f b7 c0             	movzx  eax,ax
c000d214:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d219:	75 06                	jne    c000d221 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d21b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d224:	0f b7 c0             	movzx  eax,ax
c000d227:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d22c:	75 06                	jne    c000d234 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d22e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d237:	0f b7 c0             	movzx  eax,ax
c000d23a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d23f:	75 06                	jne    c000d247 <sendKeyboardToken(KeyboardToken)+0x122>
c000d241:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d24a:	0f b7 c0             	movzx  eax,ax
c000d24d:	3d 20 03 00 00       	cmp    eax,0x320
c000d252:	75 06                	jne    c000d25a <sendKeyboardToken(KeyboardToken)+0x135>
c000d254:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d25a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d25d:	0f b7 c0             	movzx  eax,ax
c000d260:	3d 21 03 00 00       	cmp    eax,0x321
c000d265:	75 06                	jne    c000d26d <sendKeyboardToken(KeyboardToken)+0x148>
c000d267:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d26d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d270:	0f b7 c0             	movzx  eax,ax
c000d273:	3d 22 03 00 00       	cmp    eax,0x322
c000d278:	0f 85 f1 00 00 00    	jne    c000d36f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d27e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d284:	e9 e6 00 00 00       	jmp    c000d36f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d28c:	0f b7 c0             	movzx  eax,ax
c000d28f:	3d 18 03 00 00       	cmp    eax,0x318
c000d294:	75 0a                	jne    c000d2a0 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d296:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d29c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a3:	0f b7 c0             	movzx  eax,ax
c000d2a6:	3d 19 03 00 00       	cmp    eax,0x319
c000d2ab:	75 0a                	jne    c000d2b7 <sendKeyboardToken(KeyboardToken)+0x192>
c000d2ad:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d2b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ba:	0f b7 c0             	movzx  eax,ax
c000d2bd:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d2c2:	75 0a                	jne    c000d2ce <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d2c4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d2ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d1:	0f b7 c0             	movzx  eax,ax
c000d2d4:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d2d9:	75 0a                	jne    c000d2e5 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d2db:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2e1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e8:	0f b7 c0             	movzx  eax,ax
c000d2eb:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2f0:	75 0a                	jne    c000d2fc <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2f2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ff:	0f b7 c0             	movzx  eax,ax
c000d302:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d307:	75 0a                	jne    c000d313 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d309:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d30f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d316:	0f b7 c0             	movzx  eax,ax
c000d319:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d31e:	75 0a                	jne    c000d32a <sendKeyboardToken(KeyboardToken)+0x205>
c000d320:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d326:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d32a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d32d:	0f b7 c0             	movzx  eax,ax
c000d330:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d335:	75 0a                	jne    c000d341 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d337:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d33d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d344:	0f b7 c0             	movzx  eax,ax
c000d347:	3d 20 03 00 00       	cmp    eax,0x320
c000d34c:	75 0a                	jne    c000d358 <sendKeyboardToken(KeyboardToken)+0x233>
c000d34e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d354:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d35b:	0f b7 c0             	movzx  eax,ax
c000d35e:	3d 21 03 00 00       	cmp    eax,0x321
c000d363:	75 0a                	jne    c000d36f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d365:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d36b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d372:	0f b7 c0             	movzx  eax,ax
c000d375:	3d 00 02 00 00       	cmp    eax,0x200
c000d37a:	75 2f                	jne    c000d3ab <sendKeyboardToken(KeyboardToken)+0x286>
c000d37c:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d381:	83 f0 01             	xor    eax,0x1
c000d384:	0f b6 c0             	movzx  eax,al
c000d387:	85 c0                	test   eax,eax
c000d389:	74 20                	je     c000d3ab <sendKeyboardToken(KeyboardToken)+0x286>
c000d38b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d390:	6a 01                	push   0x1
c000d392:	6a 00                	push   0x0
c000d394:	68 6e cf 00 c0       	push   0xc000cf6e
c000d399:	50                   	push   eax
c000d39a:	e8 69 86 00 00       	call   c0015a08 <Process::createThread(void (*)(void*), void*, int)>
c000d39f:	83 c4 10             	add    esp,0x10
c000d3a2:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3a9:	eb 3a                	jmp    c000d3e5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ae:	0f b7 c0             	movzx  eax,ax
c000d3b1:	3d 01 02 00 00       	cmp    eax,0x201
c000d3b6:	75 2d                	jne    c000d3e5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3b8:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d3bd:	83 f0 01             	xor    eax,0x1
c000d3c0:	0f b6 c0             	movzx  eax,al
c000d3c3:	85 c0                	test   eax,eax
c000d3c5:	74 1e                	je     c000d3e5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3c7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3cc:	6a 01                	push   0x1
c000d3ce:	6a 00                	push   0x0
c000d3d0:	68 dc cf 00 c0       	push   0xc000cfdc
c000d3d5:	50                   	push   eax
c000d3d6:	e8 2d 86 00 00       	call   c0015a08 <Process::createThread(void (*)(void*), void*, int)>
c000d3db:	83 c4 10             	add    esp,0x10
c000d3de:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e8:	0f b7 c0             	movzx  eax,ax
c000d3eb:	3d 25 03 00 00       	cmp    eax,0x325
c000d3f0:	75 06                	jne    c000d3f8 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3f2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3fb:	0f b7 c0             	movzx  eax,ax
c000d3fe:	3d 24 03 00 00       	cmp    eax,0x324
c000d403:	75 06                	jne    c000d40b <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d405:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40e:	0f b7 c0             	movzx  eax,ax
c000d411:	3d 23 03 00 00       	cmp    eax,0x323
c000d416:	75 06                	jne    c000d41e <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d418:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d421:	0f b7 c0             	movzx  eax,ax
c000d424:	3d 26 03 00 00       	cmp    eax,0x326
c000d429:	75 06                	jne    c000d431 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d42b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d434:	0f b7 c0             	movzx  eax,ax
c000d437:	3d 27 03 00 00       	cmp    eax,0x327
c000d43c:	75 06                	jne    c000d444 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d43e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d447:	0f b7 c0             	movzx  eax,ax
c000d44a:	3d 22 03 00 00       	cmp    eax,0x322
c000d44f:	75 06                	jne    c000d457 <sendKeyboardToken(KeyboardToken)+0x332>
c000d451:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d457:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d45b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d45e:	83 f0 01             	xor    eax,0x1
c000d461:	0f b6 c0             	movzx  eax,al
c000d464:	85 c0                	test   eax,eax
c000d466:	74 7c                	je     c000d4e4 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d468:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d46d:	0f b6 c0             	movzx  eax,al
c000d470:	85 c0                	test   eax,eax
c000d472:	74 43                	je     c000d4b7 <sendKeyboardToken(KeyboardToken)+0x392>
c000d474:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d478:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d47c:	85 c0                	test   eax,eax
c000d47e:	74 2b                	je     c000d4ab <sendKeyboardToken(KeyboardToken)+0x386>
c000d480:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d486:	89 d0                	mov    eax,edx
c000d488:	c1 e0 02             	shl    eax,0x2
c000d48b:	01 d0                	add    eax,edx
c000d48d:	01 c0                	add    eax,eax
c000d48f:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d497:	0f b7 c0             	movzx  eax,ax
c000d49a:	8d 50 d0             	lea    edx,[eax-0x30]
c000d49d:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4a2:	01 d0                	add    eax,edx
c000d4a4:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d4a9:	eb 71                	jmp    c000d51c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4ab:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4b5:	eb 65                	jmp    c000d51c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4b7:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4bc:	85 c0                	test   eax,eax
c000d4be:	74 18                	je     c000d4d8 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d4c0:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4c5:	0f b6 c0             	movzx  eax,al
c000d4c8:	83 ec 0c             	sub    esp,0xc
c000d4cb:	50                   	push   eax
c000d4cc:	e8 79 fb ff ff       	call   c000d04a <sendKeyToTerminal(unsigned char)>
c000d4d1:	83 c4 10             	add    esp,0x10
c000d4d4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4d8:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4e2:	eb 38                	jmp    c000d51c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e7:	0f b7 c0             	movzx  eax,ax
c000d4ea:	3d 01 01 00 00       	cmp    eax,0x101
c000d4ef:	75 2b                	jne    c000d51c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4f1:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4f6:	85 c0                	test   eax,eax
c000d4f8:	74 18                	je     c000d512 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4fa:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4ff:	0f b6 c0             	movzx  eax,al
c000d502:	83 ec 0c             	sub    esp,0xc
c000d505:	50                   	push   eax
c000d506:	e8 3f fb ff ff       	call   c000d04a <sendKeyToTerminal(unsigned char)>
c000d50b:	83 c4 10             	add    esp,0x10
c000d50e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d512:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d51c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d51f:	83 f0 01             	xor    eax,0x1
c000d522:	0f b6 c0             	movzx  eax,al
c000d525:	85 c0                	test   eax,eax
c000d527:	74 5a                	je     c000d583 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d529:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d52c:	83 f0 01             	xor    eax,0x1
c000d52f:	0f b6 c0             	movzx  eax,al
c000d532:	85 c0                	test   eax,eax
c000d534:	74 4d                	je     c000d583 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d536:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d53b:	83 f0 01             	xor    eax,0x1
c000d53e:	0f b6 c0             	movzx  eax,al
c000d541:	85 c0                	test   eax,eax
c000d543:	74 3e                	je     c000d583 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d548:	0f b7 c0             	movzx  eax,ax
c000d54b:	83 f8 1f             	cmp    eax,0x1f
c000d54e:	76 0b                	jbe    c000d55b <sendKeyboardToken(KeyboardToken)+0x436>
c000d550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d553:	0f b7 c0             	movzx  eax,ax
c000d556:	83 f8 7e             	cmp    eax,0x7e
c000d559:	76 16                	jbe    c000d571 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d55b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55e:	0f b7 c0             	movzx  eax,ax
c000d561:	83 f8 0a             	cmp    eax,0xa
c000d564:	74 0b                	je     c000d571 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d569:	0f b7 c0             	movzx  eax,ax
c000d56c:	83 f8 08             	cmp    eax,0x8
c000d56f:	75 12                	jne    c000d583 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d574:	0f b6 c0             	movzx  eax,al
c000d577:	83 ec 0c             	sub    esp,0xc
c000d57a:	50                   	push   eax
c000d57b:	e8 ca fa ff ff       	call   c000d04a <sendKeyToTerminal(unsigned char)>
c000d580:	83 c4 10             	add    esp,0x10
c000d583:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d586:	83 f0 01             	xor    eax,0x1
c000d589:	0f b6 c0             	movzx  eax,al
c000d58c:	85 c0                	test   eax,eax
c000d58e:	74 5d                	je     c000d5ed <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d590:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d593:	83 f0 01             	xor    eax,0x1
c000d596:	0f b6 c0             	movzx  eax,al
c000d599:	85 c0                	test   eax,eax
c000d59b:	74 50                	je     c000d5ed <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d59d:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d5a2:	0f b6 c0             	movzx  eax,al
c000d5a5:	85 c0                	test   eax,eax
c000d5a7:	74 44                	je     c000d5ed <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ac:	0f b7 c0             	movzx  eax,ax
c000d5af:	83 f8 3f             	cmp    eax,0x3f
c000d5b2:	76 39                	jbe    c000d5ed <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b7:	0f b7 c0             	movzx  eax,ax
c000d5ba:	83 f8 7f             	cmp    eax,0x7f
c000d5bd:	77 2e                	ja     c000d5ed <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c2:	88 c2                	mov    dl,al
c000d5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c7:	0f b7 c0             	movzx  eax,ax
c000d5ca:	83 f8 5f             	cmp    eax,0x5f
c000d5cd:	76 04                	jbe    c000d5d3 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d5cf:	b0 20                	mov    al,0x20
c000d5d1:	eb 02                	jmp    c000d5d5 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d5d3:	b0 00                	mov    al,0x0
c000d5d5:	89 d1                	mov    ecx,edx
c000d5d7:	29 c1                	sub    ecx,eax
c000d5d9:	89 c8                	mov    eax,ecx
c000d5db:	83 e8 40             	sub    eax,0x40
c000d5de:	0f b6 c0             	movzx  eax,al
c000d5e1:	83 ec 0c             	sub    esp,0xc
c000d5e4:	50                   	push   eax
c000d5e5:	e8 60 fa ff ff       	call   c000d04a <sendKeyToTerminal(unsigned char)>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f0:	0f b7 c0             	movzx  eax,ax
c000d5f3:	3d 00 03 00 00       	cmp    eax,0x300
c000d5f8:	75 12                	jne    c000d60c <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5fa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5fd:	83 f0 01             	xor    eax,0x1
c000d600:	0f b6 c0             	movzx  eax,al
c000d603:	85 c0                	test   eax,eax
c000d605:	74 05                	je     c000d60c <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d607:	e8 f7 ae ff ff       	call   c0008503 <doTerminalCycle()>
c000d60c:	90                   	nop
c000d60d:	c9                   	leave  
c000d60e:	c3                   	ret    

c000d60f <clearInternalKeybuffer(VgaText*)>:
c000d60f:	55                   	push   ebp
c000d610:	89 e5                	mov    ebp,esp
c000d612:	83 ec 08             	sub    esp,0x8
c000d615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d618:	05 02 01 00 00       	add    eax,0x102
c000d61d:	83 ec 0c             	sub    esp,0xc
c000d620:	50                   	push   eax
c000d621:	e8 4a 2f ff ff       	call   c0000570 <strlen>
c000d626:	83 c4 10             	add    esp,0x10
c000d629:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d62c:	81 c2 02 01 00 00    	add    edx,0x102
c000d632:	83 ec 04             	sub    esp,0x4
c000d635:	50                   	push   eax
c000d636:	6a 00                	push   0x0
c000d638:	52                   	push   edx
c000d639:	e8 b2 2e ff ff       	call   c00004f0 <memset>
c000d63e:	83 c4 10             	add    esp,0x10
c000d641:	90                   	nop
c000d642:	c9                   	leave  
c000d643:	c3                   	ret    

c000d644 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d644:	55                   	push   ebp
c000d645:	89 e5                	mov    ebp,esp
c000d647:	83 ec 18             	sub    esp,0x18
c000d64a:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d64f:	85 c0                	test   eax,eax
c000d651:	74 2a                	je     c000d67d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d653:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d659:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d65f:	83 ec 04             	sub    esp,0x4
c000d662:	68 40 84 02 c0       	push   0xc0028440
c000d667:	83 ec 08             	sub    esp,0x8
c000d66a:	89 e2                	mov    edx,esp
c000d66c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d66f:	89 02                	mov    DWORD PTR [edx],eax
c000d671:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d674:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d678:	ff d1                	call   ecx
c000d67a:	83 c4 10             	add    esp,0x10
c000d67d:	fb                   	sti    
c000d67e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d685:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d689:	0f 84 0d 01 00 00    	je     c000d79c <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d68f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d692:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d698:	0f be c0             	movsx  eax,al
c000d69b:	85 c0                	test   eax,eax
c000d69d:	75 2c                	jne    c000d6cb <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d69f:	fa                   	cli    
c000d6a0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6a5:	83 c0 01             	add    eax,0x1
c000d6a8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6ad:	e8 a6 85 00 00       	call   c0015c58 <schedule()>
c000d6b2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6b7:	83 e8 01             	sub    eax,0x1
c000d6ba:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6bf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6c4:	85 c0                	test   eax,eax
c000d6c6:	75 c7                	jne    c000d68f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6c8:	fb                   	sti    
c000d6c9:	eb c4                	jmp    c000d68f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d6ce:	8d 50 01             	lea    edx,[eax+0x1]
c000d6d1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d6d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6d7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d6dd:	88 10                	mov    BYTE PTR [eax],dl
c000d6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6e8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6eb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6ef:	83 f8 03             	cmp    eax,0x3
c000d6f2:	75 1e                	jne    c000d712 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6fe:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d704:	83 ec 08             	sub    esp,0x8
c000d707:	6a 02                	push   0x2
c000d709:	50                   	push   eax
c000d70a:	e8 2b 41 00 00       	call   c001183a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d716:	83 f8 1c             	cmp    eax,0x1c
c000d719:	75 1e                	jne    c000d739 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d71b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d720:	8b 00                	mov    eax,DWORD PTR [eax]
c000d722:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d725:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d72b:	83 ec 08             	sub    esp,0x8
c000d72e:	6a 09                	push   0x9
c000d730:	50                   	push   eax
c000d731:	e8 04 41 00 00       	call   c001183a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73c:	05 02 01 00 00       	add    eax,0x102
c000d741:	83 ec 0c             	sub    esp,0xc
c000d744:	50                   	push   eax
c000d745:	e8 26 2e ff ff       	call   c0000570 <strlen>
c000d74a:	83 c4 10             	add    esp,0x10
c000d74d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d750:	81 c2 02 01 00 00    	add    edx,0x102
c000d756:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d759:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d75c:	81 c2 02 01 00 00    	add    edx,0x102
c000d762:	83 ec 04             	sub    esp,0x4
c000d765:	50                   	push   eax
c000d766:	51                   	push   ecx
c000d767:	52                   	push   edx
c000d768:	e8 63 2c ff ff       	call   c00003d0 <memmove>
c000d76d:	83 c4 10             	add    esp,0x10
c000d770:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d774:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d778:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d77c:	83 f8 0a             	cmp    eax,0xa
c000d77f:	74 16                	je     c000d797 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d781:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d785:	83 f8 03             	cmp    eax,0x3
c000d788:	74 0d                	je     c000d797 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d78a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d78e:	83 f8 1c             	cmp    eax,0x1c
c000d791:	0f 85 ee fe ff ff    	jne    c000d685 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d797:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d79a:	eb 03                	jmp    c000d79f <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d79c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d79f:	c9                   	leave  
c000d7a0:	c3                   	ret    
c000d7a1:	90                   	nop

c000d7a2 <Keyboard::Keyboard(char const*)>:
c000d7a2:	83 ec 0c             	sub    esp,0xc
c000d7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a9:	83 ec 08             	sub    esp,0x8
c000d7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b0:	50                   	push   eax
c000d7b1:	e8 4c f1 ff ff       	call   c000c902 <Device::Device(char const*)>
c000d7b6:	83 c4 10             	add    esp,0x10
c000d7b9:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c000d7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c2:	89 10                	mov    DWORD PTR [eax],edx
c000d7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d7d2:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d7d9:	90                   	nop
c000d7da:	83 c4 0c             	add    esp,0xc
c000d7dd:	c3                   	ret    

c000d7de <Keyboard::~Keyboard()>:
c000d7de:	83 ec 0c             	sub    esp,0xc
c000d7e1:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c000d7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ea:	89 10                	mov    DWORD PTR [eax],edx
c000d7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f0:	83 ec 0c             	sub    esp,0xc
c000d7f3:	50                   	push   eax
c000d7f4:	e8 73 ee ff ff       	call   c000c66c <Device::~Device()>
c000d7f9:	83 c4 10             	add    esp,0x10
c000d7fc:	90                   	nop
c000d7fd:	83 c4 0c             	add    esp,0xc
c000d800:	c3                   	ret    
c000d801:	90                   	nop

c000d802 <Keyboard::~Keyboard()>:
c000d802:	83 ec 0c             	sub    esp,0xc
c000d805:	83 ec 0c             	sub    esp,0xc
c000d808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80c:	e8 cd ff ff ff       	call   c000d7de <Keyboard::~Keyboard()>
c000d811:	83 c4 10             	add    esp,0x10
c000d814:	83 ec 08             	sub    esp,0x8
c000d817:	68 5c 01 00 00       	push   0x15c
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 f3 cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	83 c4 0c             	add    esp,0xc
c000d82b:	c3                   	ret    

c000d82c <LogicalDisk::close(int, int, void*)>:
c000d82c:	83 c8 ff             	or     eax,0xffffffff
c000d82f:	c3                   	ret    

c000d830 <LogicalDisk::~LogicalDisk()>:
c000d830:	83 ec 0c             	sub    esp,0xc
c000d833:	ba 34 18 02 c0       	mov    edx,0xc0021834
c000d838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83c:	89 10                	mov    DWORD PTR [eax],edx
c000d83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d842:	83 ec 0c             	sub    esp,0xc
c000d845:	50                   	push   eax
c000d846:	e8 21 ee ff ff       	call   c000c66c <Device::~Device()>
c000d84b:	83 c4 10             	add    esp,0x10
c000d84e:	90                   	nop
c000d84f:	83 c4 0c             	add    esp,0xc
c000d852:	c3                   	ret    
c000d853:	90                   	nop

c000d854 <LogicalDisk::~LogicalDisk()>:
c000d854:	83 ec 0c             	sub    esp,0xc
c000d857:	83 ec 0c             	sub    esp,0xc
c000d85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85e:	e8 cd ff ff ff       	call   c000d830 <LogicalDisk::~LogicalDisk()>
c000d863:	83 c4 10             	add    esp,0x10
c000d866:	83 ec 08             	sub    esp,0x8
c000d869:	68 78 01 00 00       	push   0x178
c000d86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d872:	e8 a1 cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	83 c4 0c             	add    esp,0xc
c000d87d:	c3                   	ret    

c000d87e <LogicalDisk::open(int, int, void*)>:
c000d87e:	83 ec 18             	sub    esp,0x18
c000d881:	68 e8 17 02 c0       	push   0xc00217e8
c000d886:	e8 0e 3b 00 00       	call   c0011399 <KePanic(char const*)>
c000d88b:	83 c8 ff             	or     eax,0xffffffff
c000d88e:	83 c4 1c             	add    esp,0x1c
c000d891:	c3                   	ret    

c000d892 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d892:	53                   	push   ebx
c000d893:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d89b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d89f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d8a5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d8ab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d8b1:	77 10                	ja     c000d8c3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d8b3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d8b9:	89 d3                	mov    ebx,edx
c000d8bb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d8c1:	72 05                	jb     c000d8c8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d8c3:	83 c8 ff             	or     eax,0xffffffff
c000d8c6:	89 c2                	mov    edx,eax
c000d8c8:	5b                   	pop    ebx
c000d8c9:	c3                   	ret    

c000d8ca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d8ca:	56                   	push   esi
c000d8cb:	83 c8 ff             	or     eax,0xffffffff
c000d8ce:	53                   	push   ebx
c000d8cf:	89 c2                	mov    edx,eax
c000d8d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8d5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8e3:	77 27                	ja     c000d90c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8e5:	89 d8                	mov    eax,ebx
c000d8e7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8ed:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8f8:	89 c2                	mov    edx,eax
c000d8fa:	73 10                	jae    c000d90c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8fc:	89 c8                	mov    eax,ecx
c000d8fe:	89 da                	mov    edx,ebx
c000d900:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d906:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d90c:	5b                   	pop    ebx
c000d90d:	5e                   	pop    esi
c000d90e:	c3                   	ret    
c000d90f:	90                   	nop

c000d910 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d910:	83 ec 1c             	sub    esp,0x1c
c000d913:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d917:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d91b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d91f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d923:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d927:	89 04 24             	mov    DWORD PTR [esp],eax
c000d92a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d92e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d936:	83 ec 08             	sub    esp,0x8
c000d939:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d93d:	50                   	push   eax
c000d93e:	e8 bf ef ff ff       	call   c000c902 <Device::Device(char const*)>
c000d943:	83 c4 10             	add    esp,0x10
c000d946:	ba 34 18 02 c0       	mov    edx,0xc0021834
c000d94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94f:	89 10                	mov    DWORD PTR [eax],edx
c000d951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d955:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d95c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d960:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d976:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d980:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d984:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d988:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d98c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d992:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d998:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d99c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d99f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d9a3:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d9a9:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9b7:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c1:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9cb:	90                   	nop
c000d9cc:	83 c4 1c             	add    esp,0x1c
c000d9cf:	c3                   	ret    

c000d9d0 <LogicalDisk::assignDriveLetter()>:
c000d9d0:	55                   	push   ebp
c000d9d1:	57                   	push   edi
c000d9d2:	56                   	push   esi
c000d9d3:	53                   	push   ebx
c000d9d4:	83 ec 14             	sub    esp,0x14
c000d9d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9db:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9e1:	b0 41                	mov    al,0x41
c000d9e3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9e9:	84 d2                	test   dl,dl
c000d9eb:	75 02                	jne    c000d9ef <LogicalDisk::assignDriveLetter()+0x1f>
c000d9ed:	b0 43                	mov    al,0x43
c000d9ef:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9f5:	0f b6 ca             	movzx  ecx,dl
c000d9f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9fc:	0f be e8             	movsx  ebp,al
c000d9ff:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000da05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000da09:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000da0d:	3c 43                	cmp    al,0x43
c000da0f:	75 10                	jne    c000da21 <LogicalDisk::assignDriveLetter()+0x51>
c000da11:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000da18:	75 5a                	jne    c000da74 <LogicalDisk::assignDriveLetter()+0xa4>
c000da1a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000da1f:	75 53                	jne    c000da74 <LogicalDisk::assignDriveLetter()+0xa4>
c000da21:	8d 75 bf             	lea    esi,[ebp-0x41]
c000da24:	ba 01 00 00 00       	mov    edx,0x1
c000da29:	89 34 24             	mov    DWORD PTR [esp],esi
c000da2c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000da2f:	d3 e2                	shl    edx,cl
c000da31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da35:	89 d7                	mov    edi,edx
c000da37:	89 d6                	mov    esi,edx
c000da39:	c1 ff 1f             	sar    edi,0x1f
c000da3c:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da40:	21 f9                	and    ecx,edi
c000da42:	09 d1                	or     ecx,edx
c000da44:	75 2e                	jne    c000da74 <LogicalDisk::assignDriveLetter()+0xa4>
c000da46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da4e:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da54:	09 f2                	or     edx,esi
c000da56:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da59:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da5f:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da6a:	09 fa                	or     edx,edi
c000da6c:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da72:	eb 0d                	jmp    c000da81 <LogicalDisk::assignDriveLetter()+0xb1>
c000da74:	8d 50 01             	lea    edx,[eax+0x1]
c000da77:	45                   	inc    ebp
c000da78:	88 d0                	mov    al,dl
c000da7a:	80 fa 5b             	cmp    dl,0x5b
c000da7d:	75 8e                	jne    c000da0d <LogicalDisk::assignDriveLetter()+0x3d>
c000da7f:	31 c0                	xor    eax,eax
c000da81:	83 c4 14             	add    esp,0x14
c000da84:	5b                   	pop    ebx
c000da85:	5e                   	pop    esi
c000da86:	5f                   	pop    edi
c000da87:	5d                   	pop    ebp
c000da88:	c3                   	ret    
c000da89:	90                   	nop

c000da8a <LogicalDisk::mount()>:
c000da8a:	56                   	push   esi
c000da8b:	53                   	push   ebx
c000da8c:	53                   	push   ebx
c000da8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da91:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da97:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000daa1:	85 db                	test   ebx,ebx
c000daa3:	74 27                	je     c000dacc <LogicalDisk::mount()+0x42>
c000daa5:	51                   	push   ecx
c000daa6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000daad:	8b 13                	mov    edx,DWORD PTR [ebx]
c000daaf:	83 e8 41             	sub    eax,0x41
c000dab2:	50                   	push   eax
c000dab3:	56                   	push   esi
c000dab4:	53                   	push   ebx
c000dab5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dab8:	83 c4 10             	add    esp,0x10
c000dabb:	84 c0                	test   al,al
c000dabd:	74 08                	je     c000dac7 <LogicalDisk::mount()+0x3d>
c000dabf:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dac5:	eb 07                	jmp    c000dace <LogicalDisk::mount()+0x44>
c000dac7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000daca:	eb d5                	jmp    c000daa1 <LogicalDisk::mount()+0x17>
c000dacc:	31 c0                	xor    eax,eax
c000dace:	5a                   	pop    edx
c000dacf:	5b                   	pop    ebx
c000dad0:	5e                   	pop    esi
c000dad1:	c3                   	ret    

c000dad2 <LogicalDisk::unmount()>:
c000dad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dae0:	c3                   	ret    
c000dae1:	90                   	nop

c000dae2 <LogicalDisk::eject()>:
c000dae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dae6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000daec:	8b 10                	mov    edx,DWORD PTR [eax]
c000daee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000daf2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000daf5:	90                   	nop

c000daf6 <LogicalDisk::unassignDriveLetter()>:
c000daf6:	57                   	push   edi
c000daf7:	56                   	push   esi
c000daf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dafc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000db03:	85 c9                	test   ecx,ecx
c000db05:	75 0f                	jne    c000db16 <LogicalDisk::unassignDriveLetter()+0x20>
c000db07:	c7 44 24 0c 0c 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc002180c
c000db0f:	5e                   	pop    esi
c000db10:	5f                   	pop    edi
c000db11:	e9 83 38 00 00       	jmp    c0011399 <KePanic(char const*)>
c000db16:	83 e9 41             	sub    ecx,0x41
c000db19:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000db20:	b8 01 00 00 00       	mov    eax,0x1
c000db25:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000db30:	d3 e0                	shl    eax,cl
c000db32:	89 c7                	mov    edi,eax
c000db34:	f7 d0                	not    eax
c000db36:	c1 ff 1f             	sar    edi,0x1f
c000db39:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db3f:	89 fe                	mov    esi,edi
c000db41:	f7 d6                	not    esi
c000db43:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db49:	5e                   	pop    esi
c000db4a:	5f                   	pop    edi
c000db4b:	c3                   	ret    

c000db4c <LogicalDisk::read(unsigned long long, int, void*)>:
c000db4c:	57                   	push   edi
c000db4d:	56                   	push   esi
c000db4e:	53                   	push   ebx
c000db4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db65:	77 41                	ja     c000dba8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db67:	99                   	cdq    
c000db68:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db6e:	01 c8                	add    eax,ecx
c000db70:	11 da                	adc    edx,ebx
c000db72:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db78:	19 d7                	sbb    edi,edx
c000db7a:	72 33                	jb     c000dbaf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db7c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db82:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db8c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db90:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dba0:	5b                   	pop    ebx
c000dba1:	5e                   	pop    esi
c000dba2:	5f                   	pop    edi
c000dba3:	e9 c6 0a 00 00       	jmp    c000e66e <VCache::read(unsigned long long, int, void*)>
c000dba8:	b8 05 00 00 00       	mov    eax,0x5
c000dbad:	eb 05                	jmp    c000dbb4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dbaf:	b8 07 00 00 00       	mov    eax,0x7
c000dbb4:	5b                   	pop    ebx
c000dbb5:	5e                   	pop    esi
c000dbb6:	5f                   	pop    edi
c000dbb7:	c3                   	ret    

c000dbb8 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dbb8:	57                   	push   edi
c000dbb9:	56                   	push   esi
c000dbba:	53                   	push   ebx
c000dbbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dbbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbc3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dbc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbcb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbd1:	77 41                	ja     c000dc14 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dbd3:	99                   	cdq    
c000dbd4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dbda:	01 c8                	add    eax,ecx
c000dbdc:	11 da                	adc    edx,ebx
c000dbde:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dbe4:	19 d7                	sbb    edi,edx
c000dbe6:	72 33                	jb     c000dc1b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbe8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbf8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbfc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dc02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dc08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc0c:	5b                   	pop    ebx
c000dc0d:	5e                   	pop    esi
c000dc0e:	5f                   	pop    edi
c000dc0f:	e9 6c 09 00 00       	jmp    c000e580 <VCache::write(unsigned long long, int, void*)>
c000dc14:	b8 05 00 00 00       	mov    eax,0x5
c000dc19:	eb 05                	jmp    c000dc20 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dc1b:	b8 07 00 00 00       	mov    eax,0x7
c000dc20:	5b                   	pop    ebx
c000dc21:	5e                   	pop    esi
c000dc22:	5f                   	pop    edi
c000dc23:	c3                   	ret    

c000dc24 <Mouse::Mouse(char const*)>:
c000dc24:	83 ec 0c             	sub    esp,0xc
c000dc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2b:	83 ec 08             	sub    esp,0x8
c000dc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc32:	50                   	push   eax
c000dc33:	e8 ca ec ff ff       	call   c000c902 <Device::Device(char const*)>
c000dc38:	83 c4 10             	add    esp,0x10
c000dc3b:	ba 60 18 02 c0       	mov    edx,0xc0021860
c000dc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc44:	89 10                	mov    DWORD PTR [eax],edx
c000dc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc54:	90                   	nop
c000dc55:	83 c4 0c             	add    esp,0xc
c000dc58:	c3                   	ret    
c000dc59:	90                   	nop
c000dc5a:	66 90                	xchg   ax,ax

c000dc5c <Mouse::~Mouse()>:
c000dc5c:	83 ec 0c             	sub    esp,0xc
c000dc5f:	ba 60 18 02 c0       	mov    edx,0xc0021860
c000dc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc68:	89 10                	mov    DWORD PTR [eax],edx
c000dc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 f5 e9 ff ff       	call   c000c66c <Device::~Device()>
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	90                   	nop
c000dc7b:	83 c4 0c             	add    esp,0xc
c000dc7e:	c3                   	ret    
c000dc7f:	90                   	nop

c000dc80 <Mouse::~Mouse()>:
c000dc80:	83 ec 0c             	sub    esp,0xc
c000dc83:	83 ec 0c             	sub    esp,0xc
c000dc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc8a:	e8 cd ff ff ff       	call   c000dc5c <Mouse::~Mouse()>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	83 ec 08             	sub    esp,0x8
c000dc95:	68 58 01 00 00       	push   0x158
c000dc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc9e:	e8 75 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dca3:	83 c4 10             	add    esp,0x10
c000dca6:	83 c4 0c             	add    esp,0xc
c000dca9:	c3                   	ret    

c000dcaa <NIC::getMAC()>:
c000dcaa:	31 c0                	xor    eax,eax
c000dcac:	31 d2                	xor    edx,edx
c000dcae:	c3                   	ret    
c000dcaf:	90                   	nop

c000dcb0 <NIC::write(int, unsigned char*, int*)>:
c000dcb0:	b8 01 00 00 00       	mov    eax,0x1
c000dcb5:	c3                   	ret    

c000dcb6 <NIC::NIC(char const*)>:
c000dcb6:	83 ec 0c             	sub    esp,0xc
c000dcb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcbd:	83 ec 08             	sub    esp,0x8
c000dcc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc4:	50                   	push   eax
c000dcc5:	e8 38 ec ff ff       	call   c000c902 <Device::Device(char const*)>
c000dcca:	83 c4 10             	add    esp,0x10
c000dccd:	ba 8c 18 02 c0       	mov    edx,0xc002188c
c000dcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd6:	89 10                	mov    DWORD PTR [eax],edx
c000dcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcdc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dce6:	90                   	nop
c000dce7:	83 c4 0c             	add    esp,0xc
c000dcea:	c3                   	ret    
c000dceb:	90                   	nop

c000dcec <NIC::~NIC()>:
c000dcec:	83 ec 0c             	sub    esp,0xc
c000dcef:	ba 8c 18 02 c0       	mov    edx,0xc002188c
c000dcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf8:	89 10                	mov    DWORD PTR [eax],edx
c000dcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcfe:	83 ec 0c             	sub    esp,0xc
c000dd01:	50                   	push   eax
c000dd02:	e8 65 e9 ff ff       	call   c000c66c <Device::~Device()>
c000dd07:	83 c4 10             	add    esp,0x10
c000dd0a:	90                   	nop
c000dd0b:	83 c4 0c             	add    esp,0xc
c000dd0e:	c3                   	ret    
c000dd0f:	90                   	nop

c000dd10 <NIC::~NIC()>:
c000dd10:	83 ec 0c             	sub    esp,0xc
c000dd13:	83 ec 0c             	sub    esp,0xc
c000dd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd1a:	e8 cd ff ff ff       	call   c000dcec <NIC::~NIC()>
c000dd1f:	83 c4 10             	add    esp,0x10
c000dd22:	83 ec 08             	sub    esp,0x8
c000dd25:	68 58 01 00 00       	push   0x158
c000dd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd2e:	e8 e5 ca ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dd33:	83 c4 10             	add    esp,0x10
c000dd36:	83 c4 0c             	add    esp,0xc
c000dd39:	c3                   	ret    

c000dd3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd3a:	55                   	push   ebp
c000dd3b:	57                   	push   edi
c000dd3c:	56                   	push   esi
c000dd3d:	53                   	push   ebx
c000dd3e:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd44:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dd4b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dd52:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dd59:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dd60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd6f:	e8 8a ec ff ff       	call   c000c9fe <Device::getName()>
c000dd74:	5a                   	pop    edx
c000dd75:	59                   	pop    ecx
c000dd76:	50                   	push   eax
c000dd77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd7b:	55                   	push   ebp
c000dd7c:	e8 bf 28 ff ff       	call   c0000640 <strcpy>
c000dd81:	5b                   	pop    ebx
c000dd82:	58                   	pop    eax
c000dd83:	68 b8 18 02 c0       	push   0xc00218b8
c000dd88:	55                   	push   ebp
c000dd89:	e8 b2 2a ff ff       	call   c0000840 <strcat>
c000dd8e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd95:	e8 1c 9d ff ff       	call   c0007ab6 <malloc>
c000dd9a:	83 c4 0c             	add    esp,0xc
c000dd9d:	89 c3                	mov    ebx,eax
c000dd9f:	57                   	push   edi
c000dda0:	56                   	push   esi
c000dda1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dda5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dda9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ddb0:	55                   	push   ebp
c000ddb1:	50                   	push   eax
c000ddb2:	e8 59 fb ff ff       	call   c000d910 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ddb7:	83 c4 14             	add    esp,0x14
c000ddba:	53                   	push   ebx
c000ddbb:	e8 10 fc ff ff       	call   c000d9d0 <LogicalDisk::assignDriveLetter()>
c000ddc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ddc3:	e8 c2 fc ff ff       	call   c000da8a <LogicalDisk::mount()>
c000ddc8:	58                   	pop    eax
c000ddc9:	5a                   	pop    edx
c000ddca:	53                   	push   ebx
c000ddcb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ddd2:	e8 93 e9 ff ff       	call   c000c76a <Device::addChild(Device*)>
c000ddd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dddd:	5b                   	pop    ebx
c000ddde:	5e                   	pop    esi
c000dddf:	5f                   	pop    edi
c000dde0:	5d                   	pop    ebp
c000dde1:	c3                   	ret    

c000dde2 <createPartitionsForDisk(PhysicalDisk*)>:
c000dde2:	55                   	push   ebp
c000dde3:	57                   	push   edi
c000dde4:	56                   	push   esi
c000dde5:	53                   	push   ebx
c000dde6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddf3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ddf9:	3d 00 02 00 00       	cmp    eax,0x200
c000ddfe:	74 27                	je     c000de27 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000de00:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000de06:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000de0c:	83 ec 10             	sub    esp,0x10
c000de0f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000de13:	99                   	cdq    
c000de14:	c1 e6 0a             	shl    esi,0xa
c000de17:	52                   	push   edx
c000de18:	89 fd                	mov    ebp,edi
c000de1a:	50                   	push   eax
c000de1b:	55                   	push   ebp
c000de1c:	56                   	push   esi
c000de1d:	e8 ae 14 01 00       	call   c001f2d0 <__udivdi3>
c000de22:	e9 b9 00 00 00       	jmp    c000dee0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de27:	83 ec 0c             	sub    esp,0xc
c000de2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de2c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000de30:	56                   	push   esi
c000de31:	6a 01                	push   0x1
c000de33:	6a 00                	push   0x0
c000de35:	6a 00                	push   0x0
c000de37:	53                   	push   ebx
c000de38:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de3b:	83 c4 20             	add    esp,0x20
c000de3e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de46:	75 0a                	jne    c000de52 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de48:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de50:	74 2c                	je     c000de7e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de52:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de58:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de5e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de64:	83 ec 10             	sub    esp,0x10
c000de67:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de6b:	89 f7                	mov    edi,esi
c000de6d:	c1 e0 0a             	shl    eax,0xa
c000de70:	c1 ff 1f             	sar    edi,0x1f
c000de73:	57                   	push   edi
c000de74:	56                   	push   esi
c000de75:	52                   	push   edx
c000de76:	50                   	push   eax
c000de77:	e8 54 14 01 00       	call   c001f2d0 <__udivdi3>
c000de7c:	eb 62                	jmp    c000dee0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de7e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de85:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de8c:	89 cf                	mov    edi,ecx
c000de8e:	83 e2 7f             	and    edx,0x7f
c000de91:	83 e7 7f             	and    edi,0x7f
c000de94:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de9b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de9e:	83 e0 7f             	and    eax,0x7f
c000dea1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dea4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000deab:	83 e0 7f             	and    eax,0x7f
c000deae:	01 d0                	add    eax,edx
c000deb0:	89 c5                	mov    ebp,eax
c000deb2:	84 c0                	test   al,al
c000deb4:	74 41                	je     c000def7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000deb6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000debc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dec2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dec8:	83 ec 10             	sub    esp,0x10
c000decb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000decf:	89 f7                	mov    edi,esi
c000ded1:	c1 e0 0a             	shl    eax,0xa
c000ded4:	c1 ff 1f             	sar    edi,0x1f
c000ded7:	57                   	push   edi
c000ded8:	56                   	push   esi
c000ded9:	52                   	push   edx
c000deda:	50                   	push   eax
c000dedb:	e8 f0 13 01 00       	call   c001f2d0 <__udivdi3>
c000dee0:	83 c4 14             	add    esp,0x14
c000dee3:	52                   	push   edx
c000dee4:	50                   	push   eax
c000dee5:	6a 00                	push   0x0
c000dee7:	6a 00                	push   0x0
c000dee9:	53                   	push   ebx
c000deea:	e8 4b fe ff ff       	call   c000dd3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000deef:	83 c4 20             	add    esp,0x20
c000def2:	e9 73 01 00 00       	jmp    c000e06a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000def7:	89 f0                	mov    eax,esi
c000def9:	31 c9                	xor    ecx,ecx
c000defb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000df02:	75 02                	jne    c000df06 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000df04:	89 cd                	mov    ebp,ecx
c000df06:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000df0d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000df14:	c1 e2 08             	shl    edx,0x8
c000df17:	c1 e6 10             	shl    esi,0x10
c000df1a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000df22:	09 f2                	or     edx,esi
c000df24:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000df2c:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000df33:	83 c0 10             	add    eax,0x10
c000df36:	09 f2                	or     edx,esi
c000df38:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df3f:	c1 e6 18             	shl    esi,0x18
c000df42:	09 f2                	or     edx,esi
c000df44:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df4b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df4f:	c1 e6 10             	shl    esi,0x10
c000df52:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df59:	c1 e2 08             	shl    edx,0x8
c000df5c:	09 f2                	or     edx,esi
c000df5e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df65:	09 f2                	or     edx,esi
c000df67:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df6e:	c1 e6 18             	shl    esi,0x18
c000df71:	09 f2                	or     edx,esi
c000df73:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df77:	41                   	inc    ecx
c000df78:	83 f9 04             	cmp    ecx,0x4
c000df7b:	0f 85 7a ff ff ff    	jne    c000defb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df85:	83 f0 01             	xor    eax,0x1
c000df88:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df8c:	75 4f                	jne    c000dfdd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df92:	83 f0 01             	xor    eax,0x1
c000df95:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df99:	75 42                	jne    c000dfdd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df9b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dfa3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dfab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dfb1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dfb7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dfbd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dfc1:	89 f7                	mov    edi,esi
c000dfc3:	c1 e0 0a             	shl    eax,0xa
c000dfc6:	c1 ff 1f             	sar    edi,0x1f
c000dfc9:	57                   	push   edi
c000dfca:	56                   	push   esi
c000dfcb:	52                   	push   edx
c000dfcc:	50                   	push   eax
c000dfcd:	e8 fe 12 01 00       	call   c001f2d0 <__udivdi3>
c000dfd2:	83 c4 10             	add    esp,0x10
c000dfd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfdd:	89 e8                	mov    eax,ebp
c000dfdf:	0f b6 e8             	movzx  ebp,al
c000dfe2:	85 ed                	test   ebp,ebp
c000dfe4:	74 50                	je     c000e036 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dfee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dff2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dff6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dffa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dffe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e002:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e00a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e00e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e012:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e016:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e01a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e01e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e022:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e026:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e02a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e02e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e032:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e036:	31 ed                	xor    ebp,ebp
c000e038:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e03c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e040:	89 f8                	mov    eax,edi
c000e042:	09 f0                	or     eax,esi
c000e044:	74 1e                	je     c000e064 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e046:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e04a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e04e:	89 d1                	mov    ecx,edx
c000e050:	09 c1                	or     ecx,eax
c000e052:	74 10                	je     c000e064 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e054:	83 ec 0c             	sub    esp,0xc
c000e057:	57                   	push   edi
c000e058:	56                   	push   esi
c000e059:	52                   	push   edx
c000e05a:	50                   	push   eax
c000e05b:	53                   	push   ebx
c000e05c:	e8 d9 fc ff ff       	call   c000dd3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e061:	83 c4 20             	add    esp,0x20
c000e064:	45                   	inc    ebp
c000e065:	83 fd 04             	cmp    ebp,0x4
c000e068:	75 ce                	jne    c000e038 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e06a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e070:	5b                   	pop    ebx
c000e071:	5e                   	pop    esi
c000e072:	5f                   	pop    edi
c000e073:	5d                   	pop    ebp
c000e074:	c3                   	ret    
c000e075:	66 90                	xchg   ax,ax
c000e077:	90                   	nop

c000e078 <Serial::Serial(char const*)>:
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07f:	83 ec 08             	sub    esp,0x8
c000e082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e086:	50                   	push   eax
c000e087:	e8 76 e8 ff ff       	call   c000c902 <Device::Device(char const*)>
c000e08c:	83 c4 10             	add    esp,0x10
c000e08f:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c000e094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e098:	89 10                	mov    DWORD PTR [eax],edx
c000e09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e0a8:	90                   	nop
c000e0a9:	83 c4 0c             	add    esp,0xc
c000e0ac:	c3                   	ret    
c000e0ad:	90                   	nop
c000e0ae:	66 90                	xchg   ax,ax

c000e0b0 <Serial::~Serial()>:
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c000e0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0bc:	89 10                	mov    DWORD PTR [eax],edx
c000e0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	50                   	push   eax
c000e0c6:	e8 a1 e5 ff ff       	call   c000c66c <Device::~Device()>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	90                   	nop
c000e0cf:	83 c4 0c             	add    esp,0xc
c000e0d2:	c3                   	ret    
c000e0d3:	90                   	nop

c000e0d4 <Serial::~Serial()>:
c000e0d4:	83 ec 0c             	sub    esp,0xc
c000e0d7:	83 ec 0c             	sub    esp,0xc
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 cd ff ff ff       	call   c000e0b0 <Serial::~Serial()>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	83 ec 08             	sub    esp,0x8
c000e0e9:	68 58 01 00 00       	push   0x158
c000e0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0f2:	e8 21 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e0f7:	83 c4 10             	add    esp,0x10
c000e0fa:	83 c4 0c             	add    esp,0xc
c000e0fd:	c3                   	ret    
c000e0fe:	66 90                	xchg   ax,ax

c000e100 <Timer::Timer(char const*)>:
c000e100:	83 ec 0c             	sub    esp,0xc
c000e103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e107:	83 ec 08             	sub    esp,0x8
c000e10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e10e:	50                   	push   eax
c000e10f:	e8 ee e7 ff ff       	call   c000c902 <Device::Device(char const*)>
c000e114:	83 c4 10             	add    esp,0x10
c000e117:	ba 10 19 02 c0       	mov    edx,0xc0021910
c000e11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e120:	89 10                	mov    DWORD PTR [eax],edx
c000e122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e126:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e130:	90                   	nop
c000e131:	83 c4 0c             	add    esp,0xc
c000e134:	c3                   	ret    
c000e135:	90                   	nop
c000e136:	66 90                	xchg   ax,ax

c000e138 <Timer::~Timer()>:
c000e138:	83 ec 0c             	sub    esp,0xc
c000e13b:	ba 10 19 02 c0       	mov    edx,0xc0021910
c000e140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e144:	89 10                	mov    DWORD PTR [eax],edx
c000e146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	50                   	push   eax
c000e14e:	e8 19 e5 ff ff       	call   c000c66c <Device::~Device()>
c000e153:	83 c4 10             	add    esp,0x10
c000e156:	90                   	nop
c000e157:	83 c4 0c             	add    esp,0xc
c000e15a:	c3                   	ret    
c000e15b:	90                   	nop

c000e15c <Timer::~Timer()>:
c000e15c:	83 ec 0c             	sub    esp,0xc
c000e15f:	83 ec 0c             	sub    esp,0xc
c000e162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e166:	e8 cd ff ff ff       	call   c000e138 <Timer::~Timer()>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	83 ec 08             	sub    esp,0x8
c000e171:	68 5c 01 00 00       	push   0x15c
c000e176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17a:	e8 99 c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e17f:	83 c4 10             	add    esp,0x10
c000e182:	83 c4 0c             	add    esp,0xc
c000e185:	c3                   	ret    

c000e186 <Timer::read()>:
c000e186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e18a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e190:	c3                   	ret    

c000e191 <setupTimer(int)>:
c000e191:	53                   	push   ebx
c000e192:	83 ec 14             	sub    esp,0x14
c000e195:	68 5c 01 00 00       	push   0x15c
c000e19a:	e8 17 99 ff ff       	call   c0007ab6 <malloc>
c000e19f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1a2:	89 c3                	mov    ebx,eax
c000e1a4:	e8 8b 09 01 00       	call   c001eb34 <PIT::PIT()>
c000e1a9:	58                   	pop    eax
c000e1aa:	5a                   	pop    edx
c000e1ab:	53                   	push   ebx
c000e1ac:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e1b2:	e8 b3 e5 ff ff       	call   c000c76a <Device::addChild(Device*)>
c000e1b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1b9:	6a 00                	push   0x0
c000e1bb:	6a 00                	push   0x0
c000e1bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1c1:	53                   	push   ebx
c000e1c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e1c5:	89 d8                	mov    eax,ebx
c000e1c7:	83 c4 28             	add    esp,0x28
c000e1ca:	5b                   	pop    ebx
c000e1cb:	c3                   	ret    

c000e1cc <timerHandler(unsigned int)>:
c000e1cc:	56                   	push   esi
c000e1cd:	53                   	push   ebx
c000e1ce:	51                   	push   ecx
c000e1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d3:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e1d9:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1e0:	0f 84 4a 01 00 00    	je     c000e330 <timerHandler(unsigned int)+0x164>
c000e1e6:	fa                   	cli    
c000e1e7:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1ed:	83 ec 0c             	sub    esp,0xc
c000e1f0:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1f6:	68 d8 96 02 c0       	push   0xc00296d8
c000e1fb:	e8 a0 16 01 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	84 c0                	test   al,al
c000e205:	0f 85 a1 00 00 00    	jne    c000e2ac <timerHandler(unsigned int)+0xe0>
c000e20b:	83 ec 0c             	sub    esp,0xc
c000e20e:	68 d8 96 02 c0       	push   0xc00296d8
c000e213:	e8 a4 16 01 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e218:	83 c4 10             	add    esp,0x10
c000e21b:	89 c6                	mov    esi,eax
c000e21d:	8d 76 00             	lea    esi,[esi+0x0]
c000e220:	83 ec 0c             	sub    esp,0xc
c000e223:	68 d8 96 02 c0       	push   0xc00296d8
c000e228:	e8 8f 16 01 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e22d:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e234:	89 c3                	mov    ebx,eax
c000e236:	e8 89 16 01 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e23b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e23e:	83 c4 10             	add    esp,0x10
c000e241:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e247:	77 23                	ja     c000e26c <timerHandler(unsigned int)+0xa0>
c000e249:	83 ec 0c             	sub    esp,0xc
c000e24c:	53                   	push   ebx
c000e24d:	e8 1e 7f 00 00       	call   c0016170 <unblockTask(ThreadControlBlock*)>
c000e252:	83 c4 10             	add    esp,0x10
c000e255:	39 de                	cmp    esi,ebx
c000e257:	75 27                	jne    c000e280 <timerHandler(unsigned int)+0xb4>
c000e259:	83 ec 0c             	sub    esp,0xc
c000e25c:	68 d8 96 02 c0       	push   0xc00296d8
c000e261:	e8 56 16 01 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e266:	89 c6                	mov    esi,eax
c000e268:	eb 12                	jmp    c000e27c <timerHandler(unsigned int)+0xb0>
c000e26a:	66 90                	xchg   ax,ax
c000e26c:	52                   	push   edx
c000e26d:	52                   	push   edx
c000e26e:	53                   	push   ebx
c000e26f:	68 d8 96 02 c0       	push   0xc00296d8
c000e274:	e8 07 17 01 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e279:	8d 76 00             	lea    esi,[esi+0x0]
c000e27c:	83 c4 10             	add    esp,0x10
c000e27f:	90                   	nop
c000e280:	83 ec 0c             	sub    esp,0xc
c000e283:	68 d8 96 02 c0       	push   0xc00296d8
c000e288:	e8 13 16 01 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e28d:	83 c4 10             	add    esp,0x10
c000e290:	84 c0                	test   al,al
c000e292:	75 18                	jne    c000e2ac <timerHandler(unsigned int)+0xe0>
c000e294:	83 ec 0c             	sub    esp,0xc
c000e297:	68 d8 96 02 c0       	push   0xc00296d8
c000e29c:	e8 1b 16 01 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	39 f0                	cmp    eax,esi
c000e2a6:	0f 85 74 ff ff ff    	jne    c000e220 <timerHandler(unsigned int)+0x54>
c000e2ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e2b1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e2b5:	74 41                	je     c000e2f8 <timerHandler(unsigned int)+0x12c>
c000e2b7:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e2be:	74 38                	je     c000e2f8 <timerHandler(unsigned int)+0x12c>
c000e2c0:	fa                   	cli    
c000e2c1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e2c7:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e2cc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2d2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2db:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2de:	72 08                	jb     c000e2e8 <timerHandler(unsigned int)+0x11c>
c000e2e0:	e8 73 79 00 00       	call   c0015c58 <schedule()>
c000e2e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2e8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2ed:	48                   	dec    eax
c000e2ee:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2f3:	75 03                	jne    c000e2f8 <timerHandler(unsigned int)+0x12c>
c000e2f5:	fb                   	sti    
c000e2f6:	66 90                	xchg   ax,ax
c000e2f8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2fd:	48                   	dec    eax
c000e2fe:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e303:	75 1b                	jne    c000e320 <timerHandler(unsigned int)+0x154>
c000e305:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e30c:	74 12                	je     c000e320 <timerHandler(unsigned int)+0x154>
c000e30e:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e318:	e8 3b 79 00 00       	call   c0015c58 <schedule()>
c000e31d:	8d 76 00             	lea    esi,[esi+0x0]
c000e320:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e325:	48                   	dec    eax
c000e326:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e32b:	75 03                	jne    c000e330 <timerHandler(unsigned int)+0x164>
c000e32d:	fb                   	sti    
c000e32e:	66 90                	xchg   ax,ax
c000e330:	58                   	pop    eax
c000e331:	5b                   	pop    ebx
c000e332:	5e                   	pop    esi
c000e333:	c3                   	ret    

c000e334 <VCache::VCache(PhysicalDisk*)>:
c000e334:	53                   	push   ebx
c000e335:	83 ec 18             	sub    esp,0x18
c000e338:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000e33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e341:	89 10                	mov    DWORD PTR [eax],edx
c000e343:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e347:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e352:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e364:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e376:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e37d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e381:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e394:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e39b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ae:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e3ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3be:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3c5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e3cd:	83 ec 0c             	sub    esp,0xc
c000e3d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3d4:	e8 dd 96 ff ff       	call   c0007ab6 <malloc>
c000e3d9:	83 c4 10             	add    esp,0x10
c000e3dc:	89 c3                	mov    ebx,eax
c000e3de:	83 ec 0c             	sub    esp,0xc
c000e3e1:	53                   	push   ebx
c000e3e2:	e8 0d 76 00 00       	call   c00159f4 <Mutex::Mutex()>
c000e3e7:	83 c4 10             	add    esp,0x10
c000e3ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ee:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e400:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e407:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e40b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e415:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e418:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e41c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e422:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e428:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e42c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e42f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e436:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e43a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e43e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e444:	05 00 02 00 00       	add    eax,0x200
c000e449:	c1 e0 03             	shl    eax,0x3
c000e44c:	83 ec 0c             	sub    esp,0xc
c000e44f:	50                   	push   eax
c000e450:	e8 61 96 ff ff       	call   c0007ab6 <malloc>
c000e455:	83 c4 10             	add    esp,0x10
c000e458:	89 c2                	mov    edx,eax
c000e45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e45e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e465:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e46c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e470:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e474:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e478:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e47e:	89 d0                	mov    eax,edx
c000e480:	c1 e0 02             	shl    eax,0x2
c000e483:	01 d0                	add    eax,edx
c000e485:	c1 e0 04             	shl    eax,0x4
c000e488:	83 ec 0c             	sub    esp,0xc
c000e48b:	50                   	push   eax
c000e48c:	e8 25 96 ff ff       	call   c0007ab6 <malloc>
c000e491:	83 c4 10             	add    esp,0x10
c000e494:	89 c2                	mov    edx,eax
c000e496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e49a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e49d:	90                   	nop
c000e49e:	83 c4 18             	add    esp,0x18
c000e4a1:	5b                   	pop    ebx
c000e4a2:	c3                   	ret    
c000e4a3:	90                   	nop

c000e4a4 <VCache::invalidateReadBuffer()>:
c000e4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e4ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e4b2:	c3                   	ret    
c000e4b3:	90                   	nop

c000e4b4 <VCache::writeWriteBuffer()>:
c000e4b4:	53                   	push   ebx
c000e4b5:	83 ec 08             	sub    esp,0x8
c000e4b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4bc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e4c0:	74 1e                	je     c000e4e0 <VCache::writeWriteBuffer()+0x2c>
c000e4c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4c5:	83 ec 0c             	sub    esp,0xc
c000e4c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e4cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e4d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e4d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4d6:	50                   	push   eax
c000e4d7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e4da:	83 c4 20             	add    esp,0x20
c000e4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4e7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4ee:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4f2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4f9:	83 c4 08             	add    esp,0x8
c000e4fc:	5b                   	pop    ebx
c000e4fd:	c3                   	ret    
c000e4fe:	66 90                	xchg   ax,ax

c000e500 <VCache::~VCache()>:
c000e500:	83 ec 0c             	sub    esp,0xc
c000e503:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000e508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50c:	89 10                	mov    DWORD PTR [eax],edx
c000e50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e512:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e515:	0f b6 c0             	movzx  eax,al
c000e518:	85 c0                	test   eax,eax
c000e51a:	74 10                	je     c000e52c <VCache::~VCache()+0x2c>
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e523:	e8 8c ff ff ff       	call   c000e4b4 <VCache::writeWriteBuffer()>
c000e528:	83 c4 10             	add    esp,0x10
c000e52b:	90                   	nop
c000e52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e530:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e533:	83 ec 0c             	sub    esp,0xc
c000e536:	50                   	push   eax
c000e537:	e8 8a 95 ff ff       	call   c0007ac6 <free>
c000e53c:	83 c4 10             	add    esp,0x10
c000e53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e543:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e546:	83 ec 0c             	sub    esp,0xc
c000e549:	50                   	push   eax
c000e54a:	e8 77 95 ff ff       	call   c0007ac6 <free>
c000e54f:	83 c4 10             	add    esp,0x10
c000e552:	90                   	nop
c000e553:	83 c4 0c             	add    esp,0xc
c000e556:	c3                   	ret    
c000e557:	90                   	nop

c000e558 <VCache::~VCache()>:
c000e558:	83 ec 0c             	sub    esp,0xc
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e562:	e8 99 ff ff ff       	call   c000e500 <VCache::~VCache()>
c000e567:	83 c4 10             	add    esp,0x10
c000e56a:	83 ec 08             	sub    esp,0x8
c000e56d:	6a 44                	push   0x44
c000e56f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e573:	e8 a0 c2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e578:	83 c4 10             	add    esp,0x10
c000e57b:	83 c4 0c             	add    esp,0xc
c000e57e:	c3                   	ret    
c000e57f:	90                   	nop

c000e580 <VCache::write(unsigned long long, int, void*)>:
c000e580:	55                   	push   ebp
c000e581:	57                   	push   edi
c000e582:	56                   	push   esi
c000e583:	53                   	push   ebx
c000e584:	83 ec 1c             	sub    esp,0x1c
c000e587:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e58b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e58f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e593:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e597:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e59b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e59f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e5a3:	74 07                	je     c000e5ac <VCache::write(unsigned long long, int, void*)+0x2c>
c000e5a5:	53                   	push   ebx
c000e5a6:	e8 f9 fe ff ff       	call   c000e4a4 <VCache::invalidateReadBuffer()>
c000e5ab:	58                   	pop    eax
c000e5ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e5b0:	74 62                	je     c000e614 <VCache::write(unsigned long long, int, void*)+0x94>
c000e5b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e5b9:	99                   	cdq    
c000e5ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5be:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e5c1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e5c4:	31 c1                	xor    ecx,eax
c000e5c6:	89 d0                	mov    eax,edx
c000e5c8:	89 ca                	mov    edx,ecx
c000e5ca:	31 e8                	xor    eax,ebp
c000e5cc:	09 c2                	or     edx,eax
c000e5ce:	75 38                	jne    c000e608 <VCache::write(unsigned long long, int, void*)+0x88>
c000e5d0:	83 ff 01             	cmp    edi,0x1
c000e5d3:	75 33                	jne    c000e608 <VCache::write(unsigned long long, int, void*)+0x88>
c000e5d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e5e2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5e5:	0f af c8             	imul   ecx,eax
c000e5e8:	01 cf                	add    edi,ecx
c000e5ea:	89 c1                	mov    ecx,eax
c000e5ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5f1:	40                   	inc    eax
c000e5f2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5f5:	83 f8 50             	cmp    eax,0x50
c000e5f8:	75 6a                	jne    c000e664 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5fa:	83 ec 0c             	sub    esp,0xc
c000e5fd:	53                   	push   ebx
c000e5fe:	e8 b1 fe ff ff       	call   c000e4b4 <VCache::writeWriteBuffer()>
c000e603:	83 c4 10             	add    esp,0x10
c000e606:	eb 5c                	jmp    c000e664 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e608:	83 ec 0c             	sub    esp,0xc
c000e60b:	53                   	push   ebx
c000e60c:	e8 a3 fe ff ff       	call   c000e4b4 <VCache::writeWriteBuffer()>
c000e611:	83 c4 10             	add    esp,0x10
c000e614:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e617:	83 ff 4f             	cmp    edi,0x4f
c000e61a:	7f 20                	jg     c000e63c <VCache::write(unsigned long long, int, void*)+0xbc>
c000e61c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e61f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e623:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e626:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e629:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e62d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e630:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e636:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e638:	eb 2a                	jmp    c000e664 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e63a:	66 90                	xchg   ax,ax
c000e63c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e63e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e642:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e64a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e64e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e652:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e656:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e659:	83 c4 1c             	add    esp,0x1c
c000e65c:	5b                   	pop    ebx
c000e65d:	5e                   	pop    esi
c000e65e:	5f                   	pop    edi
c000e65f:	5d                   	pop    ebp
c000e660:	ff e0                	jmp    eax
c000e662:	66 90                	xchg   ax,ax
c000e664:	83 c4 1c             	add    esp,0x1c
c000e667:	31 c0                	xor    eax,eax
c000e669:	5b                   	pop    ebx
c000e66a:	5e                   	pop    esi
c000e66b:	5f                   	pop    edi
c000e66c:	5d                   	pop    ebp
c000e66d:	c3                   	ret    

c000e66e <VCache::read(unsigned long long, int, void*)>:
c000e66e:	55                   	push   ebp
c000e66f:	57                   	push   edi
c000e670:	56                   	push   esi
c000e671:	53                   	push   ebx
c000e672:	83 ec 1c             	sub    esp,0x1c
c000e675:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e679:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e67d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e681:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e685:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e689:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e68d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e691:	74 0d                	je     c000e6a0 <VCache::read(unsigned long long, int, void*)+0x32>
c000e693:	83 ec 0c             	sub    esp,0xc
c000e696:	57                   	push   edi
c000e697:	e8 18 fe ff ff       	call   c000e4b4 <VCache::writeWriteBuffer()>
c000e69c:	83 c4 10             	add    esp,0x10
c000e69f:	90                   	nop
c000e6a0:	83 fd 01             	cmp    ebp,0x1
c000e6a3:	0f 85 93 00 00 00    	jne    c000e73c <VCache::read(unsigned long long, int, void*)+0xce>
c000e6a9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6af:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e6b6:	0f 85 80 00 00 00    	jne    c000e73c <VCache::read(unsigned long long, int, void*)+0xce>
c000e6bc:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e6bf:	89 e9                	mov    ecx,ebp
c000e6c1:	f7 d9                	neg    ecx
c000e6c3:	89 c8                	mov    eax,ecx
c000e6c5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e6c9:	c1 f8 1f             	sar    eax,0x1f
c000e6cc:	21 d9                	and    ecx,ebx
c000e6ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6d2:	89 c8                	mov    eax,ecx
c000e6d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6d8:	21 f1                	and    ecx,esi
c000e6da:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6de:	89 ca                	mov    edx,ecx
c000e6e0:	74 2e                	je     c000e710 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6e2:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e6e5:	75 29                	jne    c000e710 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6e7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6ea:	75 24                	jne    c000e710 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6ec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6ef:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6f5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6f8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6fb:	21 f3                	and    ebx,esi
c000e6fd:	0f af d9             	imul   ebx,ecx
c000e700:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e703:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e707:	89 de                	mov    esi,ebx
c000e709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e70b:	31 c0                	xor    eax,eax
c000e70d:	eb 61                	jmp    c000e770 <VCache::read(unsigned long long, int, void*)+0x102>
c000e70f:	90                   	nop
c000e710:	83 ec 0c             	sub    esp,0xc
c000e713:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e717:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e71b:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e71e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e721:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e723:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e726:	55                   	push   ebp
c000e727:	52                   	push   edx
c000e728:	50                   	push   eax
c000e729:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e72d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e730:	83 c4 20             	add    esp,0x20
c000e733:	85 c0                	test   eax,eax
c000e735:	75 39                	jne    c000e770 <VCache::read(unsigned long long, int, void*)+0x102>
c000e737:	eb b3                	jmp    c000e6ec <VCache::read(unsigned long long, int, void*)+0x7e>
c000e739:	8d 76 00             	lea    esi,[esi+0x0]
c000e73c:	83 ec 0c             	sub    esp,0xc
c000e73f:	57                   	push   edi
c000e740:	e8 5f fd ff ff       	call   c000e4a4 <VCache::invalidateReadBuffer()>
c000e745:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e748:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e74c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e74e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e752:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e756:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e75a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e75e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e762:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e765:	83 c4 2c             	add    esp,0x2c
c000e768:	5b                   	pop    ebx
c000e769:	5e                   	pop    esi
c000e76a:	5f                   	pop    edi
c000e76b:	5d                   	pop    ebp
c000e76c:	ff e0                	jmp    eax
c000e76e:	66 90                	xchg   ax,ax
c000e770:	83 c4 1c             	add    esp,0x1c
c000e773:	5b                   	pop    ebx
c000e774:	5e                   	pop    esi
c000e775:	5f                   	pop    edi
c000e776:	5d                   	pop    ebp
c000e777:	c3                   	ret    

c000e778 <Video::putrect(int, int, int, int, unsigned int)>:
c000e778:	55                   	push   ebp
c000e779:	57                   	push   edi
c000e77a:	56                   	push   esi
c000e77b:	53                   	push   ebx
c000e77c:	83 ec 1c             	sub    esp,0x1c
c000e77f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e783:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e787:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e78b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e78f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e797:	01 df                	add    edi,ebx
c000e799:	39 fb                	cmp    ebx,edi
c000e79b:	7d 1f                	jge    c000e7bc <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e79d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e7a1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e7a5:	7d 12                	jge    c000e7b9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e7a7:	8b 16                	mov    edx,DWORD PTR [esi]
c000e7a9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e7ad:	53                   	push   ebx
c000e7ae:	55                   	push   ebp
c000e7af:	45                   	inc    ebp
c000e7b0:	56                   	push   esi
c000e7b1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e7b4:	83 c4 10             	add    esp,0x10
c000e7b7:	eb e8                	jmp    c000e7a1 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e7b9:	43                   	inc    ebx
c000e7ba:	eb dd                	jmp    c000e799 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e7bc:	83 c4 1c             	add    esp,0x1c
c000e7bf:	5b                   	pop    ebx
c000e7c0:	5e                   	pop    esi
c000e7c1:	5f                   	pop    edi
c000e7c2:	5d                   	pop    ebp
c000e7c3:	c3                   	ret    

c000e7c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e7c4:	55                   	push   ebp
c000e7c5:	57                   	push   edi
c000e7c6:	31 ff                	xor    edi,edi
c000e7c8:	56                   	push   esi
c000e7c9:	53                   	push   ebx
c000e7ca:	83 ec 1c             	sub    esp,0x1c
c000e7cd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7d1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7d5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7dc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7e5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7e9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7ed:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7f0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7f4:	01 f9                	add    ecx,edi
c000e7f6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7fa:	7d 2f                	jge    c000e82b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7fc:	31 f6                	xor    esi,esi
c000e7fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e802:	01 f2                	add    edx,esi
c000e804:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e808:	7d 1a                	jge    c000e824 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e80a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e80d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e810:	46                   	inc    esi
c000e811:	51                   	push   ecx
c000e812:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e816:	52                   	push   edx
c000e817:	55                   	push   ebp
c000e818:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e81b:	83 c4 10             	add    esp,0x10
c000e81e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e822:	eb da                	jmp    c000e7fe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e824:	47                   	inc    edi
c000e825:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e829:	eb c5                	jmp    c000e7f0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e82b:	83 c4 1c             	add    esp,0x1c
c000e82e:	5b                   	pop    ebx
c000e82f:	5e                   	pop    esi
c000e830:	5f                   	pop    edi
c000e831:	5d                   	pop    ebp
c000e832:	c3                   	ret    
c000e833:	90                   	nop

c000e834 <Video::blit(unsigned int*, int, int, int, int)>:
c000e834:	55                   	push   ebp
c000e835:	57                   	push   edi
c000e836:	56                   	push   esi
c000e837:	53                   	push   ebx
c000e838:	83 ec 1c             	sub    esp,0x1c
c000e83b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e83f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e843:	85 c0                	test   eax,eax
c000e845:	79 02                	jns    c000e849 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e847:	31 c0                	xor    eax,eax
c000e849:	c1 e0 02             	shl    eax,0x2
c000e84c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e854:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e858:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e85c:	39 d8                	cmp    eax,ebx
c000e85e:	7e 49                	jle    c000e8a9 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e860:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e866:	7c 41                	jl     c000e8a9 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e868:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e86c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e870:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e874:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e878:	39 f9                	cmp    ecx,edi
c000e87a:	7e 22                	jle    c000e89e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e87c:	83 c5 04             	add    ebp,0x4
c000e87f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e885:	7c 14                	jl     c000e89b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e887:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e889:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e88c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e890:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e894:	56                   	push   esi
c000e895:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	47                   	inc    edi
c000e89c:	eb d2                	jmp    c000e870 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e89e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a2:	43                   	inc    ebx
c000e8a3:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e8a7:	eb ab                	jmp    c000e854 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e8a9:	83 c4 1c             	add    esp,0x1c
c000e8ac:	5b                   	pop    ebx
c000e8ad:	5e                   	pop    esi
c000e8ae:	5f                   	pop    edi
c000e8af:	5d                   	pop    ebp
c000e8b0:	c3                   	ret    
c000e8b1:	90                   	nop

c000e8b2 <Video::clearScreen(unsigned int)>:
c000e8b2:	57                   	push   edi
c000e8b3:	56                   	push   esi
c000e8b4:	53                   	push   ebx
c000e8b5:	31 db                	xor    ebx,ebx
c000e8b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8bb:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8c1:	7e 1f                	jle    c000e8e2 <Video::clearScreen(unsigned int)+0x30>
c000e8c3:	31 ff                	xor    edi,edi
c000e8c5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8cb:	7e 12                	jle    c000e8df <Video::clearScreen(unsigned int)+0x2d>
c000e8cd:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d3:	53                   	push   ebx
c000e8d4:	57                   	push   edi
c000e8d5:	47                   	inc    edi
c000e8d6:	56                   	push   esi
c000e8d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8da:	83 c4 10             	add    esp,0x10
c000e8dd:	eb e6                	jmp    c000e8c5 <Video::clearScreen(unsigned int)+0x13>
c000e8df:	43                   	inc    ebx
c000e8e0:	eb d9                	jmp    c000e8bb <Video::clearScreen(unsigned int)+0x9>
c000e8e2:	5b                   	pop    ebx
c000e8e3:	5e                   	pop    esi
c000e8e4:	5f                   	pop    edi
c000e8e5:	c3                   	ret    

c000e8e6 <Video::putpixel(int, int, unsigned int)>:
c000e8e6:	c7 44 24 04 48 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021948
c000e8ee:	e9 a6 2a 00 00       	jmp    c0011399 <KePanic(char const*)>
c000e8f3:	90                   	nop

c000e8f4 <Video::readPixelApprox(int, int)>:
c000e8f4:	83 ec 18             	sub    esp,0x18
c000e8f7:	68 69 19 02 c0       	push   0xc0021969
c000e8fc:	e8 98 2a 00 00       	call   c0011399 <KePanic(char const*)>
c000e901:	31 c0                	xor    eax,eax
c000e903:	83 c4 1c             	add    esp,0x1c
c000e906:	c3                   	ret    
c000e907:	90                   	nop

c000e908 <Video::Video(char const*)>:
c000e908:	83 ec 0c             	sub    esp,0xc
c000e90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90f:	83 ec 08             	sub    esp,0x8
c000e912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e916:	50                   	push   eax
c000e917:	e8 e6 df ff ff       	call   c000c902 <Device::Device(char const*)>
c000e91c:	83 c4 10             	add    esp,0x10
c000e91f:	ba e4 19 02 c0       	mov    edx,0xc00219e4
c000e924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e928:	89 10                	mov    DWORD PTR [eax],edx
c000e92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e938:	90                   	nop
c000e939:	83 c4 0c             	add    esp,0xc
c000e93c:	c3                   	ret    
c000e93d:	90                   	nop

c000e93e <Video::~Video()>:
c000e93e:	83 ec 0c             	sub    esp,0xc
c000e941:	ba e4 19 02 c0       	mov    edx,0xc00219e4
c000e946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94a:	89 10                	mov    DWORD PTR [eax],edx
c000e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	50                   	push   eax
c000e954:	e8 13 dd ff ff       	call   c000c66c <Device::~Device()>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	90                   	nop
c000e95d:	83 c4 0c             	add    esp,0xc
c000e960:	c3                   	ret    
c000e961:	90                   	nop

c000e962 <Video::~Video()>:
c000e962:	83 ec 0c             	sub    esp,0xc
c000e965:	83 ec 0c             	sub    esp,0xc
c000e968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96c:	e8 cd ff ff ff       	call   c000e93e <Video::~Video()>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	83 ec 08             	sub    esp,0x8
c000e977:	68 64 01 00 00       	push   0x164
c000e97c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e980:	e8 93 be ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e985:	83 c4 10             	add    esp,0x10
c000e988:	83 c4 0c             	add    esp,0xc
c000e98b:	c3                   	ret    

c000e98c <Video::isMonochrome()>:
c000e98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e990:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e996:	c3                   	ret    
c000e997:	90                   	nop

c000e998 <Video::getWidth()>:
c000e998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e99c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e9a2:	c3                   	ret    
c000e9a3:	90                   	nop

c000e9a4 <Video::getHeight()>:
c000e9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e9ae:	c3                   	ret    
c000e9af:	90                   	nop

c000e9b0 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e9b0:	55                   	push   ebp
c000e9b1:	57                   	push   edi
c000e9b2:	56                   	push   esi
c000e9b3:	53                   	push   ebx
c000e9b4:	83 ec 2c             	sub    esp,0x2c
c000e9b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9bb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e9bf:	83 f8 01             	cmp    eax,0x1
c000e9c2:	19 c9                	sbb    ecx,ecx
c000e9c4:	31 db                	xor    ebx,ebx
c000e9c6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9ca:	89 cd                	mov    ebp,ecx
c000e9cc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9d4:	f7 d5                	not    ebp
c000e9d6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e9dc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9e0:	01 d8                	add    eax,ebx
c000e9e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9e6:	56                   	push   esi
c000e9e7:	e8 b8 ff ff ff       	call   c000e9a4 <Video::getHeight()>
c000e9ec:	59                   	pop    ecx
c000e9ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9f1:	7e 70                	jle    c000ea63 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9f7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e9fb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea02:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea06:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ea0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea11:	89 f8                	mov    eax,edi
c000ea13:	83 c0 20             	add    eax,0x20
c000ea16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea1a:	56                   	push   esi
c000ea1b:	e8 78 ff ff ff       	call   c000e998 <Video::getWidth()>
c000ea20:	5a                   	pop    edx
c000ea21:	39 c7                	cmp    edi,eax
c000ea23:	7d 34                	jge    c000ea59 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea25:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea2a:	74 05                	je     c000ea31 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea2c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea2e:	55                   	push   ebp
c000ea2f:	eb 0d                	jmp    c000ea3e <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea31:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea36:	74 12                	je     c000ea4a <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea38:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea42:	57                   	push   edi
c000ea43:	56                   	push   esi
c000ea44:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea47:	83 c4 10             	add    esp,0x10
c000ea4a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea4e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea52:	47                   	inc    edi
c000ea53:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ea57:	75 c1                	jne    c000ea1a <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea59:	43                   	inc    ebx
c000ea5a:	83 fb 20             	cmp    ebx,0x20
c000ea5d:	0f 85 79 ff ff ff    	jne    c000e9dc <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea63:	83 c4 2c             	add    esp,0x2c
c000ea66:	5b                   	pop    ebx
c000ea67:	5e                   	pop    esi
c000ea68:	5f                   	pop    edi
c000ea69:	5d                   	pop    ebp
c000ea6a:	c3                   	ret    
c000ea6b:	90                   	nop

c000ea6c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea6c:	55                   	push   ebp
c000ea6d:	57                   	push   edi
c000ea6e:	56                   	push   esi
c000ea6f:	53                   	push   ebx
c000ea70:	83 ec 28             	sub    esp,0x28
c000ea73:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea77:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea7b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ea7f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ea83:	c1 e6 08             	shl    esi,0x8
c000ea86:	01 c6                	add    esi,eax
c000ea88:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ea8c:	c1 e0 08             	shl    eax,0x8
c000ea8f:	01 d0                	add    eax,edx
c000ea91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea99:	0f af c6             	imul   eax,esi
c000ea9c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eaa3:	50                   	push   eax
c000eaa4:	e8 0d 90 ff ff       	call   c0007ab6 <malloc>
c000eaa9:	83 c4 10             	add    esp,0x10
c000eaac:	89 c7                	mov    edi,eax
c000eaae:	85 c0                	test   eax,eax
c000eab0:	75 10                	jne    c000eac2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000eab2:	83 ec 0c             	sub    esp,0xc
c000eab5:	68 94 19 02 c0       	push   0xc0021994
c000eaba:	e8 da 28 00 00       	call   c0011399 <KePanic(char const*)>
c000eabf:	83 c4 10             	add    esp,0x10
c000eac2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eac6:	ba 12 00 00 00       	mov    edx,0x12
c000eacb:	85 c0                	test   eax,eax
c000eacd:	74 11                	je     c000eae0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eacf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ead3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ead7:	c1 fa 03             	sar    edx,0x3
c000eada:	0f af d1             	imul   edx,ecx
c000eadd:	83 c2 12             	add    edx,0x12
c000eae0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eae4:	74 04                	je     c000eaea <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eae6:	85 f6                	test   esi,esi
c000eae8:	75 12                	jne    c000eafc <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eaea:	83 ec 0c             	sub    esp,0xc
c000eaed:	68 a4 19 02 c0       	push   0xc00219a4
c000eaf2:	e8 4e be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eaf7:	e9 b8 00 00 00       	jmp    c000ebb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eafc:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eb00:	83 f9 02             	cmp    ecx,0x2
c000eb03:	0f 85 96 00 00 00    	jne    c000eb9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eb09:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eb0e:	75 0e                	jne    c000eb1e <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb10:	85 c0                	test   eax,eax
c000eb12:	75 0a                	jne    c000eb1e <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb14:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eb17:	83 e8 18             	sub    eax,0x18
c000eb1a:	a8 f7                	test   al,0xf7
c000eb1c:	74 0a                	je     c000eb28 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb1e:	83 ec 0c             	sub    esp,0xc
c000eb21:	68 b9 19 02 c0       	push   0xc00219b9
c000eb26:	eb 7f                	jmp    c000eba7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb28:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb30:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb38:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000eb3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb44:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb48:	75 0c                	jne    c000eb56 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb4a:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eb4f:	c1 e0 18             	shl    eax,0x18
c000eb52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb56:	45                   	inc    ebp
c000eb57:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb5c:	c1 e1 10             	shl    ecx,0x10
c000eb5f:	89 c8                	mov    eax,ecx
c000eb61:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb66:	c1 e1 08             	shl    ecx,0x8
c000eb69:	09 c1                	or     ecx,eax
c000eb6b:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb6f:	09 c1                	or     ecx,eax
c000eb71:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb75:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000eb79:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb7d:	c1 f8 03             	sar    eax,0x3
c000eb80:	01 c2                	add    edx,eax
c000eb82:	89 e8                	mov    eax,ebp
c000eb84:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb88:	39 c6                	cmp    esi,eax
c000eb8a:	7f b0                	jg     c000eb3c <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb8c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb94:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb97:	7e 22                	jle    c000ebbb <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb99:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000eb9d:	eb 99                	jmp    c000eb38 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb9f:	50                   	push   eax
c000eba0:	50                   	push   eax
c000eba1:	51                   	push   ecx
c000eba2:	68 c7 19 02 c0       	push   0xc00219c7
c000eba7:	e8 99 bd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ebac:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ebaf:	e8 12 8f ff ff       	call   c0007ac6 <free>
c000ebb4:	83 c4 10             	add    esp,0x10
c000ebb7:	31 ff                	xor    edi,edi
c000ebb9:	eb 0f                	jmp    c000ebca <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ebbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebbf:	89 30                	mov    DWORD PTR [eax],esi
c000ebc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebc5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ebc8:	89 30                	mov    DWORD PTR [eax],esi
c000ebca:	83 c4 1c             	add    esp,0x1c
c000ebcd:	89 f8                	mov    eax,edi
c000ebcf:	5b                   	pop    ebx
c000ebd0:	5e                   	pop    esi
c000ebd1:	5f                   	pop    edi
c000ebd2:	5d                   	pop    ebp
c000ebd3:	c3                   	ret    

c000ebd4 <Video::putTGA(int, int, unsigned char*, int)>:
c000ebd4:	55                   	push   ebp
c000ebd5:	57                   	push   edi
c000ebd6:	56                   	push   esi
c000ebd7:	53                   	push   ebx
c000ebd8:	83 ec 28             	sub    esp,0x28
c000ebdb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebe3:	50                   	push   eax
c000ebe4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebe8:	50                   	push   eax
c000ebe9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebf1:	56                   	push   esi
c000ebf2:	e8 75 fe ff ff       	call   c000ea6c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebf7:	83 c4 20             	add    esp,0x20
c000ebfa:	85 c0                	test   eax,eax
c000ebfc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec00:	74 35                	je     c000ec37 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec02:	89 c7                	mov    edi,eax
c000ec04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec08:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ec0c:	39 d8                	cmp    eax,ebx
c000ec0e:	7e 27                	jle    c000ec37 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec10:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ec14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec18:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ec1c:	39 e8                	cmp    eax,ebp
c000ec1e:	7e 14                	jle    c000ec34 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec20:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec22:	83 c7 04             	add    edi,0x4
c000ec25:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ec28:	53                   	push   ebx
c000ec29:	55                   	push   ebp
c000ec2a:	45                   	inc    ebp
c000ec2b:	56                   	push   esi
c000ec2c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec2f:	83 c4 10             	add    esp,0x10
c000ec32:	eb e0                	jmp    c000ec14 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec34:	43                   	inc    ebx
c000ec35:	eb cd                	jmp    c000ec04 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec37:	83 c4 1c             	add    esp,0x1c
c000ec3a:	5b                   	pop    ebx
c000ec3b:	5e                   	pop    esi
c000ec3c:	5f                   	pop    edi
c000ec3d:	5d                   	pop    ebp
c000ec3e:	c3                   	ret    
c000ec3f:	90                   	nop

c000ec40 <ACPI::close(int, int, void*)>:
c000ec40:	83 ec 1c             	sub    esp,0x1c
c000ec43:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec4b:	74 0b                	je     c000ec58 <ACPI::close(int, int, void*)+0x18>
c000ec4d:	b8 00 00 00 00       	mov    eax,0x0
c000ec52:	e9 99 00 00 00       	jmp    c000ecf0 <ACPI::close(int, int, void*)+0xb0>
c000ec57:	90                   	nop
c000ec58:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec5d:	75 29                	jne    c000ec88 <ACPI::close(int, int, void*)+0x48>
c000ec5f:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec64:	85 c0                	test   eax,eax
c000ec66:	74 08                	je     c000ec70 <ACPI::close(int, int, void*)+0x30>
c000ec68:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec6d:	ff d0                	call   eax
c000ec6f:	90                   	nop
c000ec70:	83 ec 0c             	sub    esp,0xc
c000ec73:	68 28 1a 02 c0       	push   0xc0021a28
c000ec78:	e8 1c 27 00 00       	call   c0011399 <KePanic(char const*)>
c000ec7d:	83 c4 10             	add    esp,0x10
c000ec80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec85:	eb 69                	jmp    c000ecf0 <ACPI::close(int, int, void*)+0xb0>
c000ec87:	90                   	nop
c000ec88:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec8d:	75 59                	jne    c000ece8 <ACPI::close(int, int, void*)+0xa8>
c000ec8f:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec94:	85 c0                	test   eax,eax
c000ec96:	74 08                	je     c000eca0 <ACPI::close(int, int, void*)+0x60>
c000ec98:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec9d:	ff d0                	call   eax
c000ec9f:	90                   	nop
c000eca0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eca5:	8d 76 00             	lea    esi,[esi+0x0]
c000eca8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ecad:	83 e0 02             	and    eax,0x2
c000ecb0:	74 1e                	je     c000ecd0 <ACPI::close(int, int, void*)+0x90>
c000ecb2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ecb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecbd:	89 c2                	mov    edx,eax
c000ecbf:	ec                   	in     al,dx
c000ecc0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ecc4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ecc8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eccc:	eb da                	jmp    c000eca8 <ACPI::close(int, int, void*)+0x68>
c000ecce:	66 90                	xchg   ax,ax
c000ecd0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ecd7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ecdc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ece0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ece4:	ee                   	out    dx,al
c000ece5:	8d 76 00             	lea    esi,[esi+0x0]
c000ece8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eced:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf0:	83 c4 1c             	add    esp,0x1c
c000ecf3:	c3                   	ret    

c000ecf4 <findRSDP()>:
c000ecf4:	83 ec 1c             	sub    esp,0x1c
c000ecf7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ecfc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed02:	83 e0 04             	and    eax,0x4
c000ed05:	0f b6 c0             	movzx  eax,al
c000ed08:	85 c0                	test   eax,eax
c000ed0a:	75 08                	jne    c000ed14 <findRSDP()+0x20>
c000ed0c:	b8 00 00 00 00       	mov    eax,0x0
c000ed11:	eb 75                	jmp    c000ed88 <findRSDP()+0x94>
c000ed13:	90                   	nop
c000ed14:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ed19:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed1e:	7f 1c                	jg     c000ed3c <findRSDP()+0x48>
c000ed20:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed25:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed2b:	83 e2 fb             	and    edx,0xfffffffb
c000ed2e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed34:	b8 00 00 00 00       	mov    eax,0x0
c000ed39:	eb 4d                	jmp    c000ed88 <findRSDP()+0x94>
c000ed3b:	90                   	nop
c000ed3c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed44:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed4c:	77 32                	ja     c000ed80 <findRSDP()+0x8c>
c000ed4e:	83 ec 04             	sub    esp,0x4
c000ed51:	6a 08                	push   0x8
c000ed53:	68 c3 1a 02 c0       	push   0xc0021ac3
c000ed58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed5c:	e8 1f 16 ff ff       	call   c0000380 <memcmp>
c000ed61:	83 c4 10             	add    esp,0x10
c000ed64:	85 c0                	test   eax,eax
c000ed66:	0f 94 c0             	sete   al
c000ed69:	0f b6 c0             	movzx  eax,al
c000ed6c:	85 c0                	test   eax,eax
c000ed6e:	74 08                	je     c000ed78 <findRSDP()+0x84>
c000ed70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed74:	eb 12                	jmp    c000ed88 <findRSDP()+0x94>
c000ed76:	66 90                	xchg   ax,ax
c000ed78:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed7d:	eb c5                	jmp    c000ed44 <findRSDP()+0x50>
c000ed7f:	90                   	nop
c000ed80:	b8 00 00 00 00       	mov    eax,0x0
c000ed85:	8d 76 00             	lea    esi,[esi+0x0]
c000ed88:	83 c4 1c             	add    esp,0x1c
c000ed8b:	c3                   	ret    

c000ed8c <loadACPITables(unsigned char*)>:
c000ed8c:	57                   	push   edi
c000ed8d:	56                   	push   esi
c000ed8e:	53                   	push   ebx
c000ed8f:	83 ec 60             	sub    esp,0x60
c000ed92:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed97:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed9d:	83 e0 04             	and    eax,0x4
c000eda0:	0f b6 c0             	movzx  eax,al
c000eda3:	85 c0                	test   eax,eax
c000eda5:	0f 84 41 02 00 00    	je     c000efec <loadACPITables(unsigned char*)+0x260>
c000edab:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000edb0:	0f b6 c0             	movzx  eax,al
c000edb3:	85 c0                	test   eax,eax
c000edb5:	74 79                	je     c000ee30 <loadACPITables(unsigned char*)+0xa4>
c000edb7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edbb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000edbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000edc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edc6:	83 e8 24             	sub    eax,0x24
c000edc9:	c1 e8 03             	shr    eax,0x3
c000edcc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edd0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000edd8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eddc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ede0:	0f 8d ba 00 00 00    	jge    c000eea0 <loadACPITables(unsigned char*)+0x114>
c000ede6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edea:	83 c0 24             	add    eax,0x24
c000eded:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edf1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edf5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edf9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000edfd:	c1 e0 03             	shl    eax,0x3
c000ee00:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ee04:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0d:	89 c1                	mov    ecx,eax
c000ee0f:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee14:	8d 50 01             	lea    edx,[eax+0x1]
c000ee17:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee1d:	89 ca                	mov    edx,ecx
c000ee1f:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee26:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee2b:	eb ab                	jmp    c000edd8 <loadACPITables(unsigned char*)+0x4c>
c000ee2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee30:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee34:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee3f:	83 e8 24             	sub    eax,0x24
c000ee42:	c1 e8 02             	shr    eax,0x2
c000ee45:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee49:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee51:	8d 76 00             	lea    esi,[esi+0x0]
c000ee54:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee58:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee5c:	7d 42                	jge    c000eea0 <loadACPITables(unsigned char*)+0x114>
c000ee5e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee62:	83 c0 24             	add    eax,0x24
c000ee65:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee69:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee6d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee71:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee75:	c1 e0 02             	shl    eax,0x2
c000ee78:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee80:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee82:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee87:	8d 50 01             	lea    edx,[eax+0x1]
c000ee8a:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee90:	89 ca                	mov    edx,ecx
c000ee92:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee99:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee9e:	eb b4                	jmp    c000ee54 <loadACPITables(unsigned char*)+0xc8>
c000eea0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000eea8:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eead:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000eeb1:	0f 8d 39 01 00 00    	jge    c000eff0 <loadACPITables(unsigned char*)+0x264>
c000eeb7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eebb:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eec2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed2:	25 ff 0f 00 00       	and    eax,0xfff
c000eed7:	89 c6                	mov    esi,eax
c000eed9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eedf:	83 ec 0c             	sub    esp,0xc
c000eee2:	6a 01                	push   0x1
c000eee4:	e8 24 a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000eee9:	83 c4 10             	add    esp,0x10
c000eeec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eef0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eef6:	83 ec 0c             	sub    esp,0xc
c000eef9:	6a 01                	push   0x1
c000eefb:	6a 01                	push   0x1
c000eefd:	50                   	push   eax
c000eefe:	52                   	push   edx
c000eeff:	53                   	push   ebx
c000ef00:	e8 15 b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef05:	83 c4 20             	add    esp,0x20
c000ef08:	09 f0                	or     eax,esi
c000ef0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef0e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef12:	c1 e0 03             	shl    eax,0x3
c000ef15:	05 20 89 02 c0       	add    eax,0xc0028920
c000ef1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef26:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef42:	89 c6                	mov    esi,eax
c000ef44:	89 d7                	mov    edi,edx
c000ef46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef48:	89 c8                	mov    eax,ecx
c000ef4a:	89 fa                	mov    edx,edi
c000ef4c:	89 f3                	mov    ebx,esi
c000ef4e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef69:	05 00 10 00 00       	add    eax,0x1000
c000ef6e:	c1 e8 0c             	shr    eax,0xc
c000ef71:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef81:	25 ff 0f 00 00       	and    eax,0xfff
c000ef86:	89 c6                	mov    esi,eax
c000ef88:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef8e:	83 ec 0c             	sub    esp,0xc
c000ef91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef95:	e8 73 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef9a:	83 c4 10             	add    esp,0x10
c000ef9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000efa1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efa7:	83 ec 0c             	sub    esp,0xc
c000efaa:	6a 01                	push   0x1
c000efac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efb0:	50                   	push   eax
c000efb1:	52                   	push   edx
c000efb2:	53                   	push   ebx
c000efb3:	e8 62 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efb8:	83 c4 20             	add    esp,0x20
c000efbb:	09 f0                	or     eax,esi
c000efbd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc5:	83 ec 0c             	sub    esp,0xc
c000efc8:	50                   	push   eax
c000efc9:	e8 5d a9 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000efce:	83 c4 10             	add    esp,0x10
c000efd1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efd5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efd9:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efe0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efe5:	e9 be fe ff ff       	jmp    c000eea8 <loadACPITables(unsigned char*)+0x11c>
c000efea:	66 90                	xchg   ax,ax
c000efec:	90                   	nop
c000efed:	8d 76 00             	lea    esi,[esi+0x0]
c000eff0:	83 c4 60             	add    esp,0x60
c000eff3:	5b                   	pop    ebx
c000eff4:	5e                   	pop    esi
c000eff5:	5f                   	pop    edi
c000eff6:	c3                   	ret    
c000eff7:	90                   	nop

c000eff8 <findRSDT(unsigned char*)>:
c000eff8:	57                   	push   edi
c000eff9:	56                   	push   esi
c000effa:	53                   	push   ebx
c000effb:	83 ec 50             	sub    esp,0x50
c000effe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f003:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f009:	83 e0 04             	and    eax,0x4
c000f00c:	0f b6 c0             	movzx  eax,al
c000f00f:	85 c0                	test   eax,eax
c000f011:	75 0d                	jne    c000f020 <findRSDT(unsigned char*)+0x28>
c000f013:	b8 00 00 00 00       	mov    eax,0x0
c000f018:	e9 2b 01 00 00       	jmp    c000f148 <findRSDT(unsigned char*)+0x150>
c000f01d:	8d 76 00             	lea    esi,[esi+0x0]
c000f020:	89 e0                	mov    eax,esp
c000f022:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f026:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f02a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f02e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f036:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f03a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f03e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f042:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f046:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f04a:	89 c6                	mov    esi,eax
c000f04c:	89 d7                	mov    edi,edx
c000f04e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f050:	89 c8                	mov    eax,ecx
c000f052:	89 fa                	mov    edx,edi
c000f054:	89 f3                	mov    ebx,esi
c000f056:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f05a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f05e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f062:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f066:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f06a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f072:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f076:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f07a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f082:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f086:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f08a:	25 ff 0f 00 00       	and    eax,0xfff
c000f08f:	89 c6                	mov    esi,eax
c000f091:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f097:	83 ec 0c             	sub    esp,0xc
c000f09a:	6a 02                	push   0x2
c000f09c:	e8 6c a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f0a1:	83 c4 10             	add    esp,0x10
c000f0a4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f0a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0ae:	83 ec 0c             	sub    esp,0xc
c000f0b1:	6a 01                	push   0x1
c000f0b3:	6a 02                	push   0x2
c000f0b5:	50                   	push   eax
c000f0b6:	52                   	push   edx
c000f0b7:	53                   	push   ebx
c000f0b8:	e8 5d ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0bd:	83 c4 20             	add    esp,0x20
c000f0c0:	09 f0                	or     eax,esi
c000f0c2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0ca:	25 ff 0f 00 00       	and    eax,0xfff
c000f0cf:	89 c6                	mov    esi,eax
c000f0d1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0d7:	83 ec 0c             	sub    esp,0xc
c000f0da:	6a 02                	push   0x2
c000f0dc:	e8 2c a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f0e1:	83 c4 10             	add    esp,0x10
c000f0e4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0ee:	83 ec 0c             	sub    esp,0xc
c000f0f1:	6a 01                	push   0x1
c000f0f3:	6a 02                	push   0x2
c000f0f5:	50                   	push   eax
c000f0f6:	52                   	push   edx
c000f0f7:	53                   	push   ebx
c000f0f8:	e8 1d ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0fd:	83 c4 20             	add    esp,0x20
c000f100:	09 f0                	or     eax,esi
c000f102:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f106:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f10b:	85 c0                	test   eax,eax
c000f10d:	75 11                	jne    c000f120 <findRSDT(unsigned char*)+0x128>
c000f10f:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f116:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f11a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f11e:	eb 24                	jmp    c000f144 <findRSDT(unsigned char*)+0x14c>
c000f120:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f125:	83 f8 02             	cmp    eax,0x2
c000f128:	75 12                	jne    c000f13c <findRSDT(unsigned char*)+0x144>
c000f12a:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f131:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f135:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f139:	eb 09                	jmp    c000f144 <findRSDT(unsigned char*)+0x14c>
c000f13b:	90                   	nop
c000f13c:	b8 00 00 00 00       	mov    eax,0x0
c000f141:	eb 05                	jmp    c000f148 <findRSDT(unsigned char*)+0x150>
c000f143:	90                   	nop
c000f144:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f148:	83 c4 50             	add    esp,0x50
c000f14b:	5b                   	pop    ebx
c000f14c:	5e                   	pop    esi
c000f14d:	5f                   	pop    edi
c000f14e:	c3                   	ret    
c000f14f:	90                   	nop

c000f150 <findDataTable(unsigned char*, char*)>:
c000f150:	83 ec 1c             	sub    esp,0x1c
c000f153:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f158:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f15e:	83 e0 04             	and    eax,0x4
c000f161:	0f b6 c0             	movzx  eax,al
c000f164:	85 c0                	test   eax,eax
c000f166:	75 08                	jne    c000f170 <findDataTable(unsigned char*, char*)+0x20>
c000f168:	b8 00 00 00 00       	mov    eax,0x0
c000f16d:	eb 5d                	jmp    c000f1cc <findDataTable(unsigned char*, char*)+0x7c>
c000f16f:	90                   	nop
c000f170:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f178:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f17d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f181:	7d 41                	jge    c000f1c4 <findDataTable(unsigned char*, char*)+0x74>
c000f183:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f187:	c1 e0 03             	shl    eax,0x3
c000f18a:	05 20 89 02 c0       	add    eax,0xc0028920
c000f18f:	83 ec 04             	sub    esp,0x4
c000f192:	6a 04                	push   0x4
c000f194:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f198:	50                   	push   eax
c000f199:	e8 e2 11 ff ff       	call   c0000380 <memcmp>
c000f19e:	83 c4 10             	add    esp,0x10
c000f1a1:	85 c0                	test   eax,eax
c000f1a3:	0f 94 c0             	sete   al
c000f1a6:	0f b6 c0             	movzx  eax,al
c000f1a9:	85 c0                	test   eax,eax
c000f1ab:	74 0f                	je     c000f1bc <findDataTable(unsigned char*, char*)+0x6c>
c000f1ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1b1:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f1b8:	eb 12                	jmp    c000f1cc <findDataTable(unsigned char*, char*)+0x7c>
c000f1ba:	66 90                	xchg   ax,ax
c000f1bc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1c1:	eb b5                	jmp    c000f178 <findDataTable(unsigned char*, char*)+0x28>
c000f1c3:	90                   	nop
c000f1c4:	b8 00 00 00 00       	mov    eax,0x0
c000f1c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f1cc:	83 c4 1c             	add    esp,0x1c
c000f1cf:	c3                   	ret    

c000f1d0 <scanMADT()>:
c000f1d0:	53                   	push   ebx
c000f1d1:	83 ec 38             	sub    esp,0x38
c000f1d4:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f1d9:	25 00 04 00 00       	and    eax,0x400
c000f1de:	74 14                	je     c000f1f4 <scanMADT()+0x24>
c000f1e0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1e5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1eb:	83 e2 fb             	and    edx,0xfffffffb
c000f1ee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1f4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1f9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1ff:	83 e0 04             	and    eax,0x4
c000f202:	0f b6 c0             	movzx  eax,al
c000f205:	85 c0                	test   eax,eax
c000f207:	0f 84 6b 04 00 00    	je     c000f678 <scanMADT()+0x4a8>
c000f20d:	e8 e2 fa ff ff       	call   c000ecf4 <findRSDP()>
c000f212:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f217:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f21c:	85 c0                	test   eax,eax
c000f21e:	75 1c                	jne    c000f23c <scanMADT()+0x6c>
c000f220:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f225:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f22b:	83 e2 fb             	and    edx,0xfffffffb
c000f22e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f234:	e9 47 04 00 00       	jmp    c000f680 <scanMADT()+0x4b0>
c000f239:	8d 76 00             	lea    esi,[esi+0x0]
c000f23c:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f241:	83 ec 0c             	sub    esp,0xc
c000f244:	50                   	push   eax
c000f245:	e8 ae fd ff ff       	call   c000eff8 <findRSDT(unsigned char*)>
c000f24a:	83 c4 10             	add    esp,0x10
c000f24d:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f252:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f257:	85 c0                	test   eax,eax
c000f259:	75 19                	jne    c000f274 <scanMADT()+0xa4>
c000f25b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f260:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f266:	83 e2 fb             	and    edx,0xfffffffb
c000f269:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f26f:	e9 0c 04 00 00       	jmp    c000f680 <scanMADT()+0x4b0>
c000f274:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f279:	83 ec 0c             	sub    esp,0xc
c000f27c:	50                   	push   eax
c000f27d:	e8 0a fb ff ff       	call   c000ed8c <loadACPITables(unsigned char*)>
c000f282:	83 c4 10             	add    esp,0x10
c000f285:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f28a:	83 ec 08             	sub    esp,0x8
c000f28d:	68 cc 1a 02 c0       	push   0xc0021acc
c000f292:	50                   	push   eax
c000f293:	e8 b8 fe ff ff       	call   c000f150 <findDataTable(unsigned char*, char*)>
c000f298:	83 c4 10             	add    esp,0x10
c000f29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f29f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f2a4:	75 1a                	jne    c000f2c0 <scanMADT()+0xf0>
c000f2a6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f2ab:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f2b1:	83 e2 fe             	and    edx,0xfffffffe
c000f2b4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f2ba:	e9 c1 03 00 00       	jmp    c000f680 <scanMADT()+0x4b0>
c000f2bf:	90                   	nop
c000f2c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2cf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2d3:	0f 87 a7 03 00 00    	ja     c000f680 <scanMADT()+0x4b0>
c000f2d9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2e1:	0f 87 99 03 00 00    	ja     c000f680 <scanMADT()+0x4b0>
c000f2e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f3:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f302:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f306:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f30a:	8d 50 01             	lea    edx,[eax+0x1]
c000f30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f311:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f315:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f319:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f31d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f322:	83 f8 02             	cmp    eax,0x2
c000f325:	0f 86 51 03 00 00    	jbe    c000f67c <scanMADT()+0x4ac>
c000f32b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f330:	85 c0                	test   eax,eax
c000f332:	75 58                	jne    c000f38c <scanMADT()+0x1bc>
c000f334:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f338:	8d 50 01             	lea    edx,[eax+0x1]
c000f33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f33f:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f345:	0f b6 d2             	movzx  edx,dl
c000f348:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f34c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f350:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f356:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f35a:	8d 50 01             	lea    edx,[eax+0x1]
c000f35d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f361:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f36a:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f370:	0f b6 d2             	movzx  edx,dl
c000f373:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f377:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f37b:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f381:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f386:	e9 d9 02 00 00       	jmp    c000f664 <scanMADT()+0x494>
c000f38b:	90                   	nop
c000f38c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f391:	83 f8 01             	cmp    eax,0x1
c000f394:	0f 85 1a 01 00 00    	jne    c000f4b4 <scanMADT()+0x2e4>
c000f39a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f39e:	8d 50 01             	lea    edx,[eax+0x1]
c000f3a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3a5:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f3ab:	0f b6 d2             	movzx  edx,dl
c000f3ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f3b2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3b6:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3bc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c9:	01 d0                	add    eax,edx
c000f3cb:	83 c0 2c             	add    eax,0x2c
c000f3ce:	8a 00                	mov    al,BYTE PTR [eax]
c000f3d0:	0f b6 d0             	movzx  edx,al
c000f3d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3e2:	0f b6 c0             	movzx  eax,al
c000f3e5:	c1 e0 08             	shl    eax,0x8
c000f3e8:	89 d1                	mov    ecx,edx
c000f3ea:	09 c1                	or     ecx,eax
c000f3ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f0:	8d 50 02             	lea    edx,[eax+0x2]
c000f3f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3fb:	0f b6 c0             	movzx  eax,al
c000f3fe:	c1 e0 10             	shl    eax,0x10
c000f401:	09 c1                	or     ecx,eax
c000f403:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f407:	8d 50 03             	lea    edx,[eax+0x3]
c000f40a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f40e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f412:	0f b6 c0             	movzx  eax,al
c000f415:	c1 e0 18             	shl    eax,0x18
c000f418:	09 c1                	or     ecx,eax
c000f41a:	89 ca                	mov    edx,ecx
c000f41c:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f421:	0f b6 c0             	movzx  eax,al
c000f424:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f42b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f430:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f434:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f438:	01 d0                	add    eax,edx
c000f43a:	83 c0 2c             	add    eax,0x2c
c000f43d:	8a 00                	mov    al,BYTE PTR [eax]
c000f43f:	0f b6 d0             	movzx  edx,al
c000f442:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f446:	8d 48 01             	lea    ecx,[eax+0x1]
c000f449:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f44d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f451:	0f b6 c0             	movzx  eax,al
c000f454:	c1 e0 08             	shl    eax,0x8
c000f457:	89 d1                	mov    ecx,edx
c000f459:	09 c1                	or     ecx,eax
c000f45b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f45f:	8d 50 02             	lea    edx,[eax+0x2]
c000f462:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f466:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f46a:	0f b6 c0             	movzx  eax,al
c000f46d:	c1 e0 10             	shl    eax,0x10
c000f470:	09 c1                	or     ecx,eax
c000f472:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f476:	8d 50 03             	lea    edx,[eax+0x3]
c000f479:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f47d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f481:	0f b6 c0             	movzx  eax,al
c000f484:	c1 e0 18             	shl    eax,0x18
c000f487:	09 c1                	or     ecx,eax
c000f489:	89 ca                	mov    edx,ecx
c000f48b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f490:	0f b6 c0             	movzx  eax,al
c000f493:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f49a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f49f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f4a4:	83 c0 01             	add    eax,0x1
c000f4a7:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f4ac:	e9 b3 01 00 00       	jmp    c000f664 <scanMADT()+0x494>
c000f4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4b9:	83 f8 02             	cmp    eax,0x2
c000f4bc:	0f 85 ea 00 00 00    	jne    c000f5ac <scanMADT()+0x3dc>
c000f4c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f4c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4d5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f4d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4dd:	8d 50 01             	lea    edx,[eax+0x1]
c000f4e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4ec:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4f8:	01 d0                	add    eax,edx
c000f4fa:	83 c0 2c             	add    eax,0x2c
c000f4fd:	8a 00                	mov    al,BYTE PTR [eax]
c000f4ff:	0f b6 d0             	movzx  edx,al
c000f502:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f506:	8d 48 01             	lea    ecx,[eax+0x1]
c000f509:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f50d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f511:	0f b6 c0             	movzx  eax,al
c000f514:	c1 e0 08             	shl    eax,0x8
c000f517:	89 d1                	mov    ecx,edx
c000f519:	09 c1                	or     ecx,eax
c000f51b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f51f:	8d 50 02             	lea    edx,[eax+0x2]
c000f522:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f526:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f52a:	0f b6 c0             	movzx  eax,al
c000f52d:	c1 e0 10             	shl    eax,0x10
c000f530:	09 c1                	or     ecx,eax
c000f532:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f536:	8d 50 03             	lea    edx,[eax+0x3]
c000f539:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f53d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f541:	0f b6 c0             	movzx  eax,al
c000f544:	c1 e0 18             	shl    eax,0x18
c000f547:	09 c8                	or     eax,ecx
c000f549:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f54d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f552:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f556:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f55a:	01 d0                	add    eax,edx
c000f55c:	83 c0 2c             	add    eax,0x2c
c000f55f:	8a 00                	mov    al,BYTE PTR [eax]
c000f561:	0f b6 c0             	movzx  eax,al
c000f564:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f568:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f56b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f56f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f573:	0f b6 d2             	movzx  edx,dl
c000f576:	c1 e2 08             	shl    edx,0x8
c000f579:	09 d0                	or     eax,edx
c000f57b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f580:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f585:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f58a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f58e:	88 90 c8 31 02 c0    	mov    BYTE PTR [eax-0x3ffdce38],dl
c000f594:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f599:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f59e:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f5a6:	e9 b9 00 00 00       	jmp    c000f664 <scanMADT()+0x494>
c000f5ab:	90                   	nop
c000f5ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5b1:	83 f8 04             	cmp    eax,0x4
c000f5b4:	0f 85 9a 00 00 00    	jne    c000f654 <scanMADT()+0x484>
c000f5ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5be:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5cd:	0f b6 c0             	movzx  eax,al
c000f5d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5dc:	01 d0                	add    eax,edx
c000f5de:	83 c0 2c             	add    eax,0x2c
c000f5e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f5e3:	0f b6 d0             	movzx  edx,al
c000f5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5f5:	0f b6 c0             	movzx  eax,al
c000f5f8:	c1 e0 08             	shl    eax,0x8
c000f5fb:	09 d0                	or     eax,edx
c000f5fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f601:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f606:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60a:	8d 50 01             	lea    edx,[eax+0x1]
c000f60d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f611:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f615:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f619:	0f b6 c0             	movzx  eax,al
c000f61c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f624:	c1 e0 08             	shl    eax,0x8
c000f627:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f62b:	89 c1                	mov    ecx,eax
c000f62d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f631:	c1 e0 18             	shl    eax,0x18
c000f634:	89 c3                	mov    ebx,eax
c000f636:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f63b:	8d 50 01             	lea    edx,[eax+0x1]
c000f63e:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f644:	09 d9                	or     ecx,ebx
c000f646:	89 ca                	mov    edx,ecx
c000f648:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f64f:	eb 13                	jmp    c000f664 <scanMADT()+0x494>
c000f651:	8d 76 00             	lea    esi,[esi+0x0]
c000f654:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f659:	83 f8 05             	cmp    eax,0x5
c000f65c:	75 06                	jne    c000f664 <scanMADT()+0x494>
c000f65e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f663:	90                   	nop
c000f664:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f669:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f66d:	01 d0                	add    eax,edx
c000f66f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f673:	e9 50 fc ff ff       	jmp    c000f2c8 <scanMADT()+0xf8>
c000f678:	90                   	nop
c000f679:	eb 05                	jmp    c000f680 <scanMADT()+0x4b0>
c000f67b:	90                   	nop
c000f67c:	90                   	nop
c000f67d:	8d 76 00             	lea    esi,[esi+0x0]
c000f680:	83 c4 38             	add    esp,0x38
c000f683:	5b                   	pop    ebx
c000f684:	c3                   	ret    
c000f685:	90                   	nop
c000f686:	66 90                	xchg   ax,ax

c000f688 <ACPI::ACPI()>:
c000f688:	83 ec 0c             	sub    esp,0xc
c000f68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f68f:	83 ec 08             	sub    esp,0x8
c000f692:	68 d1 1a 02 c0       	push   0xc0021ad1
c000f697:	50                   	push   eax
c000f698:	e8 65 d2 ff ff       	call   c000c902 <Device::Device(char const*)>
c000f69d:	83 c4 10             	add    esp,0x10
c000f6a0:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c000f6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6a9:	89 10                	mov    DWORD PTR [eax],edx
c000f6ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ba:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6c8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6d2:	e8 f9 fa ff ff       	call   c000f1d0 <scanMADT()>
c000f6d7:	90                   	nop
c000f6d8:	83 c4 0c             	add    esp,0xc
c000f6db:	c3                   	ret    

c000f6dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6dc:	83 ec 2c             	sub    esp,0x2c
c000f6df:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f6e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f6eb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f6ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6f4:	88 d0                	mov    al,dl
c000f6f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f707:	90                   	nop
c000f708:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f70c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f712:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f716:	0f 8d b0 00 00 00    	jge    c000f7cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f71c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f720:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f724:	83 c2 2a             	add    edx,0x2a
c000f727:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f72b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f730:	0f b7 c0             	movzx  eax,ax
c000f733:	39 c2                	cmp    edx,eax
c000f735:	0f 85 85 00 00 00    	jne    c000f7c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f73b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f73f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f743:	83 c2 2a             	add    edx,0x2a
c000f746:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f74a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f74f:	0f b6 c0             	movzx  eax,al
c000f752:	39 c2                	cmp    edx,eax
c000f754:	75 6a                	jne    c000f7c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f756:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f75b:	85 c0                	test   eax,eax
c000f75d:	74 3d                	je     c000f79c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f75f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f763:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f767:	83 c2 2a             	add    edx,0x2a
c000f76a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f76e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f772:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f775:	39 c2                	cmp    edx,eax
c000f777:	74 13                	je     c000f78c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f779:	83 ec 0c             	sub    esp,0xc
c000f77c:	68 4c 1a 02 c0       	push   0xc0021a4c
c000f781:	e8 13 1c 00 00       	call   c0011399 <KePanic(char const*)>
c000f786:	83 c4 10             	add    esp,0x10
c000f789:	8d 76 00             	lea    esi,[esi+0x0]
c000f78c:	83 ec 0c             	sub    esp,0xc
c000f78f:	68 d6 1a 02 c0       	push   0xc0021ad6
c000f794:	e8 00 1c 00 00       	call   c0011399 <KePanic(char const*)>
c000f799:	83 c4 10             	add    esp,0x10
c000f79c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7a8:	83 c2 2a             	add    edx,0x2a
c000f7ab:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f7af:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7b1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f7b4:	89 01                	mov    DWORD PTR [ecx],eax
c000f7b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7b9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7be:	66 90                	xchg   ax,ax
c000f7c0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7c5:	e9 3e ff ff ff       	jmp    c000f708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7ca:	66 90                	xchg   ax,ax
c000f7cc:	90                   	nop
c000f7cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7d1:	83 c4 2c             	add    esp,0x2c
c000f7d4:	c2 04 00             	ret    0x4
c000f7d7:	90                   	nop

c000f7d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f7d8:	83 ec 1c             	sub    esp,0x1c
c000f7db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7df:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7e7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7ec:	88 c8                	mov    al,cl
c000f7ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7f2:	88 d0                	mov    al,dl
c000f7f4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7fc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f806:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f809:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f80d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f815:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f81b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f81f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f826:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f82b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f82f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f835:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f839:	83 c0 01             	add    eax,0x1
c000f83c:	88 c1                	mov    cl,al
c000f83e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f842:	83 c2 2a             	add    edx,0x2a
c000f845:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f84d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f857:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f85a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f85e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f866:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f86c:	8d 50 01             	lea    edx,[eax+0x1]
c000f86f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f873:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f87d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f883:	3d 00 02 00 00       	cmp    eax,0x200
c000f888:	75 12                	jne    c000f89c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f88a:	83 ec 0c             	sub    esp,0xc
c000f88d:	68 e5 1a 02 c0       	push   0xc0021ae5
c000f892:	e8 02 1b 00 00       	call   c0011399 <KePanic(char const*)>
c000f897:	83 c4 10             	add    esp,0x10
c000f89a:	66 90                	xchg   ax,ax
c000f89c:	90                   	nop
c000f89d:	83 c4 1c             	add    esp,0x1c
c000f8a0:	c3                   	ret    
c000f8a1:	90                   	nop
c000f8a2:	66 90                	xchg   ax,ax

c000f8a4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f8a4:	b8 00 00 00 00       	mov    eax,0x0
c000f8a9:	c3                   	ret    
c000f8aa:	66 90                	xchg   ax,ax

c000f8ac <ACPI::detectPCI()>:
c000f8ac:	53                   	push   ebx
c000f8ad:	83 ec 28             	sub    esp,0x28
c000f8b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8b5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f8ba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8bf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8c5:	83 e0 04             	and    eax,0x4
c000f8c8:	0f b6 c0             	movzx  eax,al
c000f8cb:	85 c0                	test   eax,eax
c000f8cd:	74 2d                	je     c000f8fc <ACPI::detectPCI()+0x50>
c000f8cf:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8d4:	83 ec 08             	sub    esp,0x8
c000f8d7:	68 02 1b 02 c0       	push   0xc0021b02
c000f8dc:	50                   	push   eax
c000f8dd:	e8 6e f8 ff ff       	call   c000f150 <findDataTable(unsigned char*, char*)>
c000f8e2:	83 c4 10             	add    esp,0x10
c000f8e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8e9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8ee:	74 0c                	je     c000f8fc <ACPI::detectPCI()+0x50>
c000f8f0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8f5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8fa:	66 90                	xchg   ax,ax
c000f8fc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f908:	8a 00                	mov    al,BYTE PTR [eax]
c000f90a:	0f b6 c0             	movzx  eax,al
c000f90d:	83 f8 01             	cmp    eax,0x1
c000f910:	75 0e                	jne    c000f920 <ACPI::detectPCI()+0x74>
c000f912:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f917:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f91c:	eb 2e                	jmp    c000f94c <ACPI::detectPCI()+0xa0>
c000f91e:	66 90                	xchg   ax,ax
c000f920:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f924:	8a 00                	mov    al,BYTE PTR [eax]
c000f926:	0f b6 c0             	movzx  eax,al
c000f929:	83 f8 02             	cmp    eax,0x2
c000f92c:	75 1e                	jne    c000f94c <ACPI::detectPCI()+0xa0>
c000f92e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f933:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f938:	85 c0                	test   eax,eax
c000f93a:	74 10                	je     c000f94c <ACPI::detectPCI()+0xa0>
c000f93c:	83 ec 0c             	sub    esp,0xc
c000f93f:	68 7c 1a 02 c0       	push   0xc0021a7c
c000f944:	e8 50 1a 00 00       	call   c0011399 <KePanic(char const*)>
c000f949:	83 c4 10             	add    esp,0x10
c000f94c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f950:	83 f0 01             	xor    eax,0x1
c000f953:	0f b6 c0             	movzx  eax,al
c000f956:	85 c0                	test   eax,eax
c000f958:	74 46                	je     c000f9a0 <ACPI::detectPCI()+0xf4>
c000f95a:	e8 d1 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f95f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f963:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f968:	75 0e                	jne    c000f978 <ACPI::detectPCI()+0xcc>
c000f96a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f96f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f974:	eb 2a                	jmp    c000f9a0 <ACPI::detectPCI()+0xf4>
c000f976:	66 90                	xchg   ax,ax
c000f978:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f97d:	75 21                	jne    c000f9a0 <ACPI::detectPCI()+0xf4>
c000f97f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f984:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f989:	85 c0                	test   eax,eax
c000f98b:	74 13                	je     c000f9a0 <ACPI::detectPCI()+0xf4>
c000f98d:	83 ec 0c             	sub    esp,0xc
c000f990:	68 7c 1a 02 c0       	push   0xc0021a7c
c000f995:	e8 ff 19 00 00       	call   c0011399 <KePanic(char const*)>
c000f99a:	83 c4 10             	add    esp,0x10
c000f99d:	8d 76 00             	lea    esi,[esi+0x0]
c000f9a0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9a5:	85 c0                	test   eax,eax
c000f9a7:	0f 84 87 00 00 00    	je     c000fa34 <ACPI::detectPCI()+0x188>
c000f9ad:	83 ec 0c             	sub    esp,0xc
c000f9b0:	68 07 1b 02 c0       	push   0xc0021b07
c000f9b5:	e8 09 13 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c000f9ba:	83 c4 10             	add    esp,0x10
c000f9bd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9c5:	83 ec 0c             	sub    esp,0xc
c000f9c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9cc:	e8 e5 80 ff ff       	call   c0007ab6 <malloc>
c000f9d1:	83 c4 10             	add    esp,0x10
c000f9d4:	89 c3                	mov    ebx,eax
c000f9d6:	83 ec 0c             	sub    esp,0xc
c000f9d9:	53                   	push   ebx
c000f9da:	e8 51 b3 00 00       	call   c001ad30 <PCI::PCI()>
c000f9df:	83 c4 10             	add    esp,0x10
c000f9e2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ea:	83 ec 08             	sub    esp,0x8
c000f9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9f1:	50                   	push   eax
c000f9f2:	e8 73 cd ff ff       	call   c000c76a <Device::addChild(Device*)>
c000f9f7:	83 c4 10             	add    esp,0x10
c000f9fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa00:	83 c0 08             	add    eax,0x8
c000fa03:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa05:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fa0a:	85 d2                	test   edx,edx
c000fa0c:	74 0a                	je     c000fa18 <ACPI::detectPCI()+0x16c>
c000fa0e:	ba 01 00 00 00       	mov    edx,0x1
c000fa13:	eb 0b                	jmp    c000fa20 <ACPI::detectPCI()+0x174>
c000fa15:	8d 76 00             	lea    esi,[esi+0x0]
c000fa18:	ba 02 00 00 00       	mov    edx,0x2
c000fa1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa20:	6a 00                	push   0x0
c000fa22:	6a 00                	push   0x0
c000fa24:	52                   	push   edx
c000fa25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa29:	ff d0                	call   eax
c000fa2b:	83 c4 10             	add    esp,0x10
c000fa2e:	e9 91 00 00 00       	jmp    c000fac4 <ACPI::detectPCI()+0x218>
c000fa33:	90                   	nop
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	68 1f 1b 02 c0       	push   0xc0021b1f
c000fa3c:	e8 82 12 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c000fa41:	83 c4 10             	add    esp,0x10
c000fa44:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa4b:	83 ec 0c             	sub    esp,0xc
c000fa4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa52:	e8 5f 80 ff ff       	call   c0007ab6 <malloc>
c000fa57:	83 c4 10             	add    esp,0x10
c000fa5a:	89 c3                	mov    ebx,eax
c000fa5c:	83 ec 0c             	sub    esp,0xc
c000fa5f:	53                   	push   ebx
c000fa60:	e8 65 be 00 00       	call   c001b8ca <IDE::IDE()>
c000fa65:	83 c4 10             	add    esp,0x10
c000fa68:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa77:	50                   	push   eax
c000fa78:	e8 ed cc ff ff       	call   c000c76a <Device::addChild(Device*)>
c000fa7d:	83 c4 10             	add    esp,0x10
c000fa80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa84:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa92:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa9f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000faa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000faac:	8b 00                	mov    eax,DWORD PTR [eax]
c000faae:	83 c0 08             	add    eax,0x8
c000fab1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fab3:	6a 00                	push   0x0
c000fab5:	6a 00                	push   0x0
c000fab7:	6a 00                	push   0x0
c000fab9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fabd:	ff d0                	call   eax
c000fabf:	83 c4 10             	add    esp,0x10
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	90                   	nop
c000fac5:	83 c4 28             	add    esp,0x28
c000fac8:	5b                   	pop    ebx
c000fac9:	c3                   	ret    
c000faca:	66 90                	xchg   ax,ax

c000facc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000facc:	83 ec 1c             	sub    esp,0x1c
c000facf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fad3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fad6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fada:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fadf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fae4:	83 ec 08             	sub    esp,0x8
c000fae7:	52                   	push   edx
c000fae8:	50                   	push   eax
c000fae9:	e8 8a 76 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000faee:	83 c4 10             	add    esp,0x10
c000faf1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000faf5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fafa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000faff:	83 ec 04             	sub    esp,0x4
c000fb02:	6a 01                	push   0x1
c000fb04:	52                   	push   edx
c000fb05:	50                   	push   eax
c000fb06:	e8 87 77 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fb0b:	83 c4 10             	add    esp,0x10
c000fb0e:	90                   	nop
c000fb0f:	83 c4 1c             	add    esp,0x1c
c000fb12:	c3                   	ret    
c000fb13:	90                   	nop

c000fb14 <ACPI::sleep()>:
c000fb14:	83 ec 0c             	sub    esp,0xc
c000fb17:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb1c:	85 c0                	test   eax,eax
c000fb1e:	74 08                	je     c000fb28 <ACPI::sleep()+0x14>
c000fb20:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb25:	ff d0                	call   eax
c000fb27:	90                   	nop
c000fb28:	90                   	nop
c000fb29:	83 c4 0c             	add    esp,0xc
c000fb2c:	c3                   	ret    
c000fb2d:	90                   	nop
c000fb2e:	66 90                	xchg   ax,ax

c000fb30 <ACPI::open(int, int, void*)>:
c000fb30:	57                   	push   edi
c000fb31:	56                   	push   esi
c000fb32:	53                   	push   ebx
c000fb33:	81 ec 70 01 00 00    	sub    esp,0x170
c000fb39:	83 ec 0c             	sub    esp,0xc
c000fb3c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fb43:	e8 64 fd ff ff       	call   c000f8ac <ACPI::detectPCI()>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	83 ec 0c             	sub    esp,0xc
c000fb4e:	68 a4 1a 02 c0       	push   0xc0021aa4
c000fb53:	e8 6b 11 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb60:	8a 00                	mov    al,BYTE PTR [eax]
c000fb62:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fb69:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb71:	83 f8 01             	cmp    eax,0x1
c000fb74:	75 12                	jne    c000fb88 <ACPI::open(int, int, void*)+0x58>
c000fb76:	83 ec 0c             	sub    esp,0xc
c000fb79:	68 f1 13 02 c0       	push   0xc00213f1
c000fb7e:	e8 fd 4b 00 00       	call   c0014780 <Thr::loadKernelSymbolTable(char const*)>
c000fb83:	83 c4 10             	add    esp,0x10
c000fb86:	eb 34                	jmp    c000fbbc <ACPI::open(int, int, void*)+0x8c>
c000fb88:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb90:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb95:	75 15                	jne    c000fbac <ACPI::open(int, int, void*)+0x7c>
c000fb97:	83 ec 0c             	sub    esp,0xc
c000fb9a:	68 34 1b 02 c0       	push   0xc0021b34
c000fb9f:	e8 dc 4b 00 00       	call   c0014780 <Thr::loadKernelSymbolTable(char const*)>
c000fba4:	83 c4 10             	add    esp,0x10
c000fba7:	eb 13                	jmp    c000fbbc <ACPI::open(int, int, void*)+0x8c>
c000fba9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbac:	83 ec 0c             	sub    esp,0xc
c000fbaf:	68 52 1b 02 c0       	push   0xc0021b52
c000fbb4:	e8 e0 17 00 00       	call   c0011399 <KePanic(char const*)>
c000fbb9:	83 c4 10             	add    esp,0x10
c000fbbc:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fbc4:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fbcf:	83 ec 0c             	sub    esp,0xc
c000fbd2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fbd9:	e8 d8 7e ff ff       	call   c0007ab6 <malloc>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	89 c3                	mov    ebx,eax
c000fbe3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbe8:	83 ec 04             	sub    esp,0x4
c000fbeb:	50                   	push   eax
c000fbec:	68 6c 1b 02 c0       	push   0xc0021b6c
c000fbf1:	53                   	push   ebx
c000fbf2:	e8 51 bc ff ff       	call   c000b848 <File::File(char const*, Process*)>
c000fbf7:	83 c4 10             	add    esp,0x10
c000fbfa:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fc01:	83 ec 08             	sub    esp,0x8
c000fc04:	6a 01                	push   0x1
c000fc06:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc0d:	e8 fe bc ff ff       	call   c000b910 <File::open(FileOpenMode)>
c000fc12:	83 c4 10             	add    esp,0x10
c000fc15:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fc1c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fc24:	75 16                	jne    c000fc3c <ACPI::open(int, int, void*)+0x10c>
c000fc26:	83 ec 0c             	sub    esp,0xc
c000fc29:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc30:	e8 39 bd ff ff       	call   c000b96e <File::close()>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	eb 0a                	jmp    c000fc44 <ACPI::open(int, int, void*)+0x114>
c000fc3a:	66 90                	xchg   ax,ax
c000fc3c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fc44:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fc4c:	74 1e                	je     c000fc6c <ACPI::open(int, int, void*)+0x13c>
c000fc4e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fc55:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc57:	83 c0 08             	add    eax,0x8
c000fc5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5c:	83 ec 0c             	sub    esp,0xc
c000fc5f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc66:	ff d0                	call   eax
c000fc68:	83 c4 10             	add    esp,0x10
c000fc6b:	90                   	nop
c000fc6c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fc73:	83 f0 01             	xor    eax,0x1
c000fc76:	0f b6 c0             	movzx  eax,al
c000fc79:	85 c0                	test   eax,eax
c000fc7b:	74 43                	je     c000fcc0 <ACPI::open(int, int, void*)+0x190>
c000fc7d:	83 ec 0c             	sub    esp,0xc
c000fc80:	68 8a 1b 02 c0       	push   0xc0021b8a
c000fc85:	e8 39 10 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c000fc8a:	83 c4 10             	add    esp,0x10
c000fc8d:	83 ec 04             	sub    esp,0x4
c000fc90:	6a 0c                	push   0xc
c000fc92:	68 a5 1b 02 c0       	push   0xc0021ba5
c000fc97:	68 b6 1b 02 c0       	push   0xc0021bb6
c000fc9c:	e8 8f 3d 00 00       	call   c0013a30 <Reg::readIntWithDefault(char*, char*, int)>
c000fca1:	83 c4 10             	add    esp,0x10
c000fca4:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fcab:	83 ec 0c             	sub    esp,0xc
c000fcae:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fcb5:	e8 82 9b ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fcba:	83 c4 10             	add    esp,0x10
c000fcbd:	8d 76 00             	lea    esi,[esi+0x0]
c000fcc0:	83 ec 0c             	sub    esp,0xc
c000fcc3:	68 b5 06 02 c0       	push   0xc00206b5
c000fcc8:	e8 f6 0f 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c000fccd:	83 c4 10             	add    esp,0x10
c000fcd0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fcd7:	83 ec 08             	sub    esp,0x8
c000fcda:	6a 13                	push   0x13
c000fcdc:	50                   	push   eax
c000fcdd:	e8 a0 cd ff ff       	call   c000ca82 <getDevicesOfType(DeviceType)>
c000fce2:	83 c4 0c             	add    esp,0xc
c000fce5:	8d 76 00             	lea    esi,[esi+0x0]
c000fce8:	83 ec 0c             	sub    esp,0xc
c000fceb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcf2:	50                   	push   eax
c000fcf3:	e8 b8 fd 00 00       	call   c001fab0 <LinkedList<Device>::isEmpty()>
c000fcf8:	83 c4 10             	add    esp,0x10
c000fcfb:	83 f0 01             	xor    eax,0x1
c000fcfe:	0f b6 c0             	movzx  eax,al
c000fd01:	85 c0                	test   eax,eax
c000fd03:	0f 84 47 01 00 00    	je     c000fe50 <ACPI::open(int, int, void*)+0x320>
c000fd09:	83 ec 0c             	sub    esp,0xc
c000fd0c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd13:	50                   	push   eax
c000fd14:	e8 b3 fd 00 00       	call   c001facc <LinkedList<Device>::getFirstElement()>
c000fd19:	83 c4 10             	add    esp,0x10
c000fd1c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fd23:	83 ec 0c             	sub    esp,0xc
c000fd26:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd2d:	50                   	push   eax
c000fd2e:	e8 a1 fd 00 00       	call   c001fad4 <LinkedList<Device>::removeFirst()>
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fd3d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fd44:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fd4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd4f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fd55:	ba 09 00 00 00       	mov    edx,0x9
c000fd5a:	fc                   	cld    
c000fd5b:	89 c7                	mov    edi,eax
c000fd5d:	89 de                	mov    esi,ebx
c000fd5f:	89 d1                	mov    ecx,edx
c000fd61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd63:	83 ec 08             	sub    esp,0x8
c000fd66:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fd6a:	50                   	push   eax
c000fd6b:	83 ec 24             	sub    esp,0x24
c000fd6e:	89 e0                	mov    eax,esp
c000fd70:	89 c3                	mov    ebx,eax
c000fd72:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fd76:	ba 09 00 00 00       	mov    edx,0x9
c000fd7b:	89 df                	mov    edi,ebx
c000fd7d:	89 c6                	mov    esi,eax
c000fd7f:	89 d1                	mov    ecx,edx
c000fd81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd83:	e8 92 b4 00 00       	call   c001b21a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd88:	83 c4 30             	add    esp,0x30
c000fd8b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fd92:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fd9a:	0f 84 48 ff ff ff    	je     c000fce8 <ACPI::open(int, int, void*)+0x1b8>
c000fda0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fdab:	83 ec 0c             	sub    esp,0xc
c000fdae:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fdb5:	e8 fc 7c ff ff       	call   c0007ab6 <malloc>
c000fdba:	83 c4 10             	add    esp,0x10
c000fdbd:	89 c3                	mov    ebx,eax
c000fdbf:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fdc4:	83 ec 04             	sub    esp,0x4
c000fdc7:	50                   	push   eax
c000fdc8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdcf:	53                   	push   ebx
c000fdd0:	e8 73 ba ff ff       	call   c000b848 <File::File(char const*, Process*)>
c000fdd5:	83 c4 10             	add    esp,0x10
c000fdd8:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fddf:	83 ec 0c             	sub    esp,0xc
c000fde2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fde9:	e8 e6 bd ff ff       	call   c000bbd4 <File::exists()>
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	0f b6 c0             	movzx  eax,al
c000fdf4:	85 c0                	test   eax,eax
c000fdf6:	74 28                	je     c000fe20 <ACPI::open(int, int, void*)+0x2f0>
c000fdf8:	83 ec 08             	sub    esp,0x8
c000fdfb:	6a 01                	push   0x1
c000fdfd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fe04:	e8 f1 53 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c000fe09:	83 c4 10             	add    esp,0x10
c000fe0c:	83 ec 08             	sub    esp,0x8
c000fe0f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fe16:	50                   	push   eax
c000fe17:	e8 0f 56 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c000fe1c:	83 c4 10             	add    esp,0x10
c000fe1f:	90                   	nop
c000fe20:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fe28:	0f 84 ba fe ff ff    	je     c000fce8 <ACPI::open(int, int, void*)+0x1b8>
c000fe2e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fe35:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe37:	83 c0 08             	add    eax,0x8
c000fe3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3c:	83 ec 0c             	sub    esp,0xc
c000fe3f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe46:	ff d0                	call   eax
c000fe48:	83 c4 10             	add    esp,0x10
c000fe4b:	e9 98 fe ff ff       	jmp    c000fce8 <ACPI::open(int, int, void*)+0x1b8>
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fe5a:	50                   	push   eax
c000fe5b:	e8 4c fc 00 00       	call   c001faac <LinkedList<Device>::~LinkedList()>
c000fe60:	83 c4 10             	add    esp,0x10
c000fe63:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fe69:	83 ec 08             	sub    esp,0x8
c000fe6c:	6a 01                	push   0x1
c000fe6e:	68 bd 1b 02 c0       	push   0xc0021bbd
c000fe73:	e8 82 53 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	83 ec 08             	sub    esp,0x8
c000fe7e:	53                   	push   ebx
c000fe7f:	50                   	push   eax
c000fe80:	e8 a6 55 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c000fe85:	83 c4 10             	add    esp,0x10
c000fe88:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe8d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe93:	83 e0 04             	and    eax,0x4
c000fe96:	0f b6 c0             	movzx  eax,al
c000fe99:	85 c0                	test   eax,eax
c000fe9b:	0f 84 1b 01 00 00    	je     c000ffbc <ACPI::open(int, int, void*)+0x48c>
c000fea1:	83 ec 0c             	sub    esp,0xc
c000fea4:	68 da 1b 02 c0       	push   0xc0021bda
c000fea9:	e8 15 0e 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fec6:	e8 eb 7b ff ff       	call   c0007ab6 <malloc>
c000fecb:	83 c4 10             	add    esp,0x10
c000fece:	89 c3                	mov    ebx,eax
c000fed0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fed5:	83 ec 04             	sub    esp,0x4
c000fed8:	50                   	push   eax
c000fed9:	68 f7 1b 02 c0       	push   0xc0021bf7
c000fede:	53                   	push   ebx
c000fedf:	e8 64 b9 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c000fee4:	83 c4 10             	add    esp,0x10
c000fee7:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000feee:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fef6:	74 20                	je     c000ff18 <ACPI::open(int, int, void*)+0x3e8>
c000fef8:	83 ec 0c             	sub    esp,0xc
c000fefb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff02:	e8 cd bc ff ff       	call   c000bbd4 <File::exists()>
c000ff07:	83 c4 10             	add    esp,0x10
c000ff0a:	0f b6 c0             	movzx  eax,al
c000ff0d:	85 c0                	test   eax,eax
c000ff0f:	74 07                	je     c000ff18 <ACPI::open(int, int, void*)+0x3e8>
c000ff11:	b0 01                	mov    al,0x1
c000ff13:	eb 07                	jmp    c000ff1c <ACPI::open(int, int, void*)+0x3ec>
c000ff15:	8d 76 00             	lea    esi,[esi+0x0]
c000ff18:	b0 00                	mov    al,0x0
c000ff1a:	66 90                	xchg   ax,ax
c000ff1c:	0f b6 c0             	movzx  eax,al
c000ff1f:	85 c0                	test   eax,eax
c000ff21:	74 25                	je     c000ff48 <ACPI::open(int, int, void*)+0x418>
c000ff23:	83 ec 08             	sub    esp,0x8
c000ff26:	6a 01                	push   0x1
c000ff28:	68 f7 1b 02 c0       	push   0xc0021bf7
c000ff2d:	e8 c8 52 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c000ff32:	83 c4 10             	add    esp,0x10
c000ff35:	83 ec 08             	sub    esp,0x8
c000ff38:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ff3f:	50                   	push   eax
c000ff40:	e8 e6 54 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff50:	74 2a                	je     c000ff7c <ACPI::open(int, int, void*)+0x44c>
c000ff52:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff5a:	74 20                	je     c000ff7c <ACPI::open(int, int, void*)+0x44c>
c000ff5c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ff63:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff65:	83 c0 08             	add    eax,0x8
c000ff68:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff74:	ff d0                	call   eax
c000ff76:	83 c4 10             	add    esp,0x10
c000ff79:	8d 76 00             	lea    esi,[esi+0x0]
c000ff7c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000ff81:	83 ec 08             	sub    esp,0x8
c000ff84:	68 14 1c 02 c0       	push   0xc0021c14
c000ff89:	50                   	push   eax
c000ff8a:	e8 c1 f1 ff ff       	call   c000f150 <findDataTable(unsigned char*, char*)>
c000ff8f:	83 c4 10             	add    esp,0x10
c000ff92:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ff99:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ffa1:	74 19                	je     c000ffbc <ACPI::open(int, int, void*)+0x48c>
c000ffa3:	83 ec 08             	sub    esp,0x8
c000ffa6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ffad:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ffb4:	e8 13 fb ff ff       	call   c000facc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ffb9:	83 c4 10             	add    esp,0x10
c000ffbc:	b8 00 00 00 00       	mov    eax,0x0
c000ffc1:	81 c4 70 01 00 00    	add    esp,0x170
c000ffc7:	5b                   	pop    ebx
c000ffc8:	5e                   	pop    esi
c000ffc9:	5f                   	pop    edi
c000ffca:	c3                   	ret    
c000ffcb:	90                   	nop

c000ffcc <CPU::close(int, int, void*)>:
c000ffcc:	31 c0                	xor    eax,eax
c000ffce:	c3                   	ret    
c000ffcf:	90                   	nop

c000ffd0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ffd0:	60                   	pusha  
c000ffd1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffdd:	9c                   	pushf  
c000ffde:	fa                   	cli    
c000ffdf:	0f 09                	wbinvd 
c000ffe1:	0f 30                	wrmsr  
c000ffe3:	9d                   	popf   
c000ffe4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffe8:	89 02                	mov    DWORD PTR [edx],eax
c000ffea:	61                   	popa   
c000ffeb:	c3                   	ret    

c000ffec <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ffec:	60                   	pusha  
c000ffed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fff1:	9c                   	pushf  
c000fff2:	fa                   	cli    
c000fff3:	0f 09                	wbinvd 
c000fff5:	31 c0                	xor    eax,eax
c000fff7:	31 d2                	xor    edx,edx
c000fff9:	0f 32                	rdmsr  
c000fffb:	9d                   	popf   
c000fffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010000:	89 02                	mov    DWORD PTR [edx],eax
c0010002:	61                   	popa   
c0010003:	c3                   	ret    

c0010004 <CPU::AMD_K6_writeback(int, int, int)>:
c0010004:	56                   	push   esi
c0010005:	53                   	push   ebx
c0010006:	83 ec 10             	sub    esp,0x10
c0010009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001000d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010012:	75 5d                	jne    c0010071 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010014:	83 f8 08             	cmp    eax,0x8
c0010017:	75 09                	jne    c0010022 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010019:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001001e:	7e 13                	jle    c0010033 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010020:	eb 30                	jmp    c0010052 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010022:	83 f8 06             	cmp    eax,0x6
c0010025:	7c 4a                	jl     c0010071 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010027:	83 f8 07             	cmp    eax,0x7
c001002a:	7e 07                	jle    c0010033 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001002c:	83 f8 09             	cmp    eax,0x9
c001002f:	74 21                	je     c0010052 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010031:	eb 3e                	jmp    c0010071 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010033:	89 e6                	mov    esi,esp
c0010035:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c001003b:	56                   	push   esi
c001003c:	c1 eb 15             	shr    ebx,0x15
c001003f:	68 82 00 00 c0       	push   0xc0000082
c0010044:	83 e3 7e             	and    ebx,0x7e
c0010047:	e8 a0 ff ff ff       	call   c000ffec <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001004c:	56                   	push   esi
c001004d:	6a 00                	push   0x0
c001004f:	53                   	push   ebx
c0010050:	eb 12                	jmp    c0010064 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010052:	89 e3                	mov    ebx,esp
c0010054:	53                   	push   ebx
c0010055:	68 82 00 00 c0       	push   0xc0000082
c001005a:	e8 8d ff ff ff       	call   c000ffec <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001005f:	53                   	push   ebx
c0010060:	6a 00                	push   0x0
c0010062:	6a 00                	push   0x0
c0010064:	68 82 00 00 c0       	push   0xc0000082
c0010069:	e8 62 ff ff ff       	call   c000ffd0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001006e:	83 c4 18             	add    esp,0x18
c0010071:	83 c4 10             	add    esp,0x10
c0010074:	5b                   	pop    ebx
c0010075:	5e                   	pop    esi
c0010076:	c3                   	ret    
c0010077:	90                   	nop

c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010078:	55                   	push   ebp
c0010079:	57                   	push   edi
c001007a:	56                   	push   esi
c001007b:	53                   	push   ebx
c001007c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010080:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010084:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010088:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001008c:	39 05 d8 31 02 c0    	cmp    DWORD PTR ds:0xc00231d8,eax
c0010092:	75 23                	jne    c00100b7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010094:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c0010099:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001009d:	89 06                	mov    DWORD PTR [esi],eax
c001009f:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c00100a4:	89 07                	mov    DWORD PTR [edi],eax
c00100a6:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c00100ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00100ae:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c00100b3:	89 02                	mov    DWORD PTR [edx],eax
c00100b5:	eb 3f                	jmp    c00100f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00100b7:	31 c9                	xor    ecx,ecx
c00100b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100bd:	0f a2                	cpuid  
c00100bf:	89 06                	mov    DWORD PTR [esi],eax
c00100c1:	89 1f                	mov    DWORD PTR [edi],ebx
c00100c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100c7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00100ca:	89 10                	mov    DWORD PTR [eax],edx
c00100cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d0:	a3 d8 31 02 c0       	mov    ds:0xc00231d8,eax
c00100d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00100d7:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c00100dc:	8b 07                	mov    eax,DWORD PTR [edi]
c00100de:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c00100e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00100e6:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c00100eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f1:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c00100f6:	5b                   	pop    ebx
c00100f7:	5e                   	pop    esi
c00100f8:	5f                   	pop    edi
c00100f9:	5d                   	pop    ebp
c00100fa:	c3                   	ret    
c00100fb:	90                   	nop

c00100fc <CPU::cpuidCheckEDX(unsigned int)>:
c00100fc:	83 ec 10             	sub    esp,0x10
c00100ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010103:	50                   	push   eax
c0010104:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010108:	50                   	push   eax
c0010109:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001010d:	50                   	push   eax
c001010e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010112:	50                   	push   eax
c0010113:	6a 01                	push   0x1
c0010115:	e8 5e ff ff ff       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001011a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001011e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010122:	0f 95 c0             	setne  al
c0010125:	83 c4 24             	add    esp,0x24
c0010128:	c3                   	ret    
c0010129:	90                   	nop

c001012a <CPU::cpuidCheckECX(unsigned int)>:
c001012a:	83 ec 10             	sub    esp,0x10
c001012d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010131:	50                   	push   eax
c0010132:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010136:	50                   	push   eax
c0010137:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001013b:	50                   	push   eax
c001013c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010140:	50                   	push   eax
c0010141:	6a 01                	push   0x1
c0010143:	e8 30 ff ff ff       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010148:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001014c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010150:	0f 95 c0             	setne  al
c0010153:	83 c4 24             	add    esp,0x24
c0010156:	c3                   	ret    
c0010157:	90                   	nop

c0010158 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010158:	83 ec 10             	sub    esp,0x10
c001015b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001015f:	50                   	push   eax
c0010160:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010164:	50                   	push   eax
c0010165:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010169:	50                   	push   eax
c001016a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001016e:	50                   	push   eax
c001016f:	6a 07                	push   0x7
c0010171:	e8 02 ff ff ff       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010176:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001017a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001017e:	0f 95 c0             	setne  al
c0010181:	83 c4 24             	add    esp,0x24
c0010184:	c3                   	ret    
c0010185:	90                   	nop

c0010186 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010186:	83 ec 10             	sub    esp,0x10
c0010189:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001018d:	50                   	push   eax
c001018e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010192:	50                   	push   eax
c0010193:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010197:	50                   	push   eax
c0010198:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001019c:	50                   	push   eax
c001019d:	6a 07                	push   0x7
c001019f:	e8 d4 fe ff ff       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101a8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00101ac:	0f 95 c0             	setne  al
c00101af:	83 c4 24             	add    esp,0x24
c00101b2:	c3                   	ret    
c00101b3:	90                   	nop

c00101b4 <CPU::CPU()>:
c00101b4:	83 ec 0c             	sub    esp,0xc
c00101b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101bb:	83 ec 08             	sub    esp,0x8
c00101be:	68 39 1d 02 c0       	push   0xc0021d39
c00101c3:	50                   	push   eax
c00101c4:	e8 39 c7 ff ff       	call   c000c902 <Device::Device(char const*)>
c00101c9:	83 c4 10             	add    esp,0x10
c00101cc:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c00101d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101d5:	89 10                	mov    DWORD PTR [eax],edx
c00101d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101db:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00101e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e9:	05 78 01 00 00       	add    eax,0x178
c00101ee:	83 ec 0c             	sub    esp,0xc
c00101f1:	50                   	push   eax
c00101f2:	e8 65 71 ff ff       	call   c000735c <GDT::GDT()>
c00101f7:	83 c4 10             	add    esp,0x10
c00101fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101fe:	05 7c 09 00 00       	add    eax,0x97c
c0010203:	83 ec 0c             	sub    esp,0xc
c0010206:	50                   	push   eax
c0010207:	e8 a0 73 ff ff       	call   c00075ac <IDT::IDT()>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010213:	05 7c 11 00 00       	add    eax,0x117c
c0010218:	83 ec 0c             	sub    esp,0xc
c001021b:	50                   	push   eax
c001021c:	e8 23 8d ff ff       	call   c0008f44 <TSS::TSS()>
c0010221:	83 c4 10             	add    esp,0x10
c0010224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010228:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001022f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010233:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001023d:	90                   	nop
c001023e:	83 c4 0c             	add    esp,0xc
c0010241:	c3                   	ret    

c0010242 <CPU::displayFeatures()>:
c0010242:	c3                   	ret    
c0010243:	90                   	nop

c0010244 <CPU::detectFeatures()>:
c0010244:	55                   	push   ebp
c0010245:	57                   	push   edi
c0010246:	56                   	push   esi
c0010247:	53                   	push   ebx
c0010248:	83 ec 30             	sub    esp,0x30
c001024b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001024f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010259:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010260:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010266:	6a 0d                	push   0xd
c0010268:	6a 00                	push   0x0
c001026a:	55                   	push   ebp
c001026b:	e8 80 02 ff ff       	call   c00004f0 <memset>
c0010270:	83 c4 10             	add    esp,0x10
c0010273:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010278:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001027f:	0f 84 db 05 00 00    	je     c0010860 <CPU::detectFeatures()+0x61c>
c0010285:	83 ec 0c             	sub    esp,0xc
c0010288:	89 ef                	mov    edi,ebp
c001028a:	6a 10                	push   0x10
c001028c:	e8 6b fe ff ff       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c0010291:	83 e0 01             	and    eax,0x1
c0010294:	8d 14 00             	lea    edx,[eax+eax*1]
c0010297:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001029d:	83 e0 fd             	and    eax,0xfffffffd
c00102a0:	09 d0                	or     eax,edx
c00102a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102a8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00102af:	e8 48 fe ff ff       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c00102b4:	83 e0 01             	and    eax,0x1
c00102b7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00102be:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102c4:	83 e0 fb             	and    eax,0xfffffffb
c00102c7:	09 d0                	or     eax,edx
c00102c9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102cf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00102d6:	e8 21 fe ff ff       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c00102db:	83 e0 01             	and    eax,0x1
c00102de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00102e5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102eb:	83 e0 f7             	and    eax,0xfffffff7
c00102ee:	09 d0                	or     eax,edx
c00102f0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102f6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00102fd:	e8 fa fd ff ff       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c0010302:	83 e0 01             	and    eax,0x1
c0010305:	c1 e0 04             	shl    eax,0x4
c0010308:	89 c2                	mov    edx,eax
c001030a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010310:	83 e0 ef             	and    eax,0xffffffef
c0010313:	09 d0                	or     eax,edx
c0010315:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001031b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010322:	e8 d5 fd ff ff       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c0010327:	83 e0 01             	and    eax,0x1
c001032a:	c1 e0 05             	shl    eax,0x5
c001032d:	89 c2                	mov    edx,eax
c001032f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010335:	83 e0 df             	and    eax,0xffffffdf
c0010338:	09 d0                	or     eax,edx
c001033a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010340:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010347:	e8 b0 fd ff ff       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c001034c:	83 e0 01             	and    eax,0x1
c001034f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010352:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010358:	83 e0 fd             	and    eax,0xfffffffd
c001035b:	09 d0                	or     eax,edx
c001035d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010363:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001036a:	e8 8d fd ff ff       	call   c00100fc <CPU::cpuidCheckEDX(unsigned int)>
c001036f:	83 e0 01             	and    eax,0x1
c0010372:	c1 e0 06             	shl    eax,0x6
c0010375:	89 c2                	mov    edx,eax
c0010377:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001037d:	83 e0 bf             	and    eax,0xffffffbf
c0010380:	09 d0                	or     eax,edx
c0010382:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010388:	58                   	pop    eax
c0010389:	8d 44 24 28          	lea    eax,[esp+0x28]
c001038d:	50                   	push   eax
c001038e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010392:	50                   	push   eax
c0010393:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010397:	56                   	push   esi
c0010398:	8d 44 24 28          	lea    eax,[esp+0x28]
c001039c:	50                   	push   eax
c001039d:	6a 00                	push   0x0
c001039f:	e8 d4 fc ff ff       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103a4:	b8 04 00 00 00       	mov    eax,0x4
c00103a9:	89 c1                	mov    ecx,eax
c00103ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103ad:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00103b3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00103b7:	89 c1                	mov    ecx,eax
c00103b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103bb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00103c1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00103c5:	89 c1                	mov    ecx,eax
c00103c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c9:	83 c4 18             	add    esp,0x18
c00103cc:	68 48 1c 02 c0       	push   0xc0021c48
c00103d1:	55                   	push   ebp
c00103d2:	e8 79 03 ff ff       	call   c0000750 <strcmp>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	85 c0                	test   eax,eax
c00103dc:	75 0f                	jne    c00103ed <CPU::detectFeatures()+0x1a9>
c00103de:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00103e8:	e9 22 02 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c00103ed:	50                   	push   eax
c00103ee:	50                   	push   eax
c00103ef:	68 55 1c 02 c0       	push   0xc0021c55
c00103f4:	55                   	push   ebp
c00103f5:	e8 56 03 ff ff       	call   c0000750 <strcmp>
c00103fa:	83 c4 10             	add    esp,0x10
c00103fd:	85 c0                	test   eax,eax
c00103ff:	74 dd                	je     c00103de <CPU::detectFeatures()+0x19a>
c0010401:	50                   	push   eax
c0010402:	50                   	push   eax
c0010403:	68 62 1c 02 c0       	push   0xc0021c62
c0010408:	55                   	push   ebp
c0010409:	e8 42 03 ff ff       	call   c0000750 <strcmp>
c001040e:	83 c4 10             	add    esp,0x10
c0010411:	85 c0                	test   eax,eax
c0010413:	74 2a                	je     c001043f <CPU::detectFeatures()+0x1fb>
c0010415:	50                   	push   eax
c0010416:	50                   	push   eax
c0010417:	68 6f 1c 02 c0       	push   0xc0021c6f
c001041c:	55                   	push   ebp
c001041d:	e8 2e 03 ff ff       	call   c0000750 <strcmp>
c0010422:	83 c4 10             	add    esp,0x10
c0010425:	85 c0                	test   eax,eax
c0010427:	74 16                	je     c001043f <CPU::detectFeatures()+0x1fb>
c0010429:	50                   	push   eax
c001042a:	50                   	push   eax
c001042b:	68 7c 1c 02 c0       	push   0xc0021c7c
c0010430:	55                   	push   ebp
c0010431:	e8 1a 03 ff ff       	call   c0000750 <strcmp>
c0010436:	83 c4 10             	add    esp,0x10
c0010439:	85 c0                	test   eax,eax
c001043b:	74 48                	je     c0010485 <CPU::detectFeatures()+0x241>
c001043d:	eb 0f                	jmp    c001044e <CPU::detectFeatures()+0x20a>
c001043f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010449:	e9 c1 01 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c001044e:	50                   	push   eax
c001044f:	50                   	push   eax
c0010450:	68 89 1c 02 c0       	push   0xc0021c89
c0010455:	55                   	push   ebp
c0010456:	e8 f5 02 ff ff       	call   c0000750 <strcmp>
c001045b:	83 c4 10             	add    esp,0x10
c001045e:	85 c0                	test   eax,eax
c0010460:	74 23                	je     c0010485 <CPU::detectFeatures()+0x241>
c0010462:	57                   	push   edi
c0010463:	57                   	push   edi
c0010464:	68 96 1c 02 c0       	push   0xc0021c96
c0010469:	55                   	push   ebp
c001046a:	e8 e1 02 ff ff       	call   c0000750 <strcmp>
c001046f:	83 c4 10             	add    esp,0x10
c0010472:	85 c0                	test   eax,eax
c0010474:	75 1e                	jne    c0010494 <CPU::detectFeatures()+0x250>
c0010476:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010480:	e9 8a 01 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c0010485:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001048f:	e9 7b 01 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c0010494:	56                   	push   esi
c0010495:	56                   	push   esi
c0010496:	68 a3 1c 02 c0       	push   0xc0021ca3
c001049b:	55                   	push   ebp
c001049c:	e8 af 02 ff ff       	call   c0000750 <strcmp>
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	85 c0                	test   eax,eax
c00104a6:	75 0f                	jne    c00104b7 <CPU::detectFeatures()+0x273>
c00104a8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00104b2:	e9 58 01 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c00104b7:	51                   	push   ecx
c00104b8:	51                   	push   ecx
c00104b9:	68 62 1c 02 c0       	push   0xc0021c62
c00104be:	55                   	push   ebp
c00104bf:	e8 8c 02 ff ff       	call   c0000750 <strcmp>
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	85 c0                	test   eax,eax
c00104c9:	75 0f                	jne    c00104da <CPU::detectFeatures()+0x296>
c00104cb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00104d5:	e9 35 01 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c00104da:	52                   	push   edx
c00104db:	52                   	push   edx
c00104dc:	68 b0 1c 02 c0       	push   0xc0021cb0
c00104e1:	55                   	push   ebp
c00104e2:	e8 69 02 ff ff       	call   c0000750 <strcmp>
c00104e7:	83 c4 10             	add    esp,0x10
c00104ea:	85 c0                	test   eax,eax
c00104ec:	75 0f                	jne    c00104fd <CPU::detectFeatures()+0x2b9>
c00104ee:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00104f8:	e9 12 01 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c00104fd:	50                   	push   eax
c00104fe:	50                   	push   eax
c00104ff:	68 bd 1c 02 c0       	push   0xc0021cbd
c0010504:	55                   	push   ebp
c0010505:	e8 46 02 ff ff       	call   c0000750 <strcmp>
c001050a:	83 c4 10             	add    esp,0x10
c001050d:	85 c0                	test   eax,eax
c001050f:	75 0f                	jne    c0010520 <CPU::detectFeatures()+0x2dc>
c0010511:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001051b:	e9 ef 00 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c0010520:	50                   	push   eax
c0010521:	50                   	push   eax
c0010522:	68 ca 1c 02 c0       	push   0xc0021cca
c0010527:	55                   	push   ebp
c0010528:	e8 23 02 ff ff       	call   c0000750 <strcmp>
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	85 c0                	test   eax,eax
c0010532:	75 0f                	jne    c0010543 <CPU::detectFeatures()+0x2ff>
c0010534:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001053e:	e9 cc 00 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c0010543:	50                   	push   eax
c0010544:	50                   	push   eax
c0010545:	68 d7 1c 02 c0       	push   0xc0021cd7
c001054a:	55                   	push   ebp
c001054b:	e8 00 02 ff ff       	call   c0000750 <strcmp>
c0010550:	83 c4 10             	add    esp,0x10
c0010553:	85 c0                	test   eax,eax
c0010555:	75 0f                	jne    c0010566 <CPU::detectFeatures()+0x322>
c0010557:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010561:	e9 a9 00 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c0010566:	50                   	push   eax
c0010567:	50                   	push   eax
c0010568:	68 e4 1c 02 c0       	push   0xc0021ce4
c001056d:	55                   	push   ebp
c001056e:	e8 dd 01 ff ff       	call   c0000750 <strcmp>
c0010573:	83 c4 10             	add    esp,0x10
c0010576:	85 c0                	test   eax,eax
c0010578:	75 0f                	jne    c0010589 <CPU::detectFeatures()+0x345>
c001057a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010584:	e9 86 00 00 00       	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c0010589:	50                   	push   eax
c001058a:	50                   	push   eax
c001058b:	68 f1 1c 02 c0       	push   0xc0021cf1
c0010590:	55                   	push   ebp
c0010591:	e8 ba 01 ff ff       	call   c0000750 <strcmp>
c0010596:	83 c4 10             	add    esp,0x10
c0010599:	85 c0                	test   eax,eax
c001059b:	75 0c                	jne    c00105a9 <CPU::detectFeatures()+0x365>
c001059d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00105a7:	eb 66                	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c00105a9:	50                   	push   eax
c00105aa:	50                   	push   eax
c00105ab:	68 fe 1c 02 c0       	push   0xc0021cfe
c00105b0:	55                   	push   ebp
c00105b1:	e8 9a 01 ff ff       	call   c0000750 <strcmp>
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	85 c0                	test   eax,eax
c00105bb:	75 0c                	jne    c00105c9 <CPU::detectFeatures()+0x385>
c00105bd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00105c7:	eb 46                	jmp    c001060f <CPU::detectFeatures()+0x3cb>
c00105c9:	57                   	push   edi
c00105ca:	57                   	push   edi
c00105cb:	68 0b 1d 02 c0       	push   0xc0021d0b
c00105d0:	55                   	push   ebp
c00105d1:	e8 7a 01 ff ff       	call   c0000750 <strcmp>
c00105d6:	83 c4 10             	add    esp,0x10
c00105d9:	85 c0                	test   eax,eax
c00105db:	74 e0                	je     c00105bd <CPU::detectFeatures()+0x379>
c00105dd:	56                   	push   esi
c00105de:	56                   	push   esi
c00105df:	68 18 1d 02 c0       	push   0xc0021d18
c00105e4:	55                   	push   ebp
c00105e5:	e8 66 01 ff ff       	call   c0000750 <strcmp>
c00105ea:	83 c4 10             	add    esp,0x10
c00105ed:	85 c0                	test   eax,eax
c00105ef:	74 cc                	je     c00105bd <CPU::detectFeatures()+0x379>
c00105f1:	51                   	push   ecx
c00105f2:	51                   	push   ecx
c00105f3:	68 25 1d 02 c0       	push   0xc0021d25
c00105f8:	55                   	push   ebp
c00105f9:	e8 52 01 ff ff       	call   c0000750 <strcmp>
c00105fe:	83 c4 10             	add    esp,0x10
c0010601:	85 c0                	test   eax,eax
c0010603:	74 b8                	je     c00105bd <CPU::detectFeatures()+0x379>
c0010605:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001060f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010614:	0f 86 be 00 00 00    	jbe    c00106d8 <CPU::detectFeatures()+0x494>
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	68 80 00 00 00       	push   0x80
c0010622:	e8 31 fb ff ff       	call   c0010158 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010627:	83 e0 01             	and    eax,0x1
c001062a:	c1 e0 06             	shl    eax,0x6
c001062d:	89 c2                	mov    edx,eax
c001062f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010635:	83 e0 bf             	and    eax,0xffffffbf
c0010638:	09 d0                	or     eax,edx
c001063a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010640:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010647:	e8 0c fb ff ff       	call   c0010158 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001064c:	83 e0 01             	and    eax,0x1
c001064f:	c1 e0 04             	shl    eax,0x4
c0010652:	89 c2                	mov    edx,eax
c0010654:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001065a:	83 e0 ef             	and    eax,0xffffffef
c001065d:	09 d0                	or     eax,edx
c001065f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010665:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001066c:	e8 e7 fa ff ff       	call   c0010158 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010671:	89 c2                	mov    edx,eax
c0010673:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010679:	c1 e2 07             	shl    edx,0x7
c001067c:	83 e0 7f             	and    eax,0x7f
c001067f:	09 d0                	or     eax,edx
c0010681:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010687:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001068e:	e8 f3 fa ff ff       	call   c0010186 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010693:	83 e0 01             	and    eax,0x1
c0010696:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001069d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106a3:	83 e0 f7             	and    eax,0xfffffff7
c00106a6:	09 d0                	or     eax,edx
c00106a8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106ae:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00106b5:	e8 cc fa ff ff       	call   c0010186 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00106ba:	83 c4 10             	add    esp,0x10
c00106bd:	83 e0 01             	and    eax,0x1
c00106c0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00106c7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106cd:	83 e0 fb             	and    eax,0xfffffffb
c00106d0:	09 d0                	or     eax,edx
c00106d2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106d8:	83 ec 0c             	sub    esp,0xc
c00106db:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106df:	50                   	push   eax
c00106e0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106e4:	50                   	push   eax
c00106e5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00106e9:	57                   	push   edi
c00106ea:	8d 74 24 28          	lea    esi,[esp+0x28]
c00106ee:	56                   	push   esi
c00106ef:	6a 01                	push   0x1
c00106f1:	e8 82 f9 ff ff       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106fa:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010700:	89 c1                	mov    ecx,eax
c0010702:	83 e2 f0             	and    edx,0xfffffff0
c0010705:	83 e1 0f             	and    ecx,0xf
c0010708:	09 ca                	or     edx,ecx
c001070a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010710:	89 c2                	mov    edx,eax
c0010712:	c1 ea 04             	shr    edx,0x4
c0010715:	83 e2 0f             	and    edx,0xf
c0010718:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001071c:	89 d1                	mov    ecx,edx
c001071e:	83 c4 20             	add    esp,0x20
c0010721:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010727:	c1 e1 06             	shl    ecx,0x6
c001072a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010730:	09 ca                	or     edx,ecx
c0010732:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010739:	89 c2                	mov    edx,eax
c001073b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010741:	c1 ea 08             	shr    edx,0x8
c0010744:	83 e1 3f             	and    ecx,0x3f
c0010747:	83 e2 0f             	and    edx,0xf
c001074a:	89 d5                	mov    ebp,edx
c001074c:	83 e5 03             	and    ebp,0x3
c001074f:	c1 e5 06             	shl    ebp,0x6
c0010752:	09 e9                	or     ecx,ebp
c0010754:	89 d5                	mov    ebp,edx
c0010756:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001075c:	c1 ed 02             	shr    ebp,0x2
c001075f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010765:	83 e1 c0             	and    ecx,0xffffffc0
c0010768:	09 e9                	or     ecx,ebp
c001076a:	89 c5                	mov    ebp,eax
c001076c:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010772:	c1 ed 08             	shr    ebp,0x8
c0010775:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001077b:	83 e5 30             	and    ebp,0x30
c001077e:	83 e1 cf             	and    ecx,0xffffffcf
c0010781:	09 e9                	or     ecx,ebp
c0010783:	83 fa 06             	cmp    edx,0x6
c0010786:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001078c:	74 05                	je     c0010793 <CPU::detectFeatures()+0x54f>
c001078e:	83 fa 0f             	cmp    edx,0xf
c0010791:	75 64                	jne    c00107f7 <CPU::detectFeatures()+0x5b3>
c0010793:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010799:	89 c1                	mov    ecx,eax
c001079b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00107a1:	c1 e9 10             	shr    ecx,0x10
c00107a4:	c1 e1 04             	shl    ecx,0x4
c00107a7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00107ab:	0f b6 c9             	movzx  ecx,cl
c00107ae:	c1 e1 06             	shl    ecx,0x6
c00107b1:	09 e9                	or     ecx,ebp
c00107b3:	83 fa 0f             	cmp    edx,0xf
c00107b6:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00107bd:	75 38                	jne    c00107f7 <CPU::detectFeatures()+0x5b3>
c00107bf:	c1 e8 14             	shr    eax,0x14
c00107c2:	83 c0 0f             	add    eax,0xf
c00107c5:	0f b6 c0             	movzx  eax,al
c00107c8:	89 c2                	mov    edx,eax
c00107ca:	c1 e8 02             	shr    eax,0x2
c00107cd:	83 e2 03             	and    edx,0x3
c00107d0:	89 d1                	mov    ecx,edx
c00107d2:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00107d8:	c1 e1 06             	shl    ecx,0x6
c00107db:	83 e2 3f             	and    edx,0x3f
c00107de:	09 ca                	or     edx,ecx
c00107e0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00107e6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00107ec:	83 e2 c0             	and    edx,0xffffffc0
c00107ef:	09 d0                	or     eax,edx
c00107f1:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00107f7:	83 ec 0c             	sub    esp,0xc
c00107fa:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010800:	83 c8 07             	or     eax,0x7
c0010803:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010809:	8d 44 24 28          	lea    eax,[esp+0x28]
c001080d:	50                   	push   eax
c001080e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010812:	55                   	push   ebp
c0010813:	57                   	push   edi
c0010814:	56                   	push   esi
c0010815:	68 00 00 00 80       	push   0x80000000
c001081a:	e8 59 f8 ff ff       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001081f:	83 c4 20             	add    esp,0x20
c0010822:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001082a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001082e:	76 1e                	jbe    c001084e <CPU::detectFeatures()+0x60a>
c0010830:	83 ec 0c             	sub    esp,0xc
c0010833:	50                   	push   eax
c0010834:	55                   	push   ebp
c0010835:	57                   	push   edi
c0010836:	56                   	push   esi
c0010837:	68 01 00 00 80       	push   0x80000001
c001083c:	e8 37 f8 ff ff       	call   c0010078 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010841:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001084b:	83 c4 20             	add    esp,0x20
c001084e:	52                   	push   edx
c001084f:	52                   	push   edx
c0010850:	68 31 1d 02 c0       	push   0xc0021d31
c0010855:	53                   	push   ebx
c0010856:	e8 99 c0 ff ff       	call   c000c8f4 <Device::setName(char const*)>
c001085b:	83 c4 10             	add    esp,0x10
c001085e:	eb 69                	jmp    c00108c9 <CPU::detectFeatures()+0x685>
c0010860:	50                   	push   eax
c0010861:	50                   	push   eax
c0010862:	68 96 1c 02 c0       	push   0xc0021c96
c0010867:	55                   	push   ebp
c0010868:	e8 d3 fd fe ff       	call   c0000640 <strcpy>
c001086d:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010877:	e8 47 f9 fe ff       	call   c00001c3 <is486>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	85 c0                	test   eax,eax
c0010881:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010887:	74 1f                	je     c00108a8 <CPU::detectFeatures()+0x664>
c0010889:	83 c8 07             	or     eax,0x7
c001088c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010892:	0f 20 c0             	mov    eax,cr0
c0010895:	83 e0 14             	and    eax,0x14
c0010898:	83 f8 04             	cmp    eax,0x4
c001089b:	75 10                	jne    c00108ad <CPU::detectFeatures()+0x669>
c001089d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108a3:	83 e0 fd             	and    eax,0xfffffffd
c00108a6:	eb 1b                	jmp    c00108c3 <CPU::detectFeatures()+0x67f>
c00108a8:	83 e0 f8             	and    eax,0xfffffff8
c00108ab:	eb df                	jmp    c001088c <CPU::detectFeatures()+0x648>
c00108ad:	e8 ec f8 fe ff       	call   c000019e <hasLegacyFPU>
c00108b2:	83 e0 01             	and    eax,0x1
c00108b5:	8d 14 00             	lea    edx,[eax+eax*1]
c00108b8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108be:	83 e0 fd             	and    eax,0xfffffffd
c00108c1:	09 d0                	or     eax,edx
c00108c3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108c9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00108d0:	74 17                	je     c00108e9 <CPU::detectFeatures()+0x6a5>
c00108d2:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00108d8:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00108de:	83 c8 10             	or     eax,0x10
c00108e1:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00108e7:	eb 20                	jmp    c0010909 <CPU::detectFeatures()+0x6c5>
c00108e9:	e8 b0 f8 fe ff       	call   c000019e <hasLegacyFPU>
c00108ee:	83 e0 01             	and    eax,0x1
c00108f1:	8d 14 00             	lea    edx,[eax+eax*1]
c00108f4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108fa:	83 e0 fd             	and    eax,0xfffffffd
c00108fd:	09 d0                	or     eax,edx
c00108ff:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010905:	a8 02                	test   al,0x2
c0010907:	75 c9                	jne    c00108d2 <CPU::detectFeatures()+0x68e>
c0010909:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010910:	83 c4 2c             	add    esp,0x2c
c0010913:	5b                   	pop    ebx
c0010914:	5e                   	pop    esi
c0010915:	5f                   	pop    edi
c0010916:	5d                   	pop    ebp
c0010917:	c3                   	ret    

c0010918 <CPU::setupSMEP()>:
c0010918:	0f 20 e0             	mov    eax,cr4
c001091b:	0d 00 00 10 00       	or     eax,0x100000
c0010920:	0f 22 e0             	mov    cr4,eax
c0010923:	c3                   	ret    

c0010924 <CPU::setupUMIP()>:
c0010924:	0f 20 e0             	mov    eax,cr4
c0010927:	80 cc 08             	or     ah,0x8
c001092a:	0f 22 e0             	mov    cr4,eax
c001092d:	c3                   	ret    

c001092e <CPU::setupTSC()>:
c001092e:	0f 20 e0             	mov    eax,cr4
c0010931:	83 c8 04             	or     eax,0x4
c0010934:	0f 22 e0             	mov    cr4,eax
c0010937:	c3                   	ret    

c0010938 <CPU::setupLargePages()>:
c0010938:	0f 20 e0             	mov    eax,cr4
c001093b:	83 c8 10             	or     eax,0x10
c001093e:	0f 22 e0             	mov    cr4,eax
c0010941:	c3                   	ret    

c0010942 <CPU::setupPAT()>:
c0010942:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010947:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001094e:	74 2c                	je     c001097c <CPU::setupPAT()+0x3a>
c0010950:	53                   	push   ebx
c0010951:	83 ec 10             	sub    esp,0x10
c0010954:	68 77 02 00 00       	push   0x277
c0010959:	50                   	push   eax
c001095a:	e8 61 67 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001095f:	83 e2 f8             	and    edx,0xfffffff8
c0010962:	83 ca 01             	or     edx,0x1
c0010965:	52                   	push   edx
c0010966:	50                   	push   eax
c0010967:	68 77 02 00 00       	push   0x277
c001096c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010972:	e8 75 67 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010977:	83 c4 28             	add    esp,0x28
c001097a:	5b                   	pop    ebx
c001097b:	c3                   	ret    
c001097c:	c3                   	ret    
c001097d:	90                   	nop

c001097e <CPU::setupMTRR()>:
c001097e:	c3                   	ret    
c001097f:	90                   	nop

c0010980 <CPU::setupGlobalPages()>:
c0010980:	0f 20 e0             	mov    eax,cr4
c0010983:	0c 80                	or     al,0x80
c0010985:	0f 22 e0             	mov    cr4,eax
c0010988:	c3                   	ret    
c0010989:	90                   	nop

c001098a <CPU::allowUsermodeDataAccess()>:
c001098a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001098e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010995:	74 03                	je     c001099a <CPU::allowUsermodeDataAccess()+0x10>
c0010997:	0f 01 cb             	stac   
c001099a:	c3                   	ret    
c001099b:	90                   	nop

c001099c <CPU::prohibitUsermodeDataAccess()>:
c001099c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109a0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00109a7:	74 03                	je     c00109ac <CPU::prohibitUsermodeDataAccess()+0x10>
c00109a9:	0f 01 ca             	clac   
c00109ac:	c3                   	ret    
c00109ad:	90                   	nop

c00109ae <CPU::setupSMAP()>:
c00109ae:	0f 20 e0             	mov    eax,cr4
c00109b1:	0d 00 00 20 00       	or     eax,0x200000
c00109b6:	0f 22 e0             	mov    cr4,eax
c00109b9:	eb e1                	jmp    c001099c <CPU::prohibitUsermodeDataAccess()>
c00109bb:	90                   	nop

c00109bc <CPU::setupFeatures()>:
c00109bc:	53                   	push   ebx
c00109bd:	83 ec 08             	sub    esp,0x8
c00109c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109c4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00109cb:	74 18                	je     c00109e5 <CPU::setupFeatures()+0x29>
c00109cd:	83 ec 0c             	sub    esp,0xc
c00109d0:	68 3d 1d 02 c0       	push   0xc0021d3d
c00109d5:	e8 6b 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109dd:	e8 42 ff ff ff       	call   c0010924 <CPU::setupUMIP()>
c00109e2:	83 c4 10             	add    esp,0x10
c00109e5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00109ec:	74 18                	je     c0010a06 <CPU::setupFeatures()+0x4a>
c00109ee:	83 ec 0c             	sub    esp,0xc
c00109f1:	68 47 1d 02 c0       	push   0xc0021d47
c00109f6:	e8 4a 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109fe:	e8 2b ff ff ff       	call   c001092e <CPU::setupTSC()>
c0010a03:	83 c4 10             	add    esp,0x10
c0010a06:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010a0d:	74 18                	je     c0010a27 <CPU::setupFeatures()+0x6b>
c0010a0f:	83 ec 0c             	sub    esp,0xc
c0010a12:	68 50 1d 02 c0       	push   0xc0021d50
c0010a17:	e8 29 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a1f:	e8 14 ff ff ff       	call   c0010938 <CPU::setupLargePages()>
c0010a24:	83 c4 10             	add    esp,0x10
c0010a27:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010a2e:	74 18                	je     c0010a48 <CPU::setupFeatures()+0x8c>
c0010a30:	83 ec 0c             	sub    esp,0xc
c0010a33:	68 59 1d 02 c0       	push   0xc0021d59
c0010a38:	e8 08 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a40:	e8 3b ff ff ff       	call   c0010980 <CPU::setupGlobalPages()>
c0010a45:	83 c4 10             	add    esp,0x10
c0010a48:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010a4f:	74 18                	je     c0010a69 <CPU::setupFeatures()+0xad>
c0010a51:	83 ec 0c             	sub    esp,0xc
c0010a54:	68 6b 1d 02 c0       	push   0xc0021d6b
c0010a59:	e8 e7 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a61:	e8 dc fe ff ff       	call   c0010942 <CPU::setupPAT()>
c0010a66:	83 c4 10             	add    esp,0x10
c0010a69:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010a70:	74 11                	je     c0010a83 <CPU::setupFeatures()+0xc7>
c0010a72:	c7 44 24 10 74 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d74
c0010a7a:	83 c4 08             	add    esp,0x8
c0010a7d:	5b                   	pop    ebx
c0010a7e:	e9 c2 9e ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010a83:	83 c4 08             	add    esp,0x8
c0010a86:	5b                   	pop    ebx
c0010a87:	c3                   	ret    

c0010a88 <CPU::open(int, int, void*)>:
c0010a88:	55                   	push   ebp
c0010a89:	57                   	push   edi
c0010a8a:	56                   	push   esi
c0010a8b:	53                   	push   ebx
c0010a8c:	83 ec 18             	sub    esp,0x18
c0010a8f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010a97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010a9b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010aa1:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010aa7:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010aad:	50                   	push   eax
c0010aae:	e8 0b 69 ff ff       	call   c00073be <GDT::setup()>
c0010ab3:	83 c4 0c             	add    esp,0xc
c0010ab6:	6a 00                	push   0x0
c0010ab8:	68 ef be ad de       	push   0xdeadbeef
c0010abd:	55                   	push   ebp
c0010abe:	e8 c5 84 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010ac3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010ac6:	e8 9d 84 ff ff       	call   c0008f68 <TSS::flush()>
c0010acb:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ad4:	e8 49 6b ff ff       	call   c0007622 <IDT::setup()>
c0010ad9:	b8 00 04 00 00       	mov    eax,0x400
c0010ade:	0f 23 f8             	mov    db7,eax
c0010ae1:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010aeb:	e8 cf 72 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010af0:	83 c4 10             	add    esp,0x10
c0010af3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010af9:	85 f6                	test   esi,esi
c0010afb:	89 38                	mov    DWORD PTR [eax],edi
c0010afd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010b03:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010b06:	74 10                	je     c0010b18 <CPU::open(int, int, void*)+0x90>
c0010b08:	50                   	push   eax
c0010b09:	50                   	push   eax
c0010b0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010b10:	56                   	push   esi
c0010b11:	e8 98 8d ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010b16:	eb 0d                	jmp    c0010b25 <CPU::open(int, int, void*)+0x9d>
c0010b18:	83 ec 0c             	sub    esp,0xc
c0010b1b:	68 7e 1d 02 c0       	push   0xc0021d7e
c0010b20:	e8 74 08 00 00       	call   c0011399 <KePanic(char const*)>
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	68 8c 1d 02 c0       	push   0xc0021d8c
c0010b30:	e8 8e 01 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0010b35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b38:	e8 07 f7 ff ff       	call   c0010244 <CPU::detectFeatures()>
c0010b3d:	c7 04 24 af 1d 02 c0 	mov    DWORD PTR [esp],0xc0021daf
c0010b44:	e8 7a 01 00 00       	call   c0010cc3 <KeSetBootMessage(char const*)>
c0010b49:	e8 df 71 00 00       	call   c0017d2d <HalInitialise()>
c0010b4e:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010b53:	83 e0 10             	and    eax,0x10
c0010b56:	83 f8 01             	cmp    eax,0x1
c0010b59:	19 c0                	sbb    eax,eax
c0010b5b:	83 e0 46             	and    eax,0x46
c0010b5e:	83 c0 1e             	add    eax,0x1e
c0010b61:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b64:	e8 28 d6 ff ff       	call   c000e191 <setupTimer(int)>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010b72:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010b79:	74 0c                	je     c0010b87 <CPU::open(int, int, void*)+0xff>
c0010b7b:	83 ec 0c             	sub    esp,0xc
c0010b7e:	53                   	push   ebx
c0010b7f:	e8 38 fe ff ff       	call   c00109bc <CPU::setupFeatures()>
c0010b84:	83 c4 10             	add    esp,0x10
c0010b87:	83 c4 0c             	add    esp,0xc
c0010b8a:	31 c0                	xor    eax,eax
c0010b8c:	5b                   	pop    ebx
c0010b8d:	5e                   	pop    esi
c0010b8e:	5f                   	pop    edi
c0010b8f:	5d                   	pop    ebp
c0010b90:	c3                   	ret    

c0010b91 <KeInitialiseAtexit()>:
c0010b91:	83 ec 10             	sub    esp,0x10
c0010b94:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010b9e:	6a 60                	push   0x60
c0010ba0:	6a 00                	push   0x0
c0010ba2:	68 20 8e 02 c0       	push   0xc0028e20
c0010ba7:	e8 44 f9 fe ff       	call   c00004f0 <memset>
c0010bac:	83 c4 1c             	add    esp,0x1c
c0010baf:	c3                   	ret    

c0010bb0 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010bb0:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010bb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bb9:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bc4:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010bcb:	40                   	inc    eax
c0010bcc:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010bd1:	83 f8 17             	cmp    eax,0x17
c0010bd4:	7e 0d                	jle    c0010be3 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010bd6:	c7 44 24 04 f0 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021df0
c0010bde:	e9 b6 07 00 00       	jmp    c0011399 <KePanic(char const*)>
c0010be3:	c3                   	ret    

c0010be4 <KeExecuteAtexit()>:
c0010be4:	53                   	push   ebx
c0010be5:	31 db                	xor    ebx,ebx
c0010be7:	83 ec 08             	sub    esp,0x8
c0010bea:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010bf0:	7e 50                	jle    c0010c42 <KeExecuteAtexit()+0x5e>
c0010bf2:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010bf9:	85 c0                	test   eax,eax
c0010bfb:	74 42                	je     c0010c3f <KeExecuteAtexit()+0x5b>
c0010bfd:	51                   	push   ecx
c0010bfe:	50                   	push   eax
c0010bff:	53                   	push   ebx
c0010c00:	68 09 1e 02 c0       	push   0xc0021e09
c0010c05:	e8 3b 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c0a:	58                   	pop    eax
c0010c0b:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010c12:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010c19:	c7 04 24 2b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e2b
c0010c20:	e8 20 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c25:	c7 04 24 8b 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f8b
c0010c2c:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010c37:	e8 09 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	43                   	inc    ebx
c0010c40:	eb a8                	jmp    c0010bea <KeExecuteAtexit()+0x6>
c0010c42:	83 c4 08             	add    esp,0x8
c0010c45:	5b                   	pop    ebx
c0010c46:	c3                   	ret    

c0010c47 <KeDisplaySplashScreen()>:
c0010c47:	55                   	push   ebp
c0010c48:	bd 05 00 00 00       	mov    ebp,0x5
c0010c4d:	57                   	push   edi
c0010c4e:	bf 0a 00 00 00       	mov    edi,0xa
c0010c53:	56                   	push   esi
c0010c54:	31 f6                	xor    esi,esi
c0010c56:	53                   	push   ebx
c0010c57:	31 db                	xor    ebx,ebx
c0010c59:	83 ec 0c             	sub    esp,0xc
c0010c5c:	0f b6 96 e0 31 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdce20]
c0010c63:	89 d0                	mov    eax,edx
c0010c65:	85 d2                	test   edx,edx
c0010c67:	74 52                	je     c0010cbb <KeDisplaySplashScreen()+0x74>
c0010c69:	80 bb 16 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcdea],0xdb
c0010c70:	75 13                	jne    c0010c85 <KeDisplaySplashScreen()+0x3e>
c0010c72:	0f b6 8b 15 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcdeb]
c0010c79:	83 e1 fe             	and    ecx,0xfffffffe
c0010c7c:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010c82:	75 01                	jne    c0010c85 <KeDisplaySplashScreen()+0x3e>
c0010c84:	47                   	inc    edi
c0010c85:	83 fa 0d             	cmp    edx,0xd
c0010c88:	74 28                	je     c0010cb2 <KeDisplaySplashScreen()+0x6b>
c0010c8a:	83 fa 0a             	cmp    edx,0xa
c0010c8d:	75 0a                	jne    c0010c99 <KeDisplaySplashScreen()+0x52>
c0010c8f:	45                   	inc    ebp
c0010c90:	bf 0a 00 00 00       	mov    edi,0xa
c0010c95:	31 db                	xor    ebx,ebx
c0010c97:	eb 19                	jmp    c0010cb2 <KeDisplaySplashScreen()+0x6b>
c0010c99:	83 ec 0c             	sub    esp,0xc
c0010c9c:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010c9f:	55                   	push   ebp
c0010ca0:	0f be c0             	movsx  eax,al
c0010ca3:	52                   	push   edx
c0010ca4:	43                   	inc    ebx
c0010ca5:	6a 00                	push   0x0
c0010ca7:	6a 0e                	push   0xe
c0010ca9:	50                   	push   eax
c0010caa:	e8 fd 7c 00 00       	call   c00189ac <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010caf:	83 c4 20             	add    esp,0x20
c0010cb2:	46                   	inc    esi
c0010cb3:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010cb9:	75 a1                	jne    c0010c5c <KeDisplaySplashScreen()+0x15>
c0010cbb:	83 c4 0c             	add    esp,0xc
c0010cbe:	5b                   	pop    ebx
c0010cbf:	5e                   	pop    esi
c0010cc0:	5f                   	pop    edi
c0010cc1:	5d                   	pop    ebp
c0010cc2:	c3                   	ret    

c0010cc3 <KeSetBootMessage(char const*)>:
c0010cc3:	57                   	push   edi
c0010cc4:	56                   	push   esi
c0010cc5:	53                   	push   ebx
c0010cc6:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010ccc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010cd3:	68 9e 00 00 00       	push   0x9e
c0010cd8:	6a 00                	push   0x0
c0010cda:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010cde:	56                   	push   esi
c0010cdf:	e8 0c f8 fe ff       	call   c00004f0 <memset>
c0010ce4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ce7:	e8 84 f8 fe ff       	call   c0000570 <strlen>
c0010cec:	ba 50 00 00 00       	mov    edx,0x50
c0010cf1:	83 c4 10             	add    esp,0x10
c0010cf4:	29 c2                	sub    edx,eax
c0010cf6:	31 c9                	xor    ecx,ecx
c0010cf8:	83 e2 fe             	and    edx,0xfffffffe
c0010cfb:	01 f2                	add    edx,esi
c0010cfd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010d02:	84 c0                	test   al,al
c0010d04:	74 0a                	je     c0010d10 <KeSetBootMessage(char const*)+0x4d>
c0010d06:	80 cc 0f             	or     ah,0xf
c0010d09:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010d0d:	41                   	inc    ecx
c0010d0e:	eb ed                	jmp    c0010cfd <KeSetBootMessage(char const*)+0x3a>
c0010d10:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010d15:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010d1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d1c:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010d22:	5b                   	pop    ebx
c0010d23:	5e                   	pop    esi
c0010d24:	5f                   	pop    edi
c0010d25:	c3                   	ret    
c0010d26:	66 90                	xchg   ax,ax

c0010d28 <Krnl::handlePowerButton()>:
c0010d28:	83 ec 0c             	sub    esp,0xc
c0010d2b:	e8 c4 06 00 00       	call   c00113f4 <KeHandlePowerButton()>
c0010d30:	90                   	nop
c0010d31:	83 c4 0c             	add    esp,0xc
c0010d34:	c3                   	ret    
c0010d35:	8d 76 00             	lea    esi,[esi+0x0]

c0010d38 <Krnl::handleSleepButton()>:
c0010d38:	83 ec 0c             	sub    esp,0xc
c0010d3b:	e8 e9 06 00 00       	call   c0011429 <KeHandleSleepButton()>
c0010d40:	90                   	nop
c0010d41:	83 c4 0c             	add    esp,0xc
c0010d44:	c3                   	ret    
c0010d45:	90                   	nop

c0010d46 <EnvVarContainer::getEnv(char const*)>:
c0010d46:	57                   	push   edi
c0010d47:	56                   	push   esi
c0010d48:	53                   	push   ebx
c0010d49:	31 db                	xor    ebx,ebx
c0010d4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d4f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010d51:	7e 2b                	jle    c0010d7e <EnvVarContainer::getEnv(char const*)+0x38>
c0010d53:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010d5a:	50                   	push   eax
c0010d5b:	50                   	push   eax
c0010d5c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d5f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010d62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d66:	e8 e5 f9 fe ff       	call   c0000750 <strcmp>
c0010d6b:	83 c4 10             	add    esp,0x10
c0010d6e:	85 c0                	test   eax,eax
c0010d70:	75 09                	jne    c0010d7b <EnvVarContainer::getEnv(char const*)+0x35>
c0010d72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d75:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010d79:	eb 05                	jmp    c0010d80 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010d7b:	43                   	inc    ebx
c0010d7c:	eb d1                	jmp    c0010d4f <EnvVarContainer::getEnv(char const*)+0x9>
c0010d7e:	31 c0                	xor    eax,eax
c0010d80:	5b                   	pop    ebx
c0010d81:	5e                   	pop    esi
c0010d82:	5f                   	pop    edi
c0010d83:	c3                   	ret    

c0010d84 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010d84:	55                   	push   ebp
c0010d85:	57                   	push   edi
c0010d86:	56                   	push   esi
c0010d87:	53                   	push   ebx
c0010d88:	83 ec 28             	sub    esp,0x28
c0010d8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010d8f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010d97:	56                   	push   esi
c0010d98:	e8 d3 f7 fe ff       	call   c0000570 <strlen>
c0010d9d:	40                   	inc    eax
c0010d9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da1:	e8 10 6d ff ff       	call   c0007ab6 <malloc>
c0010da6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010da9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010dad:	e8 be f7 fe ff       	call   c0000570 <strlen>
c0010db2:	40                   	inc    eax
c0010db3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010db6:	e8 fb 6c ff ff       	call   c0007ab6 <malloc>
c0010dbb:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dbe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010dc2:	e8 a9 f7 fe ff       	call   c0000570 <strlen>
c0010dc7:	83 c4 0c             	add    esp,0xc
c0010dca:	40                   	inc    eax
c0010dcb:	50                   	push   eax
c0010dcc:	6a 00                	push   0x0
c0010dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010dd2:	e8 19 f7 fe ff       	call   c00004f0 <memset>
c0010dd7:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dda:	e8 91 f7 fe ff       	call   c0000570 <strlen>
c0010ddf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010de3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010de6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010de8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010deb:	89 de                	mov    esi,ebx
c0010ded:	e8 7e f7 fe ff       	call   c0000570 <strlen>
c0010df2:	83 c4 0c             	add    esp,0xc
c0010df5:	40                   	inc    eax
c0010df6:	50                   	push   eax
c0010df7:	6a 00                	push   0x0
c0010df9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dfd:	e8 ee f6 fe ff       	call   c00004f0 <memset>
c0010e02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e05:	e8 66 f7 fe ff       	call   c0000570 <strlen>
c0010e0a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010e0e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e16:	40                   	inc    eax
c0010e17:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e1a:	c1 e0 03             	shl    eax,0x3
c0010e1d:	5a                   	pop    edx
c0010e1e:	59                   	pop    ecx
c0010e1f:	50                   	push   eax
c0010e20:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010e23:	e8 7a 6c ff ff       	call   c0007aa2 <realloc>
c0010e28:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e2c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e2f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e32:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e36:	b9 08 00 00 00       	mov    ecx,0x8
c0010e3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e3d:	83 c4 2c             	add    esp,0x2c
c0010e40:	5b                   	pop    ebx
c0010e41:	5e                   	pop    esi
c0010e42:	5f                   	pop    edi
c0010e43:	5d                   	pop    ebp
c0010e44:	c3                   	ret    
c0010e45:	90                   	nop

c0010e46 <EnvVarContainer::deleteEnv(char const*)>:
c0010e46:	c3                   	ret    
c0010e47:	90                   	nop

c0010e48 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010e48:	55                   	push   ebp
c0010e49:	57                   	push   edi
c0010e4a:	56                   	push   esi
c0010e4b:	53                   	push   ebx
c0010e4c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010e52:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010e59:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010e60:	68 14 01 00 00       	push   0x114
c0010e65:	e8 4c 6c ff ff       	call   c0007ab6 <malloc>
c0010e6a:	83 c4 0c             	add    esp,0xc
c0010e6d:	89 c3                	mov    ebx,eax
c0010e6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010e72:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010e79:	50                   	push   eax
c0010e7a:	e8 c9 a9 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c0010e7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e82:	e8 4d ad ff ff       	call   c000bbd4 <File::exists()>
c0010e87:	83 c4 10             	add    esp,0x10
c0010e8a:	84 c0                	test   al,al
c0010e8c:	75 31                	jne    c0010ebf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010e8e:	50                   	push   eax
c0010e8f:	50                   	push   eax
c0010e90:	6a 12                	push   0x12
c0010e92:	53                   	push   ebx
c0010e93:	e8 78 aa ff ff       	call   c000b910 <File::open(FileOpenMode)>
c0010e98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e9a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010e9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ea0:	e8 cb f6 fe ff       	call   c0000570 <strlen>
c0010ea5:	5a                   	pop    edx
c0010ea6:	31 d2                	xor    edx,edx
c0010ea8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010eac:	51                   	push   ecx
c0010ead:	56                   	push   esi
c0010eae:	52                   	push   edx
c0010eaf:	50                   	push   eax
c0010eb0:	53                   	push   ebx
c0010eb1:	ff d7                	call   edi
c0010eb3:	83 c4 14             	add    esp,0x14
c0010eb6:	53                   	push   ebx
c0010eb7:	e8 b2 aa ff ff       	call   c000b96e <File::close()>
c0010ebc:	83 c4 10             	add    esp,0x10
c0010ebf:	56                   	push   esi
c0010ec0:	31 f6                	xor    esi,esi
c0010ec2:	68 00 01 00 00       	push   0x100
c0010ec7:	6a 00                	push   0x0
c0010ec9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ecd:	50                   	push   eax
c0010ece:	e8 1d f6 fe ff       	call   c00004f0 <memset>
c0010ed3:	5f                   	pop    edi
c0010ed4:	58                   	pop    eax
c0010ed5:	6a 01                	push   0x1
c0010ed7:	53                   	push   ebx
c0010ed8:	e8 33 aa ff ff       	call   c000b910 <File::open(FileOpenMode)>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ee8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ef5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010ef9:	51                   	push   ecx
c0010efa:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010efe:	52                   	push   edx
c0010eff:	6a 00                	push   0x0
c0010f01:	6a 01                	push   0x1
c0010f03:	53                   	push   ebx
c0010f04:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010f07:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010f0c:	83 c4 20             	add    esp,0x20
c0010f0f:	89 c2                	mov    edx,eax
c0010f11:	85 c0                	test   eax,eax
c0010f13:	0f 84 36 01 00 00    	je     c001104f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010f19:	83 f8 0d             	cmp    eax,0xd
c0010f1c:	0f 84 22 01 00 00    	je     c0011044 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f22:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010f27:	0f 84 f0 00 00 00    	je     c001101d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010f2d:	83 f8 0a             	cmp    eax,0xa
c0010f30:	74 13                	je     c0010f45 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f32:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f37:	74 0c                	je     c0010f45 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f39:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f3f:	0f 8e f6 00 00 00    	jle    c001103b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010f45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f49:	83 ec 0c             	sub    esp,0xc
c0010f4c:	8d 78 01             	lea    edi,[eax+0x1]
c0010f4f:	57                   	push   edi
c0010f50:	e8 61 6b ff ff       	call   c0007ab6 <malloc>
c0010f55:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010f59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010f5d:	8d 56 04             	lea    edx,[esi+0x4]
c0010f60:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010f67:	e8 4a 6b ff ff       	call   c0007ab6 <malloc>
c0010f6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010f70:	83 c4 0c             	add    esp,0xc
c0010f73:	57                   	push   edi
c0010f74:	6a 00                	push   0x0
c0010f76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010f7a:	e8 71 f5 fe ff       	call   c00004f0 <memset>
c0010f7f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f83:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f87:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010f8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f8d:	83 c4 0c             	add    esp,0xc
c0010f90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f94:	52                   	push   edx
c0010f95:	6a 00                	push   0x0
c0010f97:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f9b:	e8 50 f5 fe ff       	call   c00004f0 <memset>
c0010fa0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010fa4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010fa8:	89 34 24             	mov    DWORD PTR [esp],esi
c0010fab:	e8 c0 f5 fe ff       	call   c0000570 <strlen>
c0010fb0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010fb4:	89 c1                	mov    ecx,eax
c0010fb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fb8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010fbb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010fbe:	40                   	inc    eax
c0010fbf:	83 c4 10             	add    esp,0x10
c0010fc2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010fc5:	85 d2                	test   edx,edx
c0010fc7:	75 0c                	jne    c0010fd5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010fc9:	83 ec 0c             	sub    esp,0xc
c0010fcc:	6a 08                	push   0x8
c0010fce:	e8 e3 6a ff ff       	call   c0007ab6 <malloc>
c0010fd3:	eb 0c                	jmp    c0010fe1 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010fd5:	c1 e0 03             	shl    eax,0x3
c0010fd8:	51                   	push   ecx
c0010fd9:	51                   	push   ecx
c0010fda:	50                   	push   eax
c0010fdb:	52                   	push   edx
c0010fdc:	e8 c1 6a ff ff       	call   c0007aa2 <realloc>
c0010fe1:	83 c4 10             	add    esp,0x10
c0010fe4:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010fe7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010fea:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010fed:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ff1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010ff5:	b9 08 00 00 00       	mov    ecx,0x8
c0010ffa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ffc:	31 f6                	xor    esi,esi
c0010ffe:	50                   	push   eax
c0010fff:	68 00 01 00 00       	push   0x100
c0011004:	6a 00                	push   0x0
c0011006:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001100a:	50                   	push   eax
c001100b:	e8 e0 f4 fe ff       	call   c00004f0 <memset>
c0011010:	83 c4 10             	add    esp,0x10
c0011013:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001101b:	eb 27                	jmp    c0011044 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001101d:	83 f8 3d             	cmp    eax,0x3d
c0011020:	74 1e                	je     c0011040 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011022:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011028:	7f 07                	jg     c0011031 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001102a:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001102e:	46                   	inc    esi
c001102f:	eb 13                	jmp    c0011044 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011031:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011039:	eb 09                	jmp    c0011044 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001103b:	83 f8 3d             	cmp    eax,0x3d
c001103e:	75 ea                	jne    c001102a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011040:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011044:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011049:	0f 85 99 fe ff ff    	jne    c0010ee8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001104f:	83 ec 0c             	sub    esp,0xc
c0011052:	53                   	push   ebx
c0011053:	e8 16 a9 ff ff       	call   c000b96e <File::close()>
c0011058:	8b 03                	mov    eax,DWORD PTR [ebx]
c001105a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001105d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011060:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011066:	5b                   	pop    ebx
c0011067:	5e                   	pop    esi
c0011068:	5f                   	pop    edi
c0011069:	5d                   	pop    ebp
c001106a:	c3                   	ret    
c001106b:	90                   	nop

c001106c <EnvVarContainer::__loadSystem()>:
c001106c:	83 ec 10             	sub    esp,0x10
c001106f:	68 40 33 02 c0       	push   0xc0023340
c0011074:	68 30 1e 02 c0       	push   0xc0021e30
c0011079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001107d:	e8 c6 fd ff ff       	call   c0010e48 <EnvVarContainer::loadFrom(char const*, char const*)>
c0011082:	83 c4 1c             	add    esp,0x1c
c0011085:	c3                   	ret    

c0011086 <EnvVarContainer::__loadUser()>:
c0011086:	c3                   	ret    
c0011087:	90                   	nop

c0011088 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001108c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011096:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001109a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001109d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110a8:	90                   	nop
c00110a9:	c3                   	ret    

c00110aa <EnvVarContainer::~EnvVarContainer()>:
c00110aa:	83 ec 0c             	sub    esp,0xc
c00110ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b4:	85 c0                	test   eax,eax
c00110b6:	74 1d                	je     c00110d5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00110b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00110be:	85 c0                	test   eax,eax
c00110c0:	74 13                	je     c00110d5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00110c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c9:	83 ec 0c             	sub    esp,0xc
c00110cc:	50                   	push   eax
c00110cd:	e8 f4 69 ff ff       	call   c0007ac6 <free>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	90                   	nop
c00110d6:	83 c4 0c             	add    esp,0xc
c00110d9:	c3                   	ret    

c00110da <KeGetEnv(Process*, char const*)>:
c00110da:	53                   	push   ebx
c00110db:	83 ec 08             	sub    esp,0x8
c00110de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110e6:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c00110ec:	74 04                	je     c00110f2 <KeGetEnv(Process*, char const*)+0x18>
c00110ee:	85 c0                	test   eax,eax
c00110f0:	75 0b                	jne    c00110fd <KeGetEnv(Process*, char const*)+0x23>
c00110f2:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110f7:	85 c0                	test   eax,eax
c00110f9:	75 19                	jne    c0011114 <KeGetEnv(Process*, char const*)+0x3a>
c00110fb:	eb 27                	jmp    c0011124 <KeGetEnv(Process*, char const*)+0x4a>
c00110fd:	52                   	push   edx
c00110fe:	52                   	push   edx
c00110ff:	53                   	push   ebx
c0011100:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011106:	e8 3b fc ff ff       	call   c0010d46 <EnvVarContainer::getEnv(char const*)>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	85 c0                	test   eax,eax
c0011110:	75 28                	jne    c001113a <KeGetEnv(Process*, char const*)+0x60>
c0011112:	eb de                	jmp    c00110f2 <KeGetEnv(Process*, char const*)+0x18>
c0011114:	52                   	push   edx
c0011115:	52                   	push   edx
c0011116:	53                   	push   ebx
c0011117:	50                   	push   eax
c0011118:	e8 29 fc ff ff       	call   c0010d46 <EnvVarContainer::getEnv(char const*)>
c001111d:	83 c4 10             	add    esp,0x10
c0011120:	85 c0                	test   eax,eax
c0011122:	75 16                	jne    c001113a <KeGetEnv(Process*, char const*)+0x60>
c0011124:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011128:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001112d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011131:	83 c4 08             	add    esp,0x8
c0011134:	5b                   	pop    ebx
c0011135:	e9 0c fc ff ff       	jmp    c0010d46 <EnvVarContainer::getEnv(char const*)>
c001113a:	83 c4 08             	add    esp,0x8
c001113d:	5b                   	pop    ebx
c001113e:	c3                   	ret    

c001113f <KeSetEnvSystem(char const*, char const*)>:
c001113f:	83 ec 10             	sub    esp,0x10
c0011142:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011146:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001114a:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011150:	e8 2f fc ff ff       	call   c0010d84 <EnvVarContainer::setEnv(char const*, char const*)>
c0011155:	83 c4 1c             	add    esp,0x1c
c0011158:	c3                   	ret    

c0011159 <KeSetEnvUser(char const*, char const*)>:
c0011159:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001115e:	85 c0                	test   eax,eax
c0011160:	74 15                	je     c0011177 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011162:	83 ec 10             	sub    esp,0x10
c0011165:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011169:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001116d:	50                   	push   eax
c001116e:	e8 11 fc ff ff       	call   c0010d84 <EnvVarContainer::setEnv(char const*, char const*)>
c0011173:	83 c4 1c             	add    esp,0x1c
c0011176:	c3                   	ret    
c0011177:	c3                   	ret    

c0011178 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001117c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011186:	e9 f9 fb ff ff       	jmp    c0010d84 <EnvVarContainer::setEnv(char const*, char const*)>

c001118b <KeDeleteEnvSystem(char const*)>:
c001118b:	c3                   	ret    

c001118c <KeDeleteEnvUser(char const*)>:
c001118c:	c3                   	ret    

c001118d <KeDeleteEnvProcess(Process*, char const*)>:
c001118d:	c3                   	ret    

c001118e <KeNewProcessEnv(Process*)>:
c001118e:	83 ec 28             	sub    esp,0x28
c0011191:	6a 0c                	push   0xc
c0011193:	e8 1e 69 ff ff       	call   c0007ab6 <malloc>
c0011198:	5a                   	pop    edx
c0011199:	59                   	pop    ecx
c001119a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001119e:	50                   	push   eax
c001119f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111a3:	e8 e0 fe ff ff       	call   c0011088 <EnvVarContainer::EnvVarContainer(Process*)>
c00111a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111ac:	83 c4 2c             	add    esp,0x2c
c00111af:	c3                   	ret    

c00111b0 <KeCopyProcessEnv(Process*, Process*)>:
c00111b0:	57                   	push   edi
c00111b1:	56                   	push   esi
c00111b2:	53                   	push   ebx
c00111b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b7:	83 ec 0c             	sub    esp,0xc
c00111ba:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00111c0:	6a 0c                	push   0xc
c00111c2:	e8 ef 68 ff ff       	call   c0007ab6 <malloc>
c00111c7:	89 c3                	mov    ebx,eax
c00111c9:	58                   	pop    eax
c00111ca:	5a                   	pop    edx
c00111cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111cf:	53                   	push   ebx
c00111d0:	e8 b3 fe ff ff       	call   c0011088 <EnvVarContainer::EnvVarContainer(Process*)>
c00111d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00111d7:	89 03                	mov    DWORD PTR [ebx],eax
c00111d9:	c1 e0 03             	shl    eax,0x3
c00111dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00111df:	e8 d2 68 ff ff       	call   c0007ab6 <malloc>
c00111e4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00111e7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00111e9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00111ec:	c1 e1 03             	shl    ecx,0x3
c00111ef:	89 c7                	mov    edi,eax
c00111f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111f3:	83 c4 10             	add    esp,0x10
c00111f6:	89 d8                	mov    eax,ebx
c00111f8:	5b                   	pop    ebx
c00111f9:	5e                   	pop    esi
c00111fa:	5f                   	pop    edi
c00111fb:	c3                   	ret    

c00111fc <KeLoadSystemEnv()>:
c00111fc:	53                   	push   ebx
c00111fd:	83 ec 14             	sub    esp,0x14
c0011200:	6a 0c                	push   0xc
c0011202:	e8 af 68 ff ff       	call   c0007ab6 <malloc>
c0011207:	89 c3                	mov    ebx,eax
c0011209:	58                   	pop    eax
c001120a:	5a                   	pop    edx
c001120b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011211:	53                   	push   ebx
c0011212:	e8 71 fe ff ff       	call   c0011088 <EnvVarContainer::EnvVarContainer(Process*)>
c0011217:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001121a:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011220:	e8 47 fe ff ff       	call   c001106c <EnvVarContainer::__loadSystem()>
c0011225:	83 c4 18             	add    esp,0x18
c0011228:	5b                   	pop    ebx
c0011229:	c3                   	ret    

c001122a <KeLoadUserEnv()>:
c001122a:	53                   	push   ebx
c001122b:	83 ec 14             	sub    esp,0x14
c001122e:	6a 0c                	push   0xc
c0011230:	e8 81 68 ff ff       	call   c0007ab6 <malloc>
c0011235:	89 c3                	mov    ebx,eax
c0011237:	58                   	pop    eax
c0011238:	5a                   	pop    edx
c0011239:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001123f:	53                   	push   ebx
c0011240:	e8 43 fe ff ff       	call   c0011088 <EnvVarContainer::EnvVarContainer(Process*)>
c0011245:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001124b:	83 c4 18             	add    esp,0x18
c001124e:	5b                   	pop    ebx
c001124f:	c3                   	ret    

c0011250 <KeFlushEnv()>:
c0011250:	c3                   	ret    

c0011251 <KeGetProcessTotalEnvCount(Process*)>:
c0011251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011255:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001125b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011261:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011266:	8b 00                	mov    eax,DWORD PTR [eax]
c0011268:	03 01                	add    eax,DWORD PTR [ecx]
c001126a:	85 d2                	test   edx,edx
c001126c:	74 02                	je     c0011270 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001126e:	03 02                	add    eax,DWORD PTR [edx]
c0011270:	c3                   	ret    

c0011271 <KeGetProcessEnvPair(Process*, int)>:
c0011271:	57                   	push   edi
c0011272:	56                   	push   esi
c0011273:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011279:	53                   	push   ebx
c001127a:	85 f6                	test   esi,esi
c001127c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011280:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011284:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001128a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001128e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011290:	75 16                	jne    c00112a8 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011292:	39 c2                	cmp    edx,eax
c0011294:	7c 16                	jl     c00112ac <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011296:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c001129c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001129e:	01 c6                	add    esi,eax
c00112a0:	39 d6                	cmp    esi,edx
c00112a2:	7e 3c                	jle    c00112e0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00112a4:	29 c2                	sub    edx,eax
c00112a6:	eb 04                	jmp    c00112ac <KeGetProcessEnvPair(Process*, int)+0x3b>
c00112a8:	39 c2                	cmp    edx,eax
c00112aa:	7d 05                	jge    c00112b1 <KeGetProcessEnvPair(Process*, int)+0x40>
c00112ac:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00112af:	eb 20                	jmp    c00112d1 <KeGetProcessEnvPair(Process*, int)+0x60>
c00112b1:	8b 3e                	mov    edi,DWORD PTR [esi]
c00112b3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00112b6:	39 d1                	cmp    ecx,edx
c00112b8:	7e 04                	jle    c00112be <KeGetProcessEnvPair(Process*, int)+0x4d>
c00112ba:	29 c2                	sub    edx,eax
c00112bc:	eb 10                	jmp    c00112ce <KeGetProcessEnvPair(Process*, int)+0x5d>
c00112be:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00112c4:	03 0e                	add    ecx,DWORD PTR [esi]
c00112c6:	39 d1                	cmp    ecx,edx
c00112c8:	7e 16                	jle    c00112e0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00112ca:	29 c2                	sub    edx,eax
c00112cc:	29 fa                	sub    edx,edi
c00112ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00112d1:	8d 14 d0             	lea    edx,[eax+edx*8]
c00112d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00112d6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00112d9:	89 03                	mov    DWORD PTR [ebx],eax
c00112db:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00112de:	eb 1d                	jmp    c00112fd <KeGetProcessEnvPair(Process*, int)+0x8c>
c00112e0:	83 ec 0c             	sub    esp,0xc
c00112e3:	68 52 1e 02 c0       	push   0xc0021e52
c00112e8:	e8 ac 00 00 00       	call   c0011399 <KePanic(char const*)>
c00112ed:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00112f3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00112fa:	83 c4 10             	add    esp,0x10
c00112fd:	89 d8                	mov    eax,ebx
c00112ff:	5b                   	pop    ebx
c0011300:	5e                   	pop    esi
c0011301:	5f                   	pop    edi
c0011302:	c2 04 00             	ret    0x4

c0011305 <CPU::current()>:
c0011305:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001130a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011310:	c3                   	ret    

c0011311 <operator new(unsigned long)>:
c0011311:	e9 a0 67 ff ff       	jmp    c0007ab6 <malloc>

c0011316 <operator delete(void*)>:
c0011316:	e9 bb 67 ff ff       	jmp    c0007ad6 <rfree>

c001131b <disableIRQs()>:
c001131b:	fa                   	cli    
c001131c:	c3                   	ret    

c001131d <enableIRQs()>:
c001131d:	fb                   	sti    
c001131e:	c3                   	ret    

c001131f <lockScheduler()>:
c001131f:	fa                   	cli    
c0011320:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011326:	c3                   	ret    

c0011327 <unlockScheduler()>:
c0011327:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001132c:	48                   	dec    eax
c001132d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011332:	75 01                	jne    c0011335 <unlockScheduler()+0xe>
c0011334:	fb                   	sti    
c0011335:	c3                   	ret    

c0011336 <lockStuff()>:
c0011336:	fa                   	cli    
c0011337:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001133d:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011343:	c3                   	ret    

c0011344 <unlockStuff()>:
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001134c:	48                   	dec    eax
c001134d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011352:	75 18                	jne    c001136c <unlockStuff()+0x28>
c0011354:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001135b:	74 0f                	je     c001136c <unlockStuff()+0x28>
c001135d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0011367:	e8 ec 48 00 00       	call   c0015c58 <schedule()>
c001136c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011371:	48                   	dec    eax
c0011372:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011377:	75 01                	jne    c001137a <unlockStuff()+0x36>
c0011379:	fb                   	sti    
c001137a:	83 c4 0c             	add    esp,0xc
c001137d:	c3                   	ret    

c001137e <Virt::getAKernelVAS()>:
c001137e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011383:	c3                   	ret    

c0011384 <__not_memcpy>:
c0011384:	57                   	push   edi
c0011385:	56                   	push   esi
c0011386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001138a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001138e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011392:	89 c7                	mov    edi,eax
c0011394:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011396:	5e                   	pop    esi
c0011397:	5f                   	pop    edi
c0011398:	c3                   	ret    

c0011399 <KePanic(char const*)>:
c0011399:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00113a0:	e9 59 68 00 00       	jmp    c0017bfe <HalPanic(char const*)>

c00113a5 <KePowerThread(void*)>:
c00113a5:	83 ec 0c             	sub    esp,0xc
c00113a8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00113ad:	48                   	dec    eax
c00113ae:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00113b3:	75 01                	jne    c00113b6 <KePowerThread(void*)+0x11>
c00113b5:	fb                   	sti    
c00113b6:	83 ec 0c             	sub    esp,0xc
c00113b9:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113c0:	6a 0a                	push   0xa
c00113c2:	e8 d5 4b 00 00       	call   c0015f9c <sleep(unsigned int)>
c00113c7:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	eb e3                	jmp    c00113b6 <KePowerThread(void*)+0x11>

c00113d3 <KeChangePowerSettings(PowerSettings)>:
c00113d3:	57                   	push   edi
c00113d4:	b9 09 00 00 00       	mov    ecx,0x9
c00113d9:	56                   	push   esi
c00113da:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00113df:	fc                   	cld    
c00113e0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00113e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00113e6:	5e                   	pop    esi
c00113e7:	5f                   	pop    edi
c00113e8:	c3                   	ret    

c00113e9 <KeUserIOReceived()>:
c00113e9:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113f3:	c3                   	ret    

c00113f4 <KeHandlePowerButton()>:
c00113f4:	83 ec 0c             	sub    esp,0xc
c00113f7:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00113fc:	83 f8 02             	cmp    eax,0x2
c00113ff:	75 10                	jne    c0011411 <KeHandlePowerButton()+0x1d>
c0011401:	83 ec 0c             	sub    esp,0xc
c0011404:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001140a:	e8 19 5d ff ff       	call   c0007128 <Computer::shutdown()>
c001140f:	eb 11                	jmp    c0011422 <KeHandlePowerButton()+0x2e>
c0011411:	48                   	dec    eax
c0011412:	75 11                	jne    c0011425 <KeHandlePowerButton()+0x31>
c0011414:	83 ec 0c             	sub    esp,0xc
c0011417:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001141d:	e8 36 5d ff ff       	call   c0007158 <Computer::sleep()>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	83 c4 0c             	add    esp,0xc
c0011428:	c3                   	ret    

c0011429 <KeHandleSleepButton()>:
c0011429:	83 ec 0c             	sub    esp,0xc
c001142c:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011431:	83 f8 02             	cmp    eax,0x2
c0011434:	75 10                	jne    c0011446 <KeHandleSleepButton()+0x1d>
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001143f:	e8 e4 5c ff ff       	call   c0007128 <Computer::shutdown()>
c0011444:	eb 11                	jmp    c0011457 <KeHandleSleepButton()+0x2e>
c0011446:	48                   	dec    eax
c0011447:	75 11                	jne    c001145a <KeHandleSleepButton()+0x31>
c0011449:	83 ec 0c             	sub    esp,0xc
c001144c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011452:	e8 01 5d ff ff       	call   c0007158 <Computer::sleep()>
c0011457:	83 c4 10             	add    esp,0x10
c001145a:	83 c4 0c             	add    esp,0xc
c001145d:	c3                   	ret    

c001145e <KeSetupPowerManager()>:
c001145e:	83 ec 0c             	sub    esp,0xc
c0011461:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001146b:	68 f0 00 00 00       	push   0xf0
c0011470:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011477:	6a 00                	push   0x0
c0011479:	68 a5 13 01 c0       	push   0xc00113a5
c001147e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011484:	e8 7f 45 00 00       	call   c0015a08 <Process::createThread(void (*)(void*), void*, int)>
c0011489:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c0011493:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c001149d:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00114a7:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00114b1:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00114bb:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00114c5:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00114cf:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00114d9:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00114e3:	83 c4 1c             	add    esp,0x1c
c00114e6:	c3                   	ret    

c00114e7 <KeRand()>:
c00114e7:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00114f1:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00114fb:	53                   	push   ebx
c00114fc:	01 c1                	add    ecx,eax
c00114fe:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011503:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011509:	01 ca                	add    edx,ecx
c001150b:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011510:	83 d2 00             	adc    edx,0x0
c0011513:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011518:	0f b7 da             	movzx  ebx,dx
c001151b:	89 da                	mov    edx,ebx
c001151d:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011523:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011527:	5b                   	pop    ebx
c0011528:	c3                   	ret    

c0011529 <KeSeedRand(unsigned int)>:
c0011529:	53                   	push   ebx
c001152a:	83 ec 08             	sub    esp,0x8
c001152d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011531:	e8 e7 69 00 00       	call   c0017f1d <HalGetRand()>
c0011536:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011540:	31 d8                	xor    eax,ebx
c0011542:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011547:	e8 9b ff ff ff       	call   c00114e7 <KeRand()>
c001154c:	83 c4 08             	add    esp,0x8
c001154f:	5b                   	pop    ebx
c0011550:	eb 95                	jmp    c00114e7 <KeRand()>

c0011552 <KeInitRand()>:
c0011552:	83 ec 0c             	sub    esp,0xc
c0011555:	e8 b8 67 00 00       	call   c0017d12 <HalQueryPerformanceCounter()>
c001155a:	0f 20 da             	mov    edx,cr3
c001155d:	0f 22 da             	mov    cr3,edx
c0011560:	0f 20 da             	mov    edx,cr3
c0011563:	0f 22 da             	mov    cr3,edx
c0011566:	0f 20 da             	mov    edx,cr3
c0011569:	0f 22 da             	mov    cr3,edx
c001156c:	0f 20 da             	mov    edx,cr3
c001156f:	0f 22 da             	mov    cr3,edx
c0011572:	83 ec 0c             	sub    esp,0xc
c0011575:	35 03 8a 95 38       	xor    eax,0x38958a03
c001157a:	50                   	push   eax
c001157b:	e8 a9 ff ff ff       	call   c0011529 <KeSeedRand(unsigned int)>
c0011580:	83 c4 1c             	add    esp,0x1c
c0011583:	c3                   	ret    

c0011584 <KeResolveCompatibilitySymbol(char*)>:
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	83 ec 08             	sub    esp,0x8
c001158a:	68 6c 1e 02 c0       	push   0xc0021e6c
c001158f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011593:	e8 b8 f1 fe ff       	call   c0000750 <strcmp>
c0011598:	83 c4 10             	add    esp,0x10
c001159b:	85 c0                	test   eax,eax
c001159d:	0f 94 c0             	sete   al
c00115a0:	0f b6 c0             	movzx  eax,al
c00115a3:	85 c0                	test   eax,eax
c00115a5:	74 0d                	je     c00115b4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00115a7:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00115ac:	e9 8b 01 00 00       	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115b1:	8d 76 00             	lea    esi,[esi+0x0]
c00115b4:	83 ec 08             	sub    esp,0x8
c00115b7:	68 75 1e 02 c0       	push   0xc0021e75
c00115bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c0:	e8 8b f1 fe ff       	call   c0000750 <strcmp>
c00115c5:	83 c4 10             	add    esp,0x10
c00115c8:	85 c0                	test   eax,eax
c00115ca:	0f 94 c0             	sete   al
c00115cd:	0f b6 c0             	movzx  eax,al
c00115d0:	85 c0                	test   eax,eax
c00115d2:	74 0c                	je     c00115e0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00115d4:	b8 d0 f2 01 c0       	mov    eax,0xc001f2d0
c00115d9:	e9 5e 01 00 00       	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115de:	66 90                	xchg   ax,ax
c00115e0:	83 ec 08             	sub    esp,0x8
c00115e3:	68 7f 1e 02 c0       	push   0xc0021e7f
c00115e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115ec:	e8 5f f1 fe ff       	call   c0000750 <strcmp>
c00115f1:	83 c4 10             	add    esp,0x10
c00115f4:	85 c0                	test   eax,eax
c00115f6:	0f 94 c0             	sete   al
c00115f9:	0f b6 c0             	movzx  eax,al
c00115fc:	85 c0                	test   eax,eax
c00115fe:	74 0c                	je     c001160c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011600:	b8 04 f0 01 c0       	mov    eax,0xc001f004
c0011605:	e9 32 01 00 00       	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001160a:	66 90                	xchg   ax,ax
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 88 1e 02 c0       	push   0xc0021e88
c0011614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011618:	e8 33 f1 fe ff       	call   c0000750 <strcmp>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	85 c0                	test   eax,eax
c0011622:	0f 94 c0             	sete   al
c0011625:	0f b6 c0             	movzx  eax,al
c0011628:	85 c0                	test   eax,eax
c001162a:	74 0c                	je     c0011638 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001162c:	b8 99 13 01 c0       	mov    eax,0xc0011399
c0011631:	e9 06 01 00 00       	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011636:	66 90                	xchg   ax,ax
c0011638:	83 ec 08             	sub    esp,0x8
c001163b:	68 9b 1e 02 c0       	push   0xc0021e9b
c0011640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011644:	e8 07 f1 fe ff       	call   c0000750 <strcmp>
c0011649:	83 c4 10             	add    esp,0x10
c001164c:	85 c0                	test   eax,eax
c001164e:	0f 94 c0             	sete   al
c0011651:	0f b6 c0             	movzx  eax,al
c0011654:	85 c0                	test   eax,eax
c0011656:	74 0c                	je     c0011664 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011658:	b8 c3 0c 01 c0       	mov    eax,0xc0010cc3
c001165d:	e9 da 00 00 00       	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011662:	66 90                	xchg   ax,ax
c0011664:	83 ec 08             	sub    esp,0x8
c0011667:	68 b8 1e 02 c0       	push   0xc0021eb8
c001166c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011670:	e8 db f0 fe ff       	call   c0000750 <strcmp>
c0011675:	83 c4 10             	add    esp,0x10
c0011678:	85 c0                	test   eax,eax
c001167a:	0f 94 c0             	sete   al
c001167d:	0f b6 c0             	movzx  eax,al
c0011680:	85 c0                	test   eax,eax
c0011682:	74 0c                	je     c0011690 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011684:	b8 d0 f3 01 c0       	mov    eax,0xc001f3d0
c0011689:	e9 ae 00 00 00       	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001168e:	66 90                	xchg   ax,ax
c0011690:	83 ec 08             	sub    esp,0x8
c0011693:	68 c2 1e 02 c0       	push   0xc0021ec2
c0011698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001169c:	e8 af f0 fe ff       	call   c0000750 <strcmp>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	85 c0                	test   eax,eax
c00116a6:	0f 94 c0             	sete   al
c00116a9:	0f b6 c0             	movzx  eax,al
c00116ac:	85 c0                	test   eax,eax
c00116ae:	74 0c                	je     c00116bc <KeResolveCompatibilitySymbol(char*)+0x138>
c00116b0:	b8 50 f1 01 c0       	mov    eax,0xc001f150
c00116b5:	e9 82 00 00 00       	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116ba:	66 90                	xchg   ax,ax
c00116bc:	83 ec 08             	sub    esp,0x8
c00116bf:	68 cb 1e 02 c0       	push   0xc0021ecb
c00116c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116c8:	e8 83 f0 fe ff       	call   c0000750 <strcmp>
c00116cd:	83 c4 10             	add    esp,0x10
c00116d0:	85 c0                	test   eax,eax
c00116d2:	0f 94 c0             	sete   al
c00116d5:	0f b6 c0             	movzx  eax,al
c00116d8:	85 c0                	test   eax,eax
c00116da:	74 08                	je     c00116e4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00116dc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00116e1:	eb 59                	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116e3:	90                   	nop
c00116e4:	83 ec 08             	sub    esp,0x8
c00116e7:	68 e3 1e 02 c0       	push   0xc0021ee3
c00116ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f0:	e8 5b f0 fe ff       	call   c0000750 <strcmp>
c00116f5:	83 c4 10             	add    esp,0x10
c00116f8:	85 c0                	test   eax,eax
c00116fa:	0f 94 c0             	sete   al
c00116fd:	0f b6 c0             	movzx  eax,al
c0011700:	85 c0                	test   eax,eax
c0011702:	74 08                	je     c001170c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011704:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011709:	eb 31                	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001170b:	90                   	nop
c001170c:	83 ec 08             	sub    esp,0x8
c001170f:	68 f0 1e 02 c0       	push   0xc0021ef0
c0011714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011718:	e8 33 f0 fe ff       	call   c0000750 <strcmp>
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	85 c0                	test   eax,eax
c0011722:	0f 94 c0             	sete   al
c0011725:	0f b6 c0             	movzx  eax,al
c0011728:	85 c0                	test   eax,eax
c001172a:	74 08                	je     c0011734 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001172c:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011731:	eb 09                	jmp    c001173c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011733:	90                   	nop
c0011734:	b8 00 00 00 00       	mov    eax,0x0
c0011739:	8d 76 00             	lea    esi,[esi+0x0]
c001173c:	83 c4 0c             	add    esp,0xc
c001173f:	c3                   	ret    

c0011740 <KiSigKill(int)>:
c0011740:	83 ec 0c             	sub    esp,0xc
c0011743:	6a 00                	push   0x0
c0011745:	6a 00                	push   0x0
c0011747:	6a ff                	push   0xffffffff
c0011749:	6a 01                	push   0x1
c001174b:	e8 02 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011750:	83 c4 1c             	add    esp,0x1c
c0011753:	c3                   	ret    

c0011754 <KiDefaultSignalHandlerIgnore(int)>:
c0011754:	c3                   	ret    

c0011755 <KiDefaultSignalHandlerPause(int)>:
c0011755:	57                   	push   edi
c0011756:	b9 07 00 00 00       	mov    ecx,0x7
c001175b:	56                   	push   esi
c001175c:	be 39 1f 02 c0       	mov    esi,0xc0021f39
c0011761:	83 ec 24             	sub    esp,0x24
c0011764:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011768:	fc                   	cld    
c0011769:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001176b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001176f:	50                   	push   eax
c0011770:	6a 00                	push   0x0
c0011772:	6a 00                	push   0x0
c0011774:	6a 27                	push   0x27
c0011776:	e8 d7 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001177b:	83 c4 34             	add    esp,0x34
c001177e:	5e                   	pop    esi
c001177f:	5f                   	pop    edi
c0011780:	c3                   	ret    

c0011781 <KiDefaultSignalHandlerResume(int)>:
c0011781:	57                   	push   edi
c0011782:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011787:	56                   	push   esi
c0011788:	be 55 1f 02 c0       	mov    esi,0xc0021f55
c001178d:	83 ec 24             	sub    esp,0x24
c0011790:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011794:	fc                   	cld    
c0011795:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011797:	8d 44 24 03          	lea    eax,[esp+0x3]
c001179b:	50                   	push   eax
c001179c:	6a 00                	push   0x0
c001179e:	6a 00                	push   0x0
c00117a0:	6a 27                	push   0x27
c00117a2:	e8 ab 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00117a7:	83 c4 34             	add    esp,0x34
c00117aa:	5e                   	pop    esi
c00117ab:	5f                   	pop    edi
c00117ac:	c3                   	ret    

c00117ad <KeDeinitSignals(SigHandlerBlock*)>:
c00117ad:	e9 14 63 ff ff       	jmp    c0007ac6 <free>

c00117b2 <KeInitSignals()>:
c00117b2:	53                   	push   ebx
c00117b3:	83 ec 14             	sub    esp,0x14
c00117b6:	68 c8 00 00 00       	push   0xc8
c00117bb:	e8 f6 62 ff ff       	call   c0007ab6 <malloc>
c00117c0:	83 c4 0c             	add    esp,0xc
c00117c3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00117cd:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00117d7:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00117de:	89 c3                	mov    ebx,eax
c00117e0:	6a 20                	push   0x20
c00117e2:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00117e8:	6a 00                	push   0x0
c00117ea:	50                   	push   eax
c00117eb:	e8 00 ed fe ff       	call   c00004f0 <memset>
c00117f0:	83 c4 0c             	add    esp,0xc
c00117f3:	6a 44                	push   0x44
c00117f5:	6a 00                	push   0x0
c00117f7:	53                   	push   ebx
c00117f8:	e8 f3 ec fe ff       	call   c00004f0 <memset>
c00117fd:	89 d8                	mov    eax,ebx
c00117ff:	83 c4 18             	add    esp,0x18
c0011802:	5b                   	pop    ebx
c0011803:	c3                   	ret    

c0011804 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011804:	53                   	push   ebx
c0011805:	b8 01 00 00 00       	mov    eax,0x1
c001180a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001180e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011812:	83 f9 10             	cmp    ecx,0x10
c0011815:	7f 21                	jg     c0011838 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011817:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001181a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001181e:	89 03                	mov    DWORD PTR [ebx],eax
c0011820:	b8 01 00 00 00       	mov    eax,0x1
c0011825:	d3 e0                	shl    eax,cl
c0011827:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001182b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001182e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011836:	31 c0                	xor    eax,eax
c0011838:	5b                   	pop    ebx
c0011839:	c3                   	ret    

c001183a <KeRaiseSignal(SigHandlerBlock*, int)>:
c001183a:	55                   	push   ebp
c001183b:	57                   	push   edi
c001183c:	bf 08 00 00 00       	mov    edi,0x8
c0011841:	56                   	push   esi
c0011842:	53                   	push   ebx
c0011843:	83 ec 18             	sub    esp,0x18
c0011846:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001184a:	68 72 1f 02 c0       	push   0xc0021f72
c001184f:	e8 f1 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011854:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001185b:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	31 c9                	xor    ecx,ecx
c0011866:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001186a:	99                   	cdq    
c001186b:	f7 ff                	idiv   edi
c001186d:	8d 42 24             	lea    eax,[edx+0x24]
c0011870:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011874:	85 f6                	test   esi,esi
c0011876:	75 1a                	jne    c0011892 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011878:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001187c:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011880:	50                   	push   eax
c0011881:	50                   	push   eax
c0011882:	52                   	push   edx
c0011883:	68 83 1f 02 c0       	push   0xc0021f83
c0011888:	e8 b8 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001188d:	83 c4 10             	add    esp,0x10
c0011890:	eb 1b                	jmp    c00118ad <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011892:	41                   	inc    ecx
c0011893:	83 f9 08             	cmp    ecx,0x8
c0011896:	75 ce                	jne    c0011866 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011898:	83 ec 0c             	sub    esp,0xc
c001189b:	be 01 00 00 00       	mov    esi,0x1
c00118a0:	68 a4 1f 02 c0       	push   0xc0021fa4
c00118a5:	e8 9b 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00118aa:	83 c4 10             	add    esp,0x10
c00118ad:	83 c4 0c             	add    esp,0xc
c00118b0:	89 f0                	mov    eax,esi
c00118b2:	5b                   	pop    ebx
c00118b3:	5e                   	pop    esi
c00118b4:	5f                   	pop    edi
c00118b5:	5d                   	pop    ebp
c00118b6:	c3                   	ret    

c00118b7 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00118b7:	55                   	push   ebp
c00118b8:	57                   	push   edi
c00118b9:	56                   	push   esi
c00118ba:	53                   	push   ebx
c00118bb:	51                   	push   ecx
c00118bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00118c0:	85 db                	test   ebx,ebx
c00118c2:	0f 84 bc 00 00 00    	je     c0011984 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118c8:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00118cf:	0f 84 af 00 00 00    	je     c0011984 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118d5:	31 c9                	xor    ecx,ecx
c00118d7:	bf 08 00 00 00       	mov    edi,0x8
c00118dc:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00118e2:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00118e5:	99                   	cdq    
c00118e6:	f7 ff                	idiv   edi
c00118e8:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00118ef:	85 ed                	test   ebp,ebp
c00118f1:	0f 84 9e 00 00 00    	je     c0011995 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00118f7:	89 e9                	mov    ecx,ebp
c00118f9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00118ff:	bf 01 00 00 00       	mov    edi,0x1
c0011904:	89 04 24             	mov    DWORD PTR [esp],eax
c0011907:	d3 e7                	shl    edi,cl
c0011909:	31 c9                	xor    ecx,ecx
c001190b:	b8 01 00 00 00       	mov    eax,0x1
c0011910:	d3 e0                	shl    eax,cl
c0011912:	85 04 24             	test   DWORD PTR [esp],eax
c0011915:	74 06                	je     c001191d <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011917:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001191b:	75 67                	jne    c0011984 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001191d:	41                   	inc    ecx
c001191e:	83 f9 11             	cmp    ecx,0x11
c0011921:	75 e8                	jne    c001190b <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011923:	46                   	inc    esi
c0011924:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011927:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001192d:	09 f8                	or     eax,edi
c001192f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001193a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011940:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011947:	31 c0                	xor    eax,eax
c0011949:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011951:	74 09                	je     c001195c <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011953:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001195a:	eb 06                	jmp    c0011962 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001195c:	40                   	inc    eax
c001195d:	83 f8 08             	cmp    eax,0x8
c0011960:	75 e7                	jne    c0011949 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011962:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011965:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011969:	83 fd 09             	cmp    ebp,0x9
c001196c:	89 2a                	mov    DWORD PTR [edx],ebp
c001196e:	75 07                	jne    c0011977 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011970:	b8 40 17 01 c0       	mov    eax,0xc0011740
c0011975:	eb 31                	jmp    c00119a8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011977:	83 f8 01             	cmp    eax,0x1
c001197a:	75 0c                	jne    c0011988 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001197c:	f7 d7                	not    edi
c001197e:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011984:	31 c0                	xor    eax,eax
c0011986:	eb 20                	jmp    c00119a8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011988:	85 c0                	test   eax,eax
c001198a:	75 1c                	jne    c00119a8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001198c:	8b 04 ad a0 33 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcc60]
c0011993:	eb 13                	jmp    c00119a8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011995:	46                   	inc    esi
c0011996:	41                   	inc    ecx
c0011997:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001199d:	83 f9 08             	cmp    ecx,0x8
c00119a0:	0f 85 36 ff ff ff    	jne    c00118dc <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00119a6:	eb dc                	jmp    c0011984 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00119a8:	5a                   	pop    edx
c00119a9:	5b                   	pop    ebx
c00119aa:	5e                   	pop    esi
c00119ab:	5f                   	pop    edi
c00119ac:	5d                   	pop    ebp
c00119ad:	c3                   	ret    

c00119ae <KiCheckSignalZ>:
c00119ae:	83 ec 10             	sub    esp,0x10
c00119b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00119b5:	50                   	push   eax
c00119b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119be:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00119c4:	e8 ee fe ff ff       	call   c00118b7 <KeCheckSignal(SigHandlerBlock*, int*)>
c00119c9:	5a                   	pop    edx
c00119ca:	31 d2                	xor    edx,edx
c00119cc:	59                   	pop    ecx
c00119cd:	85 c0                	test   eax,eax
c00119cf:	74 19                	je     c00119ea <KiCheckSignalZ+0x3c>
c00119d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00119d7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00119da:	89 02                	mov    DWORD PTR [edx],eax
c00119dc:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00119e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119e7:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00119ea:	89 d0                	mov    eax,edx
c00119ec:	83 c4 10             	add    esp,0x10
c00119ef:	c3                   	ret    

c00119f0 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00119f0:	56                   	push   esi
c00119f1:	53                   	push   ebx
c00119f2:	bb 01 00 00 00       	mov    ebx,0x1
c00119f7:	52                   	push   edx
c00119f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00119fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a00:	d3 e3                	shl    ebx,cl
c0011a02:	83 f9 10             	cmp    ecx,0x10
c0011a05:	7f 08                	jg     c0011a0f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011a07:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011a0d:	75 10                	jne    c0011a1f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011a0f:	83 ec 0c             	sub    esp,0xc
c0011a12:	68 b5 1f 02 c0       	push   0xc0021fb5
c0011a17:	e8 7d f9 ff ff       	call   c0011399 <KePanic(char const*)>
c0011a1c:	83 c4 10             	add    esp,0x10
c0011a1f:	f7 d3                	not    ebx
c0011a21:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011a27:	58                   	pop    eax
c0011a28:	5b                   	pop    ebx
c0011a29:	5e                   	pop    esi
c0011a2a:	c3                   	ret    

c0011a2b <KiFinishSignalZ>:
c0011a2b:	53                   	push   ebx
c0011a2c:	83 ec 10             	sub    esp,0x10
c0011a2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a33:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011a36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a3e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011a44:	e8 a7 ff ff ff       	call   c00119f0 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011a49:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011a4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011a56:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011a5d:	83 c4 18             	add    esp,0x18
c0011a60:	5b                   	pop    ebx
c0011a61:	c3                   	ret    

c0011a62 <SysSeekDir(regs*)>:
c0011a62:	31 c0                	xor    eax,eax
c0011a64:	31 d2                	xor    edx,edx
c0011a66:	c3                   	ret    

c0011a67 <SysTellDir(regs*)>:
c0011a67:	31 c0                	xor    eax,eax
c0011a69:	31 d2                	xor    edx,edx
c0011a6b:	c3                   	ret    

c0011a6c <SysVerify(regs*)>:
c0011a6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a70:	31 d2                	xor    edx,edx
c0011a72:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a75:	c3                   	ret    

c0011a76 <SysGetArgc(regs*)>:
c0011a76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a7e:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011a84:	89 c2                	mov    edx,eax
c0011a86:	c1 fa 1f             	sar    edx,0x1f
c0011a89:	c3                   	ret    

c0011a8a <SysTTYName(regs*)>:
c0011a8a:	b8 01 00 00 00       	mov    eax,0x1
c0011a8f:	31 d2                	xor    edx,edx
c0011a91:	c3                   	ret    

c0011a92 <SysFormatDisk(regs*)>:
c0011a92:	56                   	push   esi
c0011a93:	53                   	push   ebx
c0011a94:	83 ec 04             	sub    esp,0x4
c0011a97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a9b:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011aa1:	eb 28                	jmp    c0011acb <SysFormatDisk(regs*)+0x39>
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011aa9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011aac:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011aae:	51                   	push   ecx
c0011aaf:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011ab2:	51                   	push   ecx
c0011ab3:	50                   	push   eax
c0011ab4:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011abb:	50                   	push   eax
c0011abc:	53                   	push   ebx
c0011abd:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011ac0:	83 c4 20             	add    esp,0x20
c0011ac3:	83 f8 08             	cmp    eax,0x8
c0011ac6:	75 14                	jne    c0011adc <SysFormatDisk(regs*)+0x4a>
c0011ac8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011acb:	85 db                	test   ebx,ebx
c0011acd:	75 d4                	jne    c0011aa3 <SysFormatDisk(regs*)+0x11>
c0011acf:	83 c4 04             	add    esp,0x4
c0011ad2:	b8 03 00 00 00       	mov    eax,0x3
c0011ad7:	31 d2                	xor    edx,edx
c0011ad9:	5b                   	pop    ebx
c0011ada:	5e                   	pop    esi
c0011adb:	c3                   	ret    
c0011adc:	85 c0                	test   eax,eax
c0011ade:	74 1f                	je     c0011aff <SysFormatDisk(regs*)+0x6d>
c0011ae0:	83 f8 09             	cmp    eax,0x9
c0011ae3:	74 0d                	je     c0011af2 <SysFormatDisk(regs*)+0x60>
c0011ae5:	83 c4 04             	add    esp,0x4
c0011ae8:	b8 02 00 00 00       	mov    eax,0x2
c0011aed:	31 d2                	xor    edx,edx
c0011aef:	5b                   	pop    ebx
c0011af0:	5e                   	pop    esi
c0011af1:	c3                   	ret    
c0011af2:	83 c4 04             	add    esp,0x4
c0011af5:	b8 01 00 00 00       	mov    eax,0x1
c0011afa:	31 d2                	xor    edx,edx
c0011afc:	5b                   	pop    ebx
c0011afd:	5e                   	pop    esi
c0011afe:	c3                   	ret    
c0011aff:	83 c4 04             	add    esp,0x4
c0011b02:	31 c0                	xor    eax,eax
c0011b04:	31 d2                	xor    edx,edx
c0011b06:	5b                   	pop    ebx
c0011b07:	5e                   	pop    esi
c0011b08:	c3                   	ret    

c0011b09 <SysSetDiskVolumeLabel(regs*)>:
c0011b09:	56                   	push   esi
c0011b0a:	53                   	push   ebx
c0011b0b:	83 ec 04             	sub    esp,0x4
c0011b0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b12:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011b15:	83 f8 19             	cmp    eax,0x19
c0011b18:	77 33                	ja     c0011b4d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b1a:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011b21:	85 c9                	test   ecx,ecx
c0011b23:	74 28                	je     c0011b4d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b25:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011b28:	85 db                	test   ebx,ebx
c0011b2a:	74 21                	je     c0011b4d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b2c:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011b32:	85 d2                	test   edx,edx
c0011b34:	74 17                	je     c0011b4d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b36:	8b 32                	mov    esi,DWORD PTR [edx]
c0011b38:	53                   	push   ebx
c0011b39:	50                   	push   eax
c0011b3a:	51                   	push   ecx
c0011b3b:	52                   	push   edx
c0011b3c:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	89 c2                	mov    edx,eax
c0011b44:	83 c4 04             	add    esp,0x4
c0011b47:	c1 fa 1f             	sar    edx,0x1f
c0011b4a:	5b                   	pop    ebx
c0011b4b:	5e                   	pop    esi
c0011b4c:	c3                   	ret    
c0011b4d:	83 c4 04             	add    esp,0x4
c0011b50:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b55:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b5a:	5b                   	pop    ebx
c0011b5b:	5e                   	pop    esi
c0011b5c:	c3                   	ret    

c0011b5d <SysGetDiskVolumeLabel(regs*)>:
c0011b5d:	57                   	push   edi
c0011b5e:	56                   	push   esi
c0011b5f:	53                   	push   ebx
c0011b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b64:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011b67:	83 fa 19             	cmp    edx,0x19
c0011b6a:	77 3c                	ja     c0011ba8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b6c:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011b73:	85 c9                	test   ecx,ecx
c0011b75:	74 31                	je     c0011ba8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b77:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b7a:	85 db                	test   ebx,ebx
c0011b7c:	74 2a                	je     c0011ba8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b7e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b81:	85 f6                	test   esi,esi
c0011b83:	74 23                	je     c0011ba8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b85:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011b8b:	85 c0                	test   eax,eax
c0011b8d:	74 19                	je     c0011ba8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b8f:	83 ec 0c             	sub    esp,0xc
c0011b92:	8b 38                	mov    edi,DWORD PTR [eax]
c0011b94:	56                   	push   esi
c0011b95:	53                   	push   ebx
c0011b96:	52                   	push   edx
c0011b97:	51                   	push   ecx
c0011b98:	50                   	push   eax
c0011b99:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011b9c:	83 c4 20             	add    esp,0x20
c0011b9f:	89 c2                	mov    edx,eax
c0011ba1:	5b                   	pop    ebx
c0011ba2:	c1 fa 1f             	sar    edx,0x1f
c0011ba5:	5e                   	pop    esi
c0011ba6:	5f                   	pop    edi
c0011ba7:	c3                   	ret    
c0011ba8:	5b                   	pop    ebx
c0011ba9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011bae:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bb3:	5e                   	pop    esi
c0011bb4:	5f                   	pop    edi
c0011bb5:	c3                   	ret    

c0011bb6 <SysShutdown(regs*)>:
c0011bb6:	83 ec 0c             	sub    esp,0xc
c0011bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bc0:	85 c0                	test   eax,eax
c0011bc2:	74 18                	je     c0011bdc <SysShutdown(regs*)+0x26>
c0011bc4:	83 f8 01             	cmp    eax,0x1
c0011bc7:	74 38                	je     c0011c01 <SysShutdown(regs*)+0x4b>
c0011bc9:	83 f8 02             	cmp    eax,0x2
c0011bcc:	74 24                	je     c0011bf2 <SysShutdown(regs*)+0x3c>
c0011bce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bd8:	83 c4 0c             	add    esp,0xc
c0011bdb:	c3                   	ret    
c0011bdc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011be3:	6a 00                	push   0x0
c0011be5:	6a 00                	push   0x0
c0011be7:	6a 00                	push   0x0
c0011be9:	50                   	push   eax
c0011bea:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bed:	83 c4 10             	add    esp,0x10
c0011bf0:	eb dc                	jmp    c0011bce <SysShutdown(regs*)+0x18>
c0011bf2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011bf7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bf9:	6a 00                	push   0x0
c0011bfb:	6a 00                	push   0x0
c0011bfd:	6a 01                	push   0x1
c0011bff:	eb e8                	jmp    c0011be9 <SysShutdown(regs*)+0x33>
c0011c01:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011c06:	85 c0                	test   eax,eax
c0011c08:	74 02                	je     c0011c0c <SysShutdown(regs*)+0x56>
c0011c0a:	ff d0                	call   eax
c0011c0c:	31 c0                	xor    eax,eax
c0011c0e:	31 d2                	xor    edx,edx
c0011c10:	83 c4 0c             	add    esp,0xc
c0011c13:	c3                   	ret    

c0011c14 <SysRealpath(regs*)>:
c0011c14:	83 ec 0c             	sub    esp,0xc
c0011c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c1b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c1e:	85 d2                	test   edx,edx
c0011c20:	74 07                	je     c0011c29 <SysRealpath(regs*)+0x15>
c0011c22:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c25:	85 c0                	test   eax,eax
c0011c27:	75 0b                	jne    c0011c34 <SysRealpath(regs*)+0x20>
c0011c29:	b8 01 00 00 00       	mov    eax,0x1
c0011c2e:	31 d2                	xor    edx,edx
c0011c30:	83 c4 0c             	add    esp,0xc
c0011c33:	c3                   	ret    
c0011c34:	6a 00                	push   0x0
c0011c36:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011c3c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011c3f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011c45:	51                   	push   ecx
c0011c46:	52                   	push   edx
c0011c47:	50                   	push   eax
c0011c48:	e8 9d 99 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	31 c0                	xor    eax,eax
c0011c52:	31 d2                	xor    edx,edx
c0011c54:	83 c4 0c             	add    esp,0xc
c0011c57:	c3                   	ret    

c0011c58 <SysReadDir(regs*)>:
c0011c58:	53                   	push   ebx
c0011c59:	83 ec 18             	sub    esp,0x18
c0011c5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c63:	83 f8 02             	cmp    eax,0x2
c0011c66:	76 61                	jbe    c0011cc9 <SysReadDir(regs*)+0x71>
c0011c68:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011c6f:	77 49                	ja     c0011cba <SysReadDir(regs*)+0x62>
c0011c71:	83 ec 0c             	sub    esp,0xc
c0011c74:	50                   	push   eax
c0011c75:	e8 39 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c7a:	83 c4 10             	add    esp,0x10
c0011c7d:	85 c0                	test   eax,eax
c0011c7f:	74 39                	je     c0011cba <SysReadDir(regs*)+0x62>
c0011c81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c89:	83 ec 0c             	sub    esp,0xc
c0011c8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c8e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011c92:	51                   	push   ecx
c0011c93:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c96:	51                   	push   ecx
c0011c97:	6a 00                	push   0x0
c0011c99:	68 10 01 00 00       	push   0x110
c0011c9e:	50                   	push   eax
c0011c9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ca2:	83 c4 20             	add    esp,0x20
c0011ca5:	85 c0                	test   eax,eax
c0011ca7:	74 29                	je     c0011cd2 <SysReadDir(regs*)+0x7a>
c0011ca9:	83 f8 07             	cmp    eax,0x7
c0011cac:	74 1b                	je     c0011cc9 <SysReadDir(regs*)+0x71>
c0011cae:	b8 02 00 00 00       	mov    eax,0x2
c0011cb3:	31 d2                	xor    edx,edx
c0011cb5:	83 c4 18             	add    esp,0x18
c0011cb8:	5b                   	pop    ebx
c0011cb9:	c3                   	ret    
c0011cba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cc4:	83 c4 18             	add    esp,0x18
c0011cc7:	5b                   	pop    ebx
c0011cc8:	c3                   	ret    
c0011cc9:	b8 01 00 00 00       	mov    eax,0x1
c0011cce:	31 d2                	xor    edx,edx
c0011cd0:	eb e3                	jmp    c0011cb5 <SysReadDir(regs*)+0x5d>
c0011cd2:	31 c0                	xor    eax,eax
c0011cd4:	31 d2                	xor    edx,edx
c0011cd6:	eb dd                	jmp    c0011cb5 <SysReadDir(regs*)+0x5d>

c0011cd8 <SysIsATTY(regs*)>:
c0011cd8:	83 ec 0c             	sub    esp,0xc
c0011cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cdf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ce2:	83 f8 02             	cmp    eax,0x2
c0011ce5:	76 07                	jbe    c0011cee <SysIsATTY(regs*)+0x16>
c0011ce7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011cec:	75 26                	jne    c0011d14 <SysIsATTY(regs*)+0x3c>
c0011cee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cf3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cf6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011cfc:	85 c0                	test   eax,eax
c0011cfe:	74 24                	je     c0011d24 <SysIsATTY(regs*)+0x4c>
c0011d00:	83 ec 0c             	sub    esp,0xc
c0011d03:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d05:	50                   	push   eax
c0011d06:	ff 12                	call   DWORD PTR [edx]
c0011d08:	31 d2                	xor    edx,edx
c0011d0a:	0f b6 c0             	movzx  eax,al
c0011d0d:	83 c4 10             	add    esp,0x10
c0011d10:	83 c4 0c             	add    esp,0xc
c0011d13:	c3                   	ret    
c0011d14:	83 ec 0c             	sub    esp,0xc
c0011d17:	50                   	push   eax
c0011d18:	e8 96 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d1d:	83 c4 10             	add    esp,0x10
c0011d20:	85 c0                	test   eax,eax
c0011d22:	75 dc                	jne    c0011d00 <SysIsATTY(regs*)+0x28>
c0011d24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d29:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d2e:	83 c4 0c             	add    esp,0xc
c0011d31:	c3                   	ret    

c0011d32 <SysSeek(regs*)>:
c0011d32:	53                   	push   ebx
c0011d33:	83 ec 08             	sub    esp,0x8
c0011d36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d3d:	8d 50 fd             	lea    edx,[eax-0x3]
c0011d40:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011d46:	77 32                	ja     c0011d7a <SysSeek(regs*)+0x48>
c0011d48:	83 ec 0c             	sub    esp,0xc
c0011d4b:	50                   	push   eax
c0011d4c:	e8 62 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d51:	83 c4 0c             	add    esp,0xc
c0011d54:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011d57:	31 db                	xor    ebx,ebx
c0011d59:	53                   	push   ebx
c0011d5a:	51                   	push   ecx
c0011d5b:	50                   	push   eax
c0011d5c:	e8 6d 9c ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0011d61:	83 c4 10             	add    esp,0x10
c0011d64:	85 c0                	test   eax,eax
c0011d66:	0f 95 c0             	setne  al
c0011d69:	31 d2                	xor    edx,edx
c0011d6b:	0f b6 c0             	movzx  eax,al
c0011d6e:	f7 d8                	neg    eax
c0011d70:	83 d2 00             	adc    edx,0x0
c0011d73:	83 c4 08             	add    esp,0x8
c0011d76:	f7 da                	neg    edx
c0011d78:	5b                   	pop    ebx
c0011d79:	c3                   	ret    
c0011d7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d84:	83 c4 08             	add    esp,0x8
c0011d87:	5b                   	pop    ebx
c0011d88:	c3                   	ret    

c0011d89 <SysTell(regs*)>:
c0011d89:	53                   	push   ebx
c0011d8a:	83 ec 08             	sub    esp,0x8
c0011d8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d91:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d94:	83 f8 02             	cmp    eax,0x2
c0011d97:	76 4e                	jbe    c0011de7 <SysTell(regs*)+0x5e>
c0011d99:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d9e:	76 19                	jbe    c0011db9 <SysTell(regs*)+0x30>
c0011da0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011da3:	31 d2                	xor    edx,edx
c0011da5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011dab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011db2:	31 c0                	xor    eax,eax
c0011db4:	83 c4 08             	add    esp,0x8
c0011db7:	5b                   	pop    ebx
c0011db8:	c3                   	ret    
c0011db9:	83 ec 0c             	sub    esp,0xc
c0011dbc:	50                   	push   eax
c0011dbd:	e8 f1 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011dc2:	5a                   	pop    edx
c0011dc3:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011dc6:	59                   	pop    ecx
c0011dc7:	53                   	push   ebx
c0011dc8:	50                   	push   eax
c0011dc9:	e8 ac 9c ff ff       	call   c000ba7a <File::tell(unsigned long long*)>
c0011dce:	83 c4 10             	add    esp,0x10
c0011dd1:	85 c0                	test   eax,eax
c0011dd3:	0f 95 c0             	setne  al
c0011dd6:	31 d2                	xor    edx,edx
c0011dd8:	0f b6 c0             	movzx  eax,al
c0011ddb:	f7 d8                	neg    eax
c0011ddd:	83 d2 00             	adc    edx,0x0
c0011de0:	83 c4 08             	add    esp,0x8
c0011de3:	f7 da                	neg    edx
c0011de5:	5b                   	pop    ebx
c0011de6:	c3                   	ret    
c0011de7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dec:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011df1:	83 c4 08             	add    esp,0x8
c0011df4:	5b                   	pop    ebx
c0011df5:	c3                   	ret    

c0011df6 <SysSize(regs*)>:
c0011df6:	53                   	push   ebx
c0011df7:	83 ec 18             	sub    esp,0x18
c0011dfa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011dfe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e01:	83 f8 02             	cmp    eax,0x2
c0011e04:	76 54                	jbe    c0011e5a <SysSize(regs*)+0x64>
c0011e06:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e0b:	76 19                	jbe    c0011e26 <SysSize(regs*)+0x30>
c0011e0d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e10:	31 d2                	xor    edx,edx
c0011e12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e1f:	31 c0                	xor    eax,eax
c0011e21:	83 c4 18             	add    esp,0x18
c0011e24:	5b                   	pop    ebx
c0011e25:	c3                   	ret    
c0011e26:	83 ec 0c             	sub    esp,0xc
c0011e29:	50                   	push   eax
c0011e2a:	e8 84 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e2f:	83 c4 0c             	add    esp,0xc
c0011e32:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011e36:	52                   	push   edx
c0011e37:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e3a:	52                   	push   edx
c0011e3b:	50                   	push   eax
c0011e3c:	e8 d1 9d ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c0011e41:	83 c4 10             	add    esp,0x10
c0011e44:	85 c0                	test   eax,eax
c0011e46:	0f 95 c0             	setne  al
c0011e49:	31 d2                	xor    edx,edx
c0011e4b:	0f b6 c0             	movzx  eax,al
c0011e4e:	f7 d8                	neg    eax
c0011e50:	83 d2 00             	adc    edx,0x0
c0011e53:	83 c4 18             	add    esp,0x18
c0011e56:	f7 da                	neg    edx
c0011e58:	5b                   	pop    ebx
c0011e59:	c3                   	ret    
c0011e5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e5f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e64:	83 c4 18             	add    esp,0x18
c0011e67:	5b                   	pop    ebx
c0011e68:	c3                   	ret    

c0011e69 <SysSizeFromFilename(regs*)>:
c0011e69:	57                   	push   edi
c0011e6a:	56                   	push   esi
c0011e6b:	53                   	push   ebx
c0011e6c:	83 ec 20             	sub    esp,0x20
c0011e6f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011e73:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011e76:	83 fb 02             	cmp    ebx,0x2
c0011e79:	0f 86 8a 00 00 00    	jbe    c0011f09 <SysSizeFromFilename(regs*)+0xa0>
c0011e7f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e85:	76 1b                	jbe    c0011ea2 <SysSizeFromFilename(regs*)+0x39>
c0011e87:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e8a:	31 d2                	xor    edx,edx
c0011e8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e99:	83 c4 20             	add    esp,0x20
c0011e9c:	31 c0                	xor    eax,eax
c0011e9e:	5b                   	pop    ebx
c0011e9f:	5e                   	pop    esi
c0011ea0:	5f                   	pop    edi
c0011ea1:	c3                   	ret    
c0011ea2:	83 ec 0c             	sub    esp,0xc
c0011ea5:	68 14 01 00 00       	push   0x114
c0011eaa:	e8 07 5c ff ff       	call   c0007ab6 <malloc>
c0011eaf:	83 c4 0c             	add    esp,0xc
c0011eb2:	89 c7                	mov    edi,eax
c0011eb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011eb9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ebc:	50                   	push   eax
c0011ebd:	53                   	push   ebx
c0011ebe:	57                   	push   edi
c0011ebf:	e8 84 99 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c0011ec4:	83 c4 0c             	add    esp,0xc
c0011ec7:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011ecb:	50                   	push   eax
c0011ecc:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011ecf:	52                   	push   edx
c0011ed0:	57                   	push   edi
c0011ed1:	e8 3c 9d ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c0011ed6:	83 c4 10             	add    esp,0x10
c0011ed9:	85 ff                	test   edi,edi
c0011edb:	74 14                	je     c0011ef1 <SysSizeFromFilename(regs*)+0x88>
c0011edd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ee1:	8b 17                	mov    edx,DWORD PTR [edi]
c0011ee3:	83 ec 0c             	sub    esp,0xc
c0011ee6:	57                   	push   edi
c0011ee7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef1:	85 c0                	test   eax,eax
c0011ef3:	0f 95 c0             	setne  al
c0011ef6:	31 d2                	xor    edx,edx
c0011ef8:	0f b6 c0             	movzx  eax,al
c0011efb:	f7 d8                	neg    eax
c0011efd:	83 d2 00             	adc    edx,0x0
c0011f00:	83 c4 20             	add    esp,0x20
c0011f03:	f7 da                	neg    edx
c0011f05:	5b                   	pop    ebx
c0011f06:	5e                   	pop    esi
c0011f07:	5f                   	pop    edi
c0011f08:	c3                   	ret    
c0011f09:	83 c4 20             	add    esp,0x20
c0011f0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f11:	5b                   	pop    ebx
c0011f12:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f17:	5e                   	pop    esi
c0011f18:	5f                   	pop    edi
c0011f19:	c3                   	ret    

c0011f1a <SysClose(regs*)>:
c0011f1a:	53                   	push   ebx
c0011f1b:	83 ec 08             	sub    esp,0x8
c0011f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f25:	83 f8 02             	cmp    eax,0x2
c0011f28:	76 41                	jbe    c0011f6b <SysClose(regs*)+0x51>
c0011f2a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011f30:	83 fa 01             	cmp    edx,0x1
c0011f33:	76 2d                	jbe    c0011f62 <SysClose(regs*)+0x48>
c0011f35:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f3a:	77 2f                	ja     c0011f6b <SysClose(regs*)+0x51>
c0011f3c:	83 ec 0c             	sub    esp,0xc
c0011f3f:	50                   	push   eax
c0011f40:	e8 6e 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f45:	89 c3                	mov    ebx,eax
c0011f47:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f4a:	e8 1f 9a ff ff       	call   c000b96e <File::close()>
c0011f4f:	83 c4 10             	add    esp,0x10
c0011f52:	85 db                	test   ebx,ebx
c0011f54:	74 0c                	je     c0011f62 <SysClose(regs*)+0x48>
c0011f56:	83 ec 0c             	sub    esp,0xc
c0011f59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f5b:	53                   	push   ebx
c0011f5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	31 c0                	xor    eax,eax
c0011f64:	31 d2                	xor    edx,edx
c0011f66:	83 c4 08             	add    esp,0x8
c0011f69:	5b                   	pop    ebx
c0011f6a:	c3                   	ret    
c0011f6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f70:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f75:	83 c4 08             	add    esp,0x8
c0011f78:	5b                   	pop    ebx
c0011f79:	c3                   	ret    

c0011f7a <SysOpenDir(regs*)>:
c0011f7a:	56                   	push   esi
c0011f7b:	53                   	push   ebx
c0011f7c:	83 ec 04             	sub    esp,0x4
c0011f7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f83:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011f86:	85 c9                	test   ecx,ecx
c0011f88:	74 5d                	je     c0011fe7 <SysOpenDir(regs*)+0x6d>
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	68 14 01 00 00       	push   0x114
c0011f92:	e8 1f 5b ff ff       	call   c0007ab6 <malloc>
c0011f97:	83 c4 0c             	add    esp,0xc
c0011f9a:	89 c6                	mov    esi,eax
c0011f9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fa1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fa4:	50                   	push   eax
c0011fa5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011fa8:	52                   	push   edx
c0011fa9:	56                   	push   esi
c0011faa:	e8 23 9e ff ff       	call   c000bdd2 <Directory::Directory(char const*, Process*)>
c0011faf:	83 c4 10             	add    esp,0x10
c0011fb2:	85 f6                	test   esi,esi
c0011fb4:	74 31                	je     c0011fe7 <SysOpenDir(regs*)+0x6d>
c0011fb6:	83 ec 0c             	sub    esp,0xc
c0011fb9:	56                   	push   esi
c0011fba:	e8 db 9e ff ff       	call   c000be9a <Directory::open()>
c0011fbf:	83 c4 10             	add    esp,0x10
c0011fc2:	85 c0                	test   eax,eax
c0011fc4:	75 21                	jne    c0011fe7 <SysOpenDir(regs*)+0x6d>
c0011fc6:	83 ec 0c             	sub    esp,0xc
c0011fc9:	56                   	push   esi
c0011fca:	e8 e7 71 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011fcf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	89 02                	mov    DWORD PTR [edx],eax
c0011fd7:	c1 f8 1f             	sar    eax,0x1f
c0011fda:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011fdd:	83 c4 04             	add    esp,0x4
c0011fe0:	31 c0                	xor    eax,eax
c0011fe2:	31 d2                	xor    edx,edx
c0011fe4:	5b                   	pop    ebx
c0011fe5:	5e                   	pop    esi
c0011fe6:	c3                   	ret    
c0011fe7:	83 c4 04             	add    esp,0x4
c0011fea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fef:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff4:	5b                   	pop    ebx
c0011ff5:	5e                   	pop    esi
c0011ff6:	c3                   	ret    

c0011ff7 <SysMakeDir(regs*)>:
c0011ff7:	56                   	push   esi
c0011ff8:	53                   	push   ebx
c0011ff9:	83 ec 10             	sub    esp,0x10
c0011ffc:	68 14 01 00 00       	push   0x114
c0012001:	e8 b0 5a ff ff       	call   c0007ab6 <malloc>
c0012006:	83 c4 0c             	add    esp,0xc
c0012009:	89 c3                	mov    ebx,eax
c001200b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012010:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012013:	50                   	push   eax
c0012014:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012018:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001201b:	52                   	push   edx
c001201c:	53                   	push   ebx
c001201d:	e8 b0 9d ff ff       	call   c000bdd2 <Directory::Directory(char const*, Process*)>
c0012022:	83 c4 10             	add    esp,0x10
c0012025:	85 db                	test   ebx,ebx
c0012027:	74 2c                	je     c0012055 <SysMakeDir(regs*)+0x5e>
c0012029:	83 ec 0c             	sub    esp,0xc
c001202c:	53                   	push   ebx
c001202d:	e8 48 a0 ff ff       	call   c000c07a <Directory::create()>
c0012032:	89 c6                	mov    esi,eax
c0012034:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012039:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001203c:	83 c4 10             	add    esp,0x10
c001203f:	31 c0                	xor    eax,eax
c0012041:	85 f6                	test   esi,esi
c0012043:	0f 95 c0             	setne  al
c0012046:	31 d2                	xor    edx,edx
c0012048:	f7 d8                	neg    eax
c001204a:	83 d2 00             	adc    edx,0x0
c001204d:	83 c4 04             	add    esp,0x4
c0012050:	f7 da                	neg    edx
c0012052:	5b                   	pop    ebx
c0012053:	5e                   	pop    esi
c0012054:	c3                   	ret    
c0012055:	83 c4 04             	add    esp,0x4
c0012058:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001205d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012062:	5b                   	pop    ebx
c0012063:	5e                   	pop    esi
c0012064:	c3                   	ret    

c0012065 <SysCloseDir(regs*)>:
c0012065:	53                   	push   ebx
c0012066:	83 ec 08             	sub    esp,0x8
c0012069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001206d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012070:	8d 50 fd             	lea    edx,[eax-0x3]
c0012073:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012079:	77 2f                	ja     c00120aa <SysCloseDir(regs*)+0x45>
c001207b:	83 ec 0c             	sub    esp,0xc
c001207e:	50                   	push   eax
c001207f:	e8 2f 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012084:	89 c3                	mov    ebx,eax
c0012086:	89 04 24             	mov    DWORD PTR [esp],eax
c0012089:	e8 68 9e ff ff       	call   c000bef6 <Directory::close()>
c001208e:	83 c4 10             	add    esp,0x10
c0012091:	85 db                	test   ebx,ebx
c0012093:	74 0c                	je     c00120a1 <SysCloseDir(regs*)+0x3c>
c0012095:	83 ec 0c             	sub    esp,0xc
c0012098:	8b 03                	mov    eax,DWORD PTR [ebx]
c001209a:	53                   	push   ebx
c001209b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001209e:	83 c4 10             	add    esp,0x10
c00120a1:	31 c0                	xor    eax,eax
c00120a3:	31 d2                	xor    edx,edx
c00120a5:	83 c4 08             	add    esp,0x8
c00120a8:	5b                   	pop    ebx
c00120a9:	c3                   	ret    
c00120aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120b4:	83 c4 08             	add    esp,0x8
c00120b7:	5b                   	pop    ebx
c00120b8:	c3                   	ret    

c00120b9 <SysWait(regs*)>:
c00120b9:	83 ec 10             	sub    esp,0x10
c00120bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120c0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00120c3:	52                   	push   edx
c00120c4:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00120c7:	51                   	push   ecx
c00120c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00120cb:	50                   	push   eax
c00120cc:	e8 d3 3d 00 00       	call   c0015ea4 <waitTask(int, int*, int)>
c00120d1:	83 c4 1c             	add    esp,0x1c
c00120d4:	89 c2                	mov    edx,eax
c00120d6:	c1 fa 1f             	sar    edx,0x1f
c00120d9:	c3                   	ret    

c00120da <SysNotImpl(regs*)>:
c00120da:	83 ec 18             	sub    esp,0x18
c00120dd:	68 c6 1f 02 c0       	push   0xc0021fc6
c00120e2:	e8 b2 f2 ff ff       	call   c0011399 <KePanic(char const*)>
c00120e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120f1:	83 c4 1c             	add    esp,0x1c
c00120f4:	c3                   	ret    

c00120f5 <SysPanic(regs*)>:
c00120f5:	83 ec 18             	sub    esp,0x18
c00120f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00120fc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00120ff:	50                   	push   eax
c0012100:	e8 94 f2 ff ff       	call   c0011399 <KePanic(char const*)>
c0012105:	b8 01 00 00 00       	mov    eax,0x1
c001210a:	31 d2                	xor    edx,edx
c001210c:	83 c4 1c             	add    esp,0x1c
c001210f:	c3                   	ret    

c0012110 <SysRmdir(regs*)>:
c0012110:	56                   	push   esi
c0012111:	53                   	push   ebx
c0012112:	83 ec 20             	sub    esp,0x20
c0012115:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012119:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001211c:	68 14 01 00 00       	push   0x114
c0012121:	e8 90 59 ff ff       	call   c0007ab6 <malloc>
c0012126:	83 c4 0c             	add    esp,0xc
c0012129:	89 c3                	mov    ebx,eax
c001212b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012130:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012133:	50                   	push   eax
c0012134:	56                   	push   esi
c0012135:	53                   	push   ebx
c0012136:	e8 0d 97 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c001213b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001213e:	e8 9b 99 ff ff       	call   c000bade <File::unlink()>
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	85 db                	test   ebx,ebx
c0012148:	74 14                	je     c001215e <SysRmdir(regs*)+0x4e>
c001214a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001214e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012150:	83 ec 0c             	sub    esp,0xc
c0012153:	53                   	push   ebx
c0012154:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012157:	83 c4 10             	add    esp,0x10
c001215a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001215e:	85 c0                	test   eax,eax
c0012160:	0f 95 c0             	setne  al
c0012163:	31 d2                	xor    edx,edx
c0012165:	0f b6 c0             	movzx  eax,al
c0012168:	f7 d8                	neg    eax
c001216a:	83 d2 00             	adc    edx,0x0
c001216d:	83 c4 14             	add    esp,0x14
c0012170:	f7 da                	neg    edx
c0012172:	5b                   	pop    ebx
c0012173:	5e                   	pop    esi
c0012174:	c3                   	ret    

c0012175 <SysUnlink(regs*)>:
c0012175:	56                   	push   esi
c0012176:	53                   	push   ebx
c0012177:	83 ec 20             	sub    esp,0x20
c001217a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001217e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012181:	68 14 01 00 00       	push   0x114
c0012186:	e8 2b 59 ff ff       	call   c0007ab6 <malloc>
c001218b:	83 c4 0c             	add    esp,0xc
c001218e:	89 c3                	mov    ebx,eax
c0012190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012195:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012198:	50                   	push   eax
c0012199:	56                   	push   esi
c001219a:	53                   	push   ebx
c001219b:	e8 a8 96 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c00121a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121a3:	e8 36 99 ff ff       	call   c000bade <File::unlink()>
c00121a8:	83 c4 10             	add    esp,0x10
c00121ab:	85 db                	test   ebx,ebx
c00121ad:	74 14                	je     c00121c3 <SysUnlink(regs*)+0x4e>
c00121af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00121b5:	83 ec 0c             	sub    esp,0xc
c00121b8:	53                   	push   ebx
c00121b9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00121bc:	83 c4 10             	add    esp,0x10
c00121bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121c3:	85 c0                	test   eax,eax
c00121c5:	0f 95 c0             	setne  al
c00121c8:	31 d2                	xor    edx,edx
c00121ca:	0f b6 c0             	movzx  eax,al
c00121cd:	f7 d8                	neg    eax
c00121cf:	83 d2 00             	adc    edx,0x0
c00121d2:	83 c4 14             	add    esp,0x14
c00121d5:	f7 da                	neg    edx
c00121d7:	5b                   	pop    ebx
c00121d8:	5e                   	pop    esi
c00121d9:	c3                   	ret    

c00121da <SysGetArgv(regs*)>:
c00121da:	83 ec 0c             	sub    esp,0xc
c00121dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00121e1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00121e4:	85 c0                	test   eax,eax
c00121e6:	78 2c                	js     c0012214 <SysGetArgv(regs*)+0x3a>
c00121e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00121ee:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00121f1:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00121f7:	7d 1b                	jge    c0012214 <SysGetArgv(regs*)+0x3a>
c00121f9:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012200:	85 c0                	test   eax,eax
c0012202:	74 18                	je     c001221c <SysGetArgv(regs*)+0x42>
c0012204:	83 ec 08             	sub    esp,0x8
c0012207:	50                   	push   eax
c0012208:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001220b:	50                   	push   eax
c001220c:	e8 2f e4 fe ff       	call   c0000640 <strcpy>
c0012211:	83 c4 10             	add    esp,0x10
c0012214:	31 c0                	xor    eax,eax
c0012216:	31 d2                	xor    edx,edx
c0012218:	83 c4 0c             	add    esp,0xc
c001221b:	c3                   	ret    
c001221c:	b8 01 00 00 00       	mov    eax,0x1
c0012221:	31 d2                	xor    edx,edx
c0012223:	83 c4 0c             	add    esp,0xc
c0012226:	c3                   	ret    

c0012227 <SysUSleep(regs*)>:
c0012227:	83 ec 1c             	sub    esp,0x1c
c001222a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001222e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012231:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012234:	6a 00                	push   0x0
c0012236:	6a 64                	push   0x64
c0012238:	52                   	push   edx
c0012239:	50                   	push   eax
c001223a:	e8 91 d0 00 00       	call   c001f2d0 <__udivdi3>
c001223f:	83 c4 14             	add    esp,0x14
c0012242:	50                   	push   eax
c0012243:	e8 40 3d 00 00       	call   c0015f88 <milliTenthSleep(unsigned int)>
c0012248:	31 c0                	xor    eax,eax
c001224a:	31 d2                	xor    edx,edx
c001224c:	83 c4 1c             	add    esp,0x1c
c001224f:	c3                   	ret    

c0012250 <SysSpawn(regs*)>:
c0012250:	56                   	push   esi
c0012251:	53                   	push   ebx
c0012252:	83 ec 04             	sub    esp,0x4
c0012255:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012259:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001225c:	85 f6                	test   esi,esi
c001225e:	75 0a                	jne    c001226a <SysSpawn(regs*)+0x1a>
c0012260:	83 c4 04             	add    esp,0x4
c0012263:	31 c0                	xor    eax,eax
c0012265:	31 d2                	xor    edx,edx
c0012267:	5b                   	pop    ebx
c0012268:	5e                   	pop    esi
c0012269:	c3                   	ret    
c001226a:	83 ec 0c             	sub    esp,0xc
c001226d:	68 24 07 00 00       	push   0x724
c0012272:	e8 3f 58 ff ff       	call   c0007ab6 <malloc>
c0012277:	83 c4 10             	add    esp,0x10
c001227a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001227d:	89 c6                	mov    esi,eax
c001227f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012282:	85 c9                	test   ecx,ecx
c0012284:	75 39                	jne    c00122bf <SysSpawn(regs*)+0x6f>
c0012286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001228b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001228e:	52                   	push   edx
c001228f:	50                   	push   eax
c0012290:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012293:	50                   	push   eax
c0012294:	56                   	push   esi
c0012295:	e8 3e 33 00 00       	call   c00155d8 <Process::Process(char const*, Process*, char**)>
c001229a:	83 c4 10             	add    esp,0x10
c001229d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00122a4:	75 ba                	jne    c0012260 <SysSpawn(regs*)+0x10>
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	56                   	push   esi
c00122aa:	e8 65 38 00 00       	call   c0015b14 <Process::createUserThread()>
c00122af:	8b 06                	mov    eax,DWORD PTR [esi]
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	89 c2                	mov    edx,eax
c00122b6:	83 c4 04             	add    esp,0x4
c00122b9:	c1 fa 1f             	sar    edx,0x1f
c00122bc:	5b                   	pop    ebx
c00122bd:	5e                   	pop    esi
c00122be:	c3                   	ret    
c00122bf:	31 c0                	xor    eax,eax
c00122c1:	eb cb                	jmp    c001228e <SysSpawn(regs*)+0x3e>

c00122c3 <SysGetEnv(regs*)>:
c00122c3:	57                   	push   edi
c00122c4:	56                   	push   esi
c00122c5:	53                   	push   ebx
c00122c6:	83 ec 1c             	sub    esp,0x1c
c00122c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00122cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122d2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122d5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122d8:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122db:	51                   	push   ecx
c00122dc:	e8 70 ef ff ff       	call   c0011251 <KeGetProcessTotalEnvCount(Process*)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	39 c7                	cmp    edi,eax
c00122e6:	7c 14                	jl     c00122fc <SysGetEnv(regs*)+0x39>
c00122e8:	85 f6                	test   esi,esi
c00122ea:	75 0b                	jne    c00122f7 <SysGetEnv(regs*)+0x34>
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	31 c0                	xor    eax,eax
c00122f1:	5b                   	pop    ebx
c00122f2:	31 d2                	xor    edx,edx
c00122f4:	5e                   	pop    esi
c00122f5:	5f                   	pop    edi
c00122f6:	c3                   	ret    
c00122f7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122fa:	eb f0                	jmp    c00122ec <SysGetEnv(regs*)+0x29>
c00122fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012300:	83 ec 04             	sub    esp,0x4
c0012303:	57                   	push   edi
c0012304:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001230a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001230d:	57                   	push   edi
c001230e:	50                   	push   eax
c001230f:	e8 5d ef ff ff       	call   c0011271 <KeGetProcessEnvPair(Process*, int)>
c0012314:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001231b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001231f:	83 c4 0c             	add    esp,0xc
c0012322:	85 d2                	test   edx,edx
c0012324:	75 23                	jne    c0012349 <SysGetEnv(regs*)+0x86>
c0012326:	83 ec 0c             	sub    esp,0xc
c0012329:	50                   	push   eax
c001232a:	e8 41 e2 fe ff       	call   c0000570 <strlen>
c001232f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012332:	89 c3                	mov    ebx,eax
c0012334:	e8 37 e2 fe ff       	call   c0000570 <strlen>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012340:	83 c4 10             	add    esp,0x10
c0012343:	31 d2                	xor    edx,edx
c0012345:	5b                   	pop    ebx
c0012346:	5e                   	pop    esi
c0012347:	5f                   	pop    edi
c0012348:	c3                   	ret    
c0012349:	83 ec 08             	sub    esp,0x8
c001234c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001234f:	50                   	push   eax
c0012350:	56                   	push   esi
c0012351:	e8 ea e2 fe ff       	call   c0000640 <strcpy>
c0012356:	58                   	pop    eax
c0012357:	5a                   	pop    edx
c0012358:	68 e0 1f 02 c0       	push   0xc0021fe0
c001235d:	56                   	push   esi
c001235e:	e8 dd e4 fe ff       	call   c0000840 <strcat>
c0012363:	59                   	pop    ecx
c0012364:	5b                   	pop    ebx
c0012365:	57                   	push   edi
c0012366:	56                   	push   esi
c0012367:	e8 d4 e4 fe ff       	call   c0000840 <strcat>
c001236c:	83 c4 10             	add    esp,0x10
c001236f:	e9 78 ff ff ff       	jmp    c00122ec <SysGetEnv(regs*)+0x29>

c0012374 <SysSetFatAttrib(regs*)>:
c0012374:	57                   	push   edi
c0012375:	56                   	push   esi
c0012376:	53                   	push   ebx
c0012377:	83 ec 1c             	sub    esp,0x1c
c001237a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001237e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012381:	68 14 01 00 00       	push   0x114
c0012386:	e8 2b 57 ff ff       	call   c0007ab6 <malloc>
c001238b:	83 c4 0c             	add    esp,0xc
c001238e:	89 c3                	mov    ebx,eax
c0012390:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012395:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012398:	50                   	push   eax
c0012399:	57                   	push   edi
c001239a:	53                   	push   ebx
c001239b:	e8 a8 94 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c00123a0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00123a3:	83 c4 0c             	add    esp,0xc
c00123a6:	0f b6 d4             	movzx  edx,ah
c00123a9:	0f b6 c0             	movzx  eax,al
c00123ac:	52                   	push   edx
c00123ad:	50                   	push   eax
c00123ae:	53                   	push   ebx
c00123af:	e8 c4 97 ff ff       	call   c000bb78 <File::chfatattr(unsigned char, unsigned char)>
c00123b4:	83 c4 10             	add    esp,0x10
c00123b7:	85 db                	test   ebx,ebx
c00123b9:	74 14                	je     c00123cf <SysSetFatAttrib(regs*)+0x5b>
c00123bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00123c1:	83 ec 0c             	sub    esp,0xc
c00123c4:	53                   	push   ebx
c00123c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00123c8:	83 c4 10             	add    esp,0x10
c00123cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123cf:	85 c0                	test   eax,eax
c00123d1:	0f 95 c0             	setne  al
c00123d4:	31 d2                	xor    edx,edx
c00123d6:	0f b6 c0             	movzx  eax,al
c00123d9:	f7 d8                	neg    eax
c00123db:	83 d2 00             	adc    edx,0x0
c00123de:	83 c4 10             	add    esp,0x10
c00123e1:	f7 da                	neg    edx
c00123e3:	5b                   	pop    ebx
c00123e4:	5e                   	pop    esi
c00123e5:	5f                   	pop    edi
c00123e6:	c3                   	ret    

c00123e7 <SysPipe(regs*)>:
c00123e7:	57                   	push   edi
c00123e8:	56                   	push   esi
c00123e9:	53                   	push   ebx
c00123ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ee:	83 ec 0c             	sub    esp,0xc
c00123f1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00123f4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00123f7:	6a 20                	push   0x20
c00123f9:	e8 b8 56 ff ff       	call   c0007ab6 <malloc>
c00123fe:	89 c3                	mov    ebx,eax
c0012400:	58                   	pop    eax
c0012401:	5a                   	pop    edx
c0012402:	68 00 50 00 00       	push   0x5000
c0012407:	53                   	push   ebx
c0012408:	e8 1b 60 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c001240d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012410:	e8 a1 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012415:	89 07                	mov    DWORD PTR [edi],eax
c0012417:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001241a:	e8 97 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001241f:	83 c4 10             	add    esp,0x10
c0012422:	89 06                	mov    DWORD PTR [esi],eax
c0012424:	31 d2                	xor    edx,edx
c0012426:	5b                   	pop    ebx
c0012427:	31 c0                	xor    eax,eax
c0012429:	5e                   	pop    esi
c001242a:	5f                   	pop    edi
c001242b:	c3                   	ret    

c001242c <SysGetUnixTime(regs*)>:
c001242c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012431:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012437:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001243b:	e9 7e 9e ff ff       	jmp    c000c2be <Clock::timeInSecondsLocal()>

c0012440 <string_ends_with(char const*, char const*)>:
c0012440:	57                   	push   edi
c0012441:	56                   	push   esi
c0012442:	53                   	push   ebx
c0012443:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012447:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001244b:	83 ec 0c             	sub    esp,0xc
c001244e:	53                   	push   ebx
c001244f:	e8 1c e1 fe ff       	call   c0000570 <strlen>
c0012454:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012457:	89 c6                	mov    esi,eax
c0012459:	e8 12 e1 fe ff       	call   c0000570 <strlen>
c001245e:	83 c4 10             	add    esp,0x10
c0012461:	39 c6                	cmp    esi,eax
c0012463:	7d 06                	jge    c001246b <string_ends_with(char const*, char const*)+0x2b>
c0012465:	5b                   	pop    ebx
c0012466:	31 c0                	xor    eax,eax
c0012468:	5e                   	pop    esi
c0012469:	5f                   	pop    edi
c001246a:	c3                   	ret    
c001246b:	83 ec 08             	sub    esp,0x8
c001246e:	29 c6                	sub    esi,eax
c0012470:	57                   	push   edi
c0012471:	01 f3                	add    ebx,esi
c0012473:	53                   	push   ebx
c0012474:	e8 d7 e2 fe ff       	call   c0000750 <strcmp>
c0012479:	83 c4 10             	add    esp,0x10
c001247c:	85 c0                	test   eax,eax
c001247e:	5b                   	pop    ebx
c001247f:	0f 94 c0             	sete   al
c0012482:	5e                   	pop    esi
c0012483:	0f b6 c0             	movzx  eax,al
c0012486:	5f                   	pop    edi
c0012487:	c3                   	ret    

c0012488 <SysOpen(regs*)>:
c0012488:	56                   	push   esi
c0012489:	53                   	push   ebx
c001248a:	81 ec 04 01 00 00    	sub    esp,0x104
c0012490:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012497:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001249a:	85 c0                	test   eax,eax
c001249c:	0f 84 bc 01 00 00    	je     c001265e <SysOpen(regs*)+0x1d6>
c00124a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124a5:	85 c0                	test   eax,eax
c00124a7:	0f 84 b1 01 00 00    	je     c001265e <SysOpen(regs*)+0x1d6>
c00124ad:	6a 00                	push   0x0
c00124af:	68 e2 1f 02 c0       	push   0xc0021fe2
c00124b4:	50                   	push   eax
c00124b5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00124b9:	56                   	push   esi
c00124ba:	e8 2b 91 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00124bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00124c2:	e8 a9 e0 fe ff       	call   c0000570 <strlen>
c00124c7:	83 c4 10             	add    esp,0x10
c00124ca:	83 e8 01             	sub    eax,0x1
c00124cd:	74 21                	je     c00124f0 <SysOpen(regs*)+0x68>
c00124cf:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00124d3:	eb 12                	jmp    c00124e7 <SysOpen(regs*)+0x5f>
c00124d5:	83 fa 3a             	cmp    edx,0x3a
c00124d8:	74 12                	je     c00124ec <SysOpen(regs*)+0x64>
c00124da:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00124de:	83 e8 01             	sub    eax,0x1
c00124e1:	74 0d                	je     c00124f0 <SysOpen(regs*)+0x68>
c00124e3:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00124e7:	83 fa 2e             	cmp    edx,0x2e
c00124ea:	75 e9                	jne    c00124d5 <SysOpen(regs*)+0x4d>
c00124ec:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00124f0:	83 ec 08             	sub    esp,0x8
c00124f3:	68 e6 1f 02 c0       	push   0xc0021fe6
c00124f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124fb:	50                   	push   eax
c00124fc:	e8 3f ff ff ff       	call   c0012440 <string_ends_with(char const*, char const*)>
c0012501:	83 c4 10             	add    esp,0x10
c0012504:	85 c0                	test   eax,eax
c0012506:	74 1d                	je     c0012525 <SysOpen(regs*)+0x9d>
c0012508:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001250b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012511:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012518:	81 c4 04 01 00 00    	add    esp,0x104
c001251e:	31 c0                	xor    eax,eax
c0012520:	31 d2                	xor    edx,edx
c0012522:	5b                   	pop    ebx
c0012523:	5e                   	pop    esi
c0012524:	c3                   	ret    
c0012525:	83 ec 08             	sub    esp,0x8
c0012528:	68 eb 1f 02 c0       	push   0xc0021feb
c001252d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012530:	50                   	push   eax
c0012531:	e8 0a ff ff ff       	call   c0012440 <string_ends_with(char const*, char const*)>
c0012536:	83 c4 10             	add    esp,0x10
c0012539:	85 c0                	test   eax,eax
c001253b:	75 cb                	jne    c0012508 <SysOpen(regs*)+0x80>
c001253d:	83 ec 08             	sub    esp,0x8
c0012540:	68 e7 1f 02 c0       	push   0xc0021fe7
c0012545:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012548:	50                   	push   eax
c0012549:	e8 02 e2 fe ff       	call   c0000750 <strcmp>
c001254e:	83 c4 10             	add    esp,0x10
c0012551:	85 c0                	test   eax,eax
c0012553:	74 b3                	je     c0012508 <SysOpen(regs*)+0x80>
c0012555:	83 ec 08             	sub    esp,0x8
c0012558:	68 e6 1f 02 c0       	push   0xc0021fe6
c001255d:	56                   	push   esi
c001255e:	e8 dd fe ff ff       	call   c0012440 <string_ends_with(char const*, char const*)>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	85 c0                	test   eax,eax
c0012568:	75 9e                	jne    c0012508 <SysOpen(regs*)+0x80>
c001256a:	83 ec 08             	sub    esp,0x8
c001256d:	68 f0 1f 02 c0       	push   0xc0021ff0
c0012572:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012575:	50                   	push   eax
c0012576:	e8 c5 fe ff ff       	call   c0012440 <string_ends_with(char const*, char const*)>
c001257b:	83 c4 10             	add    esp,0x10
c001257e:	85 c0                	test   eax,eax
c0012580:	0f 85 eb 00 00 00    	jne    c0012671 <SysOpen(regs*)+0x1e9>
c0012586:	83 ec 08             	sub    esp,0x8
c0012589:	68 f5 1f 02 c0       	push   0xc0021ff5
c001258e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012591:	50                   	push   eax
c0012592:	e8 a9 fe ff ff       	call   c0012440 <string_ends_with(char const*, char const*)>
c0012597:	83 c4 10             	add    esp,0x10
c001259a:	85 c0                	test   eax,eax
c001259c:	0f 85 cf 00 00 00    	jne    c0012671 <SysOpen(regs*)+0x1e9>
c00125a2:	83 ec 08             	sub    esp,0x8
c00125a5:	68 f1 1f 02 c0       	push   0xc0021ff1
c00125aa:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00125ad:	51                   	push   ecx
c00125ae:	e8 9d e1 fe ff       	call   c0000750 <strcmp>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	85 c0                	test   eax,eax
c00125b8:	0f 84 b3 00 00 00    	je     c0012671 <SysOpen(regs*)+0x1e9>
c00125be:	83 ec 08             	sub    esp,0x8
c00125c1:	68 f0 1f 02 c0       	push   0xc0021ff0
c00125c6:	56                   	push   esi
c00125c7:	e8 74 fe ff ff       	call   c0012440 <string_ends_with(char const*, char const*)>
c00125cc:	83 c4 10             	add    esp,0x10
c00125cf:	85 c0                	test   eax,eax
c00125d1:	0f 85 9a 00 00 00    	jne    c0012671 <SysOpen(regs*)+0x1e9>
c00125d7:	83 ec 0c             	sub    esp,0xc
c00125da:	68 14 01 00 00       	push   0x114
c00125df:	e8 d2 54 ff ff       	call   c0007ab6 <malloc>
c00125e4:	83 c4 0c             	add    esp,0xc
c00125e7:	89 c6                	mov    esi,eax
c00125e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125f1:	50                   	push   eax
c00125f2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00125f5:	52                   	push   edx
c00125f6:	56                   	push   esi
c00125f7:	e8 4c 92 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c00125fc:	83 c4 10             	add    esp,0x10
c00125ff:	85 f6                	test   esi,esi
c0012601:	74 5b                	je     c001265e <SysOpen(regs*)+0x1d6>
c0012603:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012606:	0f b6 c2             	movzx  eax,dl
c0012609:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001260c:	89 d0                	mov    eax,edx
c001260e:	83 e0 01             	and    eax,0x1
c0012611:	f6 c2 02             	test   dl,0x2
c0012614:	74 03                	je     c0012619 <SysOpen(regs*)+0x191>
c0012616:	83 c8 02             	or     eax,0x2
c0012619:	f6 c2 04             	test   dl,0x4
c001261c:	74 03                	je     c0012621 <SysOpen(regs*)+0x199>
c001261e:	83 c8 04             	or     eax,0x4
c0012621:	f6 c2 08             	test   dl,0x8
c0012624:	74 03                	je     c0012629 <SysOpen(regs*)+0x1a1>
c0012626:	83 c8 0a             	or     eax,0xa
c0012629:	80 e2 10             	and    dl,0x10
c001262c:	74 03                	je     c0012631 <SysOpen(regs*)+0x1a9>
c001262e:	83 c8 12             	or     eax,0x12
c0012631:	83 ec 08             	sub    esp,0x8
c0012634:	50                   	push   eax
c0012635:	56                   	push   esi
c0012636:	e8 d5 92 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c001263b:	83 c4 10             	add    esp,0x10
c001263e:	85 c0                	test   eax,eax
c0012640:	75 1c                	jne    c001265e <SysOpen(regs*)+0x1d6>
c0012642:	83 ec 0c             	sub    esp,0xc
c0012645:	56                   	push   esi
c0012646:	e8 6b 6b ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001264b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001264e:	83 c4 10             	add    esp,0x10
c0012651:	89 02                	mov    DWORD PTR [edx],eax
c0012653:	c1 f8 1f             	sar    eax,0x1f
c0012656:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012659:	e9 ba fe ff ff       	jmp    c0012518 <SysOpen(regs*)+0x90>
c001265e:	81 c4 04 01 00 00    	add    esp,0x104
c0012664:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012669:	ba ff ff ff ff       	mov    edx,0xffffffff
c001266e:	5b                   	pop    ebx
c001266f:	5e                   	pop    esi
c0012670:	c3                   	ret    
c0012671:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012674:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001267a:	e9 92 fe ff ff       	jmp    c0012511 <SysOpen(regs*)+0x89>

c001267f <KeSystemCall(regs*, void*)>:
c001267f:	53                   	push   ebx
c0012680:	83 ec 08             	sub    esp,0x8
c0012683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012687:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001268a:	83 f8 3b             	cmp    eax,0x3b
c001268d:	77 16                	ja     c00126a5 <KeSystemCall(regs*, void*)+0x26>
c001268f:	8b 14 85 00 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc00]
c0012696:	85 d2                	test   edx,edx
c0012698:	74 0b                	je     c00126a5 <KeSystemCall(regs*, void*)+0x26>
c001269a:	83 ec 0c             	sub    esp,0xc
c001269d:	53                   	push   ebx
c001269e:	ff d2                	call   edx
c00126a0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00126a3:	eb 0d                	jmp    c00126b2 <KeSystemCall(regs*, void*)+0x33>
c00126a5:	52                   	push   edx
c00126a6:	52                   	push   edx
c00126a7:	50                   	push   eax
c00126a8:	68 fa 1f 02 c0       	push   0xc0021ffa
c00126ad:	e8 93 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126b2:	83 c4 10             	add    esp,0x10
c00126b5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00126ba:	31 d2                	xor    edx,edx
c00126bc:	83 c4 08             	add    esp,0x8
c00126bf:	5b                   	pop    ebx
c00126c0:	c3                   	ret    
c00126c1:	66 90                	xchg   ax,ax
c00126c3:	90                   	nop

c00126c4 <KeSwitchEndian16(unsigned short)>:
c00126c4:	83 ec 04             	sub    esp,0x4
c00126c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126cb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00126cf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126d3:	c1 f8 08             	sar    eax,0x8
c00126d6:	89 c2                	mov    edx,eax
c00126d8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126dc:	c1 e0 08             	shl    eax,0x8
c00126df:	09 d0                	or     eax,edx
c00126e1:	83 c4 04             	add    esp,0x4
c00126e4:	c3                   	ret    
c00126e5:	8d 76 00             	lea    esi,[esi+0x0]

c00126e8 <KeSwitchEndian32(unsigned int)>:
c00126e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126ec:	c1 e8 18             	shr    eax,0x18
c00126ef:	89 c2                	mov    edx,eax
c00126f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f5:	c1 e0 08             	shl    eax,0x8
c00126f8:	25 00 00 ff 00       	and    eax,0xff0000
c00126fd:	09 c2                	or     edx,eax
c00126ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012703:	c1 e8 08             	shr    eax,0x8
c0012706:	25 00 ff 00 00       	and    eax,0xff00
c001270b:	09 c2                	or     edx,eax
c001270d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012711:	c1 e0 18             	shl    eax,0x18
c0012714:	09 d0                	or     eax,edx
c0012716:	c3                   	ret    
c0012717:	90                   	nop

c0012718 <EthernetCRC32(unsigned char*, int)>:
c0012718:	83 ec 10             	sub    esp,0x10
c001271b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012720:	75 0a                	jne    c001272c <EthernetCRC32(unsigned char*, int)+0x14>
c0012722:	b8 00 00 00 00       	mov    eax,0x0
c0012727:	e9 8c 00 00 00       	jmp    c00127b8 <EthernetCRC32(unsigned char*, int)+0xa0>
c001272c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012731:	7f 09                	jg     c001273c <EthernetCRC32(unsigned char*, int)+0x24>
c0012733:	b8 00 00 00 00       	mov    eax,0x0
c0012738:	eb 7e                	jmp    c00127b8 <EthernetCRC32(unsigned char*, int)+0xa0>
c001273a:	66 90                	xchg   ax,ax
c001273c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012744:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001274c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012750:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012754:	7d 5a                	jge    c00127b0 <EthernetCRC32(unsigned char*, int)+0x98>
c0012756:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001275a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001275e:	01 d0                	add    eax,edx
c0012760:	8a 00                	mov    al,BYTE PTR [eax]
c0012762:	0f b6 c0             	movzx  eax,al
c0012765:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012769:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012771:	8d 76 00             	lea    esi,[esi+0x0]
c0012774:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012779:	7f 2d                	jg     c00127a8 <EthernetCRC32(unsigned char*, int)+0x90>
c001277b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001277f:	83 e0 01             	and    eax,0x1
c0012782:	74 10                	je     c0012794 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012788:	d1 e8                	shr    eax,1
c001278a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001278f:	eb 0b                	jmp    c001279c <EthernetCRC32(unsigned char*, int)+0x84>
c0012791:	8d 76 00             	lea    esi,[esi+0x0]
c0012794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012798:	d1 e8                	shr    eax,1
c001279a:	66 90                	xchg   ax,ax
c001279c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127a0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00127a5:	eb cd                	jmp    c0012774 <EthernetCRC32(unsigned char*, int)+0x5c>
c00127a7:	90                   	nop
c00127a8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00127ad:	eb 9d                	jmp    c001274c <EthernetCRC32(unsigned char*, int)+0x34>
c00127af:	90                   	nop
c00127b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127b4:	f7 d0                	not    eax
c00127b6:	66 90                	xchg   ax,ax
c00127b8:	83 c4 10             	add    esp,0x10
c00127bb:	c3                   	ret    

c00127bc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00127bc:	83 ec 2c             	sub    esp,0x2c
c00127bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127c3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00127c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127d7:	0f b7 c0             	movzx  eax,ax
c00127da:	3d 06 08 00 00       	cmp    eax,0x806
c00127df:	75 13                	jne    c00127f4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00127e1:	83 ec 0c             	sub    esp,0xc
c00127e4:	68 0e 20 02 c0       	push   0xc002200e
c00127e9:	e8 57 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00127ee:	83 c4 10             	add    esp,0x10
c00127f1:	eb 25                	jmp    c0012818 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00127f3:	90                   	nop
c00127f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127fb:	0f b7 c0             	movzx  eax,ax
c00127fe:	3d 00 08 00 00       	cmp    eax,0x800
c0012803:	75 13                	jne    c0012818 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012805:	83 ec 0c             	sub    esp,0xc
c0012808:	68 24 20 02 c0       	push   0xc0022024
c001280d:	e8 33 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012812:	83 c4 10             	add    esp,0x10
c0012815:	8d 76 00             	lea    esi,[esi+0x0]
c0012818:	90                   	nop
c0012819:	83 c4 2c             	add    esp,0x2c
c001281c:	c3                   	ret    

c001281d <CmOpen(char const*)>:
c001281d:	57                   	push   edi
c001281e:	56                   	push   esi
c001281f:	53                   	push   ebx
c0012820:	83 ec 1c             	sub    esp,0x1c
c0012823:	6a 30                	push   0x30
c0012825:	e8 8c 52 ff ff       	call   c0007ab6 <malloc>
c001282a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012831:	89 c3                	mov    ebx,eax
c0012833:	e8 7e 52 ff ff       	call   c0007ab6 <malloc>
c0012838:	83 c4 0c             	add    esp,0xc
c001283b:	89 c6                	mov    esi,eax
c001283d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012843:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012847:	50                   	push   eax
c0012848:	e8 fb 8f ff ff       	call   c000b848 <File::File(char const*, Process*)>
c001284d:	83 c4 0c             	add    esp,0xc
c0012850:	89 33                	mov    DWORD PTR [ebx],esi
c0012852:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012856:	50                   	push   eax
c0012857:	8d 44 24 10          	lea    eax,[esp+0x10]
c001285b:	50                   	push   eax
c001285c:	56                   	push   esi
c001285d:	e8 b0 93 ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c0012862:	5a                   	pop    edx
c0012863:	59                   	pop    ecx
c0012864:	6a 01                	push   0x1
c0012866:	ff 33                	push   DWORD PTR [ebx]
c0012868:	e8 a3 90 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c001286d:	5e                   	pop    esi
c001286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012872:	e8 3f 52 ff ff       	call   c0007ab6 <malloc>
c0012877:	5a                   	pop    edx
c0012878:	89 c7                	mov    edi,eax
c001287a:	8d 74 24 10          	lea    esi,[esp+0x10]
c001287e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012880:	8b 10                	mov    edx,DWORD PTR [eax]
c0012882:	56                   	push   esi
c0012883:	57                   	push   edi
c0012884:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012888:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001288c:	50                   	push   eax
c001288d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012890:	83 c4 14             	add    esp,0x14
c0012893:	ff 33                	push   DWORD PTR [ebx]
c0012895:	e8 d4 90 ff ff       	call   c000b96e <File::close()>
c001289a:	59                   	pop    ecx
c001289b:	58                   	pop    eax
c001289c:	6a 13                	push   0x13
c001289e:	ff 33                	push   DWORD PTR [ebx]
c00128a0:	e8 6b 90 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c00128a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00128a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00128ac:	57                   	push   edi
c00128ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128b5:	50                   	push   eax
c00128b6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00128b9:	83 c4 14             	add    esp,0x14
c00128bc:	57                   	push   edi
c00128bd:	e8 04 52 ff ff       	call   c0007ac6 <free>
c00128c2:	83 c4 10             	add    esp,0x10
c00128c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00128c8:	75 10                	jne    c00128da <CmOpen(char const*)+0xbd>
c00128ca:	83 ec 0c             	sub    esp,0xc
c00128cd:	68 39 20 02 c0       	push   0xc0022039
c00128d2:	e8 c2 ea ff ff       	call   c0011399 <KePanic(char const*)>
c00128d7:	83 c4 10             	add    esp,0x10
c00128da:	8d 7b 05             	lea    edi,[ebx+0x5]
c00128dd:	50                   	push   eax
c00128de:	6a 00                	push   0x0
c00128e0:	6a 00                	push   0x0
c00128e2:	ff 33                	push   DWORD PTR [ebx]
c00128e4:	e8 e5 90 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c00128e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00128ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00128f0:	57                   	push   edi
c00128f1:	6a 00                	push   0x0
c00128f3:	6a 2b                	push   0x2b
c00128f5:	50                   	push   eax
c00128f6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00128f9:	83 c4 1c             	add    esp,0x1c
c00128fc:	6a 00                	push   0x0
c00128fe:	6a 00                	push   0x0
c0012900:	ff 33                	push   DWORD PTR [ebx]
c0012902:	e8 c7 90 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0012907:	83 c4 0c             	add    esp,0xc
c001290a:	6a 08                	push   0x8
c001290c:	68 4a 20 02 c0       	push   0xc002204a
c0012911:	57                   	push   edi
c0012912:	e8 69 da fe ff       	call   c0000380 <memcmp>
c0012917:	83 c4 10             	add    esp,0x10
c001291a:	85 c0                	test   eax,eax
c001291c:	74 10                	je     c001292e <CmOpen(char const*)+0x111>
c001291e:	83 ec 0c             	sub    esp,0xc
c0012921:	68 53 20 02 c0       	push   0xc0022053
c0012926:	e8 6e ea ff ff       	call   c0011399 <KePanic(char const*)>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012932:	89 d8                	mov    eax,ebx
c0012934:	83 c4 10             	add    esp,0x10
c0012937:	5b                   	pop    ebx
c0012938:	5e                   	pop    esi
c0012939:	5f                   	pop    edi
c001293a:	c3                   	ret    

c001293b <CmClose(Reghive_Tag*)>:
c001293b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001293f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012943:	74 0b                	je     c0012950 <CmClose(Reghive_Tag*)+0x15>
c0012945:	8b 00                	mov    eax,DWORD PTR [eax]
c0012947:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001294b:	e9 1e 90 ff ff       	jmp    c000b96e <File::close()>
c0012950:	c3                   	ret    

c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012951:	53                   	push   ebx
c0012952:	83 ec 18             	sub    esp,0x18
c0012955:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012959:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001295d:	74 29                	je     c0012988 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001295f:	50                   	push   eax
c0012960:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012965:	99                   	cdq    
c0012966:	52                   	push   edx
c0012967:	50                   	push   eax
c0012968:	ff 33                	push   DWORD PTR [ebx]
c001296a:	e8 5f 90 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c001296f:	5a                   	pop    edx
c0012970:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012972:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012976:	8b 10                	mov    edx,DWORD PTR [eax]
c0012978:	51                   	push   ecx
c0012979:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001297d:	6a 00                	push   0x0
c001297f:	6a 2b                	push   0x2b
c0012981:	50                   	push   eax
c0012982:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012985:	83 c4 20             	add    esp,0x20
c0012988:	83 c4 18             	add    esp,0x18
c001298b:	5b                   	pop    ebx
c001298c:	c3                   	ret    

c001298d <CmGetString(Reghive_Tag*, int, char*)>:
c001298d:	55                   	push   ebp
c001298e:	57                   	push   edi
c001298f:	56                   	push   esi
c0012990:	53                   	push   ebx
c0012991:	31 db                	xor    ebx,ebx
c0012993:	83 ec 70             	sub    esp,0x70
c0012996:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c001299d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00129a1:	50                   	push   eax
c00129a2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00129a9:	55                   	push   ebp
c00129aa:	e8 a2 ff ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129af:	83 c4 10             	add    esp,0x10
c00129b2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00129b7:	c1 e0 08             	shl    eax,0x8
c00129ba:	89 c2                	mov    edx,eax
c00129bc:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00129c1:	09 d0                	or     eax,edx
c00129c3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00129c8:	c1 e0 08             	shl    eax,0x8
c00129cb:	09 d0                	or     eax,edx
c00129cd:	74 25                	je     c00129f4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00129cf:	6b fb 0d             	imul   edi,ebx,0xd
c00129d2:	52                   	push   edx
c00129d3:	8d 54 24 39          	lea    edx,[esp+0x39]
c00129d7:	52                   	push   edx
c00129d8:	50                   	push   eax
c00129d9:	55                   	push   ebp
c00129da:	e8 72 ff ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129df:	8d 74 24 49          	lea    esi,[esp+0x49]
c00129e3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00129ea:	b9 27 00 00 00       	mov    ecx,0x27
c00129ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00129f1:	83 c4 10             	add    esp,0x10
c00129f4:	83 c3 03             	add    ebx,0x3
c00129f7:	83 fb 15             	cmp    ebx,0x15
c00129fa:	75 b6                	jne    c00129b2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00129fc:	83 c4 6c             	add    esp,0x6c
c00129ff:	5b                   	pop    ebx
c0012a00:	5e                   	pop    esi
c0012a01:	5f                   	pop    edi
c0012a02:	5d                   	pop    ebp
c0012a03:	c3                   	ret    

c0012a04 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012a04:	83 ec 40             	sub    esp,0x40
c0012a07:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a0b:	50                   	push   eax
c0012a0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a14:	e8 38 ff ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	83 c8 ff             	or     eax,0xffffffff
c0012a1f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012a24:	75 19                	jne    c0012a3f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012a26:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012a2b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012a30:	c1 e0 08             	shl    eax,0x8
c0012a33:	09 c2                	or     edx,eax
c0012a35:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012a3a:	c1 e0 10             	shl    eax,0x10
c0012a3d:	09 d0                	or     eax,edx
c0012a3f:	83 c4 3c             	add    esp,0x3c
c0012a42:	c3                   	ret    

c0012a43 <CmGetNext(Reghive_Tag*, int)>:
c0012a43:	83 ec 40             	sub    esp,0x40
c0012a46:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a4a:	50                   	push   eax
c0012a4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a53:	e8 f9 fe ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a58:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012a5d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012a62:	c1 e0 08             	shl    eax,0x8
c0012a65:	09 c2                	or     edx,eax
c0012a67:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012a6c:	83 c4 4c             	add    esp,0x4c
c0012a6f:	c1 e0 10             	shl    eax,0x10
c0012a72:	09 d0                	or     eax,edx
c0012a74:	c3                   	ret    

c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012a75:	53                   	push   ebx
c0012a76:	83 ec 18             	sub    esp,0x18
c0012a79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a7d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a81:	74 29                	je     c0012aac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012a83:	50                   	push   eax
c0012a84:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012a89:	99                   	cdq    
c0012a8a:	52                   	push   edx
c0012a8b:	50                   	push   eax
c0012a8c:	ff 33                	push   DWORD PTR [ebx]
c0012a8e:	e8 3b 8f ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0012a93:	5a                   	pop    edx
c0012a94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a96:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a9c:	51                   	push   ecx
c0012a9d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012aa1:	6a 00                	push   0x0
c0012aa3:	6a 2b                	push   0x2b
c0012aa5:	50                   	push   eax
c0012aa6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012aa9:	83 c4 20             	add    esp,0x20
c0012aac:	83 c4 18             	add    esp,0x18
c0012aaf:	5b                   	pop    ebx
c0012ab0:	c3                   	ret    

c0012ab1 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ab1:	53                   	push   ebx
c0012ab2:	83 ec 3c             	sub    esp,0x3c
c0012ab5:	6a 2b                	push   0x2b
c0012ab7:	6a 00                	push   0x0
c0012ab9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012abd:	53                   	push   ebx
c0012abe:	e8 2d da fe ff       	call   c00004f0 <memset>
c0012ac3:	83 c4 0c             	add    esp,0xc
c0012ac6:	53                   	push   ebx
c0012ac7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012acb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012acf:	e8 a1 ff ff ff       	call   c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ad4:	83 c4 48             	add    esp,0x48
c0012ad7:	5b                   	pop    ebx
c0012ad8:	c3                   	ret    

c0012ad9 <CmUpdateHeader(Reghive_Tag*)>:
c0012ad9:	83 ec 0c             	sub    esp,0xc
c0012adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012ae4:	74 10                	je     c0012af6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012ae6:	52                   	push   edx
c0012ae7:	8d 50 05             	lea    edx,[eax+0x5]
c0012aea:	52                   	push   edx
c0012aeb:	6a 00                	push   0x0
c0012aed:	50                   	push   eax
c0012aee:	e8 82 ff ff ff       	call   c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012af3:	83 c4 10             	add    esp,0x10
c0012af6:	83 c4 0c             	add    esp,0xc
c0012af9:	c3                   	ret    

c0012afa <CmExpand(Reghive_Tag*, int)>:
c0012afa:	57                   	push   edi
c0012afb:	56                   	push   esi
c0012afc:	83 ce ff             	or     esi,0xffffffff
c0012aff:	53                   	push   ebx
c0012b00:	83 ec 30             	sub    esp,0x30
c0012b03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012b07:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012b0b:	74 5f                	je     c0012b6c <CmExpand(Reghive_Tag*, int)+0x72>
c0012b0d:	31 d2                	xor    edx,edx
c0012b0f:	31 f6                	xor    esi,esi
c0012b11:	50                   	push   eax
c0012b12:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012b16:	52                   	push   edx
c0012b17:	50                   	push   eax
c0012b18:	ff 33                	push   DWORD PTR [ebx]
c0012b1a:	e8 af 8e ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0012b1f:	83 c4 0c             	add    esp,0xc
c0012b22:	6a 2b                	push   0x2b
c0012b24:	6a 00                	push   0x0
c0012b26:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012b2a:	57                   	push   edi
c0012b2b:	e8 c0 d9 fe ff       	call   c00004f0 <memset>
c0012b30:	83 c4 10             	add    esp,0x10
c0012b33:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012b37:	7d 1b                	jge    c0012b54 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012b39:	83 ec 0c             	sub    esp,0xc
c0012b3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b3e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012b42:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b44:	46                   	inc    esi
c0012b45:	51                   	push   ecx
c0012b46:	57                   	push   edi
c0012b47:	6a 00                	push   0x0
c0012b49:	6a 2b                	push   0x2b
c0012b4b:	50                   	push   eax
c0012b4c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b4f:	83 c4 20             	add    esp,0x20
c0012b52:	eb df                	jmp    c0012b33 <CmExpand(Reghive_Tag*, int)+0x39>
c0012b54:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012b58:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012b5b:	83 ec 0c             	sub    esp,0xc
c0012b5e:	01 f2                	add    edx,esi
c0012b60:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012b63:	53                   	push   ebx
c0012b64:	e8 70 ff ff ff       	call   c0012ad9 <CmUpdateHeader(Reghive_Tag*)>
c0012b69:	83 c4 10             	add    esp,0x10
c0012b6c:	83 c4 30             	add    esp,0x30
c0012b6f:	89 f0                	mov    eax,esi
c0012b71:	5b                   	pop    ebx
c0012b72:	5e                   	pop    esi
c0012b73:	5f                   	pop    edi
c0012b74:	c3                   	ret    

c0012b75 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012b75:	55                   	push   ebp
c0012b76:	57                   	push   edi
c0012b77:	56                   	push   esi
c0012b78:	53                   	push   ebx
c0012b79:	83 cb ff             	or     ebx,0xffffffff
c0012b7c:	83 ec 1c             	sub    esp,0x1c
c0012b7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b83:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012b87:	74 68                	je     c0012bf1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b89:	be 2b 00 00 00       	mov    esi,0x2b
c0012b8e:	51                   	push   ecx
c0012b8f:	31 ff                	xor    edi,edi
c0012b91:	6a 00                	push   0x0
c0012b93:	31 db                	xor    ebx,ebx
c0012b95:	6a 00                	push   0x0
c0012b97:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b9a:	e8 2f 8e ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0012b9f:	83 c4 10             	add    esp,0x10
c0012ba2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012ba5:	76 3b                	jbe    c0012be2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012ba7:	83 ec 0c             	sub    esp,0xc
c0012baa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012bad:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012bb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bb3:	51                   	push   ecx
c0012bb4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012bb8:	51                   	push   ecx
c0012bb9:	6a 00                	push   0x0
c0012bbb:	6a 01                	push   0x1
c0012bbd:	50                   	push   eax
c0012bbe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012bc1:	83 c4 20             	add    esp,0x20
c0012bc4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012bc9:	74 26                	je     c0012bf1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012bcb:	43                   	inc    ebx
c0012bcc:	52                   	push   edx
c0012bcd:	57                   	push   edi
c0012bce:	56                   	push   esi
c0012bcf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012bd2:	e8 f7 8d ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0012bd7:	83 c6 2b             	add    esi,0x2b
c0012bda:	83 d7 00             	adc    edi,0x0
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	eb c0                	jmp    c0012ba2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012be2:	50                   	push   eax
c0012be3:	50                   	push   eax
c0012be4:	6a 40                	push   0x40
c0012be6:	55                   	push   ebp
c0012be7:	e8 0e ff ff ff       	call   c0012afa <CmExpand(Reghive_Tag*, int)>
c0012bec:	83 c4 10             	add    esp,0x10
c0012bef:	89 c3                	mov    ebx,eax
c0012bf1:	83 c4 1c             	add    esp,0x1c
c0012bf4:	89 d8                	mov    eax,ebx
c0012bf6:	5b                   	pop    ebx
c0012bf7:	5e                   	pop    esi
c0012bf8:	5f                   	pop    edi
c0012bf9:	5d                   	pop    ebp
c0012bfa:	c3                   	ret    

c0012bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012bfb:	55                   	push   ebp
c0012bfc:	57                   	push   edi
c0012bfd:	56                   	push   esi
c0012bfe:	53                   	push   ebx
c0012bff:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c05:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012c0c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c13:	e8 5d ff ff ff       	call   c0012b75 <CmFindUnusedExtent(Reghive_Tag*)>
c0012c18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c1c:	83 c4 0c             	add    esp,0xc
c0012c1f:	6a 2b                	push   0x2b
c0012c21:	6a 00                	push   0x0
c0012c23:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012c27:	55                   	push   ebp
c0012c28:	e8 c3 d8 fe ff       	call   c00004f0 <memset>
c0012c2d:	83 c4 10             	add    esp,0x10
c0012c30:	85 db                	test   ebx,ebx
c0012c32:	74 12                	je     c0012c46 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012c34:	51                   	push   ecx
c0012c35:	55                   	push   ebp
c0012c36:	53                   	push   ebx
c0012c37:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c3e:	e8 0e fd ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c43:	83 c4 10             	add    esp,0x10
c0012c46:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012c4a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012c51:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012c56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012c58:	85 db                	test   ebx,ebx
c0012c5a:	74 49                	je     c0012ca5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012c5c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012c61:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012c66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c6a:	c1 e0 08             	shl    eax,0x8
c0012c6d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012c73:	09 c8                	or     eax,ecx
c0012c75:	74 11                	je     c0012c88 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012c77:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012c7b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012c7f:	c1 e8 10             	shr    eax,0x10
c0012c82:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012c86:	eb 0f                	jmp    c0012c97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012c88:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c8d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c92:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c97:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012c9b:	c1 ea 08             	shr    edx,0x8
c0012c9e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012ca3:	eb 0f                	jmp    c0012cb4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012ca5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012caa:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012caf:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012cb4:	52                   	push   edx
c0012cb5:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012cb9:	50                   	push   eax
c0012cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cbe:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cc5:	e8 ab fd ff ff       	call   c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	85 db                	test   ebx,ebx
c0012ccf:	74 12                	je     c0012ce3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012cd1:	50                   	push   eax
c0012cd2:	55                   	push   ebp
c0012cd3:	53                   	push   ebx
c0012cd4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cdb:	e8 95 fd ff ff       	call   c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ce7:	83 c4 7c             	add    esp,0x7c
c0012cea:	5b                   	pop    ebx
c0012ceb:	5e                   	pop    esi
c0012cec:	5f                   	pop    edi
c0012ced:	5d                   	pop    ebp
c0012cee:	c3                   	ret    

c0012cef <CmSetString(Reghive_Tag*, int, char const*)>:
c0012cef:	55                   	push   ebp
c0012cf0:	57                   	push   edi
c0012cf1:	56                   	push   esi
c0012cf2:	53                   	push   ebx
c0012cf3:	bb 27 00 00 00       	mov    ebx,0x27
c0012cf8:	81 ec 88 00 00 00    	sub    esp,0x88
c0012cfe:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012d05:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012d0c:	e8 5f d8 fe ff       	call   c0000570 <strlen>
c0012d11:	8d 48 26             	lea    ecx,[eax+0x26]
c0012d14:	89 c8                	mov    eax,ecx
c0012d16:	99                   	cdq    
c0012d17:	f7 fb                	idiv   ebx
c0012d19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012d1d:	83 c4 10             	add    esp,0x10
c0012d20:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012d26:	7e 10                	jle    c0012d38 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012d28:	83 ec 0c             	sub    esp,0xc
c0012d2b:	68 64 20 02 c0       	push   0xc0022064
c0012d30:	e8 64 e6 ff ff       	call   c0011399 <KePanic(char const*)>
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	31 ff                	xor    edi,edi
c0012d3a:	50                   	push   eax
c0012d3b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012d3f:	53                   	push   ebx
c0012d40:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d47:	56                   	push   esi
c0012d48:	e8 04 fc ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012d54:	89 d0                	mov    eax,edx
c0012d56:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012d5a:	c1 e0 08             	shl    eax,0x8
c0012d5d:	09 c2                	or     edx,eax
c0012d5f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012d63:	c1 e2 08             	shl    edx,0x8
c0012d66:	09 c2                	or     edx,eax
c0012d68:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012d6c:	7e 76                	jle    c0012de4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012d6e:	85 d2                	test   edx,edx
c0012d70:	75 25                	jne    c0012d97 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012d72:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012d77:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012d7b:	50                   	push   eax
c0012d7c:	6a 00                	push   0x0
c0012d7e:	6a 00                	push   0x0
c0012d80:	56                   	push   esi
c0012d81:	e8 75 fe ff ff       	call   c0012bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012d86:	83 c4 10             	add    esp,0x10
c0012d89:	89 c2                	mov    edx,eax
c0012d8b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012d8e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012d91:	c1 f8 10             	sar    eax,0x10
c0012d94:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012d97:	55                   	push   ebp
c0012d98:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012d9c:	55                   	push   ebp
c0012d9d:	52                   	push   edx
c0012d9e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012da2:	56                   	push   esi
c0012da3:	e8 a9 fb ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012da8:	83 c4 0c             	add    esp,0xc
c0012dab:	6a 27                	push   0x27
c0012dad:	6a 00                	push   0x0
c0012daf:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012db3:	51                   	push   ecx
c0012db4:	e8 37 d7 fe ff       	call   c00004f0 <memset>
c0012db9:	83 c4 0c             	add    esp,0xc
c0012dbc:	6b c7 27             	imul   eax,edi,0x27
c0012dbf:	6a 27                	push   0x27
c0012dc1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012dc8:	50                   	push   eax
c0012dc9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012dcd:	51                   	push   ecx
c0012dce:	e8 ad d8 fe ff       	call   c0000680 <strncpy>
c0012dd3:	83 c4 0c             	add    esp,0xc
c0012dd6:	55                   	push   ebp
c0012dd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012ddb:	52                   	push   edx
c0012ddc:	56                   	push   esi
c0012ddd:	e8 93 fc ff ff       	call   c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012de2:	eb 19                	jmp    c0012dfd <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012de4:	85 d2                	test   edx,edx
c0012de6:	74 18                	je     c0012e00 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012de8:	51                   	push   ecx
c0012de9:	51                   	push   ecx
c0012dea:	52                   	push   edx
c0012deb:	56                   	push   esi
c0012dec:	e8 c0 fc ff ff       	call   c0012ab1 <CmFreeExtent(Reghive_Tag*, int)>
c0012df1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012df5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012df9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	47                   	inc    edi
c0012e01:	83 c3 03             	add    ebx,0x3
c0012e04:	83 ff 07             	cmp    edi,0x7
c0012e07:	0f 85 43 ff ff ff    	jne    c0012d50 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012e0d:	50                   	push   eax
c0012e0e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012e12:	50                   	push   eax
c0012e13:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e1a:	56                   	push   esi
c0012e1b:	e8 55 fc ff ff       	call   c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e20:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012e26:	5b                   	pop    ebx
c0012e27:	5e                   	pop    esi
c0012e28:	5f                   	pop    edi
c0012e29:	5d                   	pop    ebp
c0012e2a:	c3                   	ret    

c0012e2b <CmGetMatch(char*, char*, bool, bool*)>:
c0012e2b:	56                   	push   esi
c0012e2c:	53                   	push   ebx
c0012e2d:	50                   	push   eax
c0012e2e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e32:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012e37:	74 25                	je     c0012e5e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012e39:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e3c:	31 db                	xor    ebx,ebx
c0012e3e:	50                   	push   eax
c0012e3f:	50                   	push   eax
c0012e40:	8d 04 9d 00 35 02 c0 	lea    eax,[ebx*4-0x3ffdcb00]
c0012e47:	50                   	push   eax
c0012e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4c:	e8 ff d8 fe ff       	call   c0000750 <strcmp>
c0012e51:	83 c4 10             	add    esp,0x10
c0012e54:	85 c0                	test   eax,eax
c0012e56:	74 2e                	je     c0012e86 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e58:	43                   	inc    ebx
c0012e59:	83 fb 3f             	cmp    ebx,0x3f
c0012e5c:	75 e0                	jne    c0012e3e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012e5e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e61:	31 db                	xor    ebx,ebx
c0012e63:	8d 04 9d 00 35 02 c0 	lea    eax,[ebx*4-0x3ffdcb00]
c0012e6a:	51                   	push   ecx
c0012e6b:	51                   	push   ecx
c0012e6c:	50                   	push   eax
c0012e6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e71:	e8 da d8 fe ff       	call   c0000750 <strcmp>
c0012e76:	83 c4 10             	add    esp,0x10
c0012e79:	85 c0                	test   eax,eax
c0012e7b:	74 09                	je     c0012e86 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e7d:	43                   	inc    ebx
c0012e7e:	83 fb 3f             	cmp    ebx,0x3f
c0012e81:	75 e0                	jne    c0012e63 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012e83:	83 cb ff             	or     ebx,0xffffffff
c0012e86:	89 d8                	mov    eax,ebx
c0012e88:	5a                   	pop    edx
c0012e89:	5b                   	pop    ebx
c0012e8a:	5e                   	pop    esi
c0012e8b:	c3                   	ret    

c0012e8c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012e8c:	55                   	push   ebp
c0012e8d:	31 c0                	xor    eax,eax
c0012e8f:	57                   	push   edi
c0012e90:	56                   	push   esi
c0012e91:	53                   	push   ebx
c0012e92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e96:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e9a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012e9c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012ea0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012ea3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ea7:	83 fd 1f             	cmp    ebp,0x1f
c0012eaa:	7f 0b                	jg     c0012eb7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012eac:	0f b6 c2             	movzx  eax,dl
c0012eaf:	d3 e0                	shl    eax,cl
c0012eb1:	09 07                	or     DWORD PTR [edi],eax
c0012eb3:	b0 01                	mov    al,0x1
c0012eb5:	01 33                	add    DWORD PTR [ebx],esi
c0012eb7:	5b                   	pop    ebx
c0012eb8:	5e                   	pop    esi
c0012eb9:	5f                   	pop    edi
c0012eba:	5d                   	pop    ebp
c0012ebb:	c3                   	ret    

c0012ebc <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012ebc:	57                   	push   edi
c0012ebd:	56                   	push   esi
c0012ebe:	53                   	push   ebx
c0012ebf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ec3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012ec7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012ecb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ecf:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012ed1:	7c 17                	jl     c0012eea <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012ed3:	8b 17                	mov    edx,DWORD PTR [edi]
c0012ed5:	b8 01 00 00 00       	mov    eax,0x1
c0012eda:	d3 e0                	shl    eax,cl
c0012edc:	48                   	dec    eax
c0012edd:	21 d0                	and    eax,edx
c0012edf:	d3 ea                	shr    edx,cl
c0012ee1:	89 17                	mov    DWORD PTR [edi],edx
c0012ee3:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012ee5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012ee8:	eb 05                	jmp    c0012eef <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012eea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012eed:	31 c0                	xor    eax,eax
c0012eef:	5b                   	pop    ebx
c0012ef0:	5e                   	pop    esi
c0012ef1:	5f                   	pop    edi
c0012ef2:	c3                   	ret    

c0012ef3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012ef3:	83 ec 40             	sub    esp,0x40
c0012ef6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012efa:	50                   	push   eax
c0012efb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f03:	e8 49 fa ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f08:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012f0c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012f10:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012f14:	89 10                	mov    DWORD PTR [eax],edx
c0012f16:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012f19:	83 c4 4c             	add    esp,0x4c
c0012f1c:	c3                   	ret    

c0012f1d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012f1d:	55                   	push   ebp
c0012f1e:	57                   	push   edi
c0012f1f:	56                   	push   esi
c0012f20:	53                   	push   ebx
c0012f21:	83 ec 40             	sub    esp,0x40
c0012f24:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012f28:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012f2c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012f30:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012f34:	53                   	push   ebx
c0012f35:	56                   	push   esi
c0012f36:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f3a:	e8 12 fa ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f3f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012f43:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012f47:	83 c4 0c             	add    esp,0xc
c0012f4a:	53                   	push   ebx
c0012f4b:	56                   	push   esi
c0012f4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f50:	e8 20 fb ff ff       	call   c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f55:	83 c4 4c             	add    esp,0x4c
c0012f58:	5b                   	pop    ebx
c0012f59:	5e                   	pop    esi
c0012f5a:	5f                   	pop    edi
c0012f5b:	5d                   	pop    ebp
c0012f5c:	c3                   	ret    

c0012f5d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012f5d:	55                   	push   ebp
c0012f5e:	57                   	push   edi
c0012f5f:	56                   	push   esi
c0012f60:	31 f6                	xor    esi,esi
c0012f62:	53                   	push   ebx
c0012f63:	31 db                	xor    ebx,ebx
c0012f65:	83 ec 40             	sub    esp,0x40
c0012f68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f70:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012f78:	6a 12                	push   0x12
c0012f7a:	68 ee 00 00 00       	push   0xee
c0012f7f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f83:	e8 68 d5 fe ff       	call   c00004f0 <memset>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012f8f:	6a 08                	push   0x8
c0012f91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f95:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012f99:	50                   	push   eax
c0012f9a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012f9e:	55                   	push   ebp
c0012f9f:	57                   	push   edi
c0012fa0:	e8 e7 fe ff ff       	call   c0012e8c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fac:	50                   	push   eax
c0012fad:	6a 06                	push   0x6
c0012faf:	55                   	push   ebp
c0012fb0:	57                   	push   edi
c0012fb1:	e8 06 ff ff ff       	call   c0012ebc <CmGetShift(unsigned int*, int*, int, bool*)>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fbe:	74 07                	je     c0012fc7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012fc0:	46                   	inc    esi
c0012fc1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012fc5:	eb e1                	jmp    c0012fa8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012fc7:	43                   	inc    ebx
c0012fc8:	83 fb 12             	cmp    ebx,0x12
c0012fcb:	75 c2                	jne    c0012f8f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012fcd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012fd1:	31 db                	xor    ebx,ebx
c0012fd3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012fd6:	50                   	push   eax
c0012fd7:	50                   	push   eax
c0012fd8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012fdd:	43                   	inc    ebx
c0012fde:	8d 04 85 00 35 02 c0 	lea    eax,[eax*4-0x3ffdcb00]
c0012fe5:	50                   	push   eax
c0012fe6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012fea:	e8 51 d8 fe ff       	call   c0000840 <strcat>
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	83 fb 18             	cmp    ebx,0x18
c0012ff5:	75 df                	jne    c0012fd6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012ff7:	83 c4 3c             	add    esp,0x3c
c0012ffa:	31 c0                	xor    eax,eax
c0012ffc:	5b                   	pop    ebx
c0012ffd:	5e                   	pop    esi
c0012ffe:	5f                   	pop    edi
c0012fff:	5d                   	pop    ebp
c0013000:	c3                   	ret    

c0013001 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013001:	83 ec 40             	sub    esp,0x40
c0013004:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013008:	50                   	push   eax
c0013009:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001300d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013011:	e8 3b f9 ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013016:	58                   	pop    eax
c0013017:	5a                   	pop    edx
c0013018:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001301c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013020:	50                   	push   eax
c0013021:	e8 37 ff ff ff       	call   c0012f5d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013026:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001302b:	83 c4 4c             	add    esp,0x4c
c001302e:	c3                   	ret    

c001302f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001302f:	55                   	push   ebp
c0013030:	57                   	push   edi
c0013031:	56                   	push   esi
c0013032:	53                   	push   ebx
c0013033:	31 db                	xor    ebx,ebx
c0013035:	83 ec 70             	sub    esp,0x70
c0013038:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001303f:	6a 30                	push   0x30
c0013041:	6a 00                	push   0x0
c0013043:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013047:	56                   	push   esi
c0013048:	e8 a3 d4 fe ff       	call   c00004f0 <memset>
c001304d:	83 c4 10             	add    esp,0x10
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	57                   	push   edi
c0013054:	e8 17 d5 fe ff       	call   c0000570 <strlen>
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	39 d8                	cmp    eax,ebx
c001305e:	76 16                	jbe    c0013076 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013067:	50                   	push   eax
c0013068:	e8 c3 d8 fe ff       	call   c0000930 <toupper>
c001306d:	83 c4 10             	add    esp,0x10
c0013070:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013073:	43                   	inc    ebx
c0013074:	eb da                	jmp    c0013050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013076:	31 f6                	xor    esi,esi
c0013078:	52                   	push   edx
c0013079:	31 ff                	xor    edi,edi
c001307b:	6a 18                	push   0x18
c001307d:	6a 3f                	push   0x3f
c001307f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013083:	50                   	push   eax
c0013084:	e8 67 d4 fe ff       	call   c00004f0 <memset>
c0013089:	83 c4 10             	add    esp,0x10
c001308c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013090:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0013094:	84 c0                	test   al,al
c0013096:	0f 84 b0 00 00 00    	je     c001314c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001309c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00130a0:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00130a5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00130a9:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00130ae:	8d 6e 01             	lea    ebp,[esi+0x1]
c00130b1:	83 ec 0c             	sub    esp,0xc
c00130b4:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00130b8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00130bc:	53                   	push   ebx
c00130bd:	e8 ae d4 fe ff       	call   c0000570 <strlen>
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	85 c0                	test   eax,eax
c00130c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130cb:	74 0b                	je     c00130d8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00130cd:	50                   	push   eax
c00130ce:	6a 01                	push   0x1
c00130d0:	53                   	push   ebx
c00130d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130d5:	50                   	push   eax
c00130d6:	eb 0a                	jmp    c00130e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00130d8:	50                   	push   eax
c00130d9:	6a 00                	push   0x0
c00130db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00130df:	50                   	push   eax
c00130e0:	6a 00                	push   0x0
c00130e2:	e8 44 fd ff ff       	call   c0012e2b <CmGetMatch(char*, char*, bool, bool*)>
c00130e7:	83 c4 10             	add    esp,0x10
c00130ea:	83 f8 ff             	cmp    eax,0xffffffff
c00130ed:	75 1a                	jne    c0013109 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00130ef:	83 ec 0c             	sub    esp,0xc
c00130f2:	68 79 20 02 c0       	push   0xc0022079
c00130f7:	e8 9d e2 ff ff       	call   c0011399 <KePanic(char const*)>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	b8 02 00 00 00       	mov    eax,0x2
c0013104:	e9 bc 00 00 00       	jmp    c00131c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013109:	83 ff 18             	cmp    edi,0x18
c001310c:	75 1a                	jne    c0013128 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	68 8e 20 02 c0       	push   0xc002208e
c0013116:	e8 7e e2 ff ff       	call   c0011399 <KePanic(char const*)>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	b8 01 00 00 00       	mov    eax,0x1
c0013123:	e9 9d 00 00 00       	jmp    c00131c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013128:	47                   	inc    edi
c0013129:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001312e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013132:	74 02                	je     c0013136 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013134:	89 ee                	mov    esi,ebp
c0013136:	83 ec 0c             	sub    esp,0xc
c0013139:	53                   	push   ebx
c001313a:	e8 31 d4 fe ff       	call   c0000570 <strlen>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	85 c0                	test   eax,eax
c0013144:	74 06                	je     c001314c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013146:	46                   	inc    esi
c0013147:	e9 40 ff ff ff       	jmp    c001308c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001314c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013154:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001315c:	31 f6                	xor    esi,esi
c001315e:	50                   	push   eax
c001315f:	31 ff                	xor    edi,edi
c0013161:	6a 12                	push   0x12
c0013163:	68 ee 00 00 00       	push   0xee
c0013168:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001316f:	e8 7c d3 fe ff       	call   c00004f0 <memset>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	83 fe 17             	cmp    esi,0x17
c001317a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001317e:	7e 26                	jle    c00131a6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013180:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013184:	50                   	push   eax
c0013185:	6a 08                	push   0x8
c0013187:	55                   	push   ebp
c0013188:	53                   	push   ebx
c0013189:	e8 2e fd ff ff       	call   c0012ebc <CmGetShift(unsigned int*, int*, int, bool*)>
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013196:	74 26                	je     c00131be <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013198:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001319f:	4e                   	dec    esi
c00131a0:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00131a3:	47                   	inc    edi
c00131a4:	eb 1c                	jmp    c00131c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00131a6:	6a 06                	push   0x6
c00131a8:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00131ad:	50                   	push   eax
c00131ae:	55                   	push   ebp
c00131af:	53                   	push   ebx
c00131b0:	e8 d7 fc ff ff       	call   c0012e8c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00131b5:	83 c4 10             	add    esp,0x10
c00131b8:	84 c0                	test   al,al
c00131ba:	75 06                	jne    c00131c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00131bc:	eb c2                	jmp    c0013180 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00131be:	31 c0                	xor    eax,eax
c00131c0:	eb 03                	jmp    c00131c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00131c2:	46                   	inc    esi
c00131c3:	eb b2                	jmp    c0013177 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00131c5:	83 c4 6c             	add    esp,0x6c
c00131c8:	5b                   	pop    ebx
c00131c9:	5e                   	pop    esi
c00131ca:	5f                   	pop    edi
c00131cb:	5d                   	pop    ebp
c00131cc:	c3                   	ret    

c00131cd <CmCreateString(Reghive_Tag*, int, char const*)>:
c00131cd:	53                   	push   ebx
c00131ce:	83 ec 3c             	sub    esp,0x3c
c00131d1:	6a 2b                	push   0x2b
c00131d3:	6a 00                	push   0x0
c00131d5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00131d9:	53                   	push   ebx
c00131da:	e8 11 d3 fe ff       	call   c00004f0 <memset>
c00131df:	58                   	pop    eax
c00131e0:	5a                   	pop    edx
c00131e1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131e5:	50                   	push   eax
c00131e6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00131ea:	e8 40 fe ff ff       	call   c001302f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131ef:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00131f4:	83 c4 0c             	add    esp,0xc
c00131f7:	6a 15                	push   0x15
c00131f9:	6a 00                	push   0x0
c00131fb:	8d 44 24 27          	lea    eax,[esp+0x27]
c00131ff:	50                   	push   eax
c0013200:	e8 eb d2 fe ff       	call   c00004f0 <memset>
c0013205:	53                   	push   ebx
c0013206:	6a 00                	push   0x0
c0013208:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001320c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013210:	e8 e6 f9 ff ff       	call   c0012bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013215:	83 c4 58             	add    esp,0x58
c0013218:	5b                   	pop    ebx
c0013219:	c3                   	ret    

c001321a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001321a:	56                   	push   esi
c001321b:	53                   	push   ebx
c001321c:	83 ec 48             	sub    esp,0x48
c001321f:	6a 12                	push   0x12
c0013221:	68 ff 00 00 00       	push   0xff
c0013226:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001322a:	56                   	push   esi
c001322b:	e8 c0 d2 fe ff       	call   c00004f0 <memset>
c0013230:	5a                   	pop    edx
c0013231:	59                   	pop    ecx
c0013232:	56                   	push   esi
c0013233:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013237:	e8 f3 fd ff ff       	call   c001302f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001323c:	83 c4 10             	add    esp,0x10
c001323f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013243:	85 db                	test   ebx,ebx
c0013245:	74 42                	je     c0013289 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013247:	50                   	push   eax
c0013248:	8d 44 24 19          	lea    eax,[esp+0x19]
c001324c:	50                   	push   eax
c001324d:	53                   	push   ebx
c001324e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013252:	e8 fa f6 ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013257:	83 c4 0c             	add    esp,0xc
c001325a:	6a 12                	push   0x12
c001325c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013260:	50                   	push   eax
c0013261:	56                   	push   esi
c0013262:	e8 19 d1 fe ff       	call   c0000380 <memcmp>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	85 c0                	test   eax,eax
c001326c:	74 1e                	je     c001328c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001326e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013273:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013278:	c1 e3 08             	shl    ebx,0x8
c001327b:	09 d8                	or     eax,ebx
c001327d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013282:	c1 e3 10             	shl    ebx,0x10
c0013285:	09 c3                	or     ebx,eax
c0013287:	eb ba                	jmp    c0013243 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013289:	83 cb ff             	or     ebx,0xffffffff
c001328c:	89 d8                	mov    eax,ebx
c001328e:	83 c4 44             	add    esp,0x44
c0013291:	5b                   	pop    ebx
c0013292:	5e                   	pop    esi
c0013293:	c3                   	ret    

c0013294 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013294:	57                   	push   edi
c0013295:	56                   	push   esi
c0013296:	53                   	push   ebx
c0013297:	83 ec 34             	sub    esp,0x34
c001329a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001329e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00132a2:	6a 2b                	push   0x2b
c00132a4:	6a 00                	push   0x0
c00132a6:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00132aa:	53                   	push   ebx
c00132ab:	e8 40 d2 fe ff       	call   c00004f0 <memset>
c00132b0:	58                   	pop    eax
c00132b1:	5a                   	pop    edx
c00132b2:	8d 44 24 11          	lea    eax,[esp+0x11]
c00132b6:	50                   	push   eax
c00132b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00132bb:	e8 6f fd ff ff       	call   c001302f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132c0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00132c4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00132c8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00132cc:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00132d0:	53                   	push   ebx
c00132d1:	6a 00                	push   0x0
c00132d3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132d7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132db:	e8 1b f9 ff ff       	call   c0012bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132e0:	83 c4 50             	add    esp,0x50
c00132e3:	5b                   	pop    ebx
c00132e4:	5e                   	pop    esi
c00132e5:	5f                   	pop    edi
c00132e6:	c3                   	ret    

c00132e7 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00132e7:	55                   	push   ebp
c00132e8:	57                   	push   edi
c00132e9:	56                   	push   esi
c00132ea:	53                   	push   ebx
c00132eb:	83 ec 40             	sub    esp,0x40
c00132ee:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00132f2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00132f6:	6a 2b                	push   0x2b
c00132f8:	6a 00                	push   0x0
c00132fa:	8d 74 24 11          	lea    esi,[esp+0x11]
c00132fe:	56                   	push   esi
c00132ff:	e8 ec d1 fe ff       	call   c00004f0 <memset>
c0013304:	5f                   	pop    edi
c0013305:	89 ef                	mov    edi,ebp
c0013307:	58                   	pop    eax
c0013308:	8d 44 24 11          	lea    eax,[esp+0x11]
c001330c:	50                   	push   eax
c001330d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013311:	e8 19 fd ff ff       	call   c001302f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013316:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001331b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013320:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013325:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001332a:	83 c4 10             	add    esp,0x10
c001332d:	85 ed                	test   ebp,ebp
c001332f:	74 14                	je     c0013345 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013331:	51                   	push   ecx
c0013332:	51                   	push   ecx
c0013333:	57                   	push   edi
c0013334:	53                   	push   ebx
c0013335:	e8 09 f7 ff ff       	call   c0012a43 <CmGetNext(Reghive_Tag*, int)>
c001333a:	83 c4 10             	add    esp,0x10
c001333d:	85 c0                	test   eax,eax
c001333f:	74 04                	je     c0013345 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013341:	89 c7                	mov    edi,eax
c0013343:	eb e8                	jmp    c001332d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013345:	56                   	push   esi
c0013346:	6a 00                	push   0x0
c0013348:	57                   	push   edi
c0013349:	53                   	push   ebx
c001334a:	e8 ac f8 ff ff       	call   c0012bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001334f:	83 c4 0c             	add    esp,0xc
c0013352:	89 c7                	mov    edi,eax
c0013354:	56                   	push   esi
c0013355:	50                   	push   eax
c0013356:	53                   	push   ebx
c0013357:	e8 f5 f5 ff ff       	call   c0012951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001335c:	58                   	pop    eax
c001335d:	5a                   	pop    edx
c001335e:	6a 6c                	push   0x6c
c0013360:	6a 00                	push   0x0
c0013362:	6a 00                	push   0x0
c0013364:	68 9f 20 02 c0       	push   0xc002209f
c0013369:	57                   	push   edi
c001336a:	53                   	push   ebx
c001336b:	e8 24 ff ff ff       	call   c0013294 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013370:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013374:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013378:	c1 e8 10             	shr    eax,0x10
c001337b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001337f:	83 c4 1c             	add    esp,0x1c
c0013382:	56                   	push   esi
c0013383:	57                   	push   edi
c0013384:	53                   	push   ebx
c0013385:	e8 eb f6 ff ff       	call   c0012a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001338a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001338f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013394:	c1 e0 08             	shl    eax,0x8
c0013397:	09 c2                	or     edx,eax
c0013399:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001339e:	83 c4 4c             	add    esp,0x4c
c00133a1:	c1 e0 10             	shl    eax,0x10
c00133a4:	5b                   	pop    ebx
c00133a5:	09 d0                	or     eax,edx
c00133a7:	5e                   	pop    esi
c00133a8:	5f                   	pop    edi
c00133a9:	5d                   	pop    ebp
c00133aa:	c3                   	ret    

c00133ab <zStrtok(char*, char const*)>:
c00133ab:	55                   	push   ebp
c00133ac:	57                   	push   edi
c00133ad:	56                   	push   esi
c00133ae:	53                   	push   ebx
c00133af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133b7:	85 db                	test   ebx,ebx
c00133b9:	74 2f                	je     c00133ea <zStrtok(char*, char const*)+0x3f>
c00133bb:	85 c0                	test   eax,eax
c00133bd:	75 09                	jne    c00133c8 <zStrtok(char*, char const*)+0x1d>
c00133bf:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00133c4:	85 c0                	test   eax,eax
c00133c6:	74 50                	je     c0013418 <zStrtok(char*, char const*)+0x6d>
c00133c8:	31 c9                	xor    ecx,ecx
c00133ca:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00133ce:	74 03                	je     c00133d3 <zStrtok(char*, char const*)+0x28>
c00133d0:	41                   	inc    ecx
c00133d1:	eb f7                	jmp    c00133ca <zStrtok(char*, char const*)+0x1f>
c00133d3:	31 d2                	xor    edx,edx
c00133d5:	39 ca                	cmp    edx,ecx
c00133d7:	74 15                	je     c00133ee <zStrtok(char*, char const*)+0x43>
c00133d9:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00133dd:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00133e0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00133e3:	39 ee                	cmp    esi,ebp
c00133e5:	74 13                	je     c00133fa <zStrtok(char*, char const*)+0x4f>
c00133e7:	42                   	inc    edx
c00133e8:	eb eb                	jmp    c00133d5 <zStrtok(char*, char const*)+0x2a>
c00133ea:	31 c0                	xor    eax,eax
c00133ec:	eb 2a                	jmp    c0013418 <zStrtok(char*, char const*)+0x6d>
c00133ee:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00133f8:	eb 1e                	jmp    c0013418 <zStrtok(char*, char const*)+0x6d>
c00133fa:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00133fd:	39 ce                	cmp    esi,ecx
c00133ff:	75 0a                	jne    c001340b <zStrtok(char*, char const*)+0x60>
c0013401:	40                   	inc    eax
c0013402:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c0013407:	89 d8                	mov    eax,ebx
c0013409:	eb 0d                	jmp    c0013418 <zStrtok(char*, char const*)+0x6d>
c001340b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001340f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013412:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013418:	5b                   	pop    ebx
c0013419:	5e                   	pop    esi
c001341a:	5f                   	pop    edi
c001341b:	5d                   	pop    ebp
c001341c:	c3                   	ret    

c001341d <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001341d:	57                   	push   edi
c001341e:	56                   	push   esi
c001341f:	53                   	push   ebx
c0013420:	81 ec 08 01 00 00    	sub    esp,0x108
c0013426:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001342d:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013434:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013438:	53                   	push   ebx
c0013439:	e8 02 d2 fe ff       	call   c0000640 <strcpy>
c001343e:	59                   	pop    ecx
c001343f:	5e                   	pop    esi
c0013440:	68 03 24 02 c0       	push   0xc0022403
c0013445:	53                   	push   ebx
c0013446:	bb 01 00 00 00       	mov    ebx,0x1
c001344b:	e8 5b ff ff ff       	call   c00133ab <zStrtok(char*, char const*)>
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	85 c0                	test   eax,eax
c0013455:	74 3b                	je     c0013492 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013457:	52                   	push   edx
c0013458:	50                   	push   eax
c0013459:	6a 01                	push   0x1
c001345b:	57                   	push   edi
c001345c:	e8 b9 fd ff ff       	call   c001321a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013461:	59                   	pop    ecx
c0013462:	89 c3                	mov    ebx,eax
c0013464:	5e                   	pop    esi
c0013465:	68 03 24 02 c0       	push   0xc0022403
c001346a:	6a 00                	push   0x0
c001346c:	e8 3a ff ff ff       	call   c00133ab <zStrtok(char*, char const*)>
c0013471:	83 c4 10             	add    esp,0x10
c0013474:	89 c6                	mov    esi,eax
c0013476:	85 c0                	test   eax,eax
c0013478:	74 18                	je     c0013492 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001347a:	52                   	push   edx
c001347b:	52                   	push   edx
c001347c:	53                   	push   ebx
c001347d:	57                   	push   edi
c001347e:	e8 81 f5 ff ff       	call   c0012a04 <CmEnterDirectory(Reghive_Tag*, int)>
c0013483:	83 c4 10             	add    esp,0x10
c0013486:	89 c3                	mov    ebx,eax
c0013488:	83 f8 ff             	cmp    eax,0xffffffff
c001348b:	74 05                	je     c0013492 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001348d:	50                   	push   eax
c001348e:	56                   	push   esi
c001348f:	53                   	push   ebx
c0013490:	eb c9                	jmp    c001345b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013492:	81 c4 00 01 00 00    	add    esp,0x100
c0013498:	89 d8                	mov    eax,ebx
c001349a:	5b                   	pop    ebx
c001349b:	5e                   	pop    esi
c001349c:	5f                   	pop    edi
c001349d:	c3                   	ret    

c001349e <CmDisplayTree(Reghive_Tag*, int, int)>:
c001349e:	55                   	push   ebp
c001349f:	57                   	push   edi
c00134a0:	56                   	push   esi
c00134a1:	53                   	push   ebx
c00134a2:	83 ec 5c             	sub    esp,0x5c
c00134a5:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00134a9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00134ad:	85 db                	test   ebx,ebx
c00134af:	0f 8e 84 00 00 00    	jle    c0013539 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00134b5:	31 ed                	xor    ebp,ebp
c00134b7:	57                   	push   edi
c00134b8:	6a 32                	push   0x32
c00134ba:	6a 00                	push   0x0
c00134bc:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00134c0:	57                   	push   edi
c00134c1:	e8 2a d0 fe ff       	call   c00004f0 <memset>
c00134c6:	83 c4 0c             	add    esp,0xc
c00134c9:	57                   	push   edi
c00134ca:	53                   	push   ebx
c00134cb:	56                   	push   esi
c00134cc:	e8 30 fb ff ff       	call   c0013001 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d5:	83 c4 10             	add    esp,0x10
c00134d8:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00134dc:	7d 13                	jge    c00134f1 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00134de:	83 ec 0c             	sub    esp,0xc
c00134e1:	45                   	inc    ebp
c00134e2:	68 a7 27 02 c0       	push   0xc00227a7
c00134e7:	e8 59 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	eb e7                	jmp    c00134d8 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00134f1:	51                   	push   ecx
c00134f2:	57                   	push   edi
c00134f3:	53                   	push   ebx
c00134f4:	68 a5 20 02 c0       	push   0xc00220a5
c00134f9:	e8 47 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013506:	75 1e                	jne    c0013526 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013508:	52                   	push   edx
c0013509:	52                   	push   edx
c001350a:	53                   	push   ebx
c001350b:	56                   	push   esi
c001350c:	e8 f3 f4 ff ff       	call   c0012a04 <CmEnterDirectory(Reghive_Tag*, int)>
c0013511:	83 c4 0c             	add    esp,0xc
c0013514:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013518:	8d 51 04             	lea    edx,[ecx+0x4]
c001351b:	52                   	push   edx
c001351c:	50                   	push   eax
c001351d:	56                   	push   esi
c001351e:	e8 7b ff ff ff       	call   c001349e <CmDisplayTree(Reghive_Tag*, int, int)>
c0013523:	83 c4 10             	add    esp,0x10
c0013526:	50                   	push   eax
c0013527:	50                   	push   eax
c0013528:	53                   	push   ebx
c0013529:	56                   	push   esi
c001352a:	e8 14 f5 ff ff       	call   c0012a43 <CmGetNext(Reghive_Tag*, int)>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	89 c3                	mov    ebx,eax
c0013534:	e9 74 ff ff ff       	jmp    c00134ad <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013539:	83 c4 5c             	add    esp,0x5c
c001353c:	5b                   	pop    ebx
c001353d:	5e                   	pop    esi
c001353e:	5f                   	pop    edi
c001353f:	5d                   	pop    ebp
c0013540:	c3                   	ret    

c0013541 <CmSplitFinalSlashInPlace(char*)>:
c0013541:	53                   	push   ebx
c0013542:	83 ec 14             	sub    esp,0x14
c0013545:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013549:	53                   	push   ebx
c001354a:	e8 21 d0 fe ff       	call   c0000570 <strlen>
c001354f:	83 c4 10             	add    esp,0x10
c0013552:	48                   	dec    eax
c0013553:	85 c0                	test   eax,eax
c0013555:	74 15                	je     c001356c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013557:	8d 14 03             	lea    edx,[ebx+eax*1]
c001355a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001355e:	75 09                	jne    c0013569 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013560:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013563:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013567:	eb 05                	jmp    c001356e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013569:	48                   	dec    eax
c001356a:	eb e7                	jmp    c0013553 <CmSplitFinalSlashInPlace(char*)+0x12>
c001356c:	31 c0                	xor    eax,eax
c001356e:	83 c4 08             	add    esp,0x8
c0013571:	5b                   	pop    ebx
c0013572:	c3                   	ret    

c0013573 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013573:	55                   	push   ebp
c0013574:	57                   	push   edi
c0013575:	56                   	push   esi
c0013576:	53                   	push   ebx
c0013577:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001357d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013584:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013586:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013589:	80 fa 40             	cmp    dl,0x40
c001358c:	75 1c                	jne    c00135aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c001358e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013591:	85 c9                	test   ecx,ecx
c0013593:	0f 84 09 01 00 00    	je     c00136a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013599:	8d 43 01             	lea    eax,[ebx+0x1]
c001359c:	83 f9 3a             	cmp    ecx,0x3a
c001359f:	74 04                	je     c00135a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00135a1:	89 c3                	mov    ebx,eax
c00135a3:	eb e9                	jmp    c001358e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00135a5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00135a8:	89 c3                	mov    ebx,eax
c00135aa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00135ae:	50                   	push   eax
c00135af:	6a 40                	push   0x40
c00135b1:	6a 00                	push   0x0
c00135b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135b7:	50                   	push   eax
c00135b8:	e8 33 cf fe ff       	call   c00004f0 <memset>
c00135bd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00135c4:	31 c0                	xor    eax,eax
c00135c6:	83 c4 10             	add    esp,0x10
c00135c9:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c00135ce:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00135d1:	89 d1                	mov    ecx,edx
c00135d3:	85 d2                	test   edx,edx
c00135d5:	0f 84 c7 00 00 00    	je     c00136a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00135db:	3d c7 00 00 00       	cmp    eax,0xc7
c00135e0:	0f 8f bc 00 00 00    	jg     c00136a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00135e6:	83 fa 0a             	cmp    edx,0xa
c00135e9:	0f 85 a4 00 00 00    	jne    c0013693 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00135ef:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00135f4:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00135f9:	89 c8                	mov    eax,ecx
c00135fb:	a8 df                	test   al,0xdf
c00135fd:	0f 94 c2             	sete   dl
c0013600:	83 f9 23             	cmp    ecx,0x23
c0013603:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013608:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c001360c:	80 e2 01             	and    dl,0x1
c001360f:	75 4a                	jne    c001365b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013611:	83 e8 09             	sub    eax,0x9
c0013614:	3c 01                	cmp    al,0x1
c0013616:	76 43                	jbe    c001365b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013618:	83 f9 5b             	cmp    ecx,0x5b
c001361b:	75 42                	jne    c001365f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c001361d:	83 fe 40             	cmp    esi,0x40
c0013620:	75 39                	jne    c001365b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013622:	83 ec 0c             	sub    esp,0xc
c0013625:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013629:	52                   	push   edx
c001362a:	e8 41 cf fe ff       	call   c0000570 <strlen>
c001362f:	83 c4 10             	add    esp,0x10
c0013632:	83 f8 3f             	cmp    eax,0x3f
c0013635:	77 6b                	ja     c00136a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013637:	50                   	push   eax
c0013638:	50                   	push   eax
c0013639:	8d 54 24 61          	lea    edx,[esp+0x61]
c001363d:	52                   	push   edx
c001363e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013642:	52                   	push   edx
c0013643:	e8 f8 cf fe ff       	call   c0000640 <strcpy>
c0013648:	58                   	pop    eax
c0013649:	8d 54 24 24          	lea    edx,[esp+0x24]
c001364d:	52                   	push   edx
c001364e:	e8 1d cf fe ff       	call   c0000570 <strlen>
c0013653:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013658:	83 c4 10             	add    esp,0x10
c001365b:	31 d2                	xor    edx,edx
c001365d:	eb 3b                	jmp    c001369a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c001365f:	83 fe 40             	cmp    esi,0x40
c0013662:	74 06                	je     c001366a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013664:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013668:	eb 20                	jmp    c001368a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c001366a:	50                   	push   eax
c001366b:	50                   	push   eax
c001366c:	55                   	push   ebp
c001366d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013671:	50                   	push   eax
c0013672:	e8 d9 d0 fe ff       	call   c0000750 <strcmp>
c0013677:	83 c4 10             	add    esp,0x10
c001367a:	85 c0                	test   eax,eax
c001367c:	75 dd                	jne    c001365b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001367e:	eb e4                	jmp    c0013664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013680:	8d 50 01             	lea    edx,[eax+0x1]
c0013683:	83 f9 3d             	cmp    ecx,0x3d
c0013686:	74 1e                	je     c00136a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013688:	89 d0                	mov    eax,edx
c001368a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001368d:	85 c9                	test   ecx,ecx
c001368f:	75 ef                	jne    c0013680 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013691:	eb 0f                	jmp    c00136a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013693:	8d 50 01             	lea    edx,[eax+0x1]
c0013696:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001369a:	47                   	inc    edi
c001369b:	89 d0                	mov    eax,edx
c001369d:	e9 2c ff ff ff       	jmp    c00135ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c00136a2:	31 c0                	xor    eax,eax
c00136a4:	eb 33                	jmp    c00136d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c00136a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00136aa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00136ad:	50                   	push   eax
c00136ae:	50                   	push   eax
c00136af:	8d 44 24 60          	lea    eax,[esp+0x60]
c00136b3:	50                   	push   eax
c00136b4:	53                   	push   ebx
c00136b5:	e8 96 d0 fe ff       	call   c0000750 <strcmp>
c00136ba:	83 c4 10             	add    esp,0x10
c00136bd:	85 c0                	test   eax,eax
c00136bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136c3:	75 96                	jne    c001365b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00136c5:	51                   	push   ecx
c00136c6:	51                   	push   ecx
c00136c7:	52                   	push   edx
c00136c8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00136cf:	e8 6c cf fe ff       	call   c0000640 <strcpy>
c00136d4:	83 c4 10             	add    esp,0x10
c00136d7:	b0 01                	mov    al,0x1
c00136d9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00136df:	5b                   	pop    ebx
c00136e0:	5e                   	pop    esi
c00136e1:	5f                   	pop    edi
c00136e2:	5d                   	pop    ebp
c00136e3:	c3                   	ret    

c00136e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00136e4:	57                   	push   edi
c00136e5:	56                   	push   esi
c00136e6:	53                   	push   ebx
c00136e7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00136ed:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00136f4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00136fb:	53                   	push   ebx
c00136fc:	e8 6f ce fe ff       	call   c0000570 <strlen>
c0013701:	89 34 24             	mov    DWORD PTR [esp],esi
c0013704:	89 c7                	mov    edi,eax
c0013706:	e8 65 ce fe ff       	call   c0000570 <strlen>
c001370b:	83 c4 10             	add    esp,0x10
c001370e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013712:	3d ff 00 00 00       	cmp    eax,0xff
c0013717:	0f 87 d3 00 00 00    	ja     c00137f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001371d:	57                   	push   edi
c001371e:	57                   	push   edi
c001371f:	56                   	push   esi
c0013720:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013724:	56                   	push   esi
c0013725:	e8 16 cf fe ff       	call   c0000640 <strcpy>
c001372a:	58                   	pop    eax
c001372b:	5a                   	pop    edx
c001372c:	68 03 24 02 c0       	push   0xc0022403
c0013731:	56                   	push   esi
c0013732:	e8 09 d1 fe ff       	call   c0000840 <strcat>
c0013737:	59                   	pop    ecx
c0013738:	5f                   	pop    edi
c0013739:	53                   	push   ebx
c001373a:	56                   	push   esi
c001373b:	e8 00 d1 fe ff       	call   c0000840 <strcat>
c0013740:	58                   	pop    eax
c0013741:	5a                   	pop    edx
c0013742:	68 af 20 02 c0       	push   0xc00220af
c0013747:	56                   	push   esi
c0013748:	e8 f3 d0 fe ff       	call   c0000840 <strcat>
c001374d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013754:	e8 5d 43 ff ff       	call   c0007ab6 <malloc>
c0013759:	83 c4 0c             	add    esp,0xc
c001375c:	89 c3                	mov    ebx,eax
c001375e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0013764:	56                   	push   esi
c0013765:	50                   	push   eax
c0013766:	e8 dd 80 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c001376b:	83 c4 10             	add    esp,0x10
c001376e:	85 db                	test   ebx,ebx
c0013770:	74 7e                	je     c00137f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013772:	51                   	push   ecx
c0013773:	51                   	push   ecx
c0013774:	6a 01                	push   0x1
c0013776:	53                   	push   ebx
c0013777:	e8 94 81 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c001377c:	83 c4 10             	add    esp,0x10
c001377f:	85 c0                	test   eax,eax
c0013781:	74 08                	je     c001378b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013783:	83 ec 0c             	sub    esp,0xc
c0013786:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013788:	53                   	push   ebx
c0013789:	eb 5f                	jmp    c00137ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001378b:	52                   	push   edx
c001378c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013790:	50                   	push   eax
c0013791:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013795:	50                   	push   eax
c0013796:	53                   	push   ebx
c0013797:	e8 76 84 ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c001379c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	89 c1                	mov    ecx,eax
c00137a5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00137a9:	74 31                	je     c00137dc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00137ab:	83 ec 0c             	sub    esp,0xc
c00137ae:	50                   	push   eax
c00137af:	e8 02 43 ff ff       	call   c0007ab6 <malloc>
c00137b4:	89 c6                	mov    esi,eax
c00137b6:	58                   	pop    eax
c00137b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b9:	8d 54 24 20          	lea    edx,[esp+0x20]
c00137bd:	52                   	push   edx
c00137be:	56                   	push   esi
c00137bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137c7:	53                   	push   ebx
c00137c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137cb:	83 c4 20             	add    esp,0x20
c00137ce:	85 c0                	test   eax,eax
c00137d0:	75 0a                	jne    c00137dc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00137d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00137da:	74 18                	je     c00137f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	53                   	push   ebx
c00137e0:	e8 89 81 ff ff       	call   c000b96e <File::close()>
c00137e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137ed:	83 c4 10             	add    esp,0x10
c00137f0:	31 c0                	xor    eax,eax
c00137f2:	eb 3b                	jmp    c001382f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	53                   	push   ebx
c00137f8:	e8 71 81 ff ff       	call   c000b96e <File::close()>
c00137fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013802:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013805:	83 c4 0c             	add    esp,0xc
c0013808:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001380f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013816:	56                   	push   esi
c0013817:	e8 57 fd ff ff       	call   c0013573 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001381c:	89 34 24             	mov    DWORD PTR [esp],esi
c001381f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013823:	e8 9e 42 ff ff       	call   c0007ac6 <free>
c0013828:	83 c4 10             	add    esp,0x10
c001382b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001382f:	81 c4 20 01 00 00    	add    esp,0x120
c0013835:	5b                   	pop    ebx
c0013836:	5e                   	pop    esi
c0013837:	5f                   	pop    edi
c0013838:	c3                   	ret    

c0013839 <Reg::getLine(char*, char*, char*)>:
c0013839:	57                   	push   edi
c001383a:	56                   	push   esi
c001383b:	53                   	push   ebx
c001383c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013840:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013844:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013848:	57                   	push   edi
c0013849:	56                   	push   esi
c001384a:	53                   	push   ebx
c001384b:	68 b4 20 02 c0       	push   0xc00220b4
c0013850:	e8 8f fe ff ff       	call   c00136e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013855:	83 c4 10             	add    esp,0x10
c0013858:	84 c0                	test   al,al
c001385a:	75 10                	jne    c001386c <Reg::getLine(char*, char*, char*)+0x33>
c001385c:	57                   	push   edi
c001385d:	56                   	push   esi
c001385e:	53                   	push   ebx
c001385f:	68 d9 20 02 c0       	push   0xc00220d9
c0013864:	e8 7b fe ff ff       	call   c00136e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013869:	83 c4 10             	add    esp,0x10
c001386c:	5b                   	pop    ebx
c001386d:	5e                   	pop    esi
c001386e:	5f                   	pop    edi
c001386f:	c3                   	ret    

c0013870 <Reg::readInt(char*, char*, int*)>:
c0013870:	55                   	push   ebp
c0013871:	57                   	push   edi
c0013872:	56                   	push   esi
c0013873:	53                   	push   ebx
c0013874:	81 ec f0 00 00 00    	sub    esp,0xf0
c001387a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001387e:	55                   	push   ebp
c001387f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013886:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001388d:	e8 a7 ff ff ff       	call   c0013839 <Reg::getLine(char*, char*, char*)>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	84 c0                	test   al,al
c0013897:	0f 84 b6 00 00 00    	je     c0013953 <Reg::readInt(char*, char*, int*)+0xe3>
c001389d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00138a2:	83 fa 2b             	cmp    edx,0x2b
c00138a5:	74 0c                	je     c00138b3 <Reg::readInt(char*, char*, int*)+0x43>
c00138a7:	83 fa 2d             	cmp    edx,0x2d
c00138aa:	75 0e                	jne    c00138ba <Reg::readInt(char*, char*, int*)+0x4a>
c00138ac:	ba 01 00 00 00       	mov    edx,0x1
c00138b1:	eb 0b                	jmp    c00138be <Reg::readInt(char*, char*, int*)+0x4e>
c00138b3:	ba 01 00 00 00       	mov    edx,0x1
c00138b8:	eb 02                	jmp    c00138bc <Reg::readInt(char*, char*, int*)+0x4c>
c00138ba:	31 d2                	xor    edx,edx
c00138bc:	31 c0                	xor    eax,eax
c00138be:	be 0a 00 00 00       	mov    esi,0xa
c00138c3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00138c8:	75 21                	jne    c00138eb <Reg::readInt(char*, char*, int*)+0x7b>
c00138ca:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00138cf:	83 f9 78             	cmp    ecx,0x78
c00138d2:	75 0a                	jne    c00138de <Reg::readInt(char*, char*, int*)+0x6e>
c00138d4:	83 c2 02             	add    edx,0x2
c00138d7:	be 10 00 00 00       	mov    esi,0x10
c00138dc:	eb 0d                	jmp    c00138eb <Reg::readInt(char*, char*, int*)+0x7b>
c00138de:	83 f9 62             	cmp    ecx,0x62
c00138e1:	75 08                	jne    c00138eb <Reg::readInt(char*, char*, int*)+0x7b>
c00138e3:	83 c2 02             	add    edx,0x2
c00138e6:	be 02 00 00 00       	mov    esi,0x2
c00138eb:	01 d5                	add    ebp,edx
c00138ed:	31 d2                	xor    edx,edx
c00138ef:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00138f3:	83 f9 0d             	cmp    ecx,0xd
c00138f6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00138fa:	0f 94 c3             	sete   bl
c00138fd:	85 c9                	test   ecx,ecx
c00138ff:	89 df                	mov    edi,ebx
c0013901:	0f 94 c3             	sete   bl
c0013904:	09 df                	or     edi,ebx
c0013906:	89 fb                	mov    ebx,edi
c0013908:	83 e7 01             	and    edi,0x1
c001390b:	75 35                	jne    c0013942 <Reg::readInt(char*, char*, int*)+0xd2>
c001390d:	0f af d6             	imul   edx,esi
c0013910:	83 fe 10             	cmp    esi,0x10
c0013913:	75 26                	jne    c001393b <Reg::readInt(char*, char*, int*)+0xcb>
c0013915:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013919:	83 ef 41             	sub    edi,0x41
c001391c:	89 fb                	mov    ebx,edi
c001391e:	80 fb 05             	cmp    bl,0x5
c0013921:	77 06                	ja     c0013929 <Reg::readInt(char*, char*, int*)+0xb9>
c0013923:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013927:	eb 16                	jmp    c001393f <Reg::readInt(char*, char*, int*)+0xcf>
c0013929:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001392d:	83 eb 61             	sub    ebx,0x61
c0013930:	80 fb 05             	cmp    bl,0x5
c0013933:	77 06                	ja     c001393b <Reg::readInt(char*, char*, int*)+0xcb>
c0013935:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013939:	eb 04                	jmp    c001393f <Reg::readInt(char*, char*, int*)+0xcf>
c001393b:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001393f:	45                   	inc    ebp
c0013940:	eb ad                	jmp    c00138ef <Reg::readInt(char*, char*, int*)+0x7f>
c0013942:	84 c0                	test   al,al
c0013944:	74 02                	je     c0013948 <Reg::readInt(char*, char*, int*)+0xd8>
c0013946:	f7 da                	neg    edx
c0013948:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001394f:	89 10                	mov    DWORD PTR [eax],edx
c0013951:	88 d8                	mov    al,bl
c0013953:	81 c4 ec 00 00 00    	add    esp,0xec
c0013959:	5b                   	pop    ebx
c001395a:	5e                   	pop    esi
c001395b:	5f                   	pop    edi
c001395c:	5d                   	pop    ebp
c001395d:	c3                   	ret    

c001395e <Reg::readString(char*, char*, char*, int)>:
c001395e:	57                   	push   edi
c001395f:	56                   	push   esi
c0013960:	53                   	push   ebx
c0013961:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013967:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001396e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013972:	57                   	push   edi
c0013973:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001397a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013981:	e8 b3 fe ff ff       	call   c0013839 <Reg::getLine(char*, char*, char*)>
c0013986:	83 c4 10             	add    esp,0x10
c0013989:	89 c6                	mov    esi,eax
c001398b:	84 c0                	test   al,al
c001398d:	74 44                	je     c00139d3 <Reg::readString(char*, char*, char*, int)+0x75>
c001398f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013996:	31 c0                	xor    eax,eax
c0013998:	4a                   	dec    edx
c0013999:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001399c:	84 c9                	test   cl,cl
c001399e:	74 0f                	je     c00139af <Reg::readString(char*, char*, char*, int)+0x51>
c00139a0:	39 c2                	cmp    edx,eax
c00139a2:	7e 0b                	jle    c00139af <Reg::readString(char*, char*, char*, int)+0x51>
c00139a4:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00139a7:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00139ac:	40                   	inc    eax
c00139ad:	eb ea                	jmp    c0013999 <Reg::readString(char*, char*, char*, int)+0x3b>
c00139af:	83 ec 0c             	sub    esp,0xc
c00139b2:	53                   	push   ebx
c00139b3:	e8 b8 cb fe ff       	call   c0000570 <strlen>
c00139b8:	83 c4 10             	add    esp,0x10
c00139bb:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00139c0:	75 11                	jne    c00139d3 <Reg::readString(char*, char*, char*, int)+0x75>
c00139c2:	83 ec 0c             	sub    esp,0xc
c00139c5:	53                   	push   ebx
c00139c6:	e8 a5 cb fe ff       	call   c0000570 <strlen>
c00139cb:	83 c4 10             	add    esp,0x10
c00139ce:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00139d3:	81 c4 d0 00 00 00    	add    esp,0xd0
c00139d9:	89 f0                	mov    eax,esi
c00139db:	5b                   	pop    ebx
c00139dc:	5e                   	pop    esi
c00139dd:	5f                   	pop    edi
c00139de:	c3                   	ret    

c00139df <Reg::readBool(char*, char*, bool*)>:
c00139df:	83 ec 20             	sub    esp,0x20
c00139e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139e6:	50                   	push   eax
c00139e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ef:	e8 7c fe ff ff       	call   c0013870 <Reg::readInt(char*, char*, int*)>
c00139f4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00139f9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00139fd:	0f 95 02             	setne  BYTE PTR [edx]
c0013a00:	83 c4 2c             	add    esp,0x2c
c0013a03:	c3                   	ret    

c0013a04 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013a04:	53                   	push   ebx
c0013a05:	83 ec 1c             	sub    esp,0x1c
c0013a08:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013a0c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013a10:	50                   	push   eax
c0013a11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a19:	e8 c1 ff ff ff       	call   c00139df <Reg::readBool(char*, char*, bool*)>
c0013a1e:	83 c4 10             	add    esp,0x10
c0013a21:	84 c0                	test   al,al
c0013a23:	74 04                	je     c0013a29 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013a25:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013a29:	88 d8                	mov    al,bl
c0013a2b:	83 c4 18             	add    esp,0x18
c0013a2e:	5b                   	pop    ebx
c0013a2f:	c3                   	ret    

c0013a30 <Reg::readIntWithDefault(char*, char*, int)>:
c0013a30:	53                   	push   ebx
c0013a31:	83 ec 1c             	sub    esp,0x1c
c0013a34:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a38:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a3c:	50                   	push   eax
c0013a3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a45:	e8 26 fe ff ff       	call   c0013870 <Reg::readInt(char*, char*, int*)>
c0013a4a:	83 c4 10             	add    esp,0x10
c0013a4d:	84 c0                	test   al,al
c0013a4f:	74 04                	je     c0013a55 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013a51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a55:	89 d8                	mov    eax,ebx
c0013a57:	83 c4 18             	add    esp,0x18
c0013a5a:	5b                   	pop    ebx
c0013a5b:	c3                   	ret    

c0013a5c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013a5c:	57                   	push   edi
c0013a5d:	56                   	push   esi
c0013a5e:	56                   	push   esi
c0013a5f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013a67:	56                   	push   esi
c0013a68:	57                   	push   edi
c0013a69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a71:	e8 e8 fe ff ff       	call   c001395e <Reg::readString(char*, char*, char*, int)>
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	84 c0                	test   al,al
c0013a7b:	75 1a                	jne    c0013a97 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013a7d:	51                   	push   ecx
c0013a7e:	56                   	push   esi
c0013a7f:	6a 00                	push   0x0
c0013a81:	57                   	push   edi
c0013a82:	e8 69 ca fe ff       	call   c00004f0 <memset>
c0013a87:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013a8a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a90:	83 c4 10             	add    esp,0x10
c0013a93:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a97:	89 f8                	mov    eax,edi
c0013a99:	5a                   	pop    edx
c0013a9a:	5e                   	pop    esi
c0013a9b:	5f                   	pop    edi
c0013a9c:	c3                   	ret    

c0013a9d <SysEject(regs*)>:
c0013a9d:	83 ec 0c             	sub    esp,0xc
c0013aa0:	83 ca ff             	or     edx,0xffffffff
c0013aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013aaa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013aaf:	83 e9 41             	sub    ecx,0x41
c0013ab2:	83 f9 19             	cmp    ecx,0x19
c0013ab5:	77 18                	ja     c0013acf <SysEject(regs*)+0x32>
c0013ab7:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013abe:	85 c9                	test   ecx,ecx
c0013ac0:	74 0d                	je     c0013acf <SysEject(regs*)+0x32>
c0013ac2:	83 ec 0c             	sub    esp,0xc
c0013ac5:	51                   	push   ecx
c0013ac6:	e8 17 a0 ff ff       	call   c000dae2 <LogicalDisk::eject()>
c0013acb:	83 c4 10             	add    esp,0x10
c0013ace:	99                   	cdq    
c0013acf:	83 c4 0c             	add    esp,0xc
c0013ad2:	c3                   	ret    

c0013ad3 <SysExit(regs*)>:
c0013ad3:	83 ec 18             	sub    esp,0x18
c0013ad6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ada:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013add:	e8 16 2b 00 00       	call   c00165f8 <terminateTask(int)>
c0013ae2:	83 c8 ff             	or     eax,0xffffffff
c0013ae5:	83 c4 1c             	add    esp,0x1c
c0013ae8:	89 c2                	mov    edx,eax
c0013aea:	c3                   	ret    

c0013aeb <SysGetCwd(regs*)>:
c0013aeb:	83 ec 10             	sub    esp,0x10
c0013aee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013af2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013af5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013af8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013afd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b00:	e8 91 7a ff ff       	call   c000b596 <Fs::getcwd(Process*, char*, int)>
c0013b05:	83 c4 1c             	add    esp,0x1c
c0013b08:	99                   	cdq    
c0013b09:	c3                   	ret    

c0013b0a <SysGetPID(regs*)>:
c0013b0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b14:	99                   	cdq    
c0013b15:	c3                   	ret    

c0013b16 <SysGetRAMData(regs*)>:
c0013b16:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013b1c:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013b26:	99                   	cdq    
c0013b27:	f7 f9                	idiv   ecx
c0013b29:	c1 e0 18             	shl    eax,0x18
c0013b2c:	09 c8                	or     eax,ecx
c0013b2e:	99                   	cdq    
c0013b2f:	c3                   	ret    

c0013b30 <SysGetVGAPtr(regs*)>:
c0013b30:	55                   	push   ebp
c0013b31:	57                   	push   edi
c0013b32:	56                   	push   esi
c0013b33:	53                   	push   ebx
c0013b34:	83 ec 18             	sub    esp,0x18
c0013b37:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b3b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b3e:	e8 81 25 00 00       	call   c00160c4 <Thr::processFromPID(int)>
c0013b43:	83 c4 10             	add    esp,0x10
c0013b46:	89 c1                	mov    ecx,eax
c0013b48:	b8 01 00 00 00       	mov    eax,0x1
c0013b4d:	85 c9                	test   ecx,ecx
c0013b4f:	74 57                	je     c0013ba8 <SysGetVGAPtr(regs*)+0x78>
c0013b51:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013b57:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013b5b:	74 0c                	je     c0013b69 <SysGetVGAPtr(regs*)+0x39>
c0013b5d:	83 ec 0c             	sub    esp,0xc
c0013b60:	55                   	push   ebp
c0013b61:	e8 f3 4b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013b66:	83 c4 10             	add    esp,0x10
c0013b69:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013b6c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013b6f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013b74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b76:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013b79:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b7c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013b82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b85:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013b88:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013b8e:	50                   	push   eax
c0013b8f:	50                   	push   eax
c0013b90:	68 f4 20 02 c0       	push   0xc00220f4
c0013b95:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b98:	05 a8 0f 00 00       	add    eax,0xfa8
c0013b9d:	50                   	push   eax
c0013b9e:	e8 9d ca fe ff       	call   c0000640 <strcpy>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	31 c0                	xor    eax,eax
c0013ba8:	83 c4 0c             	add    esp,0xc
c0013bab:	31 d2                	xor    edx,edx
c0013bad:	5b                   	pop    ebx
c0013bae:	5e                   	pop    esi
c0013baf:	5f                   	pop    edi
c0013bb0:	5d                   	pop    ebp
c0013bb1:	c3                   	ret    
c0013bb2:	66 90                	xchg   ax,ax

c0013bb4 <SysKill(regs*)>:
c0013bb4:	53                   	push   ebx
c0013bb5:	83 ec 08             	sub    esp,0x8
c0013bb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bbc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013bc0:	75 16                	jne    c0013bd8 <SysKill(regs*)+0x24>
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	68 fe 20 02 c0       	push   0xc00220fe
c0013bca:	e8 ca d7 ff ff       	call   c0011399 <KePanic(char const*)>
c0013bcf:	83 c4 10             	add    esp,0x10
c0013bd2:	e9 89 00 00 00       	jmp    c0013c60 <SysKill(regs*)+0xac>
c0013bd7:	90                   	nop
c0013bd8:	83 ec 0c             	sub    esp,0xc
c0013bdb:	68 e4 96 02 c0       	push   0xc00296e4
c0013be0:	e8 d7 bc 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013be5:	8d 76 00             	lea    esi,[esi+0x0]
c0013be8:	83 c4 10             	add    esp,0x10
c0013beb:	85 c0                	test   eax,eax
c0013bed:	74 19                	je     c0013c08 <SysKill(regs*)+0x54>
c0013bef:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013bf2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013bf5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013bf7:	74 33                	je     c0013c2c <SysKill(regs*)+0x78>
c0013bf9:	52                   	push   edx
c0013bfa:	52                   	push   edx
c0013bfb:	50                   	push   eax
c0013bfc:	68 e4 96 02 c0       	push   0xc00296e4
c0013c01:	e8 d6 bf 00 00       	call   c001fbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c06:	eb e0                	jmp    c0013be8 <SysKill(regs*)+0x34>
c0013c08:	83 ec 0c             	sub    esp,0xc
c0013c0b:	68 d8 96 02 c0       	push   0xc00296d8
c0013c10:	e8 a7 bc 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c15:	8d 76 00             	lea    esi,[esi+0x0]
c0013c18:	83 c4 10             	add    esp,0x10
c0013c1b:	85 c0                	test   eax,eax
c0013c1d:	74 41                	je     c0013c60 <SysKill(regs*)+0xac>
c0013c1f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c22:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c25:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013c27:	75 27                	jne    c0013c50 <SysKill(regs*)+0x9c>
c0013c29:	8d 76 00             	lea    esi,[esi+0x0]
c0013c2c:	51                   	push   ecx
c0013c2d:	51                   	push   ecx
c0013c2e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c39:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c3f:	e8 f6 db ff ff       	call   c001183a <KeRaiseSignal(SigHandlerBlock*, int)>
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	31 c0                	xor    eax,eax
c0013c49:	31 d2                	xor    edx,edx
c0013c4b:	eb 1b                	jmp    c0013c68 <SysKill(regs*)+0xb4>
c0013c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c50:	52                   	push   edx
c0013c51:	52                   	push   edx
c0013c52:	50                   	push   eax
c0013c53:	68 d8 96 02 c0       	push   0xc00296d8
c0013c58:	e8 7f bf 00 00       	call   c001fbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c5d:	eb b9                	jmp    c0013c18 <SysKill(regs*)+0x64>
c0013c5f:	90                   	nop
c0013c60:	83 c8 ff             	or     eax,0xffffffff
c0013c63:	89 c2                	mov    edx,eax
c0013c65:	8d 76 00             	lea    esi,[esi+0x0]
c0013c68:	83 c4 08             	add    esp,0x8
c0013c6b:	5b                   	pop    ebx
c0013c6c:	c3                   	ret    

c0013c6d <SysLoadDLL(regs*)>:
c0013c6d:	56                   	push   esi
c0013c6e:	53                   	push   ebx
c0013c6f:	31 d2                	xor    edx,edx
c0013c71:	51                   	push   ecx
c0013c72:	b8 01 00 00 00       	mov    eax,0x1
c0013c77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c7b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013c7f:	0f 84 8c 00 00 00    	je     c0013d11 <SysLoadDLL(regs*)+0xa4>
c0013c85:	83 ec 0c             	sub    esp,0xc
c0013c88:	68 14 01 00 00       	push   0x114
c0013c8d:	e8 24 3e ff ff       	call   c0007ab6 <malloc>
c0013c92:	83 c4 0c             	add    esp,0xc
c0013c95:	89 c3                	mov    ebx,eax
c0013c97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c9c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c9f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ca2:	53                   	push   ebx
c0013ca3:	e8 a0 7b ff ff       	call   c000b848 <File::File(char const*, Process*)>
c0013ca8:	83 c4 10             	add    esp,0x10
c0013cab:	31 d2                	xor    edx,edx
c0013cad:	b8 02 00 00 00       	mov    eax,0x2
c0013cb2:	85 db                	test   ebx,ebx
c0013cb4:	74 5b                	je     c0013d11 <SysLoadDLL(regs*)+0xa4>
c0013cb6:	83 ec 0c             	sub    esp,0xc
c0013cb9:	53                   	push   ebx
c0013cba:	e8 15 7f ff ff       	call   c000bbd4 <File::exists()>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	84 c0                	test   al,al
c0013cc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc6:	75 11                	jne    c0013cd9 <SysLoadDLL(regs*)+0x6c>
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	53                   	push   ebx
c0013ccc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	b8 03 00 00 00       	mov    eax,0x3
c0013cd7:	eb 36                	jmp    c0013d0f <SysLoadDLL(regs*)+0xa2>
c0013cd9:	83 ec 0c             	sub    esp,0xc
c0013cdc:	53                   	push   ebx
c0013cdd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ce0:	58                   	pop    eax
c0013ce1:	5a                   	pop    edx
c0013ce2:	6a 00                	push   0x0
c0013ce4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ce7:	e8 0e 15 00 00       	call   c00151fa <Thr::loadDLL(char const*, bool)>
c0013cec:	83 c4 10             	add    esp,0x10
c0013cef:	89 c1                	mov    ecx,eax
c0013cf1:	31 d2                	xor    edx,edx
c0013cf3:	b8 04 00 00 00       	mov    eax,0x4
c0013cf8:	85 c9                	test   ecx,ecx
c0013cfa:	74 15                	je     c0013d11 <SysLoadDLL(regs*)+0xa4>
c0013cfc:	53                   	push   ebx
c0013cfd:	53                   	push   ebx
c0013cfe:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013d04:	51                   	push   ecx
c0013d05:	e8 21 17 00 00       	call   c001542b <Thr::executeDLL(unsigned long, void*)>
c0013d0a:	83 c4 10             	add    esp,0x10
c0013d0d:	31 c0                	xor    eax,eax
c0013d0f:	31 d2                	xor    edx,edx
c0013d11:	59                   	pop    ecx
c0013d12:	5b                   	pop    ebx
c0013d13:	5e                   	pop    esi
c0013d14:	c3                   	ret    

c0013d15 <SysRead(regs*)>:
c0013d15:	57                   	push   edi
c0013d16:	56                   	push   esi
c0013d17:	53                   	push   ebx
c0013d18:	83 ec 10             	sub    esp,0x10
c0013d1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013d1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d22:	83 f8 02             	cmp    eax,0x2
c0013d25:	77 10                	ja     c0013d37 <SysRead(regs*)+0x22>
c0013d27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d2f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013d35:	eb 0e                	jmp    c0013d45 <SysRead(regs*)+0x30>
c0013d37:	83 ec 0c             	sub    esp,0xc
c0013d3a:	50                   	push   eax
c0013d3b:	e8 73 57 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	89 c1                	mov    ecx,eax
c0013d45:	83 c8 ff             	or     eax,0xffffffff
c0013d48:	85 c9                	test   ecx,ecx
c0013d4a:	89 c2                	mov    edx,eax
c0013d4c:	74 28                	je     c0013d76 <SysRead(regs*)+0x61>
c0013d4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d56:	31 ff                	xor    edi,edi
c0013d58:	83 ec 0c             	sub    esp,0xc
c0013d5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d5d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013d61:	52                   	push   edx
c0013d62:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d65:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013d68:	57                   	push   edi
c0013d69:	56                   	push   esi
c0013d6a:	51                   	push   ecx
c0013d6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013d72:	83 c4 20             	add    esp,0x20
c0013d75:	99                   	cdq    
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	5b                   	pop    ebx
c0013d7a:	5e                   	pop    esi
c0013d7b:	5f                   	pop    edi
c0013d7c:	c3                   	ret    

c0013d7d <SysRegisterSignal(regs*)>:
c0013d7d:	83 ec 18             	sub    esp,0x18
c0013d80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d84:	6a 00                	push   0x0
c0013d86:	6a 00                	push   0x0
c0013d88:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d8b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d93:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d96:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013d9c:	e8 63 da ff ff       	call   c0011804 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013da1:	83 c4 2c             	add    esp,0x2c
c0013da4:	99                   	cdq    
c0013da5:	c3                   	ret    

c0013da6 <SysRegistryGetTypeFromPath(regs*)>:
c0013da6:	57                   	push   edi
c0013da7:	56                   	push   esi
c0013da8:	53                   	push   ebx
c0013da9:	81 ec 38 01 00 00    	sub    esp,0x138
c0013daf:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013db6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013db9:	68 1f 21 02 c0       	push   0xc002211f
c0013dbe:	e8 82 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013dc3:	5a                   	pop    edx
c0013dc4:	59                   	pop    ecx
c0013dc5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013dc8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dcb:	e8 4d f6 ff ff       	call   c001341d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013dd0:	5f                   	pop    edi
c0013dd1:	89 c6                	mov    esi,eax
c0013dd3:	5a                   	pop    edx
c0013dd4:	50                   	push   eax
c0013dd5:	68 3f 21 02 c0       	push   0xc002213f
c0013dda:	e8 66 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ddf:	83 c4 10             	add    esp,0x10
c0013de2:	85 f6                	test   esi,esi
c0013de4:	74 28                	je     c0013e0e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013de6:	50                   	push   eax
c0013de7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013deb:	57                   	push   edi
c0013dec:	56                   	push   esi
c0013ded:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013df0:	e8 0c f2 ff ff       	call   c0013001 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013df5:	83 c4 0c             	add    esp,0xc
c0013df8:	89 c3                	mov    ebx,eax
c0013dfa:	57                   	push   edi
c0013dfb:	50                   	push   eax
c0013dfc:	68 47 21 02 c0       	push   0xc0022147
c0013e01:	e8 3f 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e06:	89 d8                	mov    eax,ebx
c0013e08:	83 c4 10             	add    esp,0x10
c0013e0b:	99                   	cdq    
c0013e0c:	eb 05                	jmp    c0013e13 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013e0e:	83 c8 ff             	or     eax,0xffffffff
c0013e11:	89 c2                	mov    edx,eax
c0013e13:	81 c4 30 01 00 00    	add    esp,0x130
c0013e19:	5b                   	pop    ebx
c0013e1a:	5e                   	pop    esi
c0013e1b:	5f                   	pop    edi
c0013e1c:	c3                   	ret    

c0013e1d <SysRegistryReadExtent(regs*)>:
c0013e1d:	83 ec 1c             	sub    esp,0x1c
c0013e20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e24:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e27:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013e2a:	85 c0                	test   eax,eax
c0013e2c:	79 1f                	jns    c0013e4d <SysRegistryReadExtent(regs*)+0x30>
c0013e2e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013e33:	52                   	push   edx
c0013e34:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013e38:	52                   	push   edx
c0013e39:	50                   	push   eax
c0013e3a:	51                   	push   ecx
c0013e3b:	e8 b3 f0 ff ff       	call   c0012ef3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013e40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	eb 14                	jmp    c0013e61 <SysRegistryReadExtent(regs*)+0x44>
c0013e4d:	83 ec 04             	sub    esp,0x4
c0013e50:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013e53:	50                   	push   eax
c0013e54:	51                   	push   ecx
c0013e55:	e8 33 eb ff ff       	call   c001298d <CmGetString(Reghive_Tag*, int, char*)>
c0013e5a:	83 c4 10             	add    esp,0x10
c0013e5d:	31 c0                	xor    eax,eax
c0013e5f:	31 d2                	xor    edx,edx
c0013e61:	83 c4 1c             	add    esp,0x1c
c0013e64:	c3                   	ret    

c0013e65 <SysRegistryPathToExtentLookup(regs*)>:
c0013e65:	53                   	push   ebx
c0013e66:	83 ec 10             	sub    esp,0x10
c0013e69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e70:	68 5d 21 02 c0       	push   0xc002215d
c0013e75:	e8 cb 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e7a:	58                   	pop    eax
c0013e7b:	5a                   	pop    edx
c0013e7c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e7f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e82:	e8 96 f5 ff ff       	call   c001341d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013e87:	83 c4 18             	add    esp,0x18
c0013e8a:	99                   	cdq    
c0013e8b:	5b                   	pop    ebx
c0013e8c:	c3                   	ret    

c0013e8d <SysRegistryEnterDirectory(regs*)>:
c0013e8d:	53                   	push   ebx
c0013e8e:	83 ec 10             	sub    esp,0x10
c0013e91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e95:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e98:	68 80 21 02 c0       	push   0xc0022180
c0013e9d:	e8 a3 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ea2:	58                   	pop    eax
c0013ea3:	5a                   	pop    edx
c0013ea4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ea7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013eaa:	e8 55 eb ff ff       	call   c0012a04 <CmEnterDirectory(Reghive_Tag*, int)>
c0013eaf:	83 c4 18             	add    esp,0x18
c0013eb2:	99                   	cdq    
c0013eb3:	5b                   	pop    ebx
c0013eb4:	c3                   	ret    

c0013eb5 <SysRegistryGetNext(regs*)>:
c0013eb5:	53                   	push   ebx
c0013eb6:	83 ec 10             	sub    esp,0x10
c0013eb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ebd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ec0:	68 9e 21 02 c0       	push   0xc002219e
c0013ec5:	e8 7b 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013eca:	58                   	pop    eax
c0013ecb:	5a                   	pop    edx
c0013ecc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ecf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ed2:	e8 6c eb ff ff       	call   c0012a43 <CmGetNext(Reghive_Tag*, int)>
c0013ed7:	83 c4 18             	add    esp,0x18
c0013eda:	99                   	cdq    
c0013edb:	5b                   	pop    ebx
c0013edc:	c3                   	ret    

c0013edd <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013edd:	57                   	push   edi
c0013ede:	56                   	push   esi
c0013edf:	53                   	push   ebx
c0013ee0:	81 ec 34 01 00 00    	sub    esp,0x134
c0013ee6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013eed:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013ef1:	57                   	push   edi
c0013ef2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013ef5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ef8:	e8 04 f1 ff ff       	call   c0013001 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013efd:	89 c3                	mov    ebx,eax
c0013eff:	58                   	pop    eax
c0013f00:	5a                   	pop    edx
c0013f01:	57                   	push   edi
c0013f02:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013f05:	e8 36 c7 fe ff       	call   c0000640 <strcpy>
c0013f0a:	89 d8                	mov    eax,ebx
c0013f0c:	81 c4 40 01 00 00    	add    esp,0x140
c0013f12:	99                   	cdq    
c0013f13:	5b                   	pop    ebx
c0013f14:	5e                   	pop    esi
c0013f15:	5f                   	pop    edi
c0013f16:	c3                   	ret    

c0013f17 <SysRegistryOpen(regs*)>:
c0013f17:	83 ec 18             	sub    esp,0x18
c0013f1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f1e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013f21:	e8 f7 e8 ff ff       	call   c001281d <CmOpen(char const*)>
c0013f26:	83 c4 1c             	add    esp,0x1c
c0013f29:	99                   	cdq    
c0013f2a:	c3                   	ret    

c0013f2b <SysRegistryClose(regs*)>:
c0013f2b:	83 ec 18             	sub    esp,0x18
c0013f2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f32:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f35:	e8 01 ea ff ff       	call   c001293b <CmClose(Reghive_Tag*)>
c0013f3a:	31 c0                	xor    eax,eax
c0013f3c:	31 d2                	xor    edx,edx
c0013f3e:	83 c4 1c             	add    esp,0x1c
c0013f41:	c3                   	ret    

c0013f42 <SysSbrk(regs*)>:
c0013f42:	56                   	push   esi
c0013f43:	53                   	push   ebx
c0013f44:	50                   	push   eax
c0013f45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f51:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013f54:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013f5a:	85 db                	test   ebx,ebx
c0013f5c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013f5f:	74 02                	je     c0013f63 <SysSbrk(regs*)+0x21>
c0013f61:	79 06                	jns    c0013f69 <SysSbrk(regs*)+0x27>
c0013f63:	89 f0                	mov    eax,esi
c0013f65:	31 d2                	xor    edx,edx
c0013f67:	eb 2a                	jmp    c0013f93 <SysSbrk(regs*)+0x51>
c0013f69:	83 c8 ff             	or     eax,0xffffffff
c0013f6c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013f72:	89 c2                	mov    edx,eax
c0013f74:	77 1d                	ja     c0013f93 <SysSbrk(regs*)+0x51>
c0013f76:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013f7c:	50                   	push   eax
c0013f7d:	c1 ea 0c             	shr    edx,0xc
c0013f80:	68 07 0c 00 00       	push   0xc07
c0013f85:	52                   	push   edx
c0013f86:	51                   	push   ecx
c0013f87:	e8 98 5e ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013f8c:	89 f0                	mov    eax,esi
c0013f8e:	31 d2                	xor    edx,edx
c0013f90:	83 c4 10             	add    esp,0x10
c0013f93:	59                   	pop    ecx
c0013f94:	5b                   	pop    ebx
c0013f95:	5e                   	pop    esi
c0013f96:	c3                   	ret    

c0013f97 <SysSetCwd(regs*)>:
c0013f97:	83 ec 14             	sub    esp,0x14
c0013f9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f9e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fa6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fa9:	e8 c5 7c ff ff       	call   c000bc73 <Fs::setcwd(Process*, char*)>
c0013fae:	83 c4 1c             	add    esp,0x1c
c0013fb1:	99                   	cdq    
c0013fb2:	c3                   	ret    

c0013fb3 <SysSetTime(regs*)>:
c0013fb3:	55                   	push   ebp
c0013fb4:	31 c9                	xor    ecx,ecx
c0013fb6:	57                   	push   edi
c0013fb7:	bd 0c 00 00 00       	mov    ebp,0xc
c0013fbc:	56                   	push   esi
c0013fbd:	53                   	push   ebx
c0013fbe:	31 db                	xor    ebx,ebx
c0013fc0:	83 ec 10             	sub    esp,0x10
c0013fc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013fc7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013fca:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013fcd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013fd0:	89 c2                	mov    edx,eax
c0013fd2:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013fd8:	83 e2 1f             	and    edx,0x1f
c0013fdb:	c1 e7 10             	shl    edi,0x10
c0013fde:	42                   	inc    edx
c0013fdf:	c1 e8 05             	shr    eax,0x5
c0013fe2:	88 d1                	mov    cl,dl
c0013fe4:	31 d2                	xor    edx,edx
c0013fe6:	f7 f5                	div    ebp
c0013fe8:	89 dd                	mov    ebp,ebx
c0013fea:	88 d5                	mov    ch,dl
c0013fec:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013ff2:	0f b7 c1             	movzx  eax,cx
c0013ff5:	31 d2                	xor    edx,edx
c0013ff7:	09 f8                	or     eax,edi
c0013ff9:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ffe:	89 c1                	mov    ecx,eax
c0014000:	89 f0                	mov    eax,esi
c0014002:	f7 f7                	div    edi
c0014004:	c1 e2 10             	shl    edx,0x10
c0014007:	09 d5                	or     ebp,edx
c0014009:	31 d2                	xor    edx,edx
c001400b:	89 eb                	mov    ebx,ebp
c001400d:	f7 f7                	div    edi
c001400f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014014:	88 d7                	mov    bh,dl
c0014016:	89 f0                	mov    eax,esi
c0014018:	31 d2                	xor    edx,edx
c001401a:	f7 f7                	div    edi
c001401c:	bf 18 00 00 00       	mov    edi,0x18
c0014021:	31 d2                	xor    edx,edx
c0014023:	f7 f7                	div    edi
c0014025:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001402a:	88 d3                	mov    bl,dl
c001402c:	53                   	push   ebx
c001402d:	51                   	push   ecx
c001402e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014034:	e8 45 84 ff ff       	call   c000c47e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014039:	83 c4 1c             	add    esp,0x1c
c001403c:	83 f0 01             	xor    eax,0x1
c001403f:	5b                   	pop    ebx
c0014040:	0f b6 c0             	movzx  eax,al
c0014043:	5e                   	pop    esi
c0014044:	31 d2                	xor    edx,edx
c0014046:	5f                   	pop    edi
c0014047:	5d                   	pop    ebp
c0014048:	c3                   	ret    

c0014049 <SysTimezone(regs*)>:
c0014049:	53                   	push   ebx
c001404a:	83 ec 08             	sub    esp,0x8
c001404d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014051:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014055:	75 17                	jne    c001406e <SysTimezone(regs*)+0x25>
c0014057:	83 ec 0c             	sub    esp,0xc
c001405a:	68 b5 21 02 c0       	push   0xc00221b5
c001405f:	e8 e1 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014064:	83 c8 ff             	or     eax,0xffffffff
c0014067:	83 c4 10             	add    esp,0x10
c001406a:	89 c2                	mov    edx,eax
c001406c:	eb 20                	jmp    c001408e <SysTimezone(regs*)+0x45>
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	68 ca 21 02 c0       	push   0xc00221ca
c0014076:	e8 ca 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001407b:	58                   	pop    eax
c001407c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001407f:	e8 64 81 ff ff       	call   c000c1e8 <User::loadClockSettings(int)>
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	b8 01 00 00 00       	mov    eax,0x1
c001408c:	31 d2                	xor    edx,edx
c001408e:	83 c4 08             	add    esp,0x8
c0014091:	5b                   	pop    ebx
c0014092:	c3                   	ret    

c0014093 <SysTruncate(regs*)>:
c0014093:	55                   	push   ebp
c0014094:	57                   	push   edi
c0014095:	31 ff                	xor    edi,edi
c0014097:	56                   	push   esi
c0014098:	53                   	push   ebx
c0014099:	83 ec 0c             	sub    esp,0xc
c001409c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140a0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00140a3:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00140a6:	89 ce                	mov    esi,ecx
c00140a8:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00140ac:	0f 84 9a 00 00 00    	je     c001414c <SysTruncate(regs*)+0xb9>
c00140b2:	83 ec 0c             	sub    esp,0xc
c00140b5:	68 14 01 00 00       	push   0x114
c00140ba:	e8 f7 39 ff ff       	call   c0007ab6 <malloc>
c00140bf:	83 c4 0c             	add    esp,0xc
c00140c2:	89 c3                	mov    ebx,eax
c00140c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140c9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140cc:	55                   	push   ebp
c00140cd:	53                   	push   ebx
c00140ce:	e8 75 77 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c00140d3:	83 c4 10             	add    esp,0x10
c00140d6:	31 d2                	xor    edx,edx
c00140d8:	b8 03 00 00 00       	mov    eax,0x3
c00140dd:	85 db                	test   ebx,ebx
c00140df:	0f 84 a2 00 00 00    	je     c0014187 <SysTruncate(regs*)+0xf4>
c00140e5:	51                   	push   ecx
c00140e6:	51                   	push   ecx
c00140e7:	6a 02                	push   0x2
c00140e9:	53                   	push   ebx
c00140ea:	e8 21 78 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	85 c0                	test   eax,eax
c00140f4:	74 13                	je     c0014109 <SysTruncate(regs*)+0x76>
c00140f6:	83 ec 0c             	sub    esp,0xc
c00140f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140fb:	53                   	push   ebx
c00140fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140ff:	83 c4 10             	add    esp,0x10
c0014102:	b8 04 00 00 00       	mov    eax,0x4
c0014107:	eb 7c                	jmp    c0014185 <SysTruncate(regs*)+0xf2>
c0014109:	52                   	push   edx
c001410a:	57                   	push   edi
c001410b:	56                   	push   esi
c001410c:	53                   	push   ebx
c001410d:	e8 12 79 ff ff       	call   c000ba24 <File::truncate(unsigned long long)>
c0014112:	83 c4 10             	add    esp,0x10
c0014115:	85 c0                	test   eax,eax
c0014117:	74 1b                	je     c0014134 <SysTruncate(regs*)+0xa1>
c0014119:	83 ec 0c             	sub    esp,0xc
c001411c:	53                   	push   ebx
c001411d:	e8 4c 78 ff ff       	call   c000b96e <File::close()>
c0014122:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014124:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014127:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001412a:	83 c4 10             	add    esp,0x10
c001412d:	b8 05 00 00 00       	mov    eax,0x5
c0014132:	eb 51                	jmp    c0014185 <SysTruncate(regs*)+0xf2>
c0014134:	83 ec 0c             	sub    esp,0xc
c0014137:	53                   	push   ebx
c0014138:	e8 31 78 ff ff       	call   c000b96e <File::close()>
c001413d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001413f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014142:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	31 c0                	xor    eax,eax
c001414a:	eb 39                	jmp    c0014185 <SysTruncate(regs*)+0xf2>
c001414c:	31 d2                	xor    edx,edx
c001414e:	b8 01 00 00 00       	mov    eax,0x1
c0014153:	83 fd 02             	cmp    ebp,0x2
c0014156:	7e 2f                	jle    c0014187 <SysTruncate(regs*)+0xf4>
c0014158:	83 ec 0c             	sub    esp,0xc
c001415b:	51                   	push   ecx
c001415c:	e8 52 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014161:	83 c4 10             	add    esp,0x10
c0014164:	89 c1                	mov    ecx,eax
c0014166:	31 d2                	xor    edx,edx
c0014168:	b8 02 00 00 00       	mov    eax,0x2
c001416d:	85 c9                	test   ecx,ecx
c001416f:	74 16                	je     c0014187 <SysTruncate(regs*)+0xf4>
c0014171:	50                   	push   eax
c0014172:	57                   	push   edi
c0014173:	56                   	push   esi
c0014174:	51                   	push   ecx
c0014175:	e8 aa 78 ff ff       	call   c000ba24 <File::truncate(unsigned long long)>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	85 c0                	test   eax,eax
c001417f:	0f 95 c0             	setne  al
c0014182:	0f b6 c0             	movzx  eax,al
c0014185:	31 d2                	xor    edx,edx
c0014187:	83 c4 0c             	add    esp,0xc
c001418a:	5b                   	pop    ebx
c001418b:	5e                   	pop    esi
c001418c:	5f                   	pop    edi
c001418d:	5d                   	pop    ebp
c001418e:	c3                   	ret    

c001418f <SysWrite(regs*)>:
c001418f:	57                   	push   edi
c0014190:	56                   	push   esi
c0014191:	53                   	push   ebx
c0014192:	83 ec 10             	sub    esp,0x10
c0014195:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014199:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001419c:	83 f8 02             	cmp    eax,0x2
c001419f:	77 10                	ja     c00141b1 <SysWrite(regs*)+0x22>
c00141a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141a9:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141af:	eb 0e                	jmp    c00141bf <SysWrite(regs*)+0x30>
c00141b1:	83 ec 0c             	sub    esp,0xc
c00141b4:	50                   	push   eax
c00141b5:	e8 f9 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00141ba:	83 c4 10             	add    esp,0x10
c00141bd:	89 c1                	mov    ecx,eax
c00141bf:	83 c8 ff             	or     eax,0xffffffff
c00141c2:	85 c9                	test   ecx,ecx
c00141c4:	89 c2                	mov    edx,eax
c00141c6:	74 28                	je     c00141f0 <SysWrite(regs*)+0x61>
c00141c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141d0:	31 ff                	xor    edi,edi
c00141d2:	83 ec 0c             	sub    esp,0xc
c00141d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141d7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141db:	52                   	push   edx
c00141dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141df:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141e2:	57                   	push   edi
c00141e3:	56                   	push   esi
c00141e4:	51                   	push   ecx
c00141e5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00141e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141ec:	83 c4 20             	add    esp,0x20
c00141ef:	99                   	cdq    
c00141f0:	83 c4 10             	add    esp,0x10
c00141f3:	5b                   	pop    ebx
c00141f4:	5e                   	pop    esi
c00141f5:	5f                   	pop    edi
c00141f6:	c3                   	ret    

c00141f7 <SysWsbe(regs*)>:
c00141f7:	57                   	push   edi
c00141f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00141fd:	56                   	push   esi
c00141fe:	be 09 22 02 c0       	mov    esi,0xc0022209
c0014203:	53                   	push   ebx
c0014204:	83 ec 30             	sub    esp,0x30
c0014207:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001420b:	fc                   	cld    
c001420c:	83 ec 0c             	sub    esp,0xc
c001420f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014211:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001421a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001421d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014223:	8b 06                	mov    eax,DWORD PTR [esi]
c0014225:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014228:	57                   	push   edi
c0014229:	e8 42 c3 fe ff       	call   c0000570 <strlen>
c001422e:	5a                   	pop    edx
c001422f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014233:	52                   	push   edx
c0014234:	31 d2                	xor    edx,edx
c0014236:	57                   	push   edi
c0014237:	52                   	push   edx
c0014238:	50                   	push   eax
c0014239:	56                   	push   esi
c001423a:	ff d3                	call   ebx
c001423c:	83 c4 14             	add    esp,0x14
c001423f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014243:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014246:	e8 ad 23 00 00       	call   c00165f8 <terminateTask(int)>
c001424b:	83 c4 40             	add    esp,0x40
c001424e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014253:	5b                   	pop    ebx
c0014254:	31 d2                	xor    edx,edx
c0014256:	5e                   	pop    esi
c0014257:	5f                   	pop    edi
c0014258:	c3                   	ret    

c0014259 <SysYield(regs*)>:
c0014259:	83 ec 0c             	sub    esp,0xc
c001425c:	fa                   	cli    
c001425d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014263:	e8 f0 19 00 00       	call   c0015c58 <schedule()>
c0014268:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001426d:	48                   	dec    eax
c001426e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014273:	75 01                	jne    c0014276 <SysYield(regs*)+0x1d>
c0014275:	fb                   	sti    
c0014276:	31 c0                	xor    eax,eax
c0014278:	31 d2                	xor    edx,edx
c001427a:	83 c4 0c             	add    esp,0xc
c001427d:	c3                   	ret    

c001427e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001427e:	55                   	push   ebp
c001427f:	57                   	push   edi
c0014280:	56                   	push   esi
c0014281:	53                   	push   ebx
c0014282:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014288:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014290:	0f 95 c0             	setne  al
c0014293:	31 d2                	xor    edx,edx
c0014295:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001429d:	0f 94 c2             	sete   dl
c00142a0:	85 c2                	test   edx,eax
c00142a2:	74 34                	je     c00142d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00142a4:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00142af:	74 27                	je     c00142d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00142b1:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00142b8:	05 00 10 00 00       	add    eax,0x1000
c00142bd:	89 c1                	mov    ecx,eax
c00142bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142c4:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00142ca:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00142d1:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00142d8:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00142df:	83 ec 0c             	sub    esp,0xc
c00142e2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00142e8:	6a 01                	push   0x1
c00142ea:	e8 1e 53 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00142ef:	83 c4 10             	add    esp,0x10
c00142f2:	89 c3                	mov    ebx,eax
c00142f4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00142fa:	0f 86 25 01 00 00    	jbe    c0014425 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014300:	c1 ee 0c             	shr    esi,0xc
c0014303:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001430a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001430e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014316:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001431d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014321:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014328:	29 ef                	sub    edi,ebp
c001432a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001432e:	0f 83 f8 00 00 00    	jae    c001442c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014334:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001433a:	76 05                	jbe    c0014341 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001433c:	bf 00 10 00 00       	mov    edi,0x1000
c0014341:	83 ec 0c             	sub    esp,0xc
c0014344:	31 d2                	xor    edx,edx
c0014346:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001434d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001434f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014353:	50                   	push   eax
c0014354:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014358:	56                   	push   esi
c0014359:	52                   	push   edx
c001435a:	57                   	push   edi
c001435b:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014362:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014365:	83 c4 20             	add    esp,0x20
c0014368:	85 c0                	test   eax,eax
c001436a:	75 06                	jne    c0014372 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001436c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014370:	74 13                	je     c0014385 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014372:	83 ec 0c             	sub    esp,0xc
c0014375:	53                   	push   ebx
c0014376:	e8 b0 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c001437b:	83 c4 10             	add    esp,0x10
c001437e:	31 c0                	xor    eax,eax
c0014380:	e9 7c 01 00 00       	jmp    c0014501 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014385:	fa                   	cli    
c0014386:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001438c:	e8 2e 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014391:	6a 07                	push   0x7
c0014393:	89 c7                	mov    edi,eax
c0014395:	53                   	push   ebx
c0014396:	50                   	push   eax
c0014397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001439f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143a5:	e8 76 59 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00143aa:	83 c4 0c             	add    esp,0xc
c00143ad:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143b4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143ba:	6a 00                	push   0x0
c00143bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143c4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143ca:	e8 b7 57 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00143cf:	58                   	pop    eax
c00143d0:	5a                   	pop    edx
c00143d1:	68 07 0c 00 00       	push   0xc07
c00143d6:	55                   	push   ebp
c00143d7:	57                   	push   edi
c00143d8:	89 df                	mov    edi,ebx
c00143da:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00143e1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143e7:	6a 00                	push   0x0
c00143e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143f1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143f7:	e8 76 5b ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00143fc:	b9 00 10 00 00       	mov    ecx,0x1000
c0014401:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014403:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014408:	83 c4 20             	add    esp,0x20
c001440b:	48                   	dec    eax
c001440c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014411:	85 c0                	test   eax,eax
c0014413:	75 01                	jne    c0014416 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014415:	fb                   	sti    
c0014416:	81 c5 00 10 00 00    	add    ebp,0x1000
c001441c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014420:	e9 f1 fe ff ff       	jmp    c0014316 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014425:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001442c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014433:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014439:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001443f:	0f 86 ae 00 00 00    	jbe    c00144f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014445:	fa                   	cli    
c0014446:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001444c:	c1 ee 0c             	shr    esi,0xc
c001444f:	51                   	push   ecx
c0014450:	31 ff                	xor    edi,edi
c0014452:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014459:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001445f:	6a 00                	push   0x0
c0014461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014466:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014469:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001446f:	e8 12 57 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014474:	83 c4 10             	add    esp,0x10
c0014477:	e8 43 39 ff ff       	call   c0007dbf <Phys::allocatePage()>
c001447c:	47                   	inc    edi
c001447d:	6a 07                	push   0x7
c001447f:	53                   	push   ebx
c0014480:	50                   	push   eax
c0014481:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014485:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001448b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001448e:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014494:	e8 87 58 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014499:	58                   	pop    eax
c001449a:	5a                   	pop    edx
c001449b:	68 07 0c 00 00       	push   0xc07
c00144a0:	55                   	push   ebp
c00144a1:	81 c5 00 10 00 00    	add    ebp,0x1000
c00144a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144ab:	50                   	push   eax
c00144ac:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00144b3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144b9:	6a 00                	push   0x0
c00144bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144c3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144c9:	e8 a4 5a ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00144ce:	83 c4 1c             	add    esp,0x1c
c00144d1:	68 00 10 00 00       	push   0x1000
c00144d6:	6a 00                	push   0x0
c00144d8:	53                   	push   ebx
c00144d9:	e8 12 c0 fe ff       	call   c00004f0 <memset>
c00144de:	83 c4 10             	add    esp,0x10
c00144e1:	39 fe                	cmp    esi,edi
c00144e3:	77 92                	ja     c0014477 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00144e5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00144ea:	48                   	dec    eax
c00144eb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00144f0:	75 01                	jne    c00144f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00144f2:	fb                   	sti    
c00144f3:	83 ec 0c             	sub    esp,0xc
c00144f6:	53                   	push   ebx
c00144f7:	e8 2f 54 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	b0 01                	mov    al,0x1
c0014501:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014507:	5b                   	pop    ebx
c0014508:	5e                   	pop    esi
c0014509:	5f                   	pop    edi
c001450a:	5d                   	pop    ebp
c001450b:	c3                   	ret    

c001450c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001450c:	55                   	push   ebp
c001450d:	57                   	push   edi
c001450e:	56                   	push   esi
c001450f:	53                   	push   ebx
c0014510:	83 ec 48             	sub    esp,0x48
c0014513:	68 14 01 00 00       	push   0x114
c0014518:	e8 99 35 ff ff       	call   c0007ab6 <malloc>
c001451d:	83 c4 0c             	add    esp,0xc
c0014520:	89 c6                	mov    esi,eax
c0014522:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014526:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001452a:	50                   	push   eax
c001452b:	e8 18 73 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c0014530:	58                   	pop    eax
c0014531:	5a                   	pop    edx
c0014532:	6a 01                	push   0x1
c0014534:	56                   	push   esi
c0014535:	e8 d6 73 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c001453a:	83 c4 10             	add    esp,0x10
c001453d:	85 c0                	test   eax,eax
c001453f:	0f 85 43 01 00 00    	jne    c0014688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014545:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001454d:	83 ec 0c             	sub    esp,0xc
c0014550:	6a 34                	push   0x34
c0014552:	e8 5f 35 ff ff       	call   c0007ab6 <malloc>
c0014557:	89 c3                	mov    ebx,eax
c0014559:	58                   	pop    eax
c001455a:	8b 06                	mov    eax,DWORD PTR [esi]
c001455c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014560:	57                   	push   edi
c0014561:	53                   	push   ebx
c0014562:	6a 00                	push   0x0
c0014564:	6a 34                	push   0x34
c0014566:	56                   	push   esi
c0014567:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001456a:	83 c4 20             	add    esp,0x20
c001456d:	85 c0                	test   eax,eax
c001456f:	0f 85 13 01 00 00    	jne    c0014688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014575:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001457b:	0f 85 07 01 00 00    	jne    c0014688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014581:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014584:	85 c0                	test   eax,eax
c0014586:	0f 84 fc 00 00 00    	je     c0014688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001458c:	31 d2                	xor    edx,edx
c001458e:	55                   	push   ebp
c001458f:	52                   	push   edx
c0014590:	50                   	push   eax
c0014591:	56                   	push   esi
c0014592:	e8 37 74 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014597:	83 c4 10             	add    esp,0x10
c001459a:	85 c0                	test   eax,eax
c001459c:	0f 85 e6 00 00 00    	jne    c0014688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145a2:	83 ec 0c             	sub    esp,0xc
c00145a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00145a8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00145b0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145b4:	0f af c2             	imul   eax,edx
c00145b7:	50                   	push   eax
c00145b8:	e8 f9 34 ff ff       	call   c0007ab6 <malloc>
c00145bd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00145bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00145c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00145ca:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145ce:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145d2:	0f af c2             	imul   eax,edx
c00145d5:	99                   	cdq    
c00145d6:	52                   	push   edx
c00145d7:	50                   	push   eax
c00145d8:	56                   	push   esi
c00145d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145dc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00145df:	83 c4 20             	add    esp,0x20
c00145e2:	85 c0                	test   eax,eax
c00145e4:	0f 84 9e 00 00 00    	je     c0014688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145ea:	31 d2                	xor    edx,edx
c00145ec:	51                   	push   ecx
c00145ed:	52                   	push   edx
c00145ee:	50                   	push   eax
c00145ef:	56                   	push   esi
c00145f0:	e8 d9 73 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	85 c0                	test   eax,eax
c00145fa:	0f 85 88 00 00 00    	jne    c0014688 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014600:	83 ec 0c             	sub    esp,0xc
c0014603:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014607:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001460b:	31 ed                	xor    ebp,ebp
c001460d:	0f af c2             	imul   eax,edx
c0014610:	50                   	push   eax
c0014611:	e8 a0 34 ff ff       	call   c0007ab6 <malloc>
c0014616:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014618:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001461c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001461f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014623:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014627:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001462b:	0f af c2             	imul   eax,edx
c001462e:	99                   	cdq    
c001462f:	52                   	push   edx
c0014630:	50                   	push   eax
c0014631:	56                   	push   esi
c0014632:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014635:	83 c4 20             	add    esp,0x20
c0014638:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014640:	0f b7 fd             	movzx  edi,bp
c0014643:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014647:	73 7d                	jae    c00146c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014649:	c1 e7 05             	shl    edi,0x5
c001464c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014650:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014653:	75 6b                	jne    c00146c0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014655:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014658:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001465c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001465f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014663:	52                   	push   edx
c0014664:	31 d2                	xor    edx,edx
c0014666:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014669:	52                   	push   edx
c001466a:	50                   	push   eax
c001466b:	56                   	push   esi
c001466c:	e8 5d 73 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014671:	83 c4 10             	add    esp,0x10
c0014674:	85 c0                	test   eax,eax
c0014676:	74 17                	je     c001468f <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014678:	83 ec 0c             	sub    esp,0xc
c001467b:	68 35 22 02 c0       	push   0xc0022235
c0014680:	e8 c0 62 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	31 c0                	xor    eax,eax
c001468a:	e9 87 00 00 00       	jmp    c0014716 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c001468f:	83 ec 0c             	sub    esp,0xc
c0014692:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014695:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014698:	50                   	push   eax
c0014699:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001469d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146a1:	56                   	push   esi
c00146a2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00146a6:	e8 d3 fb ff ff       	call   c001427e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00146ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146af:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00146b3:	83 c4 20             	add    esp,0x20
c00146b6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00146ba:	73 04                	jae    c00146c0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00146bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146c0:	45                   	inc    ebp
c00146c1:	e9 7a ff ff ff       	jmp    c0014640 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00146c6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00146ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00146ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146d2:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00146d8:	83 ec 0c             	sub    esp,0xc
c00146db:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00146e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146e6:	05 00 10 00 00       	add    eax,0x1000
c00146eb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00146ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f2:	e8 cf 33 ff ff       	call   c0007ac6 <free>
c00146f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146fa:	e8 c7 33 ff ff       	call   c0007ac6 <free>
c00146ff:	58                   	pop    eax
c0014700:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014704:	e8 bd 33 ff ff       	call   c0007ac6 <free>
c0014709:	89 34 24             	mov    DWORD PTR [esp],esi
c001470c:	e8 5d 72 ff ff       	call   c000b96e <File::close()>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	b0 01                	mov    al,0x1
c0014716:	83 c4 3c             	add    esp,0x3c
c0014719:	5b                   	pop    ebx
c001471a:	5e                   	pop    esi
c001471b:	5f                   	pop    edi
c001471c:	5d                   	pop    ebp
c001471d:	c3                   	ret    

c001471e <Thr::runtimeReferenceHelper()>:
c001471e:	83 ec 18             	sub    esp,0x18
c0014721:	68 3d 22 02 c0       	push   0xc002223d
c0014726:	e8 1a 62 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001472b:	fa                   	cli    
c001472c:	83 c4 10             	add    esp,0x10
c001472f:	eb fe                	jmp    c001472f <Thr::runtimeReferenceHelper()+0x11>

c0014731 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014731:	57                   	push   edi
c0014732:	56                   	push   esi
c0014733:	53                   	push   ebx
c0014734:	31 db                	xor    ebx,ebx
c0014736:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c001473c:	7e 3c                	jle    c001477a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001473e:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014745:	31 ff                	xor    edi,edi
c0014747:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c001474e:	7e 27                	jle    c0014777 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014750:	50                   	push   eax
c0014751:	50                   	push   eax
c0014752:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014756:	8b 06                	mov    eax,DWORD PTR [esi]
c0014758:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c001475f:	50                   	push   eax
c0014760:	e8 eb bf fe ff       	call   c0000750 <strcmp>
c0014765:	83 c4 10             	add    esp,0x10
c0014768:	85 c0                	test   eax,eax
c001476a:	75 05                	jne    c0014771 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001476c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001476f:	eb 0b                	jmp    c001477c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014771:	83 c6 10             	add    esi,0x10
c0014774:	47                   	inc    edi
c0014775:	eb d0                	jmp    c0014747 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014777:	43                   	inc    ebx
c0014778:	eb bc                	jmp    c0014736 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001477a:	31 c0                	xor    eax,eax
c001477c:	5b                   	pop    ebx
c001477d:	5e                   	pop    esi
c001477e:	5f                   	pop    edi
c001477f:	c3                   	ret    

c0014780 <Thr::loadKernelSymbolTable(char const*)>:
c0014780:	55                   	push   ebp
c0014781:	57                   	push   edi
c0014782:	56                   	push   esi
c0014783:	53                   	push   ebx
c0014784:	83 ec 68             	sub    esp,0x68
c0014787:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c001478d:	68 14 01 00 00       	push   0x114
c0014792:	e8 1f 33 ff ff       	call   c0007ab6 <malloc>
c0014797:	83 c4 0c             	add    esp,0xc
c001479a:	89 c3                	mov    ebx,eax
c001479c:	56                   	push   esi
c001479d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00147a1:	50                   	push   eax
c00147a2:	e8 a1 70 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c00147a7:	5e                   	pop    esi
c00147a8:	5f                   	pop    edi
c00147a9:	6a 01                	push   0x1
c00147ab:	53                   	push   ebx
c00147ac:	e8 5f 71 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c00147b1:	83 c4 10             	add    esp,0x10
c00147b4:	85 c0                	test   eax,eax
c00147b6:	74 0a                	je     c00147c2 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00147b8:	83 ec 0c             	sub    esp,0xc
c00147bb:	68 5f 22 02 c0       	push   0xc002225f
c00147c0:	eb 34                	jmp    c00147f6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00147c2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00147ca:	83 ec 0c             	sub    esp,0xc
c00147cd:	6a 34                	push   0x34
c00147cf:	e8 e2 32 ff ff       	call   c0007ab6 <malloc>
c00147d4:	59                   	pop    ecx
c00147d5:	89 c7                	mov    edi,eax
c00147d7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00147db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147dd:	56                   	push   esi
c00147de:	57                   	push   edi
c00147df:	6a 00                	push   0x0
c00147e1:	6a 34                	push   0x34
c00147e3:	53                   	push   ebx
c00147e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147e7:	83 c4 20             	add    esp,0x20
c00147ea:	85 c0                	test   eax,eax
c00147ec:	74 17                	je     c0014805 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00147ee:	83 ec 0c             	sub    esp,0xc
c00147f1:	68 76 22 02 c0       	push   0xc0022276
c00147f6:	e8 9e cb ff ff       	call   c0011399 <KePanic(char const*)>
c00147fb:	83 c4 10             	add    esp,0x10
c00147fe:	31 c0                	xor    eax,eax
c0014800:	e9 31 02 00 00       	jmp    c0014a36 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014805:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001480b:	75 e1                	jne    c00147ee <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001480d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014810:	85 c0                	test   eax,eax
c0014812:	74 da                	je     c00147ee <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014814:	52                   	push   edx
c0014815:	31 d2                	xor    edx,edx
c0014817:	52                   	push   edx
c0014818:	50                   	push   eax
c0014819:	53                   	push   ebx
c001481a:	e8 af 71 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c001481f:	83 c4 10             	add    esp,0x10
c0014822:	85 c0                	test   eax,eax
c0014824:	75 c8                	jne    c00147ee <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014826:	83 ec 0c             	sub    esp,0xc
c0014829:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001482d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014831:	31 ed                	xor    ebp,ebp
c0014833:	0f af c2             	imul   eax,edx
c0014836:	50                   	push   eax
c0014837:	e8 7a 32 ff ff       	call   c0007ab6 <malloc>
c001483c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001483e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014842:	89 34 24             	mov    DWORD PTR [esp],esi
c0014845:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014849:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001484d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014851:	0f af c2             	imul   eax,edx
c0014854:	99                   	cdq    
c0014855:	52                   	push   edx
c0014856:	50                   	push   eax
c0014857:	53                   	push   ebx
c0014858:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001485b:	83 c4 20             	add    esp,0x20
c001485e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014866:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001486e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014876:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001487e:	0f b7 f5             	movzx  esi,bp
c0014881:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014885:	0f 83 a7 00 00 00    	jae    c0014932 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001488b:	6b f6 28             	imul   esi,esi,0x28
c001488e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014892:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014899:	50                   	push   eax
c001489a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001489e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00148a2:	8b 16                	mov    edx,DWORD PTR [esi]
c00148a4:	6b c0 28             	imul   eax,eax,0x28
c00148a7:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00148ab:	89 d0                	mov    eax,edx
c00148ad:	31 d2                	xor    edx,edx
c00148af:	52                   	push   edx
c00148b0:	50                   	push   eax
c00148b1:	53                   	push   ebx
c00148b2:	e8 17 71 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c00148b7:	83 c4 0c             	add    esp,0xc
c00148ba:	6a 20                	push   0x20
c00148bc:	6a 00                	push   0x0
c00148be:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00148c2:	52                   	push   edx
c00148c3:	e8 28 bc fe ff       	call   c00004f0 <memset>
c00148c8:	58                   	pop    eax
c00148c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148cb:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00148cf:	51                   	push   ecx
c00148d0:	8d 54 24 40          	lea    edx,[esp+0x40]
c00148d4:	52                   	push   edx
c00148d5:	6a 00                	push   0x0
c00148d7:	6a 1f                	push   0x1f
c00148d9:	53                   	push   ebx
c00148da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148dd:	83 c4 18             	add    esp,0x18
c00148e0:	68 8d 22 02 c0       	push   0xc002228d
c00148e5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00148e9:	52                   	push   edx
c00148ea:	e8 61 be fe ff       	call   c0000750 <strcmp>
c00148ef:	83 c4 10             	add    esp,0x10
c00148f2:	85 c0                	test   eax,eax
c00148f4:	75 0f                	jne    c0014905 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00148f6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00148f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014905:	50                   	push   eax
c0014906:	50                   	push   eax
c0014907:	68 95 22 02 c0       	push   0xc0022295
c001490c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014910:	50                   	push   eax
c0014911:	e8 3a be fe ff       	call   c0000750 <strcmp>
c0014916:	83 c4 10             	add    esp,0x10
c0014919:	85 c0                	test   eax,eax
c001491b:	75 0f                	jne    c001492c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001491d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014924:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001492c:	45                   	inc    ebp
c001492d:	e9 4c ff ff ff       	jmp    c001487e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014932:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014937:	75 10                	jne    c0014949 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014939:	83 ec 0c             	sub    esp,0xc
c001493c:	68 9d 22 02 c0       	push   0xc002229d
c0014941:	e8 53 ca ff ff       	call   c0011399 <KePanic(char const*)>
c0014946:	83 c4 10             	add    esp,0x10
c0014949:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001494e:	75 10                	jne    c0014960 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	68 9d 22 02 c0       	push   0xc002229d
c0014958:	e8 3c ca ff ff       	call   c0011399 <KePanic(char const*)>
c001495d:	83 c4 10             	add    esp,0x10
c0014960:	31 d2                	xor    edx,edx
c0014962:	50                   	push   eax
c0014963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014967:	52                   	push   edx
c0014968:	50                   	push   eax
c0014969:	53                   	push   ebx
c001496a:	e8 5f 70 ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c001496f:	5a                   	pop    edx
c0014970:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014974:	e8 3d 31 ff ff       	call   c0007ab6 <malloc>
c0014979:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001497d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014981:	31 c9                	xor    ecx,ecx
c0014983:	5e                   	pop    esi
c0014984:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014986:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001498a:	55                   	push   ebp
c001498b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001498f:	51                   	push   ecx
c0014990:	52                   	push   edx
c0014991:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014995:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014999:	53                   	push   ebx
c001499a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001499d:	83 c4 14             	add    esp,0x14
c00149a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149a4:	e8 0d 31 ff ff       	call   c0007ab6 <malloc>
c00149a9:	89 c6                	mov    esi,eax
c00149ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149b0:	56                   	push   esi
c00149b1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00149b5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00149b9:	51                   	push   ecx
c00149ba:	52                   	push   edx
c00149bb:	53                   	push   ebx
c00149bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00149c3:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c00149c9:	83 c4 1c             	add    esp,0x1c
c00149cc:	c1 e8 04             	shr    eax,0x4
c00149cf:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c00149d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149da:	31 d2                	xor    edx,edx
c00149dc:	52                   	push   edx
c00149dd:	50                   	push   eax
c00149de:	53                   	push   ebx
c00149df:	e8 ea 6f ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c00149e4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149e6:	31 d2                	xor    edx,edx
c00149e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149eb:	56                   	push   esi
c00149ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00149f0:	52                   	push   edx
c00149f1:	50                   	push   eax
c00149f2:	53                   	push   ebx
c00149f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149f6:	83 c4 14             	add    esp,0x14
c00149f9:	53                   	push   ebx
c00149fa:	e8 6f 6f ff ff       	call   c000b96e <File::close()>
c00149ff:	5d                   	pop    ebp
c0014a00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a04:	e8 bd 30 ff ff       	call   c0007ac6 <free>
c0014a09:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a0c:	e8 b5 30 ff ff       	call   c0007ac6 <free>
c0014a11:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014a16:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a1a:	8d 50 01             	lea    edx,[eax+0x1]
c0014a1d:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014a24:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014a2b:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014a31:	83 c4 10             	add    esp,0x10
c0014a34:	b0 01                	mov    al,0x1
c0014a36:	83 c4 5c             	add    esp,0x5c
c0014a39:	5b                   	pop    ebx
c0014a3a:	5e                   	pop    esi
c0014a3b:	5f                   	pop    edi
c0014a3c:	5d                   	pop    ebp
c0014a3d:	c3                   	ret    

c0014a3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014a3e:	55                   	push   ebp
c0014a3f:	57                   	push   edi
c0014a40:	56                   	push   esi
c0014a41:	53                   	push   ebx
c0014a42:	81 ec 68 03 00 00    	sub    esp,0x368
c0014a48:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014a4f:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014a55:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014a59:	68 14 01 00 00       	push   0x114
c0014a5e:	e8 53 30 ff ff       	call   c0007ab6 <malloc>
c0014a63:	83 c4 0c             	add    esp,0xc
c0014a66:	89 c5                	mov    ebp,eax
c0014a68:	53                   	push   ebx
c0014a69:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014a70:	50                   	push   eax
c0014a71:	e8 d2 6d ff ff       	call   c000b848 <File::File(char const*, Process*)>
c0014a76:	5e                   	pop    esi
c0014a77:	5f                   	pop    edi
c0014a78:	6a 01                	push   0x1
c0014a7a:	55                   	push   ebp
c0014a7b:	e8 90 6e ff ff       	call   c000b910 <File::open(FileOpenMode)>
c0014a80:	83 c4 10             	add    esp,0x10
c0014a83:	85 c0                	test   eax,eax
c0014a85:	0f 85 aa 06 00 00    	jne    c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a8b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014a93:	83 ec 0c             	sub    esp,0xc
c0014a96:	6a 34                	push   0x34
c0014a98:	e8 19 30 ff ff       	call   c0007ab6 <malloc>
c0014a9d:	5b                   	pop    ebx
c0014a9e:	89 c7                	mov    edi,eax
c0014aa0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014aa4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014aa7:	53                   	push   ebx
c0014aa8:	57                   	push   edi
c0014aa9:	6a 00                	push   0x0
c0014aab:	6a 34                	push   0x34
c0014aad:	55                   	push   ebp
c0014aae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ab1:	83 c4 20             	add    esp,0x20
c0014ab4:	85 c0                	test   eax,eax
c0014ab6:	0f 85 79 06 00 00    	jne    c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014abc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014ac2:	0f 85 6d 06 00 00    	jne    c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ac8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014acb:	85 c0                	test   eax,eax
c0014acd:	0f 84 62 06 00 00    	je     c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ad3:	31 d2                	xor    edx,edx
c0014ad5:	51                   	push   ecx
c0014ad6:	52                   	push   edx
c0014ad7:	50                   	push   eax
c0014ad8:	55                   	push   ebp
c0014ad9:	e8 f0 6e ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014ade:	83 c4 10             	add    esp,0x10
c0014ae1:	85 c0                	test   eax,eax
c0014ae3:	0f 85 4c 06 00 00    	jne    c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ae9:	83 ec 0c             	sub    esp,0xc
c0014aec:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014aef:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014af3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014af7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014afb:	0f af c2             	imul   eax,edx
c0014afe:	50                   	push   eax
c0014aff:	e8 b2 2f ff ff       	call   c0007ab6 <malloc>
c0014b04:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b12:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014b16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014b1a:	0f af c2             	imul   eax,edx
c0014b1d:	99                   	cdq    
c0014b1e:	52                   	push   edx
c0014b1f:	50                   	push   eax
c0014b20:	55                   	push   ebp
c0014b21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b24:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014b27:	83 c4 20             	add    esp,0x20
c0014b2a:	85 c0                	test   eax,eax
c0014b2c:	0f 84 03 06 00 00    	je     c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b32:	52                   	push   edx
c0014b33:	31 d2                	xor    edx,edx
c0014b35:	52                   	push   edx
c0014b36:	50                   	push   eax
c0014b37:	55                   	push   ebp
c0014b38:	e8 91 6e ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014b3d:	83 c4 10             	add    esp,0x10
c0014b40:	85 c0                	test   eax,eax
c0014b42:	0f 85 ed 05 00 00    	jne    c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b48:	83 ec 0c             	sub    esp,0xc
c0014b4b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014b4f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014b53:	31 f6                	xor    esi,esi
c0014b55:	0f af c2             	imul   eax,edx
c0014b58:	50                   	push   eax
c0014b59:	e8 58 2f ff ff       	call   c0007ab6 <malloc>
c0014b5e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b6c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014b70:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014b74:	0f af c2             	imul   eax,edx
c0014b77:	99                   	cdq    
c0014b78:	52                   	push   edx
c0014b79:	50                   	push   eax
c0014b7a:	55                   	push   ebp
c0014b7b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b7e:	83 c4 20             	add    esp,0x20
c0014b81:	0f b7 de             	movzx  ebx,si
c0014b84:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014b88:	0f 83 87 00 00 00    	jae    c0014c15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014b8e:	c1 e3 05             	shl    ebx,0x5
c0014b91:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014b95:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014b98:	75 75                	jne    c0014c0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014b9a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014b9d:	31 d2                	xor    edx,edx
c0014b9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ba3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ba6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014baa:	50                   	push   eax
c0014bab:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014bae:	52                   	push   edx
c0014baf:	50                   	push   eax
c0014bb0:	55                   	push   ebp
c0014bb1:	e8 18 6e ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	85 c0                	test   eax,eax
c0014bbb:	0f 85 74 05 00 00    	jne    c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014bc1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014bc8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014bcb:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014bcf:	31 d2                	xor    edx,edx
c0014bd1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014bd5:	83 ec 0c             	sub    esp,0xc
c0014bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014bdc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014be3:	50                   	push   eax
c0014be4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bec:	52                   	push   edx
c0014bed:	50                   	push   eax
c0014bee:	55                   	push   ebp
c0014bef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bf2:	83 c4 1c             	add    esp,0x1c
c0014bf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014bf8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014bfb:	50                   	push   eax
c0014bfc:	6a 00                	push   0x0
c0014bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c02:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014c06:	50                   	push   eax
c0014c07:	e8 e4 b8 fe ff       	call   c00004f0 <memset>
c0014c0c:	83 c4 10             	add    esp,0x10
c0014c0f:	46                   	inc    esi
c0014c10:	e9 6c ff ff ff       	jmp    c0014b81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014c15:	53                   	push   ebx
c0014c16:	31 db                	xor    ebx,ebx
c0014c18:	68 00 01 00 00       	push   0x100
c0014c1d:	6a 00                	push   0x0
c0014c1f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014c23:	50                   	push   eax
c0014c24:	e8 c7 b8 fe ff       	call   c00004f0 <memset>
c0014c29:	83 c4 0c             	add    esp,0xc
c0014c2c:	68 00 01 00 00       	push   0x100
c0014c31:	6a 00                	push   0x0
c0014c33:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014c3a:	50                   	push   eax
c0014c3b:	e8 b0 b8 fe ff       	call   c00004f0 <memset>
c0014c40:	83 c4 10             	add    esp,0x10
c0014c43:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c4b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014c53:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014c5b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c63:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014c6b:	0f b7 f3             	movzx  esi,bx
c0014c6e:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014c72:	0f 83 2d 01 00 00    	jae    c0014da5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014c78:	6b f6 28             	imul   esi,esi,0x28
c0014c7b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c7f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c86:	52                   	push   edx
c0014c87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c8b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014c8f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c91:	6b d2 28             	imul   edx,edx,0x28
c0014c94:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014c98:	31 d2                	xor    edx,edx
c0014c9a:	52                   	push   edx
c0014c9b:	50                   	push   eax
c0014c9c:	55                   	push   ebp
c0014c9d:	e8 2c 6d ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014ca2:	83 c4 0c             	add    esp,0xc
c0014ca5:	6a 20                	push   0x20
c0014ca7:	6a 00                	push   0x0
c0014ca9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014cb0:	51                   	push   ecx
c0014cb1:	e8 3a b8 fe ff       	call   c00004f0 <memset>
c0014cb6:	59                   	pop    ecx
c0014cb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014cba:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014cbe:	52                   	push   edx
c0014cbf:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014cc6:	51                   	push   ecx
c0014cc7:	6a 00                	push   0x0
c0014cc9:	6a 1f                	push   0x1f
c0014ccb:	55                   	push   ebp
c0014ccc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ccf:	83 c4 1c             	add    esp,0x1c
c0014cd2:	6a 09                	push   0x9
c0014cd4:	68 b7 22 02 c0       	push   0xc00222b7
c0014cd9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ce0:	51                   	push   ecx
c0014ce1:	e8 9a b6 fe ff       	call   c0000380 <memcmp>
c0014ce6:	83 c4 10             	add    esp,0x10
c0014ce9:	85 c0                	test   eax,eax
c0014ceb:	75 21                	jne    c0014d0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cf5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014cf9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014cfd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d00:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014d07:	89 d0                	mov    eax,edx
c0014d09:	40                   	inc    eax
c0014d0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d0e:	50                   	push   eax
c0014d0f:	6a 09                	push   0x9
c0014d11:	68 c1 22 02 c0       	push   0xc00222c1
c0014d16:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d1d:	50                   	push   eax
c0014d1e:	e8 5d b6 fe ff       	call   c0000380 <memcmp>
c0014d23:	83 c4 10             	add    esp,0x10
c0014d26:	85 c0                	test   eax,eax
c0014d28:	75 21                	jne    c0014d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014d32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d36:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014d3a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d3d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014d44:	89 d0                	mov    eax,edx
c0014d46:	40                   	inc    eax
c0014d47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d4b:	50                   	push   eax
c0014d4c:	50                   	push   eax
c0014d4d:	68 8d 22 02 c0       	push   0xc002228d
c0014d52:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d59:	50                   	push   eax
c0014d5a:	e8 f1 b9 fe ff       	call   c0000750 <strcmp>
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	85 c0                	test   eax,eax
c0014d64:	75 0f                	jne    c0014d75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014d66:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d75:	50                   	push   eax
c0014d76:	50                   	push   eax
c0014d77:	68 95 22 02 c0       	push   0xc0022295
c0014d7c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d83:	50                   	push   eax
c0014d84:	e8 c7 b9 fe ff       	call   c0000750 <strcmp>
c0014d89:	83 c4 10             	add    esp,0x10
c0014d8c:	85 c0                	test   eax,eax
c0014d8e:	75 0f                	jne    c0014d9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014d90:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014d9f:	43                   	inc    ebx
c0014da0:	e9 c6 fe ff ff       	jmp    c0014c6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014da5:	31 d2                	xor    edx,edx
c0014da7:	50                   	push   eax
c0014da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dac:	52                   	push   edx
c0014dad:	50                   	push   eax
c0014dae:	55                   	push   ebp
c0014daf:	e8 1a 6c ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014db4:	58                   	pop    eax
c0014db5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014db9:	e8 f8 2c ff ff       	call   c0007ab6 <malloc>
c0014dbe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014dc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014dc5:	31 d2                	xor    edx,edx
c0014dc7:	58                   	pop    eax
c0014dc8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014dcc:	53                   	push   ebx
c0014dcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014dd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dd5:	52                   	push   edx
c0014dd6:	50                   	push   eax
c0014dd7:	55                   	push   ebp
c0014dd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ddb:	83 c4 14             	add    esp,0x14
c0014dde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014de2:	e8 cf 2c ff ff       	call   c0007ab6 <malloc>
c0014de7:	31 d2                	xor    edx,edx
c0014de9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ded:	83 c4 0c             	add    esp,0xc
c0014df0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014df4:	52                   	push   edx
c0014df5:	50                   	push   eax
c0014df6:	55                   	push   ebp
c0014df7:	e8 d2 6b ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014dfc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014dff:	31 d2                	xor    edx,edx
c0014e01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014e0c:	52                   	push   edx
c0014e0d:	50                   	push   eax
c0014e0e:	55                   	push   ebp
c0014e0f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e12:	83 c4 20             	add    esp,0x20
c0014e15:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014e1a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014e26:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e2a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014e2e:	0f 84 05 03 00 00    	je     c0015139 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014e34:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014e3b:	31 d2                	xor    edx,edx
c0014e3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e41:	c1 e8 03             	shr    eax,0x3
c0014e44:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014e48:	51                   	push   ecx
c0014e49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e4d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014e51:	52                   	push   edx
c0014e52:	50                   	push   eax
c0014e53:	55                   	push   ebp
c0014e54:	e8 75 6b ff ff       	call   c000b9ce <File::seek(unsigned long long)>
c0014e59:	5b                   	pop    ebx
c0014e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e5e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014e65:	e8 4c 2c ff ff       	call   c0007ab6 <malloc>
c0014e6a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014e6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e71:	31 d2                	xor    edx,edx
c0014e73:	5e                   	pop    esi
c0014e74:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014e78:	50                   	push   eax
c0014e79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e81:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014e88:	52                   	push   edx
c0014e89:	50                   	push   eax
c0014e8a:	55                   	push   ebp
c0014e8b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e8e:	83 c4 20             	add    esp,0x20
c0014e91:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014e99:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014e9d:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014ea1:	0f 8d 76 02 00 00    	jge    c001511d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014ea7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014eaf:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014eb4:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014eb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ebb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ebf:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014ec3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ec7:	c1 e8 08             	shr    eax,0x8
c0014eca:	89 c6                	mov    esi,eax
c0014ecc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ed0:	c1 e6 04             	shl    esi,0x4
c0014ed3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014ed7:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014eda:	85 db                	test   ebx,ebx
c0014edc:	0f 85 b3 00 00 00    	jne    c0014f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014ee2:	83 ec 0c             	sub    esp,0xc
c0014ee5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ee9:	03 06                	add    eax,DWORD PTR [esi]
c0014eeb:	50                   	push   eax
c0014eec:	e8 40 f8 ff ff       	call   c0014731 <Thr::getAddressOfKernelSymbol(char const*)>
c0014ef1:	83 c4 10             	add    esp,0x10
c0014ef4:	89 c3                	mov    ebx,eax
c0014ef6:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014efb:	85 c0                	test   eax,eax
c0014efd:	0f 85 92 00 00 00    	jne    c0014f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014f03:	83 ec 0c             	sub    esp,0xc
c0014f06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f0a:	03 06                	add    eax,DWORD PTR [esi]
c0014f0c:	50                   	push   eax
c0014f0d:	e8 72 c6 ff ff       	call   c0011584 <KeResolveCompatibilitySymbol(char*)>
c0014f12:	83 c4 10             	add    esp,0x10
c0014f15:	89 c3                	mov    ebx,eax
c0014f17:	85 c0                	test   eax,eax
c0014f19:	75 7a                	jne    c0014f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014f1b:	51                   	push   ecx
c0014f1c:	51                   	push   ecx
c0014f1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f21:	03 06                	add    eax,DWORD PTR [esi]
c0014f23:	50                   	push   eax
c0014f24:	68 cb 22 02 c0       	push   0xc00222cb
c0014f29:	e8 17 5a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f2e:	58                   	pop    eax
c0014f2f:	5a                   	pop    edx
c0014f30:	68 e5 22 02 c0       	push   0xc00222e5
c0014f35:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f3c:	50                   	push   eax
c0014f3d:	e8 fe b6 fe ff       	call   c0000640 <strcpy>
c0014f42:	59                   	pop    ecx
c0014f43:	58                   	pop    eax
c0014f44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f48:	03 06                	add    eax,DWORD PTR [esi]
c0014f4a:	50                   	push   eax
c0014f4b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f52:	50                   	push   eax
c0014f53:	e8 e8 b8 fe ff       	call   c0000840 <strcat>
c0014f58:	58                   	pop    eax
c0014f59:	5a                   	pop    edx
c0014f5a:	68 7b 23 02 c0       	push   0xc002237b
c0014f5f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f66:	50                   	push   eax
c0014f67:	e8 d4 b8 fe ff       	call   c0000840 <strcat>
c0014f6c:	83 c4 10             	add    esp,0x10
c0014f6f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f74:	0f 84 5d 01 00 00    	je     c00150d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f7a:	83 ec 0c             	sub    esp,0xc
c0014f7d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f84:	50                   	push   eax
c0014f85:	e8 0f c4 ff ff       	call   c0011399 <KePanic(char const*)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014f91:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014f95:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014f9a:	83 f8 01             	cmp    eax,0x1
c0014f9d:	0f 85 8f 00 00 00    	jne    c0015032 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014fa3:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014faa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014fae:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014fb2:	01 ce                	add    esi,ecx
c0014fb4:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014fbc:	0f 94 c0             	sete   al
c0014fbf:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014fc7:	0f 94 c2             	sete   dl
c0014fca:	09 c2                	or     edx,eax
c0014fcc:	8b 06                	mov    eax,DWORD PTR [esi]
c0014fce:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014fd3:	0f b6 d2             	movzx  edx,dl
c0014fd6:	74 41                	je     c0015019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014fd8:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014fdb:	85 d2                	test   edx,edx
c0014fdd:	75 15                	jne    c0014ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014fdf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014fe3:	66 83 f8 0c          	cmp    ax,0xc
c0014fe7:	76 05                	jbe    c0014fee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014fe9:	b8 0c 00 00 00       	mov    eax,0xc
c0014fee:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014ff2:	76 37                	jbe    c001502b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ff4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014ff8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014ffd:	0f 84 d4 00 00 00    	je     c00150d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015003:	83 ec 0c             	sub    esp,0xc
c0015006:	68 fc 22 02 c0       	push   0xc00222fc
c001500b:	e8 89 c3 ff ff       	call   c0011399 <KePanic(char const*)>
c0015010:	83 c4 10             	add    esp,0x10
c0015013:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015017:	eb 12                	jmp    c001502b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015019:	01 c1                	add    ecx,eax
c001501b:	85 d2                	test   edx,edx
c001501d:	75 0c                	jne    c001502b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001501f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015023:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015027:	77 02                	ja     c001502b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015029:	01 d9                	add    ecx,ebx
c001502b:	89 0e                	mov    DWORD PTR [esi],ecx
c001502d:	e9 e2 00 00 00       	jmp    c0015114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015032:	83 f8 02             	cmp    eax,0x2
c0015035:	75 77                	jne    c00150ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0015037:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001503e:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015042:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0015046:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001504e:	74 21                	je     c0015071 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015050:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015058:	74 17                	je     c0015071 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001505a:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001505e:	b8 0a 00 00 00       	mov    eax,0xa
c0015063:	83 fa 0e             	cmp    edx,0xe
c0015066:	77 03                	ja     c001506b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015068:	8d 42 fc             	lea    eax,[edx-0x4]
c001506b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001506f:	76 17                	jbe    c0015088 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015071:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015076:	74 5f                	je     c00150d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015078:	83 ec 0c             	sub    esp,0xc
c001507b:	68 18 23 02 c0       	push   0xc0022318
c0015080:	e8 14 c3 ff ff       	call   c0011399 <KePanic(char const*)>
c0015085:	83 c4 10             	add    esp,0x10
c0015088:	8b 06                	mov    eax,DWORD PTR [esi]
c001508a:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001508f:	74 13                	je     c00150a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015091:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015095:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001509c:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00150a0:	01 d0                	add    eax,edx
c00150a2:	eb 04                	jmp    c00150a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00150a4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00150a8:	01 c3                	add    ebx,eax
c00150aa:	89 1e                	mov    DWORD PTR [esi],ebx
c00150ac:	eb 66                	jmp    c0015114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00150ae:	52                   	push   edx
c00150af:	52                   	push   edx
c00150b0:	50                   	push   eax
c00150b1:	68 34 23 02 c0       	push   0xc0022334
c00150b6:	e8 8a 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00150bb:	83 c4 10             	add    esp,0x10
c00150be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00150c3:	74 12                	je     c00150d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00150c5:	83 ec 0c             	sub    esp,0xc
c00150c8:	68 3f 23 02 c0       	push   0xc002233f
c00150cd:	e8 c7 c2 ff ff       	call   c0011399 <KePanic(char const*)>
c00150d2:	83 c4 10             	add    esp,0x10
c00150d5:	eb 3d                	jmp    c0015114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00150d7:	83 ec 0c             	sub    esp,0xc
c00150da:	55                   	push   ebp
c00150db:	e8 8e 68 ff ff       	call   c000b96e <File::close()>
c00150e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00150e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150e9:	59                   	pop    ecx
c00150ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150ee:	e8 d3 29 ff ff       	call   c0007ac6 <free>
c00150f3:	5b                   	pop    ebx
c00150f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150f8:	e8 c9 29 ff ff       	call   c0007ac6 <free>
c00150fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015100:	e8 c1 29 ff ff       	call   c0007ac6 <free>
c0015105:	5e                   	pop    esi
c0015106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001510a:	e8 b7 29 ff ff       	call   c0007ac6 <free>
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	eb 21                	jmp    c0015135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015114:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015118:	e9 7c fd ff ff       	jmp    c0014e99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c001511d:	83 ec 0c             	sub    esp,0xc
c0015120:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015124:	e8 9d 29 ff ff       	call   c0007ac6 <free>
c0015129:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001512d:	83 c4 10             	add    esp,0x10
c0015130:	e9 f1 fc ff ff       	jmp    c0014e26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015135:	31 c0                	xor    eax,eax
c0015137:	eb 33                	jmp    c001516c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015139:	83 ec 0c             	sub    esp,0xc
c001513c:	55                   	push   ebp
c001513d:	e8 2c 68 ff ff       	call   c000b96e <File::close()>
c0015142:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015145:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015148:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001514b:	58                   	pop    eax
c001514c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015150:	e8 71 29 ff ff       	call   c0007ac6 <free>
c0015155:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015158:	e8 69 29 ff ff       	call   c0007ac6 <free>
c001515d:	5a                   	pop    edx
c001515e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015162:	e8 5f 29 ff ff       	call   c0007ac6 <free>
c0015167:	83 c4 10             	add    esp,0x10
c001516a:	b0 01                	mov    al,0x1
c001516c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015172:	5b                   	pop    ebx
c0015173:	5e                   	pop    esi
c0015174:	5f                   	pop    edi
c0015175:	5d                   	pop    ebp
c0015176:	c3                   	ret    

c0015177 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015177:	56                   	push   esi
c0015178:	31 d2                	xor    edx,edx
c001517a:	53                   	push   ebx
c001517b:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015181:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015185:	39 d3                	cmp    ebx,edx
c0015187:	7e 1b                	jle    c00151a4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015189:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015190:	39 c8                	cmp    eax,ecx
c0015192:	77 0d                	ja     c00151a1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015194:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c001519b:	01 c6                	add    esi,eax
c001519d:	39 ce                	cmp    esi,ecx
c001519f:	77 05                	ja     c00151a6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00151a1:	42                   	inc    edx
c00151a2:	eb e1                	jmp    c0015185 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00151a4:	31 c0                	xor    eax,eax
c00151a6:	5b                   	pop    ebx
c00151a7:	5e                   	pop    esi
c00151a8:	c3                   	ret    

c00151a9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00151a9:	53                   	push   ebx
c00151aa:	31 c0                	xor    eax,eax
c00151ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00151b0:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00151b6:	39 c3                	cmp    ebx,eax
c00151b8:	7e 22                	jle    c00151dc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00151ba:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00151c1:	39 ca                	cmp    edx,ecx
c00151c3:	77 14                	ja     c00151d9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00151c5:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c00151cc:	39 ca                	cmp    edx,ecx
c00151ce:	76 09                	jbe    c00151d9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00151d0:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c00151d7:	eb 05                	jmp    c00151de <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00151d9:	40                   	inc    eax
c00151da:	eb da                	jmp    c00151b6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00151dc:	31 c0                	xor    eax,eax
c00151de:	5b                   	pop    ebx
c00151df:	c3                   	ret    

c00151e0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00151e0:	53                   	push   ebx
c00151e1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00151e5:	53                   	push   ebx
c00151e6:	e8 8c ff ff ff       	call   c0015177 <Thr::getDriverBaseFromAddress(unsigned long)>
c00151eb:	5a                   	pop    edx
c00151ec:	31 d2                	xor    edx,edx
c00151ee:	85 c0                	test   eax,eax
c00151f0:	74 04                	je     c00151f6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00151f2:	89 da                	mov    edx,ebx
c00151f4:	29 c2                	sub    edx,eax
c00151f6:	89 d0                	mov    eax,edx
c00151f8:	5b                   	pop    ebx
c00151f9:	c3                   	ret    

c00151fa <Thr::loadDLL(char const*, bool)>:
c00151fa:	55                   	push   ebp
c00151fb:	57                   	push   edi
c00151fc:	56                   	push   esi
c00151fd:	53                   	push   ebx
c00151fe:	81 ec 34 01 00 00    	sub    esp,0x134
c0015204:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001520b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015212:	56                   	push   esi
c0015213:	68 57 23 02 c0       	push   0xc0022357
c0015218:	e8 28 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001521d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015224:	e8 8d 28 ff ff       	call   c0007ab6 <malloc>
c0015229:	83 c4 0c             	add    esp,0xc
c001522c:	89 c3                	mov    ebx,eax
c001522e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0015234:	56                   	push   esi
c0015235:	50                   	push   eax
c0015236:	e8 0d 66 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c001523b:	83 c4 10             	add    esp,0x10
c001523e:	85 db                	test   ebx,ebx
c0015240:	75 3c                	jne    c001527e <Thr::loadDLL(char const*, bool)+0x84>
c0015242:	89 f8                	mov    eax,edi
c0015244:	84 c0                	test   al,al
c0015246:	0f 84 d2 01 00 00    	je     c001541e <Thr::loadDLL(char const*, bool)+0x224>
c001524c:	55                   	push   ebp
c001524d:	55                   	push   ebp
c001524e:	68 68 23 02 c0       	push   0xc0022368
c0015253:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015257:	55                   	push   ebp
c0015258:	e8 e3 b3 fe ff       	call   c0000640 <strcpy>
c001525d:	58                   	pop    eax
c001525e:	5a                   	pop    edx
c001525f:	56                   	push   esi
c0015260:	55                   	push   ebp
c0015261:	e8 da b5 fe ff       	call   c0000840 <strcat>
c0015266:	59                   	pop    ecx
c0015267:	58                   	pop    eax
c0015268:	68 7b 23 02 c0       	push   0xc002237b
c001526d:	55                   	push   ebp
c001526e:	e8 cd b5 fe ff       	call   c0000840 <strcat>
c0015273:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015276:	e8 1e c1 ff ff       	call   c0011399 <KePanic(char const*)>
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	51                   	push   ecx
c001527f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015283:	50                   	push   eax
c0015284:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015288:	50                   	push   eax
c0015289:	53                   	push   ebx
c001528a:	e8 83 69 ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c001528f:	83 c4 10             	add    esp,0x10
c0015292:	85 db                	test   ebx,ebx
c0015294:	74 0c                	je     c00152a2 <Thr::loadDLL(char const*, bool)+0xa8>
c0015296:	83 ec 0c             	sub    esp,0xc
c0015299:	8b 03                	mov    eax,DWORD PTR [ebx]
c001529b:	53                   	push   ebx
c001529c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001529f:	83 c4 10             	add    esp,0x10
c00152a2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00152a7:	75 0a                	jne    c00152b3 <Thr::loadDLL(char const*, bool)+0xb9>
c00152a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152ad:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00152b1:	75 3c                	jne    c00152ef <Thr::loadDLL(char const*, bool)+0xf5>
c00152b3:	89 f8                	mov    eax,edi
c00152b5:	84 c0                	test   al,al
c00152b7:	0f 84 49 01 00 00    	je     c0015406 <Thr::loadDLL(char const*, bool)+0x20c>
c00152bd:	51                   	push   ecx
c00152be:	51                   	push   ecx
c00152bf:	68 68 23 02 c0       	push   0xc0022368
c00152c4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00152c8:	53                   	push   ebx
c00152c9:	e8 72 b3 fe ff       	call   c0000640 <strcpy>
c00152ce:	5d                   	pop    ebp
c00152cf:	58                   	pop    eax
c00152d0:	56                   	push   esi
c00152d1:	53                   	push   ebx
c00152d2:	e8 69 b5 fe ff       	call   c0000840 <strcat>
c00152d7:	58                   	pop    eax
c00152d8:	5a                   	pop    edx
c00152d9:	68 7b 23 02 c0       	push   0xc002237b
c00152de:	53                   	push   ebx
c00152df:	e8 5c b5 fe ff       	call   c0000840 <strcat>
c00152e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152e7:	e8 ad c0 ff ff       	call   c0011399 <KePanic(char const*)>
c00152ec:	83 c4 10             	add    esp,0x10
c00152ef:	52                   	push   edx
c00152f0:	6a 03                	push   0x3
c00152f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152fa:	05 ff 0f 00 00       	add    eax,0xfff
c00152ff:	83 d2 00             	adc    edx,0x0
c0015302:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015306:	50                   	push   eax
c0015307:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001530d:	e8 12 4b ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015312:	59                   	pop    ecx
c0015313:	89 c3                	mov    ebx,eax
c0015315:	5d                   	pop    ebp
c0015316:	50                   	push   eax
c0015317:	68 52 09 02 c0       	push   0xc0020952
c001531c:	e8 24 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015321:	89 34 24             	mov    DWORD PTR [esp],esi
c0015324:	e8 47 b2 fe ff       	call   c0000570 <strlen>
c0015329:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c001532f:	40                   	inc    eax
c0015330:	89 04 24             	mov    DWORD PTR [esp],eax
c0015333:	e8 7e 27 ff ff       	call   c0007ab6 <malloc>
c0015338:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c001533f:	58                   	pop    eax
c0015340:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015345:	5a                   	pop    edx
c0015346:	56                   	push   esi
c0015347:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c001534e:	e8 ed b2 fe ff       	call   c0000640 <strcpy>
c0015353:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015358:	8d 50 01             	lea    edx,[eax+0x1]
c001535b:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c0015362:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015368:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001536c:	83 c4 0c             	add    esp,0xc
c001536f:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c0015376:	6a 01                	push   0x1
c0015378:	53                   	push   ebx
c0015379:	56                   	push   esi
c001537a:	e8 bf f6 ff ff       	call   c0014a3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001537f:	83 c4 10             	add    esp,0x10
c0015382:	0f b6 c0             	movzx  eax,al
c0015385:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015389:	85 c0                	test   eax,eax
c001538b:	0f 85 89 00 00 00    	jne    c001541a <Thr::loadDLL(char const*, bool)+0x220>
c0015391:	89 f8                	mov    eax,edi
c0015393:	84 c0                	test   al,al
c0015395:	74 73                	je     c001540a <Thr::loadDLL(char const*, bool)+0x210>
c0015397:	83 ec 0c             	sub    esp,0xc
c001539a:	68 7d 23 02 c0       	push   0xc002237d
c001539f:	e8 f5 bf ff ff       	call   c0011399 <KePanic(char const*)>
c00153a4:	83 c4 10             	add    esp,0x10
c00153a7:	eb 61                	jmp    c001540a <Thr::loadDLL(char const*, bool)+0x210>
c00153a9:	50                   	push   eax
c00153aa:	50                   	push   eax
c00153ab:	89 e8                	mov    eax,ebp
c00153ad:	c1 e0 0c             	shl    eax,0xc
c00153b0:	01 d8                	add    eax,ebx
c00153b2:	50                   	push   eax
c00153b3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00153b9:	e8 4e 45 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00153be:	83 c4 10             	add    esp,0x10
c00153c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c3:	a8 60                	test   al,0x60
c00153c5:	75 11                	jne    c00153d8 <Thr::loadDLL(char const*, bool)+0x1de>
c00153c7:	83 ec 0c             	sub    esp,0xc
c00153ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c00153cf:	50                   	push   eax
c00153d0:	e8 81 29 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	45                   	inc    ebp
c00153d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00153e1:	05 ff 0f 00 00       	add    eax,0xfff
c00153e6:	bf 00 00 00 00       	mov    edi,0x0
c00153eb:	83 d2 00             	adc    edx,0x0
c00153ee:	0f ac d0 0c          	shrd   eax,edx,0xc
c00153f2:	c1 ea 0c             	shr    edx,0xc
c00153f5:	39 c5                	cmp    ebp,eax
c00153f7:	89 d1                	mov    ecx,edx
c00153f9:	89 f8                	mov    eax,edi
c00153fb:	19 c8                	sbb    eax,ecx
c00153fd:	72 aa                	jb     c00153a9 <Thr::loadDLL(char const*, bool)+0x1af>
c00153ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015404:	75 18                	jne    c001541e <Thr::loadDLL(char const*, bool)+0x224>
c0015406:	31 db                	xor    ebx,ebx
c0015408:	eb 14                	jmp    c001541e <Thr::loadDLL(char const*, bool)+0x224>
c001540a:	83 ec 0c             	sub    esp,0xc
c001540d:	68 9c 23 02 c0       	push   0xc002239c
c0015412:	e8 82 bf ff ff       	call   c0011399 <KePanic(char const*)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	31 ed                	xor    ebp,ebp
c001541c:	eb bb                	jmp    c00153d9 <Thr::loadDLL(char const*, bool)+0x1df>
c001541e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015424:	89 d8                	mov    eax,ebx
c0015426:	5b                   	pop    ebx
c0015427:	5e                   	pop    esi
c0015428:	5f                   	pop    edi
c0015429:	5d                   	pop    ebp
c001542a:	c3                   	ret    

c001542b <Thr::executeDLL(unsigned long, void*)>:
c001542b:	56                   	push   esi
c001542c:	53                   	push   ebx
c001542d:	52                   	push   edx
c001542e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015432:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015436:	85 db                	test   ebx,ebx
c0015438:	75 10                	jne    c001544a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001543a:	83 ec 0c             	sub    esp,0xc
c001543d:	68 b8 23 02 c0       	push   0xc00223b8
c0015442:	e8 52 bf ff ff       	call   c0011399 <KePanic(char const*)>
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	50                   	push   eax
c001544b:	50                   	push   eax
c001544c:	53                   	push   ebx
c001544d:	68 e2 23 02 c0       	push   0xc00223e2
c0015452:	e8 ee 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015457:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001545b:	89 d8                	mov    eax,ebx
c001545d:	83 c4 14             	add    esp,0x14
c0015460:	5b                   	pop    ebx
c0015461:	5e                   	pop    esi
c0015462:	ff e0                	jmp    eax

c0015464 <userModeEntryPoint(void*)>:
c0015464:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015469:	83 e8 01             	sub    eax,0x1
c001546c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015471:	75 01                	jne    c0015474 <userModeEntryPoint(void*)+0x10>
c0015473:	fb                   	sti    
c0015474:	fb                   	sti    
c0015475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001547a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001547d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015483:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015487:	e9 b3 ad fe ff       	jmp    c000023f <goToUsermode>

c001548c <changeTSS>:
c001548c:	83 ec 14             	sub    esp,0x14
c001548f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015494:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015497:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001549c:	c1 e2 15             	shl    edx,0x15
c001549f:	29 d0                	sub    eax,edx
c00154a1:	50                   	push   eax
c00154a2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00154a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00154ad:	05 7c 11 00 00       	add    eax,0x117c
c00154b2:	50                   	push   eax
c00154b3:	e8 9c 3a ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00154b8:	83 c4 1c             	add    esp,0x1c
c00154bb:	c3                   	ret    

c00154bc <switchToThread(ThreadControlBlock*)>:
c00154bc:	57                   	push   edi
c00154bd:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00154c3:	56                   	push   esi
c00154c4:	85 c9                	test   ecx,ecx
c00154c6:	53                   	push   ebx
c00154c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154cb:	0f 85 8b 00 00 00    	jne    c001555c <switchToThread(ThreadControlBlock*)+0xa0>
c00154d1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00154d5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00154db:	74 7b                	je     c0015558 <switchToThread(ThreadControlBlock*)+0x9c>
c00154dd:	b8 00 04 00 00       	mov    eax,0x400
c00154e2:	29 d0                	sub    eax,edx
c00154e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00154e7:	d1 f8                	sar    eax,1
c00154e9:	01 d0                	add    eax,edx
c00154eb:	90                   	nop
c00154ec:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00154ef:	e8 1e 28 00 00       	call   c0017d12 <HalQueryPerformanceCounter()>
c00154f4:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00154f9:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00154ff:	89 c6                	mov    esi,eax
c0015501:	89 d7                	mov    edi,edx
c0015503:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015509:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c001550e:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c0015514:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c001551a:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015520:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015526:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c001552c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001552f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015532:	01 c6                	add    esi,eax
c0015534:	11 d7                	adc    edi,edx
c0015536:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015539:	83 ec 0c             	sub    esp,0xc
c001553c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001553f:	53                   	push   ebx
c0015540:	e8 32 ad fe ff       	call   c0000277 <switchToThreadASM>
c0015545:	0f 20 c0             	mov    eax,cr0
c0015548:	83 c8 08             	or     eax,0x8
c001554b:	0f 22 c0             	mov    cr0,eax
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	5b                   	pop    ebx
c0015552:	5e                   	pop    esi
c0015553:	5f                   	pop    edi
c0015554:	c3                   	ret    
c0015555:	8d 76 00             	lea    esi,[esi+0x0]
c0015558:	31 c0                	xor    eax,eax
c001555a:	eb 90                	jmp    c00154ec <switchToThread(ThreadControlBlock*)+0x30>
c001555c:	5b                   	pop    ebx
c001555d:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015567:	5e                   	pop    esi
c0015568:	5f                   	pop    edi
c0015569:	c3                   	ret    
c001556a:	66 90                	xchg   ax,ax

c001556c <Process::addArgs(char**)>:
c001556c:	57                   	push   edi
c001556d:	56                   	push   esi
c001556e:	53                   	push   ebx
c001556f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015573:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015577:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015581:	85 ff                	test   edi,edi
c0015583:	74 4f                	je     c00155d4 <Process::addArgs(char**)+0x68>
c0015585:	8b 07                	mov    eax,DWORD PTR [edi]
c0015587:	85 c0                	test   eax,eax
c0015589:	74 49                	je     c00155d4 <Process::addArgs(char**)+0x68>
c001558b:	31 db                	xor    ebx,ebx
c001558d:	8d 76 00             	lea    esi,[esi+0x0]
c0015590:	83 ec 0c             	sub    esp,0xc
c0015593:	50                   	push   eax
c0015594:	e8 d7 af fe ff       	call   c0000570 <strlen>
c0015599:	83 c0 01             	add    eax,0x1
c001559c:	89 04 24             	mov    DWORD PTR [esp],eax
c001559f:	e8 12 25 ff ff       	call   c0007ab6 <malloc>
c00155a4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00155ab:	5a                   	pop    edx
c00155ac:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00155af:	59                   	pop    ecx
c00155b0:	83 c3 01             	add    ebx,0x1
c00155b3:	52                   	push   edx
c00155b4:	50                   	push   eax
c00155b5:	e8 86 b0 fe ff       	call   c0000640 <strcpy>
c00155ba:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00155c0:	83 c4 10             	add    esp,0x10
c00155c3:	83 c1 01             	add    ecx,0x1
c00155c6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00155cc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00155cf:	85 c0                	test   eax,eax
c00155d1:	75 bd                	jne    c0015590 <Process::addArgs(char**)+0x24>
c00155d3:	90                   	nop
c00155d4:	5b                   	pop    ebx
c00155d5:	5e                   	pop    esi
c00155d6:	5f                   	pop    edi
c00155d7:	c3                   	ret    

c00155d8 <Process::Process(char const*, Process*, char**)>:
c00155d8:	56                   	push   esi
c00155d9:	53                   	push   ebx
c00155da:	83 ec 14             	sub    esp,0x14
c00155dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e1:	05 0c 02 00 00       	add    eax,0x20c
c00155e6:	bb 07 00 00 00       	mov    ebx,0x7
c00155eb:	89 c6                	mov    esi,eax
c00155ed:	8d 76 00             	lea    esi,[esi+0x0]
c00155f0:	85 db                	test   ebx,ebx
c00155f2:	78 14                	js     c0015608 <Process::Process(char const*, Process*, char**)+0x30>
c00155f4:	83 ec 0c             	sub    esp,0xc
c00155f7:	56                   	push   esi
c00155f8:	e8 eb a5 00 00       	call   c001fbe8 <ThreadControlBlock::ThreadControlBlock()>
c00155fd:	83 c4 10             	add    esp,0x10
c0015600:	83 c6 5f             	add    esi,0x5f
c0015603:	83 eb 01             	sub    ebx,0x1
c0015606:	eb e8                	jmp    c00155f0 <Process::Process(char const*, Process*, char**)+0x18>
c0015608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001560c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015617:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001561e:	83 ec 0c             	sub    esp,0xc
c0015621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015625:	e8 64 bb ff ff       	call   c001118e <KeNewProcessEnv(Process*)>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	89 c2                	mov    edx,eax
c001562f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015633:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001563d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015646:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c001564b:	8d 50 01             	lea    edx,[eax+0x1]
c001564e:	89 15 00 36 02 c0    	mov    DWORD PTR ds:0xc0023600,edx
c0015654:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015658:	89 02                	mov    DWORD PTR [edx],eax
c001565a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015662:	83 ec 0c             	sub    esp,0xc
c0015665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015669:	e8 48 24 ff ff       	call   c0007ab6 <malloc>
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	89 c3                	mov    ebx,eax
c0015673:	83 ec 08             	sub    esp,0x8
c0015676:	6a 00                	push   0x0
c0015678:	53                   	push   ebx
c0015679:	e8 ea 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c001567e:	83 c4 10             	add    esp,0x10
c0015681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015685:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001568b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001568f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156a1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00156a7:	e8 06 c1 ff ff       	call   c00117b2 <KeInitSignals()>
c00156ac:	89 c2                	mov    edx,eax
c00156ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00156b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156c2:	85 c0                	test   eax,eax
c00156c4:	74 42                	je     c0015708 <Process::Process(char const*, Process*, char**)+0x130>
c00156c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ca:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156d0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00156d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156da:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00156e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00156f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f4:	05 0c 01 00 00       	add    eax,0x10c
c00156f9:	83 ec 08             	sub    esp,0x8
c00156fc:	52                   	push   edx
c00156fd:	50                   	push   eax
c00156fe:	e8 3d af fe ff       	call   c0000640 <strcpy>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	eb 64                	jmp    c001576c <Process::Process(char const*, Process*, char**)+0x194>
c0015708:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015710:	83 ec 0c             	sub    esp,0xc
c0015713:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015717:	e8 9a 23 ff ff       	call   c0007ab6 <malloc>
c001571c:	83 c4 10             	add    esp,0x10
c001571f:	89 c3                	mov    ebx,eax
c0015721:	83 ec 08             	sub    esp,0x8
c0015724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015728:	53                   	push   ebx
c0015729:	e8 38 35 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c001572e:	83 c4 10             	add    esp,0x10
c0015731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015735:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001573b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001573f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015745:	83 ec 0c             	sub    esp,0xc
c0015748:	50                   	push   eax
c0015749:	e8 b6 2d ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015755:	05 0c 01 00 00       	add    eax,0x10c
c001575a:	83 ec 08             	sub    esp,0x8
c001575d:	68 01 24 02 c0       	push   0xc0022401
c0015762:	50                   	push   eax
c0015763:	e8 d8 ae fe ff       	call   c0000640 <strcpy>
c0015768:	83 c4 10             	add    esp,0x10
c001576b:	90                   	nop
c001576c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015770:	83 c0 0c             	add    eax,0xc
c0015773:	83 ec 08             	sub    esp,0x8
c0015776:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001577a:	50                   	push   eax
c001577b:	e8 c0 ae fe ff       	call   c0000640 <strcpy>
c0015780:	83 c4 10             	add    esp,0x10
c0015783:	83 ec 08             	sub    esp,0x8
c0015786:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001578a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001578e:	e8 d9 fd ff ff       	call   c001556c <Process::addArgs(char**)>
c0015793:	83 c4 10             	add    esp,0x10
c0015796:	83 ec 08             	sub    esp,0x8
c0015799:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001579d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157a1:	e8 66 ed ff ff       	call   c001450c <Thr::loadProgramIntoMemory(Process*, char const*)>
c00157a6:	83 c4 10             	add    esp,0x10
c00157a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00157ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00157b1:	83 f0 01             	xor    eax,0x1
c00157b4:	88 c2                	mov    dl,al
c00157b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157ba:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00157c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00157c5:	83 ec 04             	sub    esp,0x4
c00157c8:	50                   	push   eax
c00157c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157cd:	68 58 24 02 c0       	push   0xc0022458
c00157d2:	e8 6e 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	90                   	nop
c00157db:	83 c4 14             	add    esp,0x14
c00157de:	5b                   	pop    ebx
c00157df:	5e                   	pop    esi
c00157e0:	c3                   	ret    
c00157e1:	90                   	nop
c00157e2:	66 90                	xchg   ax,ax

c00157e4 <Process::Process(bool, char const*, Process*, char**)>:
c00157e4:	56                   	push   esi
c00157e5:	53                   	push   ebx
c00157e6:	83 ec 24             	sub    esp,0x24
c00157e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00157ed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00157f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157f5:	05 0c 02 00 00       	add    eax,0x20c
c00157fa:	bb 07 00 00 00       	mov    ebx,0x7
c00157ff:	89 c6                	mov    esi,eax
c0015801:	8d 76 00             	lea    esi,[esi+0x0]
c0015804:	85 db                	test   ebx,ebx
c0015806:	78 14                	js     c001581c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015808:	83 ec 0c             	sub    esp,0xc
c001580b:	56                   	push   esi
c001580c:	e8 d7 a3 00 00       	call   c001fbe8 <ThreadControlBlock::ThreadControlBlock()>
c0015811:	83 c4 10             	add    esp,0x10
c0015814:	83 c6 5f             	add    esi,0x5f
c0015817:	83 eb 01             	sub    ebx,0x1
c001581a:	eb e8                	jmp    c0015804 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001581c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015820:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015827:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001582b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015832:	83 ec 0c             	sub    esp,0xc
c0015835:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015839:	e8 50 b9 ff ff       	call   c001118e <KeNewProcessEnv(Process*)>
c001583e:	83 c4 10             	add    esp,0x10
c0015841:	89 c2                	mov    edx,eax
c0015843:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015847:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001584d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015851:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001585a:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c001585f:	8d 50 01             	lea    edx,[eax+0x1]
c0015862:	89 15 00 36 02 c0    	mov    DWORD PTR ds:0xc0023600,edx
c0015868:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001586c:	89 02                	mov    DWORD PTR [edx],eax
c001586e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015876:	83 ec 0c             	sub    esp,0xc
c0015879:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001587d:	e8 34 22 ff ff       	call   c0007ab6 <malloc>
c0015882:	83 c4 10             	add    esp,0x10
c0015885:	89 c3                	mov    ebx,eax
c0015887:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001588c:	83 ec 08             	sub    esp,0x8
c001588f:	50                   	push   eax
c0015890:	53                   	push   ebx
c0015891:	e8 d2 47 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015896:	83 c4 10             	add    esp,0x10
c0015899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001589d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00158a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158a7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00158b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158b5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00158b9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00158bf:	e8 ee be ff ff       	call   c00117b2 <KeInitSignals()>
c00158c4:	89 c2                	mov    edx,eax
c00158c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158ca:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00158d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158da:	85 c0                	test   eax,eax
c00158dc:	74 42                	je     c0015920 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00158de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158e2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158e8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00158ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158f2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00158f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015902:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015908:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001590c:	05 0c 01 00 00       	add    eax,0x10c
c0015911:	83 ec 08             	sub    esp,0x8
c0015914:	52                   	push   edx
c0015915:	50                   	push   eax
c0015916:	e8 25 ad fe ff       	call   c0000640 <strcpy>
c001591b:	83 c4 10             	add    esp,0x10
c001591e:	eb 64                	jmp    c0015984 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015920:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015928:	83 ec 0c             	sub    esp,0xc
c001592b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001592f:	e8 82 21 ff ff       	call   c0007ab6 <malloc>
c0015934:	83 c4 10             	add    esp,0x10
c0015937:	89 c3                	mov    ebx,eax
c0015939:	83 ec 08             	sub    esp,0x8
c001593c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015940:	53                   	push   ebx
c0015941:	e8 20 33 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015946:	83 c4 10             	add    esp,0x10
c0015949:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001594d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015957:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	50                   	push   eax
c0015961:	e8 9e 2b ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015966:	83 c4 10             	add    esp,0x10
c0015969:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001596d:	05 0c 01 00 00       	add    eax,0x10c
c0015972:	83 ec 08             	sub    esp,0x8
c0015975:	68 01 24 02 c0       	push   0xc0022401
c001597a:	50                   	push   eax
c001597b:	e8 c0 ac fe ff       	call   c0000640 <strcpy>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	90                   	nop
c0015984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015988:	83 c0 0c             	add    eax,0xc
c001598b:	83 ec 08             	sub    esp,0x8
c001598e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015992:	50                   	push   eax
c0015993:	e8 a8 ac fe ff       	call   c0000640 <strcpy>
c0015998:	83 c4 10             	add    esp,0x10
c001599b:	83 ec 08             	sub    esp,0x8
c001599e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00159a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00159a6:	e8 c1 fb ff ff       	call   c001556c <Process::addArgs(char**)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	90                   	nop
c00159af:	83 c4 24             	add    esp,0x24
c00159b2:	5b                   	pop    ebx
c00159b3:	5e                   	pop    esi
c00159b4:	c3                   	ret    
c00159b5:	8d 76 00             	lea    esi,[esi+0x0]

c00159b8 <taskStartupFunction>:
c00159b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159bd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00159c0:	c3                   	ret    
c00159c1:	90                   	nop
c00159c2:	66 90                	xchg   ax,ax

c00159c4 <Semaphore::Semaphore(int)>:
c00159c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00159cc:	89 10                	mov    DWORD PTR [eax],edx
c00159ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159d2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00159d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159e8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00159ef:	90                   	nop
c00159f0:	c3                   	ret    
c00159f1:	90                   	nop
c00159f2:	66 90                	xchg   ax,ax

c00159f4 <Mutex::Mutex()>:
c00159f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159f8:	6a 01                	push   0x1
c00159fa:	50                   	push   eax
c00159fb:	e8 c4 ff ff ff       	call   c00159c4 <Semaphore::Semaphore(int)>
c0015a00:	83 c4 08             	add    esp,0x8
c0015a03:	90                   	nop
c0015a04:	c3                   	ret    
c0015a05:	90                   	nop
c0015a06:	66 90                	xchg   ax,ax

c0015a08 <Process::createThread(void (*)(void*), void*, int)>:
c0015a08:	57                   	push   edi
c0015a09:	31 c9                	xor    ecx,ecx
c0015a0b:	56                   	push   esi
c0015a0c:	53                   	push   ebx
c0015a0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a11:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015a18:	89 f2                	mov    edx,esi
c0015a1a:	66 90                	xchg   ax,ax
c0015a1c:	0f b7 c2             	movzx  eax,dx
c0015a1f:	80 e2 01             	and    dl,0x1
c0015a22:	74 14                	je     c0015a38 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015a24:	d1 f8                	sar    eax,1
c0015a26:	83 c1 01             	add    ecx,0x1
c0015a29:	89 c2                	mov    edx,eax
c0015a2b:	83 f9 10             	cmp    ecx,0x10
c0015a2e:	75 ec                	jne    c0015a1c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015a30:	31 db                	xor    ebx,ebx
c0015a32:	89 d8                	mov    eax,ebx
c0015a34:	5b                   	pop    ebx
c0015a35:	5e                   	pop    esi
c0015a36:	5f                   	pop    edi
c0015a37:	c3                   	ret    
c0015a38:	b8 01 00 00 00       	mov    eax,0x1
c0015a3d:	d3 e0                	shl    eax,cl
c0015a3f:	09 c6                	or     esi,eax
c0015a41:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015a44:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015a4b:	01 c0                	add    eax,eax
c0015a4d:	01 c8                	add    eax,ecx
c0015a4f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015a52:	01 d8                	add    eax,ebx
c0015a54:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015a5b:	75 0b                	jne    c0015a68 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015a5d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015a67:	90                   	nop
c0015a68:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a6e:	83 ec 0c             	sub    esp,0xc
c0015a71:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015a74:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015a77:	01 c0                	add    eax,eax
c0015a79:	01 c8                	add    eax,ecx
c0015a7b:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015a7e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015a81:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015a87:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015a8d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a91:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015a97:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015a9d:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015aa3:	89 ca                	mov    edx,ecx
c0015aa5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015aac:	f7 da                	neg    edx
c0015aae:	c1 e2 15             	shl    edx,0x15
c0015ab1:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015ab7:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015abd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ac1:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015acb:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015ad1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ad5:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015adb:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015ae5:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015aef:	68 00 01 00 00       	push   0x100
c0015af4:	e8 bd 1f ff ff       	call   c0007ab6 <malloc>
c0015af9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015afc:	58                   	pop    eax
c0015afd:	5a                   	pop    edx
c0015afe:	53                   	push   ebx
c0015aff:	68 e4 96 02 c0       	push   0xc00296e4
c0015b04:	e8 77 9e 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	89 d8                	mov    eax,ebx
c0015b0e:	5b                   	pop    ebx
c0015b0f:	5e                   	pop    esi
c0015b10:	5f                   	pop    edi
c0015b11:	c3                   	ret    
c0015b12:	66 90                	xchg   ax,ax

c0015b14 <Process::createUserThread()>:
c0015b14:	83 ec 0c             	sub    esp,0xc
c0015b17:	68 80 00 00 00       	push   0x80
c0015b1c:	6a 00                	push   0x0
c0015b1e:	68 64 54 01 c0       	push   0xc0015464
c0015b23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b27:	50                   	push   eax
c0015b28:	e8 db fe ff ff       	call   c0015a08 <Process::createThread(void (*)(void*), void*, int)>
c0015b2d:	83 c4 1c             	add    esp,0x1c
c0015b30:	c3                   	ret    
c0015b31:	8d 76 00             	lea    esi,[esi+0x0]

c0015b34 <setupMultitasking(void (*)())>:
c0015b34:	56                   	push   esi
c0015b35:	53                   	push   ebx
c0015b36:	83 ec 04             	sub    esp,0x4
c0015b39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b3d:	eb 11                	jmp    c0015b50 <setupMultitasking(void (*)())+0x1c>
c0015b3f:	90                   	nop
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	68 e4 96 02 c0       	push   0xc00296e4
c0015b48:	e8 77 9d 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	83 ec 0c             	sub    esp,0xc
c0015b53:	68 e4 96 02 c0       	push   0xc00296e4
c0015b58:	e8 43 9d 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b5d:	83 c4 10             	add    esp,0x10
c0015b60:	84 c0                	test   al,al
c0015b62:	74 dc                	je     c0015b40 <setupMultitasking(void (*)())+0xc>
c0015b64:	83 ec 0c             	sub    esp,0xc
c0015b67:	68 24 07 00 00       	push   0x724
c0015b6c:	e8 45 1f ff ff       	call   c0007ab6 <malloc>
c0015b71:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015b78:	89 c3                	mov    ebx,eax
c0015b7a:	6a 00                	push   0x0
c0015b7c:	68 05 24 02 c0       	push   0xc0022405
c0015b81:	6a 01                	push   0x1
c0015b83:	50                   	push   eax
c0015b84:	e8 5b fc ff ff       	call   c00157e4 <Process::Process(bool, char const*, Process*, char**)>
c0015b89:	83 c4 14             	add    esp,0x14
c0015b8c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015b92:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015b98:	50                   	push   eax
c0015b99:	e8 bb 2b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015b9e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015ba5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015baf:	83 c8 01             	or     eax,0x1
c0015bb2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015bb9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015bbf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015bc2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015bcc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015bd2:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015bd8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015be2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015bec:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015bf6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015bfc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015c06:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015c0c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015c16:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015c1d:	e8 94 1e ff ff       	call   c0007ab6 <malloc>
c0015c22:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015c28:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015c2e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015c34:	5a                   	pop    edx
c0015c35:	59                   	pop    ecx
c0015c36:	68 01 24 02 c0       	push   0xc0022401
c0015c3b:	50                   	push   eax
c0015c3c:	e8 ff a9 fe ff       	call   c0000640 <strcpy>
c0015c41:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015c48:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015c4c:	83 c4 14             	add    esp,0x14
c0015c4f:	5b                   	pop    ebx
c0015c50:	5e                   	pop    esi
c0015c51:	e9 13 a6 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015c56:	66 90                	xchg   ax,ax

c0015c58 <schedule()>:
c0015c58:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015c5e:	85 d2                	test   edx,edx
c0015c60:	74 0e                	je     c0015c70 <schedule()+0x18>
c0015c62:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015c6c:	c3                   	ret    
c0015c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c70:	53                   	push   ebx
c0015c71:	83 ec 14             	sub    esp,0x14
c0015c74:	68 e4 96 02 c0       	push   0xc00296e4
c0015c79:	e8 22 9c 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	84 c0                	test   al,al
c0015c83:	75 3f                	jne    c0015cc4 <schedule()+0x6c>
c0015c85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015c8d:	83 fa 01             	cmp    edx,0x1
c0015c90:	74 3a                	je     c0015ccc <schedule()+0x74>
c0015c92:	66 90                	xchg   ax,ax
c0015c94:	83 ec 0c             	sub    esp,0xc
c0015c97:	68 e4 96 02 c0       	push   0xc00296e4
c0015c9c:	e8 1b 9c 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ca1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015ca8:	89 c3                	mov    ebx,eax
c0015caa:	e8 15 9c 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015caf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015cb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cb9:	e8 fe f7 ff ff       	call   c00154bc <switchToThread(ThreadControlBlock*)>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cc4:	83 c4 08             	add    esp,0x8
c0015cc7:	5b                   	pop    ebx
c0015cc8:	c3                   	ret    
c0015cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ccc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015cd3:	83 ec 08             	sub    esp,0x8
c0015cd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cdb:	50                   	push   eax
c0015cdc:	68 e4 96 02 c0       	push   0xc00296e4
c0015ce1:	e8 9a 9c 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	eb a9                	jmp    c0015c94 <schedule()+0x3c>
c0015ceb:	90                   	nop

c0015cec <Semaphore::tryAcquire()>:
c0015cec:	53                   	push   ebx
c0015ced:	83 ec 08             	sub    esp,0x8
c0015cf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015cf4:	fa                   	cli    
c0015cf5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cfa:	8d 50 01             	lea    edx,[eax+0x1]
c0015cfd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d03:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015d09:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015d0c:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015d12:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015d15:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015d17:	7c 33                	jl     c0015d4c <Semaphore::tryAcquire()+0x60>
c0015d19:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015d1f:	85 d2                	test   edx,edx
c0015d21:	75 0d                	jne    c0015d30 <Semaphore::tryAcquire()+0x44>
c0015d23:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015d29:	85 d2                	test   edx,edx
c0015d2b:	75 6f                	jne    c0015d9c <Semaphore::tryAcquire()+0xb0>
c0015d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d30:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d35:	85 c0                	test   eax,eax
c0015d37:	74 0b                	je     c0015d44 <Semaphore::tryAcquire()+0x58>
c0015d39:	8d 76 00             	lea    esi,[esi+0x0]
c0015d3c:	31 c0                	xor    eax,eax
c0015d3e:	83 c4 08             	add    esp,0x8
c0015d41:	5b                   	pop    ebx
c0015d42:	c3                   	ret    
c0015d43:	90                   	nop
c0015d44:	fb                   	sti    
c0015d45:	83 c4 08             	add    esp,0x8
c0015d48:	5b                   	pop    ebx
c0015d49:	c3                   	ret    
c0015d4a:	66 90                	xchg   ax,ax
c0015d4c:	83 c3 01             	add    ebx,0x1
c0015d4f:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015d55:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015d58:	85 d2                	test   edx,edx
c0015d5a:	75 24                	jne    c0015d80 <Semaphore::tryAcquire()+0x94>
c0015d5c:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015d62:	85 c9                	test   ecx,ecx
c0015d64:	74 1a                	je     c0015d80 <Semaphore::tryAcquire()+0x94>
c0015d66:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d70:	e8 e3 fe ff ff       	call   c0015c58 <schedule()>
c0015d75:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d7a:	83 e8 01             	sub    eax,0x1
c0015d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d80:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d85:	85 c0                	test   eax,eax
c0015d87:	75 0b                	jne    c0015d94 <Semaphore::tryAcquire()+0xa8>
c0015d89:	fb                   	sti    
c0015d8a:	b0 01                	mov    al,0x1
c0015d8c:	83 c4 08             	add    esp,0x8
c0015d8f:	5b                   	pop    ebx
c0015d90:	c3                   	ret    
c0015d91:	8d 76 00             	lea    esi,[esi+0x0]
c0015d94:	b0 01                	mov    al,0x1
c0015d96:	83 c4 08             	add    esp,0x8
c0015d99:	5b                   	pop    ebx
c0015d9a:	c3                   	ret    
c0015d9b:	90                   	nop
c0015d9c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015da6:	e8 ad fe ff ff       	call   c0015c58 <schedule()>
c0015dab:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015db0:	83 e8 01             	sub    eax,0x1
c0015db3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015db8:	85 c0                	test   eax,eax
c0015dba:	75 80                	jne    c0015d3c <Semaphore::tryAcquire()+0x50>
c0015dbc:	eb 86                	jmp    c0015d44 <Semaphore::tryAcquire()+0x58>
c0015dbe:	66 90                	xchg   ax,ax

c0015dc0 <Semaphore::assertLocked(char const*)>:
c0015dc0:	83 ec 0c             	sub    esp,0xc
c0015dc3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dc7:	fa                   	cli    
c0015dc8:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015dce:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015dd3:	83 c1 01             	add    ecx,0x1
c0015dd6:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015ddc:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ddf:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015de5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015de7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015dea:	7c 28                	jl     c0015e14 <Semaphore::assertLocked(char const*)+0x54>
c0015dec:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015df1:	85 c0                	test   eax,eax
c0015df3:	75 0b                	jne    c0015e00 <Semaphore::assertLocked(char const*)+0x40>
c0015df5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015dfa:	85 c0                	test   eax,eax
c0015dfc:	75 32                	jne    c0015e30 <Semaphore::assertLocked(char const*)+0x70>
c0015dfe:	66 90                	xchg   ax,ax
c0015e00:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e05:	83 e8 01             	sub    eax,0x1
c0015e08:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e0d:	75 01                	jne    c0015e10 <Semaphore::assertLocked(char const*)+0x50>
c0015e0f:	fb                   	sti    
c0015e10:	83 c4 0c             	add    esp,0xc
c0015e13:	c3                   	ret    
c0015e14:	83 ec 0c             	sub    esp,0xc
c0015e17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e1b:	52                   	push   edx
c0015e1c:	e8 78 b5 ff ff       	call   c0011399 <KePanic(char const*)>
c0015e21:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e26:	83 c4 10             	add    esp,0x10
c0015e29:	83 e8 01             	sub    eax,0x1
c0015e2c:	eb be                	jmp    c0015dec <Semaphore::assertLocked(char const*)+0x2c>
c0015e2e:	66 90                	xchg   ax,ax
c0015e30:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e3a:	e8 19 fe ff ff       	call   c0015c58 <schedule()>
c0015e3f:	eb bf                	jmp    c0015e00 <Semaphore::assertLocked(char const*)+0x40>
c0015e41:	8d 76 00             	lea    esi,[esi+0x0]

c0015e44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015e44:	83 ec 0c             	sub    esp,0xc
c0015e47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e50:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e53:	e8 00 fe ff ff       	call   c0015c58 <schedule()>
c0015e58:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e5d:	83 e8 01             	sub    eax,0x1
c0015e60:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e65:	75 01                	jne    c0015e68 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015e67:	fb                   	sti    
c0015e68:	83 c4 0c             	add    esp,0xc
c0015e6b:	c3                   	ret    

c0015e6c <blockTask(TaskState)>:
c0015e6c:	83 ec 0c             	sub    esp,0xc
c0015e6f:	fa                   	cli    
c0015e70:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e79:	83 c0 01             	add    eax,0x1
c0015e7c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e86:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e89:	e8 ca fd ff ff       	call   c0015c58 <schedule()>
c0015e8e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e93:	83 e8 01             	sub    eax,0x1
c0015e96:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e9b:	75 03                	jne    c0015ea0 <blockTask(TaskState)+0x34>
c0015e9d:	fb                   	sti    
c0015e9e:	66 90                	xchg   ax,ax
c0015ea0:	83 c4 0c             	add    esp,0xc
c0015ea3:	c3                   	ret    

c0015ea4 <waitTask(int, int*, int)>:
c0015ea4:	83 ec 18             	sub    esp,0x18
c0015ea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015eb0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015eb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015eb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ebc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015ebf:	6a 07                	push   0x7
c0015ec1:	e8 a6 ff ff ff       	call   c0015e6c <blockTask(TaskState)>
c0015ec6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ecb:	83 c4 10             	add    esp,0x10
c0015ece:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015ed1:	85 d2                	test   edx,edx
c0015ed3:	74 0b                	je     c0015ee0 <waitTask(int, int*, int)+0x3c>
c0015ed5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015ed8:	89 02                	mov    DWORD PTR [edx],eax
c0015eda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015edf:	90                   	nop
c0015ee0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015ee3:	83 c4 0c             	add    esp,0xc
c0015ee6:	c3                   	ret    
c0015ee7:	90                   	nop

c0015ee8 <milliTenthSleepUntil(unsigned int)>:
c0015ee8:	83 ec 0c             	sub    esp,0xc
c0015eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eef:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015ef5:	76 05                	jbe    c0015efc <milliTenthSleepUntil(unsigned int)+0x14>
c0015ef7:	90                   	nop
c0015ef8:	83 c4 0c             	add    esp,0xc
c0015efb:	c3                   	ret    
c0015efc:	fa                   	cli    
c0015efd:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015f03:	83 ec 08             	sub    esp,0x8
c0015f06:	83 c2 01             	add    edx,0x1
c0015f09:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015f0f:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015f15:	83 c1 01             	add    ecx,0x1
c0015f18:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f1e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f24:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015f27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f2c:	50                   	push   eax
c0015f2d:	68 d8 96 02 c0       	push   0xc00296d8
c0015f32:	e8 49 9a 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f37:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015f3e:	e8 29 ff ff ff       	call   c0015e6c <blockTask(TaskState)>
c0015f43:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f48:	83 c4 10             	add    esp,0x10
c0015f4b:	83 e8 01             	sub    eax,0x1
c0015f4e:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f53:	85 c0                	test   eax,eax
c0015f55:	75 09                	jne    c0015f60 <milliTenthSleepUntil(unsigned int)+0x78>
c0015f57:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f5c:	85 c0                	test   eax,eax
c0015f5e:	75 14                	jne    c0015f74 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015f60:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f65:	83 e8 01             	sub    eax,0x1
c0015f68:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f6d:	75 89                	jne    c0015ef8 <milliTenthSleepUntil(unsigned int)+0x10>
c0015f6f:	fb                   	sti    
c0015f70:	83 c4 0c             	add    esp,0xc
c0015f73:	c3                   	ret    
c0015f74:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f7e:	e8 d5 fc ff ff       	call   c0015c58 <schedule()>
c0015f83:	eb db                	jmp    c0015f60 <milliTenthSleepUntil(unsigned int)+0x78>
c0015f85:	8d 76 00             	lea    esi,[esi+0x0]

c0015f88 <milliTenthSleep(unsigned int)>:
c0015f88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f8c:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015f91:	01 c2                	add    edx,eax
c0015f93:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015f97:	e9 4c ff ff ff       	jmp    c0015ee8 <milliTenthSleepUntil(unsigned int)>

c0015f9c <sleep(unsigned int)>:
c0015f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fa0:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fa3:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fa6:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fa9:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fac:	c1 e0 04             	shl    eax,0x4
c0015faf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fb3:	eb d3                	jmp    c0015f88 <milliTenthSleep(unsigned int)>
c0015fb5:	90                   	nop
c0015fb6:	66 90                	xchg   ax,ax

c0015fb8 <Semaphore::acquire()>:
c0015fb8:	83 ec 0c             	sub    esp,0xc
c0015fbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fbf:	fa                   	cli    
c0015fc0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fc5:	83 c0 01             	add    eax,0x1
c0015fc8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fcd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015fd2:	8d 48 01             	lea    ecx,[eax+0x1]
c0015fd5:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015fdb:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015fde:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015fe0:	7d 2e                	jge    c0016010 <Semaphore::acquire()+0x58>
c0015fe2:	83 c1 01             	add    ecx,0x1
c0015fe5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015fe8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015fed:	85 c0                	test   eax,eax
c0015fef:	75 0b                	jne    c0015ffc <Semaphore::acquire()+0x44>
c0015ff1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ff6:	85 c0                	test   eax,eax
c0015ff8:	75 66                	jne    c0016060 <Semaphore::acquire()+0xa8>
c0015ffa:	66 90                	xchg   ax,ax
c0015ffc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016001:	83 e8 01             	sub    eax,0x1
c0016004:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016009:	75 01                	jne    c001600c <Semaphore::acquire()+0x54>
c001600b:	fb                   	sti    
c001600c:	83 c4 0c             	add    esp,0xc
c001600f:	c3                   	ret    
c0016010:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016015:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001601c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001601f:	85 c9                	test   ecx,ecx
c0016021:	74 51                	je     c0016074 <Semaphore::acquire()+0xbc>
c0016023:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016026:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001602c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001602f:	90                   	nop
c0016030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016035:	83 ec 0c             	sub    esp,0xc
c0016038:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001603b:	68 84 24 02 c0       	push   0xc0022484
c0016040:	e8 00 49 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016045:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001604c:	e8 1b fe ff ff       	call   c0015e6c <blockTask(TaskState)>
c0016051:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016056:	83 c4 10             	add    esp,0x10
c0016059:	83 e8 01             	sub    eax,0x1
c001605c:	eb 8a                	jmp    c0015fe8 <Semaphore::acquire()+0x30>
c001605e:	66 90                	xchg   ax,ax
c0016060:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001606a:	e8 e9 fb ff ff       	call   c0015c58 <schedule()>
c001606f:	eb 8b                	jmp    c0015ffc <Semaphore::acquire()+0x44>
c0016071:	8d 76 00             	lea    esi,[esi+0x0]
c0016074:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016079:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001607c:	eb b2                	jmp    c0016030 <Semaphore::acquire()+0x78>
c001607e:	66 90                	xchg   ax,ax

c0016080 <taskReturned>:
c0016080:	83 ec 18             	sub    esp,0x18
c0016083:	68 a4 24 02 c0       	push   0xc00224a4
c0016088:	e8 0c b3 ff ff       	call   c0011399 <KePanic(char const*)>
c001608d:	83 c4 10             	add    esp,0x10
c0016090:	83 ec 0c             	sub    esp,0xc
c0016093:	6a 02                	push   0x2
c0016095:	e8 d2 fd ff ff       	call   c0015e6c <blockTask(TaskState)>
c001609a:	fa                   	cli    
c001609b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160a0:	83 c0 01             	add    eax,0x1
c00160a3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160a8:	e8 ab fb ff ff       	call   c0015c58 <schedule()>
c00160ad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	83 e8 01             	sub    eax,0x1
c00160b8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160bd:	85 c0                	test   eax,eax
c00160bf:	75 cf                	jne    c0016090 <taskReturned+0x10>
c00160c1:	fb                   	sti    
c00160c2:	eb cc                	jmp    c0016090 <taskReturned+0x10>

c00160c4 <Thr::processFromPID(int)>:
c00160c4:	57                   	push   edi
c00160c5:	56                   	push   esi
c00160c6:	53                   	push   ebx
c00160c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160cb:	fa                   	cli    
c00160cc:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c00160d2:	83 ec 0c             	sub    esp,0xc
c00160d5:	83 c1 01             	add    ecx,0x1
c00160d8:	68 e4 96 02 c0       	push   0xc00296e4
c00160dd:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c00160e3:	e8 d4 97 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160e8:	83 c4 10             	add    esp,0x10
c00160eb:	89 c7                	mov    edi,eax
c00160ed:	eb 15                	jmp    c0016104 <Thr::processFromPID(int)+0x40>
c00160ef:	90                   	nop
c00160f0:	83 ec 0c             	sub    esp,0xc
c00160f3:	68 e4 96 02 c0       	push   0xc00296e4
c00160f8:	e8 bf 97 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160fd:	83 c4 10             	add    esp,0x10
c0016100:	39 f8                	cmp    eax,edi
c0016102:	74 50                	je     c0016154 <Thr::processFromPID(int)+0x90>
c0016104:	83 ec 0c             	sub    esp,0xc
c0016107:	68 e4 96 02 c0       	push   0xc00296e4
c001610c:	e8 ab 97 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016111:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016118:	89 c3                	mov    ebx,eax
c001611a:	e8 a5 97 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001611f:	58                   	pop    eax
c0016120:	5a                   	pop    edx
c0016121:	53                   	push   ebx
c0016122:	68 e4 96 02 c0       	push   0xc00296e4
c0016127:	e8 54 98 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001612c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001612f:	83 c4 10             	add    esp,0x10
c0016132:	39 30                	cmp    DWORD PTR [eax],esi
c0016134:	75 ba                	jne    c00160f0 <Thr::processFromPID(int)+0x2c>
c0016136:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001613b:	83 e8 01             	sub    eax,0x1
c001613e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016143:	74 0b                	je     c0016150 <Thr::processFromPID(int)+0x8c>
c0016145:	8d 76 00             	lea    esi,[esi+0x0]
c0016148:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001614b:	5b                   	pop    ebx
c001614c:	5e                   	pop    esi
c001614d:	5f                   	pop    edi
c001614e:	c3                   	ret    
c001614f:	90                   	nop
c0016150:	fb                   	sti    
c0016151:	eb f5                	jmp    c0016148 <Thr::processFromPID(int)+0x84>
c0016153:	90                   	nop
c0016154:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016159:	83 e8 01             	sub    eax,0x1
c001615c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016161:	75 05                	jne    c0016168 <Thr::processFromPID(int)+0xa4>
c0016163:	fb                   	sti    
c0016164:	5b                   	pop    ebx
c0016165:	5e                   	pop    esi
c0016166:	5f                   	pop    edi
c0016167:	c3                   	ret    
c0016168:	5b                   	pop    ebx
c0016169:	31 c0                	xor    eax,eax
c001616b:	5e                   	pop    esi
c001616c:	5f                   	pop    edi
c001616d:	c3                   	ret    
c001616e:	66 90                	xchg   ax,ax

c0016170 <unblockTask(ThreadControlBlock*)>:
c0016170:	53                   	push   ebx
c0016171:	83 ec 08             	sub    esp,0x8
c0016174:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016178:	fa                   	cli    
c0016179:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001617e:	83 c0 01             	add    eax,0x1
c0016181:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016186:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016189:	85 c0                	test   eax,eax
c001618b:	74 67                	je     c00161f4 <unblockTask(ThreadControlBlock*)+0x84>
c001618d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016190:	83 f8 01             	cmp    eax,0x1
c0016193:	74 37                	je     c00161cc <unblockTask(ThreadControlBlock*)+0x5c>
c0016195:	83 ec 0c             	sub    esp,0xc
c0016198:	68 e4 96 02 c0       	push   0xc00296e4
c001619d:	e8 1a 97 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161a2:	83 c4 10             	add    esp,0x10
c00161a5:	85 c0                	test   eax,eax
c00161a7:	75 1b                	jne    c00161c4 <unblockTask(ThreadControlBlock*)+0x54>
c00161a9:	eb 5d                	jmp    c0016208 <unblockTask(ThreadControlBlock*)+0x98>
c00161ab:	90                   	nop
c00161ac:	83 ec 08             	sub    esp,0x8
c00161af:	50                   	push   eax
c00161b0:	68 e4 96 02 c0       	push   0xc00296e4
c00161b5:	e8 22 9a 00 00       	call   c001fbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00161ba:	83 c4 10             	add    esp,0x10
c00161bd:	85 c0                	test   eax,eax
c00161bf:	74 47                	je     c0016208 <unblockTask(ThreadControlBlock*)+0x98>
c00161c1:	8d 76 00             	lea    esi,[esi+0x0]
c00161c4:	39 c3                	cmp    ebx,eax
c00161c6:	75 e4                	jne    c00161ac <unblockTask(ThreadControlBlock*)+0x3c>
c00161c8:	eb 12                	jmp    c00161dc <unblockTask(ThreadControlBlock*)+0x6c>
c00161ca:	66 90                	xchg   ax,ax
c00161cc:	83 ec 0c             	sub    esp,0xc
c00161cf:	68 23 24 02 c0       	push   0xc0022423
c00161d4:	e8 6c 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00161d9:	83 c4 10             	add    esp,0x10
c00161dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00161e1:	83 e8 01             	sub    eax,0x1
c00161e4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161e9:	75 01                	jne    c00161ec <unblockTask(ThreadControlBlock*)+0x7c>
c00161eb:	fb                   	sti    
c00161ec:	83 c4 08             	add    esp,0x8
c00161ef:	5b                   	pop    ebx
c00161f0:	c3                   	ret    
c00161f1:	8d 76 00             	lea    esi,[esi+0x0]
c00161f4:	83 ec 0c             	sub    esp,0xc
c00161f7:	68 0c 24 02 c0       	push   0xc002240c
c00161fc:	e8 44 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	eb d6                	jmp    c00161dc <unblockTask(ThreadControlBlock*)+0x6c>
c0016206:	66 90                	xchg   ax,ax
c0016208:	83 ec 08             	sub    esp,0x8
c001620b:	53                   	push   ebx
c001620c:	68 e4 96 02 c0       	push   0xc00296e4
c0016211:	e8 6a 97 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016216:	83 c4 10             	add    esp,0x10
c0016219:	eb c1                	jmp    c00161dc <unblockTask(ThreadControlBlock*)+0x6c>
c001621b:	90                   	nop

c001621c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001621c:	55                   	push   ebp
c001621d:	57                   	push   edi
c001621e:	56                   	push   esi
c001621f:	53                   	push   ebx
c0016220:	83 ec 1c             	sub    esp,0x1c
c0016223:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016227:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001622a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016230:	85 ed                	test   ebp,ebp
c0016232:	7e 28                	jle    c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016234:	31 f6                	xor    esi,esi
c0016236:	66 90                	xchg   ax,ax
c0016238:	83 ec 0c             	sub    esp,0xc
c001623b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016242:	83 c6 01             	add    esi,0x1
c0016245:	57                   	push   edi
c0016246:	e8 7b 18 ff ff       	call   c0007ac6 <free>
c001624b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001624e:	83 c4 10             	add    esp,0x10
c0016251:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016257:	7f df                	jg     c0016238 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016259:	8d 76 00             	lea    esi,[esi+0x0]
c001625c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016266:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001626b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001626e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016271:	d3 c0                	rol    eax,cl
c0016273:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001627a:	21 c8                	and    eax,ecx
c001627c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016283:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016286:	89 f7                	mov    edi,esi
c0016288:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016290:	0f 85 72 01 00 00    	jne    c0016408 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016296:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001629c:	85 ed                	test   ebp,ebp
c001629e:	74 1c                	je     c00162bc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00162a0:	83 ec 0c             	sub    esp,0xc
c00162a3:	55                   	push   ebp
c00162a4:	e8 01 ae ff ff       	call   c00110aa <EnvVarContainer::~EnvVarContainer()>
c00162a9:	59                   	pop    ecx
c00162aa:	5e                   	pop    esi
c00162ab:	6a 0c                	push   0xc
c00162ad:	55                   	push   ebp
c00162ae:	e8 65 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00162b3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162b6:	83 c4 10             	add    esp,0x10
c00162b9:	89 f7                	mov    edi,esi
c00162bb:	90                   	nop
c00162bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162c2:	85 c0                	test   eax,eax
c00162c4:	0f 84 b2 00 00 00    	je     c001637c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00162ca:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00162cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00162d1:	31 c9                	xor    ecx,ecx
c00162d3:	eb 17                	jmp    c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00162d5:	8d 76 00             	lea    esi,[esi+0x0]
c00162d8:	83 c1 01             	add    ecx,0x1
c00162db:	83 f9 10             	cmp    ecx,0x10
c00162de:	0f 84 98 00 00 00    	je     c001637c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00162e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162ea:	66 90                	xchg   ax,ax
c00162ec:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00162f3:	d3 fa                	sar    edx,cl
c00162f5:	80 e2 01             	and    dl,0x1
c00162f8:	74 de                	je     c00162d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00162fa:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00162fd:	01 d2                	add    edx,edx
c00162ff:	01 ca                	add    edx,ecx
c0016301:	8d 14 92             	lea    edx,[edx+edx*4]
c0016304:	01 d0                	add    eax,edx
c0016306:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001630c:	83 fd 07             	cmp    ebp,0x7
c001630f:	75 c7                	jne    c00162d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016311:	05 40 02 00 00       	add    eax,0x240
c0016316:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016319:	83 fd ff             	cmp    ebp,0xffffffff
c001631c:	0f 8c ee 00 00 00    	jl     c0016410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016322:	0f 84 ac 01 00 00    	je     c00164d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016328:	85 ed                	test   ebp,ebp
c001632a:	0f 84 90 01 00 00    	je     c00164c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016330:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016332:	75 a4                	jne    c00162d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016334:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001633a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001633e:	01 d0                	add    eax,edx
c0016340:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016344:	83 ec 0c             	sub    esp,0xc
c0016347:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001634d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016350:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016356:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001635d:	50                   	push   eax
c001635e:	e8 0d fe ff ff       	call   c0016170 <unblockTask(ThreadControlBlock*)>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016369:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001636d:	89 f7                	mov    edi,esi
c001636f:	83 c1 01             	add    ecx,0x1
c0016372:	83 f9 10             	cmp    ecx,0x10
c0016375:	0f 85 69 ff ff ff    	jne    c00162e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001637b:	90                   	nop
c001637c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016382:	85 c0                	test   eax,eax
c0016384:	74 62                	je     c00163e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016386:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001638c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016392:	74 54                	je     c00163e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016394:	83 ec 0c             	sub    esp,0xc
c0016397:	68 e4 96 02 c0       	push   0xc00296e4
c001639c:	e8 1b 95 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163a1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163a8:	89 c7                	mov    edi,eax
c00163aa:	e8 f1 94 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163af:	83 c4 10             	add    esp,0x10
c00163b2:	84 c0                	test   al,al
c00163b4:	0f 84 ce 00 00 00    	je     c0016488 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00163ba:	66 90                	xchg   ax,ax
c00163bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163bf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00163c5:	85 d2                	test   edx,edx
c00163c7:	74 0f                	je     c00163d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00163c9:	83 ec 0c             	sub    esp,0xc
c00163cc:	8b 02                	mov    eax,DWORD PTR [edx]
c00163ce:	52                   	push   edx
c00163cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163d2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163d5:	83 c4 10             	add    esp,0x10
c00163d8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00163e2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00163e5:	8d 76 00             	lea    esi,[esi+0x0]
c00163e8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00163ee:	85 db                	test   ebx,ebx
c00163f0:	74 16                	je     c0016408 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	53                   	push   ebx
c00163f6:	e8 b7 37 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00163fb:	58                   	pop    eax
c00163fc:	5a                   	pop    edx
c00163fd:	6a 14                	push   0x14
c00163ff:	53                   	push   ebx
c0016400:	e8 13 44 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016405:	83 c4 10             	add    esp,0x10
c0016408:	83 c4 1c             	add    esp,0x1c
c001640b:	5b                   	pop    ebx
c001640c:	5e                   	pop    esi
c001640d:	5f                   	pop    edi
c001640e:	5d                   	pop    ebp
c001640f:	c3                   	ret    
c0016410:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016414:	83 ec 0c             	sub    esp,0xc
c0016417:	68 d8 24 02 c0       	push   0xc00224d8
c001641c:	e8 78 af ff ff       	call   c0011399 <KePanic(char const*)>
c0016421:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016424:	83 c4 10             	add    esp,0x10
c0016427:	89 f7                	mov    edi,esi
c0016429:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001642d:	e9 a6 fe ff ff       	jmp    c00162d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016432:	66 90                	xchg   ax,ax
c0016434:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001643a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016440:	75 1e                	jne    c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016442:	83 ec 0c             	sub    esp,0xc
c0016445:	68 40 25 02 c0       	push   0xc0022540
c001644a:	e8 f6 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001644f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016456:	e8 11 fa ff ff       	call   c0015e6c <blockTask(TaskState)>
c001645b:	83 c4 10             	add    esp,0x10
c001645e:	66 90                	xchg   ax,ax
c0016460:	83 ec 08             	sub    esp,0x8
c0016463:	56                   	push   esi
c0016464:	68 e4 96 02 c0       	push   0xc00296e4
c0016469:	e8 12 95 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001646e:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016475:	e8 42 94 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001647a:	83 c4 10             	add    esp,0x10
c001647d:	39 f8                	cmp    eax,edi
c001647f:	0f 84 37 ff ff ff    	je     c00163bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016485:	8d 76 00             	lea    esi,[esi+0x0]
c0016488:	83 ec 0c             	sub    esp,0xc
c001648b:	68 e4 96 02 c0       	push   0xc00296e4
c0016490:	e8 27 94 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016495:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001649c:	89 c6                	mov    esi,eax
c001649e:	e8 21 94 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164a3:	83 c4 10             	add    esp,0x10
c00164a6:	39 f3                	cmp    ebx,esi
c00164a8:	74 b6                	je     c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164aa:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00164ad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164b0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00164b6:	75 a8                	jne    c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164b8:	e9 77 ff ff ff       	jmp    c0016434 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00164bd:	8d 76 00             	lea    esi,[esi+0x0]
c00164c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	68 0c 25 02 c0       	push   0xc002250c
c00164cc:	e9 4b ff ff ff       	jmp    c001641c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00164d1:	8d 76 00             	lea    esi,[esi+0x0]
c00164d4:	8b 36                	mov    esi,DWORD PTR [esi]
c00164d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164da:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00164dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164e0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00164e6:	01 d7                	add    edi,edx
c00164e8:	89 f8                	mov    eax,edi
c00164ea:	e9 51 fe ff ff       	jmp    c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00164ef:	90                   	nop

c00164f0 <cleanerTaskFunction(void*)>:
c00164f0:	53                   	push   ebx
c00164f1:	83 ec 08             	sub    esp,0x8
c00164f4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164f9:	83 e8 01             	sub    eax,0x1
c00164fc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016501:	75 01                	jne    c0016504 <cleanerTaskFunction(void*)+0x14>
c0016503:	fb                   	sti    
c0016504:	fa                   	cli    
c0016505:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001650a:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016511:	8d 50 01             	lea    edx,[eax+0x1]
c0016514:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001651a:	0f 84 c4 00 00 00    	je     c00165e4 <cleanerTaskFunction(void*)+0xf4>
c0016520:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016525:	85 c0                	test   eax,eax
c0016527:	75 03                	jne    c001652c <cleanerTaskFunction(void*)+0x3c>
c0016529:	fb                   	sti    
c001652a:	66 90                	xchg   ax,ax
c001652c:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c0016533:	fa                   	cli    
c0016534:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001653a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016540:	83 c2 01             	add    edx,0x1
c0016543:	83 c1 01             	add    ecx,0x1
c0016546:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001654c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016552:	fa                   	cli    
c0016553:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016559:	83 c3 01             	add    ebx,0x1
c001655c:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c0016562:	eb 28                	jmp    c001658c <cleanerTaskFunction(void*)+0x9c>
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	68 cc 96 02 c0       	push   0xc00296cc
c001656c:	e8 4b 93 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016571:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016578:	89 c3                	mov    ebx,eax
c001657a:	e8 45 93 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001657f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016582:	e8 95 fc ff ff       	call   c001621c <cleanupTerminatedTask(ThreadControlBlock*)>
c0016587:	83 c4 10             	add    esp,0x10
c001658a:	66 90                	xchg   ax,ax
c001658c:	83 ec 0c             	sub    esp,0xc
c001658f:	68 cc 96 02 c0       	push   0xc00296cc
c0016594:	e8 07 93 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016599:	83 c4 10             	add    esp,0x10
c001659c:	84 c0                	test   al,al
c001659e:	74 c4                	je     c0016564 <cleanerTaskFunction(void*)+0x74>
c00165a0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165a5:	83 e8 01             	sub    eax,0x1
c00165a8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165ad:	75 01                	jne    c00165b0 <cleanerTaskFunction(void*)+0xc0>
c00165af:	fb                   	sti    
c00165b0:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165b5:	83 e8 01             	sub    eax,0x1
c00165b8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165bd:	0f 85 31 ff ff ff    	jne    c00164f4 <cleanerTaskFunction(void*)+0x4>
c00165c3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00165c8:	85 c0                	test   eax,eax
c00165ca:	0f 84 24 ff ff ff    	je     c00164f4 <cleanerTaskFunction(void*)+0x4>
c00165d0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165da:	e8 79 f6 ff ff       	call   c0015c58 <schedule()>
c00165df:	e9 10 ff ff ff       	jmp    c00164f4 <cleanerTaskFunction(void*)+0x4>
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	6a 02                	push   0x2
c00165e9:	e8 56 f8 ff ff       	call   c0015e44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00165ee:	83 c4 10             	add    esp,0x10
c00165f1:	e9 36 ff ff ff       	jmp    c001652c <cleanerTaskFunction(void*)+0x3c>
c00165f6:	66 90                	xchg   ax,ax

c00165f8 <terminateTask(int)>:
c00165f8:	83 ec 14             	sub    esp,0x14
c00165fb:	fa                   	cli    
c00165fc:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016602:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016608:	83 c2 01             	add    edx,0x1
c001660b:	83 c1 01             	add    ecx,0x1
c001660e:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016614:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001661a:	fa                   	cli    
c001661b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016620:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016624:	83 c0 01             	add    eax,0x1
c0016627:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001662c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016631:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016634:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016639:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001663c:	50                   	push   eax
c001663d:	68 cc 96 02 c0       	push   0xc00296cc
c0016642:	e8 39 93 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001664c:	83 c4 10             	add    esp,0x10
c001664f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016656:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c001665b:	85 c0                	test   eax,eax
c001665d:	74 65                	je     c00166c4 <terminateTask(int)+0xcc>
c001665f:	83 ec 0c             	sub    esp,0xc
c0016662:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016669:	50                   	push   eax
c001666a:	e8 01 fb ff ff       	call   c0016170 <unblockTask(ThreadControlBlock*)>
c001666f:	83 c4 10             	add    esp,0x10
c0016672:	66 90                	xchg   ax,ax
c0016674:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016679:	83 e8 01             	sub    eax,0x1
c001667c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016681:	75 01                	jne    c0016684 <terminateTask(int)+0x8c>
c0016683:	fb                   	sti    
c0016684:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016689:	83 e8 01             	sub    eax,0x1
c001668c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016691:	75 09                	jne    c001669c <terminateTask(int)+0xa4>
c0016693:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001669a:	75 3c                	jne    c00166d8 <terminateTask(int)+0xe0>
c001669c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166a1:	83 e8 01             	sub    eax,0x1
c00166a4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166a9:	75 01                	jne    c00166ac <terminateTask(int)+0xb4>
c00166ab:	fb                   	sti    
c00166ac:	fa                   	cli    
c00166ad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166b2:	83 c0 01             	add    eax,0x1
c00166b5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166ba:	66 90                	xchg   ax,ax
c00166bc:	e8 97 f5 ff ff       	call   c0015c58 <schedule()>
c00166c1:	eb d9                	jmp    c001669c <terminateTask(int)+0xa4>
c00166c3:	90                   	nop
c00166c4:	83 ec 0c             	sub    esp,0xc
c00166c7:	68 3a 24 02 c0       	push   0xc002243a
c00166cc:	e8 74 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166d1:	83 c4 10             	add    esp,0x10
c00166d4:	eb 9e                	jmp    c0016674 <terminateTask(int)+0x7c>
c00166d6:	66 90                	xchg   ax,ax
c00166d8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00166e2:	eb d8                	jmp    c00166bc <terminateTask(int)+0xc4>

c00166e4 <Thr::terminateFromIRQ(int)>:
c00166e4:	83 ec 18             	sub    esp,0x18
c00166e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166eb:	50                   	push   eax
c00166ec:	e8 07 ff ff ff       	call   c00165f8 <terminateTask(int)>
c00166f1:	90                   	nop
c00166f2:	66 90                	xchg   ax,ax

c00166f4 <Semaphore::release()>:
c00166f4:	83 ec 0c             	sub    esp,0xc
c00166f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00166fb:	fa                   	cli    
c00166fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016701:	83 c0 01             	add    eax,0x1
c0016704:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016709:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001670e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016711:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016717:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001671a:	85 c9                	test   ecx,ecx
c001671c:	74 42                	je     c0016760 <Semaphore::release()+0x6c>
c001671e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016721:	83 ec 0c             	sub    esp,0xc
c0016724:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016727:	51                   	push   ecx
c0016728:	e8 43 fa ff ff       	call   c0016170 <unblockTask(ThreadControlBlock*)>
c001672d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016732:	83 c4 10             	add    esp,0x10
c0016735:	83 e8 01             	sub    eax,0x1
c0016738:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001673d:	85 c0                	test   eax,eax
c001673f:	75 0b                	jne    c001674c <Semaphore::release()+0x58>
c0016741:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016746:	85 c0                	test   eax,eax
c0016748:	75 22                	jne    c001676c <Semaphore::release()+0x78>
c001674a:	66 90                	xchg   ax,ax
c001674c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016751:	83 e8 01             	sub    eax,0x1
c0016754:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016759:	75 01                	jne    c001675c <Semaphore::release()+0x68>
c001675b:	fb                   	sti    
c001675c:	83 c4 0c             	add    esp,0xc
c001675f:	c3                   	ret    
c0016760:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016763:	83 e9 01             	sub    ecx,0x1
c0016766:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016769:	eb cd                	jmp    c0016738 <Semaphore::release()+0x44>
c001676b:	90                   	nop
c001676c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016776:	e8 dd f4 ff ff       	call   c0015c58 <schedule()>
c001677b:	eb cf                	jmp    c001674c <Semaphore::release()+0x58>
c001677d:	8d 76 00             	lea    esi,[esi+0x0]

c0016780 <__static_initialization_and_destruction_0(int, int)>:
c0016780:	83 ec 0c             	sub    esp,0xc
c0016783:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016788:	0f 85 8e 00 00 00    	jne    c001681c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001678e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016796:	0f 85 80 00 00 00    	jne    c001681c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001679c:	83 ec 0c             	sub    esp,0xc
c001679f:	68 e4 96 02 c0       	push   0xc00296e4
c00167a4:	e8 8b 94 00 00       	call   c001fc34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167a9:	83 c4 10             	add    esp,0x10
c00167ac:	83 ec 04             	sub    esp,0x4
c00167af:	68 10 31 02 c0       	push   0xc0023110
c00167b4:	68 e4 96 02 c0       	push   0xc00296e4
c00167b9:	68 e4 fb 01 c0       	push   0xc001fbe4
c00167be:	e8 05 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	83 ec 0c             	sub    esp,0xc
c00167c9:	68 d8 96 02 c0       	push   0xc00296d8
c00167ce:	e8 61 94 00 00       	call   c001fc34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167d3:	83 c4 10             	add    esp,0x10
c00167d6:	83 ec 04             	sub    esp,0x4
c00167d9:	68 10 31 02 c0       	push   0xc0023110
c00167de:	68 d8 96 02 c0       	push   0xc00296d8
c00167e3:	68 e4 fb 01 c0       	push   0xc001fbe4
c00167e8:	e8 db 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c00167ed:	83 c4 10             	add    esp,0x10
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	68 cc 96 02 c0       	push   0xc00296cc
c00167f8:	e8 37 94 00 00       	call   c001fc34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167fd:	83 c4 10             	add    esp,0x10
c0016800:	83 ec 04             	sub    esp,0x4
c0016803:	68 10 31 02 c0       	push   0xc0023110
c0016808:	68 cc 96 02 c0       	push   0xc00296cc
c001680d:	68 e4 fb 01 c0       	push   0xc001fbe4
c0016812:	e8 b1 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	66 90                	xchg   ax,ax
c001681c:	90                   	nop
c001681d:	83 c4 0c             	add    esp,0xc
c0016820:	c3                   	ret    
c0016821:	8d 76 00             	lea    esi,[esi+0x0]

c0016824 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016824:	83 ec 0c             	sub    esp,0xc
c0016827:	83 ec 08             	sub    esp,0x8
c001682a:	68 ff ff 00 00       	push   0xffff
c001682f:	6a 01                	push   0x1
c0016831:	e8 4a ff ff ff       	call   c0016780 <__static_initialization_and_destruction_0(int, int)>
c0016836:	83 c4 10             	add    esp,0x10
c0016839:	83 c4 0c             	add    esp,0xc
c001683c:	c3                   	ret    

c001683d <Vm::inbv(unsigned short)>:
c001683d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016841:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016846:	75 06                	jne    c001684e <Vm::inbv(unsigned short)+0x11>
c0016848:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c001684d:	c3                   	ret    
c001684e:	ec                   	in     al,dx
c001684f:	c3                   	ret    

c0016850 <Vm::outbv(unsigned short, unsigned char)>:
c0016850:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016854:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016858:	66 81 fa fe fe       	cmp    dx,0xfefe
c001685d:	75 25                	jne    c0016884 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001685f:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016865:	8d 51 01             	lea    edx,[ecx+0x1]
c0016868:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c001686e:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016874:	83 fa 20             	cmp    edx,0x20
c0016877:	75 0c                	jne    c0016885 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016879:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c0016883:	c3                   	ret    
c0016884:	ee                   	out    dx,al
c0016885:	c3                   	ret    

c0016886 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016886:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001688b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016890:	c1 e0 04             	shl    eax,0x4
c0016893:	01 d0                	add    eax,edx
c0016895:	c3                   	ret    

c0016896 <Vm::getSegment(unsigned int)>:
c0016896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001689a:	c1 e8 10             	shr    eax,0x10
c001689d:	c3                   	ret    

c001689e <Vm::getOffset(unsigned int)>:
c001689e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168a2:	c3                   	ret    

c00168a3 <Vm::mainloop2()>:
c00168a3:	83 ec 18             	sub    esp,0x18
c00168a6:	fa                   	cli    
c00168a7:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168ad:	6a 02                	push   0x2
c00168af:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c00168b6:	e8 89 f5 ff ff       	call   c0015e44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00168bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00168c4:	52                   	push   edx
c00168c5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00168c9:	52                   	push   edx
c00168ca:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00168ce:	52                   	push   edx
c00168cf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00168d3:	50                   	push   eax
c00168d4:	e8 36 99 fe ff       	call   c000020f <goToVM86>
c00168d9:	83 c4 2c             	add    esp,0x2c
c00168dc:	c3                   	ret    

c00168dd <Vm::mainVm8086Loop(void*)>:
c00168dd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168e2:	48                   	dec    eax
c00168e3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168e8:	75 01                	jne    c00168eb <Vm::mainVm8086Loop(void*)+0xe>
c00168ea:	fb                   	sti    
c00168eb:	eb b6                	jmp    c00168a3 <Vm::mainloop2()>

c00168ed <Vm::mainloop3(unsigned long)>:
c00168ed:	83 ec 18             	sub    esp,0x18
c00168f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168f4:	fa                   	cli    
c00168f5:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168fb:	6a 02                	push   0x2
c00168fd:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0016904:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016909:	e8 36 f5 ff ff       	call   c0015e44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001690e:	83 c4 1c             	add    esp,0x1c
c0016911:	eb 90                	jmp    c00168a3 <Vm::mainloop2()>

c0016913 <Vm::initialise8086()>:
c0016913:	83 ec 0c             	sub    esp,0xc
c0016916:	68 80 00 00 00       	push   0x80
c001691b:	6a 00                	push   0x0
c001691d:	68 dd 68 01 c0       	push   0xc00168dd
c0016922:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016928:	e8 db f0 ff ff       	call   c0015a08 <Process::createThread(void (*)(void*), void*, int)>
c001692d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016934:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016939:	68 00 01 00 00       	push   0x100
c001693e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0016943:	6a 00                	push   0x0
c0016945:	6a 00                	push   0x0
c0016947:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001694d:	e8 c8 35 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016952:	83 c4 2c             	add    esp,0x2c
c0016955:	c3                   	ret    

c0016956 <Vm::finish8086()>:
c0016956:	53                   	push   ebx
c0016957:	83 ec 08             	sub    esp,0x8
c001695a:	fa                   	cli    
c001695b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016961:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016968:	75 15                	jne    c001697f <Vm::finish8086()+0x29>
c001696a:	e8 e9 f2 ff ff       	call   c0015c58 <schedule()>
c001696f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016974:	48                   	dec    eax
c0016975:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001697a:	75 de                	jne    c001695a <Vm::finish8086()+0x4>
c001697c:	fb                   	sti    
c001697d:	eb db                	jmp    c001695a <Vm::finish8086()+0x4>
c001697f:	83 ec 0c             	sub    esp,0xc
c0016982:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016988:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c001698e:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016995:	e8 d6 f7 ff ff       	call   c0016170 <unblockTask(ThreadControlBlock*)>
c001699a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001699f:	83 c4 10             	add    esp,0x10
c00169a2:	8d 50 ff             	lea    edx,[eax-0x1]
c00169a5:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00169ab:	85 d2                	test   edx,edx
c00169ad:	75 01                	jne    c00169b0 <Vm::finish8086()+0x5a>
c00169af:	fb                   	sti    
c00169b0:	89 d8                	mov    eax,ebx
c00169b2:	83 c4 08             	add    esp,0x8
c00169b5:	5b                   	pop    ebx
c00169b6:	c3                   	ret    

c00169b7 <Vm::getOutput8086(unsigned char*)>:
c00169b7:	57                   	push   edi
c00169b8:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00169be:	56                   	push   esi
c00169bf:	be 40 97 02 c0       	mov    esi,0xc0029740
c00169c4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00169c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169ca:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c00169cf:	5e                   	pop    esi
c00169d0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169da:	5f                   	pop    edi
c00169db:	c3                   	ret    

c00169dc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00169dc:	55                   	push   ebp
c00169dd:	57                   	push   edi
c00169de:	56                   	push   esi
c00169df:	53                   	push   ebx
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00169e7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00169eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00169ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00169f3:	fa                   	cli    
c00169f4:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169fa:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016a01:	75 15                	jne    c0016a18 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016a03:	e8 50 f2 ff ff       	call   c0015c58 <schedule()>
c0016a08:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a0d:	48                   	dec    eax
c0016a0e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a13:	75 de                	jne    c00169f3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a15:	fb                   	sti    
c0016a16:	eb db                	jmp    c00169f3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a18:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a1d:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a27:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a2b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a2f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a33:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016a37:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a3b:	0f b7 ff             	movzx  edi,di
c0016a3e:	0f b7 f6             	movzx  esi,si
c0016a41:	50                   	push   eax
c0016a42:	6a 20                	push   0x20
c0016a44:	6a 00                	push   0x0
c0016a46:	68 40 97 02 c0       	push   0xc0029740
c0016a4b:	e8 a0 9a fe ff       	call   c00004f0 <memset>
c0016a50:	5a                   	pop    edx
c0016a51:	59                   	pop    ecx
c0016a52:	57                   	push   edi
c0016a53:	56                   	push   esi
c0016a54:	e8 2d fe ff ff       	call   c0016886 <Vm::realToLinear(unsigned short, unsigned short)>
c0016a59:	83 c4 10             	add    esp,0x10
c0016a5c:	89 c7                	mov    edi,eax
c0016a5e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016a62:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016a66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a68:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a6d:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016a74:	48                   	dec    eax
c0016a75:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a7a:	75 01                	jne    c0016a7d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016a7c:	fb                   	sti    
c0016a7d:	83 ec 0c             	sub    esp,0xc
c0016a80:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a86:	e8 e5 f6 ff ff       	call   c0016170 <unblockTask(ThreadControlBlock*)>
c0016a8b:	83 c4 1c             	add    esp,0x1c
c0016a8e:	b0 01                	mov    al,0x1
c0016a90:	5b                   	pop    ebx
c0016a91:	5e                   	pop    esi
c0016a92:	5f                   	pop    edi
c0016a93:	5d                   	pop    ebp
c0016a94:	c3                   	ret    

c0016a95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016a95:	55                   	push   ebp
c0016a96:	57                   	push   edi
c0016a97:	56                   	push   esi
c0016a98:	53                   	push   ebx
c0016a99:	83 ec 34             	sub    esp,0x34
c0016a9c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016aa0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016aa4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016aa8:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016aac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ab0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ab4:	68 68 25 02 c0       	push   0xc0022568
c0016ab9:	e8 87 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016abe:	83 c4 10             	add    esp,0x10
c0016ac1:	fa                   	cli    
c0016ac2:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016ac8:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016ace:	84 db                	test   bl,bl
c0016ad0:	75 15                	jne    c0016ae7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016ad2:	e8 81 f1 ff ff       	call   c0015c58 <schedule()>
c0016ad7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016adc:	48                   	dec    eax
c0016add:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016ae2:	75 dd                	jne    c0016ac1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ae4:	fb                   	sti    
c0016ae5:	eb da                	jmp    c0016ac1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ae7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016aeb:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016af0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016afa:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016afe:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016b02:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016b06:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016b0a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016b0e:	50                   	push   eax
c0016b0f:	6a 20                	push   0x20
c0016b11:	6a 00                	push   0x0
c0016b13:	68 40 97 02 c0       	push   0xc0029740
c0016b18:	e8 d3 99 fe ff       	call   c00004f0 <memset>
c0016b1d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016b24:	e8 8d 0f ff ff       	call   c0007ab6 <malloc>
c0016b29:	83 c4 0c             	add    esp,0xc
c0016b2c:	89 c5                	mov    ebp,eax
c0016b2e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016b34:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b38:	50                   	push   eax
c0016b39:	e8 0a 4d ff ff       	call   c000b848 <File::File(char const*, Process*)>
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	85 ed                	test   ebp,ebp
c0016b43:	75 0a                	jne    c0016b4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016b45:	83 ec 0c             	sub    esp,0xc
c0016b48:	68 8a 25 02 c0       	push   0xc002258a
c0016b4d:	eb 2b                	jmp    c0016b7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016b4f:	50                   	push   eax
c0016b50:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016b54:	50                   	push   eax
c0016b55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016b59:	50                   	push   eax
c0016b5a:	55                   	push   ebp
c0016b5b:	e8 b2 50 ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c0016b60:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016b64:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016b68:	83 c4 10             	add    esp,0x10
c0016b6b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016b70:	74 27                	je     c0016b99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016b72:	83 ec 0c             	sub    esp,0xc
c0016b75:	68 9e 25 02 c0       	push   0xc002259e
c0016b7a:	e8 1a a8 ff ff       	call   c0011399 <KePanic(char const*)>
c0016b7f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b84:	83 c4 10             	add    esp,0x10
c0016b87:	48                   	dec    eax
c0016b88:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b8d:	85 c0                	test   eax,eax
c0016b8f:	75 01                	jne    c0016b92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b91:	fb                   	sti    
c0016b92:	31 db                	xor    ebx,ebx
c0016b94:	e9 90 00 00 00       	jmp    c0016c29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b99:	51                   	push   ecx
c0016b9a:	51                   	push   ecx
c0016b9b:	6a 01                	push   0x1
c0016b9d:	55                   	push   ebp
c0016b9e:	e8 6d 4d ff ff       	call   c000b910 <File::open(FileOpenMode)>
c0016ba3:	83 c4 10             	add    esp,0x10
c0016ba6:	85 c0                	test   eax,eax
c0016ba8:	74 26                	je     c0016bd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016baa:	83 ec 0c             	sub    esp,0xc
c0016bad:	68 b7 25 02 c0       	push   0xc00225b7
c0016bb2:	e8 e2 a7 ff ff       	call   c0011399 <KePanic(char const*)>
c0016bb7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016bbc:	83 c4 10             	add    esp,0x10
c0016bbf:	48                   	dec    eax
c0016bc0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016bc5:	85 c0                	test   eax,eax
c0016bc7:	75 c9                	jne    c0016b92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016bc9:	fb                   	sti    
c0016bca:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016bce:	eb 59                	jmp    c0016c29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016bd0:	0f b7 ff             	movzx  edi,di
c0016bd3:	50                   	push   eax
c0016bd4:	0f b7 f6             	movzx  esi,si
c0016bd7:	50                   	push   eax
c0016bd8:	57                   	push   edi
c0016bd9:	56                   	push   esi
c0016bda:	e8 a7 fc ff ff       	call   c0016886 <Vm::realToLinear(unsigned short, unsigned short)>
c0016bdf:	5a                   	pop    edx
c0016be0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016be3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016be7:	51                   	push   ecx
c0016be8:	50                   	push   eax
c0016be9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016bed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016bf1:	55                   	push   ebp
c0016bf2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016bf5:	83 c4 14             	add    esp,0x14
c0016bf8:	55                   	push   ebp
c0016bf9:	e8 70 4d ff ff       	call   c000b96e <File::close()>
c0016bfe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	48                   	dec    eax
c0016c07:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016c0e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c13:	85 c0                	test   eax,eax
c0016c15:	75 01                	jne    c0016c18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016c17:	fb                   	sti    
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016c21:	e8 4a f5 ff ff       	call   c0016170 <unblockTask(ThreadControlBlock*)>
c0016c26:	83 c4 10             	add    esp,0x10
c0016c29:	83 c4 2c             	add    esp,0x2c
c0016c2c:	88 d8                	mov    al,bl
c0016c2e:	5b                   	pop    ebx
c0016c2f:	5e                   	pop    esi
c0016c30:	5f                   	pop    edi
c0016c31:	5d                   	pop    ebp
c0016c32:	c3                   	ret    

c0016c33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016c33:	57                   	push   edi
c0016c34:	56                   	push   esi
c0016c35:	53                   	push   ebx
c0016c36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c3e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016c42:	83 e8 06             	sub    eax,0x6
c0016c45:	0f b7 c0             	movzx  eax,ax
c0016c48:	50                   	push   eax
c0016c49:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016c4e:	50                   	push   eax
c0016c4f:	e8 32 fc ff ff       	call   c0016886 <Vm::realToLinear(unsigned short, unsigned short)>
c0016c54:	5a                   	pop    edx
c0016c55:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016c58:	59                   	pop    ecx
c0016c59:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016c5c:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016c5f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016c65:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016c68:	8d 56 02             	lea    edx,[esi+0x2]
c0016c6b:	66 89 10             	mov    WORD PTR [eax],dx
c0016c6e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016c72:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016c76:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c79:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016c7d:	0f b6 f1             	movzx  esi,cl
c0016c80:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c84:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c8a:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016c8e:	0f b6 d5             	movzx  edx,ch
c0016c91:	74 0a                	je     c0016c9d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016c93:	c1 e2 08             	shl    edx,0x8
c0016c96:	09 f2                	or     edx,esi
c0016c98:	80 ce 02             	or     dh,0x2
c0016c9b:	eb 08                	jmp    c0016ca5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016c9d:	c1 e2 08             	shl    edx,0x8
c0016ca0:	09 f2                	or     edx,esi
c0016ca2:	80 e6 fd             	and    dh,0xfd
c0016ca5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ca9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cae:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016cb2:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016cba:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016cbd:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016cc5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016cc8:	5b                   	pop    ebx
c0016cc9:	5e                   	pop    esi
c0016cca:	5f                   	pop    edi
c0016ccb:	c3                   	ret    

c0016ccc <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016ccc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cd1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cd6:	c1 e0 04             	shl    eax,0x4
c0016cd9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016cdc:	c3                   	ret    

c0016cdd <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016cdd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ce2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ce7:	c1 e0 04             	shl    eax,0x4
c0016cea:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016cee:	c3                   	ret    

c0016cef <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016cef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cf4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cf9:	c1 e0 04             	shl    eax,0x4
c0016cfc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016cff:	c3                   	ret    

c0016d00 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016d00:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d05:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d0a:	c1 e0 04             	shl    eax,0x4
c0016d0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d11:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016d14:	c3                   	ret    

c0016d15 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016d15:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d1a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d1f:	c1 e0 04             	shl    eax,0x4
c0016d22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d26:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016d2a:	c3                   	ret    

c0016d2b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016d2b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d30:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d35:	c1 e0 04             	shl    eax,0x4
c0016d38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d3c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016d3f:	c3                   	ret    

c0016d40 <Vm::faultHandler(regs*)>:
c0016d40:	55                   	push   ebp
c0016d41:	57                   	push   edi
c0016d42:	56                   	push   esi
c0016d43:	53                   	push   ebx
c0016d44:	83 ec 2c             	sub    esp,0x2c
c0016d47:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d4b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016d4e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016d52:	0f b7 f8             	movzx  edi,ax
c0016d55:	52                   	push   edx
c0016d56:	0f b7 c0             	movzx  eax,ax
c0016d59:	50                   	push   eax
c0016d5a:	e8 27 fb ff ff       	call   c0016886 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d5f:	5a                   	pop    edx
c0016d60:	59                   	pop    ecx
c0016d61:	89 c1                	mov    ecx,eax
c0016d63:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d6a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d73:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016d76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d7a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016d7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d8b:	e8 f6 fa ff ff       	call   c0016886 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d90:	5e                   	pop    esi
c0016d91:	be 06 00 00 00       	mov    esi,0x6
c0016d96:	5d                   	pop    ebp
c0016d97:	31 ed                	xor    ebp,ebp
c0016d99:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016d9e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016da1:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016da7:	0f 84 74 02 00 00    	je     c0017021 <Vm::faultHandler(regs*)+0x2e1>
c0016dad:	0f 87 94 00 00 00    	ja     c0016e47 <Vm::faultHandler(regs*)+0x107>
c0016db3:	83 fa 66             	cmp    edx,0x66
c0016db6:	0f 84 e2 01 00 00    	je     c0016f9e <Vm::faultHandler(regs*)+0x25e>
c0016dbc:	77 47                	ja     c0016e05 <Vm::faultHandler(regs*)+0xc5>
c0016dbe:	83 fa 36             	cmp    edx,0x36
c0016dc1:	0f 84 ca 01 00 00    	je     c0016f91 <Vm::faultHandler(regs*)+0x251>
c0016dc7:	77 1a                	ja     c0016de3 <Vm::faultHandler(regs*)+0xa3>
c0016dc9:	83 fa 26             	cmp    edx,0x26
c0016dcc:	0f 84 98 01 00 00    	je     c0016f6a <Vm::faultHandler(regs*)+0x22a>
c0016dd2:	83 fa 2e             	cmp    edx,0x2e
c0016dd5:	0f 85 21 06 00 00    	jne    c00173fc <Vm::faultHandler(regs*)+0x6bc>
c0016ddb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dde:	31 f6                	xor    esi,esi
c0016de0:	41                   	inc    ecx
c0016de1:	eb bb                	jmp    c0016d9e <Vm::faultHandler(regs*)+0x5e>
c0016de3:	83 fa 64             	cmp    edx,0x64
c0016de6:	0f 84 8b 01 00 00    	je     c0016f77 <Vm::faultHandler(regs*)+0x237>
c0016dec:	0f 87 92 01 00 00    	ja     c0016f84 <Vm::faultHandler(regs*)+0x244>
c0016df2:	83 fa 3e             	cmp    edx,0x3e
c0016df5:	0f 85 01 06 00 00    	jne    c00173fc <Vm::faultHandler(regs*)+0x6bc>
c0016dfb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dfe:	be 01 00 00 00       	mov    esi,0x1
c0016e03:	eb db                	jmp    c0016de0 <Vm::faultHandler(regs*)+0xa0>
c0016e05:	83 fa 6d             	cmp    edx,0x6d
c0016e08:	0f 84 34 03 00 00    	je     c0017142 <Vm::faultHandler(regs*)+0x402>
c0016e0e:	77 17                	ja     c0016e27 <Vm::faultHandler(regs*)+0xe7>
c0016e10:	83 fa 67             	cmp    edx,0x67
c0016e13:	0f 84 92 01 00 00    	je     c0016fab <Vm::faultHandler(regs*)+0x26b>
c0016e19:	83 fa 6c             	cmp    edx,0x6c
c0016e1c:	0f 84 b1 02 00 00    	je     c00170d3 <Vm::faultHandler(regs*)+0x393>
c0016e22:	e9 d5 05 00 00       	jmp    c00173fc <Vm::faultHandler(regs*)+0x6bc>
c0016e27:	83 fa 6f             	cmp    edx,0x6f
c0016e2a:	0f 84 3d 04 00 00    	je     c001726d <Vm::faultHandler(regs*)+0x52d>
c0016e30:	0f 82 9f 03 00 00    	jb     c00171d5 <Vm::faultHandler(regs*)+0x495>
c0016e36:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016e3c:	0f 84 76 01 00 00    	je     c0016fb8 <Vm::faultHandler(regs*)+0x278>
c0016e42:	e9 b5 05 00 00       	jmp    c00173fc <Vm::faultHandler(regs*)+0x6bc>
c0016e47:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016e4d:	0f 84 51 05 00 00    	je     c00173a4 <Vm::faultHandler(regs*)+0x664>
c0016e53:	0f 87 a9 00 00 00    	ja     c0016f02 <Vm::faultHandler(regs*)+0x1c2>
c0016e59:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016e5f:	0f 84 d0 04 00 00    	je     c0017335 <Vm::faultHandler(regs*)+0x5f5>
c0016e65:	77 78                	ja     c0016edf <Vm::faultHandler(regs*)+0x19f>
c0016e67:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016e6d:	0f 84 0e 02 00 00    	je     c0017081 <Vm::faultHandler(regs*)+0x341>
c0016e73:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016e79:	0f 85 7d 05 00 00    	jne    c00173fc <Vm::faultHandler(regs*)+0x6bc>
c0016e7f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016e83:	89 d1                	mov    ecx,edx
c0016e85:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016e88:	c1 e1 08             	shl    ecx,0x8
c0016e8b:	09 ca                	or     edx,ecx
c0016e8d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016e90:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016e94:	89 d1                	mov    ecx,edx
c0016e96:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016e9a:	c1 e1 08             	shl    ecx,0x8
c0016e9d:	09 ca                	or     edx,ecx
c0016e9f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016ea2:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016ea6:	89 d1                	mov    ecx,edx
c0016ea8:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016eac:	c1 e1 08             	shl    ecx,0x8
c0016eaf:	09 ca                	or     edx,ecx
c0016eb1:	81 ca 00 02 02 00    	or     edx,0x20200
c0016eb7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016eba:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016ebe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ec4:	d1 e8                	shr    eax,1
c0016ec6:	83 e0 01             	and    eax,0x1
c0016ec9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ecc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ecf:	83 c0 06             	add    eax,0x6
c0016ed2:	25 ff ff 00 00       	and    eax,0xffff
c0016ed7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016eda:	e9 19 05 00 00       	jmp    c00173f8 <Vm::faultHandler(regs*)+0x6b8>
c0016edf:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016ee5:	0f 84 8f 04 00 00    	je     c001737a <Vm::faultHandler(regs*)+0x63a>
c0016eeb:	0f 82 60 04 00 00    	jb     c0017351 <Vm::faultHandler(regs*)+0x611>
c0016ef1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016ef7:	0f 84 94 04 00 00    	je     c0017391 <Vm::faultHandler(regs*)+0x651>
c0016efd:	e9 fa 04 00 00       	jmp    c00173fc <Vm::faultHandler(regs*)+0x6bc>
c0016f02:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016f08:	0f 84 d7 04 00 00    	je     c00173e5 <Vm::faultHandler(regs*)+0x6a5>
c0016f0e:	77 2e                	ja     c0016f3e <Vm::faultHandler(regs*)+0x1fe>
c0016f10:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016f16:	0f 84 a4 04 00 00    	je     c00173c0 <Vm::faultHandler(regs*)+0x680>
c0016f1c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016f22:	0f 85 d4 04 00 00    	jne    c00173fc <Vm::faultHandler(regs*)+0x6bc>
c0016f28:	50                   	push   eax
c0016f29:	50                   	push   eax
c0016f2a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016f2e:	50                   	push   eax
c0016f2f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f33:	50                   	push   eax
c0016f34:	e8 17 f9 ff ff       	call   c0016850 <Vm::outbv(unsigned short, unsigned char)>
c0016f39:	e9 9f 04 00 00       	jmp    c00173dd <Vm::faultHandler(regs*)+0x69d>
c0016f3e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016f44:	0f 84 6d 01 00 00    	je     c00170b7 <Vm::faultHandler(regs*)+0x377>
c0016f4a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016f50:	0f 84 6f 01 00 00    	je     c00170c5 <Vm::faultHandler(regs*)+0x385>
c0016f56:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016f5c:	0f 85 9a 04 00 00    	jne    c00173fc <Vm::faultHandler(regs*)+0x6bc>
c0016f62:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f65:	e9 76 fe ff ff       	jmp    c0016de0 <Vm::faultHandler(regs*)+0xa0>
c0016f6a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f6d:	be 02 00 00 00       	mov    esi,0x2
c0016f72:	e9 69 fe ff ff       	jmp    c0016de0 <Vm::faultHandler(regs*)+0xa0>
c0016f77:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f7a:	be 03 00 00 00       	mov    esi,0x3
c0016f7f:	e9 5c fe ff ff       	jmp    c0016de0 <Vm::faultHandler(regs*)+0xa0>
c0016f84:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f87:	be 04 00 00 00       	mov    esi,0x4
c0016f8c:	e9 4f fe ff ff       	jmp    c0016de0 <Vm::faultHandler(regs*)+0xa0>
c0016f91:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f94:	be 05 00 00 00       	mov    esi,0x5
c0016f99:	e9 42 fe ff ff       	jmp    c0016de0 <Vm::faultHandler(regs*)+0xa0>
c0016f9e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fa1:	bd 01 00 00 00       	mov    ebp,0x1
c0016fa6:	e9 35 fe ff ff       	jmp    c0016de0 <Vm::faultHandler(regs*)+0xa0>
c0016fab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fae:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016fb3:	e9 28 fe ff ff       	jmp    c0016de0 <Vm::faultHandler(regs*)+0xa0>
c0016fb8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016fbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016fbf:	83 e5 01             	and    ebp,0x1
c0016fc2:	74 30                	je     c0016ff4 <Vm::faultHandler(regs*)+0x2b4>
c0016fc4:	83 e9 04             	sub    ecx,0x4
c0016fc7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016fcd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016fd3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016fd6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016fd9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016fdf:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016fe3:	0f 84 0c 04 00 00    	je     c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c0016fe9:	80 ce 02             	or     dh,0x2
c0016fec:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016fef:	e9 01 04 00 00       	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c0016ff4:	83 e9 02             	sub    ecx,0x2
c0016ff7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016ffd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017000:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017004:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001700a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001700e:	74 05                	je     c0017015 <Vm::faultHandler(regs*)+0x2d5>
c0017010:	80 ce 02             	or     dh,0x2
c0017013:	eb 03                	jmp    c0017018 <Vm::faultHandler(regs*)+0x2d8>
c0017015:	80 e6 fd             	and    dh,0xfd
c0017018:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001701c:	e9 d4 03 00 00       	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c0017021:	83 e5 01             	and    ebp,0x1
c0017024:	74 2a                	je     c0017050 <Vm::faultHandler(regs*)+0x310>
c0017026:	8b 10                	mov    edx,DWORD PTR [eax]
c0017028:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001702e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017034:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017037:	8b 00                	mov    eax,DWORD PTR [eax]
c0017039:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001703f:	c1 e8 09             	shr    eax,0x9
c0017042:	83 e0 01             	and    eax,0x1
c0017045:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017048:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001704b:	83 c0 04             	add    eax,0x4
c001704e:	eb 24                	jmp    c0017074 <Vm::faultHandler(regs*)+0x334>
c0017050:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017053:	81 ca 00 02 02 00    	or     edx,0x20200
c0017059:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001705c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001705f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017065:	c1 e8 09             	shr    eax,0x9
c0017068:	83 e0 01             	and    eax,0x1
c001706b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001706e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017071:	83 c0 02             	add    eax,0x2
c0017074:	25 ff ff 00 00       	and    eax,0xffff
c0017079:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001707c:	e9 74 03 00 00       	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c0017081:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017085:	3d ee 00 00 00       	cmp    eax,0xee
c001708a:	75 10                	jne    c001709c <Vm::faultHandler(regs*)+0x35c>
c001708c:	83 ec 0c             	sub    esp,0xc
c001708f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017092:	e8 56 f8 ff ff       	call   c00168ed <Vm::mainloop3(unsigned long)>
c0017097:	e9 44 03 00 00       	jmp    c00173e0 <Vm::faultHandler(regs*)+0x6a0>
c001709c:	83 ec 0c             	sub    esp,0xc
c001709f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170a7:	51                   	push   ecx
c00170a8:	50                   	push   eax
c00170a9:	53                   	push   ebx
c00170aa:	e8 84 fb ff ff       	call   c0016c33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00170af:	83 c4 20             	add    esp,0x20
c00170b2:	e9 41 03 00 00       	jmp    c00173f8 <Vm::faultHandler(regs*)+0x6b8>
c00170b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170bc:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170c0:	e9 30 03 00 00       	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c00170c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170ca:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00170ce:	e9 22 03 00 00       	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c00170d3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00170d6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170db:	74 2b                	je     c0017108 <Vm::faultHandler(regs*)+0x3c8>
c00170dd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00170e4:	76 22                	jbe    c0017108 <Vm::faultHandler(regs*)+0x3c8>
c00170e6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170ea:	50                   	push   eax
c00170eb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170ef:	50                   	push   eax
c00170f0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170f4:	50                   	push   eax
c00170f5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170f9:	50                   	push   eax
c00170fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170fe:	50                   	push   eax
c00170ff:	6a 6c                	push   0x6c
c0017101:	6a 6c                	push   0x6c
c0017103:	e9 bd 01 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x585>
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001710f:	0f b7 f6             	movzx  esi,si
c0017112:	50                   	push   eax
c0017113:	e8 25 f7 ff ff       	call   c001683d <Vm::inbv(unsigned short)>
c0017118:	83 c4 0c             	add    esp,0xc
c001711b:	0f b6 c0             	movzx  eax,al
c001711e:	50                   	push   eax
c001711f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017123:	50                   	push   eax
c0017124:	56                   	push   esi
c0017125:	e8 d6 fb ff ff       	call   c0016d00 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001712a:	83 c4 10             	add    esp,0x10
c001712d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017130:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017134:	74 03                	je     c0017139 <Vm::faultHandler(regs*)+0x3f9>
c0017136:	48                   	dec    eax
c0017137:	eb 01                	jmp    c001713a <Vm::faultHandler(regs*)+0x3fa>
c0017139:	40                   	inc    eax
c001713a:	0f b7 c0             	movzx  eax,ax
c001713d:	e9 8b 00 00 00       	jmp    c00171cd <Vm::faultHandler(regs*)+0x48d>
c0017142:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017145:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017148:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001714d:	74 29                	je     c0017178 <Vm::faultHandler(regs*)+0x438>
c001714f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017154:	76 22                	jbe    c0017178 <Vm::faultHandler(regs*)+0x438>
c0017156:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001715a:	50                   	push   eax
c001715b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001715f:	50                   	push   eax
c0017160:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017164:	50                   	push   eax
c0017165:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017169:	50                   	push   eax
c001716a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001716e:	50                   	push   eax
c001716f:	6a 6d                	push   0x6d
c0017171:	6a 6d                	push   0x6d
c0017173:	e9 4d 01 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x585>
c0017178:	0f b7 c8             	movzx  ecx,ax
c001717b:	0f b7 f6             	movzx  esi,si
c001717e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017181:	83 e5 01             	and    ebp,0x1
c0017184:	74 20                	je     c00171a6 <Vm::faultHandler(regs*)+0x466>
c0017186:	ed                   	in     eax,dx
c0017187:	55                   	push   ebp
c0017188:	50                   	push   eax
c0017189:	51                   	push   ecx
c001718a:	56                   	push   esi
c001718b:	e8 9b fb ff ff       	call   c0016d2b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017190:	83 c4 10             	add    esp,0x10
c0017193:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017196:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001719a:	74 05                	je     c00171a1 <Vm::faultHandler(regs*)+0x461>
c001719c:	83 e8 04             	sub    eax,0x4
c001719f:	eb 27                	jmp    c00171c8 <Vm::faultHandler(regs*)+0x488>
c00171a1:	83 c0 04             	add    eax,0x4
c00171a4:	eb 22                	jmp    c00171c8 <Vm::faultHandler(regs*)+0x488>
c00171a6:	66 ed                	in     ax,dx
c00171a8:	0f b7 c0             	movzx  eax,ax
c00171ab:	57                   	push   edi
c00171ac:	50                   	push   eax
c00171ad:	51                   	push   ecx
c00171ae:	56                   	push   esi
c00171af:	e8 61 fb ff ff       	call   c0016d15 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171ba:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171be:	74 05                	je     c00171c5 <Vm::faultHandler(regs*)+0x485>
c00171c0:	83 e8 02             	sub    eax,0x2
c00171c3:	eb 03                	jmp    c00171c8 <Vm::faultHandler(regs*)+0x488>
c00171c5:	83 c0 02             	add    eax,0x2
c00171c8:	25 ff ff 00 00       	and    eax,0xffff
c00171cd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00171d0:	e9 20 02 00 00       	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c00171d5:	8d 46 ff             	lea    eax,[esi-0x1]
c00171d8:	0f b6 f0             	movzx  esi,al
c00171db:	83 fe 05             	cmp    esi,0x5
c00171de:	77 23                	ja     c0017203 <Vm::faultHandler(regs*)+0x4c3>
c00171e0:	ff 24 b5 2c 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9d4]
c00171e7:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00171ec:	eb 15                	jmp    c0017203 <Vm::faultHandler(regs*)+0x4c3>
c00171ee:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00171f2:	eb 0f                	jmp    c0017203 <Vm::faultHandler(regs*)+0x4c3>
c00171f4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00171f8:	eb 09                	jmp    c0017203 <Vm::faultHandler(regs*)+0x4c3>
c00171fa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00171fe:	eb 03                	jmp    c0017203 <Vm::faultHandler(regs*)+0x4c3>
c0017200:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017203:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017206:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001720b:	74 29                	je     c0017236 <Vm::faultHandler(regs*)+0x4f6>
c001720d:	3d ff ff 00 00       	cmp    eax,0xffff
c0017212:	76 22                	jbe    c0017236 <Vm::faultHandler(regs*)+0x4f6>
c0017214:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017218:	50                   	push   eax
c0017219:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001721d:	50                   	push   eax
c001721e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017222:	50                   	push   eax
c0017223:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017227:	50                   	push   eax
c0017228:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001722c:	50                   	push   eax
c001722d:	6a 6e                	push   0x6e
c001722f:	6a 6e                	push   0x6e
c0017231:	e9 8f 00 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x585>
c0017236:	0f b7 c0             	movzx  eax,ax
c0017239:	52                   	push   edx
c001723a:	52                   	push   edx
c001723b:	50                   	push   eax
c001723c:	57                   	push   edi
c001723d:	e8 8a fa ff ff       	call   c0016ccc <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017242:	59                   	pop    ecx
c0017243:	0f b6 c0             	movzx  eax,al
c0017246:	5e                   	pop    esi
c0017247:	50                   	push   eax
c0017248:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001724c:	50                   	push   eax
c001724d:	e8 fe f5 ff ff       	call   c0016850 <Vm::outbv(unsigned short, unsigned char)>
c0017252:	83 c4 10             	add    esp,0x10
c0017255:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017258:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001725c:	74 03                	je     c0017261 <Vm::faultHandler(regs*)+0x521>
c001725e:	48                   	dec    eax
c001725f:	eb 01                	jmp    c0017262 <Vm::faultHandler(regs*)+0x522>
c0017261:	40                   	inc    eax
c0017262:	0f b7 c0             	movzx  eax,ax
c0017265:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017268:	e9 88 01 00 00       	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c001726d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017270:	0f b6 f0             	movzx  esi,al
c0017273:	83 fe 05             	cmp    esi,0x5
c0017276:	77 1e                	ja     c0017296 <Vm::faultHandler(regs*)+0x556>
c0017278:	ff 24 b5 44 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9bc]
c001727f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017283:	eb 11                	jmp    c0017296 <Vm::faultHandler(regs*)+0x556>
c0017285:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017288:	eb 0c                	jmp    c0017296 <Vm::faultHandler(regs*)+0x556>
c001728a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001728d:	eb 07                	jmp    c0017296 <Vm::faultHandler(regs*)+0x556>
c001728f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017292:	eb 02                	jmp    c0017296 <Vm::faultHandler(regs*)+0x556>
c0017294:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017296:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017299:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001729e:	74 37                	je     c00172d7 <Vm::faultHandler(regs*)+0x597>
c00172a0:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00172a6:	76 2f                	jbe    c00172d7 <Vm::faultHandler(regs*)+0x597>
c00172a8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172ac:	50                   	push   eax
c00172ad:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172b1:	50                   	push   eax
c00172b2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172b6:	50                   	push   eax
c00172b7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172bb:	50                   	push   eax
c00172bc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172c0:	50                   	push   eax
c00172c1:	6a 6f                	push   0x6f
c00172c3:	6a 6f                	push   0x6f
c00172c5:	68 d0 25 02 c0       	push   0xc00225d0
c00172ca:	e8 76 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00172cf:	83 c4 20             	add    esp,0x20
c00172d2:	e9 83 01 00 00       	jmp    c001745a <Vm::faultHandler(regs*)+0x71a>
c00172d7:	0f b7 d7             	movzx  edx,di
c00172da:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00172dd:	0f b7 c6             	movzx  eax,si
c00172e0:	81 e1 00 04 00 00    	and    ecx,0x400
c00172e6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00172e9:	83 e5 01             	and    ebp,0x1
c00172ec:	74 1d                	je     c001730b <Vm::faultHandler(regs*)+0x5cb>
c00172ee:	55                   	push   ebp
c00172ef:	55                   	push   ebp
c00172f0:	50                   	push   eax
c00172f1:	52                   	push   edx
c00172f2:	e8 f8 f9 ff ff       	call   c0016cef <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00172f7:	83 c4 10             	add    esp,0x10
c00172fa:	89 fa                	mov    edx,edi
c00172fc:	ef                   	out    dx,eax
c00172fd:	85 c9                	test   ecx,ecx
c00172ff:	74 05                	je     c0017306 <Vm::faultHandler(regs*)+0x5c6>
c0017301:	83 ee 04             	sub    esi,0x4
c0017304:	eb 21                	jmp    c0017327 <Vm::faultHandler(regs*)+0x5e7>
c0017306:	83 c6 04             	add    esi,0x4
c0017309:	eb 1c                	jmp    c0017327 <Vm::faultHandler(regs*)+0x5e7>
c001730b:	55                   	push   ebp
c001730c:	55                   	push   ebp
c001730d:	50                   	push   eax
c001730e:	52                   	push   edx
c001730f:	e8 c9 f9 ff ff       	call   c0016cdd <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017314:	83 c4 10             	add    esp,0x10
c0017317:	89 fa                	mov    edx,edi
c0017319:	66 ef                	out    dx,ax
c001731b:	85 c9                	test   ecx,ecx
c001731d:	74 05                	je     c0017324 <Vm::faultHandler(regs*)+0x5e4>
c001731f:	83 ee 02             	sub    esi,0x2
c0017322:	eb 03                	jmp    c0017327 <Vm::faultHandler(regs*)+0x5e7>
c0017324:	83 c6 02             	add    esi,0x2
c0017327:	81 e6 ff ff 00 00    	and    esi,0xffff
c001732d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017330:	e9 c0 00 00 00       	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c0017335:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017343:	50                   	push   eax
c0017344:	e8 f4 f4 ff ff       	call   c001683d <Vm::inbv(unsigned short)>
c0017349:	0f b6 c0             	movzx  eax,al
c001734c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001734f:	eb 3a                	jmp    c001738b <Vm::faultHandler(regs*)+0x64b>
c0017351:	83 e5 01             	and    ebp,0x1
c0017354:	74 07                	je     c001735d <Vm::faultHandler(regs*)+0x61d>
c0017356:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001735a:	ed                   	in     eax,dx
c001735b:	eb 14                	jmp    c0017371 <Vm::faultHandler(regs*)+0x631>
c001735d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017360:	66 31 f6             	xor    si,si
c0017363:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017366:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001736a:	66 ed                	in     ax,dx
c001736c:	0f b7 c0             	movzx  eax,ax
c001736f:	09 f0                	or     eax,esi
c0017371:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017374:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017378:	eb 7e                	jmp    c00173f8 <Vm::faultHandler(regs*)+0x6b8>
c001737a:	52                   	push   edx
c001737b:	52                   	push   edx
c001737c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017380:	50                   	push   eax
c0017381:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017385:	50                   	push   eax
c0017386:	e8 c5 f4 ff ff       	call   c0016850 <Vm::outbv(unsigned short, unsigned char)>
c001738b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001738f:	eb 4f                	jmp    c00173e0 <Vm::faultHandler(regs*)+0x6a0>
c0017391:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017394:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017398:	83 e5 01             	and    ebp,0x1
c001739b:	74 03                	je     c00173a0 <Vm::faultHandler(regs*)+0x660>
c001739d:	ef                   	out    dx,eax
c001739e:	eb d4                	jmp    c0017374 <Vm::faultHandler(regs*)+0x634>
c00173a0:	66 ef                	out    dx,ax
c00173a2:	eb d0                	jmp    c0017374 <Vm::faultHandler(regs*)+0x634>
c00173a4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00173ab:	83 ec 0c             	sub    esp,0xc
c00173ae:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173b2:	50                   	push   eax
c00173b3:	e8 85 f4 ff ff       	call   c001683d <Vm::inbv(unsigned short)>
c00173b8:	0f b6 c0             	movzx  eax,al
c00173bb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00173be:	eb 1d                	jmp    c00173dd <Vm::faultHandler(regs*)+0x69d>
c00173c0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00173c3:	83 e5 01             	and    ebp,0x1
c00173c6:	74 03                	je     c00173cb <Vm::faultHandler(regs*)+0x68b>
c00173c8:	ed                   	in     eax,dx
c00173c9:	eb 0d                	jmp    c00173d8 <Vm::faultHandler(regs*)+0x698>
c00173cb:	66 ed                	in     ax,dx
c00173cd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00173d0:	0f b7 c0             	movzx  eax,ax
c00173d3:	66 31 d2             	xor    dx,dx
c00173d6:	09 d0                	or     eax,edx
c00173d8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00173db:	eb 18                	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c00173dd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173e0:	83 c4 10             	add    esp,0x10
c00173e3:	eb 13                	jmp    c00173f8 <Vm::faultHandler(regs*)+0x6b8>
c00173e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00173e8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00173eb:	83 e5 01             	and    ebp,0x1
c00173ee:	74 03                	je     c00173f3 <Vm::faultHandler(regs*)+0x6b3>
c00173f0:	ef                   	out    dx,eax
c00173f1:	eb 02                	jmp    c00173f5 <Vm::faultHandler(regs*)+0x6b5>
c00173f3:	66 ef                	out    dx,ax
c00173f5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173f8:	b0 01                	mov    al,0x1
c00173fa:	eb 60                	jmp    c001745c <Vm::faultHandler(regs*)+0x71c>
c00173fc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017400:	50                   	push   eax
c0017401:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017405:	50                   	push   eax
c0017406:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001740a:	50                   	push   eax
c001740b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001740f:	50                   	push   eax
c0017410:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017414:	50                   	push   eax
c0017415:	52                   	push   edx
c0017416:	52                   	push   edx
c0017417:	68 fd 25 02 c0       	push   0xc00225fd
c001741c:	e8 24 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017421:	83 c4 20             	add    esp,0x20
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	6a 60                	push   0x60
c0017429:	e8 0f f4 ff ff       	call   c001683d <Vm::inbv(unsigned short)>
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	0f b6 d0             	movzx  edx,al
c0017434:	83 fa 1c             	cmp    edx,0x1c
c0017437:	74 05                	je     c001743e <Vm::faultHandler(regs*)+0x6fe>
c0017439:	83 fa 5a             	cmp    edx,0x5a
c001743c:	75 e6                	jne    c0017424 <Vm::faultHandler(regs*)+0x6e4>
c001743e:	0f b6 c0             	movzx  eax,al
c0017441:	83 f8 1c             	cmp    eax,0x1c
c0017444:	74 05                	je     c001744b <Vm::faultHandler(regs*)+0x70b>
c0017446:	83 f8 5a             	cmp    eax,0x5a
c0017449:	75 0f                	jne    c001745a <Vm::faultHandler(regs*)+0x71a>
c001744b:	83 ec 0c             	sub    esp,0xc
c001744e:	6a 60                	push   0x60
c0017450:	e8 e8 f3 ff ff       	call   c001683d <Vm::inbv(unsigned short)>
c0017455:	83 c4 10             	add    esp,0x10
c0017458:	eb e4                	jmp    c001743e <Vm::faultHandler(regs*)+0x6fe>
c001745a:	31 c0                	xor    eax,eax
c001745c:	83 c4 2c             	add    esp,0x2c
c001745f:	5b                   	pop    ebx
c0017460:	5e                   	pop    esi
c0017461:	5f                   	pop    edi
c0017462:	5d                   	pop    ebp
c0017463:	c3                   	ret    

c0017464 <noCopro(unsigned long)>:
c0017464:	c3                   	ret    

c0017465 <nmiHandler(regs*, void*)>:
c0017465:	83 ec 0c             	sub    esp,0xc
c0017468:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001746d:	83 ec 0c             	sub    esp,0xc
c0017470:	50                   	push   eax
c0017471:	e8 40 fe fe ff       	call   c00072b6 <Computer::handleNMI()>
c0017476:	83 c4 10             	add    esp,0x10
c0017479:	90                   	nop
c001747a:	83 c4 0c             	add    esp,0xc
c001747d:	c3                   	ret    

c001747e <doubleFault(regs*, void*)>:
c001747e:	55                   	push   ebp
c001747f:	89 e5                	mov    ebp,esp
c0017481:	83 ec 08             	sub    esp,0x8
c0017484:	83 ec 0c             	sub    esp,0xc
c0017487:	68 5c 26 02 c0       	push   0xc002265c
c001748c:	e8 08 9f ff ff       	call   c0011399 <KePanic(char const*)>
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	90                   	nop
c0017495:	c9                   	leave  
c0017496:	c3                   	ret    

c0017497 <displayDebugInfo(regs*)>:
c0017497:	83 ec 1c             	sub    esp,0x1c
c001749a:	0f 20 c0             	mov    eax,cr0
c001749d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174a1:	0f 20 d0             	mov    eax,cr2
c00174a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174a8:	0f 20 d8             	mov    eax,cr3
c00174ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174af:	0f 20 e0             	mov    eax,cr4
c00174b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00174b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174b9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00174bc:	83 ec 08             	sub    esp,0x8
c00174bf:	50                   	push   eax
c00174c0:	68 78 26 02 c0       	push   0xc0022678
c00174c5:	e8 7b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174ca:	83 c4 10             	add    esp,0x10
c00174cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00174d4:	83 ec 08             	sub    esp,0x8
c00174d7:	50                   	push   eax
c00174d8:	68 69 26 02 c0       	push   0xc0022669
c00174dd:	e8 63 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174e2:	83 c4 10             	add    esp,0x10
c00174e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174e9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00174ec:	83 ec 08             	sub    esp,0x8
c00174ef:	50                   	push   eax
c00174f0:	68 74 26 02 c0       	push   0xc0022674
c00174f5:	e8 4b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174fa:	83 c4 10             	add    esp,0x10
c00174fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017501:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017504:	83 ec 08             	sub    esp,0x8
c0017507:	50                   	push   eax
c0017508:	68 83 26 02 c0       	push   0xc0022683
c001750d:	e8 33 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017512:	83 c4 10             	add    esp,0x10
c0017515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017519:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001751c:	83 ec 08             	sub    esp,0x8
c001751f:	50                   	push   eax
c0017520:	68 8e 26 02 c0       	push   0xc002268e
c0017525:	e8 1b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001752a:	83 c4 10             	add    esp,0x10
c001752d:	83 ec 08             	sub    esp,0x8
c0017530:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017534:	68 99 26 02 c0       	push   0xc0022699
c0017539:	e8 07 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001753e:	83 c4 10             	add    esp,0x10
c0017541:	83 ec 08             	sub    esp,0x8
c0017544:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017548:	68 a4 26 02 c0       	push   0xc00226a4
c001754d:	e8 f3 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017559:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001755c:	c1 e0 05             	shl    eax,0x5
c001755f:	8d 90 20 36 02 c0    	lea    edx,[eax-0x3ffdc9e0]
c0017565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017569:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001756c:	83 ec 04             	sub    esp,0x4
c001756f:	52                   	push   edx
c0017570:	50                   	push   eax
c0017571:	68 af 26 02 c0       	push   0xc00226af
c0017576:	e8 ca 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001757b:	83 c4 10             	add    esp,0x10
c001757e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017583:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017589:	83 ec 0c             	sub    esp,0xc
c001758c:	50                   	push   eax
c001758d:	e8 c7 11 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017592:	83 c4 10             	add    esp,0x10
c0017595:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001759a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175a0:	83 ec 08             	sub    esp,0x8
c00175a3:	68 be 26 02 c0       	push   0xc00226be
c00175a8:	50                   	push   eax
c00175a9:	e8 f8 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175ae:	83 c4 10             	add    esp,0x10
c00175b1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175c0:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00175c3:	83 ec 08             	sub    esp,0x8
c00175c6:	52                   	push   edx
c00175c7:	50                   	push   eax
c00175c8:	e8 93 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175cd:	83 c4 10             	add    esp,0x10
c00175d0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175db:	83 ec 08             	sub    esp,0x8
c00175de:	68 cc 26 02 c0       	push   0xc00226cc
c00175e3:	50                   	push   eax
c00175e4:	e8 bd 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175f7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00175fc:	8b 12                	mov    edx,DWORD PTR [edx]
c00175fe:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017601:	83 c2 0c             	add    edx,0xc
c0017604:	83 ec 08             	sub    esp,0x8
c0017607:	52                   	push   edx
c0017608:	50                   	push   eax
c0017609:	e8 98 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001760e:	83 c4 10             	add    esp,0x10
c0017611:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017616:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001761c:	83 ec 08             	sub    esp,0x8
c001761f:	68 d5 26 02 c0       	push   0xc00226d5
c0017624:	50                   	push   eax
c0017625:	e8 7c 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001762a:	83 c4 10             	add    esp,0x10
c001762d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017632:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017638:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001763c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001763f:	83 ec 08             	sub    esp,0x8
c0017642:	52                   	push   edx
c0017643:	50                   	push   eax
c0017644:	e8 17 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017649:	83 c4 10             	add    esp,0x10
c001764c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017651:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017657:	83 ec 08             	sub    esp,0x8
c001765a:	68 dd 26 02 c0       	push   0xc00226dd
c001765f:	50                   	push   eax
c0017660:	e8 41 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017665:	83 c4 10             	add    esp,0x10
c0017668:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001766d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017673:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017677:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001767a:	83 ec 08             	sub    esp,0x8
c001767d:	52                   	push   edx
c001767e:	50                   	push   eax
c001767f:	e8 dc 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017684:	83 c4 10             	add    esp,0x10
c0017687:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001768c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017692:	83 ec 08             	sub    esp,0x8
c0017695:	68 e5 26 02 c0       	push   0xc00226e5
c001769a:	50                   	push   eax
c001769b:	e8 06 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176a0:	83 c4 10             	add    esp,0x10
c00176a3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176b2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00176b5:	83 ec 08             	sub    esp,0x8
c00176b8:	52                   	push   edx
c00176b9:	50                   	push   eax
c00176ba:	e8 a1 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176bf:	83 c4 10             	add    esp,0x10
c00176c2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176cd:	83 ec 08             	sub    esp,0x8
c00176d0:	68 ed 26 02 c0       	push   0xc00226ed
c00176d5:	50                   	push   eax
c00176d6:	e8 cb 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176db:	83 c4 10             	add    esp,0x10
c00176de:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176ed:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00176f0:	83 ec 08             	sub    esp,0x8
c00176f3:	52                   	push   edx
c00176f4:	50                   	push   eax
c00176f5:	e8 66 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017702:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017708:	83 ec 08             	sub    esp,0x8
c001770b:	68 f5 26 02 c0       	push   0xc00226f5
c0017710:	50                   	push   eax
c0017711:	e8 90 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017716:	83 c4 10             	add    esp,0x10
c0017719:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001771e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017724:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017728:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001772b:	83 ec 08             	sub    esp,0x8
c001772e:	52                   	push   edx
c001772f:	50                   	push   eax
c0017730:	e8 2b 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001773d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017743:	83 ec 08             	sub    esp,0x8
c0017746:	68 fd 26 02 c0       	push   0xc00226fd
c001774b:	50                   	push   eax
c001774c:	e8 55 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017751:	83 c4 10             	add    esp,0x10
c0017754:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017759:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001775f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017763:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017766:	83 ec 08             	sub    esp,0x8
c0017769:	52                   	push   edx
c001776a:	50                   	push   eax
c001776b:	e8 f0 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017770:	83 c4 10             	add    esp,0x10
c0017773:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017778:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001777e:	83 ec 08             	sub    esp,0x8
c0017781:	68 05 27 02 c0       	push   0xc0022705
c0017786:	50                   	push   eax
c0017787:	e8 1a 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001778c:	83 c4 10             	add    esp,0x10
c001778f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017794:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001779a:	83 ec 08             	sub    esp,0x8
c001779d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00177a1:	50                   	push   eax
c00177a2:	e8 b9 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177a7:	83 c4 10             	add    esp,0x10
c00177aa:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177b5:	83 ec 08             	sub    esp,0x8
c00177b8:	68 0e 27 02 c0       	push   0xc002270e
c00177bd:	50                   	push   eax
c00177be:	e8 e3 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177d1:	83 ec 08             	sub    esp,0x8
c00177d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00177d8:	50                   	push   eax
c00177d9:	e8 82 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177ec:	83 ec 08             	sub    esp,0x8
c00177ef:	68 16 27 02 c0       	push   0xc0022716
c00177f4:	50                   	push   eax
c00177f5:	e8 ac 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177fa:	83 c4 10             	add    esp,0x10
c00177fd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017802:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017808:	83 ec 08             	sub    esp,0x8
c001780b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001780f:	50                   	push   eax
c0017810:	e8 4b 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017815:	83 c4 10             	add    esp,0x10
c0017818:	fa                   	cli    
c0017819:	f4                   	hlt    
c001781a:	eb fe                	jmp    c001781a <displayDebugInfo(regs*)+0x383>

c001781c <HalSystemIdle()>:
c001781c:	56                   	push   esi
c001781d:	53                   	push   ebx
c001781e:	83 ec 14             	sub    esp,0x14
c0017821:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017826:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001782c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017832:	83 e0 04             	and    eax,0x4
c0017835:	0f b6 c0             	movzx  eax,al
c0017838:	85 c0                	test   eax,eax
c001783a:	0f 95 c0             	setne  al
c001783d:	0f b6 c0             	movzx  eax,al
c0017840:	85 c0                	test   eax,eax
c0017842:	74 4c                	je     c0017890 <HalSystemIdle()+0x74>
c0017844:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017849:	83 ec 08             	sub    esp,0x8
c001784c:	68 e1 00 00 00       	push   0xe1
c0017851:	50                   	push   eax
c0017852:	e8 69 f8 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017857:	83 c4 10             	add    esp,0x10
c001785a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001785e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017862:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017867:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001786b:	83 e2 02             	and    edx,0x2
c001786e:	89 d3                	mov    ebx,edx
c0017870:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017874:	83 e2 00             	and    edx,0x0
c0017877:	89 d6                	mov    esi,edx
c0017879:	56                   	push   esi
c001787a:	53                   	push   ebx
c001787b:	68 e1 00 00 00       	push   0xe1
c0017880:	50                   	push   eax
c0017881:	e8 66 f8 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017886:	83 c4 10             	add    esp,0x10
c0017889:	e8 06 89 fe ff       	call   c0000194 <doTPAUSE>
c001788e:	eb 01                	jmp    c0017891 <HalSystemIdle()+0x75>
c0017890:	f4                   	hlt    
c0017891:	90                   	nop
c0017892:	83 c4 14             	add    esp,0x14
c0017895:	5b                   	pop    ebx
c0017896:	5e                   	pop    esi
c0017897:	c3                   	ret    

c0017898 <displayProgramFault(char const*)>:
c0017898:	83 ec 0c             	sub    esp,0xc
c001789b:	83 ec 0c             	sub    esp,0xc
c001789e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178a2:	e8 9e 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178a7:	83 c4 10             	add    esp,0x10
c00178aa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178af:	8b 00                	mov    eax,DWORD PTR [eax]
c00178b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178ba:	85 c0                	test   eax,eax
c00178bc:	74 21                	je     c00178df <displayProgramFault(char const*)+0x47>
c00178be:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00178c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178ce:	6a 04                	push   0x4
c00178d0:	6a 0f                	push   0xf
c00178d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178d6:	50                   	push   eax
c00178d7:	e8 3c 12 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00178dc:	83 c4 10             	add    esp,0x10
c00178df:	90                   	nop
c00178e0:	83 c4 0c             	add    esp,0xc
c00178e3:	c3                   	ret    

c00178e4 <gpFault(regs*, void*)>:
c00178e4:	83 ec 1c             	sub    esp,0x1c
c00178e7:	c7 05 74 97 02 c0 40 6d 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016d40
c00178f1:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00178f6:	85 c0                	test   eax,eax
c00178f8:	74 1e                	je     c0017918 <gpFault(regs*, void*)+0x34>
c00178fa:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00178ff:	83 ec 0c             	sub    esp,0xc
c0017902:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017906:	ff d0                	call   eax
c0017908:	83 c4 10             	add    esp,0x10
c001790b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001790f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017914:	85 c0                	test   eax,eax
c0017916:	75 2e                	jne    c0017946 <gpFault(regs*, void*)+0x62>
c0017918:	83 ec 0c             	sub    esp,0xc
c001791b:	68 1e 27 02 c0       	push   0xc002271e
c0017920:	e8 73 ff ff ff       	call   c0017898 <displayProgramFault(char const*)>
c0017925:	83 c4 10             	add    esp,0x10
c0017928:	83 ec 0c             	sub    esp,0xc
c001792b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001792f:	e8 63 fb ff ff       	call   c0017497 <displayDebugInfo(regs*)>
c0017934:	83 c4 10             	add    esp,0x10
c0017937:	83 ec 0c             	sub    esp,0xc
c001793a:	6a 00                	push   0x0
c001793c:	e8 a3 ed ff ff       	call   c00166e4 <Thr::terminateFromIRQ(int)>
c0017941:	83 c4 10             	add    esp,0x10
c0017944:	eb 01                	jmp    c0017947 <gpFault(regs*, void*)+0x63>
c0017946:	90                   	nop
c0017947:	83 c4 1c             	add    esp,0x1c
c001794a:	c3                   	ret    

c001794b <pgFault(regs*, void*)>:
c001794b:	83 ec 1c             	sub    esp,0x1c
c001794e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017952:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017955:	0f 20 d0             	mov    eax,cr2
c0017958:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001795c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017960:	83 ec 04             	sub    esp,0x4
c0017963:	52                   	push   edx
c0017964:	50                   	push   eax
c0017965:	68 fc 27 02 c0       	push   0xc00227fc
c001796a:	e8 d6 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017977:	8b 00                	mov    eax,DWORD PTR [eax]
c0017979:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001797c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017982:	0f 20 d2             	mov    edx,cr2
c0017985:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001798d:	83 ec 08             	sub    esp,0x8
c0017990:	52                   	push   edx
c0017991:	50                   	push   eax
c0017992:	e8 f9 29 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017997:	83 c4 10             	add    esp,0x10
c001799a:	0f b6 c0             	movzx  eax,al
c001799d:	85 c0                	test   eax,eax
c001799f:	75 2e                	jne    c00179cf <pgFault(regs*, void*)+0x84>
c00179a1:	83 ec 0c             	sub    esp,0xc
c00179a4:	68 37 27 02 c0       	push   0xc0022737
c00179a9:	e8 ea fe ff ff       	call   c0017898 <displayProgramFault(char const*)>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	83 ec 0c             	sub    esp,0xc
c00179b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179b8:	e8 da fa ff ff       	call   c0017497 <displayDebugInfo(regs*)>
c00179bd:	83 c4 10             	add    esp,0x10
c00179c0:	83 ec 0c             	sub    esp,0xc
c00179c3:	6a 00                	push   0x0
c00179c5:	e8 1a ed ff ff       	call   c00166e4 <Thr::terminateFromIRQ(int)>
c00179ca:	83 c4 10             	add    esp,0x10
c00179cd:	eb 01                	jmp    c00179d0 <pgFault(regs*, void*)+0x85>
c00179cf:	90                   	nop
c00179d0:	83 c4 1c             	add    esp,0x1c
c00179d3:	c3                   	ret    

c00179d4 <otherISRHandler(regs*, void*)>:
c00179d4:	83 ec 0c             	sub    esp,0xc
c00179d7:	83 ec 0c             	sub    esp,0xc
c00179da:	68 24 28 02 c0       	push   0xc0022824
c00179df:	e8 b4 fe ff ff       	call   c0017898 <displayProgramFault(char const*)>
c00179e4:	83 c4 10             	add    esp,0x10
c00179e7:	83 ec 0c             	sub    esp,0xc
c00179ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179ee:	e8 a4 fa ff ff       	call   c0017497 <displayDebugInfo(regs*)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	83 ec 0c             	sub    esp,0xc
c00179f9:	6a 00                	push   0x0
c00179fb:	e8 e4 ec ff ff       	call   c00166e4 <Thr::terminateFromIRQ(int)>
c0017a00:	83 c4 10             	add    esp,0x10
c0017a03:	90                   	nop
c0017a04:	83 c4 0c             	add    esp,0xc
c0017a07:	c3                   	ret    

c0017a08 <opcodeFault(regs*, void*)>:
c0017a08:	55                   	push   ebp
c0017a09:	89 e5                	mov    ebp,esp
c0017a0b:	83 ec 08             	sub    esp,0x8
c0017a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a14:	83 ec 08             	sub    esp,0x8
c0017a17:	50                   	push   eax
c0017a18:	68 42 27 02 c0       	push   0xc0022742
c0017a1d:	e8 23 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a22:	83 c4 10             	add    esp,0x10
c0017a25:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017a2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a30:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017a36:	0f b6 c0             	movzx  eax,al
c0017a39:	85 c0                	test   eax,eax
c0017a3b:	74 21                	je     c0017a5e <opcodeFault(regs*, void*)+0x56>
c0017a3d:	83 ec 0c             	sub    esp,0xc
c0017a40:	68 4c 28 02 c0       	push   0xc002284c
c0017a45:	e8 fb 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a53:	8d 50 19             	lea    edx,[eax+0x19]
c0017a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017a5c:	eb 2b                	jmp    c0017a89 <opcodeFault(regs*, void*)+0x81>
c0017a5e:	83 ec 0c             	sub    esp,0xc
c0017a61:	68 50 27 02 c0       	push   0xc0022750
c0017a66:	e8 2d fe ff ff       	call   c0017898 <displayProgramFault(char const*)>
c0017a6b:	83 c4 10             	add    esp,0x10
c0017a6e:	83 ec 0c             	sub    esp,0xc
c0017a71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017a74:	e8 1e fa ff ff       	call   c0017497 <displayDebugInfo(regs*)>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	83 ec 0c             	sub    esp,0xc
c0017a7f:	6a 00                	push   0x0
c0017a81:	e8 5e ec ff ff       	call   c00166e4 <Thr::terminateFromIRQ(int)>
c0017a86:	83 c4 10             	add    esp,0x10
c0017a89:	c9                   	leave  
c0017a8a:	c3                   	ret    

c0017a8b <i386SaveCoprocessor(void*)>:
c0017a8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a8f:	83 c0 3f             	add    eax,0x3f
c0017a92:	83 e0 c0             	and    eax,0xffffffc0
c0017a95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a99:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017a9f <i386LoadCoprocessor(void*)>:
c0017a9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017aa3:	83 c0 3f             	add    eax,0x3f
c0017aa6:	83 e0 c0             	and    eax,0xffffffc0
c0017aa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017aad:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017ab3 <x87EmulHandler(regs*, void*)>:
c0017ab3:	53                   	push   ebx
c0017ab4:	83 ec 08             	sub    esp,0x8
c0017ab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017abc:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ac0:	74 10                	je     c0017ad2 <x87EmulHandler(regs*, void*)+0x1f>
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	68 5d 27 02 c0       	push   0xc002275d
c0017aca:	e8 ca 98 ff ff       	call   c0011399 <KePanic(char const*)>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	0f 20 c0             	mov    eax,cr0
c0017ad5:	a8 08                	test   al,0x8
c0017ad7:	74 59                	je     c0017b32 <x87EmulHandler(regs*, void*)+0x7f>
c0017ad9:	0f 06                	clts   
c0017adb:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017ae0:	85 c0                	test   eax,eax
c0017ae2:	74 0e                	je     c0017af2 <x87EmulHandler(regs*, void*)+0x3f>
c0017ae4:	83 ec 0c             	sub    esp,0xc
c0017ae7:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017aea:	e8 9c ff ff ff       	call   c0017a8b <i386SaveCoprocessor(void*)>
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017af8:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017afc:	75 12                	jne    c0017b10 <x87EmulHandler(regs*, void*)+0x5d>
c0017afe:	83 ec 0c             	sub    esp,0xc
c0017b01:	68 40 02 00 00       	push   0x240
c0017b06:	e8 ab ff fe ff       	call   c0007ab6 <malloc>
c0017b0b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017b0e:	eb 10                	jmp    c0017b20 <x87EmulHandler(regs*, void*)+0x6d>
c0017b10:	83 ec 0c             	sub    esp,0xc
c0017b13:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b18:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b1b:	e8 7f ff ff ff       	call   c0017a9f <i386LoadCoprocessor(void*)>
c0017b20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017b2d:	83 c4 08             	add    esp,0x8
c0017b30:	5b                   	pop    ebx
c0017b31:	c3                   	ret    
c0017b32:	83 ec 0c             	sub    esp,0xc
c0017b35:	68 71 27 02 c0       	push   0xc0022771
c0017b3a:	e8 06 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017b3f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017b47:	83 c4 18             	add    esp,0x18
c0017b4a:	5b                   	pop    ebx
c0017b4b:	e9 94 eb ff ff       	jmp    c00166e4 <Thr::terminateFromIRQ(int)>

c0017b50 <HalInitialiseCoprocessor()>:
c0017b50:	83 ec 10             	sub    esp,0x10
c0017b53:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017b5d:	6a 00                	push   0x0
c0017b5f:	68 b3 7a 01 c0       	push   0xc0017ab3
c0017b64:	6a 07                	push   0x7
c0017b66:	e8 33 51 ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b6b:	e8 50 70 00 00       	call   c001ebc0 <avxDetect>
c0017b70:	83 c4 10             	add    esp,0x10
c0017b73:	85 c0                	test   eax,eax
c0017b75:	74 1c                	je     c0017b93 <HalInitialiseCoprocessor()+0x43>
c0017b77:	c7 05 70 97 02 c0 ea eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ebea
c0017b81:	c7 05 6c 97 02 c0 fb eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ebfb
c0017b8b:	83 c4 0c             	add    esp,0xc
c0017b8e:	e9 79 70 00 00       	jmp    c001ec0c <avxInit>
c0017b93:	e8 b8 73 00 00       	call   c001ef50 <absolutelyNoChanceInHell>
c0017b98:	85 c0                	test   eax,eax
c0017b9a:	74 1c                	je     c0017bb8 <HalInitialiseCoprocessor()+0x68>
c0017b9c:	c7 05 70 97 02 c0 68 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef68
c0017ba6:	c7 05 6c 97 02 c0 70 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef70
c0017bb0:	83 c4 0c             	add    esp,0xc
c0017bb3:	e9 c0 73 00 00       	jmp    c001ef78 <sseInit>
c0017bb8:	e8 d9 73 00 00       	call   c001ef96 <x87Detect>
c0017bbd:	85 c0                	test   eax,eax
c0017bbf:	74 1c                	je     c0017bdd <HalInitialiseCoprocessor()+0x8d>
c0017bc1:	c7 05 70 97 02 c0 b1 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001efb1
c0017bcb:	c7 05 6c 97 02 c0 b8 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001efb8
c0017bd5:	83 c4 0c             	add    esp,0xc
c0017bd8:	e9 e2 73 00 00       	jmp    c001efbf <x87Init>
c0017bdd:	c7 05 70 97 02 c0 64 74 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0017464
c0017be7:	c7 05 6c 97 02 c0 64 74 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0017464
c0017bf1:	0f 20 c0             	mov    eax,cr0
c0017bf4:	83 c8 04             	or     eax,0x4
c0017bf7:	0f 22 c0             	mov    cr0,eax
c0017bfa:	83 c4 0c             	add    esp,0xc
c0017bfd:	c3                   	ret    

c0017bfe <HalPanic(char const*)>:
c0017bfe:	53                   	push   ebx
c0017bff:	83 ec 10             	sub    esp,0x10
c0017c02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c06:	fa                   	cli    
c0017c07:	53                   	push   ebx
c0017c08:	68 87 27 02 c0       	push   0xc0022787
c0017c0d:	e8 33 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017c12:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017c17:	83 c4 10             	add    esp,0x10
c0017c1a:	85 c0                	test   eax,eax
c0017c1c:	74 09                	je     c0017c27 <HalPanic(char const*)+0x29>
c0017c1e:	83 ec 0c             	sub    esp,0xc
c0017c21:	53                   	push   ebx
c0017c22:	ff d0                	call   eax
c0017c24:	83 c4 10             	add    esp,0x10
c0017c27:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017c2c:	85 c0                	test   eax,eax
c0017c2e:	0f 84 dc 00 00 00    	je     c0017d10 <HalPanic(char const*)+0x112>
c0017c34:	52                   	push   edx
c0017c35:	6a 01                	push   0x1
c0017c37:	6a 0f                	push   0xf
c0017c39:	50                   	push   eax
c0017c3a:	e8 75 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c3f:	59                   	pop    ecx
c0017c40:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c46:	e8 59 0b ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017c4b:	58                   	pop    eax
c0017c4c:	5a                   	pop    edx
c0017c4d:	68 04 0a 02 c0       	push   0xc0020a04
c0017c52:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c58:	e8 8f 09 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017c5d:	83 c4 0c             	add    esp,0xc
c0017c60:	6a 01                	push   0x1
c0017c62:	6a 0f                	push   0xf
c0017c64:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c6a:	e8 45 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c6f:	59                   	pop    ecx
c0017c70:	58                   	pop    eax
c0017c71:	68 a0 27 02 c0       	push   0xc00227a0
c0017c76:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c7c:	e8 25 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c81:	83 c4 0c             	add    esp,0xc
c0017c84:	6a 0f                	push   0xf
c0017c86:	6a 01                	push   0x1
c0017c88:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c8e:	e8 21 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c93:	58                   	pop    eax
c0017c94:	5a                   	pop    edx
c0017c95:	68 a9 27 02 c0       	push   0xc00227a9
c0017c9a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ca0:	e8 01 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ca5:	83 c4 0c             	add    esp,0xc
c0017ca8:	6a 01                	push   0x1
c0017caa:	6a 0f                	push   0xf
c0017cac:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cb2:	e8 fd 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017cb7:	59                   	pop    ecx
c0017cb8:	58                   	pop    eax
c0017cb9:	68 ed 27 02 c0       	push   0xc00227ed
c0017cbe:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cc4:	e8 dd 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cc9:	58                   	pop    eax
c0017cca:	5a                   	pop    edx
c0017ccb:	68 b6 27 02 c0       	push   0xc00227b6
c0017cd0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cd6:	e8 cb 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cdb:	59                   	pop    ecx
c0017cdc:	58                   	pop    eax
c0017cdd:	68 f0 27 02 c0       	push   0xc00227f0
c0017ce2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ce8:	e8 b9 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ced:	58                   	pop    eax
c0017cee:	5a                   	pop    edx
c0017cef:	53                   	push   ebx
c0017cf0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cf6:	e8 ab 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cfb:	59                   	pop    ecx
c0017cfc:	5b                   	pop    ebx
c0017cfd:	68 ed 27 02 c0       	push   0xc00227ed
c0017d02:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d08:	e8 99 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d0d:	83 c4 10             	add    esp,0x10
c0017d10:	eb fe                	jmp    c0017d10 <HalPanic(char const*)+0x112>

c0017d12 <HalQueryPerformanceCounter()>:
c0017d12:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d17:	31 d2                	xor    edx,edx
c0017d19:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017d1f:	31 c0                	xor    eax,eax
c0017d21:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017d28:	74 02                	je     c0017d2c <HalQueryPerformanceCounter()+0x1a>
c0017d2a:	0f 31                	rdtsc  
c0017d2c:	c3                   	ret    

c0017d2d <HalInitialise()>:
c0017d2d:	53                   	push   ebx
c0017d2e:	83 ec 08             	sub    esp,0x8
c0017d31:	e8 98 51 ff ff       	call   c000cece <setupINTS()>
c0017d36:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d42:	75 0f                	jne    c0017d53 <HalInitialise()+0x26>
c0017d44:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d4a:	83 e2 fe             	and    edx,0xfffffffe
c0017d4d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d53:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d59:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017d60:	83 e2 fe             	and    edx,0xfffffffe
c0017d63:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d69:	e8 9e 02 00 00       	call   c001800c <picOpen()>
c0017d6e:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d75:	74 0a                	je     c0017d81 <HalInitialise()+0x54>
c0017d77:	e8 e0 01 00 00       	call   c0017f5c <picDisable()>
c0017d7c:	e8 ad 67 00 00       	call   c001e52e <apicOpen()>
c0017d81:	bb 0f 00 00 00       	mov    ebx,0xf
c0017d86:	50                   	push   eax
c0017d87:	6a 00                	push   0x0
c0017d89:	68 d4 79 01 c0       	push   0xc00179d4
c0017d8e:	6a 00                	push   0x0
c0017d90:	e8 09 4f ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d95:	83 c4 0c             	add    esp,0xc
c0017d98:	6a 00                	push   0x0
c0017d9a:	68 d4 79 01 c0       	push   0xc00179d4
c0017d9f:	6a 01                	push   0x1
c0017da1:	e8 f8 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017da6:	83 c4 0c             	add    esp,0xc
c0017da9:	6a 00                	push   0x0
c0017dab:	68 65 74 01 c0       	push   0xc0017465
c0017db0:	6a 02                	push   0x2
c0017db2:	e8 e7 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017db7:	83 c4 0c             	add    esp,0xc
c0017dba:	6a 00                	push   0x0
c0017dbc:	68 d4 79 01 c0       	push   0xc00179d4
c0017dc1:	6a 03                	push   0x3
c0017dc3:	e8 d6 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dc8:	83 c4 0c             	add    esp,0xc
c0017dcb:	6a 00                	push   0x0
c0017dcd:	68 d4 79 01 c0       	push   0xc00179d4
c0017dd2:	6a 04                	push   0x4
c0017dd4:	e8 c5 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dd9:	83 c4 0c             	add    esp,0xc
c0017ddc:	6a 00                	push   0x0
c0017dde:	68 d4 79 01 c0       	push   0xc00179d4
c0017de3:	6a 05                	push   0x5
c0017de5:	e8 b4 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dea:	83 c4 0c             	add    esp,0xc
c0017ded:	6a 00                	push   0x0
c0017def:	68 08 7a 01 c0       	push   0xc0017a08
c0017df4:	6a 06                	push   0x6
c0017df6:	e8 a3 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dfb:	83 c4 0c             	add    esp,0xc
c0017dfe:	6a 00                	push   0x0
c0017e00:	68 7e 74 01 c0       	push   0xc001747e
c0017e05:	6a 08                	push   0x8
c0017e07:	e8 92 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e0c:	83 c4 0c             	add    esp,0xc
c0017e0f:	6a 00                	push   0x0
c0017e11:	68 d4 79 01 c0       	push   0xc00179d4
c0017e16:	6a 09                	push   0x9
c0017e18:	e8 81 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e1d:	83 c4 0c             	add    esp,0xc
c0017e20:	6a 00                	push   0x0
c0017e22:	68 d4 79 01 c0       	push   0xc00179d4
c0017e27:	6a 0a                	push   0xa
c0017e29:	e8 70 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e2e:	83 c4 0c             	add    esp,0xc
c0017e31:	6a 00                	push   0x0
c0017e33:	68 d4 79 01 c0       	push   0xc00179d4
c0017e38:	6a 0b                	push   0xb
c0017e3a:	e8 5f 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e3f:	83 c4 0c             	add    esp,0xc
c0017e42:	6a 00                	push   0x0
c0017e44:	68 e4 78 01 c0       	push   0xc00178e4
c0017e49:	6a 0d                	push   0xd
c0017e4b:	e8 4e 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e50:	83 c4 0c             	add    esp,0xc
c0017e53:	6a 00                	push   0x0
c0017e55:	68 4b 79 01 c0       	push   0xc001794b
c0017e5a:	6a 0e                	push   0xe
c0017e5c:	e8 3d 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e61:	83 c4 10             	add    esp,0x10
c0017e64:	50                   	push   eax
c0017e65:	6a 00                	push   0x0
c0017e67:	68 d4 79 01 c0       	push   0xc00179d4
c0017e6c:	53                   	push   ebx
c0017e6d:	43                   	inc    ebx
c0017e6e:	e8 2b 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e73:	83 c4 10             	add    esp,0x10
c0017e76:	83 fb 1e             	cmp    ebx,0x1e
c0017e79:	75 e9                	jne    c0017e64 <HalInitialise()+0x137>
c0017e7b:	50                   	push   eax
c0017e7c:	6a 00                	push   0x0
c0017e7e:	68 7f 26 01 c0       	push   0xc001267f
c0017e83:	6a 60                	push   0x60
c0017e85:	e8 14 4e ff ff       	call   c000cc9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e8a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e8f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017e99:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017ea0:	e8 11 fc fe ff       	call   c0007ab6 <malloc>
c0017ea5:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ea8:	89 c3                	mov    ebx,eax
c0017eaa:	e8 3b 09 00 00       	call   c00187ea <RTC::RTC()>
c0017eaf:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017eb9:	5a                   	pop    edx
c0017eba:	59                   	pop    ecx
c0017ebb:	53                   	push   ebx
c0017ebc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ec2:	e8 a3 48 ff ff       	call   c000c76a <Device::addChild(Device*)>
c0017ec7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ec9:	6a 00                	push   0x0
c0017ecb:	6a 00                	push   0x0
c0017ecd:	6a 00                	push   0x0
c0017ecf:	53                   	push   ebx
c0017ed0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017ed3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017ed8:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017ede:	83 c4 28             	add    esp,0x28
c0017ee1:	5b                   	pop    ebx
c0017ee2:	c3                   	ret    

c0017ee3 <HalMakeBeep(int)>:
c0017ee3:	53                   	push   ebx
c0017ee4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017ee8:	85 db                	test   ebx,ebx
c0017eea:	75 07                	jne    c0017ef3 <HalMakeBeep(int)+0x10>
c0017eec:	e4 61                	in     al,0x61
c0017eee:	83 e0 fc             	and    eax,0xfffffffc
c0017ef1:	eb 26                	jmp    c0017f19 <HalMakeBeep(int)+0x36>
c0017ef3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017ef8:	99                   	cdq    
c0017ef9:	f7 fb                	idiv   ebx
c0017efb:	89 c1                	mov    ecx,eax
c0017efd:	b0 b6                	mov    al,0xb6
c0017eff:	e6 43                	out    0x43,al
c0017f01:	88 c8                	mov    al,cl
c0017f03:	e6 42                	out    0x42,al
c0017f05:	89 c8                	mov    eax,ecx
c0017f07:	c1 e8 08             	shr    eax,0x8
c0017f0a:	e6 42                	out    0x42,al
c0017f0c:	e4 61                	in     al,0x61
c0017f0e:	89 c2                	mov    edx,eax
c0017f10:	83 ca 03             	or     edx,0x3
c0017f13:	38 d0                	cmp    al,dl
c0017f15:	74 04                	je     c0017f1b <HalMakeBeep(int)+0x38>
c0017f17:	88 d0                	mov    al,dl
c0017f19:	e6 61                	out    0x61,al
c0017f1b:	5b                   	pop    ebx
c0017f1c:	c3                   	ret    

c0017f1d <HalGetRand()>:
c0017f1d:	31 c0                	xor    eax,eax
c0017f1f:	c3                   	ret    

c0017f20 <HalEndOfInterrupt(int)>:
c0017f20:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017f27:	74 23                	je     c0017f4c <HalEndOfInterrupt(int)+0x2c>
c0017f29:	83 ec 14             	sub    esp,0x14
c0017f2c:	6a 1b                	push   0x1b
c0017f2e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f34:	e8 87 f1 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017f3e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017f48:	83 c4 1c             	add    esp,0x1c
c0017f4b:	c3                   	ret    
c0017f4c:	e9 3f 02 00 00       	jmp    c0018190 <picEOI(int)>

c0017f51 <HalRestart()>:
c0017f51:	c3                   	ret    

c0017f52 <HalShutdown()>:
c0017f52:	c3                   	ret    

c0017f53 <HalSleep()>:
c0017f53:	c3                   	ret    

c0017f54 <picIoWait()>:
c0017f54:	eb 00                	jmp    c0017f56 <picIoWait()+0x2>
c0017f56:	eb 00                	jmp    c0017f58 <picIoWait()+0x4>
c0017f58:	90                   	nop
c0017f59:	c3                   	ret    
c0017f5a:	66 90                	xchg   ax,ax

c0017f5c <picDisable()>:
c0017f5c:	83 ec 10             	sub    esp,0x10
c0017f5f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017f66:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017f6b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f6f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017f74:	ee                   	out    dx,al
c0017f75:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017f7c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017f81:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f85:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017f8a:	ee                   	out    dx,al
c0017f8b:	90                   	nop
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	c3                   	ret    

c0017f90 <picGetIRQReg(int)>:
c0017f90:	83 ec 10             	sub    esp,0x10
c0017f93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f97:	0f b6 c0             	movzx  eax,al
c0017f9a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017fa1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017fa5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017fa9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017fae:	ee                   	out    dx,al
c0017faf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fb3:	0f b6 c0             	movzx  eax,al
c0017fb6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017fbd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017fc1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017fc5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017fca:	ee                   	out    dx,al
c0017fcb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017fd2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017fd7:	89 c2                	mov    edx,eax
c0017fd9:	ec                   	in     al,dx
c0017fda:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017fde:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fe2:	0f b6 c0             	movzx  eax,al
c0017fe5:	c1 e0 08             	shl    eax,0x8
c0017fe8:	89 c1                	mov    ecx,eax
c0017fea:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017ff1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017ff6:	89 c2                	mov    edx,eax
c0017ff8:	ec                   	in     al,dx
c0017ff9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017ffd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018001:	0f b6 c0             	movzx  eax,al
c0018004:	09 c8                	or     eax,ecx
c0018006:	83 c4 10             	add    esp,0x10
c0018009:	c3                   	ret    
c001800a:	66 90                	xchg   ax,ax

c001800c <picOpen()>:
c001800c:	83 ec 50             	sub    esp,0x50
c001800f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018016:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001801b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001801f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018023:	ee                   	out    dx,al
c0018024:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001802b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018030:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018034:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018038:	ee                   	out    dx,al
c0018039:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018041:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018049:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018050:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018054:	89 c2                	mov    edx,eax
c0018056:	ec                   	in     al,dx
c0018057:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001805b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001805f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018063:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001806a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001806e:	89 c2                	mov    edx,eax
c0018070:	ec                   	in     al,dx
c0018071:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018075:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018079:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001807d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018084:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018089:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001808d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018091:	ee                   	out    dx,al
c0018092:	e8 bd fe ff ff       	call   c0017f54 <picIoWait()>
c0018097:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001809e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00180a3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00180a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180ab:	ee                   	out    dx,al
c00180ac:	e8 a3 fe ff ff       	call   c0017f54 <picIoWait()>
c00180b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00180b5:	0f b6 c0             	movzx  eax,al
c00180b8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00180bf:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00180c3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00180c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180cb:	ee                   	out    dx,al
c00180cc:	e8 83 fe ff ff       	call   c0017f54 <picIoWait()>
c00180d1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180d5:	0f b6 c0             	movzx  eax,al
c00180d8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00180df:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00180e3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00180e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180eb:	ee                   	out    dx,al
c00180ec:	e8 63 fe ff ff       	call   c0017f54 <picIoWait()>
c00180f1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00180f8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00180fd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018101:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018105:	ee                   	out    dx,al
c0018106:	e8 49 fe ff ff       	call   c0017f54 <picIoWait()>
c001810b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018112:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018117:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001811b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001811f:	ee                   	out    dx,al
c0018120:	e8 2f fe ff ff       	call   c0017f54 <picIoWait()>
c0018125:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001812c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018131:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018135:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018139:	ee                   	out    dx,al
c001813a:	e8 15 fe ff ff       	call   c0017f54 <picIoWait()>
c001813f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018146:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001814b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001814f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018153:	ee                   	out    dx,al
c0018154:	e8 fb fd ff ff       	call   c0017f54 <picIoWait()>
c0018159:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001815e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018165:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018169:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001816d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018171:	ee                   	out    dx,al
c0018172:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018177:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001817e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018182:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018186:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001818a:	ee                   	out    dx,al
c001818b:	90                   	nop
c001818c:	83 c4 50             	add    esp,0x50
c001818f:	c3                   	ret    

c0018190 <picEOI(int)>:
c0018190:	83 ec 10             	sub    esp,0x10
c0018193:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018198:	75 1e                	jne    c00181b8 <picEOI(int)+0x28>
c001819a:	6a 0b                	push   0xb
c001819c:	e8 ef fd ff ff       	call   c0017f90 <picGetIRQReg(int)>
c00181a1:	83 c4 04             	add    esp,0x4
c00181a4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00181a9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00181ae:	25 80 00 00 00       	and    eax,0x80
c00181b3:	74 73                	je     c0018228 <picEOI(int)+0x98>
c00181b5:	8d 76 00             	lea    esi,[esi+0x0]
c00181b8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00181bd:	75 31                	jne    c00181f0 <picEOI(int)+0x60>
c00181bf:	6a 0b                	push   0xb
c00181c1:	e8 ca fd ff ff       	call   c0017f90 <picGetIRQReg(int)>
c00181c6:	83 c4 04             	add    esp,0x4
c00181c9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181d2:	98                   	cwde   
c00181d3:	85 c0                	test   eax,eax
c00181d5:	78 19                	js     c00181f0 <picEOI(int)+0x60>
c00181d7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00181de:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00181e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00181e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00181ec:	ee                   	out    dx,al
c00181ed:	eb 3d                	jmp    c001822c <picEOI(int)+0x9c>
c00181ef:	90                   	nop
c00181f0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00181f5:	7e 19                	jle    c0018210 <picEOI(int)+0x80>
c00181f7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00181fe:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018203:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018207:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001820c:	ee                   	out    dx,al
c001820d:	8d 76 00             	lea    esi,[esi+0x0]
c0018210:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018217:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001821c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018220:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018225:	ee                   	out    dx,al
c0018226:	eb 04                	jmp    c001822c <picEOI(int)+0x9c>
c0018228:	90                   	nop
c0018229:	8d 76 00             	lea    esi,[esi+0x0]
c001822c:	83 c4 10             	add    esp,0x10
c001822f:	c3                   	ret    

c0018230 <RTC::open(int, int, void*)>:
c0018230:	31 c0                	xor    eax,eax
c0018232:	c3                   	ret    
c0018233:	90                   	nop

c0018234 <RTC::close(int, int, void*)>:
c0018234:	31 c0                	xor    eax,eax
c0018236:	c3                   	ret    
c0018237:	90                   	nop

c0018238 <RTC::timeInSecondsUTC()>:
c0018238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001823c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018242:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018248:	c3                   	ret    
c0018249:	90                   	nop

c001824a <RTC::timeInDatetimeUTC()>:
c001824a:	53                   	push   ebx
c001824b:	83 ec 14             	sub    esp,0x14
c001824e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018256:	8b 10                	mov    edx,DWORD PTR [eax]
c0018258:	50                   	push   eax
c0018259:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001825c:	83 c4 0c             	add    esp,0xc
c001825f:	52                   	push   edx
c0018260:	50                   	push   eax
c0018261:	53                   	push   ebx
c0018262:	e8 77 42 ff ff       	call   c000c4de <secondsToDatetime(unsigned long long)>
c0018267:	89 d8                	mov    eax,ebx
c0018269:	83 c4 14             	add    esp,0x14
c001826c:	5b                   	pop    ebx
c001826d:	c2 04 00             	ret    0x4

c0018270 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018270:	56                   	push   esi
c0018271:	53                   	push   ebx
c0018272:	83 ec 14             	sub    esp,0x14
c0018275:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018279:	8b 03                	mov    eax,DWORD PTR [ebx]
c001827b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001827e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018282:	52                   	push   edx
c0018283:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018287:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001828b:	50                   	push   eax
c001828c:	e8 4d 42 ff ff       	call   c000c4de <secondsToDatetime(unsigned long long)>
c0018291:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018295:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018299:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001829d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00182a1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00182a5:	89 f0                	mov    eax,esi
c00182a7:	83 c4 20             	add    esp,0x20
c00182aa:	5b                   	pop    ebx
c00182ab:	5e                   	pop    esi
c00182ac:	ff e0                	jmp    eax

c00182ae <RTC::~RTC()>:
c00182ae:	83 ec 0c             	sub    esp,0xc
c00182b1:	ba 8c 28 02 c0       	mov    edx,0xc002288c
c00182b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ba:	89 10                	mov    DWORD PTR [eax],edx
c00182bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c0:	83 ec 0c             	sub    esp,0xc
c00182c3:	50                   	push   eax
c00182c4:	e8 a7 3f ff ff       	call   c000c270 <Clock::~Clock()>
c00182c9:	83 c4 10             	add    esp,0x10
c00182cc:	90                   	nop
c00182cd:	83 c4 0c             	add    esp,0xc
c00182d0:	c3                   	ret    
c00182d1:	90                   	nop

c00182d2 <RTC::~RTC()>:
c00182d2:	83 ec 0c             	sub    esp,0xc
c00182d5:	83 ec 0c             	sub    esp,0xc
c00182d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182dc:	e8 cd ff ff ff       	call   c00182ae <RTC::~RTC()>
c00182e1:	83 c4 10             	add    esp,0x10
c00182e4:	83 ec 08             	sub    esp,0x8
c00182e7:	68 60 01 00 00       	push   0x160
c00182ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182f0:	e8 23 25 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00182f5:	83 c4 10             	add    esp,0x10
c00182f8:	83 c4 0c             	add    esp,0xc
c00182fb:	c3                   	ret    

c00182fc <RTC::get_update_in_progress_flag()>:
c00182fc:	83 ec 14             	sub    esp,0x14
c00182ff:	6a 0a                	push   0xa
c0018301:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018307:	e8 6c ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001830c:	83 c4 1c             	add    esp,0x1c
c001830f:	0f b6 c0             	movzx  eax,al
c0018312:	c1 e8 07             	shr    eax,0x7
c0018315:	c3                   	ret    

c0018316 <RTC::completeRTCRefresh()>:
c0018316:	55                   	push   ebp
c0018317:	57                   	push   edi
c0018318:	56                   	push   esi
c0018319:	53                   	push   ebx
c001831a:	83 ec 3c             	sub    esp,0x3c
c001831d:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018323:	83 ec 0c             	sub    esp,0xc
c0018326:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001832a:	e8 cd ff ff ff       	call   c00182fc <RTC::get_update_in_progress_flag()>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	84 c0                	test   al,al
c0018334:	74 0e                	je     c0018344 <RTC::completeRTCRefresh()+0x2e>
c0018336:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001833c:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018342:	73 df                	jae    c0018323 <RTC::completeRTCRefresh()+0xd>
c0018344:	51                   	push   ecx
c0018345:	51                   	push   ecx
c0018346:	6a 00                	push   0x0
c0018348:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001834e:	e8 25 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018353:	5b                   	pop    ebx
c0018354:	89 c7                	mov    edi,eax
c0018356:	5e                   	pop    esi
c0018357:	6a 02                	push   0x2
c0018359:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001835f:	e8 14 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018364:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018368:	5d                   	pop    ebp
c0018369:	58                   	pop    eax
c001836a:	6a 04                	push   0x4
c001836c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018372:	e8 01 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018377:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001837b:	58                   	pop    eax
c001837c:	5a                   	pop    edx
c001837d:	6a 07                	push   0x7
c001837f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018385:	e8 ee ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001838a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001838e:	59                   	pop    ecx
c001838f:	5b                   	pop    ebx
c0018390:	6a 08                	push   0x8
c0018392:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018398:	e8 db ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001839d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00183a1:	5e                   	pop    esi
c00183a2:	5d                   	pop    ebp
c00183a3:	6a 09                	push   0x9
c00183a5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ab:	e8 c8 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183b0:	0f b6 c0             	movzx  eax,al
c00183b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00183b7:	83 c4 10             	add    esp,0x10
c00183ba:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00183c0:	83 ec 0c             	sub    esp,0xc
c00183c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00183c7:	e8 30 ff ff ff       	call   c00182fc <RTC::get_update_in_progress_flag()>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	84 c0                	test   al,al
c00183d1:	74 0e                	je     c00183e1 <RTC::completeRTCRefresh()+0xcb>
c00183d3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00183d9:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00183df:	73 df                	jae    c00183c0 <RTC::completeRTCRefresh()+0xaa>
c00183e1:	51                   	push   ecx
c00183e2:	51                   	push   ecx
c00183e3:	6a 00                	push   0x0
c00183e5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183eb:	e8 88 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183f0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00183f4:	5b                   	pop    ebx
c00183f5:	5e                   	pop    esi
c00183f6:	6a 02                	push   0x2
c00183f8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183fe:	e8 75 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018403:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018407:	5d                   	pop    ebp
c0018408:	58                   	pop    eax
c0018409:	6a 04                	push   0x4
c001840b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018411:	e8 62 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018416:	88 c3                	mov    bl,al
c0018418:	58                   	pop    eax
c0018419:	5a                   	pop    edx
c001841a:	6a 07                	push   0x7
c001841c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018422:	e8 51 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018427:	59                   	pop    ecx
c0018428:	89 c6                	mov    esi,eax
c001842a:	5d                   	pop    ebp
c001842b:	6a 08                	push   0x8
c001842d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018433:	e8 40 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018438:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001843c:	58                   	pop    eax
c001843d:	5a                   	pop    edx
c001843e:	6a 09                	push   0x9
c0018440:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018446:	e8 2d ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001844b:	89 f9                	mov    ecx,edi
c001844d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018451:	0f b6 e8             	movzx  ebp,al
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001845b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018460:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018465:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001846d:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018471:	0f 94 c0             	sete   al
c0018474:	0f b6 fb             	movzx  edi,bl
c0018477:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001847b:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018480:	0f 94 c2             	sete   dl
c0018483:	21 d0                	and    eax,edx
c0018485:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018489:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001848d:	0f 94 c2             	sete   dl
c0018490:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018494:	21 c2                	and    edx,eax
c0018496:	89 f0                	mov    eax,esi
c0018498:	0f b6 c0             	movzx  eax,al
c001849b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001849f:	89 f0                	mov    eax,esi
c00184a1:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00184a5:	0f 94 c0             	sete   al
c00184a8:	21 d0                	and    eax,edx
c00184aa:	31 d2                	xor    edx,edx
c00184ac:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00184b0:	0f 94 c2             	sete   dl
c00184b3:	85 c2                	test   edx,eax
c00184b5:	75 27                	jne    c00184de <RTC::completeRTCRefresh()+0x1c8>
c00184b7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00184bb:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00184bf:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00184c3:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00184c7:	89 f0                	mov    eax,esi
c00184c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00184cd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00184d1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184d5:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00184d9:	e9 dc fe ff ff       	jmp    c00183ba <RTC::completeRTCRefresh()+0xa4>
c00184de:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00184e2:	75 d3                	jne    c00184b7 <RTC::completeRTCRefresh()+0x1a1>
c00184e4:	52                   	push   edx
c00184e5:	52                   	push   edx
c00184e6:	6a 0b                	push   0xb
c00184e8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184ee:	e8 85 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184f3:	83 c4 10             	add    esp,0x10
c00184f6:	a8 04                	test   al,0x4
c00184f8:	75 7a                	jne    c0018574 <RTC::completeRTCRefresh()+0x25e>
c00184fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00184fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018502:	83 e1 0f             	and    ecx,0xf
c0018505:	c1 ea 04             	shr    edx,0x4
c0018508:	c1 ef 04             	shr    edi,0x4
c001850b:	6b d2 0a             	imul   edx,edx,0xa
c001850e:	83 e6 0f             	and    esi,0xf
c0018511:	01 d1                	add    ecx,edx
c0018513:	c1 ed 04             	shr    ebp,0x4
c0018516:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001851a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001851e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018522:	c1 ea 04             	shr    edx,0x4
c0018525:	83 e1 0f             	and    ecx,0xf
c0018528:	6b d2 0a             	imul   edx,edx,0xa
c001852b:	6b ed 0a             	imul   ebp,ebp,0xa
c001852e:	01 d1                	add    ecx,edx
c0018530:	89 fa                	mov    edx,edi
c0018532:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018536:	83 e2 07             	and    edx,0x7
c0018539:	89 d9                	mov    ecx,ebx
c001853b:	6b d2 0a             	imul   edx,edx,0xa
c001853e:	83 e1 0f             	and    ecx,0xf
c0018541:	83 e3 80             	and    ebx,0xffffff80
c0018544:	01 d1                	add    ecx,edx
c0018546:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001854a:	09 cb                	or     ebx,ecx
c001854c:	c1 ea 04             	shr    edx,0x4
c001854f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018553:	6b d2 0a             	imul   edx,edx,0xa
c0018556:	83 e1 0f             	and    ecx,0xf
c0018559:	01 d6                	add    esi,edx
c001855b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001855f:	c1 ea 04             	shr    edx,0x4
c0018562:	6b d2 0a             	imul   edx,edx,0xa
c0018565:	01 d1                	add    ecx,edx
c0018567:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001856b:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001856f:	83 e2 0f             	and    edx,0xf
c0018572:	01 d5                	add    ebp,edx
c0018574:	a8 02                	test   al,0x2
c0018576:	75 15                	jne    c001858d <RTC::completeRTCRefresh()+0x277>
c0018578:	f6 c3 80             	test   bl,0x80
c001857b:	74 10                	je     c001858d <RTC::completeRTCRefresh()+0x277>
c001857d:	83 e3 7f             	and    ebx,0x7f
c0018580:	b9 18 00 00 00       	mov    ecx,0x18
c0018585:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018588:	99                   	cdq    
c0018589:	f7 f9                	idiv   ecx
c001858b:	88 d3                	mov    bl,dl
c001858d:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018593:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018599:	77 06                	ja     c00185a1 <RTC::completeRTCRefresh()+0x28b>
c001859b:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00185a1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185a6:	31 c9                	xor    ecx,ecx
c00185a8:	c1 e0 10             	shl    eax,0x10
c00185ab:	89 cd                	mov    ebp,ecx
c00185ad:	c1 e7 10             	shl    edi,0x10
c00185b0:	31 d2                	xor    edx,edx
c00185b2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00185b8:	09 c5                	or     ebp,eax
c00185ba:	89 f0                	mov    eax,esi
c00185bc:	89 e9                	mov    ecx,ebp
c00185be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00185c2:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00185c6:	88 c2                	mov    dl,al
c00185c8:	88 d9                	mov    cl,bl
c00185ca:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00185ce:	0f b7 c2             	movzx  eax,dx
c00185d1:	09 f8                	or     eax,edi
c00185d3:	89 c2                	mov    edx,eax
c00185d5:	50                   	push   eax
c00185d6:	50                   	push   eax
c00185d7:	51                   	push   ecx
c00185d8:	52                   	push   edx
c00185d9:	e8 81 3d ff ff       	call   c000c35f <datetimeToSeconds(datetime_t)>
c00185de:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00185e2:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00185e8:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00185ee:	83 c4 4c             	add    esp,0x4c
c00185f1:	5b                   	pop    ebx
c00185f2:	5e                   	pop    esi
c00185f3:	5f                   	pop    edi
c00185f4:	5d                   	pop    ebp
c00185f5:	c3                   	ret    

c00185f6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00185f6:	55                   	push   ebp
c00185f7:	57                   	push   edi
c00185f8:	56                   	push   esi
c00185f9:	53                   	push   ebx
c00185fa:	83 ec 30             	sub    esp,0x30
c00185fd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018601:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018605:	6a 00                	push   0x0
c0018607:	6a 00                	push   0x0
c0018609:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001860f:	e8 7e ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018614:	83 c4 0c             	add    esp,0xc
c0018617:	6a 00                	push   0x0
c0018619:	6a 02                	push   0x2
c001861b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018621:	e8 6c ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018626:	31 d2                	xor    edx,edx
c0018628:	89 f9                	mov    ecx,edi
c001862a:	89 f8                	mov    eax,edi
c001862c:	c1 e9 10             	shr    ecx,0x10
c001862f:	0f b6 c4             	movzx  eax,ah
c0018632:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018636:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001863a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001863e:	b9 64 00 00 00       	mov    ecx,0x64
c0018643:	89 f0                	mov    eax,esi
c0018645:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018649:	89 f0                	mov    eax,esi
c001864b:	0f b6 c4             	movzx  eax,ah
c001864e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018652:	89 f0                	mov    eax,esi
c0018654:	c1 e8 10             	shr    eax,0x10
c0018657:	f7 f1                	div    ecx
c0018659:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001865d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018661:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018665:	59                   	pop    ecx
c0018666:	5b                   	pop    ebx
c0018667:	89 fb                	mov    ebx,edi
c0018669:	6a 0b                	push   0xb
c001866b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018671:	e8 02 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	89 c5                	mov    ebp,eax
c001867b:	a8 04                	test   al,0x4
c001867d:	75 6e                	jne    c00186ed <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001867f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018683:	31 d2                	xor    edx,edx
c0018685:	0f b6 c1             	movzx  eax,cl
c0018688:	b9 0a 00 00 00       	mov    ecx,0xa
c001868d:	f7 f1                	div    ecx
c001868f:	c1 e0 04             	shl    eax,0x4
c0018692:	09 d0                	or     eax,edx
c0018694:	31 d2                	xor    edx,edx
c0018696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001869a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001869f:	f7 f1                	div    ecx
c00186a1:	c1 e0 04             	shl    eax,0x4
c00186a4:	09 d0                	or     eax,edx
c00186a6:	31 d2                	xor    edx,edx
c00186a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186ac:	0f b6 c3             	movzx  eax,bl
c00186af:	f7 f1                	div    ecx
c00186b1:	c1 e0 04             	shl    eax,0x4
c00186b4:	09 d0                	or     eax,edx
c00186b6:	31 d2                	xor    edx,edx
c00186b8:	89 c3                	mov    ebx,eax
c00186ba:	89 f0                	mov    eax,esi
c00186bc:	0f b6 c0             	movzx  eax,al
c00186bf:	f7 f1                	div    ecx
c00186c1:	c1 e0 04             	shl    eax,0x4
c00186c4:	09 d0                	or     eax,edx
c00186c6:	31 d2                	xor    edx,edx
c00186c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186d1:	f7 f1                	div    ecx
c00186d3:	c1 e0 04             	shl    eax,0x4
c00186d6:	09 d0                	or     eax,edx
c00186d8:	31 d2                	xor    edx,edx
c00186da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186e2:	f7 f1                	div    ecx
c00186e4:	c1 e0 04             	shl    eax,0x4
c00186e7:	09 d0                	or     eax,edx
c00186e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00186ed:	83 e5 02             	and    ebp,0x2
c00186f0:	75 1e                	jne    c0018710 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00186f2:	0f b6 c3             	movzx  eax,bl
c00186f5:	83 f8 0b             	cmp    eax,0xb
c00186f8:	76 10                	jbe    c001870a <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00186fa:	8d 53 f4             	lea    edx,[ebx-0xc]
c00186fd:	88 d3                	mov    bl,dl
c00186ff:	84 d2                	test   dl,dl
c0018701:	75 02                	jne    c0018705 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018703:	b3 0c                	mov    bl,0xc
c0018705:	83 cb 80             	or     ebx,0xffffff80
c0018708:	eb 06                	jmp    c0018710 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001870a:	85 c0                	test   eax,eax
c001870c:	75 02                	jne    c0018710 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001870e:	b3 0c                	mov    bl,0xc
c0018710:	0f b6 db             	movzx  ebx,bl
c0018713:	50                   	push   eax
c0018714:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018719:	52                   	push   edx
c001871a:	6a 00                	push   0x0
c001871c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018722:	e8 6b eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018727:	83 c4 0c             	add    esp,0xc
c001872a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001872f:	50                   	push   eax
c0018730:	6a 02                	push   0x2
c0018732:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018738:	e8 55 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001873d:	83 c4 0c             	add    esp,0xc
c0018740:	53                   	push   ebx
c0018741:	6a 04                	push   0x4
c0018743:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018749:	e8 44 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001874e:	83 c4 0c             	add    esp,0xc
c0018751:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018756:	52                   	push   edx
c0018757:	6a 07                	push   0x7
c0018759:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001875f:	e8 2e eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018764:	83 c4 0c             	add    esp,0xc
c0018767:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001876c:	50                   	push   eax
c001876d:	6a 08                	push   0x8
c001876f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018775:	e8 18 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001877a:	83 c4 0c             	add    esp,0xc
c001877d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018782:	55                   	push   ebp
c0018783:	6a 09                	push   0x9
c0018785:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001878b:	e8 02 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018790:	5a                   	pop    edx
c0018791:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018795:	e8 7c fb ff ff       	call   c0018316 <RTC::completeRTCRefresh()>
c001879a:	83 c4 3c             	add    esp,0x3c
c001879d:	b0 01                	mov    al,0x1
c001879f:	5b                   	pop    ebx
c00187a0:	5e                   	pop    esi
c00187a1:	5f                   	pop    edi
c00187a2:	5d                   	pop    ebp
c00187a3:	c3                   	ret    

c00187a4 <rtcIRQHandler(regs*, void*)>:
c00187a4:	53                   	push   ebx
c00187a5:	83 ec 10             	sub    esp,0x10
c00187a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187ac:	6a 0c                	push   0xc
c00187ae:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187b4:	e8 bf e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187b9:	83 c4 10             	add    esp,0x10
c00187bc:	a8 80                	test   al,0x80
c00187be:	74 24                	je     c00187e4 <rtcIRQHandler(regs*, void*)+0x40>
c00187c0:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00187c7:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00187ce:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00187d5:	75 0d                	jne    c00187e4 <rtcIRQHandler(regs*, void*)+0x40>
c00187d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00187db:	83 c4 08             	add    esp,0x8
c00187de:	5b                   	pop    ebx
c00187df:	e9 32 fb ff ff       	jmp    c0018316 <RTC::completeRTCRefresh()>
c00187e4:	83 c4 08             	add    esp,0x8
c00187e7:	5b                   	pop    ebx
c00187e8:	c3                   	ret    
c00187e9:	90                   	nop

c00187ea <RTC::RTC()>:
c00187ea:	83 ec 1c             	sub    esp,0x1c
c00187ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f1:	83 ec 08             	sub    esp,0x8
c00187f4:	68 6f 28 02 c0       	push   0xc002286f
c00187f9:	50                   	push   eax
c00187fa:	e8 3b 3a ff ff       	call   c000c23a <Clock::Clock(char const*)>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	ba 8c 28 02 c0       	mov    edx,0xc002288c
c0018807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880b:	89 10                	mov    DWORD PTR [eax],edx
c001880d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018811:	83 ec 0c             	sub    esp,0xc
c0018814:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018818:	6a 01                	push   0x1
c001881a:	68 a4 87 01 c0       	push   0xc00187a4
c001881f:	6a 08                	push   0x8
c0018821:	50                   	push   eax
c0018822:	e8 ef 3e ff ff       	call   c000c716 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018827:	83 c4 20             	add    esp,0x20
c001882a:	89 c2                	mov    edx,eax
c001882c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018830:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018836:	fa                   	cli    
c0018837:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001883c:	83 c0 01             	add    eax,0x1
c001883f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018844:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018849:	83 ec 08             	sub    esp,0x8
c001884c:	6a 0b                	push   0xb
c001884e:	50                   	push   eax
c001884f:	e8 24 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001885b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018860:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018864:	83 ca 10             	or     edx,0x10
c0018867:	0f b6 d2             	movzx  edx,dl
c001886a:	83 ec 04             	sub    esp,0x4
c001886d:	52                   	push   edx
c001886e:	6a 0b                	push   0xb
c0018870:	50                   	push   eax
c0018871:	e8 1c ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018876:	83 c4 10             	add    esp,0x10
c0018879:	83 ec 0c             	sub    esp,0xc
c001887c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018880:	e8 91 fa ff ff       	call   c0018316 <RTC::completeRTCRefresh()>
c0018885:	83 c4 10             	add    esp,0x10
c0018888:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001888d:	83 e8 01             	sub    eax,0x1
c0018890:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018895:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001889a:	85 c0                	test   eax,eax
c001889c:	75 01                	jne    c001889f <RTC::RTC()+0xb5>
c001889e:	fb                   	sti    
c001889f:	90                   	nop
c00188a0:	83 c4 1c             	add    esp,0x1c
c00188a3:	c3                   	ret    

c00188a4 <HalConsoleScroll(int, int)>:
c00188a4:	83 ec 10             	sub    esp,0x10
c00188a7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00188af:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00188b7:	90                   	nop
c00188b8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00188bd:	0f 8f e1 00 00 00    	jg     c00189a4 <HalConsoleScroll(int, int)+0x100>
c00188c3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00188cb:	90                   	nop
c00188cc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00188d4:	0f 8f be 00 00 00    	jg     c0018998 <HalConsoleScroll(int, int)+0xf4>
c00188da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188de:	89 d0                	mov    eax,edx
c00188e0:	c1 e0 02             	shl    eax,0x2
c00188e3:	01 d0                	add    eax,edx
c00188e5:	c1 e0 05             	shl    eax,0x5
c00188e8:	89 c2                	mov    edx,eax
c00188ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188ee:	01 d0                	add    eax,edx
c00188f0:	89 c2                	mov    edx,eax
c00188f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188f6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00188f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188fd:	89 d0                	mov    eax,edx
c00188ff:	c1 e0 02             	shl    eax,0x2
c0018902:	01 d0                	add    eax,edx
c0018904:	c1 e0 05             	shl    eax,0x5
c0018907:	89 c2                	mov    edx,eax
c0018909:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001890d:	01 d0                	add    eax,edx
c001890f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018919:	01 c2                	add    edx,eax
c001891b:	8a 01                	mov    al,BYTE PTR [ecx]
c001891d:	88 02                	mov    BYTE PTR [edx],al
c001891f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018924:	75 66                	jne    c001898c <HalConsoleScroll(int, int)+0xe8>
c0018926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001892a:	83 e0 01             	and    eax,0x1
c001892d:	74 39                	je     c0018968 <HalConsoleScroll(int, int)+0xc4>
c001892f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018933:	83 e0 0f             	and    eax,0xf
c0018936:	88 c2                	mov    dl,al
c0018938:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001893c:	c1 e0 04             	shl    eax,0x4
c001893f:	09 d0                	or     eax,edx
c0018941:	88 c1                	mov    cl,al
c0018943:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018947:	89 d0                	mov    eax,edx
c0018949:	c1 e0 02             	shl    eax,0x2
c001894c:	01 d0                	add    eax,edx
c001894e:	c1 e0 05             	shl    eax,0x5
c0018951:	89 c2                	mov    edx,eax
c0018953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018957:	01 d0                	add    eax,edx
c0018959:	89 c2                	mov    edx,eax
c001895b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001895f:	01 d0                	add    eax,edx
c0018961:	88 ca                	mov    dl,cl
c0018963:	88 10                	mov    BYTE PTR [eax],dl
c0018965:	eb 25                	jmp    c001898c <HalConsoleScroll(int, int)+0xe8>
c0018967:	90                   	nop
c0018968:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001896c:	89 d0                	mov    eax,edx
c001896e:	c1 e0 02             	shl    eax,0x2
c0018971:	01 d0                	add    eax,edx
c0018973:	c1 e0 05             	shl    eax,0x5
c0018976:	89 c2                	mov    edx,eax
c0018978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001897c:	01 d0                	add    eax,edx
c001897e:	89 c2                	mov    edx,eax
c0018980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018984:	01 d0                	add    eax,edx
c0018986:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018989:	8d 76 00             	lea    esi,[esi+0x0]
c001898c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018991:	e9 36 ff ff ff       	jmp    c00188cc <HalConsoleScroll(int, int)+0x28>
c0018996:	66 90                	xchg   ax,ax
c0018998:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001899d:	e9 16 ff ff ff       	jmp    c00188b8 <HalConsoleScroll(int, int)+0x14>
c00189a2:	66 90                	xchg   ax,ax
c00189a4:	90                   	nop
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	c3                   	ret    
c00189a9:	8d 76 00             	lea    esi,[esi+0x0]

c00189ac <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00189ac:	83 ec 14             	sub    esp,0x14
c00189af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189b3:	88 04 24             	mov    BYTE PTR [esp],al
c00189b6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00189b9:	0f b6 c0             	movzx  eax,al
c00189bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189c0:	89 d1                	mov    ecx,edx
c00189c2:	83 e1 0f             	and    ecx,0xf
c00189c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00189c9:	c1 e2 04             	shl    edx,0x4
c00189cc:	0f b6 d2             	movzx  edx,dl
c00189cf:	09 ca                	or     edx,ecx
c00189d1:	c1 e2 08             	shl    edx,0x8
c00189d4:	09 d0                	or     eax,edx
c00189d6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00189db:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00189e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189e7:	89 d0                	mov    eax,edx
c00189e9:	c1 e0 02             	shl    eax,0x2
c00189ec:	01 d0                	add    eax,edx
c00189ee:	c1 e0 04             	shl    eax,0x4
c00189f1:	89 c2                	mov    edx,eax
c00189f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189f7:	01 d0                	add    eax,edx
c00189f9:	01 c0                	add    eax,eax
c00189fb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00189ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a03:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018a08:	66 89 02             	mov    WORD PTR [edx],ax
c0018a0b:	90                   	nop
c0018a0c:	83 c4 14             	add    esp,0x14
c0018a0f:	c3                   	ret    

c0018a10 <HalConsoleCursorUpdate(int, int)>:
c0018a10:	83 ec 20             	sub    esp,0x20
c0018a13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a17:	89 c2                	mov    edx,eax
c0018a19:	c1 e2 02             	shl    edx,0x2
c0018a1c:	01 d0                	add    eax,edx
c0018a1e:	c1 e0 04             	shl    eax,0x4
c0018a21:	89 c2                	mov    edx,eax
c0018a23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a27:	01 d0                	add    eax,edx
c0018a29:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018a2e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018a35:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018a3a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018a3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a42:	ee                   	out    dx,al
c0018a43:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018a48:	0f b6 c0             	movzx  eax,al
c0018a4b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018a52:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018a56:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018a5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a5e:	ee                   	out    dx,al
c0018a5f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018a66:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018a6b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018a6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a73:	ee                   	out    dx,al
c0018a74:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018a79:	c1 e8 08             	shr    eax,0x8
c0018a7c:	0f b6 c0             	movzx  eax,al
c0018a7f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018a86:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018a8a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018a8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a92:	ee                   	out    dx,al
c0018a93:	90                   	nop
c0018a94:	83 c4 20             	add    esp,0x20
c0018a97:	c3                   	ret    

c0018a98 <FAT::getName()>:
c0018a98:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0018a9d:	c3                   	ret    
c0018a9e:	66 90                	xchg   ax,ax

c0018aa0 <FAT::tell(void*, unsigned long long*)>:
c0018aa0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018aa5:	75 09                	jne    c0018ab0 <FAT::tell(void*, unsigned long long*)+0x10>
c0018aa7:	b8 04 00 00 00       	mov    eax,0x4
c0018aac:	c3                   	ret    
c0018aad:	8d 76 00             	lea    esi,[esi+0x0]
c0018ab0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ab5:	75 09                	jne    c0018ac0 <FAT::tell(void*, unsigned long long*)+0x20>
c0018ab7:	b8 04 00 00 00       	mov    eax,0x4
c0018abc:	c3                   	ret    
c0018abd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ac0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ac4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ac7:	ba 00 00 00 00       	mov    edx,0x0
c0018acc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ad0:	89 01                	mov    DWORD PTR [ecx],eax
c0018ad2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ad5:	b8 00 00 00 00       	mov    eax,0x0
c0018ada:	c3                   	ret    
c0018adb:	90                   	nop

c0018adc <FAT::stat(void*, unsigned long long*)>:
c0018adc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ae1:	75 09                	jne    c0018aec <FAT::stat(void*, unsigned long long*)+0x10>
c0018ae3:	b8 04 00 00 00       	mov    eax,0x4
c0018ae8:	c3                   	ret    
c0018ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0018aec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018af1:	75 09                	jne    c0018afc <FAT::stat(void*, unsigned long long*)+0x20>
c0018af3:	b8 04 00 00 00       	mov    eax,0x4
c0018af8:	c3                   	ret    
c0018af9:	8d 76 00             	lea    esi,[esi+0x0]
c0018afc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b03:	ba 00 00 00 00       	mov    edx,0x0
c0018b08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b0c:	89 01                	mov    DWORD PTR [ecx],eax
c0018b0e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b11:	b8 00 00 00 00       	mov    eax,0x0
c0018b16:	c3                   	ret    
c0018b17:	90                   	nop

c0018b18 <FAT::~FAT()>:
c0018b18:	83 ec 0c             	sub    esp,0xc
c0018b1b:	ba 0c 29 02 c0       	mov    edx,0xc002290c
c0018b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b24:	89 10                	mov    DWORD PTR [eax],edx
c0018b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b2a:	83 ec 0c             	sub    esp,0xc
c0018b2d:	50                   	push   eax
c0018b2e:	e8 31 2a ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c0018b33:	83 c4 10             	add    esp,0x10
c0018b36:	90                   	nop
c0018b37:	83 c4 0c             	add    esp,0xc
c0018b3a:	c3                   	ret    
c0018b3b:	90                   	nop

c0018b3c <FAT::~FAT()>:
c0018b3c:	83 ec 0c             	sub    esp,0xc
c0018b3f:	83 ec 0c             	sub    esp,0xc
c0018b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b46:	e8 cd ff ff ff       	call   c0018b18 <FAT::~FAT()>
c0018b4b:	83 c4 10             	add    esp,0x10
c0018b4e:	83 ec 08             	sub    esp,0x8
c0018b51:	6a 08                	push   0x8
c0018b53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b57:	e8 bc 1c ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018b5c:	83 c4 10             	add    esp,0x10
c0018b5f:	83 c4 0c             	add    esp,0xc
c0018b62:	c3                   	ret    
c0018b63:	90                   	nop

c0018b64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018b64:	83 ec 1c             	sub    esp,0x1c
c0018b67:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018b6e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018b73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b77:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b7e:	83 f8 ff             	cmp    eax,0xffffffff
c0018b81:	75 35                	jne    c0018bb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018b83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b87:	88 c2                	mov    dl,al
c0018b89:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b8e:	01 d0                	add    eax,edx
c0018b90:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b94:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b9e:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018ba5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018baa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018bae:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018bb5:	eb 19                	jmp    c0018bd0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018bb7:	90                   	nop
c0018bb8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bbc:	88 c2                	mov    dl,al
c0018bbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bc2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bc9:	01 d0                	add    eax,edx
c0018bcb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bcf:	90                   	nop
c0018bd0:	83 ec 04             	sub    esp,0x4
c0018bd3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bd7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bdb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018bdf:	50                   	push   eax
c0018be0:	e8 ea c3 fe ff       	call   c0004fcf <f_getlabel>
c0018be5:	83 c4 10             	add    esp,0x10
c0018be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018bf1:	75 09                	jne    c0018bfc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018bf3:	b8 00 00 00 00       	mov    eax,0x0
c0018bf8:	eb 0a                	jmp    c0018c04 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018bfa:	66 90                	xchg   ax,ax
c0018bfc:	b8 01 00 00 00       	mov    eax,0x1
c0018c01:	8d 76 00             	lea    esi,[esi+0x0]
c0018c04:	83 c4 1c             	add    esp,0x1c
c0018c07:	c3                   	ret    

c0018c08 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018c08:	57                   	push   edi
c0018c09:	83 ec 58             	sub    esp,0x58
c0018c0c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018c14:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c18:	b8 00 00 00 00       	mov    eax,0x0
c0018c1d:	b9 0f 00 00 00       	mov    ecx,0xf
c0018c22:	fc                   	cld    
c0018c23:	89 d7                	mov    edi,edx
c0018c25:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018c27:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c2b:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c32:	83 f8 ff             	cmp    eax,0xffffffff
c0018c35:	75 35                	jne    c0018c6c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018c37:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c3b:	88 c2                	mov    dl,al
c0018c3d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c42:	01 d0                	add    eax,edx
c0018c44:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c48:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c4e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c52:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c59:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c5e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018c62:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c69:	eb 19                	jmp    c0018c84 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018c6b:	90                   	nop
c0018c6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c70:	88 c2                	mov    dl,al
c0018c72:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c76:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c7d:	01 d0                	add    eax,edx
c0018c7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c83:	90                   	nop
c0018c84:	83 ec 08             	sub    esp,0x8
c0018c87:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018c8b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c8f:	50                   	push   eax
c0018c90:	e8 ab 7b fe ff       	call   c0000840 <strcat>
c0018c95:	83 c4 10             	add    esp,0x10
c0018c98:	83 ec 0c             	sub    esp,0xc
c0018c9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c9f:	50                   	push   eax
c0018ca0:	e8 7b c4 fe ff       	call   c0005120 <f_setlabel>
c0018ca5:	83 c4 10             	add    esp,0x10
c0018ca8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018cac:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018cb1:	75 09                	jne    c0018cbc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018cb3:	b8 00 00 00 00       	mov    eax,0x0
c0018cb8:	eb 0a                	jmp    c0018cc4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018cba:	66 90                	xchg   ax,ax
c0018cbc:	b8 01 00 00 00       	mov    eax,0x1
c0018cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc4:	83 c4 58             	add    esp,0x58
c0018cc7:	5f                   	pop    edi
c0018cc8:	c3                   	ret    
c0018cc9:	90                   	nop
c0018cca:	66 90                	xchg   ax,ax

c0018ccc <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018ccc:	83 ec 2c             	sub    esp,0x2c
c0018ccf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018cd7:	83 ec 08             	sub    esp,0x8
c0018cda:	68 e4 28 02 c0       	push   0xc00228e4
c0018cdf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ce3:	e8 68 7a fe ff       	call   c0000750 <strcmp>
c0018ce8:	83 c4 10             	add    esp,0x10
c0018ceb:	85 c0                	test   eax,eax
c0018ced:	0f 94 c0             	sete   al
c0018cf0:	0f b6 c0             	movzx  eax,al
c0018cf3:	85 c0                	test   eax,eax
c0018cf5:	74 0d                	je     c0018d04 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018cf7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018cff:	e9 c0 00 00 00       	jmp    c0018dc4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d04:	83 ec 08             	sub    esp,0x8
c0018d07:	68 d6 28 02 c0       	push   0xc00228d6
c0018d0c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d10:	e8 3b 7a fe ff       	call   c0000750 <strcmp>
c0018d15:	83 c4 10             	add    esp,0x10
c0018d18:	85 c0                	test   eax,eax
c0018d1a:	0f 94 c0             	sete   al
c0018d1d:	0f b6 c0             	movzx  eax,al
c0018d20:	85 c0                	test   eax,eax
c0018d22:	74 10                	je     c0018d34 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018d24:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d2c:	e9 93 00 00 00       	jmp    c0018dc4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d31:	8d 76 00             	lea    esi,[esi+0x0]
c0018d34:	83 ec 08             	sub    esp,0x8
c0018d37:	68 dc 28 02 c0       	push   0xc00228dc
c0018d3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d40:	e8 0b 7a fe ff       	call   c0000750 <strcmp>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	85 c0                	test   eax,eax
c0018d4a:	0f 94 c0             	sete   al
c0018d4d:	0f b6 c0             	movzx  eax,al
c0018d50:	85 c0                	test   eax,eax
c0018d52:	74 0c                	je     c0018d60 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018d54:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d5c:	eb 66                	jmp    c0018dc4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d5e:	66 90                	xchg   ax,ax
c0018d60:	83 ec 08             	sub    esp,0x8
c0018d63:	68 bc 00 02 c0       	push   0xc00200bc
c0018d68:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d6c:	e8 df 79 fe ff       	call   c0000750 <strcmp>
c0018d71:	83 c4 10             	add    esp,0x10
c0018d74:	85 c0                	test   eax,eax
c0018d76:	0f 94 c0             	sete   al
c0018d79:	0f b6 c0             	movzx  eax,al
c0018d7c:	85 c0                	test   eax,eax
c0018d7e:	74 0c                	je     c0018d8c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018d80:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018d88:	eb 3a                	jmp    c0018dc4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d8a:	66 90                	xchg   ax,ax
c0018d8c:	83 ec 08             	sub    esp,0x8
c0018d8f:	68 e2 28 02 c0       	push   0xc00228e2
c0018d94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d98:	e8 b3 79 fe ff       	call   c0000750 <strcmp>
c0018d9d:	83 c4 10             	add    esp,0x10
c0018da0:	85 c0                	test   eax,eax
c0018da2:	0f 94 c0             	sete   al
c0018da5:	0f b6 c0             	movzx  eax,al
c0018da8:	85 c0                	test   eax,eax
c0018daa:	74 0c                	je     c0018db8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018dac:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018db4:	eb 0e                	jmp    c0018dc4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018db6:	66 90                	xchg   ax,ax
c0018db8:	b8 08 00 00 00       	mov    eax,0x8
c0018dbd:	e9 ea 00 00 00       	jmp    c0018eac <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018dc2:	66 90                	xchg   ax,ax
c0018dc4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018dcb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018dd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dd4:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0018dde:	75 34                	jne    c0018e14 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018de0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018de4:	88 c2                	mov    dl,al
c0018de6:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018deb:	01 d0                	add    eax,edx
c0018ded:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018df1:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018df7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dfb:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e02:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e07:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018e0b:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e12:	eb 18                	jmp    c0018e2c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018e14:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e18:	88 c2                	mov    dl,al
c0018e1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e1e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e25:	01 d0                	add    eax,edx
c0018e27:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e2b:	90                   	nop
c0018e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e30:	88 04 24             	mov    BYTE PTR [esp],al
c0018e33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018e43:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018e48:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e50:	83 ec 0c             	sub    esp,0xc
c0018e53:	68 00 20 00 00       	push   0x2000
c0018e58:	e8 59 ec fe ff       	call   c0007ab6 <malloc>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e64:	68 00 20 00 00       	push   0x2000
c0018e69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e6d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e71:	50                   	push   eax
c0018e72:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e76:	50                   	push   eax
c0018e77:	e8 a1 c5 fe ff       	call   c000541d <f_mkfs>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e88:	75 0a                	jne    c0018e94 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018e8a:	b8 00 00 00 00       	mov    eax,0x0
c0018e8f:	eb 1b                	jmp    c0018eac <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e91:	8d 76 00             	lea    esi,[esi+0x0]
c0018e94:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018e99:	75 09                	jne    c0018ea4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018e9b:	b8 09 00 00 00       	mov    eax,0x9
c0018ea0:	eb 0a                	jmp    c0018eac <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018ea2:	66 90                	xchg   ax,ax
c0018ea4:	b8 01 00 00 00       	mov    eax,0x1
c0018ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0018eac:	83 c4 2c             	add    esp,0x2c
c0018eaf:	c3                   	ret    

c0018eb0 <FAT::tryMount(LogicalDisk*, int)>:
c0018eb0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018eb6:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ebb:	83 f8 14             	cmp    eax,0x14
c0018ebe:	75 18                	jne    c0018ed8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018ec0:	83 ec 0c             	sub    esp,0xc
c0018ec3:	68 e8 28 02 c0       	push   0xc00228e8
c0018ec8:	e8 cc 84 ff ff       	call   c0011399 <KePanic(char const*)>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	b0 00                	mov    al,0x0
c0018ed2:	e9 ed 01 00 00       	jmp    c00190c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ed7:	90                   	nop
c0018ed8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018edf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018ee5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018eeb:	3d 00 02 00 00       	cmp    eax,0x200
c0018ef0:	74 0a                	je     c0018efc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018ef2:	b0 00                	mov    al,0x0
c0018ef4:	e9 cb 01 00 00       	jmp    c00190c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0018efc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018f04:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f0b:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018f12:	83 f8 ff             	cmp    eax,0xffffffff
c0018f15:	74 09                	je     c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018f17:	b0 01                	mov    al,0x1
c0018f19:	e9 a6 01 00 00       	jmp    c00190c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f1e:	66 90                	xchg   ax,ax
c0018f20:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018f2a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018f32:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018f39:	88 c2                	mov    dl,al
c0018f3b:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f40:	01 d0                	add    eax,edx
c0018f42:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018f49:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018f4f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f56:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018f5d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f62:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018f69:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018f70:	83 ec 0c             	sub    esp,0xc
c0018f73:	68 34 02 00 00       	push   0x234
c0018f78:	e8 39 eb fe ff       	call   c0007ab6 <malloc>
c0018f7d:	83 c4 10             	add    esp,0x10
c0018f80:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018f87:	83 ec 04             	sub    esp,0x4
c0018f8a:	6a 00                	push   0x0
c0018f8c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f93:	50                   	push   eax
c0018f94:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f9b:	e8 58 ac fe ff       	call   c0003bf8 <f_mount>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018faa:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018fb2:	74 1c                	je     c0018fd0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018fb4:	83 ec 0c             	sub    esp,0xc
c0018fb7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018fbe:	e8 13 eb fe ff       	call   c0007ad6 <rfree>
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	b0 00                	mov    al,0x0
c0018fc8:	e9 f7 00 00 00       	jmp    c00190c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd0:	83 ec 04             	sub    esp,0x4
c0018fd3:	68 00 01 00 00       	push   0x100
c0018fd8:	6a 00                	push   0x0
c0018fda:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018fe1:	50                   	push   eax
c0018fe2:	e8 09 75 fe ff       	call   c00004f0 <memset>
c0018fe7:	83 c4 10             	add    esp,0x10
c0018fea:	83 ec 08             	sub    esp,0x8
c0018fed:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ff4:	50                   	push   eax
c0018ff5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ffc:	50                   	push   eax
c0018ffd:	e8 3e 78 fe ff       	call   c0000840 <strcat>
c0019002:	83 c4 10             	add    esp,0x10
c0019005:	83 ec 08             	sub    esp,0x8
c0019008:	68 f6 28 02 c0       	push   0xc00228f6
c001900d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019014:	50                   	push   eax
c0019015:	e8 26 78 fe ff       	call   c0000840 <strcat>
c001901a:	83 c4 10             	add    esp,0x10
c001901d:	83 ec 04             	sub    esp,0x4
c0019020:	6a 01                	push   0x1
c0019022:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019029:	50                   	push   eax
c001902a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001902e:	50                   	push   eax
c001902f:	e8 26 ac fe ff       	call   c0003c5a <f_open>
c0019034:	83 c4 10             	add    esp,0x10
c0019037:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001903e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019045:	85 c0                	test   eax,eax
c0019047:	74 0b                	je     c0019054 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019049:	78 31                	js     c001907c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001904b:	83 e8 04             	sub    eax,0x4
c001904e:	83 f8 01             	cmp    eax,0x1
c0019051:	77 29                	ja     c001907c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019053:	90                   	nop
c0019054:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001905c:	83 ec 0c             	sub    esp,0xc
c001905f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019063:	50                   	push   eax
c0019064:	e8 c0 b3 fe ff       	call   c0004429 <f_close>
c0019069:	83 c4 10             	add    esp,0x10
c001906c:	90                   	nop
c001906d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019075:	85 c0                	test   eax,eax
c0019077:	74 43                	je     c00190bc <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019079:	eb 31                	jmp    c00190ac <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001907b:	90                   	nop
c001907c:	83 ec 0c             	sub    esp,0xc
c001907f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019086:	e8 4b ea fe ff       	call   c0007ad6 <rfree>
c001908b:	83 c4 10             	add    esp,0x10
c001908e:	83 ec 04             	sub    esp,0x4
c0019091:	6a 00                	push   0x0
c0019093:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001909a:	50                   	push   eax
c001909b:	6a 00                	push   0x0
c001909d:	e8 56 ab fe ff       	call   c0003bf8 <f_mount>
c00190a2:	83 c4 10             	add    esp,0x10
c00190a5:	b0 00                	mov    al,0x0
c00190a7:	eb 1b                	jmp    c00190c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00190a9:	8d 76 00             	lea    esi,[esi+0x0]
c00190ac:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00190b1:	83 c0 01             	add    eax,0x1
c00190b4:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c00190b9:	8d 76 00             	lea    esi,[esi+0x0]
c00190bc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00190c3:	90                   	nop
c00190c4:	81 c4 4c 03 00 00    	add    esp,0x34c
c00190ca:	c3                   	ret    
c00190cb:	90                   	nop

c00190cc <FAT::allocateSwapfile(char const*, int)>:
c00190cc:	55                   	push   ebp
c00190cd:	57                   	push   edi
c00190ce:	56                   	push   esi
c00190cf:	53                   	push   ebx
c00190d0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00190d6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00190e1:	83 ec 0c             	sub    esp,0xc
c00190e4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00190eb:	e8 c6 e9 fe ff       	call   c0007ab6 <malloc>
c00190f0:	83 c4 10             	add    esp,0x10
c00190f3:	89 c7                	mov    edi,eax
c00190f5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00190fa:	83 ec 04             	sub    esp,0x4
c00190fd:	50                   	push   eax
c00190fe:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019105:	57                   	push   edi
c0019106:	e8 3d 27 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c001910b:	83 c4 10             	add    esp,0x10
c001910e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019115:	83 ec 04             	sub    esp,0x4
c0019118:	8d 44 24 13          	lea    eax,[esp+0x13]
c001911c:	50                   	push   eax
c001911d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019121:	50                   	push   eax
c0019122:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019129:	e8 e4 2a ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c001912e:	83 c4 10             	add    esp,0x10
c0019131:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019138:	c1 e0 14             	shl    eax,0x14
c001913b:	89 c7                	mov    edi,eax
c001913d:	89 c5                	mov    ebp,eax
c001913f:	c1 fd 1f             	sar    ebp,0x1f
c0019142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019146:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001914a:	89 f9                	mov    ecx,edi
c001914c:	31 c1                	xor    ecx,eax
c001914e:	89 cb                	mov    ebx,ecx
c0019150:	89 e9                	mov    ecx,ebp
c0019152:	31 d1                	xor    ecx,edx
c0019154:	89 ce                	mov    esi,ecx
c0019156:	89 f0                	mov    eax,esi
c0019158:	09 d8                	or     eax,ebx
c001915a:	0f 84 9c 00 00 00    	je     c00191fc <FAT::allocateSwapfile(char const*, int)+0x130>
c0019160:	83 ec 0c             	sub    esp,0xc
c0019163:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001916a:	e8 6f 29 ff ff       	call   c000bade <File::unlink()>
c001916f:	83 c4 10             	add    esp,0x10
c0019172:	83 ec 08             	sub    esp,0x8
c0019175:	6a 12                	push   0x12
c0019177:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001917e:	e8 8d 27 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c0019183:	83 c4 10             	add    esp,0x10
c0019186:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001918d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019193:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001919a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00191a1:	c1 e0 14             	shl    eax,0x14
c00191a4:	83 ec 04             	sub    esp,0x4
c00191a7:	6a 01                	push   0x1
c00191a9:	50                   	push   eax
c00191aa:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00191b1:	e8 fa c0 fe ff       	call   c00052b0 <f_expand>
c00191b6:	83 c4 10             	add    esp,0x10
c00191b9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00191c2:	83 c0 10             	add    eax,0x10
c00191c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00191c7:	83 ec 0c             	sub    esp,0xc
c00191ca:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191ce:	52                   	push   edx
c00191cf:	8d 54 24 30          	lea    edx,[esp+0x30]
c00191d3:	52                   	push   edx
c00191d4:	6a 00                	push   0x0
c00191d6:	68 00 04 00 00       	push   0x400
c00191db:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00191e2:	ff d0                	call   eax
c00191e4:	83 c4 20             	add    esp,0x20
c00191e7:	83 ec 0c             	sub    esp,0xc
c00191ea:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191f1:	e8 78 27 ff ff       	call   c000b96e <File::close()>
c00191f6:	83 c4 10             	add    esp,0x10
c00191f9:	8d 76 00             	lea    esi,[esi+0x0]
c00191fc:	83 ec 08             	sub    esp,0x8
c00191ff:	6a 01                	push   0x1
c0019201:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019208:	e8 03 27 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019217:	8b 00                	mov    eax,DWORD PTR [eax]
c0019219:	83 c0 0c             	add    eax,0xc
c001921c:	8b 00                	mov    eax,DWORD PTR [eax]
c001921e:	83 ec 0c             	sub    esp,0xc
c0019221:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019225:	52                   	push   edx
c0019226:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001922a:	52                   	push   edx
c001922b:	6a 00                	push   0x0
c001922d:	6a 04                	push   0x4
c001922f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019236:	ff d0                	call   eax
c0019238:	83 c4 20             	add    esp,0x20
c001923b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019242:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019248:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001924f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019256:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019259:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019260:	83 ec 0c             	sub    esp,0xc
c0019263:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001926a:	e8 ff 26 ff ff       	call   c000b96e <File::close()>
c001926f:	83 c4 10             	add    esp,0x10
c0019272:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019279:	ba 00 00 00 00       	mov    edx,0x0
c001927e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019284:	5b                   	pop    ebx
c0019285:	5e                   	pop    esi
c0019286:	5f                   	pop    edi
c0019287:	5d                   	pop    ebp
c0019288:	c3                   	ret    
c0019289:	90                   	nop
c001928a:	66 90                	xchg   ax,ax

c001928c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001928c:	57                   	push   edi
c001928d:	56                   	push   esi
c001928e:	53                   	push   ebx
c001928f:	81 ec 50 02 00 00    	sub    esp,0x250
c0019295:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001929d:	74 0d                	je     c00192ac <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001929f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00192a7:	75 0f                	jne    c00192b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00192a9:	8d 76 00             	lea    esi,[esi+0x0]
c00192ac:	b8 04 00 00 00       	mov    eax,0x4
c00192b1:	e9 3a 01 00 00       	jmp    c00193f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192b6:	66 90                	xchg   ax,ax
c00192b8:	83 ec 08             	sub    esp,0x8
c00192bb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00192c2:	50                   	push   eax
c00192c3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00192ca:	e8 27 b4 fe ff       	call   c00046f6 <f_readdir>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00192d9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00192e0:	83 ec 0c             	sub    esp,0xc
c00192e3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00192ea:	83 c0 16             	add    eax,0x16
c00192ed:	50                   	push   eax
c00192ee:	e8 7d 72 fe ff       	call   c0000570 <strlen>
c00192f3:	83 c4 10             	add    esp,0x10
c00192f6:	ba 00 00 00 00       	mov    edx,0x0
c00192fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192ff:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019303:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001930a:	0f b6 c0             	movzx  eax,al
c001930d:	83 e0 10             	and    eax,0x10
c0019310:	74 0a                	je     c001931c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019312:	b8 02 00 00 00       	mov    eax,0x2
c0019317:	eb 0b                	jmp    c0019324 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019319:	8d 76 00             	lea    esi,[esi+0x0]
c001931c:	b8 01 00 00 00       	mov    eax,0x1
c0019321:	8d 76 00             	lea    esi,[esi+0x0]
c0019324:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019328:	83 ec 08             	sub    esp,0x8
c001932b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019332:	83 c0 16             	add    eax,0x16
c0019335:	50                   	push   eax
c0019336:	8d 44 24 14          	lea    eax,[esp+0x14]
c001933a:	83 c0 10             	add    eax,0x10
c001933d:	50                   	push   eax
c001933e:	e8 fd 72 fe ff       	call   c0000640 <strcpy>
c0019343:	83 c4 10             	add    esp,0x10
c0019346:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001934d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019354:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019358:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001935f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019366:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001936d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019374:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001937b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019382:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019389:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019390:	89 c6                	mov    esi,eax
c0019392:	89 d7                	mov    edi,edx
c0019394:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019396:	89 c8                	mov    eax,ecx
c0019398:	89 fa                	mov    edx,edi
c001939a:	89 f3                	mov    ebx,esi
c001939c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00193a3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00193aa:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00193b1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00193b8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00193be:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00193c5:	0f be c0             	movsx  eax,al
c00193c8:	85 c0                	test   eax,eax
c00193ca:	75 08                	jne    c00193d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00193cc:	b8 07 00 00 00       	mov    eax,0x7
c00193d1:	eb 1d                	jmp    c00193f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00193d3:	90                   	nop
c00193d4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00193db:	85 c0                	test   eax,eax
c00193dd:	75 09                	jne    c00193e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00193df:	b8 00 00 00 00       	mov    eax,0x0
c00193e4:	eb 0a                	jmp    c00193f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00193e6:	66 90                	xchg   ax,ax
c00193e8:	b8 01 00 00 00       	mov    eax,0x1
c00193ed:	8d 76 00             	lea    esi,[esi+0x0]
c00193f0:	81 c4 50 02 00 00    	add    esp,0x250
c00193f6:	5b                   	pop    ebx
c00193f7:	5e                   	pop    esi
c00193f8:	5f                   	pop    edi
c00193f9:	c3                   	ret    
c00193fa:	66 90                	xchg   ax,ax

c00193fc <FAT::read(void*, unsigned long, void*, int*)>:
c00193fc:	83 ec 1c             	sub    esp,0x1c
c00193ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019404:	74 0a                	je     c0019410 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019406:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001940b:	75 0b                	jne    c0019418 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001940d:	8d 76 00             	lea    esi,[esi+0x0]
c0019410:	b8 04 00 00 00       	mov    eax,0x4
c0019415:	eb 41                	jmp    c0019458 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019417:	90                   	nop
c0019418:	8d 44 24 08          	lea    eax,[esp+0x8]
c001941c:	50                   	push   eax
c001941d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019421:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019425:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019429:	e8 ef aa fe ff       	call   c0003f1d <f_read>
c001942e:	83 c4 10             	add    esp,0x10
c0019431:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019435:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019439:	89 c2                	mov    edx,eax
c001943b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001943f:	89 10                	mov    DWORD PTR [eax],edx
c0019441:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019445:	85 c0                	test   eax,eax
c0019447:	75 07                	jne    c0019450 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019449:	b8 00 00 00 00       	mov    eax,0x0
c001944e:	eb 08                	jmp    c0019458 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019450:	b8 01 00 00 00       	mov    eax,0x1
c0019455:	8d 76 00             	lea    esi,[esi+0x0]
c0019458:	83 c4 1c             	add    esp,0x1c
c001945b:	c3                   	ret    

c001945c <FAT::write(void*, unsigned long, void*, int*)>:
c001945c:	83 ec 1c             	sub    esp,0x1c
c001945f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019464:	74 0a                	je     c0019470 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019466:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001946b:	75 0b                	jne    c0019478 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001946d:	8d 76 00             	lea    esi,[esi+0x0]
c0019470:	b8 04 00 00 00       	mov    eax,0x4
c0019475:	eb 41                	jmp    c00194b8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019477:	90                   	nop
c0019478:	8d 44 24 08          	lea    eax,[esp+0x8]
c001947c:	50                   	push   eax
c001947d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019481:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019485:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019489:	e8 8e ac fe ff       	call   c000411c <f_write>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019495:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019499:	89 c2                	mov    edx,eax
c001949b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001949f:	89 10                	mov    DWORD PTR [eax],edx
c00194a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194a5:	85 c0                	test   eax,eax
c00194a7:	75 07                	jne    c00194b0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00194a9:	b8 00 00 00 00       	mov    eax,0x0
c00194ae:	eb 08                	jmp    c00194b8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00194b0:	b8 01 00 00 00       	mov    eax,0x1
c00194b5:	8d 76 00             	lea    esi,[esi+0x0]
c00194b8:	83 c4 1c             	add    esp,0x1c
c00194bb:	c3                   	ret    

c00194bc <FAT::close(void*)>:
c00194bc:	83 ec 1c             	sub    esp,0x1c
c00194bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194c4:	75 0a                	jne    c00194d0 <FAT::close(void*)+0x14>
c00194c6:	b8 04 00 00 00       	mov    eax,0x4
c00194cb:	eb 3f                	jmp    c001950c <FAT::close(void*)+0x50>
c00194cd:	8d 76 00             	lea    esi,[esi+0x0]
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194d7:	e8 4d af fe ff       	call   c0004429 <f_close>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194e3:	83 ec 0c             	sub    esp,0xc
c00194e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194ea:	e8 d7 e5 fe ff       	call   c0007ac6 <free>
c00194ef:	83 c4 10             	add    esp,0x10
c00194f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194f6:	85 c0                	test   eax,eax
c00194f8:	75 0a                	jne    c0019504 <FAT::close(void*)+0x48>
c00194fa:	b8 00 00 00 00       	mov    eax,0x0
c00194ff:	eb 0b                	jmp    c001950c <FAT::close(void*)+0x50>
c0019501:	8d 76 00             	lea    esi,[esi+0x0]
c0019504:	b8 01 00 00 00       	mov    eax,0x1
c0019509:	8d 76 00             	lea    esi,[esi+0x0]
c001950c:	83 c4 1c             	add    esp,0x1c
c001950f:	c3                   	ret    

c0019510 <FAT::closeDir(void*)>:
c0019510:	83 ec 1c             	sub    esp,0x1c
c0019513:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019518:	75 0a                	jne    c0019524 <FAT::closeDir(void*)+0x14>
c001951a:	b8 04 00 00 00       	mov    eax,0x4
c001951f:	eb 3f                	jmp    c0019560 <FAT::closeDir(void*)+0x50>
c0019521:	8d 76 00             	lea    esi,[esi+0x0]
c0019524:	83 ec 0c             	sub    esp,0xc
c0019527:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001952b:	e8 a4 b1 fe ff       	call   c00046d4 <f_closedir>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019537:	83 ec 0c             	sub    esp,0xc
c001953a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001953e:	e8 83 e5 fe ff       	call   c0007ac6 <free>
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001954a:	85 c0                	test   eax,eax
c001954c:	75 0a                	jne    c0019558 <FAT::closeDir(void*)+0x48>
c001954e:	b8 00 00 00 00       	mov    eax,0x0
c0019553:	eb 0b                	jmp    c0019560 <FAT::closeDir(void*)+0x50>
c0019555:	8d 76 00             	lea    esi,[esi+0x0]
c0019558:	b8 01 00 00 00       	mov    eax,0x1
c001955d:	8d 76 00             	lea    esi,[esi+0x0]
c0019560:	83 c4 1c             	add    esp,0x1c
c0019563:	c3                   	ret    

c0019564 <FAT::truncate(void*, unsigned long long)>:
c0019564:	83 ec 2c             	sub    esp,0x2c
c0019567:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001956b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001956f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019573:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019577:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001957c:	75 0a                	jne    c0019588 <FAT::truncate(void*, unsigned long long)+0x24>
c001957e:	b8 04 00 00 00       	mov    eax,0x4
c0019583:	eb 47                	jmp    c00195cc <FAT::truncate(void*, unsigned long long)+0x68>
c0019585:	8d 76 00             	lea    esi,[esi+0x0]
c0019588:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001958c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001958f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019593:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001959b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001959f:	83 ec 08             	sub    esp,0x8
c00195a2:	50                   	push   eax
c00195a3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195a7:	e8 ac ae fe ff       	call   c0004458 <f_lseek>
c00195ac:	83 c4 10             	add    esp,0x10
c00195af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195b7:	85 c0                	test   eax,eax
c00195b9:	75 09                	jne    c00195c4 <FAT::truncate(void*, unsigned long long)+0x60>
c00195bb:	b8 00 00 00 00       	mov    eax,0x0
c00195c0:	eb 0a                	jmp    c00195cc <FAT::truncate(void*, unsigned long long)+0x68>
c00195c2:	66 90                	xchg   ax,ax
c00195c4:	b8 01 00 00 00       	mov    eax,0x1
c00195c9:	8d 76 00             	lea    esi,[esi+0x0]
c00195cc:	83 c4 2c             	add    esp,0x2c
c00195cf:	c3                   	ret    

c00195d0 <FAT::seek(void*, unsigned long long)>:
c00195d0:	83 ec 2c             	sub    esp,0x2c
c00195d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195e3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00195e8:	75 0a                	jne    c00195f4 <FAT::seek(void*, unsigned long long)+0x24>
c00195ea:	b8 04 00 00 00       	mov    eax,0x4
c00195ef:	eb 33                	jmp    c0019624 <FAT::seek(void*, unsigned long long)+0x54>
c00195f1:	8d 76 00             	lea    esi,[esi+0x0]
c00195f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195f8:	83 ec 08             	sub    esp,0x8
c00195fb:	50                   	push   eax
c00195fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019600:	e8 53 ae fe ff       	call   c0004458 <f_lseek>
c0019605:	83 c4 10             	add    esp,0x10
c0019608:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001960c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019610:	85 c0                	test   eax,eax
c0019612:	75 08                	jne    c001961c <FAT::seek(void*, unsigned long long)+0x4c>
c0019614:	b8 00 00 00 00       	mov    eax,0x0
c0019619:	eb 09                	jmp    c0019624 <FAT::seek(void*, unsigned long long)+0x54>
c001961b:	90                   	nop
c001961c:	b8 01 00 00 00       	mov    eax,0x1
c0019621:	8d 76 00             	lea    esi,[esi+0x0]
c0019624:	83 c4 2c             	add    esp,0x2c
c0019627:	c3                   	ret    

c0019628 <fatWrapperReadDisk>:
c0019628:	53                   	push   ebx
c0019629:	83 ec 18             	sub    esp,0x18
c001962c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019630:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019634:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019639:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019640:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019644:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019648:	ba 00 00 00 00       	mov    edx,0x0
c001964d:	83 ec 0c             	sub    esp,0xc
c0019650:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019654:	53                   	push   ebx
c0019655:	52                   	push   edx
c0019656:	50                   	push   eax
c0019657:	51                   	push   ecx
c0019658:	e8 ef 44 ff ff       	call   c000db4c <LogicalDisk::read(unsigned long long, int, void*)>
c001965d:	83 c4 20             	add    esp,0x20
c0019660:	83 c4 18             	add    esp,0x18
c0019663:	5b                   	pop    ebx
c0019664:	c3                   	ret    
c0019665:	8d 76 00             	lea    esi,[esi+0x0]

c0019668 <fatWrapperWriteDisk>:
c0019668:	53                   	push   ebx
c0019669:	83 ec 18             	sub    esp,0x18
c001966c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019670:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019674:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019679:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019680:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019684:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019688:	ba 00 00 00 00       	mov    edx,0x0
c001968d:	83 ec 0c             	sub    esp,0xc
c0019690:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019694:	53                   	push   ebx
c0019695:	52                   	push   edx
c0019696:	50                   	push   eax
c0019697:	51                   	push   ecx
c0019698:	e8 1b 45 ff ff       	call   c000dbb8 <LogicalDisk::write(unsigned long long, int, void*)>
c001969d:	83 c4 20             	add    esp,0x20
c00196a0:	83 c4 18             	add    esp,0x18
c00196a3:	5b                   	pop    ebx
c00196a4:	c3                   	ret    
c00196a5:	8d 76 00             	lea    esi,[esi+0x0]

c00196a8 <fatWrapperIoctl>:
c00196a8:	53                   	push   ebx
c00196a9:	83 ec 28             	sub    esp,0x28
c00196ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00196b4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00196b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00196bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196c1:	83 f8 02             	cmp    eax,0x2
c00196c4:	75 32                	jne    c00196f8 <fatWrapperIoctl+0x50>
c00196c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196ce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196d3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00196da:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00196e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196ea:	66 89 02             	mov    WORD PTR [edx],ax
c00196ed:	b8 00 00 00 00       	mov    eax,0x0
c00196f2:	e9 c5 00 00 00       	jmp    c00197bc <fatWrapperIoctl+0x114>
c00196f7:	90                   	nop
c00196f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196fd:	83 f8 01             	cmp    eax,0x1
c0019700:	75 6a                	jne    c001976c <fatWrapperIoctl+0xc4>
c0019702:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019706:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001970a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001970f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019716:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001971c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019722:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019728:	89 c8                	mov    eax,ecx
c001972a:	89 da                	mov    edx,ebx
c001972c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019730:	c1 e0 0a             	shl    eax,0xa
c0019733:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019738:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001973f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019745:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001974b:	89 cb                	mov    ebx,ecx
c001974d:	c1 fb 1f             	sar    ebx,0x1f
c0019750:	53                   	push   ebx
c0019751:	51                   	push   ecx
c0019752:	52                   	push   edx
c0019753:	50                   	push   eax
c0019754:	e8 77 5b 00 00       	call   c001f2d0 <__udivdi3>
c0019759:	83 c4 10             	add    esp,0x10
c001975c:	89 c2                	mov    edx,eax
c001975e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019762:	89 10                	mov    DWORD PTR [eax],edx
c0019764:	b8 00 00 00 00       	mov    eax,0x0
c0019769:	eb 51                	jmp    c00197bc <fatWrapperIoctl+0x114>
c001976b:	90                   	nop
c001976c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019771:	85 c0                	test   eax,eax
c0019773:	75 07                	jne    c001977c <fatWrapperIoctl+0xd4>
c0019775:	b8 00 00 00 00       	mov    eax,0x0
c001977a:	eb 40                	jmp    c00197bc <fatWrapperIoctl+0x114>
c001977c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019781:	83 f8 03             	cmp    eax,0x3
c0019784:	75 1a                	jne    c00197a0 <fatWrapperIoctl+0xf8>
c0019786:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001978a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001978e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019792:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019798:	b8 00 00 00 00       	mov    eax,0x0
c001979d:	eb 1d                	jmp    c00197bc <fatWrapperIoctl+0x114>
c001979f:	90                   	nop
c00197a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197a5:	83 f8 04             	cmp    eax,0x4
c00197a8:	75 0a                	jne    c00197b4 <fatWrapperIoctl+0x10c>
c00197aa:	b8 00 00 00 00       	mov    eax,0x0
c00197af:	eb 0b                	jmp    c00197bc <fatWrapperIoctl+0x114>
c00197b1:	8d 76 00             	lea    esi,[esi+0x0]
c00197b4:	b8 04 00 00 00       	mov    eax,0x4
c00197b9:	8d 76 00             	lea    esi,[esi+0x0]
c00197bc:	83 c4 28             	add    esp,0x28
c00197bf:	5b                   	pop    ebx
c00197c0:	c3                   	ret    
c00197c1:	90                   	nop
c00197c2:	66 90                	xchg   ax,ax

c00197c4 <FAT::FAT()>:
c00197c4:	83 ec 1c             	sub    esp,0x1c
c00197c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197cb:	83 ec 0c             	sub    esp,0xc
c00197ce:	50                   	push   eax
c00197cf:	e8 6c 1d ff ff       	call   c000b540 <Filesystem::Filesystem()>
c00197d4:	83 c4 10             	add    esp,0x10
c00197d7:	ba 0c 29 02 c0       	mov    edx,0xc002290c
c00197dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197e0:	89 10                	mov    DWORD PTR [eax],edx
c00197e2:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00197ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197f4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00197f9:	7f 19                	jg     c0019814 <FAT::FAT()+0x50>
c00197fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197ff:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c001980a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001980f:	eb e3                	jmp    c00197f4 <FAT::FAT()+0x30>
c0019811:	8d 76 00             	lea    esi,[esi+0x0]
c0019814:	90                   	nop
c0019815:	83 c4 1c             	add    esp,0x1c
c0019818:	c3                   	ret    
c0019819:	90                   	nop
c001981a:	66 90                	xchg   ax,ax

c001981c <FAT::fixFilepath(char*)>:
c001981c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019820:	8a 00                	mov    al,BYTE PTR [eax]
c0019822:	0f be c0             	movsx  eax,al
c0019825:	83 f8 40             	cmp    eax,0x40
c0019828:	7e 2e                	jle    c0019858 <FAT::fixFilepath(char*)+0x3c>
c001982a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001982e:	8a 00                	mov    al,BYTE PTR [eax]
c0019830:	83 e8 41             	sub    eax,0x41
c0019833:	88 c2                	mov    dl,al
c0019835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019839:	88 10                	mov    BYTE PTR [eax],dl
c001983b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001983f:	8a 00                	mov    al,BYTE PTR [eax]
c0019841:	0f be c0             	movsx  eax,al
c0019844:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001984b:	83 c0 30             	add    eax,0x30
c001984e:	88 c2                	mov    dl,al
c0019850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019854:	88 10                	mov    BYTE PTR [eax],dl
c0019856:	66 90                	xchg   ax,ax
c0019858:	90                   	nop
c0019859:	c3                   	ret    
c001985a:	66 90                	xchg   ax,ax

c001985c <FAT::open(char const*, void**, FileOpenMode)>:
c001985c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019862:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001986a:	74 0c                	je     c0019878 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001986c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019874:	75 0e                	jne    c0019884 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019876:	66 90                	xchg   ax,ax
c0019878:	b8 04 00 00 00       	mov    eax,0x4
c001987d:	e9 46 01 00 00       	jmp    c00199c8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019882:	66 90                	xchg   ax,ax
c0019884:	83 ec 08             	sub    esp,0x8
c0019887:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001988e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019892:	50                   	push   eax
c0019893:	e8 a8 6d fe ff       	call   c0000640 <strcpy>
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	83 ec 08             	sub    esp,0x8
c001989e:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198a2:	50                   	push   eax
c00198a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198aa:	e8 6d ff ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c00198af:	83 c4 10             	add    esp,0x10
c00198b2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00198ba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198c1:	83 e0 01             	and    eax,0x1
c00198c4:	74 12                	je     c00198d8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00198c6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198cd:	83 c8 01             	or     eax,0x1
c00198d0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198d7:	90                   	nop
c00198d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198df:	83 e0 04             	and    eax,0x4
c00198e2:	74 24                	je     c0019908 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00198e4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198eb:	83 c8 30             	or     eax,0x30
c00198ee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198f5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198fc:	83 c8 02             	or     eax,0x2
c00198ff:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019906:	66 90                	xchg   ax,ax
c0019908:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001990f:	83 e0 02             	and    eax,0x2
c0019912:	74 14                	je     c0019928 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019914:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001991b:	83 c8 02             	or     eax,0x2
c001991e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019925:	8d 76 00             	lea    esi,[esi+0x0]
c0019928:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001992f:	83 e0 08             	and    eax,0x8
c0019932:	74 14                	je     c0019948 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019934:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001993b:	83 c8 04             	or     eax,0x4
c001993e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019945:	8d 76 00             	lea    esi,[esi+0x0]
c0019948:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001994f:	83 e0 10             	and    eax,0x10
c0019952:	74 14                	je     c0019968 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019954:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001995b:	83 c8 08             	or     eax,0x8
c001995e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019965:	8d 76 00             	lea    esi,[esi+0x0]
c0019968:	83 ec 0c             	sub    esp,0xc
c001996b:	68 28 02 00 00       	push   0x228
c0019970:	e8 41 e1 fe ff       	call   c0007ab6 <malloc>
c0019975:	83 c4 10             	add    esp,0x10
c0019978:	89 c2                	mov    edx,eax
c001997a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019981:	89 10                	mov    DWORD PTR [eax],edx
c0019983:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001998b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019992:	8b 00                	mov    eax,DWORD PTR [eax]
c0019994:	83 ec 04             	sub    esp,0x4
c0019997:	52                   	push   edx
c0019998:	8d 54 24 10          	lea    edx,[esp+0x10]
c001999c:	52                   	push   edx
c001999d:	50                   	push   eax
c001999e:	e8 b7 a2 fe ff       	call   c0003c5a <f_open>
c00199a3:	83 c4 10             	add    esp,0x10
c00199a6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00199ad:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00199b5:	74 09                	je     c00199c0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00199b7:	b8 01 00 00 00       	mov    eax,0x1
c00199bc:	eb 0a                	jmp    c00199c8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00199be:	66 90                	xchg   ax,ax
c00199c0:	b8 00 00 00 00       	mov    eax,0x0
c00199c5:	8d 76 00             	lea    esi,[esi+0x0]
c00199c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199ce:	c3                   	ret    
c00199cf:	90                   	nop

c00199d0 <FAT::openDir(char const*, void**)>:
c00199d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199de:	74 0c                	je     c00199ec <FAT::openDir(char const*, void**)+0x1c>
c00199e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00199e8:	75 0e                	jne    c00199f8 <FAT::openDir(char const*, void**)+0x28>
c00199ea:	66 90                	xchg   ax,ax
c00199ec:	b8 04 00 00 00       	mov    eax,0x4
c00199f1:	e9 82 00 00 00       	jmp    c0019a78 <FAT::openDir(char const*, void**)+0xa8>
c00199f6:	66 90                	xchg   ax,ax
c00199f8:	83 ec 08             	sub    esp,0x8
c00199fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a06:	50                   	push   eax
c0019a07:	e8 34 6c fe ff       	call   c0000640 <strcpy>
c0019a0c:	83 c4 10             	add    esp,0x10
c0019a0f:	83 ec 08             	sub    esp,0x8
c0019a12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a16:	50                   	push   eax
c0019a17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a1e:	e8 f9 fd ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	83 ec 0c             	sub    esp,0xc
c0019a29:	6a 30                	push   0x30
c0019a2b:	e8 86 e0 fe ff       	call   c0007ab6 <malloc>
c0019a30:	83 c4 10             	add    esp,0x10
c0019a33:	89 c2                	mov    edx,eax
c0019a35:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a3c:	89 10                	mov    DWORD PTR [eax],edx
c0019a3e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a47:	83 ec 08             	sub    esp,0x8
c0019a4a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a4e:	52                   	push   edx
c0019a4f:	50                   	push   eax
c0019a50:	e8 b4 ab fe ff       	call   c0004609 <f_opendir>
c0019a55:	83 c4 10             	add    esp,0x10
c0019a58:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a5f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a67:	74 07                	je     c0019a70 <FAT::openDir(char const*, void**)+0xa0>
c0019a69:	b8 01 00 00 00       	mov    eax,0x1
c0019a6e:	eb 08                	jmp    c0019a78 <FAT::openDir(char const*, void**)+0xa8>
c0019a70:	b8 00 00 00 00       	mov    eax,0x0
c0019a75:	8d 76 00             	lea    esi,[esi+0x0]
c0019a78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a7e:	c3                   	ret    
c0019a7f:	90                   	nop

c0019a80 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a80:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a86:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a8e:	75 0c                	jne    c0019a9c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019a90:	b8 04 00 00 00       	mov    eax,0x4
c0019a95:	e9 d6 00 00 00       	jmp    c0019b70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a9a:	66 90                	xchg   ax,ax
c0019a9c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019aa4:	75 0a                	jne    c0019ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019aa6:	b8 04 00 00 00       	mov    eax,0x4
c0019aab:	e9 c0 00 00 00       	jmp    c0019b70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ab0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ab8:	75 0a                	jne    c0019ac4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019aba:	b8 04 00 00 00       	mov    eax,0x4
c0019abf:	e9 ac 00 00 00       	jmp    c0019b70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ac4:	83 ec 08             	sub    esp,0x8
c0019ac7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ace:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ad5:	50                   	push   eax
c0019ad6:	e8 65 6b fe ff       	call   c0000640 <strcpy>
c0019adb:	83 c4 10             	add    esp,0x10
c0019ade:	83 ec 08             	sub    esp,0x8
c0019ae1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ae8:	50                   	push   eax
c0019ae9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019af0:	e8 27 fd ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c0019af5:	83 c4 10             	add    esp,0x10
c0019af8:	83 ec 08             	sub    esp,0x8
c0019afb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019aff:	50                   	push   eax
c0019b00:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b07:	50                   	push   eax
c0019b08:	e8 7b ac fe ff       	call   c0004788 <f_stat>
c0019b0d:	83 c4 10             	add    esp,0x10
c0019b10:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019b17:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019b1e:	85 c0                	test   eax,eax
c0019b20:	74 0a                	je     c0019b2c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019b22:	83 f8 04             	cmp    eax,0x4
c0019b25:	74 39                	je     c0019b60 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019b27:	eb 3f                	jmp    c0019b68 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019b29:	8d 76 00             	lea    esi,[esi+0x0]
c0019b2c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b30:	0f b6 c0             	movzx  eax,al
c0019b33:	83 e0 10             	and    eax,0x10
c0019b36:	0f 95 c2             	setne  dl
c0019b39:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019b40:	88 10                	mov    BYTE PTR [eax],dl
c0019b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b46:	ba 00 00 00 00       	mov    edx,0x0
c0019b4b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b52:	89 01                	mov    DWORD PTR [ecx],eax
c0019b54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b57:	b8 00 00 00 00       	mov    eax,0x0
c0019b5c:	eb 12                	jmp    c0019b70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b5e:	66 90                	xchg   ax,ax
c0019b60:	b8 02 00 00 00       	mov    eax,0x2
c0019b65:	eb 09                	jmp    c0019b70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b67:	90                   	nop
c0019b68:	b8 01 00 00 00       	mov    eax,0x1
c0019b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b70:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b76:	c3                   	ret    
c0019b77:	90                   	nop

c0019b78 <FAT::unlink(char const*)>:
c0019b78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b86:	75 08                	jne    c0019b90 <FAT::unlink(char const*)+0x18>
c0019b88:	b8 04 00 00 00       	mov    eax,0x4
c0019b8d:	eb 61                	jmp    c0019bf0 <FAT::unlink(char const*)+0x78>
c0019b8f:	90                   	nop
c0019b90:	83 ec 08             	sub    esp,0x8
c0019b93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b9e:	50                   	push   eax
c0019b9f:	e8 9c 6a fe ff       	call   c0000640 <strcpy>
c0019ba4:	83 c4 10             	add    esp,0x10
c0019ba7:	83 ec 08             	sub    esp,0x8
c0019baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bae:	50                   	push   eax
c0019baf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019bb6:	e8 61 fc ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	83 ec 0c             	sub    esp,0xc
c0019bc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bc5:	50                   	push   eax
c0019bc6:	e8 2f ae fe ff       	call   c00049fa <f_unlink>
c0019bcb:	83 c4 10             	add    esp,0x10
c0019bce:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019bd5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019bdc:	85 c0                	test   eax,eax
c0019bde:	75 08                	jne    c0019be8 <FAT::unlink(char const*)+0x70>
c0019be0:	b8 00 00 00 00       	mov    eax,0x0
c0019be5:	eb 09                	jmp    c0019bf0 <FAT::unlink(char const*)+0x78>
c0019be7:	90                   	nop
c0019be8:	b8 01 00 00 00       	mov    eax,0x1
c0019bed:	8d 76 00             	lea    esi,[esi+0x0]
c0019bf0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bf6:	c3                   	ret    
c0019bf7:	90                   	nop

c0019bf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019bf8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019bfe:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019c05:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019c0c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c10:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c14:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c1c:	75 0a                	jne    c0019c28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019c1e:	b8 04 00 00 00       	mov    eax,0x4
c0019c23:	e9 7c 01 00 00       	jmp    c0019da4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019c28:	83 ec 08             	sub    esp,0x8
c0019c2b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c32:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c36:	50                   	push   eax
c0019c37:	e8 04 6a fe ff       	call   c0000640 <strcpy>
c0019c3c:	83 c4 10             	add    esp,0x10
c0019c3f:	83 ec 08             	sub    esp,0x8
c0019c42:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c46:	50                   	push   eax
c0019c47:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c4e:	e8 c9 fb ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c0019c53:	83 c4 10             	add    esp,0x10
c0019c56:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c5e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c6b:	83 e0 01             	and    eax,0x1
c0019c6e:	74 14                	je     c0019c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019c70:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c77:	83 c8 01             	or     eax,0x1
c0019c7a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c81:	8d 76 00             	lea    esi,[esi+0x0]
c0019c84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c89:	83 e0 02             	and    eax,0x2
c0019c8c:	74 12                	je     c0019ca0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019c8e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c95:	83 c8 20             	or     eax,0x20
c0019c98:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c9f:	90                   	nop
c0019ca0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ca5:	83 e0 04             	and    eax,0x4
c0019ca8:	74 12                	je     c0019cbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019caa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cb1:	83 c8 04             	or     eax,0x4
c0019cb4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019cbb:	90                   	nop
c0019cbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cc1:	83 e0 08             	and    eax,0x8
c0019cc4:	74 12                	je     c0019cd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019cc6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ccd:	83 c8 02             	or     eax,0x2
c0019cd0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019cd7:	90                   	nop
c0019cd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cdd:	83 e0 01             	and    eax,0x1
c0019ce0:	74 12                	je     c0019cf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019ce2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ce9:	83 c8 01             	or     eax,0x1
c0019cec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cf3:	90                   	nop
c0019cf4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cf9:	83 e0 02             	and    eax,0x2
c0019cfc:	74 12                	je     c0019d10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019cfe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d05:	83 c8 20             	or     eax,0x20
c0019d08:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d0f:	90                   	nop
c0019d10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d15:	83 e0 04             	and    eax,0x4
c0019d18:	74 12                	je     c0019d2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019d1a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d21:	83 c8 04             	or     eax,0x4
c0019d24:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d2b:	90                   	nop
c0019d2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d31:	83 e0 08             	and    eax,0x8
c0019d34:	74 12                	je     c0019d48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019d36:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d3d:	83 c8 02             	or     eax,0x2
c0019d40:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d47:	90                   	nop
c0019d48:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019d4f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d56:	09 d0                	or     eax,edx
c0019d58:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d5f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019d67:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d6f:	83 ec 04             	sub    esp,0x4
c0019d72:	52                   	push   edx
c0019d73:	50                   	push   eax
c0019d74:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d78:	50                   	push   eax
c0019d79:	e8 f1 b0 fe ff       	call   c0004e6f <f_chmod>
c0019d7e:	83 c4 10             	add    esp,0x10
c0019d81:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d88:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d8f:	85 c0                	test   eax,eax
c0019d91:	75 09                	jne    c0019d9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019d93:	b8 00 00 00 00       	mov    eax,0x0
c0019d98:	eb 0a                	jmp    c0019da4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019d9a:	66 90                	xchg   ax,ax
c0019d9c:	b8 01 00 00 00       	mov    eax,0x1
c0019da1:	8d 76 00             	lea    esi,[esi+0x0]
c0019da4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019daa:	c3                   	ret    
c0019dab:	90                   	nop

c0019dac <FAT::rename(char const*, char const*)>:
c0019dac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019db2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019dba:	74 0c                	je     c0019dc8 <FAT::rename(char const*, char const*)+0x1c>
c0019dbc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019dc4:	75 0e                	jne    c0019dd4 <FAT::rename(char const*, char const*)+0x28>
c0019dc6:	66 90                	xchg   ax,ax
c0019dc8:	b8 04 00 00 00       	mov    eax,0x4
c0019dcd:	e9 9e 00 00 00       	jmp    c0019e70 <FAT::rename(char const*, char const*)+0xc4>
c0019dd2:	66 90                	xchg   ax,ax
c0019dd4:	83 ec 08             	sub    esp,0x8
c0019dd7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019dde:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019de5:	50                   	push   eax
c0019de6:	e8 55 68 fe ff       	call   c0000640 <strcpy>
c0019deb:	83 c4 10             	add    esp,0x10
c0019dee:	83 ec 08             	sub    esp,0x8
c0019df1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019df8:	50                   	push   eax
c0019df9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e00:	e8 17 fa ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c0019e05:	83 c4 10             	add    esp,0x10
c0019e08:	83 ec 08             	sub    esp,0x8
c0019e0b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019e12:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e16:	50                   	push   eax
c0019e17:	e8 24 68 fe ff       	call   c0000640 <strcpy>
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	83 ec 08             	sub    esp,0x8
c0019e22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e26:	50                   	push   eax
c0019e27:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e2e:	e8 e9 f9 ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	83 ec 08             	sub    esp,0x8
c0019e39:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e3d:	50                   	push   eax
c0019e3e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e45:	50                   	push   eax
c0019e46:	e8 6c ae fe ff       	call   c0004cb7 <f_rename>
c0019e4b:	83 c4 10             	add    esp,0x10
c0019e4e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019e55:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019e5c:	85 c0                	test   eax,eax
c0019e5e:	75 08                	jne    c0019e68 <FAT::rename(char const*, char const*)+0xbc>
c0019e60:	b8 00 00 00 00       	mov    eax,0x0
c0019e65:	eb 09                	jmp    c0019e70 <FAT::rename(char const*, char const*)+0xc4>
c0019e67:	90                   	nop
c0019e68:	b8 01 00 00 00       	mov    eax,0x1
c0019e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e70:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e76:	c3                   	ret    
c0019e77:	90                   	nop

c0019e78 <FAT::mkdir(char const*)>:
c0019e78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e86:	75 08                	jne    c0019e90 <FAT::mkdir(char const*)+0x18>
c0019e88:	b8 04 00 00 00       	mov    eax,0x4
c0019e8d:	eb 61                	jmp    c0019ef0 <FAT::mkdir(char const*)+0x78>
c0019e8f:	90                   	nop
c0019e90:	83 ec 08             	sub    esp,0x8
c0019e93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e9e:	50                   	push   eax
c0019e9f:	e8 9c 67 fe ff       	call   c0000640 <strcpy>
c0019ea4:	83 c4 10             	add    esp,0x10
c0019ea7:	83 ec 08             	sub    esp,0x8
c0019eaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019eae:	50                   	push   eax
c0019eaf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eb6:	e8 61 f9 ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c0019ebb:	83 c4 10             	add    esp,0x10
c0019ebe:	83 ec 0c             	sub    esp,0xc
c0019ec1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ec5:	50                   	push   eax
c0019ec6:	e8 51 ac fe ff       	call   c0004b1c <f_mkdir>
c0019ecb:	83 c4 10             	add    esp,0x10
c0019ece:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ed5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019edc:	85 c0                	test   eax,eax
c0019ede:	75 08                	jne    c0019ee8 <FAT::mkdir(char const*)+0x70>
c0019ee0:	b8 00 00 00 00       	mov    eax,0x0
c0019ee5:	eb 09                	jmp    c0019ef0 <FAT::mkdir(char const*)+0x78>
c0019ee7:	90                   	nop
c0019ee8:	b8 01 00 00 00       	mov    eax,0x1
c0019eed:	8d 76 00             	lea    esi,[esi+0x0]
c0019ef0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ef6:	c3                   	ret    
c0019ef7:	90                   	nop

c0019ef8 <FAT::exists(char const*)>:
c0019ef8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019efe:	83 ec 08             	sub    esp,0x8
c0019f01:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f08:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f0c:	50                   	push   eax
c0019f0d:	e8 2e 67 fe ff       	call   c0000640 <strcpy>
c0019f12:	83 c4 10             	add    esp,0x10
c0019f15:	83 ec 08             	sub    esp,0x8
c0019f18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f1c:	50                   	push   eax
c0019f1d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f24:	e8 f3 f8 ff ff       	call   c001981c <FAT::fixFilepath(char*)>
c0019f29:	83 c4 10             	add    esp,0x10
c0019f2c:	83 ec 08             	sub    esp,0x8
c0019f2f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019f36:	50                   	push   eax
c0019f37:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f3b:	50                   	push   eax
c0019f3c:	e8 47 a8 fe ff       	call   c0004788 <f_stat>
c0019f41:	83 c4 10             	add    esp,0x10
c0019f44:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f4b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f52:	85 c0                	test   eax,eax
c0019f54:	75 06                	jne    c0019f5c <FAT::exists(char const*)+0x64>
c0019f56:	b0 01                	mov    al,0x1
c0019f58:	eb 06                	jmp    c0019f60 <FAT::exists(char const*)+0x68>
c0019f5a:	66 90                	xchg   ax,ax
c0019f5c:	b0 00                	mov    al,0x0
c0019f5e:	66 90                	xchg   ax,ax
c0019f60:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f66:	c3                   	ret    
c0019f67:	90                   	nop

c0019f68 <isoReadDiscSectorHelper>:
c0019f68:	83 ec 2c             	sub    esp,0x2c
c0019f6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f73:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019f78:	83 e8 41             	sub    eax,0x41
c0019f7b:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019f82:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f86:	ba 00 00 00 00       	mov    edx,0x0
c0019f8b:	83 ec 0c             	sub    esp,0xc
c0019f8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f92:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f96:	52                   	push   edx
c0019f97:	50                   	push   eax
c0019f98:	51                   	push   ecx
c0019f99:	e8 ae 3b ff ff       	call   c000db4c <LogicalDisk::read(unsigned long long, int, void*)>
c0019f9e:	83 c4 20             	add    esp,0x20
c0019fa1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019fa5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019faa:	74 0c                	je     c0019fb8 <isoReadDiscSectorHelper+0x50>
c0019fac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fb0:	c1 e0 0b             	shl    eax,0xb
c0019fb3:	eb 0b                	jmp    c0019fc0 <isoReadDiscSectorHelper+0x58>
c0019fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb8:	b8 00 00 00 00       	mov    eax,0x0
c0019fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc0:	83 c4 2c             	add    esp,0x2c
c0019fc3:	c3                   	ret    

c0019fc4 <iso_kprintf>:
c0019fc4:	83 ec 0c             	sub    esp,0xc
c0019fc7:	83 ec 08             	sub    esp,0x8
c0019fca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fce:	68 ba 26 02 c0       	push   0xc00226ba
c0019fd3:	e8 6d 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019fd8:	83 c4 10             	add    esp,0x10
c0019fdb:	90                   	nop
c0019fdc:	83 c4 0c             	add    esp,0xc
c0019fdf:	c3                   	ret    

c0019fe0 <iso_kprintfd>:
c0019fe0:	83 ec 0c             	sub    esp,0xc
c0019fe3:	83 ec 08             	sub    esp,0x8
c0019fe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fea:	68 9a 0e 02 c0       	push   0xc0020e9a
c0019fef:	e8 51 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019ff4:	83 c4 10             	add    esp,0x10
c0019ff7:	90                   	nop
c0019ff8:	83 c4 0c             	add    esp,0xc
c0019ffb:	c3                   	ret    

c0019ffc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019ffc:	b8 08 00 00 00       	mov    eax,0x8
c001a001:	c3                   	ret    

c001a002 <ISO9660::truncate(void*, unsigned long long)>:
c001a002:	b8 01 00 00 00       	mov    eax,0x1
c001a007:	c3                   	ret    

c001a008 <ISO9660::getName()>:
c001a008:	b8 70 29 02 c0       	mov    eax,0xc0022970
c001a00d:	c3                   	ret    

c001a00e <ISO9660::closeDir(void*)>:
c001a00e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a012:	8b 00                	mov    eax,DWORD PTR [eax]
c001a014:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a017:	90                   	nop

c001a018 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a018:	b8 01 00 00 00       	mov    eax,0x1
c001a01d:	c3                   	ret    

c001a01e <ISO9660::unlink(char const*)>:
c001a01e:	b8 01 00 00 00       	mov    eax,0x1
c001a023:	c3                   	ret    

c001a024 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a024:	b8 03 00 00 00       	mov    eax,0x3
c001a029:	c3                   	ret    

c001a02a <ISO9660::rename(char const*, char const*)>:
c001a02a:	b8 01 00 00 00       	mov    eax,0x1
c001a02f:	c3                   	ret    

c001a030 <ISO9660::mkdir(char const*)>:
c001a030:	b8 01 00 00 00       	mov    eax,0x1
c001a035:	c3                   	ret    

c001a036 <ISO9660::~ISO9660()>:
c001a036:	83 ec 0c             	sub    esp,0xc
c001a039:	ba b0 2a 02 c0       	mov    edx,0xc0022ab0
c001a03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a042:	89 10                	mov    DWORD PTR [eax],edx
c001a044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a048:	83 ec 0c             	sub    esp,0xc
c001a04b:	50                   	push   eax
c001a04c:	e8 13 15 ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c001a051:	83 c4 10             	add    esp,0x10
c001a054:	90                   	nop
c001a055:	83 c4 0c             	add    esp,0xc
c001a058:	c3                   	ret    
c001a059:	90                   	nop

c001a05a <ISO9660::~ISO9660()>:
c001a05a:	83 ec 0c             	sub    esp,0xc
c001a05d:	83 ec 0c             	sub    esp,0xc
c001a060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a064:	e8 cd ff ff ff       	call   c001a036 <ISO9660::~ISO9660()>
c001a069:	83 c4 10             	add    esp,0x10
c001a06c:	83 ec 08             	sub    esp,0x8
c001a06f:	6a 08                	push   0x8
c001a071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a075:	e8 9e 07 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a07a:	83 c4 10             	add    esp,0x10
c001a07d:	83 c4 0c             	add    esp,0xc
c001a080:	c3                   	ret    
c001a081:	90                   	nop

c001a082 <ISO9660::exists(char const*)>:
c001a082:	83 ec 18             	sub    esp,0x18
c001a085:	68 8b 29 02 c0       	push   0xc002298b
c001a08a:	e8 0a 73 ff ff       	call   c0011399 <KePanic(char const*)>
c001a08f:	31 c0                	xor    eax,eax
c001a091:	83 c4 1c             	add    esp,0x1c
c001a094:	c3                   	ret    
c001a095:	90                   	nop

c001a096 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a096:	56                   	push   esi
c001a097:	53                   	push   ebx
c001a098:	53                   	push   ebx
c001a099:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a09d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0a1:	85 db                	test   ebx,ebx
c001a0a3:	0f 84 ca 00 00 00    	je     c001a173 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a0a9:	85 f6                	test   esi,esi
c001a0ab:	0f 84 c2 00 00 00    	je     c001a173 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a0b1:	b8 03 00 00 00       	mov    eax,0x3
c001a0b6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a0bb:	0f 85 b7 00 00 00    	jne    c001a178 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a0c1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a0c3:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a0ca:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a0d0:	74 1b                	je     c001a0ed <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a0d2:	85 c0                	test   eax,eax
c001a0d4:	74 10                	je     c001a0e6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a0d6:	83 ec 0c             	sub    esp,0xc
c001a0d9:	68 a9 29 02 c0       	push   0xc00229a9
c001a0de:	e8 b6 72 ff ff       	call   c0011399 <KePanic(char const*)>
c001a0e3:	83 c4 10             	add    esp,0x10
c001a0e6:	8a 03                	mov    al,BYTE PTR [ebx]
c001a0e8:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a0ed:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a0f0:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a0f7:	85 c0                	test   eax,eax
c001a0f9:	74 09                	je     c001a104 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a0fb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a102:	74 48                	je     c001a14c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a104:	83 ec 0c             	sub    esp,0xc
c001a107:	68 b9 29 02 c0       	push   0xc00229b9
c001a10c:	e8 34 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a111:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a114:	83 c4 10             	add    esp,0x10
c001a117:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a11e:	85 c0                	test   eax,eax
c001a120:	74 17                	je     c001a139 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a122:	83 ec 0c             	sub    esp,0xc
c001a125:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a12c:	68 d9 29 02 c0       	push   0xc00229d9
c001a131:	e8 0f 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a136:	83 c4 10             	add    esp,0x10
c001a139:	83 ec 0c             	sub    esp,0xc
c001a13c:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a143:	50                   	push   eax
c001a144:	e8 fd c8 fe ff       	call   c0006a46 <init_percd>
c001a149:	83 c4 10             	add    esp,0x10
c001a14c:	83 c3 03             	add    ebx,0x3
c001a14f:	51                   	push   ecx
c001a150:	51                   	push   ecx
c001a151:	6a 00                	push   0x0
c001a153:	53                   	push   ebx
c001a154:	e8 b4 c3 fe ff       	call   c000650d <iso_open>
c001a159:	83 c4 10             	add    esp,0x10
c001a15c:	89 c2                	mov    edx,eax
c001a15e:	b8 01 00 00 00       	mov    eax,0x1
c001a163:	83 fa ff             	cmp    edx,0xffffffff
c001a166:	74 10                	je     c001a178 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a168:	83 c2 32             	add    edx,0x32
c001a16b:	31 c0                	xor    eax,eax
c001a16d:	01 d2                	add    edx,edx
c001a16f:	89 16                	mov    DWORD PTR [esi],edx
c001a171:	eb 05                	jmp    c001a178 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a173:	b8 04 00 00 00       	mov    eax,0x4
c001a178:	5a                   	pop    edx
c001a179:	5b                   	pop    ebx
c001a17a:	5e                   	pop    esi
c001a17b:	c3                   	ret    

c001a17c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a17c:	53                   	push   ebx
c001a17d:	83 ec 08             	sub    esp,0x8
c001a180:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a184:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a188:	85 c0                	test   eax,eax
c001a18a:	74 2d                	je     c001a1b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a18c:	85 db                	test   ebx,ebx
c001a18e:	74 29                	je     c001a1b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a190:	b9 02 00 00 00       	mov    ecx,0x2
c001a195:	52                   	push   edx
c001a196:	99                   	cdq    
c001a197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a19b:	f7 f9                	idiv   ecx
c001a19d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1a1:	83 e8 32             	sub    eax,0x32
c001a1a4:	50                   	push   eax
c001a1a5:	e8 0b c4 fe ff       	call   c00065b5 <iso_read>
c001a1aa:	83 c4 10             	add    esp,0x10
c001a1ad:	89 03                	mov    DWORD PTR [ebx],eax
c001a1af:	09 d0                	or     eax,edx
c001a1b1:	0f 94 c0             	sete   al
c001a1b4:	0f b6 c0             	movzx  eax,al
c001a1b7:	eb 05                	jmp    c001a1be <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a1b9:	b8 04 00 00 00       	mov    eax,0x4
c001a1be:	83 c4 08             	add    esp,0x8
c001a1c1:	5b                   	pop    ebx
c001a1c2:	c3                   	ret    
c001a1c3:	90                   	nop

c001a1c4 <ISO9660::seek(void*, unsigned long long)>:
c001a1c4:	57                   	push   edi
c001a1c5:	56                   	push   esi
c001a1c6:	b8 04 00 00 00       	mov    eax,0x4
c001a1cb:	51                   	push   ecx
c001a1cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a1d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a1d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a1d8:	85 d2                	test   edx,edx
c001a1da:	74 26                	je     c001a202 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a1dc:	6a 00                	push   0x0
c001a1de:	b9 02 00 00 00       	mov    ecx,0x2
c001a1e3:	57                   	push   edi
c001a1e4:	89 d0                	mov    eax,edx
c001a1e6:	56                   	push   esi
c001a1e7:	99                   	cdq    
c001a1e8:	f7 f9                	idiv   ecx
c001a1ea:	83 e8 32             	sub    eax,0x32
c001a1ed:	50                   	push   eax
c001a1ee:	e8 d8 c4 fe ff       	call   c00066cb <iso_seek>
c001a1f3:	83 c4 10             	add    esp,0x10
c001a1f6:	31 f0                	xor    eax,esi
c001a1f8:	31 fa                	xor    edx,edi
c001a1fa:	09 d0                	or     eax,edx
c001a1fc:	0f 95 c0             	setne  al
c001a1ff:	0f b6 c0             	movzx  eax,al
c001a202:	5a                   	pop    edx
c001a203:	5e                   	pop    esi
c001a204:	5f                   	pop    edi
c001a205:	c3                   	ret    

c001a206 <ISO9660::tell(void*, unsigned long long*)>:
c001a206:	53                   	push   ebx
c001a207:	83 ec 08             	sub    esp,0x8
c001a20a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a20e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a212:	85 c0                	test   eax,eax
c001a214:	74 24                	je     c001a23a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a216:	85 db                	test   ebx,ebx
c001a218:	74 20                	je     c001a23a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a21a:	83 ec 0c             	sub    esp,0xc
c001a21d:	b9 02 00 00 00       	mov    ecx,0x2
c001a222:	99                   	cdq    
c001a223:	f7 f9                	idiv   ecx
c001a225:	83 e8 32             	sub    eax,0x32
c001a228:	50                   	push   eax
c001a229:	e8 21 c5 fe ff       	call   c000674f <iso_tell>
c001a22e:	83 c4 10             	add    esp,0x10
c001a231:	89 03                	mov    DWORD PTR [ebx],eax
c001a233:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a236:	31 c0                	xor    eax,eax
c001a238:	eb 05                	jmp    c001a23f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a23a:	b8 04 00 00 00       	mov    eax,0x4
c001a23f:	83 c4 08             	add    esp,0x8
c001a242:	5b                   	pop    ebx
c001a243:	c3                   	ret    

c001a244 <ISO9660::stat(void*, unsigned long long*)>:
c001a244:	53                   	push   ebx
c001a245:	83 ec 14             	sub    esp,0x14
c001a248:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a24c:	68 fd 29 02 c0       	push   0xc00229fd
c001a251:	e8 ef 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a256:	83 c4 10             	add    esp,0x10
c001a259:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a25e:	74 2c                	je     c001a28c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a260:	85 db                	test   ebx,ebx
c001a262:	74 28                	je     c001a28c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a264:	83 ec 0c             	sub    esp,0xc
c001a267:	b9 02 00 00 00       	mov    ecx,0x2
c001a26c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a270:	99                   	cdq    
c001a271:	f7 f9                	idiv   ecx
c001a273:	83 e8 32             	sub    eax,0x32
c001a276:	50                   	push   eax
c001a277:	e8 04 c5 fe ff       	call   c0006780 <iso_total>
c001a27c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a283:	89 03                	mov    DWORD PTR [ebx],eax
c001a285:	83 c4 10             	add    esp,0x10
c001a288:	31 c0                	xor    eax,eax
c001a28a:	eb 05                	jmp    c001a291 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a28c:	b8 04 00 00 00       	mov    eax,0x4
c001a291:	83 c4 08             	add    esp,0x8
c001a294:	5b                   	pop    ebx
c001a295:	c3                   	ret    

c001a296 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a296:	55                   	push   ebp
c001a297:	57                   	push   edi
c001a298:	56                   	push   esi
c001a299:	53                   	push   ebx
c001a29a:	83 ec 18             	sub    esp,0x18
c001a29d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a2a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a2a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a2a9:	68 05 2a 02 c0       	push   0xc0022a05
c001a2ae:	e8 92 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a2b3:	83 c4 10             	add    esp,0x10
c001a2b6:	85 ff                	test   edi,edi
c001a2b8:	0f 94 c0             	sete   al
c001a2bb:	85 f6                	test   esi,esi
c001a2bd:	0f 94 c2             	sete   dl
c001a2c0:	09 d0                	or     eax,edx
c001a2c2:	a8 01                	test   al,0x1
c001a2c4:	0f 85 dd 00 00 00    	jne    c001a3a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a2ca:	85 db                	test   ebx,ebx
c001a2cc:	0f 84 d5 00 00 00    	je     c001a3a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a2d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a2d5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a2db:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a2e2:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2e9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a2eb:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a2f1:	74 1b                	je     c001a30e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a2f3:	85 c0                	test   eax,eax
c001a2f5:	74 10                	je     c001a307 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a2f7:	83 ec 0c             	sub    esp,0xc
c001a2fa:	68 a9 29 02 c0       	push   0xc00229a9
c001a2ff:	e8 95 70 ff ff       	call   c0011399 <KePanic(char const*)>
c001a304:	83 c4 10             	add    esp,0x10
c001a307:	8a 03                	mov    al,BYTE PTR [ebx]
c001a309:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a30e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a311:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a318:	85 c0                	test   eax,eax
c001a31a:	74 09                	je     c001a325 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a31c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a323:	74 51                	je     c001a376 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a325:	83 ec 0c             	sub    esp,0xc
c001a328:	68 0d 2a 02 c0       	push   0xc0022a0d
c001a32d:	e8 13 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a332:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a335:	83 c4 10             	add    esp,0x10
c001a338:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a340:	74 21                	je     c001a363 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a342:	83 ec 0c             	sub    esp,0xc
c001a345:	68 2d 2a 02 c0       	push   0xc0022a2d
c001a34a:	e8 f6 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a34f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a352:	83 c4 10             	add    esp,0x10
c001a355:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a35c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a363:	83 ec 0c             	sub    esp,0xc
c001a366:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a36d:	50                   	push   eax
c001a36e:	e8 d3 c6 fe ff       	call   c0006a46 <init_percd>
c001a373:	83 c4 10             	add    esp,0x10
c001a376:	83 c3 03             	add    ebx,0x3
c001a379:	52                   	push   edx
c001a37a:	52                   	push   edx
c001a37b:	6a 00                	push   0x0
c001a37d:	53                   	push   ebx
c001a37e:	e8 8a c1 fe ff       	call   c000650d <iso_open>
c001a383:	83 c4 10             	add    esp,0x10
c001a386:	89 c5                	mov    ebp,eax
c001a388:	83 f8 ff             	cmp    eax,0xffffffff
c001a38b:	75 21                	jne    c001a3ae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a38d:	50                   	push   eax
c001a38e:	50                   	push   eax
c001a38f:	6a 01                	push   0x1
c001a391:	53                   	push   ebx
c001a392:	e8 76 c1 fe ff       	call   c000650d <iso_open>
c001a397:	83 c4 10             	add    esp,0x10
c001a39a:	ba 02 00 00 00       	mov    edx,0x2
c001a39f:	40                   	inc    eax
c001a3a0:	74 2b                	je     c001a3cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a3a2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a3a5:	eb 24                	jmp    c001a3cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a3a7:	ba 04 00 00 00       	mov    edx,0x4
c001a3ac:	eb 1f                	jmp    c001a3cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a3ae:	83 ec 0c             	sub    esp,0xc
c001a3b1:	50                   	push   eax
c001a3b2:	e8 c9 c3 fe ff       	call   c0006780 <iso_total>
c001a3b7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a3be:	89 07                	mov    DWORD PTR [edi],eax
c001a3c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a3c3:	e8 cf c1 fe ff       	call   c0006597 <iso_close>
c001a3c8:	83 c4 10             	add    esp,0x10
c001a3cb:	31 d2                	xor    edx,edx
c001a3cd:	83 c4 0c             	add    esp,0xc
c001a3d0:	89 d0                	mov    eax,edx
c001a3d2:	5b                   	pop    ebx
c001a3d3:	5e                   	pop    esi
c001a3d4:	5f                   	pop    edi
c001a3d5:	5d                   	pop    ebp
c001a3d6:	c3                   	ret    
c001a3d7:	90                   	nop

c001a3d8 <ISO9660::close(void*)>:
c001a3d8:	83 ec 0c             	sub    esp,0xc
c001a3db:	b8 04 00 00 00       	mov    eax,0x4
c001a3e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3e4:	85 d2                	test   edx,edx
c001a3e6:	74 1b                	je     c001a403 <ISO9660::close(void*)+0x2b>
c001a3e8:	83 ec 0c             	sub    esp,0xc
c001a3eb:	b9 02 00 00 00       	mov    ecx,0x2
c001a3f0:	89 d0                	mov    eax,edx
c001a3f2:	99                   	cdq    
c001a3f3:	f7 f9                	idiv   ecx
c001a3f5:	83 e8 32             	sub    eax,0x32
c001a3f8:	50                   	push   eax
c001a3f9:	e8 99 c1 fe ff       	call   c0006597 <iso_close>
c001a3fe:	83 c4 10             	add    esp,0x10
c001a401:	31 c0                	xor    eax,eax
c001a403:	83 c4 0c             	add    esp,0xc
c001a406:	c3                   	ret    
c001a407:	90                   	nop

c001a408 <ISO9660::openDir(char const*, void**)>:
c001a408:	56                   	push   esi
c001a409:	53                   	push   ebx
c001a40a:	50                   	push   eax
c001a40b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a40f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a413:	85 db                	test   ebx,ebx
c001a415:	0f 84 bd 00 00 00    	je     c001a4d8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a41b:	85 f6                	test   esi,esi
c001a41d:	0f 84 b5 00 00 00    	je     c001a4d8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a423:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a425:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a42c:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a432:	74 1b                	je     c001a44f <ISO9660::openDir(char const*, void**)+0x47>
c001a434:	85 c0                	test   eax,eax
c001a436:	74 10                	je     c001a448 <ISO9660::openDir(char const*, void**)+0x40>
c001a438:	83 ec 0c             	sub    esp,0xc
c001a43b:	68 a9 29 02 c0       	push   0xc00229a9
c001a440:	e8 54 6f ff ff       	call   c0011399 <KePanic(char const*)>
c001a445:	83 c4 10             	add    esp,0x10
c001a448:	8a 03                	mov    al,BYTE PTR [ebx]
c001a44a:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a44f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a452:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a459:	85 c0                	test   eax,eax
c001a45b:	74 10                	je     c001a46d <ISO9660::openDir(char const*, void**)+0x65>
c001a45d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a464:	74 1a                	je     c001a480 <ISO9660::openDir(char const*, void**)+0x78>
c001a466:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a46d:	83 ec 0c             	sub    esp,0xc
c001a470:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a477:	50                   	push   eax
c001a478:	e8 c9 c5 fe ff       	call   c0006a46 <init_percd>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	83 c3 03             	add    ebx,0x3
c001a483:	50                   	push   eax
c001a484:	50                   	push   eax
c001a485:	6a 01                	push   0x1
c001a487:	53                   	push   ebx
c001a488:	e8 80 c0 fe ff       	call   c000650d <iso_open>
c001a48d:	83 c4 10             	add    esp,0x10
c001a490:	89 c3                	mov    ebx,eax
c001a492:	83 f8 ff             	cmp    eax,0xffffffff
c001a495:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a49a:	75 1c                	jne    c001a4b8 <ISO9660::openDir(char const*, void**)+0xb0>
c001a49c:	53                   	push   ebx
c001a49d:	53                   	push   ebx
c001a49e:	68 51 2a 02 c0       	push   0xc0022a51
c001a4a3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4a9:	e8 f8 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4ae:	83 c4 10             	add    esp,0x10
c001a4b1:	b8 01 00 00 00       	mov    eax,0x1
c001a4b6:	eb 25                	jmp    c001a4dd <ISO9660::openDir(char const*, void**)+0xd5>
c001a4b8:	01 db                	add    ebx,ebx
c001a4ba:	51                   	push   ecx
c001a4bb:	83 c3 65             	add    ebx,0x65
c001a4be:	51                   	push   ecx
c001a4bf:	68 64 2a 02 c0       	push   0xc0022a64
c001a4c4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4ca:	e8 d7 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4cf:	89 1e                	mov    DWORD PTR [esi],ebx
c001a4d1:	83 c4 10             	add    esp,0x10
c001a4d4:	31 c0                	xor    eax,eax
c001a4d6:	eb 05                	jmp    c001a4dd <ISO9660::openDir(char const*, void**)+0xd5>
c001a4d8:	b8 04 00 00 00       	mov    eax,0x4
c001a4dd:	5a                   	pop    edx
c001a4de:	5b                   	pop    ebx
c001a4df:	5e                   	pop    esi
c001a4e0:	c3                   	ret    
c001a4e1:	90                   	nop

c001a4e2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a4e2:	55                   	push   ebp
c001a4e3:	57                   	push   edi
c001a4e4:	56                   	push   esi
c001a4e5:	53                   	push   ebx
c001a4e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a4ec:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a4f3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a4fa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a502:	0f 84 e7 00 00 00    	je     c001a5ef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a508:	85 db                	test   ebx,ebx
c001a50a:	0f 84 df 00 00 00    	je     c001a5ef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a510:	83 ec 0c             	sub    esp,0xc
c001a513:	68 77 2a 02 c0       	push   0xc0022a77
c001a518:	e8 28 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a51d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a524:	b9 02 00 00 00       	mov    ecx,0x2
c001a529:	99                   	cdq    
c001a52a:	f7 f9                	idiv   ecx
c001a52c:	83 e8 32             	sub    eax,0x32
c001a52f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a532:	e8 9b c2 fe ff       	call   c00067d2 <iso_readdir>
c001a537:	83 c4 10             	add    esp,0x10
c001a53a:	89 c6                	mov    esi,eax
c001a53c:	85 c0                	test   eax,eax
c001a53e:	75 37                	jne    c001a577 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a540:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a545:	56                   	push   esi
c001a546:	56                   	push   esi
c001a547:	68 82 2a 02 c0       	push   0xc0022a82
c001a54c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a552:	e8 4f e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a557:	83 c4 0c             	add    esp,0xc
c001a55a:	68 10 01 00 00       	push   0x110
c001a55f:	6a 00                	push   0x0
c001a561:	57                   	push   edi
c001a562:	e8 89 5f fe ff       	call   c00004f0 <memset>
c001a567:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a56d:	83 c4 10             	add    esp,0x10
c001a570:	b8 01 00 00 00       	mov    eax,0x1
c001a575:	eb 7d                	jmp    c001a5f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a577:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a57d:	8d 68 08             	lea    ebp,[eax+0x8]
c001a580:	83 ec 0c             	sub    esp,0xc
c001a583:	55                   	push   ebp
c001a584:	e8 e7 5f fe ff       	call   c0000570 <strlen>
c001a589:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a591:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a595:	83 c4 10             	add    esp,0x10
c001a598:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a59c:	75 0a                	jne    c001a5a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a59e:	b8 02 00 00 00       	mov    eax,0x2
c001a5a3:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a5a6:	74 05                	je     c001a5ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a5a8:	b8 01 00 00 00       	mov    eax,0x1
c001a5ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5b1:	50                   	push   eax
c001a5b2:	50                   	push   eax
c001a5b3:	55                   	push   ebp
c001a5b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5b8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a5bc:	50                   	push   eax
c001a5bd:	e8 7e 60 fe ff       	call   c0000640 <strcpy>
c001a5c2:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a5c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5cb:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a5d1:	5a                   	pop    edx
c001a5d2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a5d7:	59                   	pop    ecx
c001a5d8:	68 95 2a 02 c0       	push   0xc0022a95
c001a5dd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a5e3:	e8 be e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a5e8:	83 c4 10             	add    esp,0x10
c001a5eb:	31 c0                	xor    eax,eax
c001a5ed:	eb 05                	jmp    c001a5f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a5ef:	b8 04 00 00 00       	mov    eax,0x4
c001a5f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5fa:	5b                   	pop    ebx
c001a5fb:	5e                   	pop    esi
c001a5fc:	5f                   	pop    edi
c001a5fd:	5d                   	pop    ebp
c001a5fe:	c3                   	ret    

c001a5ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a5ff:	57                   	push   edi
c001a600:	56                   	push   esi
c001a601:	53                   	push   ebx
c001a602:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a606:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a60a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a60e:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a614:	0f be cb             	movsx  ecx,bl
c001a617:	75 0b                	jne    c001a624 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a619:	0f be 05 c0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238c0
c001a620:	39 c8                	cmp    eax,ecx
c001a622:	74 47                	je     c001a66b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a624:	83 ec 0c             	sub    esp,0xc
c001a627:	31 d2                	xor    edx,edx
c001a629:	68 a0 98 02 c0       	push   0xc00298a0
c001a62e:	6a 01                	push   0x1
c001a630:	52                   	push   edx
c001a631:	56                   	push   esi
c001a632:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a639:	e8 0e 35 ff ff       	call   c000db4c <LogicalDisk::read(unsigned long long, int, void*)>
c001a63e:	83 c4 20             	add    esp,0x20
c001a641:	85 c0                	test   eax,eax
c001a643:	75 0e                	jne    c001a653 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a645:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a64b:	88 1d c0 38 02 c0    	mov    BYTE PTR ds:0xc00238c0,bl
c001a651:	eb 18                	jmp    c001a66b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a653:	50                   	push   eax
c001a654:	68 00 08 00 00       	push   0x800
c001a659:	6a 00                	push   0x0
c001a65b:	57                   	push   edi
c001a65c:	e8 8f 5e fe ff       	call   c00004f0 <memset>
c001a661:	83 c4 10             	add    esp,0x10
c001a664:	b8 01 00 00 00       	mov    eax,0x1
c001a669:	eb 0e                	jmp    c001a679 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a66b:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a670:	b9 00 08 00 00       	mov    ecx,0x800
c001a675:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a677:	31 c0                	xor    eax,eax
c001a679:	5b                   	pop    ebx
c001a67a:	5e                   	pop    esi
c001a67b:	5f                   	pop    edi
c001a67c:	c3                   	ret    
c001a67d:	90                   	nop

c001a67e <ISO9660::tryMount(LogicalDisk*, int)>:
c001a67e:	53                   	push   ebx
c001a67f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a685:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a68f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a696:	8d 58 41             	lea    ebx,[eax+0x41]
c001a699:	0f be db             	movsx  ebx,bl
c001a69c:	53                   	push   ebx
c001a69d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6a1:	50                   	push   eax
c001a6a2:	6a 10                	push   0x10
c001a6a4:	e8 56 ff ff ff       	call   c001a5ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6a9:	83 c4 10             	add    esp,0x10
c001a6ac:	31 d2                	xor    edx,edx
c001a6ae:	85 c0                	test   eax,eax
c001a6b0:	75 33                	jne    c001a6e5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6b2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a6b7:	75 2c                	jne    c001a6e5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6b9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a6be:	75 25                	jne    c001a6e5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6c0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a6c5:	75 1e                	jne    c001a6e5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6c7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a6cc:	75 17                	jne    c001a6e5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6ce:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a6d3:	75 10                	jne    c001a6e5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6d5:	83 ec 0c             	sub    esp,0xc
c001a6d8:	53                   	push   ebx
c001a6d9:	e8 68 c3 fe ff       	call   c0006a46 <init_percd>
c001a6de:	83 c4 10             	add    esp,0x10
c001a6e1:	40                   	inc    eax
c001a6e2:	0f 95 c2             	setne  dl
c001a6e5:	88 d0                	mov    al,dl
c001a6e7:	81 c4 08 08 00 00    	add    esp,0x808
c001a6ed:	5b                   	pop    ebx
c001a6ee:	c3                   	ret    
c001a6ef:	90                   	nop

c001a6f0 <ISO9660::ISO9660()>:
c001a6f0:	83 ec 0c             	sub    esp,0xc
c001a6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6f7:	83 ec 0c             	sub    esp,0xc
c001a6fa:	50                   	push   eax
c001a6fb:	e8 40 0e ff ff       	call   c000b540 <Filesystem::Filesystem()>
c001a700:	83 c4 10             	add    esp,0x10
c001a703:	ba b0 2a 02 c0       	mov    edx,0xc0022ab0
c001a708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a70c:	89 10                	mov    DWORD PTR [eax],edx
c001a70e:	e8 45 c4 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a713:	90                   	nop
c001a714:	83 c4 0c             	add    esp,0xc
c001a717:	c3                   	ret    

c001a718 <SoundCard::beginPlayback()>:
c001a718:	c7 44 24 04 14 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b14
c001a720:	e9 74 6c ff ff       	jmp    c0011399 <KePanic(char const*)>
c001a725:	90                   	nop

c001a726 <SoundCard::stopPlayback()>:
c001a726:	c7 44 24 04 14 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b14
c001a72e:	e9 66 6c ff ff       	jmp    c0011399 <KePanic(char const*)>
c001a733:	90                   	nop

c001a734 <SoundCard::SoundCard(char const*)>:
c001a734:	83 ec 1c             	sub    esp,0x1c
c001a737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a73b:	83 ec 08             	sub    esp,0x8
c001a73e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a742:	50                   	push   eax
c001a743:	e8 ba 21 ff ff       	call   c000c902 <Device::Device(char const*)>
c001a748:	83 c4 10             	add    esp,0x10
c001a74b:	ba 60 2b 02 c0       	mov    edx,0xc0022b60
c001a750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a754:	89 10                	mov    DWORD PTR [eax],edx
c001a756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a75a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a765:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a76f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a773:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a77d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a781:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a78b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a78f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a799:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7a1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a7a6:	7f 1a                	jg     c001a7c2 <SoundCard::SoundCard(char const*)+0x8e>
c001a7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7b0:	83 c2 54             	add    edx,0x54
c001a7b3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a7bb:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a7c0:	eb df                	jmp    c001a7a1 <SoundCard::SoundCard(char const*)+0x6d>
c001a7c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7c6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a7cd:	90                   	nop
c001a7ce:	83 c4 1c             	add    esp,0x1c
c001a7d1:	c3                   	ret    

c001a7d2 <SoundCard::~SoundCard()>:
c001a7d2:	83 ec 0c             	sub    esp,0xc
c001a7d5:	ba 60 2b 02 c0       	mov    edx,0xc0022b60
c001a7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7de:	89 10                	mov    DWORD PTR [eax],edx
c001a7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7e4:	83 ec 0c             	sub    esp,0xc
c001a7e7:	50                   	push   eax
c001a7e8:	e8 7f 1e ff ff       	call   c000c66c <Device::~Device()>
c001a7ed:	83 c4 10             	add    esp,0x10
c001a7f0:	90                   	nop
c001a7f1:	83 c4 0c             	add    esp,0xc
c001a7f4:	c3                   	ret    
c001a7f5:	90                   	nop

c001a7f6 <SoundCard::~SoundCard()>:
c001a7f6:	83 ec 0c             	sub    esp,0xc
c001a7f9:	83 ec 0c             	sub    esp,0xc
c001a7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a800:	e8 cd ff ff ff       	call   c001a7d2 <SoundCard::~SoundCard()>
c001a805:	83 c4 10             	add    esp,0x10
c001a808:	83 ec 08             	sub    esp,0x8
c001a80b:	68 e8 01 00 00       	push   0x1e8
c001a810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a814:	e8 ff ff fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a819:	83 c4 10             	add    esp,0x10
c001a81c:	83 c4 0c             	add    esp,0xc
c001a81f:	c3                   	ret    

c001a820 <SoundCard::configureRates(int, int, int)>:
c001a820:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a824:	31 c0                	xor    eax,eax
c001a826:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a82d:	75 20                	jne    c001a84f <SoundCard::configureRates(int, int, int)+0x2f>
c001a82f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a833:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a83d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a847:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a84d:	b0 01                	mov    al,0x1
c001a84f:	c3                   	ret    

c001a850 <SoundCard::getSamples16(int, short*)>:
c001a850:	55                   	push   ebp
c001a851:	57                   	push   edi
c001a852:	31 ff                	xor    edi,edi
c001a854:	56                   	push   esi
c001a855:	53                   	push   ebx
c001a856:	31 db                	xor    ebx,ebx
c001a858:	83 ec 10             	sub    esp,0x10
c001a85b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a85f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a863:	8d 04 36             	lea    eax,[esi+esi*1]
c001a866:	50                   	push   eax
c001a867:	6a 00                	push   0x0
c001a869:	55                   	push   ebp
c001a86a:	e8 81 5c fe ff       	call   c00004f0 <memset>
c001a86f:	83 c4 10             	add    esp,0x10
c001a872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a876:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a87d:	85 c0                	test   eax,eax
c001a87f:	74 1b                	je     c001a89c <SoundCard::getSamples16(int, short*)+0x4c>
c001a881:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a885:	75 15                	jne    c001a89c <SoundCard::getSamples16(int, short*)+0x4c>
c001a887:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a88b:	55                   	push   ebp
c001a88c:	56                   	push   esi
c001a88d:	50                   	push   eax
c001a88e:	e8 f1 02 00 00       	call   c001ab84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a893:	83 c4 10             	add    esp,0x10
c001a896:	39 c7                	cmp    edi,eax
c001a898:	7d 02                	jge    c001a89c <SoundCard::getSamples16(int, short*)+0x4c>
c001a89a:	89 c7                	mov    edi,eax
c001a89c:	43                   	inc    ebx
c001a89d:	83 fb 20             	cmp    ebx,0x20
c001a8a0:	75 d0                	jne    c001a872 <SoundCard::getSamples16(int, short*)+0x22>
c001a8a2:	83 c4 0c             	add    esp,0xc
c001a8a5:	89 f8                	mov    eax,edi
c001a8a7:	5b                   	pop    ebx
c001a8a8:	5e                   	pop    esi
c001a8a9:	5f                   	pop    edi
c001a8aa:	5d                   	pop    ebp
c001a8ab:	c3                   	ret    

c001a8ac <SoundCard::getSamples32(int, int*)>:
c001a8ac:	55                   	push   ebp
c001a8ad:	57                   	push   edi
c001a8ae:	31 ff                	xor    edi,edi
c001a8b0:	56                   	push   esi
c001a8b1:	31 f6                	xor    esi,esi
c001a8b3:	53                   	push   ebx
c001a8b4:	83 ec 10             	sub    esp,0x10
c001a8b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a8bb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a8bf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a8c3:	c1 e0 02             	shl    eax,0x2
c001a8c6:	50                   	push   eax
c001a8c7:	6a 00                	push   0x0
c001a8c9:	55                   	push   ebp
c001a8ca:	e8 21 5c fe ff       	call   c00004f0 <memset>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a8d9:	85 c0                	test   eax,eax
c001a8db:	74 1b                	je     c001a8f8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a8dd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a8e1:	75 15                	jne    c001a8f8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a8e3:	53                   	push   ebx
c001a8e4:	55                   	push   ebp
c001a8e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8e9:	50                   	push   eax
c001a8ea:	e8 61 03 00 00       	call   c001ac50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a8ef:	83 c4 10             	add    esp,0x10
c001a8f2:	39 c6                	cmp    esi,eax
c001a8f4:	7d 02                	jge    c001a8f8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a8f6:	89 c6                	mov    esi,eax
c001a8f8:	47                   	inc    edi
c001a8f9:	83 ff 20             	cmp    edi,0x20
c001a8fc:	75 d4                	jne    c001a8d2 <SoundCard::getSamples32(int, int*)+0x26>
c001a8fe:	85 f6                	test   esi,esi
c001a900:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a907:	75 0f                	jne    c001a918 <SoundCard::getSamples32(int, int*)+0x6c>
c001a909:	85 c0                	test   eax,eax
c001a90b:	74 1b                	je     c001a928 <SoundCard::getSamples32(int, int*)+0x7c>
c001a90d:	83 ec 0c             	sub    esp,0xc
c001a910:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a912:	53                   	push   ebx
c001a913:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a916:	eb 0d                	jmp    c001a925 <SoundCard::getSamples32(int, int*)+0x79>
c001a918:	85 c0                	test   eax,eax
c001a91a:	75 0c                	jne    c001a928 <SoundCard::getSamples32(int, int*)+0x7c>
c001a91c:	83 ec 0c             	sub    esp,0xc
c001a91f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a921:	53                   	push   ebx
c001a922:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a925:	83 c4 10             	add    esp,0x10
c001a928:	83 c4 0c             	add    esp,0xc
c001a92b:	89 f0                	mov    eax,esi
c001a92d:	5b                   	pop    ebx
c001a92e:	5e                   	pop    esi
c001a92f:	5f                   	pop    edi
c001a930:	5d                   	pop    ebp
c001a931:	c3                   	ret    

c001a932 <SoundCard::addChannel(SoundPort*)>:
c001a932:	83 ec 0c             	sub    esp,0xc
c001a935:	31 c0                	xor    eax,eax
c001a937:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a93b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a943:	74 1b                	je     c001a960 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a945:	40                   	inc    eax
c001a946:	83 f8 20             	cmp    eax,0x20
c001a949:	75 f0                	jne    c001a93b <SoundCard::addChannel(SoundPort*)+0x9>
c001a94b:	83 ec 0c             	sub    esp,0xc
c001a94e:	68 39 2b 02 c0       	push   0xc0022b39
c001a953:	e8 41 6a ff ff       	call   c0011399 <KePanic(char const*)>
c001a958:	83 c4 10             	add    esp,0x10
c001a95b:	83 c8 ff             	or     eax,0xffffffff
c001a95e:	eb 0b                	jmp    c001a96b <SoundCard::addChannel(SoundPort*)+0x39>
c001a960:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a964:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a96b:	83 c4 0c             	add    esp,0xc
c001a96e:	c3                   	ret    
c001a96f:	90                   	nop

c001a970 <SoundCard::removeChannel(int)>:
c001a970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a974:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a978:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a983:	c3                   	ret    

c001a984 <SoundPort::SoundPort(int, int, int, int)>:
c001a984:	83 ec 0c             	sub    esp,0xc
c001a987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a98b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a996:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9a2:	89 10                	mov    DWORD PTR [eax],edx
c001a9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a9ba:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a9bf:	75 13                	jne    c001a9d4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9c7:	05 a0 0f 00 00       	add    eax,0xfa0
c001a9cc:	01 c0                	add    eax,eax
c001a9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a9d2:	66 90                	xchg   ax,ax
c001a9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a9dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9f1:	c1 e0 02             	shl    eax,0x2
c001a9f4:	83 ec 0c             	sub    esp,0xc
c001a9f7:	50                   	push   eax
c001a9f8:	e8 b9 d0 fe ff       	call   c0007ab6 <malloc>
c001a9fd:	83 c4 10             	add    esp,0x10
c001aa00:	89 c2                	mov    edx,eax
c001aa02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aa09:	90                   	nop
c001aa0a:	83 c4 0c             	add    esp,0xc
c001aa0d:	c3                   	ret    
c001aa0e:	66 90                	xchg   ax,ax

c001aa10 <SoundPort::~SoundPort()>:
c001aa10:	83 ec 0c             	sub    esp,0xc
c001aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa17:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa1a:	85 c0                	test   eax,eax
c001aa1c:	74 1e                	je     c001aa3c <SoundPort::~SoundPort()+0x2c>
c001aa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa25:	83 ec 0c             	sub    esp,0xc
c001aa28:	50                   	push   eax
c001aa29:	e8 98 d0 fe ff       	call   c0007ac6 <free>
c001aa2e:	83 c4 10             	add    esp,0x10
c001aa31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa35:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aa3c:	90                   	nop
c001aa3d:	83 c4 0c             	add    esp,0xc
c001aa40:	c3                   	ret    
c001aa41:	90                   	nop
c001aa42:	66 90                	xchg   ax,ax

c001aa44 <SoundPort::unpause()>:
c001aa44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa48:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aa4c:	c3                   	ret    
c001aa4d:	90                   	nop
c001aa4e:	66 90                	xchg   ax,ax

c001aa50 <SoundPort::pause()>:
c001aa50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa54:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aa58:	c3                   	ret    
c001aa59:	90                   	nop
c001aa5a:	66 90                	xchg   ax,ax

c001aa5c <SoundPort::getBufferUsed()>:
c001aa5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa63:	c3                   	ret    

c001aa64 <SoundPort::getBufferSize()>:
c001aa64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa6b:	c3                   	ret    

c001aa6c <SoundPort::buffer16(short*, int)>:
c001aa6c:	55                   	push   ebp
c001aa6d:	57                   	push   edi
c001aa6e:	56                   	push   esi
c001aa6f:	53                   	push   ebx
c001aa70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa74:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aa78:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aa7b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aa7e:	74 68                	je     c001aae8 <SoundPort::buffer16(short*, int)+0x7c>
c001aa80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa84:	85 c9                	test   ecx,ecx
c001aa86:	7e 60                	jle    c001aae8 <SoundPort::buffer16(short*, int)+0x7c>
c001aa88:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aa8c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa8f:	c1 e1 0f             	shl    ecx,0xf
c001aa92:	8d 70 01             	lea    esi,[eax+0x1]
c001aa95:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa98:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aa9b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa9e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaa1:	74 4d                	je     c001aaf0 <SoundPort::buffer16(short*, int)+0x84>
c001aaa3:	31 f6                	xor    esi,esi
c001aaa5:	eb 21                	jmp    c001aac8 <SoundPort::buffer16(short*, int)+0x5c>
c001aaa7:	90                   	nop
c001aaa8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aaad:	8d 79 01             	lea    edi,[ecx+0x1]
c001aab0:	c1 e3 0f             	shl    ebx,0xf
c001aab3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aab6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aab9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aabc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aabf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aac2:	74 1c                	je     c001aae0 <SoundPort::buffer16(short*, int)+0x74>
c001aac4:	89 c6                	mov    esi,eax
c001aac6:	66 90                	xchg   ax,ax
c001aac8:	8d 46 01             	lea    eax,[esi+0x1]
c001aacb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aacf:	75 d7                	jne    c001aaa8 <SoundPort::buffer16(short*, int)+0x3c>
c001aad1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aad5:	8d 76 00             	lea    esi,[esi+0x0]
c001aad8:	5b                   	pop    ebx
c001aad9:	5e                   	pop    esi
c001aada:	5f                   	pop    edi
c001aadb:	5d                   	pop    ebp
c001aadc:	c3                   	ret    
c001aadd:	8d 76 00             	lea    esi,[esi+0x0]
c001aae0:	5b                   	pop    ebx
c001aae1:	8d 46 02             	lea    eax,[esi+0x2]
c001aae4:	5e                   	pop    esi
c001aae5:	5f                   	pop    edi
c001aae6:	5d                   	pop    ebp
c001aae7:	c3                   	ret    
c001aae8:	5b                   	pop    ebx
c001aae9:	31 c0                	xor    eax,eax
c001aaeb:	5e                   	pop    esi
c001aaec:	5f                   	pop    edi
c001aaed:	5d                   	pop    ebp
c001aaee:	c3                   	ret    
c001aaef:	90                   	nop
c001aaf0:	b8 01 00 00 00       	mov    eax,0x1
c001aaf5:	eb e1                	jmp    c001aad8 <SoundPort::buffer16(short*, int)+0x6c>
c001aaf7:	90                   	nop

c001aaf8 <SoundPort::buffer32(int*, int)>:
c001aaf8:	55                   	push   ebp
c001aaf9:	57                   	push   edi
c001aafa:	56                   	push   esi
c001aafb:	53                   	push   ebx
c001aafc:	83 ec 04             	sub    esp,0x4
c001aaff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab07:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab0a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab11:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab14:	74 5a                	je     c001ab70 <SoundPort::buffer32(int*, int)+0x78>
c001ab16:	85 c0                	test   eax,eax
c001ab18:	7e 56                	jle    c001ab70 <SoundPort::buffer32(int*, int)+0x78>
c001ab1a:	8d 71 01             	lea    esi,[ecx+0x1]
c001ab1d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ab20:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ab23:	8b 37                	mov    esi,DWORD PTR [edi]
c001ab25:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ab28:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab2b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab2e:	74 4c                	je     c001ab7c <SoundPort::buffer32(int*, int)+0x84>
c001ab30:	31 f6                	xor    esi,esi
c001ab32:	eb 1c                	jmp    c001ab50 <SoundPort::buffer32(int*, int)+0x58>
c001ab34:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ab37:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ab3a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ab3d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ab40:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ab44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab47:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab4a:	74 18                	je     c001ab64 <SoundPort::buffer32(int*, int)+0x6c>
c001ab4c:	89 de                	mov    esi,ebx
c001ab4e:	66 90                	xchg   ax,ax
c001ab50:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ab53:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ab56:	75 dc                	jne    c001ab34 <SoundPort::buffer32(int*, int)+0x3c>
c001ab58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab5b:	90                   	nop
c001ab5c:	83 c4 04             	add    esp,0x4
c001ab5f:	5b                   	pop    ebx
c001ab60:	5e                   	pop    esi
c001ab61:	5f                   	pop    edi
c001ab62:	5d                   	pop    ebp
c001ab63:	c3                   	ret    
c001ab64:	83 c4 04             	add    esp,0x4
c001ab67:	8d 46 02             	lea    eax,[esi+0x2]
c001ab6a:	5b                   	pop    ebx
c001ab6b:	5e                   	pop    esi
c001ab6c:	5f                   	pop    edi
c001ab6d:	5d                   	pop    ebp
c001ab6e:	c3                   	ret    
c001ab6f:	90                   	nop
c001ab70:	83 c4 04             	add    esp,0x4
c001ab73:	31 c0                	xor    eax,eax
c001ab75:	5b                   	pop    ebx
c001ab76:	5e                   	pop    esi
c001ab77:	5f                   	pop    edi
c001ab78:	5d                   	pop    ebp
c001ab79:	c3                   	ret    
c001ab7a:	66 90                	xchg   ax,ax
c001ab7c:	b8 01 00 00 00       	mov    eax,0x1
c001ab81:	eb d9                	jmp    c001ab5c <SoundPort::buffer32(int*, int)+0x64>
c001ab83:	90                   	nop

c001ab84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ab84:	57                   	push   edi
c001ab85:	56                   	push   esi
c001ab86:	53                   	push   ebx
c001ab87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab8b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ab8f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ab95:	39 03                	cmp    DWORD PTR [ebx],eax
c001ab97:	74 13                	je     c001abac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ab99:	83 ec 0c             	sub    esp,0xc
c001ab9c:	68 8c 2b 02 c0       	push   0xc0022b8c
c001aba1:	e8 f3 67 ff ff       	call   c0011399 <KePanic(char const*)>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	8d 76 00             	lea    esi,[esi+0x0]
c001abac:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001abb2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001abb5:	74 11                	je     c001abc8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001abb7:	83 ec 0c             	sub    esp,0xc
c001abba:	68 cb 2b 02 c0       	push   0xc0022bcb
c001abbf:	e8 d5 67 ff ff       	call   c0011399 <KePanic(char const*)>
c001abc4:	83 c4 10             	add    esp,0x10
c001abc7:	90                   	nop
c001abc8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001abce:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001abd1:	74 11                	je     c001abe4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001abd3:	83 ec 0c             	sub    esp,0xc
c001abd6:	68 cb 2b 02 c0       	push   0xc0022bcb
c001abdb:	e8 b9 67 ff ff       	call   c0011399 <KePanic(char const*)>
c001abe0:	83 c4 10             	add    esp,0x10
c001abe3:	90                   	nop
c001abe4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001abe7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001abeb:	7e 07                	jle    c001abf4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001abed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001abf1:	8d 76 00             	lea    esi,[esi+0x0]
c001abf4:	85 f6                	test   esi,esi
c001abf6:	7e 2c                	jle    c001ac24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001abf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abfc:	8d 3c 36             	lea    edi,[esi+esi*1]
c001abff:	31 c9                	xor    ecx,ecx
c001ac01:	01 d7                	add    edi,edx
c001ac03:	90                   	nop
c001ac04:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ac07:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ac0a:	85 c0                	test   eax,eax
c001ac0c:	79 06                	jns    c001ac14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ac0e:	05 ff 7f 00 00       	add    eax,0x7fff
c001ac13:	90                   	nop
c001ac14:	c1 f8 0f             	sar    eax,0xf
c001ac17:	83 c1 04             	add    ecx,0x4
c001ac1a:	66 01 02             	add    WORD PTR [edx],ax
c001ac1d:	83 c2 02             	add    edx,0x2
c001ac20:	39 d7                	cmp    edi,edx
c001ac22:	75 e0                	jne    c001ac04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ac24:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac2a:	83 ec 04             	sub    esp,0x4
c001ac2d:	29 f0                	sub    eax,esi
c001ac2f:	c1 e0 02             	shl    eax,0x2
c001ac32:	50                   	push   eax
c001ac33:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ac36:	50                   	push   eax
c001ac37:	52                   	push   edx
c001ac38:	e8 93 57 fe ff       	call   c00003d0 <memmove>
c001ac3d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac40:	83 c4 10             	add    esp,0x10
c001ac43:	29 f0                	sub    eax,esi
c001ac45:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ac48:	89 f0                	mov    eax,esi
c001ac4a:	5b                   	pop    ebx
c001ac4b:	5e                   	pop    esi
c001ac4c:	5f                   	pop    edi
c001ac4d:	c3                   	ret    
c001ac4e:	66 90                	xchg   ax,ax

c001ac50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ac50:	57                   	push   edi
c001ac51:	56                   	push   esi
c001ac52:	53                   	push   ebx
c001ac53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ac5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ac5f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ac65:	39 06                	cmp    DWORD PTR [esi],eax
c001ac67:	74 13                	je     c001ac7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ac69:	83 ec 0c             	sub    esp,0xc
c001ac6c:	68 ac 2b 02 c0       	push   0xc0022bac
c001ac71:	e8 23 67 ff ff       	call   c0011399 <KePanic(char const*)>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	8d 76 00             	lea    esi,[esi+0x0]
c001ac7c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ac82:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ac85:	74 11                	je     c001ac98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ac87:	83 ec 0c             	sub    esp,0xc
c001ac8a:	68 e7 2b 02 c0       	push   0xc0022be7
c001ac8f:	e8 05 67 ff ff       	call   c0011399 <KePanic(char const*)>
c001ac94:	83 c4 10             	add    esp,0x10
c001ac97:	90                   	nop
c001ac98:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ac9e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001aca1:	74 11                	je     c001acb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001aca3:	83 ec 0c             	sub    esp,0xc
c001aca6:	68 e7 2b 02 c0       	push   0xc0022be7
c001acab:	e8 e9 66 ff ff       	call   c0011399 <KePanic(char const*)>
c001acb0:	83 c4 10             	add    esp,0x10
c001acb3:	90                   	nop
c001acb4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001acb7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001acbb:	7e 07                	jle    c001acc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001acbd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001acc1:	8d 76 00             	lea    esi,[esi+0x0]
c001acc4:	85 ff                	test   edi,edi
c001acc6:	7e 1c                	jle    c001ace4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001acc8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001accf:	31 c0                	xor    eax,eax
c001acd1:	8d 76 00             	lea    esi,[esi+0x0]
c001acd4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001acd7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001acda:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001acdd:	83 c0 04             	add    eax,0x4
c001ace0:	39 c1                	cmp    ecx,eax
c001ace2:	75 f0                	jne    c001acd4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ace4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ace7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001acea:	83 ec 04             	sub    esp,0x4
c001aced:	29 f8                	sub    eax,edi
c001acef:	c1 e0 02             	shl    eax,0x2
c001acf2:	50                   	push   eax
c001acf3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001acf6:	50                   	push   eax
c001acf7:	52                   	push   edx
c001acf8:	e8 d3 56 fe ff       	call   c00003d0 <memmove>
c001acfd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ad00:	83 c4 10             	add    esp,0x10
c001ad03:	29 f8                	sub    eax,edi
c001ad05:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ad08:	89 f8                	mov    eax,edi
c001ad0a:	5b                   	pop    ebx
c001ad0b:	5e                   	pop    esi
c001ad0c:	5f                   	pop    edi
c001ad0d:	c3                   	ret    

c001ad0e <PCI::open(int, int, void*)>:
c001ad0e:	83 ec 18             	sub    esp,0x18
c001ad11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad15:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad19:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad1f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad21:	50                   	push   eax
c001ad22:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ad25:	31 c0                	xor    eax,eax
c001ad27:	83 c4 1c             	add    esp,0x1c
c001ad2a:	c3                   	ret    
c001ad2b:	90                   	nop

c001ad2c <PCI::close(int, int, void*)>:
c001ad2c:	31 c0                	xor    eax,eax
c001ad2e:	c3                   	ret    
c001ad2f:	90                   	nop

c001ad30 <PCI::PCI()>:
c001ad30:	83 ec 0c             	sub    esp,0xc
c001ad33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad37:	83 ec 08             	sub    esp,0x8
c001ad3a:	68 03 2c 02 c0       	push   0xc0022c03
c001ad3f:	50                   	push   eax
c001ad40:	e8 87 13 ff ff       	call   c000c0cc <Bus::Bus(char const*)>
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	ba ac 2c 02 c0       	mov    edx,0xc0022cac
c001ad4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad51:	89 10                	mov    DWORD PTR [eax],edx
c001ad53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad57:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ad61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad65:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ad6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad74:	0f b6 d0             	movzx  edx,al
c001ad77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ad82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad8c:	0f b6 d0             	movzx  edx,al
c001ad8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad93:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ad98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ada2:	8d 50 01             	lea    edx,[eax+0x1]
c001ada5:	88 d1                	mov    cl,dl
c001ada7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adab:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001adb1:	0f b6 d0             	movzx  edx,al
c001adb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001adbc:	83 c9 c0             	or     ecx,0xffffffc0
c001adbf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001adc3:	90                   	nop
c001adc4:	83 c4 0c             	add    esp,0xc
c001adc7:	c3                   	ret    

c001adc8 <PCI::readBAR8(unsigned int, int)>:
c001adc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001add0:	f6 c2 01             	test   dl,0x1
c001add3:	74 07                	je     c001addc <PCI::readBAR8(unsigned int, int)+0x14>
c001add5:	83 e2 fc             	and    edx,0xfffffffc
c001add8:	01 c2                	add    edx,eax
c001adda:	ec                   	in     al,dx
c001addb:	c3                   	ret    
c001addc:	83 e2 f0             	and    edx,0xfffffff0
c001addf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ade2:	c3                   	ret    
c001ade3:	90                   	nop

c001ade4 <PCI::readBAR16(unsigned int, int)>:
c001ade4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ade8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adec:	f6 c2 01             	test   dl,0x1
c001adef:	74 08                	je     c001adf9 <PCI::readBAR16(unsigned int, int)+0x15>
c001adf1:	83 e2 fc             	and    edx,0xfffffffc
c001adf4:	01 c2                	add    edx,eax
c001adf6:	66 ed                	in     ax,dx
c001adf8:	c3                   	ret    
c001adf9:	83 e2 f0             	and    edx,0xfffffff0
c001adfc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ae00:	c3                   	ret    
c001ae01:	90                   	nop

c001ae02 <PCI::readBAR32(unsigned int, int)>:
c001ae02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae0a:	f6 c2 01             	test   dl,0x1
c001ae0d:	74 07                	je     c001ae16 <PCI::readBAR32(unsigned int, int)+0x14>
c001ae0f:	83 e2 fc             	and    edx,0xfffffffc
c001ae12:	01 c2                	add    edx,eax
c001ae14:	ed                   	in     eax,dx
c001ae15:	c3                   	ret    
c001ae16:	83 e2 f0             	and    edx,0xfffffff0
c001ae19:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ae1c:	c3                   	ret    
c001ae1d:	90                   	nop

c001ae1e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ae1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae2a:	f6 c2 01             	test   dl,0x1
c001ae2d:	74 07                	je     c001ae36 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ae2f:	83 e2 fc             	and    edx,0xfffffffc
c001ae32:	01 ca                	add    edx,ecx
c001ae34:	ee                   	out    dx,al
c001ae35:	c3                   	ret    
c001ae36:	83 e2 f0             	and    edx,0xfffffff0
c001ae39:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ae3c:	c3                   	ret    
c001ae3d:	90                   	nop

c001ae3e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ae3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae4a:	f6 c2 01             	test   dl,0x1
c001ae4d:	74 08                	je     c001ae57 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ae4f:	83 e2 fc             	and    edx,0xfffffffc
c001ae52:	01 ca                	add    edx,ecx
c001ae54:	66 ef                	out    dx,ax
c001ae56:	c3                   	ret    
c001ae57:	83 e2 f0             	and    edx,0xfffffff0
c001ae5a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ae5e:	c3                   	ret    
c001ae5f:	90                   	nop

c001ae60 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ae60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae6c:	f6 c2 01             	test   dl,0x1
c001ae6f:	74 07                	je     c001ae78 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ae71:	83 e2 fc             	and    edx,0xfffffffc
c001ae74:	01 ca                	add    edx,ecx
c001ae76:	ef                   	out    dx,eax
c001ae77:	c3                   	ret    
c001ae78:	83 e2 f0             	and    edx,0xfffffff0
c001ae7b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ae7e:	c3                   	ret    
c001ae7f:	90                   	nop

c001ae80 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae80:	55                   	push   ebp
c001ae81:	57                   	push   edi
c001ae82:	56                   	push   esi
c001ae83:	53                   	push   ebx
c001ae84:	83 ec 0c             	sub    esp,0xc
c001ae87:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ae8c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ae90:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ae94:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ae98:	83 fe 07             	cmp    esi,0x7
c001ae9b:	76 10                	jbe    c001aead <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ae9d:	83 ec 0c             	sub    esp,0xc
c001aea0:	68 0b 2c 02 c0       	push   0xc0022c0b
c001aea5:	e8 ef 64 ff ff       	call   c0011399 <KePanic(char const*)>
c001aeaa:	83 c4 10             	add    esp,0x10
c001aead:	0f b6 db             	movzx  ebx,bl
c001aeb0:	83 fb 0f             	cmp    ebx,0xf
c001aeb3:	76 10                	jbe    c001aec5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001aeb5:	83 ec 0c             	sub    esp,0xc
c001aeb8:	68 3b 2c 02 c0       	push   0xc0022c3b
c001aebd:	e8 d7 64 ff ff       	call   c0011399 <KePanic(char const*)>
c001aec2:	83 c4 10             	add    esp,0x10
c001aec5:	8d 04 36             	lea    eax,[esi+esi*1]
c001aec8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aecd:	83 c8 f0             	or     eax,0xfffffff0
c001aed0:	ee                   	out    dx,al
c001aed1:	ba fa 0c 00 00       	mov    edx,0xcfa
c001aed6:	89 e8                	mov    eax,ebp
c001aed8:	ee                   	out    dx,al
c001aed9:	83 c4 0c             	add    esp,0xc
c001aedc:	89 d8                	mov    eax,ebx
c001aede:	89 f9                	mov    ecx,edi
c001aee0:	c1 e0 08             	shl    eax,0x8
c001aee3:	0f b6 d9             	movzx  ebx,cl
c001aee6:	83 e3 fc             	and    ebx,0xfffffffc
c001aee9:	09 d8                	or     eax,ebx
c001aeeb:	5b                   	pop    ebx
c001aeec:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001aef1:	5e                   	pop    esi
c001aef2:	5f                   	pop    edi
c001aef3:	5d                   	pop    ebp
c001aef4:	c3                   	ret    
c001aef5:	90                   	nop

c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aef6:	57                   	push   edi
c001aef7:	56                   	push   esi
c001aef8:	53                   	push   ebx
c001aef9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af01:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001af07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af0b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af0f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af13:	83 ff 01             	cmp    edi,0x1
c001af16:	75 3f                	jne    c001af57 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001af18:	89 de                	mov    esi,ebx
c001af1a:	0f b6 c0             	movzx  eax,al
c001af1d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001af23:	c1 e0 10             	shl    eax,0x10
c001af26:	0f b6 c9             	movzx  ecx,cl
c001af29:	09 f0                	or     eax,esi
c001af2b:	c1 e1 08             	shl    ecx,0x8
c001af2e:	0f b6 d2             	movzx  edx,dl
c001af31:	09 c8                	or     eax,ecx
c001af33:	c1 e2 0b             	shl    edx,0xb
c001af36:	09 d0                	or     eax,edx
c001af38:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af3d:	0d 00 00 00 80       	or     eax,0x80000000
c001af42:	ef                   	out    dx,eax
c001af43:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af48:	ed                   	in     eax,dx
c001af49:	83 e3 02             	and    ebx,0x2
c001af4c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af53:	d3 e8                	shr    eax,cl
c001af55:	eb 44                	jmp    c001af9b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af57:	83 ff 02             	cmp    edi,0x2
c001af5a:	75 2d                	jne    c001af89 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	0f b6 c9             	movzx  ecx,cl
c001af62:	0f b6 d2             	movzx  edx,dl
c001af65:	0f b6 fb             	movzx  edi,bl
c001af68:	0f b6 c0             	movzx  eax,al
c001af6b:	57                   	push   edi
c001af6c:	51                   	push   ecx
c001af6d:	52                   	push   edx
c001af6e:	50                   	push   eax
c001af6f:	56                   	push   esi
c001af70:	e8 0b ff ff ff       	call   c001ae80 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af75:	89 c2                	mov    edx,eax
c001af77:	ed                   	in     eax,dx
c001af78:	83 e3 02             	and    ebx,0x2
c001af7b:	83 c4 20             	add    esp,0x20
c001af7e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af85:	d3 e8                	shr    eax,cl
c001af87:	eb 12                	jmp    c001af9b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af89:	83 ec 0c             	sub    esp,0xc
c001af8c:	68 6b 2c 02 c0       	push   0xc0022c6b
c001af91:	e8 03 64 ff ff       	call   c0011399 <KePanic(char const*)>
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	31 c0                	xor    eax,eax
c001af9b:	5b                   	pop    ebx
c001af9c:	5e                   	pop    esi
c001af9d:	5f                   	pop    edi
c001af9e:	c3                   	ret    
c001af9f:	90                   	nop

c001afa0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001afa0:	83 ec 18             	sub    esp,0x18
c001afa3:	6a 00                	push   0x0
c001afa5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afaa:	50                   	push   eax
c001afab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afb0:	50                   	push   eax
c001afb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afb6:	50                   	push   eax
c001afb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afbb:	e8 36 ff ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afc0:	83 c4 2c             	add    esp,0x2c
c001afc3:	c3                   	ret    

c001afc4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001afc4:	83 ec 18             	sub    esp,0x18
c001afc7:	6a 0e                	push   0xe
c001afc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afce:	50                   	push   eax
c001afcf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afd4:	50                   	push   eax
c001afd5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afda:	50                   	push   eax
c001afdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afdf:	e8 12 ff ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afe4:	83 c4 2c             	add    esp,0x2c
c001afe7:	0f b6 c0             	movzx  eax,al
c001afea:	c3                   	ret    
c001afeb:	90                   	nop

c001afec <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001afec:	55                   	push   ebp
c001afed:	57                   	push   edi
c001afee:	56                   	push   esi
c001afef:	53                   	push   ebx
c001aff0:	83 ec 18             	sub    esp,0x18
c001aff3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001aff8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001affd:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b002:	6a 0a                	push   0xa
c001b004:	56                   	push   esi
c001b005:	55                   	push   ebp
c001b006:	57                   	push   edi
c001b007:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b00b:	e8 e6 fe ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b010:	83 c4 14             	add    esp,0x14
c001b013:	89 c3                	mov    ebx,eax
c001b015:	6a 0a                	push   0xa
c001b017:	0f b6 db             	movzx  ebx,bl
c001b01a:	56                   	push   esi
c001b01b:	55                   	push   ebp
c001b01c:	57                   	push   edi
c001b01d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b021:	e8 d0 fe ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b026:	83 c4 2c             	add    esp,0x2c
c001b029:	25 00 ff 00 00       	and    eax,0xff00
c001b02e:	09 d8                	or     eax,ebx
c001b030:	5b                   	pop    ebx
c001b031:	5e                   	pop    esi
c001b032:	5f                   	pop    edi
c001b033:	5d                   	pop    ebp
c001b034:	c3                   	ret    
c001b035:	90                   	nop

c001b036 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b036:	83 ec 18             	sub    esp,0x18
c001b039:	6a 08                	push   0x8
c001b03b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b040:	50                   	push   eax
c001b041:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b046:	50                   	push   eax
c001b047:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b04c:	50                   	push   eax
c001b04d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b051:	e8 a0 fe ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b056:	83 c4 2c             	add    esp,0x2c
c001b059:	0f b6 c4             	movzx  eax,ah
c001b05c:	c3                   	ret    
c001b05d:	90                   	nop

c001b05e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b05e:	83 ec 18             	sub    esp,0x18
c001b061:	6a 08                	push   0x8
c001b063:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b068:	50                   	push   eax
c001b069:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b06e:	50                   	push   eax
c001b06f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b074:	50                   	push   eax
c001b075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b079:	e8 78 fe ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b07e:	83 c4 2c             	add    esp,0x2c
c001b081:	c3                   	ret    

c001b082 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b082:	83 ec 18             	sub    esp,0x18
c001b085:	6a 3c                	push   0x3c
c001b087:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b08c:	50                   	push   eax
c001b08d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b092:	50                   	push   eax
c001b093:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b098:	50                   	push   eax
c001b099:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b09d:	e8 54 fe ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a2:	83 c4 2c             	add    esp,0x2c
c001b0a5:	c3                   	ret    

c001b0a6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b0a6:	83 ec 18             	sub    esp,0x18
c001b0a9:	6a 18                	push   0x18
c001b0ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0b0:	50                   	push   eax
c001b0b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0b6:	50                   	push   eax
c001b0b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0bc:	50                   	push   eax
c001b0bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0c1:	e8 30 fe ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0c6:	83 c4 2c             	add    esp,0x2c
c001b0c9:	0f b6 c4             	movzx  eax,ah
c001b0cc:	c3                   	ret    
c001b0cd:	90                   	nop

c001b0ce <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b0ce:	55                   	push   ebp
c001b0cf:	57                   	push   edi
c001b0d0:	56                   	push   esi
c001b0d1:	53                   	push   ebx
c001b0d2:	83 ec 28             	sub    esp,0x28
c001b0d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b0d9:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b0de:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b0e3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b0e8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b0ef:	8d 43 12             	lea    eax,[ebx+0x12]
c001b0f2:	83 c3 10             	add    ebx,0x10
c001b0f5:	0f b6 c0             	movzx  eax,al
c001b0f8:	0f b6 db             	movzx  ebx,bl
c001b0fb:	50                   	push   eax
c001b0fc:	51                   	push   ecx
c001b0fd:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b101:	57                   	push   edi
c001b102:	55                   	push   ebp
c001b103:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b107:	e8 ea fd ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b10c:	83 c4 14             	add    esp,0x14
c001b10f:	89 c6                	mov    esi,eax
c001b111:	53                   	push   ebx
c001b112:	c1 e6 10             	shl    esi,0x10
c001b115:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b119:	51                   	push   ecx
c001b11a:	57                   	push   edi
c001b11b:	55                   	push   ebp
c001b11c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b120:	e8 d1 fd ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b125:	83 c4 3c             	add    esp,0x3c
c001b128:	0f b7 c0             	movzx  eax,ax
c001b12b:	5b                   	pop    ebx
c001b12c:	09 f0                	or     eax,esi
c001b12e:	5e                   	pop    esi
c001b12f:	5f                   	pop    edi
c001b130:	5d                   	pop    ebp
c001b131:	c3                   	ret    

c001b132 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b132:	55                   	push   ebp
c001b133:	57                   	push   edi
c001b134:	56                   	push   esi
c001b135:	53                   	push   ebx
c001b136:	83 ec 0c             	sub    esp,0xc
c001b139:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b13d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b141:	89 f5                	mov    ebp,esi
c001b143:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b149:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b14d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b151:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b155:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b159:	83 f9 01             	cmp    ecx,0x1
c001b15c:	75 5d                	jne    c001b1bb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b15e:	0f b6 c8             	movzx  ecx,al
c001b161:	0f b6 d2             	movzx  edx,dl
c001b164:	c1 e1 10             	shl    ecx,0x10
c001b167:	c1 e2 0b             	shl    edx,0xb
c001b16a:	89 f0                	mov    eax,esi
c001b16c:	25 fc 00 00 00       	and    eax,0xfc
c001b171:	09 c1                	or     ecx,eax
c001b173:	89 e8                	mov    eax,ebp
c001b175:	0f b6 c0             	movzx  eax,al
c001b178:	c1 e0 08             	shl    eax,0x8
c001b17b:	09 c1                	or     ecx,eax
c001b17d:	09 d1                	or     ecx,edx
c001b17f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b184:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b18a:	89 c8                	mov    eax,ecx
c001b18c:	ef                   	out    dx,eax
c001b18d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b192:	ed                   	in     eax,dx
c001b193:	0f b7 db             	movzx  ebx,bx
c001b196:	83 e6 02             	and    esi,0x2
c001b199:	74 0a                	je     c001b1a5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b19b:	0f b7 d0             	movzx  edx,ax
c001b19e:	c1 e3 10             	shl    ebx,0x10
c001b1a1:	09 d3                	or     ebx,edx
c001b1a3:	eb 05                	jmp    c001b1aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b1a5:	66 31 c0             	xor    ax,ax
c001b1a8:	09 c3                	or     ebx,eax
c001b1aa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1af:	89 c8                	mov    eax,ecx
c001b1b1:	ef                   	out    dx,eax
c001b1b2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1b7:	89 d8                	mov    eax,ebx
c001b1b9:	eb 41                	jmp    c001b1fc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b1bb:	83 f9 02             	cmp    ecx,0x2
c001b1be:	75 45                	jne    c001b205 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b1c0:	83 ec 0c             	sub    esp,0xc
c001b1c3:	0f b6 d2             	movzx  edx,dl
c001b1c6:	89 f1                	mov    ecx,esi
c001b1c8:	0f b6 c0             	movzx  eax,al
c001b1cb:	0f b6 f1             	movzx  esi,cl
c001b1ce:	89 e9                	mov    ecx,ebp
c001b1d0:	56                   	push   esi
c001b1d1:	0f b6 c9             	movzx  ecx,cl
c001b1d4:	51                   	push   ecx
c001b1d5:	52                   	push   edx
c001b1d6:	50                   	push   eax
c001b1d7:	57                   	push   edi
c001b1d8:	e8 a3 fc ff ff       	call   c001ae80 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1dd:	89 c2                	mov    edx,eax
c001b1df:	ed                   	in     eax,dx
c001b1e0:	83 c4 20             	add    esp,0x20
c001b1e3:	0f b7 db             	movzx  ebx,bx
c001b1e6:	f6 c2 02             	test   dl,0x2
c001b1e9:	74 0c                	je     c001b1f7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b1eb:	0f b7 c8             	movzx  ecx,ax
c001b1ee:	89 d8                	mov    eax,ebx
c001b1f0:	c1 e0 10             	shl    eax,0x10
c001b1f3:	09 c8                	or     eax,ecx
c001b1f5:	eb 05                	jmp    c001b1fc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b1f7:	66 31 c0             	xor    ax,ax
c001b1fa:	09 d8                	or     eax,ebx
c001b1fc:	ef                   	out    dx,eax
c001b1fd:	83 c4 0c             	add    esp,0xc
c001b200:	5b                   	pop    ebx
c001b201:	5e                   	pop    esi
c001b202:	5f                   	pop    edi
c001b203:	5d                   	pop    ebp
c001b204:	c3                   	ret    
c001b205:	c7 44 24 20 6b 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c6b
c001b20d:	83 c4 0c             	add    esp,0xc
c001b210:	5b                   	pop    ebx
c001b211:	5e                   	pop    esi
c001b212:	5f                   	pop    edi
c001b213:	5d                   	pop    ebp
c001b214:	e9 80 61 ff ff       	jmp    c0011399 <KePanic(char const*)>
c001b219:	90                   	nop

c001b21a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b21a:	55                   	push   ebp
c001b21b:	57                   	push   edi
c001b21c:	56                   	push   esi
c001b21d:	53                   	push   ebx
c001b21e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b224:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b22b:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b232:	0f 85 bd 00 00 00    	jne    c001b2f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	68 14 01 00 00       	push   0x114
c001b240:	e8 71 c8 fe ff       	call   c0007ab6 <malloc>
c001b245:	83 c4 0c             	add    esp,0xc
c001b248:	89 c3                	mov    ebx,eax
c001b24a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b250:	68 71 2c 02 c0       	push   0xc0022c71
c001b255:	50                   	push   eax
c001b256:	e8 ed 05 ff ff       	call   c000b848 <File::File(char const*, Process*)>
c001b25b:	83 c4 10             	add    esp,0x10
c001b25e:	85 db                	test   ebx,ebx
c001b260:	0f 84 67 02 00 00    	je     c001b4cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b266:	56                   	push   esi
c001b267:	56                   	push   esi
c001b268:	6a 01                	push   0x1
c001b26a:	53                   	push   ebx
c001b26b:	e8 a0 06 ff ff       	call   c000b910 <File::open(FileOpenMode)>
c001b270:	83 c4 10             	add    esp,0x10
c001b273:	85 c0                	test   eax,eax
c001b275:	0f 85 52 02 00 00    	jne    c001b4cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b27b:	52                   	push   edx
c001b27c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b280:	50                   	push   eax
c001b281:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b285:	50                   	push   eax
c001b286:	53                   	push   ebx
c001b287:	e8 86 09 ff ff       	call   c000bc12 <File::stat(unsigned long long*, bool*)>
c001b28c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b290:	40                   	inc    eax
c001b291:	89 04 24             	mov    DWORD PTR [esp],eax
c001b294:	e8 1d c8 fe ff       	call   c0007ab6 <malloc>
c001b299:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b29d:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b2a2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b2a6:	59                   	pop    ecx
c001b2a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2a9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b2ad:	51                   	push   ecx
c001b2ae:	50                   	push   eax
c001b2af:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b2b3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b2b7:	53                   	push   ebx
c001b2b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2bb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b2bf:	83 c4 20             	add    esp,0x20
c001b2c2:	89 c8                	mov    eax,ecx
c001b2c4:	99                   	cdq    
c001b2c5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b2c9:	0f 85 fe 01 00 00    	jne    c001b4cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b2cf:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b2d3:	0f 85 f4 01 00 00    	jne    c001b4cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b2d9:	83 ec 0c             	sub    esp,0xc
c001b2dc:	53                   	push   ebx
c001b2dd:	e8 8c 06 ff ff       	call   c000b96e <File::close()>
c001b2e2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2e6:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b2ed:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b2f2:	83 c4 10             	add    esp,0x10
c001b2f5:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b2fa:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b300:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b304:	31 f6                	xor    esi,esi
c001b306:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b30e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b315:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b31a:	31 c9                	xor    ecx,ecx
c001b31c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b324:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b329:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b331:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b335:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b33d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b341:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b345:	0f 8e 82 01 00 00    	jle    c001b4cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b34b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b34e:	d4 40                	aam    0x40
c001b350:	d5 39                	aad    0x39
c001b352:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b356:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b35a:	d4 40                	aam    0x40
c001b35c:	d5 39                	aad    0x39
c001b35e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b362:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b366:	d4 40                	aam    0x40
c001b368:	d5 39                	aad    0x39
c001b36a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b36e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b372:	d4 40                	aam    0x40
c001b374:	d5 39                	aad    0x39
c001b376:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b37a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b37e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b382:	3c 56                	cmp    al,0x56
c001b384:	74 43                	je     c001b3c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b386:	d4 40                	aam    0x40
c001b388:	d5 39                	aad    0x39
c001b38a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b38d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b391:	0f b6 c9             	movzx  ecx,cl
c001b394:	c1 e1 04             	shl    ecx,0x4
c001b397:	d4 40                	aam    0x40
c001b399:	d5 39                	aad    0x39
c001b39b:	83 e8 30             	sub    eax,0x30
c001b39e:	0f b6 c0             	movzx  eax,al
c001b3a1:	09 c1                	or     ecx,eax
c001b3a3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b3a7:	c1 e1 04             	shl    ecx,0x4
c001b3aa:	d4 40                	aam    0x40
c001b3ac:	d5 39                	aad    0x39
c001b3ae:	83 e8 30             	sub    eax,0x30
c001b3b1:	0f b6 c0             	movzx  eax,al
c001b3b4:	09 c1                	or     ecx,eax
c001b3b6:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b3ba:	c1 e1 04             	shl    ecx,0x4
c001b3bd:	d4 40                	aam    0x40
c001b3bf:	d5 39                	aad    0x39
c001b3c1:	83 e8 30             	sub    eax,0x30
c001b3c4:	0f b6 c0             	movzx  eax,al
c001b3c7:	09 c1                	or     ecx,eax
c001b3c9:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b3cd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b3d1:	3c 58                	cmp    al,0x58
c001b3d3:	74 47                	je     c001b41c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b3d5:	d4 40                	aam    0x40
c001b3d7:	d5 39                	aad    0x39
c001b3d9:	8d 50 d0             	lea    edx,[eax-0x30]
c001b3dc:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b3e0:	0f b6 d2             	movzx  edx,dl
c001b3e3:	c1 e2 04             	shl    edx,0x4
c001b3e6:	d4 40                	aam    0x40
c001b3e8:	d5 39                	aad    0x39
c001b3ea:	83 e8 30             	sub    eax,0x30
c001b3ed:	0f b6 c0             	movzx  eax,al
c001b3f0:	09 c2                	or     edx,eax
c001b3f2:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b3f6:	c1 e2 04             	shl    edx,0x4
c001b3f9:	d4 40                	aam    0x40
c001b3fb:	d5 39                	aad    0x39
c001b3fd:	83 e8 30             	sub    eax,0x30
c001b400:	0f b6 c0             	movzx  eax,al
c001b403:	09 c2                	or     edx,eax
c001b405:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b409:	c1 e2 04             	shl    edx,0x4
c001b40c:	d4 40                	aam    0x40
c001b40e:	d5 39                	aad    0x39
c001b410:	83 e8 30             	sub    eax,0x30
c001b413:	0f b6 c0             	movzx  eax,al
c001b416:	09 c2                	or     edx,eax
c001b418:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b41c:	83 c6 10             	add    esi,0x10
c001b41f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b423:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b427:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b42b:	83 fa 0a             	cmp    edx,0xa
c001b42e:	74 0b                	je     c001b43b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b430:	47                   	inc    edi
c001b431:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b435:	75 19                	jne    c001b450 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b437:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b43b:	31 c0                	xor    eax,eax
c001b43d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b442:	0f 94 c0             	sete   al
c001b445:	01 c6                	add    esi,eax
c001b447:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b44c:	75 0b                	jne    c001b459 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b44e:	eb 14                	jmp    c001b464 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b450:	46                   	inc    esi
c001b451:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b454:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b457:	eb ca                	jmp    c001b423 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b459:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b45e:	0f 85 dd fe ff ff    	jne    c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b464:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b469:	74 10                	je     c001b47b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b46b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b470:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b475:	0f 85 c6 fe ff ff    	jne    c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b47b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b47f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b483:	83 e8 30             	sub    eax,0x30
c001b486:	83 ef 30             	sub    edi,0x30
c001b489:	c1 e0 04             	shl    eax,0x4
c001b48c:	09 f8                	or     eax,edi
c001b48e:	0f b6 c0             	movzx  eax,al
c001b491:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b495:	0f 85 a6 fe ff ff    	jne    c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b49b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b49f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b4a3:	83 e8 30             	sub    eax,0x30
c001b4a6:	83 ef 30             	sub    edi,0x30
c001b4a9:	c1 e0 04             	shl    eax,0x4
c001b4ac:	09 f8                	or     eax,edi
c001b4ae:	0f b6 c0             	movzx  eax,al
c001b4b1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b4b5:	0f 85 86 fe ff ff    	jne    c001b341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b4bb:	50                   	push   eax
c001b4bc:	50                   	push   eax
c001b4bd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b4c1:	50                   	push   eax
c001b4c2:	55                   	push   ebp
c001b4c3:	e8 78 51 fe ff       	call   c0000640 <strcpy>
c001b4c8:	83 c4 10             	add    esp,0x10
c001b4cb:	eb 06                	jmp    c001b4d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b4cd:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b4d1:	31 ed                	xor    ebp,ebp
c001b4d3:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b4d9:	89 e8                	mov    eax,ebp
c001b4db:	5b                   	pop    ebx
c001b4dc:	5e                   	pop    esi
c001b4dd:	5f                   	pop    edi
c001b4de:	5d                   	pop    ebp
c001b4df:	c3                   	ret    

c001b4e0 <PCI::checkBus(unsigned char)>:
c001b4e0:	56                   	push   esi
c001b4e1:	53                   	push   ebx
c001b4e2:	31 db                	xor    ebx,ebx
c001b4e4:	51                   	push   ecx
c001b4e5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b4ea:	52                   	push   edx
c001b4eb:	53                   	push   ebx
c001b4ec:	43                   	inc    ebx
c001b4ed:	56                   	push   esi
c001b4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4f2:	e8 03 03 00 00       	call   c001b7fa <PCI::checkDevice(unsigned char, unsigned char)>
c001b4f7:	83 c4 10             	add    esp,0x10
c001b4fa:	83 fb 20             	cmp    ebx,0x20
c001b4fd:	75 eb                	jne    c001b4ea <PCI::checkBus(unsigned char)+0xa>
c001b4ff:	58                   	pop    eax
c001b500:	5b                   	pop    ebx
c001b501:	5e                   	pop    esi
c001b502:	c3                   	ret    
c001b503:	90                   	nop

c001b504 <PCI::foundDevice(PCIDeviceInfo)>:
c001b504:	55                   	push   ebp
c001b505:	57                   	push   edi
c001b506:	56                   	push   esi
c001b507:	53                   	push   ebx
c001b508:	83 ec 1c             	sub    esp,0x1c
c001b50b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b510:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b514:	3d ff ff 00 00       	cmp    eax,0xffff
c001b519:	0f 84 57 01 00 00    	je     c001b676 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b51f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b524:	66 3d 06 04          	cmp    ax,0x406
c001b528:	75 2c                	jne    c001b556 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b52a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b52f:	50                   	push   eax
c001b530:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b535:	50                   	push   eax
c001b536:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b53b:	50                   	push   eax
c001b53c:	53                   	push   ebx
c001b53d:	e8 64 fb ff ff       	call   c001b0a6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b542:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b546:	0f b6 c0             	movzx  eax,al
c001b549:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b54d:	83 c4 2c             	add    esp,0x2c
c001b550:	5b                   	pop    ebx
c001b551:	5e                   	pop    esi
c001b552:	5f                   	pop    edi
c001b553:	5d                   	pop    ebp
c001b554:	eb 8a                	jmp    c001b4e0 <PCI::checkBus(unsigned char)>
c001b556:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b55a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b560:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b564:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b568:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b56d:	85 d2                	test   edx,edx
c001b56f:	74 36                	je     c001b5a7 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b571:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b574:	85 c9                	test   ecx,ecx
c001b576:	74 2b                	je     c001b5a3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b578:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b57e:	31 ee                	xor    esi,ebp
c001b580:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b586:	75 1b                	jne    c001b5a3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b588:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b58c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b592:	75 0f                	jne    c001b5a3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b594:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b59b:	39 f9                	cmp    ecx,edi
c001b59d:	0f 84 d3 00 00 00    	je     c001b676 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b5a3:	8b 12                	mov    edx,DWORD PTR [edx]
c001b5a5:	eb c6                	jmp    c001b56d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b5a7:	3d 01 06 00 00       	cmp    eax,0x601
c001b5ac:	75 19                	jne    c001b5c7 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b5ae:	83 ec 0c             	sub    esp,0xc
c001b5b1:	68 64 01 00 00       	push   0x164
c001b5b6:	e8 fb c4 fe ff       	call   c0007ab6 <malloc>
c001b5bb:	89 c5                	mov    ebp,eax
c001b5bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5c0:	e8 a1 0e 00 00       	call   c001c466 <SATABus::SATABus()>
c001b5c5:	eb 1e                	jmp    c001b5e5 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b5c7:	3d 01 01 00 00       	cmp    eax,0x101
c001b5cc:	75 62                	jne    c001b630 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b5ce:	83 ec 0c             	sub    esp,0xc
c001b5d1:	68 70 02 00 00       	push   0x270
c001b5d6:	e8 db c4 fe ff       	call   c0007ab6 <malloc>
c001b5db:	89 c5                	mov    ebp,eax
c001b5dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5e0:	e8 e5 02 00 00       	call   c001b8ca <IDE::IDE()>
c001b5e5:	5f                   	pop    edi
c001b5e6:	58                   	pop    eax
c001b5e7:	55                   	push   ebp
c001b5e8:	53                   	push   ebx
c001b5e9:	e8 7c 11 ff ff       	call   c000c76a <Device::addChild(Device*)>
c001b5ee:	83 ec 1c             	sub    esp,0x1c
c001b5f1:	b9 09 00 00 00       	mov    ecx,0x9
c001b5f6:	fc                   	cld    
c001b5f7:	89 e7                	mov    edi,esp
c001b5f9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b5fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5ff:	55                   	push   ebp
c001b600:	e8 ab 10 ff ff       	call   c000c6b0 <Device::preOpenPCI(PCIDeviceInfo)>
c001b605:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b608:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b60c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b614:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b61c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b624:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b627:	83 c4 4c             	add    esp,0x4c
c001b62a:	5b                   	pop    ebx
c001b62b:	5e                   	pop    esi
c001b62c:	5f                   	pop    edi
c001b62d:	5d                   	pop    ebp
c001b62e:	ff e0                	jmp    eax
c001b630:	83 ec 0c             	sub    esp,0xc
c001b633:	68 58 01 00 00       	push   0x158
c001b638:	e8 79 c4 fe ff       	call   c0007ab6 <malloc>
c001b63d:	89 c5                	mov    ebp,eax
c001b63f:	58                   	pop    eax
c001b640:	5a                   	pop    edx
c001b641:	68 8a 2c 02 c0       	push   0xc0022c8a
c001b646:	55                   	push   ebp
c001b647:	e8 bc 13 ff ff       	call   c000ca08 <DriverlessDevice::DriverlessDevice(char const*)>
c001b64c:	59                   	pop    ecx
c001b64d:	5e                   	pop    esi
c001b64e:	55                   	push   ebp
c001b64f:	53                   	push   ebx
c001b650:	e8 15 11 ff ff       	call   c000c76a <Device::addChild(Device*)>
c001b655:	83 c4 10             	add    esp,0x10
c001b658:	b9 09 00 00 00       	mov    ecx,0x9
c001b65d:	fc                   	cld    
c001b65e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b662:	89 fe                	mov    esi,edi
c001b664:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b666:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b66a:	83 c4 1c             	add    esp,0x1c
c001b66d:	5b                   	pop    ebx
c001b66e:	5e                   	pop    esi
c001b66f:	5f                   	pop    edi
c001b670:	5d                   	pop    ebp
c001b671:	e9 3a 10 ff ff       	jmp    c000c6b0 <Device::preOpenPCI(PCIDeviceInfo)>
c001b676:	83 c4 1c             	add    esp,0x1c
c001b679:	5b                   	pop    ebx
c001b67a:	5e                   	pop    esi
c001b67b:	5f                   	pop    edi
c001b67c:	5d                   	pop    ebp
c001b67d:	c3                   	ret    

c001b67e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b67e:	55                   	push   ebp
c001b67f:	57                   	push   edi
c001b680:	56                   	push   esi
c001b681:	53                   	push   ebx
c001b682:	83 ec 68             	sub    esp,0x68
c001b685:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b689:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b690:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b694:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b69b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b6a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6a4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b6ab:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b6b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b6b4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b6b9:	6a 0c                	push   0xc
c001b6bb:	57                   	push   edi
c001b6bc:	53                   	push   ebx
c001b6bd:	56                   	push   esi
c001b6be:	55                   	push   ebp
c001b6bf:	e8 32 f8 ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6c4:	83 c4 20             	add    esp,0x20
c001b6c7:	57                   	push   edi
c001b6c8:	53                   	push   ebx
c001b6c9:	56                   	push   esi
c001b6ca:	55                   	push   ebp
c001b6cb:	e8 1c f9 ff ff       	call   c001afec <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b6d0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b6d5:	57                   	push   edi
c001b6d6:	53                   	push   ebx
c001b6d7:	56                   	push   esi
c001b6d8:	55                   	push   ebp
c001b6d9:	e8 a4 f9 ff ff       	call   c001b082 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b6de:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b6e2:	83 c4 14             	add    esp,0x14
c001b6e5:	6a 3c                	push   0x3c
c001b6e7:	57                   	push   edi
c001b6e8:	53                   	push   ebx
c001b6e9:	56                   	push   esi
c001b6ea:	55                   	push   ebp
c001b6eb:	e8 06 f8 ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6f0:	0f b6 c4             	movzx  eax,ah
c001b6f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6f7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b6fb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b6ff:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b704:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b70a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b710:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b714:	83 c4 20             	add    esp,0x20
c001b717:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b71c:	74 30                	je     c001b74e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b71e:	31 c0                	xor    eax,eax
c001b720:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b724:	7e 28                	jle    c001b74e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b726:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b72e:	39 cb                	cmp    ebx,ecx
c001b730:	75 19                	jne    c001b74b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b732:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b73a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b73e:	75 0b                	jne    c001b74b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b740:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b747:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b74b:	40                   	inc    eax
c001b74c:	eb d2                	jmp    c001b720 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b74e:	31 d2                	xor    edx,edx
c001b750:	83 ec 0c             	sub    esp,0xc
c001b753:	57                   	push   edi
c001b754:	53                   	push   ebx
c001b755:	56                   	push   esi
c001b756:	52                   	push   edx
c001b757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b75b:	55                   	push   ebp
c001b75c:	e8 6d f9 ff ff       	call   c001b0ce <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b761:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b765:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b769:	42                   	inc    edx
c001b76a:	83 c4 20             	add    esp,0x20
c001b76d:	83 fa 06             	cmp    edx,0x6
c001b770:	75 de                	jne    c001b750 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b77a:	c1 e2 08             	shl    edx,0x8
c001b77d:	83 ec 0c             	sub    esp,0xc
c001b780:	0f b6 c4             	movzx  eax,ah
c001b783:	09 d0                	or     eax,edx
c001b785:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b78a:	6a 02                	push   0x2
c001b78c:	57                   	push   edi
c001b78d:	53                   	push   ebx
c001b78e:	56                   	push   esi
c001b78f:	55                   	push   ebp
c001b790:	e8 61 f7 ff ff       	call   c001aef6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b795:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b79a:	83 c4 20             	add    esp,0x20
c001b79d:	57                   	push   edi
c001b79e:	53                   	push   ebx
c001b79f:	56                   	push   esi
c001b7a0:	55                   	push   ebp
c001b7a1:	e8 90 f8 ff ff       	call   c001b036 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b7a6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b7aa:	57                   	push   edi
c001b7ab:	53                   	push   ebx
c001b7ac:	56                   	push   esi
c001b7ad:	55                   	push   ebp
c001b7ae:	e8 ed f7 ff ff       	call   c001afa0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7b3:	b9 09 00 00 00       	mov    ecx,0x9
c001b7b8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b7bd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b7c1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b7c5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b7c9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b7cd:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b7d1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b7d5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b7d9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b7dd:	83 ec 0c             	sub    esp,0xc
c001b7e0:	fc                   	cld    
c001b7e1:	89 e7                	mov    edi,esp
c001b7e3:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b7e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b7e9:	55                   	push   ebp
c001b7ea:	e8 15 fd ff ff       	call   c001b504 <PCI::foundDevice(PCIDeviceInfo)>
c001b7ef:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b7f5:	5b                   	pop    ebx
c001b7f6:	5e                   	pop    esi
c001b7f7:	5f                   	pop    edi
c001b7f8:	5d                   	pop    ebp
c001b7f9:	c3                   	ret    

c001b7fa <PCI::checkDevice(unsigned char, unsigned char)>:
c001b7fa:	55                   	push   ebp
c001b7fb:	57                   	push   edi
c001b7fc:	56                   	push   esi
c001b7fd:	53                   	push   ebx
c001b7fe:	83 ec 0c             	sub    esp,0xc
c001b801:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b805:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b80a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b80f:	6a 00                	push   0x0
c001b811:	56                   	push   esi
c001b812:	57                   	push   edi
c001b813:	55                   	push   ebp
c001b814:	e8 87 f7 ff ff       	call   c001afa0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b819:	6a 00                	push   0x0
c001b81b:	56                   	push   esi
c001b81c:	57                   	push   edi
c001b81d:	55                   	push   ebp
c001b81e:	e8 5b fe ff ff       	call   c001b67e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b823:	83 c4 20             	add    esp,0x20
c001b826:	6a 00                	push   0x0
c001b828:	56                   	push   esi
c001b829:	57                   	push   edi
c001b82a:	55                   	push   ebp
c001b82b:	e8 94 f7 ff ff       	call   c001afc4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	a8 80                	test   al,0x80
c001b835:	74 2d                	je     c001b864 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b837:	bb 01 00 00 00       	mov    ebx,0x1
c001b83c:	53                   	push   ebx
c001b83d:	56                   	push   esi
c001b83e:	57                   	push   edi
c001b83f:	55                   	push   ebp
c001b840:	e8 5b f7 ff ff       	call   c001afa0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b845:	83 c4 10             	add    esp,0x10
c001b848:	0f b7 c0             	movzx  eax,ax
c001b84b:	3d ff ff 00 00       	cmp    eax,0xffff
c001b850:	74 0c                	je     c001b85e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b852:	53                   	push   ebx
c001b853:	56                   	push   esi
c001b854:	57                   	push   edi
c001b855:	55                   	push   ebp
c001b856:	e8 23 fe ff ff       	call   c001b67e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b85b:	83 c4 10             	add    esp,0x10
c001b85e:	43                   	inc    ebx
c001b85f:	83 fb 08             	cmp    ebx,0x8
c001b862:	75 d8                	jne    c001b83c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b864:	83 c4 0c             	add    esp,0xc
c001b867:	5b                   	pop    ebx
c001b868:	5e                   	pop    esi
c001b869:	5f                   	pop    edi
c001b86a:	5d                   	pop    ebp
c001b86b:	c3                   	ret    

c001b86c <PCI::detect()>:
c001b86c:	56                   	push   esi
c001b86d:	53                   	push   ebx
c001b86e:	53                   	push   ebx
c001b86f:	31 db                	xor    ebx,ebx
c001b871:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b875:	6a 00                	push   0x0
c001b877:	6a 00                	push   0x0
c001b879:	6a 00                	push   0x0
c001b87b:	56                   	push   esi
c001b87c:	e8 43 f7 ff ff       	call   c001afc4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b881:	83 c4 10             	add    esp,0x10
c001b884:	a8 80                	test   al,0x80
c001b886:	75 21                	jne    c001b8a9 <PCI::detect()+0x3d>
c001b888:	51                   	push   ecx
c001b889:	51                   	push   ecx
c001b88a:	6a 00                	push   0x0
c001b88c:	56                   	push   esi
c001b88d:	e8 4e fc ff ff       	call   c001b4e0 <PCI::checkBus(unsigned char)>
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	eb 2a                	jmp    c001b8c1 <PCI::detect()+0x55>
c001b897:	52                   	push   edx
c001b898:	52                   	push   edx
c001b899:	53                   	push   ebx
c001b89a:	43                   	inc    ebx
c001b89b:	56                   	push   esi
c001b89c:	e8 3f fc ff ff       	call   c001b4e0 <PCI::checkBus(unsigned char)>
c001b8a1:	83 c4 10             	add    esp,0x10
c001b8a4:	83 fb 08             	cmp    ebx,0x8
c001b8a7:	74 18                	je     c001b8c1 <PCI::detect()+0x55>
c001b8a9:	53                   	push   ebx
c001b8aa:	6a 00                	push   0x0
c001b8ac:	6a 00                	push   0x0
c001b8ae:	56                   	push   esi
c001b8af:	e8 ec f6 ff ff       	call   c001afa0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	0f b7 c0             	movzx  eax,ax
c001b8ba:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8bf:	74 d6                	je     c001b897 <PCI::detect()+0x2b>
c001b8c1:	58                   	pop    eax
c001b8c2:	5b                   	pop    ebx
c001b8c3:	5e                   	pop    esi
c001b8c4:	c3                   	ret    
c001b8c5:	90                   	nop

c001b8c6 <IDE::close(int, int, void*)>:
c001b8c6:	83 c8 ff             	or     eax,0xffffffff
c001b8c9:	c3                   	ret    

c001b8ca <IDE::IDE()>:
c001b8ca:	83 ec 0c             	sub    esp,0xc
c001b8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d1:	83 ec 08             	sub    esp,0x8
c001b8d4:	68 d0 2c 02 c0       	push   0xc0022cd0
c001b8d9:	50                   	push   eax
c001b8da:	e8 cd 11 ff ff       	call   c000caac <HardDiskController::HardDiskController(char const*)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	ba 60 2d 02 c0       	mov    edx,0xc0022d60
c001b8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8eb:	89 10                	mov    DWORD PTR [eax],edx
c001b8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b8f8:	90                   	nop
c001b8f9:	83 c4 0c             	add    esp,0xc
c001b8fc:	c3                   	ret    
c001b8fd:	90                   	nop

c001b8fe <IDE::prepareInterrupt(unsigned char)>:
c001b8fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b903:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b907:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b90f:	c3                   	ret    

c001b910 <selectDrive(unsigned char, unsigned char)>:
c001b910:	c3                   	ret    
c001b911:	90                   	nop

c001b912 <IDE::getBase(unsigned char)>:
c001b912:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b917:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b91b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b923:	c3                   	ret    

c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b924:	55                   	push   ebp
c001b925:	57                   	push   edi
c001b926:	56                   	push   esi
c001b927:	53                   	push   ebx
c001b928:	83 ec 1c             	sub    esp,0x1c
c001b92b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b92f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b933:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b936:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b93a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b93e:	80 f9 03             	cmp    cl,0x3
c001b941:	77 4f                	ja     c001b992 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b947:	0f b6 fa             	movzx  edi,dl
c001b94a:	0f b6 db             	movzx  ebx,bl
c001b94d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b950:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b955:	80 ca 80             	or     dl,0x80
c001b958:	52                   	push   edx
c001b959:	6a 0c                	push   0xc
c001b95b:	57                   	push   edi
c001b95c:	56                   	push   esi
c001b95d:	e8 c2 ff ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b962:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b967:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b96b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b96f:	ee                   	out    dx,al
c001b970:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b975:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b979:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b97d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b981:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b989:	83 c4 2c             	add    esp,0x2c
c001b98c:	5b                   	pop    ebx
c001b98d:	5e                   	pop    esi
c001b98e:	5f                   	pop    edi
c001b98f:	5d                   	pop    ebp
c001b990:	eb 92                	jmp    c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b992:	0f b6 cb             	movzx  ecx,bl
c001b995:	83 f9 07             	cmp    ecx,0x7
c001b998:	77 12                	ja     c001b9ac <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b99a:	0f b6 d2             	movzx  edx,dl
c001b99d:	0f b6 db             	movzx  ebx,bl
c001b9a0:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b9a8:	01 da                	add    edx,ebx
c001b9aa:	eb 2f                	jmp    c001b9db <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b9ac:	83 f9 0d             	cmp    ecx,0xd
c001b9af:	77 13                	ja     c001b9c4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b9b1:	0f b6 d2             	movzx  edx,dl
c001b9b4:	0f b6 db             	movzx  ebx,bl
c001b9b7:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b9be:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b9c2:	eb 17                	jmp    c001b9db <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b9c4:	83 f9 15             	cmp    ecx,0x15
c001b9c7:	77 13                	ja     c001b9dc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b9c9:	0f b6 d2             	movzx  edx,dl
c001b9cc:	0f b6 db             	movzx  ebx,bl
c001b9cf:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b9d7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b9db:	ee                   	out    dx,al
c001b9dc:	83 c4 1c             	add    esp,0x1c
c001b9df:	5b                   	pop    ebx
c001b9e0:	5e                   	pop    esi
c001b9e1:	5f                   	pop    edi
c001b9e2:	5d                   	pop    ebp
c001b9e3:	c3                   	ret    

c001b9e4 <IDE::read(unsigned char, unsigned char)>:
c001b9e4:	55                   	push   ebp
c001b9e5:	57                   	push   edi
c001b9e6:	56                   	push   esi
c001b9e7:	53                   	push   ebx
c001b9e8:	83 ec 1c             	sub    esp,0x1c
c001b9eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b9ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b9f3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b9f6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b9fa:	3c 03                	cmp    al,0x3
c001b9fc:	77 40                	ja     c001ba3e <IDE::read(unsigned char, unsigned char)+0x5a>
c001b9fe:	0f b6 f9             	movzx  edi,cl
c001ba01:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ba04:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ba09:	0c 80                	or     al,0x80
c001ba0b:	50                   	push   eax
c001ba0c:	6a 0c                	push   0xc
c001ba0e:	57                   	push   edi
c001ba0f:	56                   	push   esi
c001ba10:	e8 0f ff ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba15:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ba1a:	0f b6 d3             	movzx  edx,bl
c001ba1d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ba21:	ec                   	in     al,dx
c001ba22:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ba26:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ba2b:	52                   	push   edx
c001ba2c:	6a 0c                	push   0xc
c001ba2e:	57                   	push   edi
c001ba2f:	56                   	push   esi
c001ba30:	e8 ef fe ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba35:	83 c4 20             	add    esp,0x20
c001ba38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ba3c:	eb 4c                	jmp    c001ba8a <IDE::read(unsigned char, unsigned char)+0xa6>
c001ba3e:	0f b6 d3             	movzx  edx,bl
c001ba41:	83 fa 07             	cmp    edx,0x7
c001ba44:	77 12                	ja     c001ba58 <IDE::read(unsigned char, unsigned char)+0x74>
c001ba46:	0f b6 c9             	movzx  ecx,cl
c001ba49:	0f b6 d3             	movzx  edx,bl
c001ba4c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ba54:	01 c2                	add    edx,eax
c001ba56:	eb 31                	jmp    c001ba89 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ba58:	83 fa 0d             	cmp    edx,0xd
c001ba5b:	77 13                	ja     c001ba70 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ba5d:	0f b6 c9             	movzx  ecx,cl
c001ba60:	0f b6 d3             	movzx  edx,bl
c001ba63:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ba6a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ba6e:	eb 19                	jmp    c001ba89 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ba70:	31 c0                	xor    eax,eax
c001ba72:	83 fa 15             	cmp    edx,0x15
c001ba75:	77 13                	ja     c001ba8a <IDE::read(unsigned char, unsigned char)+0xa6>
c001ba77:	0f b6 c9             	movzx  ecx,cl
c001ba7a:	0f b6 d3             	movzx  edx,bl
c001ba7d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ba85:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ba89:	ec                   	in     al,dx
c001ba8a:	83 c4 1c             	add    esp,0x1c
c001ba8d:	5b                   	pop    ebx
c001ba8e:	5e                   	pop    esi
c001ba8f:	5f                   	pop    edi
c001ba90:	5d                   	pop    ebp
c001ba91:	c3                   	ret    

c001ba92 <IDE::waitInterrupt(unsigned char)>:
c001ba92:	55                   	push   ebp
c001ba93:	57                   	push   edi
c001ba94:	56                   	push   esi
c001ba95:	53                   	push   ebx
c001ba96:	31 db                	xor    ebx,ebx
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba9f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001baa4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001baac:	89 e8                	mov    eax,ebp
c001baae:	84 c0                	test   al,al
c001bab0:	75 30                	jne    c001bae2 <IDE::waitInterrupt(unsigned char)+0x50>
c001bab2:	50                   	push   eax
c001bab3:	6a 0c                	push   0xc
c001bab5:	56                   	push   esi
c001bab6:	57                   	push   edi
c001bab7:	e8 28 ff ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001babc:	83 c4 10             	add    esp,0x10
c001babf:	a8 01                	test   al,0x1
c001bac1:	75 27                	jne    c001baea <IDE::waitInterrupt(unsigned char)+0x58>
c001bac3:	f6 c3 04             	test   bl,0x4
c001bac6:	75 12                	jne    c001bada <IDE::waitInterrupt(unsigned char)+0x48>
c001bac8:	83 fb 32             	cmp    ebx,0x32
c001bacb:	7e 0d                	jle    c001bada <IDE::waitInterrupt(unsigned char)+0x48>
c001bacd:	83 ec 0c             	sub    esp,0xc
c001bad0:	6a 64                	push   0x64
c001bad2:	e8 b1 a4 ff ff       	call   c0015f88 <milliTenthSleep(unsigned int)>
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	83 fb 3c             	cmp    ebx,0x3c
c001badd:	74 0b                	je     c001baea <IDE::waitInterrupt(unsigned char)+0x58>
c001badf:	43                   	inc    ebx
c001bae0:	eb c2                	jmp    c001baa4 <IDE::waitInterrupt(unsigned char)+0x12>
c001bae2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001baea:	83 c4 0c             	add    esp,0xc
c001baed:	89 e8                	mov    eax,ebp
c001baef:	5b                   	pop    ebx
c001baf0:	5e                   	pop    esi
c001baf1:	5f                   	pop    edi
c001baf2:	5d                   	pop    ebp
c001baf3:	c3                   	ret    

c001baf4 <ideChannel0IRQHandler(regs*, void*)>:
c001baf4:	83 ec 10             	sub    esp,0x10
c001baf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bafb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bb02:	6a 07                	push   0x7
c001bb04:	6a 00                	push   0x0
c001bb06:	50                   	push   eax
c001bb07:	e8 d8 fe ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001bb0c:	83 c4 1c             	add    esp,0x1c
c001bb0f:	c3                   	ret    

c001bb10 <ideChannel1IRQHandler(regs*, void*)>:
c001bb10:	83 ec 10             	sub    esp,0x10
c001bb13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb17:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bb1e:	6a 07                	push   0x7
c001bb20:	6a 01                	push   0x1
c001bb22:	50                   	push   eax
c001bb23:	e8 bc fe ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001bb28:	83 c4 1c             	add    esp,0x1c
c001bb2b:	c3                   	ret    

c001bb2c <IDE::enableIRQs(unsigned char, bool)>:
c001bb2c:	57                   	push   edi
c001bb2d:	b8 02 00 00 00       	mov    eax,0x2
c001bb32:	56                   	push   esi
c001bb33:	53                   	push   ebx
c001bb34:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bb3c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bb41:	74 02                	je     c001bb45 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bb43:	31 c0                	xor    eax,eax
c001bb45:	0f b6 db             	movzx  ebx,bl
c001bb48:	bf 04 00 00 00       	mov    edi,0x4
c001bb4d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bb54:	50                   	push   eax
c001bb55:	6a 0c                	push   0xc
c001bb57:	53                   	push   ebx
c001bb58:	56                   	push   esi
c001bb59:	e8 c6 fd ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb5e:	83 c4 10             	add    esp,0x10
c001bb61:	50                   	push   eax
c001bb62:	6a 0c                	push   0xc
c001bb64:	53                   	push   ebx
c001bb65:	56                   	push   esi
c001bb66:	e8 79 fe ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001bb6b:	83 c4 10             	add    esp,0x10
c001bb6e:	4f                   	dec    edi
c001bb6f:	75 f0                	jne    c001bb61 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bb71:	5b                   	pop    ebx
c001bb72:	5e                   	pop    esi
c001bb73:	5f                   	pop    edi
c001bb74:	c3                   	ret    
c001bb75:	90                   	nop

c001bb76 <IDE::open(int, int, void*)>:
c001bb76:	55                   	push   ebp
c001bb77:	57                   	push   edi
c001bb78:	56                   	push   esi
c001bb79:	53                   	push   ebx
c001bb7a:	83 ec 1c             	sub    esp,0x1c
c001bb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb81:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bb8a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bb93:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bb9a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bba1:	0f 85 de 02 00 00    	jne    c001be85 <IDE::open(int, int, void*)+0x30f>
c001bba7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bbad:	88 04 24             	mov    BYTE PTR [esp],al
c001bbb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bbb3:	83 e0 7f             	and    eax,0x7f
c001bbb6:	83 f8 05             	cmp    eax,0x5
c001bbb9:	74 05                	je     c001bbc0 <IDE::open(int, int, void*)+0x4a>
c001bbbb:	83 f8 0f             	cmp    eax,0xf
c001bbbe:	75 32                	jne    c001bbf2 <IDE::open(int, int, void*)+0x7c>
c001bbc0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bbc6:	83 e0 fc             	and    eax,0xfffffffc
c001bbc9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bbd0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bbd6:	83 e0 fc             	and    eax,0xfffffffc
c001bbd9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bbe0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bbe6:	83 e0 fc             	and    eax,0xfffffffc
c001bbe9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbf0:	eb 14                	jmp    c001bc06 <IDE::open(int, int, void*)+0x90>
c001bbf2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bbfc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bc06:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bc0d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bc14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc18:	89 c6                	mov    esi,eax
c001bc1a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bc1f:	c1 e6 10             	shl    esi,0x10
c001bc22:	89 e8                	mov    eax,ebp
c001bc24:	89 fa                	mov    edx,edi
c001bc26:	c1 e0 0b             	shl    eax,0xb
c001bc29:	09 f0                	or     eax,esi
c001bc2b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bc32:	c1 e6 08             	shl    esi,0x8
c001bc35:	09 c6                	or     esi,eax
c001bc37:	89 f0                	mov    eax,esi
c001bc39:	0d 08 00 00 80       	or     eax,0x80000008
c001bc3e:	ef                   	out    dx,eax
c001bc3f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bc44:	89 ca                	mov    edx,ecx
c001bc46:	ed                   	in     eax,dx
c001bc47:	c1 e8 10             	shr    eax,0x10
c001bc4a:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc4f:	0f 84 f9 00 00 00    	je     c001bd4e <IDE::open(int, int, void*)+0x1d8>
c001bc55:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bc5b:	89 fa                	mov    edx,edi
c001bc5d:	89 f0                	mov    eax,esi
c001bc5f:	ef                   	out    dx,eax
c001bc60:	b0 fe                	mov    al,0xfe
c001bc62:	89 ca                	mov    edx,ecx
c001bc64:	ee                   	out    dx,al
c001bc65:	89 f0                	mov    eax,esi
c001bc67:	89 fa                	mov    edx,edi
c001bc69:	ef                   	out    dx,eax
c001bc6a:	89 ca                	mov    edx,ecx
c001bc6c:	ed                   	in     eax,dx
c001bc6d:	3c fe                	cmp    al,0xfe
c001bc6f:	0f 85 a9 00 00 00    	jne    c001bd1e <IDE::open(int, int, void*)+0x1a8>
c001bc75:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bc7b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bc82:	74 33                	je     c001bcb7 <IDE::open(int, int, void*)+0x141>
c001bc84:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bc8a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bc8e:	40                   	inc    eax
c001bc8f:	83 ec 0c             	sub    esp,0xc
c001bc92:	0f b6 c0             	movzx  eax,al
c001bc95:	50                   	push   eax
c001bc96:	55                   	push   ebp
c001bc97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc9b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bca1:	51                   	push   ecx
c001bca2:	e8 35 3a ff ff       	call   c000f6dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bca7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bcac:	83 c4 1c             	add    esp,0x1c
c001bcaf:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bcb5:	eb 0a                	jmp    c001bcc1 <IDE::open(int, int, void*)+0x14b>
c001bcb7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bcc1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bcc8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bccf:	c1 e1 10             	shl    ecx,0x10
c001bcd2:	c1 e0 08             	shl    eax,0x8
c001bcd5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bcda:	09 c1                	or     ecx,eax
c001bcdc:	89 fa                	mov    edx,edi
c001bcde:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bce5:	c1 e0 0b             	shl    eax,0xb
c001bce8:	09 c1                	or     ecx,eax
c001bcea:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bcf0:	89 c8                	mov    eax,ecx
c001bcf2:	ef                   	out    dx,eax
c001bcf3:	be fc 0c 00 00       	mov    esi,0xcfc
c001bcf8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bcfe:	89 f2                	mov    edx,esi
c001bd00:	ee                   	out    dx,al
c001bd01:	89 c8                	mov    eax,ecx
c001bd03:	89 fa                	mov    edx,edi
c001bd05:	ef                   	out    dx,eax
c001bd06:	89 f2                	mov    edx,esi
c001bd08:	ed                   	in     eax,dx
c001bd09:	0f b6 c0             	movzx  eax,al
c001bd0c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bd12:	74 4a                	je     c001bd5e <IDE::open(int, int, void*)+0x1e8>
c001bd14:	83 ec 0c             	sub    esp,0xc
c001bd17:	68 e8 2c 02 c0       	push   0xc0022ce8
c001bd1c:	eb 38                	jmp    c001bd56 <IDE::open(int, int, void*)+0x1e0>
c001bd1e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bd27:	75 1b                	jne    c001bd44 <IDE::open(int, int, void*)+0x1ce>
c001bd29:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bd2d:	3d 80 00 00 00       	cmp    eax,0x80
c001bd32:	74 07                	je     c001bd3b <IDE::open(int, int, void*)+0x1c5>
c001bd34:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bd39:	75 09                	jne    c001bd44 <IDE::open(int, int, void*)+0x1ce>
c001bd3b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd42:	eb 1a                	jmp    c001bd5e <IDE::open(int, int, void*)+0x1e8>
c001bd44:	83 ec 0c             	sub    esp,0xc
c001bd47:	68 f0 2c 02 c0       	push   0xc0022cf0
c001bd4c:	eb 08                	jmp    c001bd56 <IDE::open(int, int, void*)+0x1e0>
c001bd4e:	83 ec 0c             	sub    esp,0xc
c001bd51:	68 21 2d 02 c0       	push   0xc0022d21
c001bd56:	e8 3e 56 ff ff       	call   c0011399 <KePanic(char const*)>
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bd65:	74 1a                	je     c001bd81 <IDE::open(int, int, void*)+0x20b>
c001bd67:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bd6d:	83 e0 fc             	and    eax,0xfffffffc
c001bd70:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bd77:	83 c0 08             	add    eax,0x8
c001bd7a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bd81:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bd87:	89 c2                	mov    edx,eax
c001bd89:	83 e2 0f             	and    edx,0xf
c001bd8c:	83 fa 08             	cmp    edx,0x8
c001bd8f:	75 0a                	jne    c001bd9b <IDE::open(int, int, void*)+0x225>
c001bd91:	83 e8 02             	sub    eax,0x2
c001bd94:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd9b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bda1:	89 c2                	mov    edx,eax
c001bda3:	83 e2 0f             	and    edx,0xf
c001bda6:	83 fa 08             	cmp    edx,0x8
c001bda9:	75 0a                	jne    c001bdb5 <IDE::open(int, int, void*)+0x23f>
c001bdab:	83 e8 02             	sub    eax,0x2
c001bdae:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bdb5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bdbc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bdc3:	89 d0                	mov    eax,edx
c001bdc5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdc8:	8d 7a 01             	lea    edi,[edx+0x1]
c001bdcb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdcf:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bdd3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bdd7:	83 e1 3f             	and    ecx,0x3f
c001bdda:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bdde:	89 f9                	mov    ecx,edi
c001bde0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bde7:	0f b6 c9             	movzx  ecx,cl
c001bdea:	8d 78 02             	lea    edi,[eax+0x2]
c001bded:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bdf0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bdf4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bdf8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bdfc:	83 e2 3f             	and    edx,0x3f
c001bdff:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be03:	89 f9                	mov    ecx,edi
c001be05:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001be0b:	0f b6 d1             	movzx  edx,cl
c001be0e:	8d 78 03             	lea    edi,[eax+0x3]
c001be11:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be14:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be18:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001be1c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001be20:	83 e1 3f             	and    ecx,0x3f
c001be23:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001be27:	89 f9                	mov    ecx,edi
c001be29:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001be2f:	0f b6 c9             	movzx  ecx,cl
c001be32:	8d 78 04             	lea    edi,[eax+0x4]
c001be35:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001be38:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001be3c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001be40:	89 fa                	mov    edx,edi
c001be42:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001be48:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be4c:	83 e2 3f             	and    edx,0x3f
c001be4f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be53:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001be5a:	66 85 f6             	test   si,si
c001be5d:	74 65                	je     c001bec4 <IDE::open(int, int, void*)+0x34e>
c001be5f:	89 f9                	mov    ecx,edi
c001be61:	83 c0 05             	add    eax,0x5
c001be64:	0f b6 d1             	movzx  edx,cl
c001be67:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be6a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be6e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001be72:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001be78:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001be7c:	83 e0 3f             	and    eax,0x3f
c001be7f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001be83:	eb 3f                	jmp    c001bec4 <IDE::open(int, int, void*)+0x34e>
c001be85:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001be8b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be92:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be99:	05 06 02 00 00       	add    eax,0x206
c001be9e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bea5:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001beac:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001beb3:	05 06 02 00 00       	add    eax,0x206
c001beb8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bebf:	e9 bd fe ff ff       	jmp    c001bd81 <IDE::open(int, int, void*)+0x20b>
c001bec4:	50                   	push   eax
c001bec5:	50                   	push   eax
c001bec6:	6a 00                	push   0x0
c001bec8:	53                   	push   ebx
c001bec9:	e8 30 fa ff ff       	call   c001b8fe <IDE::prepareInterrupt(unsigned char)>
c001bece:	5a                   	pop    edx
c001becf:	59                   	pop    ecx
c001bed0:	6a 01                	push   0x1
c001bed2:	53                   	push   ebx
c001bed3:	e8 26 fa ff ff       	call   c001b8fe <IDE::prepareInterrupt(unsigned char)>
c001bed8:	83 c4 0c             	add    esp,0xc
c001bedb:	6a 00                	push   0x0
c001bedd:	6a 00                	push   0x0
c001bedf:	53                   	push   ebx
c001bee0:	e8 47 fc ff ff       	call   c001bb2c <IDE::enableIRQs(unsigned char, bool)>
c001bee5:	83 c4 0c             	add    esp,0xc
c001bee8:	6a 00                	push   0x0
c001beea:	6a 01                	push   0x1
c001beec:	53                   	push   ebx
c001beed:	e8 3a fc ff ff       	call   c001bb2c <IDE::enableIRQs(unsigned char, bool)>
c001bef2:	83 c4 10             	add    esp,0x10
c001bef5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001befc:	74 34                	je     c001bf32 <IDE::open(int, int, void*)+0x3bc>
c001befe:	83 ec 0c             	sub    esp,0xc
c001bf01:	53                   	push   ebx
c001bf02:	6a 01                	push   0x1
c001bf04:	68 f4 ba 01 c0       	push   0xc001baf4
c001bf09:	6a 0e                	push   0xe
c001bf0b:	53                   	push   ebx
c001bf0c:	e8 05 08 ff ff       	call   c000c716 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf11:	83 c4 14             	add    esp,0x14
c001bf14:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf1a:	53                   	push   ebx
c001bf1b:	6a 01                	push   0x1
c001bf1d:	68 10 bb 01 c0       	push   0xc001bb10
c001bf22:	6a 0f                	push   0xf
c001bf24:	53                   	push   ebx
c001bf25:	e8 ec 07 ff ff       	call   c000c716 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf2a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bf30:	eb 38                	jmp    c001bf6a <IDE::open(int, int, void*)+0x3f4>
c001bf32:	83 ec 0c             	sub    esp,0xc
c001bf35:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bf3f:	53                   	push   ebx
c001bf40:	6a 00                	push   0x0
c001bf42:	68 f4 ba 01 c0       	push   0xc001baf4
c001bf47:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bf4d:	53                   	push   ebx
c001bf4e:	e8 c3 07 ff ff       	call   c000c716 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf53:	83 c4 14             	add    esp,0x14
c001bf56:	53                   	push   ebx
c001bf57:	6a 00                	push   0x0
c001bf59:	68 10 bb 01 c0       	push   0xc001bb10
c001bf5e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bf64:	53                   	push   ebx
c001bf65:	e8 ac 07 ff ff       	call   c000c716 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf6c:	83 c4 20             	add    esp,0x20
c001bf6f:	83 ec 0c             	sub    esp,0xc
c001bf72:	53                   	push   ebx
c001bf73:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bf76:	83 c4 0c             	add    esp,0xc
c001bf79:	6a 07                	push   0x7
c001bf7b:	6a 00                	push   0x0
c001bf7d:	53                   	push   ebx
c001bf7e:	e8 61 fa ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001bf83:	83 c4 0c             	add    esp,0xc
c001bf86:	6a 07                	push   0x7
c001bf88:	6a 01                	push   0x1
c001bf8a:	53                   	push   ebx
c001bf8b:	e8 54 fa ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001bf90:	83 c4 0c             	add    esp,0xc
c001bf93:	6a 01                	push   0x1
c001bf95:	6a 00                	push   0x0
c001bf97:	53                   	push   ebx
c001bf98:	e8 8f fb ff ff       	call   c001bb2c <IDE::enableIRQs(unsigned char, bool)>
c001bf9d:	83 c4 0c             	add    esp,0xc
c001bfa0:	6a 01                	push   0x1
c001bfa2:	6a 01                	push   0x1
c001bfa4:	53                   	push   ebx
c001bfa5:	e8 82 fb ff ff       	call   c001bb2c <IDE::enableIRQs(unsigned char, bool)>
c001bfaa:	83 c4 2c             	add    esp,0x2c
c001bfad:	31 c0                	xor    eax,eax
c001bfaf:	5b                   	pop    ebx
c001bfb0:	5e                   	pop    esi
c001bfb1:	5f                   	pop    edi
c001bfb2:	5d                   	pop    ebp
c001bfb3:	c3                   	ret    

c001bfb4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bfb4:	55                   	push   ebp
c001bfb5:	57                   	push   edi
c001bfb6:	56                   	push   esi
c001bfb7:	53                   	push   ebx
c001bfb8:	83 ec 1c             	sub    esp,0x1c
c001bfbb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bfbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bfc3:	8d 42 f8             	lea    eax,[edx-0x8]
c001bfc6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bfca:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bfce:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bfd2:	3c 03                	cmp    al,0x3
c001bfd4:	77 5a                	ja     c001c030 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bfd6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bfda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bfde:	0f b6 db             	movzx  ebx,bl
c001bfe1:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bfe4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bfe9:	0c 80                	or     al,0x80
c001bfeb:	50                   	push   eax
c001bfec:	6a 0c                	push   0xc
c001bfee:	53                   	push   ebx
c001bfef:	56                   	push   esi
c001bff0:	e8 2f f9 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bff5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bffa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bffe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c002:	0f b6 d2             	movzx  edx,dl
c001c005:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c009:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c00b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c010:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c014:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c018:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c01c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c024:	83 c4 2c             	add    esp,0x2c
c001c027:	5b                   	pop    ebx
c001c028:	5e                   	pop    esi
c001c029:	5f                   	pop    edi
c001c02a:	5d                   	pop    ebp
c001c02b:	e9 f4 f8 ff ff       	jmp    c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c030:	0f b6 c2             	movzx  eax,dl
c001c033:	83 f8 07             	cmp    eax,0x7
c001c036:	77 12                	ja     c001c04a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c038:	0f b6 c2             	movzx  eax,dl
c001c03b:	0f b6 db             	movzx  ebx,bl
c001c03e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c046:	01 c2                	add    edx,eax
c001c048:	eb 2f                	jmp    c001c079 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c04a:	83 f8 0d             	cmp    eax,0xd
c001c04d:	77 13                	ja     c001c062 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c04f:	0f b6 db             	movzx  ebx,bl
c001c052:	0f b6 d2             	movzx  edx,dl
c001c055:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c05c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c060:	eb 17                	jmp    c001c079 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c062:	83 f8 15             	cmp    eax,0x15
c001c065:	77 14                	ja     c001c07b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c067:	0f b6 db             	movzx  ebx,bl
c001c06a:	0f b6 d2             	movzx  edx,dl
c001c06d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c075:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c079:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c07b:	83 c4 1c             	add    esp,0x1c
c001c07e:	5b                   	pop    ebx
c001c07f:	5e                   	pop    esi
c001c080:	5f                   	pop    edi
c001c081:	5d                   	pop    ebp
c001c082:	c3                   	ret    
c001c083:	90                   	nop

c001c084 <IDE::detect()>:
c001c084:	55                   	push   ebp
c001c085:	57                   	push   edi
c001c086:	56                   	push   esi
c001c087:	53                   	push   ebx
c001c088:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c08e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c095:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c09c:	0f 85 a4 02 00 00    	jne    c001c346 <IDE::detect()+0x2c2>
c001c0a2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c0a9:	31 f6                	xor    esi,esi
c001c0ab:	31 ed                	xor    ebp,ebp
c001c0ad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c0b5:	89 e8                	mov    eax,ebp
c001c0b7:	c1 e0 06             	shl    eax,0x6
c001c0ba:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c0c2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c0c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c0ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0ce:	c1 e0 04             	shl    eax,0x4
c001c0d1:	83 c8 a0             	or     eax,0xffffffa0
c001c0d4:	0f b6 c0             	movzx  eax,al
c001c0d7:	50                   	push   eax
c001c0d8:	6a 06                	push   0x6
c001c0da:	56                   	push   esi
c001c0db:	53                   	push   ebx
c001c0dc:	e8 43 f8 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0e1:	83 c4 0c             	add    esp,0xc
c001c0e4:	6a 0c                	push   0xc
c001c0e6:	56                   	push   esi
c001c0e7:	53                   	push   ebx
c001c0e8:	e8 f7 f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c0ed:	83 c4 0c             	add    esp,0xc
c001c0f0:	6a 0c                	push   0xc
c001c0f2:	56                   	push   esi
c001c0f3:	53                   	push   ebx
c001c0f4:	e8 eb f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c0f9:	83 c4 0c             	add    esp,0xc
c001c0fc:	6a 0c                	push   0xc
c001c0fe:	56                   	push   esi
c001c0ff:	53                   	push   ebx
c001c100:	e8 df f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c105:	83 c4 0c             	add    esp,0xc
c001c108:	6a 0c                	push   0xc
c001c10a:	56                   	push   esi
c001c10b:	53                   	push   ebx
c001c10c:	e8 d3 f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c111:	68 ec 00 00 00       	push   0xec
c001c116:	6a 07                	push   0x7
c001c118:	56                   	push   esi
c001c119:	53                   	push   ebx
c001c11a:	e8 05 f8 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c11f:	83 c4 1c             	add    esp,0x1c
c001c122:	6a 0c                	push   0xc
c001c124:	56                   	push   esi
c001c125:	53                   	push   ebx
c001c126:	e8 b9 f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c12b:	83 c4 0c             	add    esp,0xc
c001c12e:	6a 0c                	push   0xc
c001c130:	56                   	push   esi
c001c131:	53                   	push   ebx
c001c132:	e8 ad f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c137:	83 c4 0c             	add    esp,0xc
c001c13a:	6a 0c                	push   0xc
c001c13c:	56                   	push   esi
c001c13d:	53                   	push   ebx
c001c13e:	e8 a1 f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c143:	83 c4 0c             	add    esp,0xc
c001c146:	6a 0c                	push   0xc
c001c148:	56                   	push   esi
c001c149:	53                   	push   ebx
c001c14a:	e8 95 f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c14f:	83 c4 0c             	add    esp,0xc
c001c152:	6a 0c                	push   0xc
c001c154:	56                   	push   esi
c001c155:	53                   	push   ebx
c001c156:	e8 89 f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c15b:	83 c4 10             	add    esp,0x10
c001c15e:	84 c0                	test   al,al
c001c160:	0f 84 60 01 00 00    	je     c001c2c6 <IDE::detect()+0x242>
c001c166:	31 ff                	xor    edi,edi
c001c168:	50                   	push   eax
c001c169:	6a 0c                	push   0xc
c001c16b:	56                   	push   esi
c001c16c:	53                   	push   ebx
c001c16d:	e8 72 f8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c172:	83 c4 10             	add    esp,0x10
c001c175:	a8 01                	test   al,0x1
c001c177:	0f 85 6a 01 00 00    	jne    c001c2e7 <IDE::detect()+0x263>
c001c17d:	a8 80                	test   al,0x80
c001c17f:	75 04                	jne    c001c185 <IDE::detect()+0x101>
c001c181:	a8 08                	test   al,0x8
c001c183:	75 23                	jne    c001c1a8 <IDE::detect()+0x124>
c001c185:	47                   	inc    edi
c001c186:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c18c:	7e da                	jle    c001c168 <IDE::detect()+0xe4>
c001c18e:	83 ec 0c             	sub    esp,0xc
c001c191:	6a 32                	push   0x32
c001c193:	e8 f0 9d ff ff       	call   c0015f88 <milliTenthSleep(unsigned int)>
c001c198:	83 c4 10             	add    esp,0x10
c001c19b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c1a1:	75 c5                	jne    c001c168 <IDE::detect()+0xe4>
c001c1a3:	e9 3f 01 00 00       	jmp    c001c2e7 <IDE::detect()+0x263>
c001c1a8:	31 c9                	xor    ecx,ecx
c001c1aa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c1ae:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c1b2:	83 ec 0c             	sub    esp,0xc
c001c1b5:	68 80 00 00 00       	push   0x80
c001c1ba:	57                   	push   edi
c001c1bb:	6a 00                	push   0x0
c001c1bd:	56                   	push   esi
c001c1be:	53                   	push   ebx
c001c1bf:	e8 f0 fd ff ff       	call   c001bfb4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c1c4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c1c9:	89 e8                	mov    eax,ebp
c001c1cb:	89 d1                	mov    ecx,edx
c001c1cd:	c1 e0 06             	shl    eax,0x6
c001c1d0:	01 d8                	add    eax,ebx
c001c1d2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c1d9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c1e0:	89 f2                	mov    edx,esi
c001c1e2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c1e8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c1ec:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c1f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1f6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c1fd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c205:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c20c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c214:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c21a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c221:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c227:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c22b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c22f:	83 c4 20             	add    esp,0x20
c001c232:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c235:	83 c0 02             	add    eax,0x2
c001c238:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c23e:	83 c7 02             	add    edi,0x2
c001c241:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c244:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c24a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c24e:	75 e2                	jne    c001c232 <IDE::detect()+0x1ae>
c001c250:	89 e8                	mov    eax,ebp
c001c252:	c1 e0 06             	shl    eax,0x6
c001c255:	01 d8                	add    eax,ebx
c001c257:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c25e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c265:	c1 ea 09             	shr    edx,0x9
c001c268:	83 e2 01             	and    edx,0x1
c001c26b:	80 e1 01             	and    cl,0x1
c001c26e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c274:	75 22                	jne    c001c298 <IDE::detect()+0x214>
c001c276:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c27d:	74 46                	je     c001c2c5 <IDE::detect()+0x241>
c001c27f:	83 ec 0c             	sub    esp,0xc
c001c282:	68 7c 01 00 00       	push   0x17c
c001c287:	e8 2a b8 fe ff       	call   c0007ab6 <malloc>
c001c28c:	89 c7                	mov    edi,eax
c001c28e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c291:	e8 1a 05 00 00       	call   c001c7b0 <ATA::ATA()>
c001c296:	eb 17                	jmp    c001c2af <IDE::detect()+0x22b>
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	68 84 01 00 00       	push   0x184
c001c2a0:	e8 11 b8 fe ff       	call   c0007ab6 <malloc>
c001c2a5:	89 c7                	mov    edi,eax
c001c2a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2aa:	e8 45 0e 00 00       	call   c001d0f4 <ATAPI::ATAPI()>
c001c2af:	5a                   	pop    edx
c001c2b0:	59                   	pop    ecx
c001c2b1:	57                   	push   edi
c001c2b2:	53                   	push   ebx
c001c2b3:	e8 b2 04 ff ff       	call   c000c76a <Device::addChild(Device*)>
c001c2b8:	8b 07                	mov    eax,DWORD PTR [edi]
c001c2ba:	53                   	push   ebx
c001c2bb:	55                   	push   ebp
c001c2bc:	6a 00                	push   0x0
c001c2be:	57                   	push   edi
c001c2bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2c2:	83 c4 20             	add    esp,0x20
c001c2c5:	45                   	inc    ebp
c001c2c6:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c2cb:	74 0d                	je     c001c2da <IDE::detect()+0x256>
c001c2cd:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c2d5:	e9 db fd ff ff       	jmp    c001c0b5 <IDE::detect()+0x31>
c001c2da:	4e                   	dec    esi
c001c2db:	74 69                	je     c001c346 <IDE::detect()+0x2c2>
c001c2dd:	be 01 00 00 00       	mov    esi,0x1
c001c2e2:	e9 c6 fd ff ff       	jmp    c001c0ad <IDE::detect()+0x29>
c001c2e7:	50                   	push   eax
c001c2e8:	6a 04                	push   0x4
c001c2ea:	56                   	push   esi
c001c2eb:	53                   	push   ebx
c001c2ec:	e8 f3 f6 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c2f1:	83 c4 0c             	add    esp,0xc
c001c2f4:	89 c7                	mov    edi,eax
c001c2f6:	6a 05                	push   0x5
c001c2f8:	56                   	push   esi
c001c2f9:	53                   	push   ebx
c001c2fa:	e8 e5 f6 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	89 f9                	mov    ecx,edi
c001c304:	0f b6 c0             	movzx  eax,al
c001c307:	0f b6 f9             	movzx  edi,cl
c001c30a:	83 ff 14             	cmp    edi,0x14
c001c30d:	75 07                	jne    c001c316 <IDE::detect()+0x292>
c001c30f:	3d eb 00 00 00       	cmp    eax,0xeb
c001c314:	eb 0a                	jmp    c001c320 <IDE::detect()+0x29c>
c001c316:	3d 96 00 00 00       	cmp    eax,0x96
c001c31b:	75 a9                	jne    c001c2c6 <IDE::detect()+0x242>
c001c31d:	83 ff 69             	cmp    edi,0x69
c001c320:	75 a4                	jne    c001c2c6 <IDE::detect()+0x242>
c001c322:	68 a1 00 00 00       	push   0xa1
c001c327:	6a 07                	push   0x7
c001c329:	56                   	push   esi
c001c32a:	53                   	push   ebx
c001c32b:	e8 f4 f5 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c330:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c337:	e8 4c 9c ff ff       	call   c0015f88 <milliTenthSleep(unsigned int)>
c001c33c:	83 c4 10             	add    esp,0x10
c001c33f:	b1 01                	mov    cl,0x1
c001c341:	e9 64 fe ff ff       	jmp    c001c1aa <IDE::detect()+0x126>
c001c346:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c34c:	5b                   	pop    ebx
c001c34d:	5e                   	pop    esi
c001c34e:	5f                   	pop    edi
c001c34f:	5d                   	pop    ebp
c001c350:	c3                   	ret    
c001c351:	90                   	nop

c001c352 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c352:	55                   	push   ebp
c001c353:	57                   	push   edi
c001c354:	56                   	push   esi
c001c355:	53                   	push   ebx
c001c356:	83 ec 1c             	sub    esp,0x1c
c001c359:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c35d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c365:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c369:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c36d:	88 c3                	mov    bl,al
c001c36f:	25 ff 00 00 00       	and    eax,0xff
c001c374:	0f 84 88 00 00 00    	je     c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c37a:	83 ec 0c             	sub    esp,0xc
c001c37d:	89 c7                	mov    edi,eax
c001c37f:	68 4b 2d 02 c0       	push   0xc0022d4b
c001c384:	e8 bc e5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c389:	83 c4 10             	add    esp,0x10
c001c38c:	83 ff 01             	cmp    edi,0x1
c001c38f:	74 6b                	je     c001c3fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c391:	83 ff 02             	cmp    edi,0x2
c001c394:	75 58                	jne    c001c3ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c396:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c39b:	01 ff                	add    edi,edi
c001c39d:	50                   	push   eax
c001c39e:	09 fe                	or     esi,edi
c001c3a0:	6a 01                	push   0x1
c001c3a2:	89 f0                	mov    eax,esi
c001c3a4:	0f b6 f0             	movzx  esi,al
c001c3a7:	c1 e6 06             	shl    esi,0x6
c001c3aa:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c3b2:	50                   	push   eax
c001c3b3:	55                   	push   ebp
c001c3b4:	e8 2b f6 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	a8 01                	test   al,0x1
c001c3be:	74 02                	je     c001c3c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c3c0:	b3 07                	mov    bl,0x7
c001c3c2:	a8 02                	test   al,0x2
c001c3c4:	74 02                	je     c001c3c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c3c6:	b3 03                	mov    bl,0x3
c001c3c8:	a8 04                	test   al,0x4
c001c3ca:	74 02                	je     c001c3ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c3cc:	b3 14                	mov    bl,0x14
c001c3ce:	a8 08                	test   al,0x8
c001c3d0:	74 02                	je     c001c3d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c3d2:	b3 03                	mov    bl,0x3
c001c3d4:	a8 10                	test   al,0x10
c001c3d6:	74 02                	je     c001c3da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c3d8:	b3 15                	mov    bl,0x15
c001c3da:	a8 20                	test   al,0x20
c001c3dc:	74 02                	je     c001c3e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c3de:	b3 03                	mov    bl,0x3
c001c3e0:	a8 40                	test   al,0x40
c001c3e2:	74 02                	je     c001c3e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c3e4:	b3 16                	mov    bl,0x16
c001c3e6:	a8 80                	test   al,0x80
c001c3e8:	74 18                	je     c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3ea:	b3 0d                	mov    bl,0xd
c001c3ec:	eb 14                	jmp    c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3ee:	83 ff 03             	cmp    edi,0x3
c001c3f1:	74 0d                	je     c001c400 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c3f3:	83 ff 04             	cmp    edi,0x4
c001c3f6:	75 0a                	jne    c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3f8:	b3 08                	mov    bl,0x8
c001c3fa:	eb 06                	jmp    c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3fc:	b3 13                	mov    bl,0x13
c001c3fe:	eb 02                	jmp    c001c402 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c400:	b3 17                	mov    bl,0x17
c001c402:	83 c4 1c             	add    esp,0x1c
c001c405:	88 d8                	mov    al,bl
c001c407:	5b                   	pop    ebx
c001c408:	5e                   	pop    esi
c001c409:	5f                   	pop    edi
c001c40a:	5d                   	pop    ebp
c001c40b:	c3                   	ret    

c001c40c <IDE::polling(unsigned char, unsigned int)>:
c001c40c:	57                   	push   edi
c001c40d:	56                   	push   esi
c001c40e:	53                   	push   ebx
c001c40f:	bb 04 00 00 00       	mov    ebx,0x4
c001c414:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c418:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c41d:	52                   	push   edx
c001c41e:	6a 0c                	push   0xc
c001c420:	56                   	push   esi
c001c421:	57                   	push   edi
c001c422:	e8 bd f5 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c427:	83 c4 10             	add    esp,0x10
c001c42a:	4b                   	dec    ebx
c001c42b:	75 f0                	jne    c001c41d <IDE::polling(unsigned char, unsigned int)+0x11>
c001c42d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c432:	50                   	push   eax
c001c433:	6a 0c                	push   0xc
c001c435:	56                   	push   esi
c001c436:	57                   	push   edi
c001c437:	e8 a8 f5 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c43c:	83 c4 10             	add    esp,0x10
c001c43f:	a8 01                	test   al,0x1
c001c441:	75 17                	jne    c001c45a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c443:	a8 20                	test   al,0x20
c001c445:	75 0f                	jne    c001c456 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c447:	4b                   	dec    ebx
c001c448:	74 10                	je     c001c45a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c44a:	a8 80                	test   al,0x80
c001c44c:	75 e4                	jne    c001c432 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c44e:	a8 08                	test   al,0x8
c001c450:	74 e0                	je     c001c432 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c452:	31 c0                	xor    eax,eax
c001c454:	eb 06                	jmp    c001c45c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c456:	b0 01                	mov    al,0x1
c001c458:	eb 02                	jmp    c001c45c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c45a:	b0 02                	mov    al,0x2
c001c45c:	5b                   	pop    ebx
c001c45d:	5e                   	pop    esi
c001c45e:	5f                   	pop    edi
c001c45f:	c3                   	ret    

c001c460 <SATABus::close(int, int, void*)>:
c001c460:	31 c0                	xor    eax,eax
c001c462:	c3                   	ret    
c001c463:	90                   	nop

c001c464 <SATABus::detect()>:
c001c464:	c3                   	ret    
c001c465:	90                   	nop

c001c466 <SATABus::SATABus()>:
c001c466:	83 ec 0c             	sub    esp,0xc
c001c469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46d:	83 ec 08             	sub    esp,0x8
c001c470:	68 84 2d 02 c0       	push   0xc0022d84
c001c475:	50                   	push   eax
c001c476:	e8 31 06 ff ff       	call   c000caac <HardDiskController::HardDiskController(char const*)>
c001c47b:	83 c4 10             	add    esp,0x10
c001c47e:	ba b0 2d 02 c0       	mov    edx,0xc0022db0
c001c483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c487:	89 10                	mov    DWORD PTR [eax],edx
c001c489:	83 ec 0c             	sub    esp,0xc
c001c48c:	6a 50                	push   0x50
c001c48e:	e8 fb b9 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c493:	83 c4 10             	add    esp,0x10
c001c496:	89 c2                	mov    edx,eax
c001c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c4a2:	83 ec 0c             	sub    esp,0xc
c001c4a5:	6a 50                	push   0x50
c001c4a7:	e8 61 d1 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c4ac:	83 c4 10             	add    esp,0x10
c001c4af:	89 c2                	mov    edx,eax
c001c4b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c4bb:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c4c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4c4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c4ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4ce:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c4d4:	83 ec 0c             	sub    esp,0xc
c001c4d7:	6a 03                	push   0x3
c001c4d9:	6a 50                	push   0x50
c001c4db:	51                   	push   ecx
c001c4dc:	52                   	push   edx
c001c4dd:	50                   	push   eax
c001c4de:	e8 37 da fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c4e3:	83 c4 20             	add    esp,0x20
c001c4e6:	90                   	nop
c001c4e7:	83 c4 0c             	add    esp,0xc
c001c4ea:	c3                   	ret    
c001c4eb:	90                   	nop

c001c4ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c4ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c4f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c4f6:	09 c2                	or     edx,eax
c001c4f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c502:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c504:	31 c0                	xor    eax,eax
c001c506:	c1 e9 08             	shr    ecx,0x8
c001c509:	83 e1 0f             	and    ecx,0xf
c001c50c:	39 c8                	cmp    eax,ecx
c001c50e:	74 0a                	je     c001c51a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c510:	f6 c2 01             	test   dl,0x1
c001c513:	74 08                	je     c001c51d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c515:	d1 ea                	shr    edx,1
c001c517:	40                   	inc    eax
c001c518:	eb f2                	jmp    c001c50c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c51a:	83 c8 ff             	or     eax,0xffffffff
c001c51d:	c3                   	ret    

c001c51e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c51e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c522:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c525:	89 c2                	mov    edx,eax
c001c527:	c1 ea 08             	shr    edx,0x8
c001c52a:	83 e2 0f             	and    edx,0xf
c001c52d:	4a                   	dec    edx
c001c52e:	75 32                	jne    c001c562 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c530:	83 e0 0f             	and    eax,0xf
c001c533:	83 f8 03             	cmp    eax,0x3
c001c536:	75 2a                	jne    c001c562 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c538:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c53b:	b8 02 00 00 00       	mov    eax,0x2
c001c540:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c546:	74 1c                	je     c001c564 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c548:	b8 04 00 00 00       	mov    eax,0x4
c001c54d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c553:	74 0f                	je     c001c564 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c555:	31 c0                	xor    eax,eax
c001c557:	83 fa 03             	cmp    edx,0x3
c001c55a:	0f 94 c0             	sete   al
c001c55d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c561:	c3                   	ret    
c001c562:	31 c0                	xor    eax,eax
c001c564:	c3                   	ret    
c001c565:	90                   	nop

c001c566 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c566:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c56a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c56d:	0f ba e2 0f          	bt     edx,0xf
c001c571:	72 f7                	jb     c001c56a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c573:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c576:	83 ca 10             	or     edx,0x10
c001c579:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c57c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c57f:	83 ca 01             	or     edx,0x1
c001c582:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c585:	c3                   	ret    

c001c586 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c58a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c58d:	83 e2 fe             	and    edx,0xfffffffe
c001c590:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c593:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c596:	83 e2 ef             	and    edx,0xffffffef
c001c599:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c59c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c59f:	0f ba e2 0e          	bt     edx,0xe
c001c5a3:	72 f7                	jb     c001c59c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c5a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5a8:	0f ba e2 0f          	bt     edx,0xf
c001c5ac:	72 ee                	jb     c001c59c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c5ae:	c3                   	ret    
c001c5af:	90                   	nop

c001c5b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c5b0:	55                   	push   ebp
c001c5b1:	57                   	push   edi
c001c5b2:	56                   	push   esi
c001c5b3:	53                   	push   ebx
c001c5b4:	83 ec 1c             	sub    esp,0x1c
c001c5b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c5bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c5bf:	53                   	push   ebx
c001c5c0:	56                   	push   esi
c001c5c1:	e8 c0 ff ff ff       	call   c001c586 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c5c6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c5ca:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c5d0:	83 ec 0c             	sub    esp,0xc
c001c5d3:	c1 e5 0a             	shl    ebp,0xa
c001c5d6:	01 e8                	add    eax,ebp
c001c5d8:	89 03                	mov    DWORD PTR [ebx],eax
c001c5da:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5dc:	68 00 04 00 00       	push   0x400
c001c5e1:	6a 00                	push   0x0
c001c5e3:	50                   	push   eax
c001c5e4:	e8 07 3f fe ff       	call   c00004f0 <memset>
c001c5e9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c5ef:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c5f3:	01 e8                	add    eax,ebp
c001c5f5:	83 c4 1c             	add    esp,0x1c
c001c5f8:	89 03                	mov    DWORD PTR [ebx],eax
c001c5fa:	c1 e2 08             	shl    edx,0x8
c001c5fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c604:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c60a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c610:	01 f8                	add    eax,edi
c001c612:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c615:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c618:	68 00 01 00 00       	push   0x100
c001c61d:	6a 00                	push   0x0
c001c61f:	50                   	push   eax
c001c620:	e8 cb 3e fe ff       	call   c00004f0 <memset>
c001c625:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c62b:	01 fa                	add    edx,edi
c001c62d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c631:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c634:	c1 e7 0d             	shl    edi,0xd
c001c637:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c63e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c644:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c64a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c64e:	31 ff                	xor    edi,edi
c001c650:	83 c4 10             	add    esp,0x10
c001c653:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c65d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c663:	83 c5 20             	add    ebp,0x20
c001c666:	01 f8                	add    eax,edi
c001c668:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c66b:	52                   	push   edx
c001c66c:	68 00 01 00 00       	push   0x100
c001c671:	6a 00                	push   0x0
c001c673:	50                   	push   eax
c001c674:	e8 77 3e fe ff       	call   c00004f0 <memset>
c001c679:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c67d:	83 c4 10             	add    esp,0x10
c001c680:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c686:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c68d:	01 f8                	add    eax,edi
c001c68f:	81 c7 00 01 00 00    	add    edi,0x100
c001c695:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c698:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c69e:	75 b3                	jne    c001c653 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c6a0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c6a7:	50                   	push   eax
c001c6a8:	50                   	push   eax
c001c6a9:	53                   	push   ebx
c001c6aa:	56                   	push   esi
c001c6ab:	e8 b6 fe ff ff       	call   c001c566 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c6b0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c6b7:	83 c4 2c             	add    esp,0x2c
c001c6ba:	5b                   	pop    ebx
c001c6bb:	5e                   	pop    esi
c001c6bc:	5f                   	pop    edi
c001c6bd:	5d                   	pop    ebp
c001c6be:	c3                   	ret    
c001c6bf:	90                   	nop

c001c6c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c6c0:	55                   	push   ebp
c001c6c1:	57                   	push   edi
c001c6c2:	56                   	push   esi
c001c6c3:	53                   	push   ebx
c001c6c4:	31 db                	xor    ebx,ebx
c001c6c6:	83 ec 0c             	sub    esp,0xc
c001c6c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6cd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c6d1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c6d4:	f7 c7 01 00 00 00    	test   edi,0x1
c001c6da:	74 7a                	je     c001c756 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c6dc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c6e0:	89 d8                	mov    eax,ebx
c001c6e2:	c1 e0 07             	shl    eax,0x7
c001c6e5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c6ec:	55                   	push   ebp
c001c6ed:	56                   	push   esi
c001c6ee:	e8 2b fe ff ff       	call   c001c51e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c6f3:	5a                   	pop    edx
c001c6f4:	83 f8 01             	cmp    eax,0x1
c001c6f7:	59                   	pop    ecx
c001c6f8:	75 21                	jne    c001c71b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c6fa:	50                   	push   eax
c001c6fb:	53                   	push   ebx
c001c6fc:	55                   	push   ebp
c001c6fd:	56                   	push   esi
c001c6fe:	e8 ad fe ff ff       	call   c001c5b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c703:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c70a:	e8 a7 b3 fe ff       	call   c0007ab6 <malloc>
c001c70f:	89 c5                	mov    ebp,eax
c001c711:	89 04 24             	mov    DWORD PTR [esp],eax
c001c714:	e8 99 10 00 00       	call   c001d7b2 <SATA::SATA()>
c001c719:	eb 24                	jmp    c001c73f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c71b:	83 f8 04             	cmp    eax,0x4
c001c71e:	75 36                	jne    c001c756 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c720:	51                   	push   ecx
c001c721:	53                   	push   ebx
c001c722:	55                   	push   ebp
c001c723:	56                   	push   esi
c001c724:	e8 87 fe ff ff       	call   c001c5b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c729:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c730:	e8 81 b3 fe ff       	call   c0007ab6 <malloc>
c001c735:	89 c5                	mov    ebp,eax
c001c737:	89 04 24             	mov    DWORD PTR [esp],eax
c001c73a:	e8 d5 17 00 00       	call   c001df14 <SATAPI::SATAPI()>
c001c73f:	58                   	pop    eax
c001c740:	5a                   	pop    edx
c001c741:	55                   	push   ebp
c001c742:	56                   	push   esi
c001c743:	e8 22 00 ff ff       	call   c000c76a <Device::addChild(Device*)>
c001c748:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c74b:	56                   	push   esi
c001c74c:	6a 00                	push   0x0
c001c74e:	53                   	push   ebx
c001c74f:	55                   	push   ebp
c001c750:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c753:	83 c4 20             	add    esp,0x20
c001c756:	d1 ef                	shr    edi,1
c001c758:	43                   	inc    ebx
c001c759:	83 fb 20             	cmp    ebx,0x20
c001c75c:	0f 85 72 ff ff ff    	jne    c001c6d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c762:	83 c4 0c             	add    esp,0xc
c001c765:	5b                   	pop    ebx
c001c766:	5e                   	pop    esi
c001c767:	5f                   	pop    edi
c001c768:	5d                   	pop    ebp
c001c769:	c3                   	ret    

c001c76a <SATABus::open(int, int, void*)>:
c001c76a:	83 ec 14             	sub    esp,0x14
c001c76d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c771:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c777:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c77d:	52                   	push   edx
c001c77e:	50                   	push   eax
c001c77f:	e8 3c ff ff ff       	call   c001c6c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c784:	31 c0                	xor    eax,eax
c001c786:	83 c4 1c             	add    esp,0x1c
c001c789:	c3                   	ret    

c001c78a <ATA::close(int, int, void*)>:
c001c78a:	83 ec 0c             	sub    esp,0xc
c001c78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c791:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c797:	85 c0                	test   eax,eax
c001c799:	74 0c                	je     c001c7a7 <ATA::close(int, int, void*)+0x1d>
c001c79b:	83 ec 0c             	sub    esp,0xc
c001c79e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7a0:	50                   	push   eax
c001c7a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7a4:	83 c4 10             	add    esp,0x10
c001c7a7:	31 c0                	xor    eax,eax
c001c7a9:	83 c4 0c             	add    esp,0xc
c001c7ac:	c3                   	ret    
c001c7ad:	90                   	nop

c001c7ae <ATA::powerSaving(PowerSavingLevel)>:
c001c7ae:	c3                   	ret    
c001c7af:	90                   	nop

c001c7b0 <ATA::ATA()>:
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b7:	83 ec 04             	sub    esp,0x4
c001c7ba:	68 00 02 00 00       	push   0x200
c001c7bf:	68 7d 2e 02 c0       	push   0xc0022e7d
c001c7c4:	50                   	push   eax
c001c7c5:	e8 6c 03 ff ff       	call   c000cb36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7ca:	83 c4 10             	add    esp,0x10
c001c7cd:	ba f0 2d 02 c0       	mov    edx,0xc0022df0
c001c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d6:	89 10                	mov    DWORD PTR [eax],edx
c001c7d8:	90                   	nop
c001c7d9:	83 c4 0c             	add    esp,0xc
c001c7dc:	c3                   	ret    
c001c7dd:	90                   	nop

c001c7de <ATA::flush(bool)>:
c001c7de:	53                   	push   ebx
c001c7df:	83 ec 08             	sub    esp,0x8
c001c7e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c7eb:	83 f8 01             	cmp    eax,0x1
c001c7ee:	19 c0                	sbb    eax,eax
c001c7f0:	83 e0 fd             	and    eax,0xfffffffd
c001c7f3:	05 ea 00 00 00       	add    eax,0xea
c001c7f8:	50                   	push   eax
c001c7f9:	6a 07                	push   0x7
c001c7fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c802:	50                   	push   eax
c001c803:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c809:	e8 16 f1 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c80e:	83 c4 0c             	add    esp,0xc
c001c811:	6a 00                	push   0x0
c001c813:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c81a:	50                   	push   eax
c001c81b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c821:	e8 e6 fb ff ff       	call   c001c40c <IDE::polling(unsigned char, unsigned int)>
c001c826:	83 c4 18             	add    esp,0x18
c001c829:	5b                   	pop    ebx
c001c82a:	c3                   	ret    
c001c82b:	90                   	nop

c001c82c <ATA::readyForCommand()>:
c001c82c:	56                   	push   esi
c001c82d:	53                   	push   ebx
c001c82e:	53                   	push   ebx
c001c82f:	31 db                	xor    ebx,ebx
c001c831:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c835:	51                   	push   ecx
c001c836:	6a 0c                	push   0xc
c001c838:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c83f:	50                   	push   eax
c001c840:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c846:	e8 99 f1 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001c84b:	83 c4 10             	add    esp,0x10
c001c84e:	a8 88                	test   al,0x88
c001c850:	74 1f                	je     c001c871 <ATA::readyForCommand()+0x45>
c001c852:	43                   	inc    ebx
c001c853:	83 fb 63             	cmp    ebx,0x63
c001c856:	7e dd                	jle    c001c835 <ATA::readyForCommand()+0x9>
c001c858:	83 ec 0c             	sub    esp,0xc
c001c85b:	6a 0a                	push   0xa
c001c85d:	e8 26 97 ff ff       	call   c0015f88 <milliTenthSleep(unsigned int)>
c001c862:	83 c4 10             	add    esp,0x10
c001c865:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c86b:	75 c8                	jne    c001c835 <ATA::readyForCommand()+0x9>
c001c86d:	31 c0                	xor    eax,eax
c001c86f:	eb 02                	jmp    c001c873 <ATA::readyForCommand()+0x47>
c001c871:	b0 01                	mov    al,0x1
c001c873:	5a                   	pop    edx
c001c874:	5b                   	pop    ebx
c001c875:	5e                   	pop    esi
c001c876:	c3                   	ret    
c001c877:	90                   	nop

c001c878 <ATA::access(unsigned long long, int, void*, bool)>:
c001c878:	55                   	push   ebp
c001c879:	57                   	push   edi
c001c87a:	56                   	push   esi
c001c87b:	53                   	push   ebx
c001c87c:	83 ec 2c             	sub    esp,0x2c
c001c87f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c883:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c887:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c88b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c88f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c893:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c897:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c89b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8a5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c8ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8af:	c1 e0 06             	shl    eax,0x6
c001c8b2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c8ba:	74 5d                	je     c001c919 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c8bc:	89 fa                	mov    edx,edi
c001c8be:	89 f0                	mov    eax,esi
c001c8c0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c8c4:	c1 ea 1c             	shr    edx,0x1c
c001c8c7:	89 d1                	mov    ecx,edx
c001c8c9:	09 c1                	or     ecx,eax
c001c8cb:	74 25                	je     c001c8f2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c8cd:	31 ed                	xor    ebp,ebp
c001c8cf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c8d6:	89 fa                	mov    edx,edi
c001c8d8:	89 f0                	mov    eax,esi
c001c8da:	0f ad d0             	shrd   eax,edx,cl
c001c8dd:	d3 ea                	shr    edx,cl
c001c8df:	f6 c1 20             	test   cl,0x20
c001c8e2:	74 02                	je     c001c8e6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c8e4:	89 d0                	mov    eax,edx
c001c8e6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c8ea:	45                   	inc    ebp
c001c8eb:	83 fd 06             	cmp    ebp,0x6
c001c8ee:	75 df                	jne    c001c8cf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c8f0:	eb 76                	jmp    c001c968 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c8f2:	89 f0                	mov    eax,esi
c001c8f4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c8f9:	89 fa                	mov    edx,edi
c001c8fb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c902:	0f ac d0 10          	shrd   eax,edx,0x10
c001c906:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c90b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c90f:	c1 ee 18             	shr    esi,0x18
c001c912:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c917:	eb 56                	jmp    c001c96f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c919:	6a 00                	push   0x0
c001c91b:	6a 3f                	push   0x3f
c001c91d:	57                   	push   edi
c001c91e:	56                   	push   esi
c001c91f:	e8 ac 2a 00 00       	call   c001f3d0 <__umoddi3>
c001c924:	83 c4 10             	add    esp,0x10
c001c927:	40                   	inc    eax
c001c928:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c92c:	6a 00                	push   0x0
c001c92e:	68 f0 03 00 00       	push   0x3f0
c001c933:	57                   	push   edi
c001c934:	56                   	push   esi
c001c935:	e8 96 29 00 00       	call   c001f2d0 <__udivdi3>
c001c93a:	83 c4 10             	add    esp,0x10
c001c93d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c942:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c949:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c94e:	6a 00                	push   0x0
c001c950:	6a 3f                	push   0x3f
c001c952:	57                   	push   edi
c001c953:	56                   	push   esi
c001c954:	e8 77 29 00 00       	call   c001f2d0 <__udivdi3>
c001c959:	83 c4 10             	add    esp,0x10
c001c95c:	83 e0 0f             	and    eax,0xf
c001c95f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c964:	89 c6                	mov    esi,eax
c001c966:	eb 07                	jmp    c001c96f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c968:	31 f6                	xor    esi,esi
c001c96a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c96f:	bf 01 00 00 00       	mov    edi,0x1
c001c974:	50                   	push   eax
c001c975:	6a 00                	push   0x0
c001c977:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c97e:	50                   	push   eax
c001c97f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c983:	e8 a4 f1 ff ff       	call   c001bb2c <IDE::enableIRQs(unsigned char, bool)>
c001c988:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c98b:	e8 9c fe ff ff       	call   c001c82c <ATA::readyForCommand()>
c001c990:	83 c4 10             	add    esp,0x10
c001c993:	84 c0                	test   al,al
c001c995:	0f 84 69 02 00 00    	je     c001cc04 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c99b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9a1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9a7:	c1 e0 04             	shl    eax,0x4
c001c9aa:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c9b1:	09 c6                	or     esi,eax
c001c9b3:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c9b8:	75 05                	jne    c001c9bf <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c9ba:	83 ce a0             	or     esi,0xffffffa0
c001c9bd:	eb 03                	jmp    c001c9c2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c9bf:	83 ce e0             	or     esi,0xffffffe0
c001c9c2:	89 f0                	mov    eax,esi
c001c9c4:	0f b6 f0             	movzx  esi,al
c001c9c7:	56                   	push   esi
c001c9c8:	6a 06                	push   0x6
c001c9ca:	51                   	push   ecx
c001c9cb:	52                   	push   edx
c001c9cc:	e8 53 ef ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d1:	83 c4 10             	add    esp,0x10
c001c9d4:	6a 00                	push   0x0
c001c9d6:	6a 01                	push   0x1
c001c9d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9df:	50                   	push   eax
c001c9e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9e6:	e8 39 ef ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9eb:	83 c4 10             	add    esp,0x10
c001c9ee:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c9f3:	83 f8 02             	cmp    eax,0x2
c001c9f6:	75 6e                	jne    c001ca66 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c9f8:	6a 00                	push   0x0
c001c9fa:	6a 08                	push   0x8
c001c9fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca03:	50                   	push   eax
c001ca04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0a:	e8 15 ef ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca0f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca14:	50                   	push   eax
c001ca15:	6a 09                	push   0x9
c001ca17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca1e:	50                   	push   eax
c001ca1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca25:	e8 fa ee ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca2a:	83 c4 20             	add    esp,0x20
c001ca2d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca32:	50                   	push   eax
c001ca33:	6a 0a                	push   0xa
c001ca35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca3c:	50                   	push   eax
c001ca3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca43:	e8 dc ee ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca48:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca4d:	50                   	push   eax
c001ca4e:	6a 0b                	push   0xb
c001ca50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca57:	50                   	push   eax
c001ca58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca5e:	e8 c1 ee ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca63:	83 c4 20             	add    esp,0x20
c001ca66:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca6b:	50                   	push   eax
c001ca6c:	6a 02                	push   0x2
c001ca6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca75:	50                   	push   eax
c001ca76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca7c:	e8 a3 ee ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca81:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca86:	50                   	push   eax
c001ca87:	6a 03                	push   0x3
c001ca89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca90:	50                   	push   eax
c001ca91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca97:	e8 88 ee ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca9c:	83 c4 20             	add    esp,0x20
c001ca9f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001caa4:	50                   	push   eax
c001caa5:	6a 04                	push   0x4
c001caa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caae:	50                   	push   eax
c001caaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cab5:	e8 6a ee ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caba:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cabf:	50                   	push   eax
c001cac0:	6a 05                	push   0x5
c001cac2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cac9:	50                   	push   eax
c001caca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cad0:	e8 4f ee ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cad5:	83 c4 20             	add    esp,0x20
c001cad8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cadd:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cae2:	74 11                	je     c001caf5 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cae4:	b8 30 00 00 00       	mov    eax,0x30
c001cae9:	83 fa 02             	cmp    edx,0x2
c001caec:	75 16                	jne    c001cb04 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001caee:	b8 34 00 00 00       	mov    eax,0x34
c001caf3:	eb 0f                	jmp    c001cb04 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001caf5:	b8 20 00 00 00       	mov    eax,0x20
c001cafa:	83 fa 02             	cmp    edx,0x2
c001cafd:	75 05                	jne    c001cb04 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001caff:	b8 24 00 00 00       	mov    eax,0x24
c001cb04:	50                   	push   eax
c001cb05:	6a 07                	push   0x7
c001cb07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb0e:	50                   	push   eax
c001cb0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb15:	e8 0a ee ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb1a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb1e:	83 c4 10             	add    esp,0x10
c001cb21:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cb26:	85 f6                	test   esi,esi
c001cb28:	0f 84 b3 00 00 00    	je     c001cbe1 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cb2e:	50                   	push   eax
c001cb2f:	6a 01                	push   0x1
c001cb31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb38:	50                   	push   eax
c001cb39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb3f:	e8 c8 f8 ff ff       	call   c001c40c <IDE::polling(unsigned char, unsigned int)>
c001cb44:	83 c4 10             	add    esp,0x10
c001cb47:	0f b6 f8             	movzx  edi,al
c001cb4a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb50:	85 ff                	test   edi,edi
c001cb52:	74 1d                	je     c001cb71 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cb54:	57                   	push   edi
c001cb55:	0f b6 d2             	movzx  edx,dl
c001cb58:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb5f:	50                   	push   eax
c001cb60:	52                   	push   edx
c001cb61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb67:	e8 e6 f7 ff ff       	call   c001c352 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb6c:	e9 90 00 00 00       	jmp    c001cc01 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cb71:	85 ed                	test   ebp,ebp
c001cb73:	74 3b                	je     c001cbb0 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cb75:	31 c9                	xor    ecx,ecx
c001cb77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cb7b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb7f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cb83:	50                   	push   eax
c001cb84:	50                   	push   eax
c001cb85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb8c:	50                   	push   eax
c001cb8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb93:	e8 7a ed ff ff       	call   c001b912 <IDE::getBase(unsigned char)>
c001cb98:	89 c2                	mov    edx,eax
c001cb9a:	89 f8                	mov    eax,edi
c001cb9c:	66 ef                	out    dx,ax
c001cb9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cba2:	83 c4 10             	add    esp,0x10
c001cba5:	41                   	inc    ecx
c001cba6:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cbac:	75 c9                	jne    c001cb77 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cbae:	eb 23                	jmp    c001cbd3 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cbb0:	0f b6 d2             	movzx  edx,dl
c001cbb3:	51                   	push   ecx
c001cbb4:	51                   	push   ecx
c001cbb5:	52                   	push   edx
c001cbb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbbc:	e8 51 ed ff ff       	call   c001b912 <IDE::getBase(unsigned char)>
c001cbc1:	b9 00 01 00 00       	mov    ecx,0x100
c001cbc6:	89 c2                	mov    edx,eax
c001cbc8:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cbcc:	fc                   	cld    
c001cbcd:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbd0:	83 c4 10             	add    esp,0x10
c001cbd3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cbdb:	4e                   	dec    esi
c001cbdc:	e9 45 ff ff ff       	jmp    c001cb26 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cbe1:	31 ff                	xor    edi,edi
c001cbe3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbe8:	74 1a                	je     c001cc04 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cbea:	50                   	push   eax
c001cbeb:	50                   	push   eax
c001cbec:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cbf1:	83 f8 02             	cmp    eax,0x2
c001cbf4:	0f 94 c0             	sete   al
c001cbf7:	0f b6 c0             	movzx  eax,al
c001cbfa:	50                   	push   eax
c001cbfb:	53                   	push   ebx
c001cbfc:	e8 dd fb ff ff       	call   c001c7de <ATA::flush(bool)>
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	83 c4 2c             	add    esp,0x2c
c001cc07:	89 f8                	mov    eax,edi
c001cc09:	5b                   	pop    ebx
c001cc0a:	5e                   	pop    esi
c001cc0b:	5f                   	pop    edi
c001cc0c:	5d                   	pop    ebp
c001cc0d:	c3                   	ret    

c001cc0e <ATA::detectCHS()>:
c001cc0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc12:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cc18:	c1 e0 06             	shl    eax,0x6
c001cc1b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc21:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc2b:	c7 44 24 04 d4 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022dd4
c001cc33:	e9 61 47 ff ff       	jmp    c0011399 <KePanic(char const*)>

c001cc38 <ATA::open(int, int, void*)>:
c001cc38:	53                   	push   ebx
c001cc39:	83 ec 08             	sub    esp,0x8
c001cc3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc48:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc4e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc54:	c1 e0 06             	shl    eax,0x6
c001cc57:	01 d0                	add    eax,edx
c001cc59:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc60:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc66:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cc6d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cc77:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc7d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cc84:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc8b:	75 0c                	jne    c001cc99 <ATA::open(int, int, void*)+0x61>
c001cc8d:	83 ec 0c             	sub    esp,0xc
c001cc90:	53                   	push   ebx
c001cc91:	e8 78 ff ff ff       	call   c001cc0e <ATA::detectCHS()>
c001cc96:	83 c4 10             	add    esp,0x10
c001cc99:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cc9f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cca5:	c1 e0 06             	shl    eax,0x6
c001cca8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ccaf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ccb9:	d1 e8                	shr    eax,1
c001ccbb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ccc1:	6a 04                	push   0x4
c001ccc3:	6a 0c                	push   0xc
c001ccc5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cccc:	50                   	push   eax
c001cccd:	52                   	push   edx
c001ccce:	e8 51 ec ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccd3:	90                   	nop
c001ccd4:	90                   	nop
c001ccd5:	6a 00                	push   0x0
c001ccd7:	6a 0c                	push   0xc
c001ccd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cce0:	50                   	push   eax
c001cce1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cce7:	e8 38 ec ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccec:	83 c4 14             	add    esp,0x14
c001ccef:	53                   	push   ebx
c001ccf0:	e8 a9 fe fe ff       	call   c000cb9e <PhysicalDisk::startCache()>
c001ccf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccf8:	e8 e5 10 ff ff       	call   c000dde2 <createPartitionsForDisk(PhysicalDisk*)>
c001ccfd:	31 c0                	xor    eax,eax
c001ccff:	83 c4 18             	add    esp,0x18
c001cd02:	5b                   	pop    ebx
c001cd03:	c3                   	ret    

c001cd04 <combineCharAndColour(char, unsigned char)>:
c001cd04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd09:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cd0f:	c1 e0 08             	shl    eax,0x8
c001cd12:	09 d0                	or     eax,edx
c001cd14:	c3                   	ret    

c001cd15 <combineColours(unsigned char, unsigned char)>:
c001cd15:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd1a:	c1 e0 04             	shl    eax,0x4
c001cd1d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cd21:	c3                   	ret    

c001cd22 <ATA::read(unsigned long long, int, void*)>:
c001cd22:	55                   	push   ebp
c001cd23:	57                   	push   edi
c001cd24:	56                   	push   esi
c001cd25:	be 04 00 00 00       	mov    esi,0x4
c001cd2a:	53                   	push   ebx
c001cd2b:	83 ec 0c             	sub    esp,0xc
c001cd2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd36:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd3d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd41:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd47:	0f 87 a1 01 00 00    	ja     c001ceee <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd4d:	be 06 00 00 00       	mov    esi,0x6
c001cd52:	85 c9                	test   ecx,ecx
c001cd54:	0f 84 94 01 00 00    	je     c001ceee <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd5a:	55                   	push   ebp
c001cd5b:	55                   	push   ebp
c001cd5c:	6a 00                	push   0x0
c001cd5e:	51                   	push   ecx
c001cd5f:	53                   	push   ebx
c001cd60:	52                   	push   edx
c001cd61:	50                   	push   eax
c001cd62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd66:	e8 0d fb ff ff       	call   c001c878 <ATA::access(unsigned long long, int, void*, bool)>
c001cd6b:	83 c4 20             	add    esp,0x20
c001cd6e:	89 c6                	mov    esi,eax
c001cd70:	85 c0                	test   eax,eax
c001cd72:	0f 85 71 01 00 00    	jne    c001cee9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cd78:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cd7e:	89 da                	mov    edx,ebx
c001cd80:	50                   	push   eax
c001cd81:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd86:	50                   	push   eax
c001cd87:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cd8d:	6a 0f                	push   0xf
c001cd8f:	6a 00                	push   0x0
c001cd91:	e8 7f ff ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001cd96:	59                   	pop    ecx
c001cd97:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd9c:	5b                   	pop    ebx
c001cd9d:	0f b6 d8             	movzx  ebx,al
c001cda0:	89 d0                	mov    eax,edx
c001cda2:	53                   	push   ebx
c001cda3:	99                   	cdq    
c001cda4:	f7 fd                	idiv   ebp
c001cda6:	99                   	cdq    
c001cda7:	f7 f9                	idiv   ecx
c001cda9:	83 c2 30             	add    edx,0x30
c001cdac:	0f b6 d2             	movzx  edx,dl
c001cdaf:	52                   	push   edx
c001cdb0:	e8 4f ff ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cdb5:	5f                   	pop    edi
c001cdb6:	bf e8 03 00 00       	mov    edi,0x3e8
c001cdbb:	5a                   	pop    edx
c001cdbc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdc2:	53                   	push   ebx
c001cdc3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdc8:	99                   	cdq    
c001cdc9:	f7 ff                	idiv   edi
c001cdcb:	99                   	cdq    
c001cdcc:	f7 f9                	idiv   ecx
c001cdce:	8d 42 30             	lea    eax,[edx+0x30]
c001cdd1:	0f b6 c0             	movzx  eax,al
c001cdd4:	50                   	push   eax
c001cdd5:	e8 2a ff ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cdda:	5f                   	pop    edi
c001cddb:	bf 64 00 00 00       	mov    edi,0x64
c001cde0:	5a                   	pop    edx
c001cde1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cde7:	53                   	push   ebx
c001cde8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cded:	99                   	cdq    
c001cdee:	f7 ff                	idiv   edi
c001cdf0:	99                   	cdq    
c001cdf1:	f7 f9                	idiv   ecx
c001cdf3:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf6:	0f b6 c0             	movzx  eax,al
c001cdf9:	50                   	push   eax
c001cdfa:	e8 05 ff ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cdff:	5a                   	pop    edx
c001ce00:	5a                   	pop    edx
c001ce01:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce07:	53                   	push   ebx
c001ce08:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce0d:	99                   	cdq    
c001ce0e:	f7 f9                	idiv   ecx
c001ce10:	99                   	cdq    
c001ce11:	f7 f9                	idiv   ecx
c001ce13:	8d 42 30             	lea    eax,[edx+0x30]
c001ce16:	0f b6 c0             	movzx  eax,al
c001ce19:	50                   	push   eax
c001ce1a:	e8 e5 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ce1f:	5a                   	pop    edx
c001ce20:	5a                   	pop    edx
c001ce21:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce27:	53                   	push   ebx
c001ce28:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce2d:	99                   	cdq    
c001ce2e:	f7 f9                	idiv   ecx
c001ce30:	83 c2 30             	add    edx,0x30
c001ce33:	0f b6 d2             	movzx  edx,dl
c001ce36:	52                   	push   edx
c001ce37:	e8 c8 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ce3c:	5a                   	pop    edx
c001ce3d:	5a                   	pop    edx
c001ce3e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce44:	53                   	push   ebx
c001ce45:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce4a:	99                   	cdq    
c001ce4b:	f7 fd                	idiv   ebp
c001ce4d:	99                   	cdq    
c001ce4e:	f7 f9                	idiv   ecx
c001ce50:	8d 42 30             	lea    eax,[edx+0x30]
c001ce53:	0f b6 c0             	movzx  eax,al
c001ce56:	50                   	push   eax
c001ce57:	e8 a8 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ce5c:	5d                   	pop    ebp
c001ce5d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce62:	5a                   	pop    edx
c001ce63:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce69:	53                   	push   ebx
c001ce6a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce6f:	99                   	cdq    
c001ce70:	f7 fd                	idiv   ebp
c001ce72:	99                   	cdq    
c001ce73:	f7 f9                	idiv   ecx
c001ce75:	8d 42 30             	lea    eax,[edx+0x30]
c001ce78:	0f b6 c0             	movzx  eax,al
c001ce7b:	50                   	push   eax
c001ce7c:	e8 83 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ce81:	5d                   	pop    ebp
c001ce82:	5a                   	pop    edx
c001ce83:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce89:	53                   	push   ebx
c001ce8a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce8f:	99                   	cdq    
c001ce90:	f7 ff                	idiv   edi
c001ce92:	99                   	cdq    
c001ce93:	f7 f9                	idiv   ecx
c001ce95:	8d 42 30             	lea    eax,[edx+0x30]
c001ce98:	0f b6 c0             	movzx  eax,al
c001ce9b:	50                   	push   eax
c001ce9c:	e8 63 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cea1:	5f                   	pop    edi
c001cea2:	5d                   	pop    ebp
c001cea3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cea9:	53                   	push   ebx
c001ceaa:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ceaf:	99                   	cdq    
c001ceb0:	f7 f9                	idiv   ecx
c001ceb2:	99                   	cdq    
c001ceb3:	f7 f9                	idiv   ecx
c001ceb5:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb8:	0f b6 c0             	movzx  eax,al
c001cebb:	50                   	push   eax
c001cebc:	e8 43 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cec1:	5a                   	pop    edx
c001cec2:	5f                   	pop    edi
c001cec3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cec9:	53                   	push   ebx
c001ceca:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cecf:	99                   	cdq    
c001ced0:	f7 f9                	idiv   ecx
c001ced2:	83 c2 30             	add    edx,0x30
c001ced5:	0f b6 d2             	movzx  edx,dl
c001ced8:	52                   	push   edx
c001ced9:	e8 26 fe ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cede:	83 c4 10             	add    esp,0x10
c001cee1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cee7:	eb 05                	jmp    c001ceee <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cee9:	be 01 00 00 00       	mov    esi,0x1
c001ceee:	83 c4 0c             	add    esp,0xc
c001cef1:	89 f0                	mov    eax,esi
c001cef3:	5b                   	pop    ebx
c001cef4:	5e                   	pop    esi
c001cef5:	5f                   	pop    edi
c001cef6:	5d                   	pop    ebp
c001cef7:	c3                   	ret    

c001cef8 <ATA::write(unsigned long long, int, void*)>:
c001cef8:	55                   	push   ebp
c001cef9:	57                   	push   edi
c001cefa:	56                   	push   esi
c001cefb:	be 04 00 00 00       	mov    esi,0x4
c001cf00:	53                   	push   ebx
c001cf01:	83 ec 0c             	sub    esp,0xc
c001cf04:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cf08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf0c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cf0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf13:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf17:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cf1d:	0f 87 9c 01 00 00    	ja     c001d0bf <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf23:	be 06 00 00 00       	mov    esi,0x6
c001cf28:	85 c9                	test   ecx,ecx
c001cf2a:	0f 84 8f 01 00 00    	je     c001d0bf <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf30:	55                   	push   ebp
c001cf31:	55                   	push   ebp
c001cf32:	6a 01                	push   0x1
c001cf34:	51                   	push   ecx
c001cf35:	53                   	push   ebx
c001cf36:	52                   	push   edx
c001cf37:	50                   	push   eax
c001cf38:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf3c:	e8 37 f9 ff ff       	call   c001c878 <ATA::access(unsigned long long, int, void*, bool)>
c001cf41:	83 c4 20             	add    esp,0x20
c001cf44:	89 c6                	mov    esi,eax
c001cf46:	85 c0                	test   eax,eax
c001cf48:	0f 85 6c 01 00 00    	jne    c001d0ba <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cf4e:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cf54:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf59:	50                   	push   eax
c001cf5a:	50                   	push   eax
c001cf5b:	6a 0f                	push   0xf
c001cf5d:	6a 00                	push   0x0
c001cf5f:	e8 b1 fd ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001cf64:	5a                   	pop    edx
c001cf65:	0f b6 d8             	movzx  ebx,al
c001cf68:	59                   	pop    ecx
c001cf69:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf6e:	53                   	push   ebx
c001cf6f:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf74:	99                   	cdq    
c001cf75:	f7 fd                	idiv   ebp
c001cf77:	99                   	cdq    
c001cf78:	f7 f9                	idiv   ecx
c001cf7a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf7d:	0f b6 c0             	movzx  eax,al
c001cf80:	50                   	push   eax
c001cf81:	e8 7e fd ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cf86:	5f                   	pop    edi
c001cf87:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf8c:	5a                   	pop    edx
c001cf8d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf93:	53                   	push   ebx
c001cf94:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf99:	99                   	cdq    
c001cf9a:	f7 ff                	idiv   edi
c001cf9c:	99                   	cdq    
c001cf9d:	f7 f9                	idiv   ecx
c001cf9f:	8d 42 30             	lea    eax,[edx+0x30]
c001cfa2:	0f b6 c0             	movzx  eax,al
c001cfa5:	50                   	push   eax
c001cfa6:	e8 59 fd ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cfab:	5f                   	pop    edi
c001cfac:	bf 64 00 00 00       	mov    edi,0x64
c001cfb1:	5a                   	pop    edx
c001cfb2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cfb8:	53                   	push   ebx
c001cfb9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfbe:	99                   	cdq    
c001cfbf:	f7 ff                	idiv   edi
c001cfc1:	99                   	cdq    
c001cfc2:	f7 f9                	idiv   ecx
c001cfc4:	8d 42 30             	lea    eax,[edx+0x30]
c001cfc7:	0f b6 c0             	movzx  eax,al
c001cfca:	50                   	push   eax
c001cfcb:	e8 34 fd ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cfd0:	5a                   	pop    edx
c001cfd1:	5a                   	pop    edx
c001cfd2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cfd8:	53                   	push   ebx
c001cfd9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfde:	99                   	cdq    
c001cfdf:	f7 f9                	idiv   ecx
c001cfe1:	99                   	cdq    
c001cfe2:	f7 f9                	idiv   ecx
c001cfe4:	8d 42 30             	lea    eax,[edx+0x30]
c001cfe7:	0f b6 c0             	movzx  eax,al
c001cfea:	50                   	push   eax
c001cfeb:	e8 14 fd ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001cff0:	5a                   	pop    edx
c001cff1:	5a                   	pop    edx
c001cff2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cff8:	53                   	push   ebx
c001cff9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cffe:	99                   	cdq    
c001cfff:	f7 f9                	idiv   ecx
c001d001:	8d 42 30             	lea    eax,[edx+0x30]
c001d004:	0f b6 c0             	movzx  eax,al
c001d007:	50                   	push   eax
c001d008:	e8 f7 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d00d:	5a                   	pop    edx
c001d00e:	5a                   	pop    edx
c001d00f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d015:	53                   	push   ebx
c001d016:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d01b:	99                   	cdq    
c001d01c:	f7 fd                	idiv   ebp
c001d01e:	99                   	cdq    
c001d01f:	f7 f9                	idiv   ecx
c001d021:	8d 42 30             	lea    eax,[edx+0x30]
c001d024:	0f b6 c0             	movzx  eax,al
c001d027:	50                   	push   eax
c001d028:	e8 d7 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d02d:	5d                   	pop    ebp
c001d02e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d033:	5a                   	pop    edx
c001d034:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d03a:	53                   	push   ebx
c001d03b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d040:	99                   	cdq    
c001d041:	f7 fd                	idiv   ebp
c001d043:	99                   	cdq    
c001d044:	f7 f9                	idiv   ecx
c001d046:	8d 42 30             	lea    eax,[edx+0x30]
c001d049:	0f b6 c0             	movzx  eax,al
c001d04c:	50                   	push   eax
c001d04d:	e8 b2 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d052:	5d                   	pop    ebp
c001d053:	5a                   	pop    edx
c001d054:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d05a:	53                   	push   ebx
c001d05b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d060:	99                   	cdq    
c001d061:	f7 ff                	idiv   edi
c001d063:	99                   	cdq    
c001d064:	f7 f9                	idiv   ecx
c001d066:	8d 42 30             	lea    eax,[edx+0x30]
c001d069:	0f b6 c0             	movzx  eax,al
c001d06c:	50                   	push   eax
c001d06d:	e8 92 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d072:	5f                   	pop    edi
c001d073:	5d                   	pop    ebp
c001d074:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d07a:	53                   	push   ebx
c001d07b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d080:	99                   	cdq    
c001d081:	f7 f9                	idiv   ecx
c001d083:	99                   	cdq    
c001d084:	f7 f9                	idiv   ecx
c001d086:	8d 42 30             	lea    eax,[edx+0x30]
c001d089:	0f b6 c0             	movzx  eax,al
c001d08c:	50                   	push   eax
c001d08d:	e8 72 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d092:	5a                   	pop    edx
c001d093:	5f                   	pop    edi
c001d094:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d09a:	53                   	push   ebx
c001d09b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0a0:	99                   	cdq    
c001d0a1:	f7 f9                	idiv   ecx
c001d0a3:	83 c2 30             	add    edx,0x30
c001d0a6:	0f b6 d2             	movzx  edx,dl
c001d0a9:	52                   	push   edx
c001d0aa:	e8 55 fc ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d0b8:	eb 05                	jmp    c001d0bf <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d0ba:	be 01 00 00 00       	mov    esi,0x1
c001d0bf:	83 c4 0c             	add    esp,0xc
c001d0c2:	89 f0                	mov    eax,esi
c001d0c4:	5b                   	pop    ebx
c001d0c5:	5e                   	pop    esi
c001d0c6:	5f                   	pop    edi
c001d0c7:	5d                   	pop    ebp
c001d0c8:	c3                   	ret    
c001d0c9:	90                   	nop

c001d0ca <ATAPI::write(unsigned long long, int, void*)>:
c001d0ca:	b8 03 00 00 00       	mov    eax,0x3
c001d0cf:	c3                   	ret    

c001d0d0 <ATAPI::close(int, int, void*)>:
c001d0d0:	83 ec 0c             	sub    esp,0xc
c001d0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d0dd:	85 c0                	test   eax,eax
c001d0df:	74 0c                	je     c001d0ed <ATAPI::close(int, int, void*)+0x1d>
c001d0e1:	83 ec 0c             	sub    esp,0xc
c001d0e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0e6:	50                   	push   eax
c001d0e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d0ea:	83 c4 10             	add    esp,0x10
c001d0ed:	31 c0                	xor    eax,eax
c001d0ef:	83 c4 0c             	add    esp,0xc
c001d0f2:	c3                   	ret    
c001d0f3:	90                   	nop

c001d0f4 <ATAPI::ATAPI()>:
c001d0f4:	83 ec 0c             	sub    esp,0xc
c001d0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0fb:	83 ec 04             	sub    esp,0x4
c001d0fe:	68 00 08 00 00       	push   0x800
c001d103:	68 1d 2f 02 c0       	push   0xc0022f1d
c001d108:	50                   	push   eax
c001d109:	e8 28 fa fe ff       	call   c000cb36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d10e:	83 c4 10             	add    esp,0x10
c001d111:	ba 38 2e 02 c0       	mov    edx,0xc0022e38
c001d116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d11a:	89 10                	mov    DWORD PTR [eax],edx
c001d11c:	90                   	nop
c001d11d:	83 c4 0c             	add    esp,0xc
c001d120:	c3                   	ret    
c001d121:	90                   	nop

c001d122 <ATAPI::readyForCommand()>:
c001d122:	56                   	push   esi
c001d123:	53                   	push   ebx
c001d124:	53                   	push   ebx
c001d125:	31 db                	xor    ebx,ebx
c001d127:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d12b:	51                   	push   ecx
c001d12c:	6a 0c                	push   0xc
c001d12e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d135:	50                   	push   eax
c001d136:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d13c:	e8 a3 e8 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	a8 88                	test   al,0x88
c001d146:	74 25                	je     c001d16d <ATAPI::readyForCommand()+0x4b>
c001d148:	43                   	inc    ebx
c001d149:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d14f:	7e da                	jle    c001d12b <ATAPI::readyForCommand()+0x9>
c001d151:	83 ec 0c             	sub    esp,0xc
c001d154:	68 5e 01 00 00       	push   0x15e
c001d159:	e8 2a 8e ff ff       	call   c0015f88 <milliTenthSleep(unsigned int)>
c001d15e:	83 c4 10             	add    esp,0x10
c001d161:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d167:	75 c2                	jne    c001d12b <ATAPI::readyForCommand()+0x9>
c001d169:	31 c0                	xor    eax,eax
c001d16b:	eb 02                	jmp    c001d16f <ATAPI::readyForCommand()+0x4d>
c001d16d:	b0 01                	mov    al,0x1
c001d16f:	5a                   	pop    edx
c001d170:	5b                   	pop    ebx
c001d171:	5e                   	pop    esi
c001d172:	c3                   	ret    
c001d173:	90                   	nop

c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d174:	55                   	push   ebp
c001d175:	57                   	push   edi
c001d176:	56                   	push   esi
c001d177:	53                   	push   ebx
c001d178:	83 ec 20             	sub    esp,0x20
c001d17b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d17f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d183:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d187:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d18b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d18f:	6a 01                	push   0x1
c001d191:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d198:	50                   	push   eax
c001d199:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d19f:	e8 88 e9 ff ff       	call   c001bb2c <IDE::enableIRQs(unsigned char, bool)>
c001d1a4:	5e                   	pop    esi
c001d1a5:	58                   	pop    eax
c001d1a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1ad:	50                   	push   eax
c001d1ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1b4:	e8 45 e7 ff ff       	call   c001b8fe <IDE::prepareInterrupt(unsigned char)>
c001d1b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d1bc:	e8 61 ff ff ff       	call   c001d122 <ATAPI::readyForCommand()>
c001d1c1:	83 c4 10             	add    esp,0x10
c001d1c4:	84 c0                	test   al,al
c001d1c6:	75 0a                	jne    c001d1d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d1c8:	bb 01 00 00 00       	mov    ebx,0x1
c001d1cd:	e9 60 02 00 00       	jmp    c001d432 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d1d2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d1d8:	c1 e0 04             	shl    eax,0x4
c001d1db:	0f b6 c0             	movzx  eax,al
c001d1de:	50                   	push   eax
c001d1df:	6a 06                	push   0x6
c001d1e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1e8:	50                   	push   eax
c001d1e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1ef:	e8 30 e7 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1f4:	6a 00                	push   0x0
c001d1f6:	6a 01                	push   0x1
c001d1f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1ff:	50                   	push   eax
c001d200:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d206:	e8 19 e7 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d20b:	83 c4 20             	add    esp,0x20
c001d20e:	0f b6 c3             	movzx  eax,bl
c001d211:	0f b6 df             	movzx  ebx,bh
c001d214:	50                   	push   eax
c001d215:	6a 04                	push   0x4
c001d217:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d21e:	50                   	push   eax
c001d21f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d225:	e8 fa e6 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d22a:	53                   	push   ebx
c001d22b:	6a 05                	push   0x5
c001d22d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d234:	50                   	push   eax
c001d235:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d23b:	e8 e4 e6 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d240:	83 c4 20             	add    esp,0x20
c001d243:	68 a0 00 00 00       	push   0xa0
c001d248:	6a 07                	push   0x7
c001d24a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d251:	50                   	push   eax
c001d252:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d258:	e8 c7 e6 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d25d:	83 c4 0c             	add    esp,0xc
c001d260:	6a 01                	push   0x1
c001d262:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d269:	50                   	push   eax
c001d26a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d270:	e8 97 f1 ff ff       	call   c001c40c <IDE::polling(unsigned char, unsigned int)>
c001d275:	83 c4 10             	add    esp,0x10
c001d278:	0f b6 d8             	movzx  ebx,al
c001d27b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d281:	85 db                	test   ebx,ebx
c001d283:	74 20                	je     c001d2a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d285:	53                   	push   ebx
c001d286:	0f b6 c0             	movzx  eax,al
c001d289:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d290:	52                   	push   edx
c001d291:	50                   	push   eax
c001d292:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d298:	e8 b5 f0 ff ff       	call   c001c352 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d29d:	83 c4 10             	add    esp,0x10
c001d2a0:	e9 8d 01 00 00       	jmp    c001d432 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d2a5:	0f b6 c0             	movzx  eax,al
c001d2a8:	53                   	push   ebx
c001d2a9:	53                   	push   ebx
c001d2aa:	50                   	push   eax
c001d2ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b1:	e8 5c e6 ff ff       	call   c001b912 <IDE::getBase(unsigned char)>
c001d2b6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d2ba:	b9 06 00 00 00       	mov    ecx,0x6
c001d2bf:	89 c2                	mov    edx,eax
c001d2c1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d2c4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d2c8:	83 c4 10             	add    esp,0x10
c001d2cb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d2d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d2d4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d2da:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d2e1:	85 db                	test   ebx,ebx
c001d2e3:	0f 84 ec 00 00 00    	je     c001d3d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d2e9:	51                   	push   ecx
c001d2ea:	51                   	push   ecx
c001d2eb:	52                   	push   edx
c001d2ec:	50                   	push   eax
c001d2ed:	e8 a0 e7 ff ff       	call   c001ba92 <IDE::waitInterrupt(unsigned char)>
c001d2f2:	83 c4 10             	add    esp,0x10
c001d2f5:	84 c0                	test   al,al
c001d2f7:	0f 84 cb fe ff ff    	je     c001d1c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d2fd:	56                   	push   esi
c001d2fe:	56                   	push   esi
c001d2ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d306:	50                   	push   eax
c001d307:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d30d:	e8 ec e5 ff ff       	call   c001b8fe <IDE::prepareInterrupt(unsigned char)>
c001d312:	83 c4 0c             	add    esp,0xc
c001d315:	6a 04                	push   0x4
c001d317:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d31e:	50                   	push   eax
c001d31f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d325:	e8 ba e6 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001d32a:	83 c4 0c             	add    esp,0xc
c001d32d:	89 c6                	mov    esi,eax
c001d32f:	6a 05                	push   0x5
c001d331:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d338:	50                   	push   eax
c001d339:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d33f:	e8 a0 e6 ff ff       	call   c001b9e4 <IDE::read(unsigned char, unsigned char)>
c001d344:	89 f1                	mov    ecx,esi
c001d346:	0f b6 c0             	movzx  eax,al
c001d349:	0f b6 f1             	movzx  esi,cl
c001d34c:	c1 e0 08             	shl    eax,0x8
c001d34f:	09 c6                	or     esi,eax
c001d351:	d1 fe                	sar    esi,1
c001d353:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d357:	83 c4 10             	add    esp,0x10
c001d35a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d35f:	74 41                	je     c001d3a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d361:	31 c9                	xor    ecx,ecx
c001d363:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d369:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d370:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d374:	75 0a                	jne    c001d380 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d376:	01 c9                	add    ecx,ecx
c001d378:	01 cd                	add    ebp,ecx
c001d37a:	4b                   	dec    ebx
c001d37b:	e9 54 ff ff ff       	jmp    c001d2d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d380:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d385:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d389:	51                   	push   ecx
c001d38a:	51                   	push   ecx
c001d38b:	52                   	push   edx
c001d38c:	50                   	push   eax
c001d38d:	e8 80 e5 ff ff       	call   c001b912 <IDE::getBase(unsigned char)>
c001d392:	89 c2                	mov    edx,eax
c001d394:	89 f0                	mov    eax,esi
c001d396:	66 ef                	out    dx,ax
c001d398:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d39c:	83 c4 10             	add    esp,0x10
c001d39f:	41                   	inc    ecx
c001d3a0:	eb c1                	jmp    c001d363 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d3a2:	31 f6                	xor    esi,esi
c001d3a4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d3aa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d3b1:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d3b5:	75 06                	jne    c001d3bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d3b7:	01 f6                	add    esi,esi
c001d3b9:	01 f5                	add    ebp,esi
c001d3bb:	eb bd                	jmp    c001d37a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d3bd:	51                   	push   ecx
c001d3be:	51                   	push   ecx
c001d3bf:	52                   	push   edx
c001d3c0:	50                   	push   eax
c001d3c1:	e8 4c e5 ff ff       	call   c001b912 <IDE::getBase(unsigned char)>
c001d3c6:	89 c2                	mov    edx,eax
c001d3c8:	66 ed                	in     ax,dx
c001d3ca:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d3cf:	83 c4 10             	add    esp,0x10
c001d3d2:	46                   	inc    esi
c001d3d3:	eb cf                	jmp    c001d3a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d3d5:	51                   	push   ecx
c001d3d6:	51                   	push   ecx
c001d3d7:	52                   	push   edx
c001d3d8:	50                   	push   eax
c001d3d9:	e8 b4 e6 ff ff       	call   c001ba92 <IDE::waitInterrupt(unsigned char)>
c001d3de:	83 c4 10             	add    esp,0x10
c001d3e1:	84 c0                	test   al,al
c001d3e3:	0f 84 df fd ff ff    	je     c001d1c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d3e9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d3ee:	52                   	push   edx
c001d3ef:	52                   	push   edx
c001d3f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3f7:	50                   	push   eax
c001d3f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3fe:	e8 fb e4 ff ff       	call   c001b8fe <IDE::prepareInterrupt(unsigned char)>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	50                   	push   eax
c001d407:	50                   	push   eax
c001d408:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d40f:	50                   	push   eax
c001d410:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d416:	e8 f7 e4 ff ff       	call   c001b912 <IDE::getBase(unsigned char)>
c001d41b:	8d 50 07             	lea    edx,[eax+0x7]
c001d41e:	ec                   	in     al,dx
c001d41f:	83 c4 10             	add    esp,0x10
c001d422:	a8 88                	test   al,0x88
c001d424:	74 0a                	je     c001d430 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d426:	4b                   	dec    ebx
c001d427:	75 dd                	jne    c001d406 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d429:	bb 02 00 00 00       	mov    ebx,0x2
c001d42e:	eb 02                	jmp    c001d432 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d430:	31 db                	xor    ebx,ebx
c001d432:	83 c4 1c             	add    esp,0x1c
c001d435:	89 d8                	mov    eax,ebx
c001d437:	5b                   	pop    ebx
c001d438:	5e                   	pop    esi
c001d439:	5f                   	pop    edi
c001d43a:	5d                   	pop    ebp
c001d43b:	c3                   	ret    

c001d43c <ATAPI::diskRemoved()>:
c001d43c:	53                   	push   ebx
c001d43d:	83 ec 14             	sub    esp,0x14
c001d440:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d444:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d44b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d451:	e8 7c 06 ff ff       	call   c000dad2 <LogicalDisk::unmount()>
c001d456:	58                   	pop    eax
c001d457:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d45d:	e8 52 10 ff ff       	call   c000e4b4 <VCache::writeWriteBuffer()>
c001d462:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d468:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d46c:	83 c4 18             	add    esp,0x18
c001d46f:	5b                   	pop    ebx
c001d470:	e9 2f 10 ff ff       	jmp    c000e4a4 <VCache::invalidateReadBuffer()>
c001d475:	90                   	nop

c001d476 <ATAPI::eject()>:
c001d476:	57                   	push   edi
c001d477:	b9 03 00 00 00       	mov    ecx,0x3
c001d47c:	53                   	push   ebx
c001d47d:	83 ec 14             	sub    esp,0x14
c001d480:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d484:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d488:	fc                   	cld    
c001d489:	31 c0                	xor    eax,eax
c001d48b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d48d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d492:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d497:	50                   	push   eax
c001d498:	50                   	push   eax
c001d499:	6a 00                	push   0x0
c001d49b:	6a 00                	push   0x0
c001d49d:	6a 00                	push   0x0
c001d49f:	6a 02                	push   0x2
c001d4a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4a5:	50                   	push   eax
c001d4a6:	53                   	push   ebx
c001d4a7:	e8 c8 fc ff ff       	call   c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4ac:	83 c4 14             	add    esp,0x14
c001d4af:	53                   	push   ebx
c001d4b0:	e8 87 ff ff ff       	call   c001d43c <ATAPI::diskRemoved()>
c001d4b5:	83 c4 24             	add    esp,0x24
c001d4b8:	31 c0                	xor    eax,eax
c001d4ba:	5b                   	pop    ebx
c001d4bb:	5f                   	pop    edi
c001d4bc:	c3                   	ret    
c001d4bd:	90                   	nop

c001d4be <ATAPI::diskInserted()>:
c001d4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4c2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d4c9:	c3                   	ret    

c001d4ca <ATAPI::detectMedia()>:
c001d4ca:	56                   	push   esi
c001d4cb:	53                   	push   ebx
c001d4cc:	83 ec 28             	sub    esp,0x28
c001d4cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d4d3:	6a 0c                	push   0xc
c001d4d5:	6a 00                	push   0x0
c001d4d7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d4db:	56                   	push   esi
c001d4dc:	e8 0f 30 fe ff       	call   c00004f0 <memset>
c001d4e1:	58                   	pop    eax
c001d4e2:	5a                   	pop    edx
c001d4e3:	6a 00                	push   0x0
c001d4e5:	6a 00                	push   0x0
c001d4e7:	6a 00                	push   0x0
c001d4e9:	6a 00                	push   0x0
c001d4eb:	56                   	push   esi
c001d4ec:	53                   	push   ebx
c001d4ed:	e8 82 fc ff ff       	call   c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4f2:	83 c4 1c             	add    esp,0x1c
c001d4f5:	6a 0c                	push   0xc
c001d4f7:	6a 00                	push   0x0
c001d4f9:	56                   	push   esi
c001d4fa:	e8 f1 2f fe ff       	call   c00004f0 <memset>
c001d4ff:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d504:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d509:	59                   	pop    ecx
c001d50a:	58                   	pop    eax
c001d50b:	6a 01                	push   0x1
c001d50d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d511:	50                   	push   eax
c001d512:	6a 00                	push   0x0
c001d514:	6a 12                	push   0x12
c001d516:	56                   	push   esi
c001d517:	53                   	push   ebx
c001d518:	e8 57 fc ff ff       	call   c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d51d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d521:	83 c4 20             	add    esp,0x20
c001d524:	83 e0 7f             	and    eax,0x7f
c001d527:	83 f8 70             	cmp    eax,0x70
c001d52a:	74 15                	je     c001d541 <ATAPI::detectMedia()+0x77>
c001d52c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d533:	75 0c                	jne    c001d541 <ATAPI::detectMedia()+0x77>
c001d535:	83 ec 0c             	sub    esp,0xc
c001d538:	53                   	push   ebx
c001d539:	e8 80 ff ff ff       	call   c001d4be <ATAPI::diskInserted()>
c001d53e:	83 c4 10             	add    esp,0x10
c001d541:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d545:	83 e0 0f             	and    eax,0xf
c001d548:	83 f8 02             	cmp    eax,0x2
c001d54b:	75 1b                	jne    c001d568 <ATAPI::detectMedia()+0x9e>
c001d54d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d552:	75 2d                	jne    c001d581 <ATAPI::detectMedia()+0xb7>
c001d554:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d55b:	74 24                	je     c001d581 <ATAPI::detectMedia()+0xb7>
c001d55d:	83 ec 0c             	sub    esp,0xc
c001d560:	53                   	push   ebx
c001d561:	e8 d6 fe ff ff       	call   c001d43c <ATAPI::diskRemoved()>
c001d566:	eb 16                	jmp    c001d57e <ATAPI::detectMedia()+0xb4>
c001d568:	85 c0                	test   eax,eax
c001d56a:	75 15                	jne    c001d581 <ATAPI::detectMedia()+0xb7>
c001d56c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d573:	75 0c                	jne    c001d581 <ATAPI::detectMedia()+0xb7>
c001d575:	83 ec 0c             	sub    esp,0xc
c001d578:	53                   	push   ebx
c001d579:	e8 40 ff ff ff       	call   c001d4be <ATAPI::diskInserted()>
c001d57e:	83 c4 10             	add    esp,0x10
c001d581:	83 c4 24             	add    esp,0x24
c001d584:	5b                   	pop    ebx
c001d585:	5e                   	pop    esi
c001d586:	c3                   	ret    
c001d587:	90                   	nop

c001d588 <ATAPI::open(int, int, void*)>:
c001d588:	56                   	push   esi
c001d589:	53                   	push   ebx
c001d58a:	50                   	push   eax
c001d58b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d58f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d597:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d59d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d5a3:	c1 e0 06             	shl    eax,0x6
c001d5a6:	01 d0                	add    eax,edx
c001d5a8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d5af:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d5b5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d5bc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5c6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5cc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5d3:	6a 04                	push   0x4
c001d5d5:	6a 0c                	push   0xc
c001d5d7:	51                   	push   ecx
c001d5d8:	52                   	push   edx
c001d5d9:	e8 46 e3 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5de:	90                   	nop
c001d5df:	90                   	nop
c001d5e0:	6a 00                	push   0x0
c001d5e2:	6a 0c                	push   0xc
c001d5e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5eb:	50                   	push   eax
c001d5ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5f2:	e8 2d e3 ff ff       	call   c001b924 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5f7:	83 c4 14             	add    esp,0x14
c001d5fa:	68 78 01 00 00       	push   0x178
c001d5ff:	e8 b2 a4 fe ff       	call   c0007ab6 <malloc>
c001d604:	83 c4 0c             	add    esp,0xc
c001d607:	89 c6                	mov    esi,eax
c001d609:	6a 00                	push   0x0
c001d60b:	68 ff ff ff 7f       	push   0x7fffffff
c001d610:	6a 00                	push   0x0
c001d612:	6a 00                	push   0x0
c001d614:	53                   	push   ebx
c001d615:	68 cf 2f 02 c0       	push   0xc0022fcf
c001d61a:	50                   	push   eax
c001d61b:	e8 f0 02 ff ff       	call   c000d910 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d620:	83 c4 14             	add    esp,0x14
c001d623:	56                   	push   esi
c001d624:	e8 a7 03 ff ff       	call   c000d9d0 <LogicalDisk::assignDriveLetter()>
c001d629:	5a                   	pop    edx
c001d62a:	0f be c0             	movsx  eax,al
c001d62d:	59                   	pop    ecx
c001d62e:	50                   	push   eax
c001d62f:	68 20 2e 02 c0       	push   0xc0022e20
c001d634:	e8 0c d3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d639:	58                   	pop    eax
c001d63a:	5a                   	pop    edx
c001d63b:	56                   	push   esi
c001d63c:	53                   	push   ebx
c001d63d:	e8 28 f1 fe ff       	call   c000c76a <Device::addChild(Device*)>
c001d642:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d648:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d64b:	e8 4e f5 fe ff       	call   c000cb9e <PhysicalDisk::startCache()>
c001d650:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d657:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d65a:	e8 6b fe ff ff       	call   c001d4ca <ATAPI::detectMedia()>
c001d65f:	83 c4 14             	add    esp,0x14
c001d662:	31 c0                	xor    eax,eax
c001d664:	5b                   	pop    ebx
c001d665:	5e                   	pop    esi
c001d666:	c3                   	ret    
c001d667:	90                   	nop

c001d668 <ATAPI::read(unsigned long long, int, void*)>:
c001d668:	55                   	push   ebp
c001d669:	57                   	push   edi
c001d66a:	56                   	push   esi
c001d66b:	53                   	push   ebx
c001d66c:	83 ec 1c             	sub    esp,0x1c
c001d66f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d673:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d677:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d67b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d682:	74 3c                	je     c001d6c0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d684:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d688:	b9 03 00 00 00       	mov    ecx,0x3
c001d68d:	fc                   	cld    
c001d68e:	31 c0                	xor    eax,eax
c001d690:	0f ce                	bswap  esi
c001d692:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d694:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d699:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d69d:	89 e8                	mov    eax,ebp
c001d69f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d6a3:	50                   	push   eax
c001d6a4:	50                   	push   eax
c001d6a5:	55                   	push   ebp
c001d6a6:	c1 e5 0b             	shl    ebp,0xb
c001d6a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6ad:	6a 00                	push   0x0
c001d6af:	55                   	push   ebp
c001d6b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d6b4:	50                   	push   eax
c001d6b5:	53                   	push   ebx
c001d6b6:	e8 b9 fa ff ff       	call   c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d6bb:	83 c4 20             	add    esp,0x20
c001d6be:	eb 1a                	jmp    c001d6da <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d6c0:	83 ec 0c             	sub    esp,0xc
c001d6c3:	53                   	push   ebx
c001d6c4:	e8 01 fe ff ff       	call   c001d4ca <ATAPI::detectMedia()>
c001d6c9:	83 c4 10             	add    esp,0x10
c001d6cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6d3:	75 af                	jne    c001d684 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d6d5:	b8 02 00 00 00       	mov    eax,0x2
c001d6da:	83 c4 1c             	add    esp,0x1c
c001d6dd:	5b                   	pop    ebx
c001d6de:	5e                   	pop    esi
c001d6df:	5f                   	pop    edi
c001d6e0:	5d                   	pop    ebp
c001d6e1:	c3                   	ret    

c001d6e2 <SATA::close(int, int, void*)>:
c001d6e2:	83 ec 0c             	sub    esp,0xc
c001d6e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d6ef:	85 c0                	test   eax,eax
c001d6f1:	74 0c                	je     c001d6ff <SATA::close(int, int, void*)+0x1d>
c001d6f3:	83 ec 0c             	sub    esp,0xc
c001d6f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001d6f8:	50                   	push   eax
c001d6f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d6fc:	83 c4 10             	add    esp,0x10
c001d6ff:	31 c0                	xor    eax,eax
c001d701:	83 c4 0c             	add    esp,0xc
c001d704:	c3                   	ret    
c001d705:	90                   	nop

c001d706 <SATA::powerSaving(PowerSavingLevel)>:
c001d706:	c3                   	ret    
c001d707:	90                   	nop

c001d708 <SATA::open(int, int, void*)>:
c001d708:	56                   	push   esi
c001d709:	53                   	push   ebx
c001d70a:	50                   	push   eax
c001d70b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d70f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d713:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d71d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d723:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d72d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d731:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d73b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d741:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d748:	e8 72 a6 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d74d:	89 c6                	mov    esi,eax
c001d74f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d755:	81 c6 00 10 00 00    	add    esi,0x1000
c001d75b:	e8 5f a6 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d760:	39 c6                	cmp    esi,eax
c001d762:	74 10                	je     c001d774 <SATA::open(int, int, void*)+0x6c>
c001d764:	83 ec 0c             	sub    esp,0xc
c001d767:	68 68 2e 02 c0       	push   0xc0022e68
c001d76c:	e8 28 3c ff ff       	call   c0011399 <KePanic(char const*)>
c001d771:	83 c4 10             	add    esp,0x10
c001d774:	83 ec 0c             	sub    esp,0xc
c001d777:	6a 02                	push   0x2
c001d779:	e8 8f be fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d77e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d784:	6a 03                	push   0x3
c001d786:	50                   	push   eax
c001d787:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d78d:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d793:	e8 88 c5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d798:	83 c4 14             	add    esp,0x14
c001d79b:	53                   	push   ebx
c001d79c:	e8 fd f3 fe ff       	call   c000cb9e <PhysicalDisk::startCache()>
c001d7a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7a4:	e8 39 06 ff ff       	call   c000dde2 <createPartitionsForDisk(PhysicalDisk*)>
c001d7a9:	83 c4 14             	add    esp,0x14
c001d7ac:	31 c0                	xor    eax,eax
c001d7ae:	5b                   	pop    ebx
c001d7af:	5e                   	pop    esi
c001d7b0:	c3                   	ret    
c001d7b1:	90                   	nop

c001d7b2 <SATA::SATA()>:
c001d7b2:	83 ec 0c             	sub    esp,0xc
c001d7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b9:	83 ec 04             	sub    esp,0x4
c001d7bc:	68 00 02 00 00       	push   0x200
c001d7c1:	68 7c 2e 02 c0       	push   0xc0022e7c
c001d7c6:	50                   	push   eax
c001d7c7:	e8 6a f3 fe ff       	call   c000cb36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d7cc:	83 c4 10             	add    esp,0x10
c001d7cf:	ba ec 2e 02 c0       	mov    edx,0xc0022eec
c001d7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d8:	89 10                	mov    DWORD PTR [eax],edx
c001d7da:	90                   	nop
c001d7db:	83 c4 0c             	add    esp,0xc
c001d7de:	c3                   	ret    
c001d7df:	90                   	nop

c001d7e0 <SATA::access(unsigned long long, int, void*, bool)>:
c001d7e0:	55                   	push   ebp
c001d7e1:	57                   	push   edi
c001d7e2:	56                   	push   esi
c001d7e3:	53                   	push   ebx
c001d7e4:	83 ec 2c             	sub    esp,0x2c
c001d7e7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d7eb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d7ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7f3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d7f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d7fb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d800:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d804:	7e 10                	jle    c001d816 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d806:	83 ec 0c             	sub    esp,0xc
c001d809:	68 8c 2e 02 c0       	push   0xc0022e8c
c001d80e:	e8 86 3b ff ff       	call   c0011399 <KePanic(char const*)>
c001d813:	83 c4 10             	add    esp,0x10
c001d816:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d81c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d822:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d82c:	89 d0                	mov    eax,edx
c001d82e:	c1 e0 07             	shl    eax,0x7
c001d831:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d835:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d83f:	51                   	push   ecx
c001d840:	8d 42 02             	lea    eax,[edx+0x2]
c001d843:	51                   	push   ecx
c001d844:	c1 e0 07             	shl    eax,0x7
c001d847:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d84b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d84f:	50                   	push   eax
c001d850:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d856:	e8 91 ec ff ff       	call   c001c4ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d85b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d85f:	83 c4 10             	add    esp,0x10
c001d862:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d867:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d86b:	0f 84 57 01 00 00    	je     c001d9c8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d871:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d875:	c1 e0 09             	shl    eax,0x9
c001d878:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d87d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d881:	74 0e                	je     c001d891 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d883:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d889:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d88d:	89 c1                	mov    ecx,eax
c001d88f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d891:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d897:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d89b:	8d 42 02             	lea    eax,[edx+0x2]
c001d89e:	c1 e0 07             	shl    eax,0x7
c001d8a1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d8a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8a7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d8ad:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d8b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8b7:	c1 e1 05             	shl    ecx,0x5
c001d8ba:	01 c8                	add    eax,ecx
c001d8bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d8c0:	83 e1 01             	and    ecx,0x1
c001d8c3:	89 ce                	mov    esi,ecx
c001d8c5:	8a 08                	mov    cl,BYTE PTR [eax]
c001d8c7:	c1 e6 06             	shl    esi,0x6
c001d8ca:	83 e1 bf             	and    ecx,0xffffffbf
c001d8cd:	09 f1                	or     ecx,esi
c001d8cf:	88 08                	mov    BYTE PTR [eax],cl
c001d8d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8d3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d8d9:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d8df:	89 08                	mov    DWORD PTR [eax],ecx
c001d8e1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d8e7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d8ed:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d8f3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d8f6:	50                   	push   eax
c001d8f7:	68 90 00 00 00       	push   0x90
c001d8fc:	6a 00                	push   0x0
c001d8fe:	56                   	push   esi
c001d8ff:	e8 ec 2b fe ff       	call   c00004f0 <memset>
c001d904:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d90a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d910:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d914:	83 c4 10             	add    esp,0x10
c001d917:	48                   	dec    eax
c001d918:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d91d:	89 c1                	mov    ecx,eax
c001d91f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d925:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d92a:	09 c8                	or     eax,ecx
c001d92c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d932:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d938:	83 c8 80             	or     eax,0xffffff80
c001d93b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d941:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d944:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d948:	25 00 7f 00 00       	and    eax,0x7f00
c001d94d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d952:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d957:	66 89 06             	mov    WORD PTR [esi],ax
c001d95a:	b0 35                	mov    al,0x35
c001d95c:	75 02                	jne    c001d960 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d95e:	b0 25                	mov    al,0x25
c001d960:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d963:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d967:	89 e8                	mov    eax,ebp
c001d969:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d96d:	c1 e8 10             	shr    eax,0x10
c001d970:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d973:	89 e8                	mov    eax,ebp
c001d975:	c1 e8 18             	shr    eax,0x18
c001d978:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d97b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d97f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d982:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d986:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d989:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d98d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d991:	89 d6                	mov    esi,edx
c001d993:	31 c0                	xor    eax,eax
c001d995:	c1 e6 07             	shl    esi,0x7
c001d998:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d99c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d9a2:	80 e1 88             	and    cl,0x88
c001d9a5:	74 0a                	je     c001d9b1 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d9a7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d9ac:	74 0a                	je     c001d9b8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d9ae:	40                   	inc    eax
c001d9af:	eb eb                	jmp    c001d99c <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d9b1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d9b6:	75 17                	jne    c001d9cf <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d9b8:	83 ec 0c             	sub    esp,0xc
c001d9bb:	68 c5 2e 02 c0       	push   0xc0022ec5
c001d9c0:	e8 80 cf fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d9c5:	83 c4 10             	add    esp,0x10
c001d9c8:	b8 01 00 00 00       	mov    eax,0x1
c001d9cd:	eb 5d                	jmp    c001da2c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d9cf:	b8 01 00 00 00       	mov    eax,0x1
c001d9d4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d9d8:	c1 e2 07             	shl    edx,0x7
c001d9db:	d3 e0                	shl    eax,cl
c001d9dd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d9e1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d9e7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d9ed:	85 c8                	test   eax,ecx
c001d9ef:	74 16                	je     c001da07 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d9f1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d9f7:	0f ba e1 1e          	bt     ecx,0x1e
c001d9fb:	73 ea                	jae    c001d9e7 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d9fd:	83 ec 0c             	sub    esp,0xc
c001da00:	68 d3 2e 02 c0       	push   0xc0022ed3
c001da05:	eb b9                	jmp    c001d9c0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001da07:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001da0d:	0f ba e0 1e          	bt     eax,0x1e
c001da11:	72 b5                	jb     c001d9c8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001da13:	31 c0                	xor    eax,eax
c001da15:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001da1a:	75 10                	jne    c001da2c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001da1c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001da22:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001da26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001da2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001da2c:	83 c4 2c             	add    esp,0x2c
c001da2f:	5b                   	pop    ebx
c001da30:	5e                   	pop    esi
c001da31:	5f                   	pop    edi
c001da32:	5d                   	pop    ebp
c001da33:	c3                   	ret    

c001da34 <SATA::read(unsigned long long, int, void*)>:
c001da34:	55                   	push   ebp
c001da35:	57                   	push   edi
c001da36:	56                   	push   esi
c001da37:	be 04 00 00 00       	mov    esi,0x4
c001da3c:	53                   	push   ebx
c001da3d:	83 ec 0c             	sub    esp,0xc
c001da40:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001da44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da48:	8d 7b ff             	lea    edi,[ebx-0x1]
c001da4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da4f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001da53:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001da59:	0f 87 1a 02 00 00    	ja     c001dc79 <SATA::read(unsigned long long, int, void*)+0x245>
c001da5f:	be 06 00 00 00       	mov    esi,0x6
c001da64:	85 c9                	test   ecx,ecx
c001da66:	0f 84 0d 02 00 00    	je     c001dc79 <SATA::read(unsigned long long, int, void*)+0x245>
c001da6c:	56                   	push   esi
c001da6d:	56                   	push   esi
c001da6e:	6a 00                	push   0x0
c001da70:	51                   	push   ecx
c001da71:	53                   	push   ebx
c001da72:	52                   	push   edx
c001da73:	50                   	push   eax
c001da74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da78:	e8 63 fd ff ff       	call   c001d7e0 <SATA::access(unsigned long long, int, void*, bool)>
c001da7d:	83 c4 20             	add    esp,0x20
c001da80:	89 c6                	mov    esi,eax
c001da82:	85 c0                	test   eax,eax
c001da84:	0f 85 ea 01 00 00    	jne    c001dc74 <SATA::read(unsigned long long, int, void*)+0x240>
c001da8a:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001da90:	bb 0a 00 00 00       	mov    ebx,0xa
c001da95:	50                   	push   eax
c001da96:	50                   	push   eax
c001da97:	6a 0f                	push   0xf
c001da99:	6a 00                	push   0x0
c001da9b:	e8 75 f2 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001daa0:	5a                   	pop    edx
c001daa1:	0f b6 c0             	movzx  eax,al
c001daa4:	59                   	pop    ecx
c001daa5:	b9 10 27 00 00       	mov    ecx,0x2710
c001daaa:	50                   	push   eax
c001daab:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dab0:	99                   	cdq    
c001dab1:	f7 f9                	idiv   ecx
c001dab3:	99                   	cdq    
c001dab4:	f7 fb                	idiv   ebx
c001dab6:	8d 42 30             	lea    eax,[edx+0x30]
c001dab9:	0f b6 c0             	movzx  eax,al
c001dabc:	50                   	push   eax
c001dabd:	e8 42 f2 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dac2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dac8:	5f                   	pop    edi
c001dac9:	5d                   	pop    ebp
c001daca:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dacf:	6a 0f                	push   0xf
c001dad1:	6a 00                	push   0x0
c001dad3:	e8 3d f2 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dad8:	5a                   	pop    edx
c001dad9:	0f b6 c0             	movzx  eax,al
c001dadc:	59                   	pop    ecx
c001dadd:	50                   	push   eax
c001dade:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dae3:	99                   	cdq    
c001dae4:	f7 fd                	idiv   ebp
c001dae6:	99                   	cdq    
c001dae7:	f7 fb                	idiv   ebx
c001dae9:	8d 42 30             	lea    eax,[edx+0x30]
c001daec:	0f b6 c0             	movzx  eax,al
c001daef:	50                   	push   eax
c001daf0:	e8 0f f2 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001daf5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dafb:	5f                   	pop    edi
c001dafc:	bf 64 00 00 00       	mov    edi,0x64
c001db01:	58                   	pop    eax
c001db02:	6a 0f                	push   0xf
c001db04:	6a 00                	push   0x0
c001db06:	e8 0a f2 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001db0b:	5a                   	pop    edx
c001db0c:	0f b6 c0             	movzx  eax,al
c001db0f:	59                   	pop    ecx
c001db10:	50                   	push   eax
c001db11:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db16:	99                   	cdq    
c001db17:	f7 ff                	idiv   edi
c001db19:	99                   	cdq    
c001db1a:	f7 fb                	idiv   ebx
c001db1c:	8d 42 30             	lea    eax,[edx+0x30]
c001db1f:	0f b6 c0             	movzx  eax,al
c001db22:	50                   	push   eax
c001db23:	e8 dc f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001db28:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001db2e:	58                   	pop    eax
c001db2f:	5a                   	pop    edx
c001db30:	6a 0f                	push   0xf
c001db32:	6a 00                	push   0x0
c001db34:	e8 dc f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001db39:	59                   	pop    ecx
c001db3a:	0f b6 c0             	movzx  eax,al
c001db3d:	5a                   	pop    edx
c001db3e:	50                   	push   eax
c001db3f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db44:	99                   	cdq    
c001db45:	f7 fb                	idiv   ebx
c001db47:	99                   	cdq    
c001db48:	f7 fb                	idiv   ebx
c001db4a:	8d 42 30             	lea    eax,[edx+0x30]
c001db4d:	0f b6 c0             	movzx  eax,al
c001db50:	50                   	push   eax
c001db51:	e8 ae f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001db56:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001db5c:	59                   	pop    ecx
c001db5d:	58                   	pop    eax
c001db5e:	6a 0f                	push   0xf
c001db60:	6a 00                	push   0x0
c001db62:	e8 ae f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001db67:	5a                   	pop    edx
c001db68:	0f b6 c0             	movzx  eax,al
c001db6b:	59                   	pop    ecx
c001db6c:	50                   	push   eax
c001db6d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db72:	99                   	cdq    
c001db73:	f7 fb                	idiv   ebx
c001db75:	8d 42 30             	lea    eax,[edx+0x30]
c001db78:	0f b6 c0             	movzx  eax,al
c001db7b:	50                   	push   eax
c001db7c:	e8 83 f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001db81:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001db87:	58                   	pop    eax
c001db88:	5a                   	pop    edx
c001db89:	6a 0f                	push   0xf
c001db8b:	6a 00                	push   0x0
c001db8d:	e8 83 f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001db92:	59                   	pop    ecx
c001db93:	0f b6 c0             	movzx  eax,al
c001db96:	5a                   	pop    edx
c001db97:	b9 10 27 00 00       	mov    ecx,0x2710
c001db9c:	50                   	push   eax
c001db9d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dba2:	99                   	cdq    
c001dba3:	f7 f9                	idiv   ecx
c001dba5:	99                   	cdq    
c001dba6:	f7 fb                	idiv   ebx
c001dba8:	8d 42 30             	lea    eax,[edx+0x30]
c001dbab:	0f b6 c0             	movzx  eax,al
c001dbae:	50                   	push   eax
c001dbaf:	e8 50 f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dbb4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dbba:	59                   	pop    ecx
c001dbbb:	58                   	pop    eax
c001dbbc:	6a 0f                	push   0xf
c001dbbe:	6a 00                	push   0x0
c001dbc0:	e8 50 f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dbc5:	5a                   	pop    edx
c001dbc6:	0f b6 c0             	movzx  eax,al
c001dbc9:	59                   	pop    ecx
c001dbca:	50                   	push   eax
c001dbcb:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbd0:	99                   	cdq    
c001dbd1:	f7 fd                	idiv   ebp
c001dbd3:	99                   	cdq    
c001dbd4:	f7 fb                	idiv   ebx
c001dbd6:	8d 42 30             	lea    eax,[edx+0x30]
c001dbd9:	0f b6 c0             	movzx  eax,al
c001dbdc:	50                   	push   eax
c001dbdd:	e8 22 f1 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dbe2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dbe8:	5d                   	pop    ebp
c001dbe9:	58                   	pop    eax
c001dbea:	6a 0f                	push   0xf
c001dbec:	6a 00                	push   0x0
c001dbee:	e8 22 f1 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dbf3:	5a                   	pop    edx
c001dbf4:	0f b6 c0             	movzx  eax,al
c001dbf7:	59                   	pop    ecx
c001dbf8:	50                   	push   eax
c001dbf9:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbfe:	99                   	cdq    
c001dbff:	f7 ff                	idiv   edi
c001dc01:	99                   	cdq    
c001dc02:	f7 fb                	idiv   ebx
c001dc04:	8d 42 30             	lea    eax,[edx+0x30]
c001dc07:	0f b6 c0             	movzx  eax,al
c001dc0a:	50                   	push   eax
c001dc0b:	e8 f4 f0 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dc10:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dc16:	5f                   	pop    edi
c001dc17:	5d                   	pop    ebp
c001dc18:	6a 0f                	push   0xf
c001dc1a:	6a 00                	push   0x0
c001dc1c:	e8 f4 f0 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dc21:	5a                   	pop    edx
c001dc22:	0f b6 c0             	movzx  eax,al
c001dc25:	59                   	pop    ecx
c001dc26:	50                   	push   eax
c001dc27:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc2c:	99                   	cdq    
c001dc2d:	f7 fb                	idiv   ebx
c001dc2f:	99                   	cdq    
c001dc30:	f7 fb                	idiv   ebx
c001dc32:	8d 42 30             	lea    eax,[edx+0x30]
c001dc35:	0f b6 c0             	movzx  eax,al
c001dc38:	50                   	push   eax
c001dc39:	e8 c6 f0 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dc3e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dc44:	5f                   	pop    edi
c001dc45:	5d                   	pop    ebp
c001dc46:	6a 0f                	push   0xf
c001dc48:	6a 00                	push   0x0
c001dc4a:	e8 c6 f0 ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dc4f:	5a                   	pop    edx
c001dc50:	0f b6 c0             	movzx  eax,al
c001dc53:	59                   	pop    ecx
c001dc54:	50                   	push   eax
c001dc55:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc5a:	99                   	cdq    
c001dc5b:	f7 fb                	idiv   ebx
c001dc5d:	83 c2 30             	add    edx,0x30
c001dc60:	0f b6 d2             	movzx  edx,dl
c001dc63:	52                   	push   edx
c001dc64:	e8 9b f0 ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dc69:	83 c4 10             	add    esp,0x10
c001dc6c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dc72:	eb 05                	jmp    c001dc79 <SATA::read(unsigned long long, int, void*)+0x245>
c001dc74:	be 01 00 00 00       	mov    esi,0x1
c001dc79:	83 c4 0c             	add    esp,0xc
c001dc7c:	89 f0                	mov    eax,esi
c001dc7e:	5b                   	pop    ebx
c001dc7f:	5e                   	pop    esi
c001dc80:	5f                   	pop    edi
c001dc81:	5d                   	pop    ebp
c001dc82:	c3                   	ret    
c001dc83:	90                   	nop

c001dc84 <SATA::write(unsigned long long, int, void*)>:
c001dc84:	55                   	push   ebp
c001dc85:	b8 04 00 00 00       	mov    eax,0x4
c001dc8a:	57                   	push   edi
c001dc8b:	56                   	push   esi
c001dc8c:	53                   	push   ebx
c001dc8d:	83 ec 1c             	sub    esp,0x1c
c001dc90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dc94:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dc98:	8d 75 ff             	lea    esi,[ebp-0x1]
c001dc9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dc9f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001dca3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dca9:	0f 87 32 02 00 00    	ja     c001dee1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dcaf:	b8 06 00 00 00       	mov    eax,0x6
c001dcb4:	85 ff                	test   edi,edi
c001dcb6:	0f 84 25 02 00 00    	je     c001dee1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dcbc:	89 ee                	mov    esi,ebp
c001dcbe:	c1 e6 09             	shl    esi,0x9
c001dcc1:	01 fe                	add    esi,edi
c001dcc3:	89 c8                	mov    eax,ecx
c001dcc5:	89 da                	mov    edx,ebx
c001dcc7:	83 c0 01             	add    eax,0x1
c001dcca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcce:	83 d2 00             	adc    edx,0x0
c001dcd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dcd5:	50                   	push   eax
c001dcd6:	50                   	push   eax
c001dcd7:	6a 01                	push   0x1
c001dcd9:	57                   	push   edi
c001dcda:	81 c7 00 02 00 00    	add    edi,0x200
c001dce0:	6a 01                	push   0x1
c001dce2:	53                   	push   ebx
c001dce3:	51                   	push   ecx
c001dce4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dce8:	e8 f3 fa ff ff       	call   c001d7e0 <SATA::access(unsigned long long, int, void*, bool)>
c001dced:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dcf1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dcf5:	83 c4 20             	add    esp,0x20
c001dcf8:	39 f7                	cmp    edi,esi
c001dcfa:	75 c7                	jne    c001dcc3 <SATA::write(unsigned long long, int, void*)+0x3f>
c001dcfc:	bb 0a 00 00 00       	mov    ebx,0xa
c001dd01:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001dd07:	bd 10 27 00 00       	mov    ebp,0x2710
c001dd0c:	50                   	push   eax
c001dd0d:	50                   	push   eax
c001dd0e:	6a 0f                	push   0xf
c001dd10:	6a 00                	push   0x0
c001dd12:	e8 fe ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dd17:	5a                   	pop    edx
c001dd18:	0f b6 c0             	movzx  eax,al
c001dd1b:	59                   	pop    ecx
c001dd1c:	50                   	push   eax
c001dd1d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd22:	99                   	cdq    
c001dd23:	f7 fd                	idiv   ebp
c001dd25:	99                   	cdq    
c001dd26:	f7 fb                	idiv   ebx
c001dd28:	8d 42 30             	lea    eax,[edx+0x30]
c001dd2b:	0f b6 c0             	movzx  eax,al
c001dd2e:	50                   	push   eax
c001dd2f:	e8 d0 ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dd34:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dd3a:	5e                   	pop    esi
c001dd3b:	5f                   	pop    edi
c001dd3c:	bf e8 03 00 00       	mov    edi,0x3e8
c001dd41:	6a 0f                	push   0xf
c001dd43:	6a 00                	push   0x0
c001dd45:	e8 cb ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dd4a:	5a                   	pop    edx
c001dd4b:	0f b6 c0             	movzx  eax,al
c001dd4e:	59                   	pop    ecx
c001dd4f:	50                   	push   eax
c001dd50:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd55:	99                   	cdq    
c001dd56:	f7 ff                	idiv   edi
c001dd58:	99                   	cdq    
c001dd59:	f7 fb                	idiv   ebx
c001dd5b:	8d 42 30             	lea    eax,[edx+0x30]
c001dd5e:	0f b6 c0             	movzx  eax,al
c001dd61:	50                   	push   eax
c001dd62:	e8 9d ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dd67:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dd6d:	5e                   	pop    esi
c001dd6e:	be 64 00 00 00       	mov    esi,0x64
c001dd73:	58                   	pop    eax
c001dd74:	6a 0f                	push   0xf
c001dd76:	6a 00                	push   0x0
c001dd78:	e8 98 ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001dd7d:	5a                   	pop    edx
c001dd7e:	0f b6 c0             	movzx  eax,al
c001dd81:	59                   	pop    ecx
c001dd82:	50                   	push   eax
c001dd83:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd88:	99                   	cdq    
c001dd89:	f7 fe                	idiv   esi
c001dd8b:	99                   	cdq    
c001dd8c:	f7 fb                	idiv   ebx
c001dd8e:	8d 42 30             	lea    eax,[edx+0x30]
c001dd91:	0f b6 c0             	movzx  eax,al
c001dd94:	50                   	push   eax
c001dd95:	e8 6a ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001dd9a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dda0:	58                   	pop    eax
c001dda1:	5a                   	pop    edx
c001dda2:	6a 0f                	push   0xf
c001dda4:	6a 00                	push   0x0
c001dda6:	e8 6a ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001ddab:	59                   	pop    ecx
c001ddac:	0f b6 c0             	movzx  eax,al
c001ddaf:	5a                   	pop    edx
c001ddb0:	50                   	push   eax
c001ddb1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddb6:	99                   	cdq    
c001ddb7:	f7 fb                	idiv   ebx
c001ddb9:	99                   	cdq    
c001ddba:	f7 fb                	idiv   ebx
c001ddbc:	8d 42 30             	lea    eax,[edx+0x30]
c001ddbf:	0f b6 c0             	movzx  eax,al
c001ddc2:	50                   	push   eax
c001ddc3:	e8 3c ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ddc8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ddce:	59                   	pop    ecx
c001ddcf:	58                   	pop    eax
c001ddd0:	6a 0f                	push   0xf
c001ddd2:	6a 00                	push   0x0
c001ddd4:	e8 3c ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001ddd9:	5a                   	pop    edx
c001ddda:	0f b6 c0             	movzx  eax,al
c001dddd:	59                   	pop    ecx
c001ddde:	50                   	push   eax
c001dddf:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dde4:	99                   	cdq    
c001dde5:	f7 fb                	idiv   ebx
c001dde7:	83 c2 30             	add    edx,0x30
c001ddea:	0f b6 d2             	movzx  edx,dl
c001dded:	52                   	push   edx
c001ddee:	e8 11 ef ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ddf3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ddf9:	58                   	pop    eax
c001ddfa:	5a                   	pop    edx
c001ddfb:	6a 0f                	push   0xf
c001ddfd:	6a 00                	push   0x0
c001ddff:	e8 11 ef ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001de04:	59                   	pop    ecx
c001de05:	0f b6 c0             	movzx  eax,al
c001de08:	5a                   	pop    edx
c001de09:	50                   	push   eax
c001de0a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de0f:	99                   	cdq    
c001de10:	f7 fd                	idiv   ebp
c001de12:	99                   	cdq    
c001de13:	f7 fb                	idiv   ebx
c001de15:	8d 42 30             	lea    eax,[edx+0x30]
c001de18:	0f b6 c0             	movzx  eax,al
c001de1b:	50                   	push   eax
c001de1c:	e8 e3 ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001de21:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001de27:	59                   	pop    ecx
c001de28:	5d                   	pop    ebp
c001de29:	6a 0f                	push   0xf
c001de2b:	6a 00                	push   0x0
c001de2d:	e8 e3 ee ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001de32:	5a                   	pop    edx
c001de33:	0f b6 c0             	movzx  eax,al
c001de36:	59                   	pop    ecx
c001de37:	50                   	push   eax
c001de38:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de3d:	99                   	cdq    
c001de3e:	f7 ff                	idiv   edi
c001de40:	99                   	cdq    
c001de41:	f7 fb                	idiv   ebx
c001de43:	8d 42 30             	lea    eax,[edx+0x30]
c001de46:	0f b6 c0             	movzx  eax,al
c001de49:	50                   	push   eax
c001de4a:	e8 b5 ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001de4f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001de55:	5f                   	pop    edi
c001de56:	5d                   	pop    ebp
c001de57:	6a 0f                	push   0xf
c001de59:	6a 00                	push   0x0
c001de5b:	e8 b5 ee ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001de60:	5a                   	pop    edx
c001de61:	0f b6 c0             	movzx  eax,al
c001de64:	59                   	pop    ecx
c001de65:	50                   	push   eax
c001de66:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de6b:	99                   	cdq    
c001de6c:	f7 fe                	idiv   esi
c001de6e:	99                   	cdq    
c001de6f:	f7 fb                	idiv   ebx
c001de71:	8d 42 30             	lea    eax,[edx+0x30]
c001de74:	0f b6 c0             	movzx  eax,al
c001de77:	50                   	push   eax
c001de78:	e8 87 ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001de7d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001de83:	5e                   	pop    esi
c001de84:	5f                   	pop    edi
c001de85:	6a 0f                	push   0xf
c001de87:	6a 00                	push   0x0
c001de89:	e8 87 ee ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001de8e:	5d                   	pop    ebp
c001de8f:	0f b6 c0             	movzx  eax,al
c001de92:	5a                   	pop    edx
c001de93:	50                   	push   eax
c001de94:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de99:	99                   	cdq    
c001de9a:	f7 fb                	idiv   ebx
c001de9c:	99                   	cdq    
c001de9d:	f7 fb                	idiv   ebx
c001de9f:	8d 42 30             	lea    eax,[edx+0x30]
c001dea2:	0f b6 c0             	movzx  eax,al
c001dea5:	50                   	push   eax
c001dea6:	e8 59 ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001deab:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001deb1:	59                   	pop    ecx
c001deb2:	5e                   	pop    esi
c001deb3:	6a 0f                	push   0xf
c001deb5:	6a 00                	push   0x0
c001deb7:	e8 59 ee ff ff       	call   c001cd15 <combineColours(unsigned char, unsigned char)>
c001debc:	5f                   	pop    edi
c001debd:	0f b6 c0             	movzx  eax,al
c001dec0:	5d                   	pop    ebp
c001dec1:	50                   	push   eax
c001dec2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dec7:	99                   	cdq    
c001dec8:	f7 fb                	idiv   ebx
c001deca:	83 c2 30             	add    edx,0x30
c001decd:	0f b6 d2             	movzx  edx,dl
c001ded0:	52                   	push   edx
c001ded1:	e8 2e ee ff ff       	call   c001cd04 <combineCharAndColour(char, unsigned char)>
c001ded6:	83 c4 10             	add    esp,0x10
c001ded9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dedf:	31 c0                	xor    eax,eax
c001dee1:	83 c4 1c             	add    esp,0x1c
c001dee4:	5b                   	pop    ebx
c001dee5:	5e                   	pop    esi
c001dee6:	5f                   	pop    edi
c001dee7:	5d                   	pop    ebp
c001dee8:	c3                   	ret    
c001dee9:	90                   	nop

c001deea <SATAPI::write(unsigned long long, int, void*)>:
c001deea:	b8 03 00 00 00       	mov    eax,0x3
c001deef:	c3                   	ret    

c001def0 <SATAPI::close(int, int, void*)>:
c001def0:	83 ec 0c             	sub    esp,0xc
c001def3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001defd:	85 c0                	test   eax,eax
c001deff:	74 0c                	je     c001df0d <SATAPI::close(int, int, void*)+0x1d>
c001df01:	83 ec 0c             	sub    esp,0xc
c001df04:	8b 10                	mov    edx,DWORD PTR [eax]
c001df06:	50                   	push   eax
c001df07:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001df0a:	83 c4 10             	add    esp,0x10
c001df0d:	31 c0                	xor    eax,eax
c001df0f:	83 c4 0c             	add    esp,0xc
c001df12:	c3                   	ret    
c001df13:	90                   	nop

c001df14 <SATAPI::SATAPI()>:
c001df14:	83 ec 0c             	sub    esp,0xc
c001df17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1b:	83 ec 04             	sub    esp,0x4
c001df1e:	68 00 08 00 00       	push   0x800
c001df23:	68 1c 2f 02 c0       	push   0xc0022f1c
c001df28:	50                   	push   eax
c001df29:	e8 08 ec fe ff       	call   c000cb36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001df2e:	83 c4 10             	add    esp,0x10
c001df31:	ba 10 30 02 c0       	mov    edx,0xc0023010
c001df36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df3a:	89 10                	mov    DWORD PTR [eax],edx
c001df3c:	90                   	nop
c001df3d:	83 c4 0c             	add    esp,0xc
c001df40:	c3                   	ret    
c001df41:	90                   	nop

c001df42 <SATAPI::diskRemoved()>:
c001df42:	c3                   	ret    
c001df43:	90                   	nop

c001df44 <SATAPI::diskInserted()>:
c001df44:	83 ec 18             	sub    esp,0x18
c001df47:	68 28 2f 02 c0       	push   0xc0022f28
c001df4c:	e8 f4 c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001df51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df55:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001df5c:	83 c4 1c             	add    esp,0x1c
c001df5f:	c3                   	ret    

c001df60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001df60:	55                   	push   ebp
c001df61:	57                   	push   edi
c001df62:	56                   	push   esi
c001df63:	53                   	push   ebx
c001df64:	83 ec 34             	sub    esp,0x34
c001df67:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001df6b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df6f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001df73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001df7b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001df81:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df8b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001df91:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df95:	83 c0 02             	add    eax,0x2
c001df98:	c1 e0 07             	shl    eax,0x7
c001df9b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfa7:	c1 e0 07             	shl    eax,0x7
c001dfaa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dfae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfb2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dfbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfc0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfc6:	e8 21 e5 ff ff       	call   c001c4ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dfcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dfcf:	83 c4 10             	add    esp,0x10
c001dfd2:	b8 01 00 00 00       	mov    eax,0x1
c001dfd7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dfdc:	0f 84 53 02 00 00    	je     c001e235 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001dfe2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dfe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfec:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfee:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dff4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dffa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dffe:	c1 e1 05             	shl    ecx,0x5
c001e001:	01 c8                	add    eax,ecx
c001e003:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e005:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e00b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e011:	89 08                	mov    DWORD PTR [eax],ecx
c001e013:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e019:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e01f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e025:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e028:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e02b:	50                   	push   eax
c001e02c:	68 90 00 00 00       	push   0x90
c001e031:	6a 00                	push   0x0
c001e033:	53                   	push   ebx
c001e034:	e8 b7 24 fe ff       	call   c00004f0 <memset>
c001e039:	b9 0c 00 00 00       	mov    ecx,0xc
c001e03e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e042:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e044:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e04a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e04e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e054:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e058:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e05c:	48                   	dec    eax
c001e05d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e062:	89 c1                	mov    ecx,eax
c001e064:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e06a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e06f:	09 c8                	or     eax,ecx
c001e071:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e077:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e07d:	83 c8 80             	or     eax,0xffffff80
c001e080:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e086:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e089:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e08d:	25 00 7f 00 00       	and    eax,0x7f00
c001e092:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e096:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e09b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e09e:	89 d0                	mov    eax,edx
c001e0a0:	c1 ea 18             	shr    edx,0x18
c001e0a3:	c1 e8 10             	shr    eax,0x10
c001e0a6:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e0a9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e0ac:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e0b0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e0b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0b7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e0ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e0c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0c9:	31 c0                	xor    eax,eax
c001e0cb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e0d1:	80 e1 88             	and    cl,0x88
c001e0d4:	74 0a                	je     c001e0e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e0d6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0db:	74 0a                	je     c001e0e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e0dd:	40                   	inc    eax
c001e0de:	eb eb                	jmp    c001e0cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e0e0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0e5:	75 43                	jne    c001e12a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e0e7:	83 ec 0c             	sub    esp,0xc
c001e0ea:	68 40 2f 02 c0       	push   0xc0022f40
c001e0ef:	e8 51 c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e0f4:	58                   	pop    eax
c001e0f5:	5a                   	pop    edx
c001e0f6:	68 55 2f 02 c0       	push   0xc0022f55
c001e0fb:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e101:	e8 a0 a9 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e106:	59                   	pop    ecx
c001e107:	5b                   	pop    ebx
c001e108:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e10c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e112:	e8 6f e4 ff ff       	call   c001c586 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e117:	5e                   	pop    esi
c001e118:	5f                   	pop    edi
c001e119:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e11d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e123:	e8 3e e4 ff ff       	call   c001c566 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e128:	eb 48                	jmp    c001e172 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e12a:	be 01 00 00 00       	mov    esi,0x1
c001e12f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e133:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e137:	d3 e6                	shl    esi,cl
c001e139:	c1 e7 07             	shl    edi,0x7
c001e13c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e142:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e147:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e14b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e151:	85 c6                	test   esi,eax
c001e153:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e159:	0f 84 a3 00 00 00    	je     c001e202 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e15f:	0f ba e0 1e          	bt     eax,0x1e
c001e163:	73 1a                	jae    c001e17f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e165:	83 ec 0c             	sub    esp,0xc
c001e168:	68 67 2f 02 c0       	push   0xc0022f67
c001e16d:	e8 d3 c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e172:	83 c4 10             	add    esp,0x10
c001e175:	b8 01 00 00 00       	mov    eax,0x1
c001e17a:	e9 b6 00 00 00       	jmp    c001e235 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e17f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e185:	83 f8 0d             	cmp    eax,0xd
c001e188:	77 0a                	ja     c001e194 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	68 c8 00 00 00       	push   0xc8
c001e192:	eb 28                	jmp    c001e1bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e194:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e19a:	83 f8 0d             	cmp    eax,0xd
c001e19d:	77 0a                	ja     c001e1a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e19f:	83 ec 0c             	sub    esp,0xc
c001e1a2:	68 58 02 00 00       	push   0x258
c001e1a7:	eb 13                	jmp    c001e1bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e1a9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e1af:	83 f8 06             	cmp    eax,0x6
c001e1b2:	77 10                	ja     c001e1c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e1b4:	83 ec 0c             	sub    esp,0xc
c001e1b7:	68 dc 05 00 00       	push   0x5dc
c001e1bc:	e8 c7 7d ff ff       	call   c0015f88 <milliTenthSleep(unsigned int)>
c001e1c1:	83 c4 10             	add    esp,0x10
c001e1c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1c8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e1cb:	75 06                	jne    c001e1d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e1cd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e1d1:	74 15                	je     c001e1e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e1d3:	83 fb 06             	cmp    ebx,0x6
c001e1d6:	77 10                	ja     c001e1e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	68 c4 09 00 00       	push   0x9c4
c001e1e0:	e8 a3 7d ff ff       	call   c0015f88 <milliTenthSleep(unsigned int)>
c001e1e5:	83 c4 10             	add    esp,0x10
c001e1e8:	43                   	inc    ebx
c001e1e9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e1ef:	0f 85 56 ff ff ff    	jne    c001e14b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e1f5:	83 ec 0c             	sub    esp,0xc
c001e1f8:	68 7a 2f 02 c0       	push   0xc0022f7a
c001e1fd:	e9 6b ff ff ff       	jmp    c001e16d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e202:	0f ba e0 1e          	bt     eax,0x1e
c001e206:	73 0d                	jae    c001e215 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e208:	83 ec 0c             	sub    esp,0xc
c001e20b:	68 8e 2f 02 c0       	push   0xc0022f8e
c001e210:	e9 58 ff ff ff       	jmp    c001e16d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e215:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e21a:	74 17                	je     c001e233 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e21c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e221:	74 10                	je     c001e233 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e223:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e229:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e22d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e231:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e233:	31 c0                	xor    eax,eax
c001e235:	83 c4 2c             	add    esp,0x2c
c001e238:	5b                   	pop    ebx
c001e239:	5e                   	pop    esi
c001e23a:	5f                   	pop    edi
c001e23b:	5d                   	pop    ebp
c001e23c:	c3                   	ret    
c001e23d:	90                   	nop

c001e23e <SATAPI::eject()>:
c001e23e:	57                   	push   edi
c001e23f:	b9 03 00 00 00       	mov    ecx,0x3
c001e244:	83 ec 18             	sub    esp,0x18
c001e247:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e24b:	fc                   	cld    
c001e24c:	31 c0                	xor    eax,eax
c001e24e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e250:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e255:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e25a:	50                   	push   eax
c001e25b:	6a 00                	push   0x0
c001e25d:	6a 00                	push   0x0
c001e25f:	6a 00                	push   0x0
c001e261:	6a 00                	push   0x0
c001e263:	6a 02                	push   0x2
c001e265:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e269:	50                   	push   eax
c001e26a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e26e:	e8 ed fc ff ff       	call   c001df60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e273:	31 c0                	xor    eax,eax
c001e275:	83 c4 38             	add    esp,0x38
c001e278:	5f                   	pop    edi
c001e279:	c3                   	ret    

c001e27a <SATAPI::detectMedia()>:
c001e27a:	53                   	push   ebx
c001e27b:	83 ec 14             	sub    esp,0x14
c001e27e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e282:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e288:	e8 27 02 ff ff       	call   c000e4b4 <VCache::writeWriteBuffer()>
c001e28d:	59                   	pop    ecx
c001e28e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e294:	e8 0b 02 ff ff       	call   c000e4a4 <VCache::invalidateReadBuffer()>
c001e299:	c7 04 24 a3 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fa3
c001e2a0:	e8 a0 c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e2a5:	83 c4 10             	add    esp,0x10
c001e2a8:	31 c0                	xor    eax,eax
c001e2aa:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e2b1:	85 d2                	test   edx,edx
c001e2b3:	74 0f                	je     c001e2c4 <SATAPI::detectMedia()+0x4a>
c001e2b5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e2bb:	75 07                	jne    c001e2c4 <SATAPI::detectMedia()+0x4a>
c001e2bd:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e2c4:	40                   	inc    eax
c001e2c5:	83 f8 1a             	cmp    eax,0x1a
c001e2c8:	75 e0                	jne    c001e2aa <SATAPI::detectMedia()+0x30>
c001e2ca:	83 c4 08             	add    esp,0x8
c001e2cd:	5b                   	pop    ebx
c001e2ce:	c3                   	ret    
c001e2cf:	90                   	nop

c001e2d0 <SATAPI::open(int, int, void*)>:
c001e2d0:	56                   	push   esi
c001e2d1:	53                   	push   ebx
c001e2d2:	51                   	push   ecx
c001e2d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e2d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e2db:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2e5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2f9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e303:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e309:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e310:	e8 aa 9a fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e315:	89 c6                	mov    esi,eax
c001e317:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e31d:	81 c6 00 10 00 00    	add    esi,0x1000
c001e323:	e8 97 9a fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e328:	39 c6                	cmp    esi,eax
c001e32a:	74 10                	je     c001e33c <SATAPI::open(int, int, void*)+0x6c>
c001e32c:	83 ec 0c             	sub    esp,0xc
c001e32f:	68 b8 2f 02 c0       	push   0xc0022fb8
c001e334:	e8 60 30 ff ff       	call   c0011399 <KePanic(char const*)>
c001e339:	83 c4 10             	add    esp,0x10
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	6a 02                	push   0x2
c001e341:	e8 c7 b2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e346:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e34c:	6a 03                	push   0x3
c001e34e:	50                   	push   eax
c001e34f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e355:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e35b:	e8 c0 b9 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e360:	83 c4 14             	add    esp,0x14
c001e363:	68 78 01 00 00       	push   0x178
c001e368:	e8 49 97 fe ff       	call   c0007ab6 <malloc>
c001e36d:	83 c4 0c             	add    esp,0xc
c001e370:	89 c6                	mov    esi,eax
c001e372:	6a 00                	push   0x0
c001e374:	68 ff ff ff 7f       	push   0x7fffffff
c001e379:	6a 00                	push   0x0
c001e37b:	6a 00                	push   0x0
c001e37d:	53                   	push   ebx
c001e37e:	68 ce 2f 02 c0       	push   0xc0022fce
c001e383:	50                   	push   eax
c001e384:	e8 87 f5 fe ff       	call   c000d910 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e389:	83 c4 14             	add    esp,0x14
c001e38c:	56                   	push   esi
c001e38d:	e8 3e f6 fe ff       	call   c000d9d0 <LogicalDisk::assignDriveLetter()>
c001e392:	5a                   	pop    edx
c001e393:	0f be c0             	movsx  eax,al
c001e396:	59                   	pop    ecx
c001e397:	50                   	push   eax
c001e398:	68 20 2e 02 c0       	push   0xc0022e20
c001e39d:	e8 a3 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e3a2:	58                   	pop    eax
c001e3a3:	5a                   	pop    edx
c001e3a4:	56                   	push   esi
c001e3a5:	53                   	push   ebx
c001e3a6:	e8 bf e3 fe ff       	call   c000c76a <Device::addChild(Device*)>
c001e3ab:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e3b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3b4:	e8 e5 e7 fe ff       	call   c000cb9e <PhysicalDisk::startCache()>
c001e3b9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e3c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3c3:	e8 b2 fe ff ff       	call   c001e27a <SATAPI::detectMedia()>
c001e3c8:	83 c4 14             	add    esp,0x14
c001e3cb:	31 c0                	xor    eax,eax
c001e3cd:	5b                   	pop    ebx
c001e3ce:	5e                   	pop    esi
c001e3cf:	c3                   	ret    

c001e3d0 <SATAPI::read(unsigned long long, int, void*)>:
c001e3d0:	57                   	push   edi
c001e3d1:	56                   	push   esi
c001e3d2:	53                   	push   ebx
c001e3d3:	83 ec 30             	sub    esp,0x30
c001e3d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e3da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e3de:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e3e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e3e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3ee:	83 fe 04             	cmp    esi,0x4
c001e3f1:	7e 10                	jle    c001e403 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e3f3:	83 ec 0c             	sub    esp,0xc
c001e3f6:	68 dc 2f 02 c0       	push   0xc0022fdc
c001e3fb:	e8 99 2f ff ff       	call   c0011399 <KePanic(char const*)>
c001e400:	83 c4 10             	add    esp,0x10
c001e403:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e409:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e40f:	51                   	push   ecx
c001e410:	50                   	push   eax
c001e411:	83 c0 02             	add    eax,0x2
c001e414:	c1 e0 07             	shl    eax,0x7
c001e417:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e41d:	50                   	push   eax
c001e41e:	52                   	push   edx
c001e41f:	e8 8c e1 ff ff       	call   c001c5b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e424:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e428:	b9 03 00 00 00       	mov    ecx,0x3
c001e42d:	fc                   	cld    
c001e42e:	31 c0                	xor    eax,eax
c001e430:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e432:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e437:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e43c:	83 c4 0c             	add    esp,0xc
c001e43f:	6a 00                	push   0x0
c001e441:	6a 00                	push   0x0
c001e443:	6a 00                	push   0x0
c001e445:	6a 00                	push   0x0
c001e447:	6a 02                	push   0x2
c001e449:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e44d:	50                   	push   eax
c001e44e:	53                   	push   ebx
c001e44f:	e8 0c fb ff ff       	call   c001df60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e454:	83 c4 20             	add    esp,0x20
c001e457:	85 c0                	test   eax,eax
c001e459:	75 44                	jne    c001e49f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e45b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e45f:	b9 03 00 00 00       	mov    ecx,0x3
c001e464:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e466:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e46a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e46f:	0f c8                	bswap  eax
c001e471:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e475:	89 f0                	mov    eax,esi
c001e477:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e47b:	50                   	push   eax
c001e47c:	56                   	push   esi
c001e47d:	c1 e6 0b             	shl    esi,0xb
c001e480:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e488:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e48c:	56                   	push   esi
c001e48d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e491:	50                   	push   eax
c001e492:	53                   	push   ebx
c001e493:	e8 c8 fa ff ff       	call   c001df60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e498:	83 c4 20             	add    esp,0x20
c001e49b:	85 c0                	test   eax,eax
c001e49d:	74 14                	je     c001e4b3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e49f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4a3:	83 ec 0c             	sub    esp,0xc
c001e4a6:	53                   	push   ebx
c001e4a7:	e8 ce fd ff ff       	call   c001e27a <SATAPI::detectMedia()>
c001e4ac:	83 c4 10             	add    esp,0x10
c001e4af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4b3:	83 c4 30             	add    esp,0x30
c001e4b6:	5b                   	pop    ebx
c001e4b7:	5e                   	pop    esi
c001e4b8:	5f                   	pop    edi
c001e4b9:	c3                   	ret    

c001e4ba <IOAPIC::close(int, int, void*)>:
c001e4ba:	b8 00 00 00 00       	mov    eax,0x0
c001e4bf:	c3                   	ret    

c001e4c0 <apicGetBase()>:
c001e4c0:	55                   	push   ebp
c001e4c1:	89 e5                	mov    ebp,esp
c001e4c3:	83 ec 18             	sub    esp,0x18
c001e4c6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4cb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e4d1:	83 e0 08             	and    eax,0x8
c001e4d4:	0f b6 c0             	movzx  eax,al
c001e4d7:	85 c0                	test   eax,eax
c001e4d9:	75 07                	jne    c001e4e2 <apicGetBase()+0x22>
c001e4db:	b8 00 00 00 00       	mov    eax,0x0
c001e4e0:	eb 21                	jmp    c001e503 <apicGetBase()+0x43>
c001e4e2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4e7:	83 ec 08             	sub    esp,0x8
c001e4ea:	6a 1b                	push   0x1b
c001e4ec:	50                   	push   eax
c001e4ed:	e8 ce 8b fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e4f2:	83 c4 10             	add    esp,0x10
c001e4f5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e4f8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e4fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4fe:	25 00 00 ff ff       	and    eax,0xffff0000
c001e503:	c9                   	leave  
c001e504:	c3                   	ret    
c001e505:	90                   	nop

c001e506 <IOAPIC::IOAPIC()>:
c001e506:	83 ec 0c             	sub    esp,0xc
c001e509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e50d:	83 ec 08             	sub    esp,0x8
c001e510:	68 40 30 02 c0       	push   0xc0023040
c001e515:	50                   	push   eax
c001e516:	e8 e7 e3 fe ff       	call   c000c902 <Device::Device(char const*)>
c001e51b:	83 c4 10             	add    esp,0x10
c001e51e:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001e523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e527:	89 10                	mov    DWORD PTR [eax],edx
c001e529:	90                   	nop
c001e52a:	83 c4 0c             	add    esp,0xc
c001e52d:	c3                   	ret    

c001e52e <apicOpen()>:
c001e52e:	55                   	push   ebp
c001e52f:	89 e5                	mov    ebp,esp
c001e531:	53                   	push   ebx
c001e532:	83 ec 34             	sub    esp,0x34
c001e535:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e53a:	83 f0 01             	xor    eax,0x1
c001e53d:	0f b6 c0             	movzx  eax,al
c001e540:	85 c0                	test   eax,eax
c001e542:	0f 84 a3 00 00 00    	je     c001e5eb <apicOpen()+0xbd>
c001e548:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e54c:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e551:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e555:	0f b6 c0             	movzx  eax,al
c001e558:	39 c2                	cmp    edx,eax
c001e55a:	0f 83 84 00 00 00    	jae    c001e5e4 <apicOpen()+0xb6>
c001e560:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e567:	83 ec 0c             	sub    esp,0xc
c001e56a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e56d:	e8 44 95 fe ff       	call   c0007ab6 <malloc>
c001e572:	83 c4 10             	add    esp,0x10
c001e575:	89 c3                	mov    ebx,eax
c001e577:	83 ec 0c             	sub    esp,0xc
c001e57a:	53                   	push   ebx
c001e57b:	e8 86 ff ff ff       	call   c001e506 <IOAPIC::IOAPIC()>
c001e580:	83 c4 10             	add    esp,0x10
c001e583:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e586:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e58a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e58d:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e594:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e599:	83 c0 01             	add    eax,0x1
c001e59c:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e5a1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e5a6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e5ac:	83 ec 08             	sub    esp,0x8
c001e5af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5b2:	50                   	push   eax
c001e5b3:	e8 b2 e1 fe ff       	call   c000c76a <Device::addChild(Device*)>
c001e5b8:	83 c4 10             	add    esp,0x10
c001e5bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e5be:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5c0:	83 c0 08             	add    eax,0x8
c001e5c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5c5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e5c9:	6a 00                	push   0x0
c001e5cb:	6a 00                	push   0x0
c001e5cd:	52                   	push   edx
c001e5ce:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5d1:	ff d0                	call   eax
c001e5d3:	83 c4 10             	add    esp,0x10
c001e5d6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e5d9:	83 c0 01             	add    eax,0x1
c001e5dc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e5df:	e9 68 ff ff ff       	jmp    c001e54c <apicOpen()+0x1e>
c001e5e4:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e5eb:	e8 d0 fe ff ff       	call   c001e4c0 <apicGetBase()>
c001e5f0:	05 f0 00 00 00       	add    eax,0xf0
c001e5f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e5f8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e5fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5fd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e600:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e607:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e60e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e611:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e614:	89 10                	mov    DWORD PTR [eax],edx
c001e616:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e61d:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e622:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e625:	7d 7c                	jge    c001e6a3 <apicOpen()+0x175>
c001e627:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e62a:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e631:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e634:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e637:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e63e:	c1 e8 08             	shr    eax,0x8
c001e641:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e645:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e648:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e64f:	c1 e8 18             	shr    eax,0x18
c001e652:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e655:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e659:	3d ff 00 00 00       	cmp    eax,0xff
c001e65e:	75 3a                	jne    c001e69a <apicOpen()+0x16c>
c001e660:	e8 5b fe ff ff       	call   c001e4c0 <apicGetBase()>
c001e665:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e669:	83 fa 01             	cmp    edx,0x1
c001e66c:	75 07                	jne    c001e675 <apicOpen()+0x147>
c001e66e:	ba 60 03 00 00       	mov    edx,0x360
c001e673:	eb 05                	jmp    c001e67a <apicOpen()+0x14c>
c001e675:	ba 50 03 00 00       	mov    edx,0x350
c001e67a:	01 d0                	add    eax,edx
c001e67c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e67f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e682:	8b 00                	mov    eax,DWORD PTR [eax]
c001e684:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e687:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e68e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e692:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e695:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e698:	89 10                	mov    DWORD PTR [eax],edx
c001e69a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e69e:	e9 7a ff ff ff       	jmp    c001e61d <apicOpen()+0xef>
c001e6a3:	90                   	nop
c001e6a4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e6a7:	c9                   	leave  
c001e6a8:	c3                   	ret    
c001e6a9:	90                   	nop

c001e6aa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e6aa:	55                   	push   ebp
c001e6ab:	89 e5                	mov    ebp,esp
c001e6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e6b6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6b9:	72 1d                	jb     c001e6d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6be:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e6cd:	01 d0                	add    eax,edx
c001e6cf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6d2:	73 04                	jae    c001e6d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6d4:	b0 01                	mov    al,0x1
c001e6d6:	eb 02                	jmp    c001e6da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e6d8:	b0 00                	mov    al,0x0
c001e6da:	5d                   	pop    ebp
c001e6db:	c3                   	ret    

c001e6dc <IOAPIC::read(int)>:
c001e6dc:	55                   	push   ebp
c001e6dd:	89 e5                	mov    ebp,esp
c001e6df:	83 ec 10             	sub    esp,0x10
c001e6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6f1:	0f b6 d0             	movzx  edx,al
c001e6f4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6f7:	89 10                	mov    DWORD PTR [eax],edx
c001e6f9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6fc:	83 c0 10             	add    eax,0x10
c001e6ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001e701:	c9                   	leave  
c001e702:	c3                   	ret    
c001e703:	90                   	nop

c001e704 <IOAPIC::open(int, int, void*)>:
c001e704:	55                   	push   ebp
c001e705:	89 e5                	mov    ebp,esp
c001e707:	57                   	push   edi
c001e708:	56                   	push   esi
c001e709:	53                   	push   ebx
c001e70a:	83 ec 04             	sub    esp,0x4
c001e70d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e710:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e713:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e71c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e722:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e72c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e735:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e73b:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e745:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e74b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e74e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e757:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e75d:	0f b6 f0             	movzx  esi,al
c001e760:	89 d0                	mov    eax,edx
c001e762:	ba 00 00 00 00       	mov    edx,0x0
c001e767:	89 c7                	mov    edi,eax
c001e769:	83 e7 ff             	and    edi,0xffffffff
c001e76c:	89 f9                	mov    ecx,edi
c001e76e:	0f b6 da             	movzx  ebx,dl
c001e771:	89 c8                	mov    eax,ecx
c001e773:	89 da                	mov    edx,ebx
c001e775:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e778:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e77b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e77f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e783:	83 e0 00             	and    eax,0x0
c001e786:	09 d0                	or     eax,edx
c001e788:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e78f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e795:	8d 50 01             	lea    edx,[eax+0x1]
c001e798:	88 d1                	mov    cl,dl
c001e79a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e79d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e7a3:	0f b6 d0             	movzx  edx,al
c001e7a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7a9:	83 c2 08             	add    edx,0x8
c001e7ac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e7b0:	0f b6 c9             	movzx  ecx,cl
c001e7b3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e7b9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e7bd:	6a 01                	push   0x1
c001e7bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7c2:	e8 15 ff ff ff       	call   c001e6dc <IOAPIC::read(int)>
c001e7c7:	83 c4 08             	add    esp,0x8
c001e7ca:	c1 f8 10             	sar    eax,0x10
c001e7cd:	0f b6 c0             	movzx  eax,al
c001e7d0:	8d 50 01             	lea    edx,[eax+0x1]
c001e7d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7d6:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e7dc:	b8 00 00 00 00       	mov    eax,0x0
c001e7e1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e7e4:	5b                   	pop    ebx
c001e7e5:	5e                   	pop    esi
c001e7e6:	5f                   	pop    edi
c001e7e7:	5d                   	pop    ebp
c001e7e8:	c3                   	ret    
c001e7e9:	90                   	nop

c001e7ea <IOAPIC::write(int, int)>:
c001e7ea:	55                   	push   ebp
c001e7eb:	89 e5                	mov    ebp,esp
c001e7ed:	83 ec 10             	sub    esp,0x10
c001e7f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e7f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e7fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7ff:	0f b6 d0             	movzx  edx,al
c001e802:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e805:	89 10                	mov    DWORD PTR [eax],edx
c001e807:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e80a:	8d 50 10             	lea    edx,[eax+0x10]
c001e80d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e810:	89 02                	mov    DWORD PTR [edx],eax
c001e812:	90                   	nop
c001e813:	c9                   	leave  
c001e814:	c3                   	ret    
c001e815:	90                   	nop

c001e816 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e816:	55                   	push   ebp
c001e817:	89 e5                	mov    ebp,esp
c001e819:	53                   	push   ebx
c001e81a:	83 ec 2c             	sub    esp,0x2c
c001e81d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e820:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e823:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e826:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e829:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e82c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e82f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e832:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e835:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e838:	88 d8                	mov    al,bl
c001e83a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e83d:	88 c8                	mov    al,cl
c001e83f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e842:	88 d0                	mov    al,dl
c001e844:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e847:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e84b:	83 c0 08             	add    eax,0x8
c001e84e:	01 c0                	add    eax,eax
c001e850:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e853:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e857:	83 c0 08             	add    eax,0x8
c001e85a:	01 c0                	add    eax,eax
c001e85c:	83 c0 01             	add    eax,0x1
c001e85f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e862:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e865:	50                   	push   eax
c001e866:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e869:	e8 6e fe ff ff       	call   c001e6dc <IOAPIC::read(int)>
c001e86e:	83 c4 08             	add    esp,0x8
c001e871:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e874:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e87b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e87e:	c1 e0 18             	shl    eax,0x18
c001e881:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e884:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e887:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e88a:	52                   	push   edx
c001e88b:	50                   	push   eax
c001e88c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e88f:	e8 56 ff ff ff       	call   c001e7ea <IOAPIC::write(int, int)>
c001e894:	83 c4 0c             	add    esp,0xc
c001e897:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e89a:	50                   	push   eax
c001e89b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e89e:	e8 39 fe ff ff       	call   c001e6dc <IOAPIC::read(int)>
c001e8a3:	83 c4 08             	add    esp,0x8
c001e8a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e8a9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e8b0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e8b7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e8be:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e8c2:	85 c0                	test   eax,eax
c001e8c4:	74 09                	je     c001e8cf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e8c6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e8cd:	eb 07                	jmp    c001e8d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e8cf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e8d6:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e8da:	85 c0                	test   eax,eax
c001e8dc:	74 09                	je     c001e8e7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e8de:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e8e5:	eb 07                	jmp    c001e8ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e8e7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e8ee:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e8f5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e8f9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e8fc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e8ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e902:	52                   	push   edx
c001e903:	50                   	push   eax
c001e904:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e907:	e8 de fe ff ff       	call   c001e7ea <IOAPIC::write(int, int)>
c001e90c:	83 c4 0c             	add    esp,0xc
c001e90f:	90                   	nop
c001e910:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e913:	c9                   	leave  
c001e914:	c3                   	ret    
c001e915:	66 90                	xchg   ax,ax
c001e917:	90                   	nop

c001e918 <APICTimer::close(int, int, void*)>:
c001e918:	b8 00 00 00 00       	mov    eax,0x0
c001e91d:	c3                   	ret    
c001e91e:	66 90                	xchg   ax,ax

c001e920 <apicTimerHandler(regs*, void*)>:
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e927:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e929:	b8 10 27 00 00       	mov    eax,0x2710
c001e92e:	ba 00 00 00 00       	mov    edx,0x0
c001e933:	f7 f1                	div    ecx
c001e935:	83 ec 0c             	sub    esp,0xc
c001e938:	50                   	push   eax
c001e939:	e8 8e f8 fe ff       	call   c000e1cc <timerHandler(unsigned int)>
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	90                   	nop
c001e942:	83 c4 0c             	add    esp,0xc
c001e945:	c3                   	ret    
c001e946:	66 90                	xchg   ax,ax

c001e948 <APICTimer::open(int, int, void*)>:
c001e948:	83 ec 0c             	sub    esp,0xc
c001e94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e951:	83 c0 24             	add    eax,0x24
c001e954:	8b 00                	mov    eax,DWORD PTR [eax]
c001e956:	83 ec 08             	sub    esp,0x8
c001e959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e95d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e961:	ff d0                	call   eax
c001e963:	83 c4 10             	add    esp,0x10
c001e966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e96e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e978:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e97c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e982:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e986:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	51                   	push   ecx
c001e990:	6a 01                	push   0x1
c001e992:	68 20 e9 01 c0       	push   0xc001e920
c001e997:	52                   	push   edx
c001e998:	50                   	push   eax
c001e999:	e8 78 dd fe ff       	call   c000c716 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e99e:	83 c4 20             	add    esp,0x20
c001e9a1:	89 c2                	mov    edx,eax
c001e9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9ad:	b8 00 00 00 00       	mov    eax,0x0
c001e9b2:	83 c4 0c             	add    esp,0xc
c001e9b5:	c3                   	ret    
c001e9b6:	66 90                	xchg   ax,ax

c001e9b8 <APICTimer::write(int)>:
c001e9b8:	83 ec 0c             	sub    esp,0xc
c001e9bb:	83 ec 0c             	sub    esp,0xc
c001e9be:	68 74 30 02 c0       	push   0xc0023074
c001e9c3:	e8 d1 29 ff ff       	call   c0011399 <KePanic(char const*)>
c001e9c8:	83 c4 10             	add    esp,0x10
c001e9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e9d9:	90                   	nop
c001e9da:	83 c4 0c             	add    esp,0xc
c001e9dd:	c3                   	ret    
c001e9de:	66 90                	xchg   ax,ax

c001e9e0 <APICTimer::APICTimer()>:
c001e9e0:	83 ec 0c             	sub    esp,0xc
c001e9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e7:	83 ec 08             	sub    esp,0x8
c001e9ea:	68 84 30 02 c0       	push   0xc0023084
c001e9ef:	50                   	push   eax
c001e9f0:	e8 0b f7 fe ff       	call   c000e100 <Timer::Timer(char const*)>
c001e9f5:	83 c4 10             	add    esp,0x10
c001e9f8:	ba 98 30 02 c0       	mov    edx,0xc0023098
c001e9fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea01:	89 10                	mov    DWORD PTR [eax],edx
c001ea03:	90                   	nop
c001ea04:	83 c4 0c             	add    esp,0xc
c001ea07:	c3                   	ret    

c001ea08 <PIT::write(int)>:
c001ea08:	83 ec 10             	sub    esp,0x10
c001ea0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea1d:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001ea22:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ea27:	89 c2                	mov    edx,eax
c001ea29:	c1 fa 1f             	sar    edx,0x1f
c001ea2c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ea30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea34:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ea3b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ea40:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ea44:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ea49:	ee                   	out    dx,al
c001ea4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea4e:	0f b6 c0             	movzx  eax,al
c001ea51:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ea58:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ea5c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ea60:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ea65:	ee                   	out    dx,al
c001ea66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea6a:	c1 f8 08             	sar    eax,0x8
c001ea6d:	0f b6 c0             	movzx  eax,al
c001ea70:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ea77:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea7f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ea84:	ee                   	out    dx,al
c001ea85:	90                   	nop
c001ea86:	83 c4 10             	add    esp,0x10
c001ea89:	c3                   	ret    
c001ea8a:	66 90                	xchg   ax,ax

c001ea8c <pitHandler(regs*, void*)>:
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ea95:	b8 10 27 00 00       	mov    eax,0x2710
c001ea9a:	89 c2                	mov    edx,eax
c001ea9c:	c1 fa 1f             	sar    edx,0x1f
c001ea9f:	f7 f9                	idiv   ecx
c001eaa1:	83 ec 0c             	sub    esp,0xc
c001eaa4:	50                   	push   eax
c001eaa5:	e8 22 f7 fe ff       	call   c000e1cc <timerHandler(unsigned int)>
c001eaaa:	83 c4 10             	add    esp,0x10
c001eaad:	90                   	nop
c001eaae:	83 c4 0c             	add    esp,0xc
c001eab1:	c3                   	ret    
c001eab2:	66 90                	xchg   ax,ax

c001eab4 <PIT::open(int, int, void*)>:
c001eab4:	83 ec 0c             	sub    esp,0xc
c001eab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eabd:	83 c0 24             	add    eax,0x24
c001eac0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac2:	83 ec 08             	sub    esp,0x8
c001eac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eacd:	ff d0                	call   eax
c001eacf:	83 c4 10             	add    esp,0x10
c001ead2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	6a 00                	push   0x0
c001eadb:	6a 01                	push   0x1
c001eadd:	68 8c ea 01 c0       	push   0xc001ea8c
c001eae2:	6a 00                	push   0x0
c001eae4:	50                   	push   eax
c001eae5:	e8 2c dc fe ff       	call   c000c716 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eaea:	83 c4 20             	add    esp,0x20
c001eaed:	89 c2                	mov    edx,eax
c001eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eaf9:	b8 00 00 00 00       	mov    eax,0x0
c001eafe:	83 c4 0c             	add    esp,0xc
c001eb01:	c3                   	ret    
c001eb02:	66 90                	xchg   ax,ax

c001eb04 <PIT::close(int, int, void*)>:
c001eb04:	83 ec 0c             	sub    esp,0xc
c001eb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb19:	6a 01                	push   0x1
c001eb1b:	68 8c ea 01 c0       	push   0xc001ea8c
c001eb20:	6a 00                	push   0x0
c001eb22:	50                   	push   eax
c001eb23:	e8 24 dc fe ff       	call   c000c74c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eb28:	83 c4 10             	add    esp,0x10
c001eb2b:	b8 00 00 00 00       	mov    eax,0x0
c001eb30:	83 c4 0c             	add    esp,0xc
c001eb33:	c3                   	ret    

c001eb34 <PIT::PIT()>:
c001eb34:	83 ec 0c             	sub    esp,0xc
c001eb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3b:	83 ec 08             	sub    esp,0x8
c001eb3e:	68 c0 30 02 c0       	push   0xc00230c0
c001eb43:	50                   	push   eax
c001eb44:	e8 b7 f5 fe ff       	call   c000e100 <Timer::Timer(char const*)>
c001eb49:	83 c4 10             	add    esp,0x10
c001eb4c:	ba e8 30 02 c0       	mov    edx,0xc00230e8
c001eb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb55:	89 10                	mov    DWORD PTR [eax],edx
c001eb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb61:	0f b6 d0             	movzx  edx,al
c001eb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb68:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb79:	0f b6 d0             	movzx  edx,al
c001eb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb80:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb8f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb92:	88 d1                	mov    cl,dl
c001eb94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb98:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eb9e:	0f b6 d0             	movzx  edx,al
c001eba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eba9:	83 e1 3f             	and    ecx,0x3f
c001ebac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ebb0:	90                   	nop
c001ebb1:	83 c4 0c             	add    esp,0xc
c001ebb4:	c3                   	ret    
c001ebb5:	66 90                	xchg   ax,ax
c001ebb7:	66 90                	xchg   ax,ax
c001ebb9:	66 90                	xchg   ax,ax
c001ebbb:	66 90                	xchg   ax,ax
c001ebbd:	66 90                	xchg   ax,ax
c001ebbf:	90                   	nop

c001ebc0 <avxDetect>:
c001ebc0:	b8 01 00 00 00       	mov    eax,0x1
c001ebc5:	0f a2                	cpuid  
c001ebc7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ebcd:	74 15                	je     c001ebe4 <avxDetect.noAVX>
c001ebcf:	b8 01 00 00 00       	mov    eax,0x1
c001ebd4:	0f a2                	cpuid  
c001ebd6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ebdc:	74 06                	je     c001ebe4 <avxDetect.noAVX>
c001ebde:	b8 01 00 00 00       	mov    eax,0x1
c001ebe3:	c3                   	ret    

c001ebe4 <avxDetect.noAVX>:
c001ebe4:	b8 00 00 00 00       	mov    eax,0x0
c001ebe9:	c3                   	ret    

c001ebea <avxSave>:
c001ebea:	53                   	push   ebx
c001ebeb:	52                   	push   edx
c001ebec:	31 c0                	xor    eax,eax
c001ebee:	48                   	dec    eax
c001ebef:	89 c2                	mov    edx,eax
c001ebf1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebf5:	0f ae 23             	xsave  [ebx]
c001ebf8:	5a                   	pop    edx
c001ebf9:	5b                   	pop    ebx
c001ebfa:	c3                   	ret    

c001ebfb <avxLoad>:
c001ebfb:	53                   	push   ebx
c001ebfc:	52                   	push   edx
c001ebfd:	31 c0                	xor    eax,eax
c001ebff:	48                   	dec    eax
c001ec00:	89 c2                	mov    edx,eax
c001ec02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec06:	0f ae 2b             	xrstor [ebx]
c001ec09:	5a                   	pop    edx
c001ec0a:	5b                   	pop    ebx
c001ec0b:	c3                   	ret    

c001ec0c <avxInit>:
c001ec0c:	e8 67 03 00 00       	call   c001ef78 <sseInit>
c001ec11:	50                   	push   eax
c001ec12:	51                   	push   ecx
c001ec13:	0f 20 e0             	mov    eax,cr4
c001ec16:	0d 00 00 04 00       	or     eax,0x40000
c001ec1b:	0f 22 e0             	mov    cr4,eax
c001ec1e:	31 c9                	xor    ecx,ecx
c001ec20:	0f 01 d0             	xgetbv 
c001ec23:	0d 07 00 00 00       	or     eax,0x7
c001ec28:	0f 01 d1             	xsetbv 
c001ec2b:	59                   	pop    ecx
c001ec2c:	58                   	pop    eax
c001ec2d:	c3                   	ret    

c001ec2e <avxClose>:
c001ec2e:	c3                   	ret    

c001ec2f <wouldSheSayYes>:
c001ec2f:	c3                   	ret    
c001ec30:	49                   	dec    ecx
c001ec31:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ec35:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ec39:	75 20                	jne    c001ec5b <isr0+0xb>
c001ec3b:	4e                   	dec    esi
c001ec3c:	79 61                	jns    c001ec9f <isr7+0x3>
c001ec3e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ec43:	66 90                	xchg   ax,ax
c001ec45:	66 90                	xchg   ax,ax
c001ec47:	66 90                	xchg   ax,ax
c001ec49:	66 90                	xchg   ax,ax
c001ec4b:	66 90                	xchg   ax,ax
c001ec4d:	66 90                	xchg   ax,ax
c001ec4f:	90                   	nop

c001ec50 <isr0>:
c001ec50:	fa                   	cli    
c001ec51:	68 00 00 00 00       	push   0x0
c001ec56:	68 00 00 00 00       	push   0x0
c001ec5b:	e9 56 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec60 <isr1>:
c001ec60:	fa                   	cli    
c001ec61:	6a 00                	push   0x0
c001ec63:	6a 01                	push   0x1
c001ec65:	e9 4c 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec6a <isr2>:
c001ec6a:	fa                   	cli    
c001ec6b:	6a 00                	push   0x0
c001ec6d:	6a 02                	push   0x2
c001ec6f:	e9 42 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec74 <isr3>:
c001ec74:	fa                   	cli    
c001ec75:	6a 00                	push   0x0
c001ec77:	6a 03                	push   0x3
c001ec79:	e9 38 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec7e <isr4>:
c001ec7e:	fa                   	cli    
c001ec7f:	6a 00                	push   0x0
c001ec81:	6a 04                	push   0x4
c001ec83:	e9 2e 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec88 <isr5>:
c001ec88:	fa                   	cli    
c001ec89:	6a 00                	push   0x0
c001ec8b:	6a 05                	push   0x5
c001ec8d:	e9 24 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec92 <isr6>:
c001ec92:	fa                   	cli    
c001ec93:	6a 00                	push   0x0
c001ec95:	6a 06                	push   0x6
c001ec97:	e9 1a 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec9c <isr7>:
c001ec9c:	fa                   	cli    
c001ec9d:	6a 00                	push   0x0
c001ec9f:	6a 07                	push   0x7
c001eca1:	e9 10 01 00 00       	jmp    c001edb6 <int_common_stub>

c001eca6 <isr8>:
c001eca6:	fa                   	cli    
c001eca7:	6a 08                	push   0x8
c001eca9:	e9 08 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ecae <isr9>:
c001ecae:	fa                   	cli    
c001ecaf:	6a 00                	push   0x0
c001ecb1:	6a 09                	push   0x9
c001ecb3:	e9 fe 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecb8 <isr10>:
c001ecb8:	fa                   	cli    
c001ecb9:	6a 0a                	push   0xa
c001ecbb:	e9 f6 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecc0 <isr11>:
c001ecc0:	fa                   	cli    
c001ecc1:	6a 0b                	push   0xb
c001ecc3:	e9 ee 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecc8 <isr12>:
c001ecc8:	fa                   	cli    
c001ecc9:	6a 0c                	push   0xc
c001eccb:	e9 e6 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecd0 <isr13>:
c001ecd0:	fa                   	cli    
c001ecd1:	6a 0d                	push   0xd
c001ecd3:	53                   	push   ebx
c001ecd4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ecd8:	81 fb a6 ee 01 c0    	cmp    ebx,0xc001eea6
c001ecde:	5b                   	pop    ebx
c001ecdf:	0f 84 c3 01 00 00    	je     c001eea8 <finishSignal2>
c001ece5:	e9 cc 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecea <isr14>:
c001ecea:	fa                   	cli    
c001eceb:	6a 0e                	push   0xe
c001eced:	e9 c4 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecf2 <isr15>:
c001ecf2:	fa                   	cli    
c001ecf3:	6a 00                	push   0x0
c001ecf5:	6a 0f                	push   0xf
c001ecf7:	e9 ba 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecfc <isr16>:
c001ecfc:	fa                   	cli    
c001ecfd:	6a 00                	push   0x0
c001ecff:	6a 10                	push   0x10
c001ed01:	e9 b0 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed06 <isr17>:
c001ed06:	fa                   	cli    
c001ed07:	6a 00                	push   0x0
c001ed09:	6a 11                	push   0x11
c001ed0b:	e9 a6 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed10 <isr18>:
c001ed10:	fa                   	cli    
c001ed11:	6a 00                	push   0x0
c001ed13:	6a 12                	push   0x12
c001ed15:	e9 9c 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed1a <irq3>:
c001ed1a:	fa                   	cli    
c001ed1b:	6a 00                	push   0x0
c001ed1d:	6a 23                	push   0x23
c001ed1f:	e9 92 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed24 <irq4>:
c001ed24:	fa                   	cli    
c001ed25:	6a 00                	push   0x0
c001ed27:	6a 24                	push   0x24
c001ed29:	e9 88 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed2e <irq5>:
c001ed2e:	fa                   	cli    
c001ed2f:	6a 00                	push   0x0
c001ed31:	6a 25                	push   0x25
c001ed33:	e9 7e 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed38 <irq6>:
c001ed38:	fa                   	cli    
c001ed39:	6a 00                	push   0x0
c001ed3b:	6a 26                	push   0x26
c001ed3d:	e9 74 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed42 <irq7>:
c001ed42:	fa                   	cli    
c001ed43:	6a 00                	push   0x0
c001ed45:	6a 27                	push   0x27
c001ed47:	e9 6a 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed4c <irq8>:
c001ed4c:	fa                   	cli    
c001ed4d:	6a 00                	push   0x0
c001ed4f:	6a 28                	push   0x28
c001ed51:	e9 60 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed56 <irq9>:
c001ed56:	fa                   	cli    
c001ed57:	6a 00                	push   0x0
c001ed59:	6a 29                	push   0x29
c001ed5b:	e9 56 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed60 <irq10>:
c001ed60:	fa                   	cli    
c001ed61:	6a 00                	push   0x0
c001ed63:	6a 2a                	push   0x2a
c001ed65:	e9 4c 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed6a <irq11>:
c001ed6a:	fa                   	cli    
c001ed6b:	6a 00                	push   0x0
c001ed6d:	6a 2b                	push   0x2b
c001ed6f:	e9 42 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed74 <irq12>:
c001ed74:	fa                   	cli    
c001ed75:	6a 00                	push   0x0
c001ed77:	6a 2c                	push   0x2c
c001ed79:	e9 38 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed7e <irq13>:
c001ed7e:	fa                   	cli    
c001ed7f:	6a 00                	push   0x0
c001ed81:	6a 2d                	push   0x2d
c001ed83:	e9 2e 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed88 <irq14>:
c001ed88:	fa                   	cli    
c001ed89:	6a 00                	push   0x0
c001ed8b:	6a 2e                	push   0x2e
c001ed8d:	e9 24 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed92 <irq15>:
c001ed92:	fa                   	cli    
c001ed93:	6a 00                	push   0x0
c001ed95:	6a 2f                	push   0x2f
c001ed97:	e9 1a 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed9c <irq1>:
c001ed9c:	fa                   	cli    
c001ed9d:	6a 00                	push   0x0
c001ed9f:	6a 21                	push   0x21
c001eda1:	eb 13                	jmp    c001edb6 <int_common_stub>

c001eda3 <irq2>:
c001eda3:	fa                   	cli    
c001eda4:	6a 00                	push   0x0
c001eda6:	6a 22                	push   0x22
c001eda8:	eb 0c                	jmp    c001edb6 <int_common_stub>

c001edaa <isr96>:
c001edaa:	6a 00                	push   0x0
c001edac:	6a 60                	push   0x60
c001edae:	fb                   	sti    
c001edaf:	eb 37                	jmp    c001ede8 <syscall_common_stub>

c001edb1 <irq0>:
c001edb1:	fa                   	cli    
c001edb2:	6a 00                	push   0x0
c001edb4:	6a 20                	push   0x20

c001edb6 <int_common_stub>:
c001edb6:	60                   	pusha  
c001edb7:	1e                   	push   ds
c001edb8:	06                   	push   es
c001edb9:	0f a0                	push   fs
c001edbb:	0f a8                	push   gs
c001edbd:	66 b8 10 00          	mov    ax,0x10
c001edc1:	66 8e d8             	mov    ds,ax
c001edc4:	66 8e c0             	mov    es,ax
c001edc7:	66 8e e0             	mov    fs,ax
c001edca:	66 8e e8             	mov    gs,ax
c001edcd:	54                   	push   esp
c001edce:	fc                   	cld    
c001edcf:	e8 40 de fe ff       	call   c000cc14 <int_handler>
c001edd4:	81 c4 04 00 00 00    	add    esp,0x4
c001edda:	0f a9                	pop    gs
c001eddc:	0f a1                	pop    fs
c001edde:	07                   	pop    es
c001eddf:	1f                   	pop    ds
c001ede0:	61                   	popa   
c001ede1:	81 c4 08 00 00 00    	add    esp,0x8
c001ede7:	cf                   	iret   

c001ede8 <syscall_common_stub>:
c001ede8:	60                   	pusha  
c001ede9:	1e                   	push   ds
c001edea:	06                   	push   es
c001edeb:	0f a0                	push   fs
c001eded:	0f a8                	push   gs
c001edef:	66 b8 10 00          	mov    ax,0x10
c001edf3:	66 8e d8             	mov    ds,ax
c001edf6:	66 8e c0             	mov    es,ax
c001edf9:	66 8e e0             	mov    fs,ax
c001edfc:	66 8e e8             	mov    gs,ax
c001edff:	54                   	push   esp
c001ee00:	fc                   	cld    
c001ee01:	e8 0e de fe ff       	call   c000cc14 <int_handler>
c001ee06:	81 c4 04 00 00 00    	add    esp,0x4
c001ee0c:	0f a9                	pop    gs
c001ee0e:	0f a1                	pop    fs
c001ee10:	07                   	pop    es
c001ee11:	1f                   	pop    ds
c001ee12:	e8 97 2b ff ff       	call   c00119ae <KiCheckSignalZ>
c001ee17:	3d 00 00 00 00       	cmp    eax,0x0
c001ee1c:	0f 84 c0 00 00 00    	je     c001eee2 <skipSignals>
c001ee22:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ee27:	61                   	popa   
c001ee28:	53                   	push   ebx
c001ee29:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ee2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ee32:	5b                   	pop    ebx
c001ee33:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ee38:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ee3b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ee3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ee41:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ee44:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ee47:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ee4a:	81 c4 08 00 00 00    	add    esp,0x8
c001ee50:	5e                   	pop    esi
c001ee51:	5b                   	pop    ebx
c001ee52:	59                   	pop    ecx
c001ee53:	5a                   	pop    edx
c001ee54:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ee57:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ee5a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ee5d:	52                   	push   edx
c001ee5e:	51                   	push   ecx
c001ee5f:	53                   	push   ebx
c001ee60:	56                   	push   esi
c001ee61:	81 ec 08 00 00 00    	sub    esp,0x8
c001ee67:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ee6a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ee6d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ee70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ee73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ee76:	60                   	pusha  
c001ee77:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ee7d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ee80:	89 e3                	mov    ebx,esp
c001ee82:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ee85:	52                   	push   edx
c001ee86:	68 a6 ee 01 c0       	push   0xc001eea6
c001ee8b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ee8e:	89 dc                	mov    esp,ebx
c001ee90:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ee93:	68 23 00 00 00       	push   0x23
c001ee98:	51                   	push   ecx
c001ee99:	68 02 02 00 00       	push   0x202
c001ee9e:	68 1b 00 00 00       	push   0x1b
c001eea3:	ff 36                	push   DWORD PTR [esi]
c001eea5:	cf                   	iret   

c001eea6 <finishSignal>:
c001eea6:	cd 0f                	int    0xf

c001eea8 <finishSignal2>:
c001eea8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001eeae:	e8 78 2b ff ff       	call   c0011a2b <KiFinishSignalZ>
c001eeb3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001eeb9:	68 23 00 00 00       	push   0x23
c001eebe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001eec1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001eec4:	68 1b 00 00 00       	push   0x1b
c001eec9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001eecc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eecf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001eed2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001eed5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001eed8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001eedb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001eede:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001eee1:	cf                   	iret   

c001eee2 <skipSignals>:
c001eee2:	61                   	popa   
c001eee3:	81 c4 08 00 00 00    	add    esp,0x8
c001eee9:	cf                   	iret   
c001eeea:	90                   	nop
c001eeeb:	90                   	nop

c001eeec <irq16>:
c001eeec:	fa                   	cli    
c001eeed:	6a 00                	push   0x0
c001eeef:	6a 30                	push   0x30
c001eef1:	e9 c0 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001eef6 <irq17>:
c001eef6:	fa                   	cli    
c001eef7:	6a 00                	push   0x0
c001eef9:	6a 31                	push   0x31
c001eefb:	e9 b6 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef00 <irq18>:
c001ef00:	fa                   	cli    
c001ef01:	6a 00                	push   0x0
c001ef03:	6a 32                	push   0x32
c001ef05:	e9 ac fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef0a <irq19>:
c001ef0a:	fa                   	cli    
c001ef0b:	6a 00                	push   0x0
c001ef0d:	6a 33                	push   0x33
c001ef0f:	e9 a2 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef14 <irq20>:
c001ef14:	fa                   	cli    
c001ef15:	6a 00                	push   0x0
c001ef17:	6a 34                	push   0x34
c001ef19:	e9 98 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef1e <irq21>:
c001ef1e:	fa                   	cli    
c001ef1f:	6a 00                	push   0x0
c001ef21:	6a 35                	push   0x35
c001ef23:	e9 8e fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef28 <irq22>:
c001ef28:	fa                   	cli    
c001ef29:	6a 00                	push   0x0
c001ef2b:	6a 36                	push   0x36
c001ef2d:	e9 84 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef32 <irq23>:
c001ef32:	fa                   	cli    
c001ef33:	6a 00                	push   0x0
c001ef35:	6a 37                	push   0x37
c001ef37:	e9 7a fe ff ff       	jmp    c001edb6 <int_common_stub>
c001ef3c:	66 90                	xchg   ax,ax
c001ef3e:	66 90                	xchg   ax,ax

c001ef40 <i386GetRDRAND>:
c001ef40:	b9 64 00 00 00       	mov    ecx,0x64

c001ef45 <retry>:
c001ef45:	0f c7 f0             	rdrand eax
c001ef48:	72 05                	jb     c001ef4f <retry.done>
c001ef4a:	e2 f9                	loop   c001ef45 <retry>

c001ef4c <retry.fail>:
c001ef4c:	31 c0                	xor    eax,eax
c001ef4e:	c3                   	ret    

c001ef4f <retry.done>:
c001ef4f:	c3                   	ret    

c001ef50 <absolutelyNoChanceInHell>:
c001ef50:	b8 01 00 00 00       	mov    eax,0x1
c001ef55:	0f a2                	cpuid  
c001ef57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ef5d:	74 06                	je     c001ef65 <sseDetect.noSSE>
c001ef5f:	b8 01 00 00 00       	mov    eax,0x1
c001ef64:	c3                   	ret    

c001ef65 <sseDetect.noSSE>:
c001ef65:	31 c0                	xor    eax,eax
c001ef67:	c3                   	ret    

c001ef68 <sseSave>:
c001ef68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6c:	0f ae 00             	fxsave [eax]
c001ef6f:	c3                   	ret    

c001ef70 <sseLoad>:
c001ef70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef74:	0f ae 08             	fxrstor [eax]
c001ef77:	c3                   	ret    

c001ef78 <sseInit>:
c001ef78:	e8 42 00 00 00       	call   c001efbf <x87Init>
c001ef7d:	0f 20 e0             	mov    eax,cr4
c001ef80:	66 0d 00 06          	or     ax,0x600
c001ef84:	0f 22 e0             	mov    cr4,eax
c001ef87:	c3                   	ret    

c001ef88 <sseClose>:
c001ef88:	c3                   	ret    
c001ef89:	66 90                	xchg   ax,ax
c001ef8b:	66 90                	xchg   ax,ax
c001ef8d:	66 90                	xchg   ax,ax
c001ef8f:	90                   	nop

c001ef90 <value_37F>:
c001ef90:	7f 03                	jg     c001ef95 <value_37A+0x1>

c001ef92 <value_37E>:
c001ef92:	7e 03                	jle    c001ef97 <x87Detect+0x1>

c001ef94 <value_37A>:
c001ef94:	7a 03                	jp     c001ef99 <x87Detect+0x3>

c001ef96 <x87Detect>:
c001ef96:	b8 01 00 00 00       	mov    eax,0x1
c001ef9b:	0f a2                	cpuid  
c001ef9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001efa3:	74 06                	je     c001efab <x87Detect.nox87>
c001efa5:	b8 01 00 00 00       	mov    eax,0x1
c001efaa:	c3                   	ret    

c001efab <x87Detect.nox87>:
c001efab:	b8 00 00 00 00       	mov    eax,0x0
c001efb0:	c3                   	ret    

c001efb1 <x87Save>:
c001efb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb5:	dd 30                	fnsave [eax]
c001efb7:	c3                   	ret    

c001efb8 <x87Load>:
c001efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbc:	dd 20                	frstor [eax]
c001efbe:	c3                   	ret    

c001efbf <x87Init>:
c001efbf:	0f 20 c0             	mov    eax,cr0
c001efc2:	66 25 fb ff          	and    ax,0xfffb
c001efc6:	66 0d 22 00          	or     ax,0x22
c001efca:	0f 22 c0             	mov    cr0,eax
c001efcd:	db e3                	fninit 
c001efcf:	0f 06                	clts   
c001efd1:	d9 2d 94 ef 01 c0    	fldcw  WORD PTR ds:0xc001ef94
c001efd7:	c3                   	ret    

c001efd8 <x87Close>:
c001efd8:	c3                   	ret    
c001efd9:	66 90                	xchg   ax,ax
c001efdb:	90                   	nop

c001efdc <__do_global_ctors_aux>:
c001efdc:	a1 90 ff 01 c0       	mov    eax,ds:0xc001ff90
c001efe1:	83 f8 ff             	cmp    eax,0xffffffff
c001efe4:	74 1a                	je     c001f000 <__do_global_ctors_aux+0x24>
c001efe6:	55                   	push   ebp
c001efe7:	89 e5                	mov    ebp,esp
c001efe9:	53                   	push   ebx
c001efea:	52                   	push   edx
c001efeb:	bb 90 ff 01 c0       	mov    ebx,0xc001ff90
c001eff0:	ff d0                	call   eax
c001eff2:	83 eb 04             	sub    ebx,0x4
c001eff5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eff7:	83 f8 ff             	cmp    eax,0xffffffff
c001effa:	75 f4                	jne    c001eff0 <__do_global_ctors_aux+0x14>
c001effc:	58                   	pop    eax
c001effd:	5b                   	pop    ebx
c001effe:	5d                   	pop    ebp
c001efff:	c3                   	ret    
c001f000:	c3                   	ret    
c001f001:	66 90                	xchg   ax,ax
c001f003:	90                   	nop

c001f004 <__divdi3>:
c001f004:	55                   	push   ebp
c001f005:	57                   	push   edi
c001f006:	56                   	push   esi
c001f007:	53                   	push   ebx
c001f008:	83 ec 1c             	sub    esp,0x1c
c001f00b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f00f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f013:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f016:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f01a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f01e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f022:	85 db                	test   ebx,ebx
c001f024:	0f 88 8e 00 00 00    	js     c001f0b8 <__divdi3+0xb4>
c001f02a:	89 dd                	mov    ebp,ebx
c001f02c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f034:	89 d3                	mov    ebx,edx
c001f036:	85 d2                	test   edx,edx
c001f038:	79 0d                	jns    c001f047 <__divdi3+0x43>
c001f03a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f03e:	f7 d8                	neg    eax
c001f040:	83 d2 00             	adc    edx,0x0
c001f043:	f7 da                	neg    edx
c001f045:	89 d3                	mov    ebx,edx
c001f047:	89 c7                	mov    edi,eax
c001f049:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f04c:	85 db                	test   ebx,ebx
c001f04e:	75 48                	jne    c001f098 <__divdi3+0x94>
c001f050:	39 ef                	cmp    edi,ebp
c001f052:	76 24                	jbe    c001f078 <__divdi3+0x74>
c001f054:	89 ea                	mov    edx,ebp
c001f056:	f7 f7                	div    edi
c001f058:	89 c1                	mov    ecx,eax
c001f05a:	31 f6                	xor    esi,esi
c001f05c:	89 c8                	mov    eax,ecx
c001f05e:	89 f2                	mov    edx,esi
c001f060:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f064:	85 c9                	test   ecx,ecx
c001f066:	74 07                	je     c001f06f <__divdi3+0x6b>
c001f068:	f7 d8                	neg    eax
c001f06a:	83 d2 00             	adc    edx,0x0
c001f06d:	f7 da                	neg    edx
c001f06f:	83 c4 1c             	add    esp,0x1c
c001f072:	5b                   	pop    ebx
c001f073:	5e                   	pop    esi
c001f074:	5f                   	pop    edi
c001f075:	5d                   	pop    ebp
c001f076:	c3                   	ret    
c001f077:	90                   	nop
c001f078:	85 ff                	test   edi,edi
c001f07a:	75 0b                	jne    c001f087 <__divdi3+0x83>
c001f07c:	b8 01 00 00 00       	mov    eax,0x1
c001f081:	31 d2                	xor    edx,edx
c001f083:	f7 f3                	div    ebx
c001f085:	89 c7                	mov    edi,eax
c001f087:	31 d2                	xor    edx,edx
c001f089:	89 e8                	mov    eax,ebp
c001f08b:	f7 f7                	div    edi
c001f08d:	89 c6                	mov    esi,eax
c001f08f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f092:	f7 f7                	div    edi
c001f094:	89 c1                	mov    ecx,eax
c001f096:	eb c4                	jmp    c001f05c <__divdi3+0x58>
c001f098:	39 eb                	cmp    ebx,ebp
c001f09a:	77 3c                	ja     c001f0d8 <__divdi3+0xd4>
c001f09c:	0f bd f3             	bsr    esi,ebx
c001f09f:	83 f6 1f             	xor    esi,0x1f
c001f0a2:	75 40                	jne    c001f0e4 <__divdi3+0xe0>
c001f0a4:	39 eb                	cmp    ebx,ebp
c001f0a6:	72 09                	jb     c001f0b1 <__divdi3+0xad>
c001f0a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f0ab:	0f 87 97 00 00 00    	ja     c001f148 <__divdi3+0x144>
c001f0b1:	b9 01 00 00 00       	mov    ecx,0x1
c001f0b6:	eb a4                	jmp    c001f05c <__divdi3+0x58>
c001f0b8:	f7 d9                	neg    ecx
c001f0ba:	83 d3 00             	adc    ebx,0x0
c001f0bd:	f7 db                	neg    ebx
c001f0bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0c6:	89 dd                	mov    ebp,ebx
c001f0c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f0d0:	e9 5f ff ff ff       	jmp    c001f034 <__divdi3+0x30>
c001f0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f0d8:	31 f6                	xor    esi,esi
c001f0da:	31 c9                	xor    ecx,ecx
c001f0dc:	e9 7b ff ff ff       	jmp    c001f05c <__divdi3+0x58>
c001f0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0e4:	b8 20 00 00 00       	mov    eax,0x20
c001f0e9:	29 f0                	sub    eax,esi
c001f0eb:	89 f1                	mov    ecx,esi
c001f0ed:	d3 e3                	shl    ebx,cl
c001f0ef:	89 fa                	mov    edx,edi
c001f0f1:	88 c1                	mov    cl,al
c001f0f3:	d3 ea                	shr    edx,cl
c001f0f5:	09 da                	or     edx,ebx
c001f0f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0fb:	89 f1                	mov    ecx,esi
c001f0fd:	d3 e7                	shl    edi,cl
c001f0ff:	89 eb                	mov    ebx,ebp
c001f101:	88 c1                	mov    cl,al
c001f103:	d3 eb                	shr    ebx,cl
c001f105:	89 f1                	mov    ecx,esi
c001f107:	d3 e5                	shl    ebp,cl
c001f109:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f10c:	88 c1                	mov    cl,al
c001f10e:	d3 ea                	shr    edx,cl
c001f110:	09 d5                	or     ebp,edx
c001f112:	89 e8                	mov    eax,ebp
c001f114:	89 da                	mov    edx,ebx
c001f116:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f11a:	89 d3                	mov    ebx,edx
c001f11c:	89 c5                	mov    ebp,eax
c001f11e:	f7 e7                	mul    edi
c001f120:	39 d3                	cmp    ebx,edx
c001f122:	72 18                	jb     c001f13c <__divdi3+0x138>
c001f124:	74 0a                	je     c001f130 <__divdi3+0x12c>
c001f126:	89 e9                	mov    ecx,ebp
c001f128:	31 f6                	xor    esi,esi
c001f12a:	e9 2d ff ff ff       	jmp    c001f05c <__divdi3+0x58>
c001f12f:	90                   	nop
c001f130:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f133:	89 f1                	mov    ecx,esi
c001f135:	d3 e7                	shl    edi,cl
c001f137:	39 c7                	cmp    edi,eax
c001f139:	73 eb                	jae    c001f126 <__divdi3+0x122>
c001f13b:	90                   	nop
c001f13c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f13f:	31 f6                	xor    esi,esi
c001f141:	e9 16 ff ff ff       	jmp    c001f05c <__divdi3+0x58>
c001f146:	66 90                	xchg   ax,ax
c001f148:	31 c9                	xor    ecx,ecx
c001f14a:	e9 0d ff ff ff       	jmp    c001f05c <__divdi3+0x58>
c001f14f:	90                   	nop

c001f150 <__moddi3>:
c001f150:	55                   	push   ebp
c001f151:	57                   	push   edi
c001f152:	56                   	push   esi
c001f153:	53                   	push   ebx
c001f154:	83 ec 2c             	sub    esp,0x2c
c001f157:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f15b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f15f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f163:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f167:	85 db                	test   ebx,ebx
c001f169:	0f 88 85 00 00 00    	js     c001f1f4 <__moddi3+0xa4>
c001f16f:	89 de                	mov    esi,ebx
c001f171:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f179:	89 d7                	mov    edi,edx
c001f17b:	85 d2                	test   edx,edx
c001f17d:	79 09                	jns    c001f188 <__moddi3+0x38>
c001f17f:	f7 d8                	neg    eax
c001f181:	83 d2 00             	adc    edx,0x0
c001f184:	f7 da                	neg    edx
c001f186:	89 d7                	mov    edi,edx
c001f188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f18c:	89 cd                	mov    ebp,ecx
c001f18e:	85 ff                	test   edi,edi
c001f190:	75 52                	jne    c001f1e4 <__moddi3+0x94>
c001f192:	89 c3                	mov    ebx,eax
c001f194:	39 f0                	cmp    eax,esi
c001f196:	76 24                	jbe    c001f1bc <__moddi3+0x6c>
c001f198:	89 c8                	mov    eax,ecx
c001f19a:	89 f2                	mov    edx,esi
c001f19c:	f7 f3                	div    ebx
c001f19e:	89 d6                	mov    esi,edx
c001f1a0:	89 f0                	mov    eax,esi
c001f1a2:	31 d2                	xor    edx,edx
c001f1a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1a8:	85 c9                	test   ecx,ecx
c001f1aa:	74 07                	je     c001f1b3 <__moddi3+0x63>
c001f1ac:	f7 d8                	neg    eax
c001f1ae:	83 d2 00             	adc    edx,0x0
c001f1b1:	f7 da                	neg    edx
c001f1b3:	83 c4 2c             	add    esp,0x2c
c001f1b6:	5b                   	pop    ebx
c001f1b7:	5e                   	pop    esi
c001f1b8:	5f                   	pop    edi
c001f1b9:	5d                   	pop    ebp
c001f1ba:	c3                   	ret    
c001f1bb:	90                   	nop
c001f1bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1c0:	85 db                	test   ebx,ebx
c001f1c2:	75 0d                	jne    c001f1d1 <__moddi3+0x81>
c001f1c4:	b8 01 00 00 00       	mov    eax,0x1
c001f1c9:	31 d2                	xor    edx,edx
c001f1cb:	f7 f7                	div    edi
c001f1cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1d1:	89 f0                	mov    eax,esi
c001f1d3:	31 d2                	xor    edx,edx
c001f1d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1d9:	f7 f7                	div    edi
c001f1db:	89 e8                	mov    eax,ebp
c001f1dd:	f7 f7                	div    edi
c001f1df:	89 d6                	mov    esi,edx
c001f1e1:	eb bd                	jmp    c001f1a0 <__moddi3+0x50>
c001f1e3:	90                   	nop
c001f1e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1e8:	39 f7                	cmp    edi,esi
c001f1ea:	76 20                	jbe    c001f20c <__moddi3+0xbc>
c001f1ec:	89 c8                	mov    eax,ecx
c001f1ee:	89 f2                	mov    edx,esi
c001f1f0:	eb b2                	jmp    c001f1a4 <__moddi3+0x54>
c001f1f2:	66 90                	xchg   ax,ax
c001f1f4:	f7 d9                	neg    ecx
c001f1f6:	83 d3 00             	adc    ebx,0x0
c001f1f9:	f7 db                	neg    ebx
c001f1fb:	89 de                	mov    esi,ebx
c001f1fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f205:	e9 6f ff ff ff       	jmp    c001f179 <__moddi3+0x29>
c001f20a:	66 90                	xchg   ax,ax
c001f20c:	0f bd c7             	bsr    eax,edi
c001f20f:	83 f0 1f             	xor    eax,0x1f
c001f212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f216:	75 24                	jne    c001f23c <__moddi3+0xec>
c001f218:	39 f7                	cmp    edi,esi
c001f21a:	72 06                	jb     c001f222 <__moddi3+0xd2>
c001f21c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f220:	77 0c                	ja     c001f22e <__moddi3+0xde>
c001f222:	89 e9                	mov    ecx,ebp
c001f224:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f228:	19 fe                	sbb    esi,edi
c001f22a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f22e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f232:	89 f2                	mov    edx,esi
c001f234:	e9 6b ff ff ff       	jmp    c001f1a4 <__moddi3+0x54>
c001f239:	8d 76 00             	lea    esi,[esi+0x0]
c001f23c:	b8 20 00 00 00       	mov    eax,0x20
c001f241:	89 c2                	mov    edx,eax
c001f243:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f247:	29 da                	sub    edx,ebx
c001f249:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f24d:	88 d9                	mov    cl,bl
c001f24f:	d3 e7                	shl    edi,cl
c001f251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f255:	88 d1                	mov    cl,dl
c001f257:	d3 e8                	shr    eax,cl
c001f259:	09 c7                	or     edi,eax
c001f25b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f25f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f263:	89 d8                	mov    eax,ebx
c001f265:	88 d9                	mov    cl,bl
c001f267:	d3 e7                	shl    edi,cl
c001f269:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f26d:	89 f3                	mov    ebx,esi
c001f26f:	88 d1                	mov    cl,dl
c001f271:	d3 eb                	shr    ebx,cl
c001f273:	89 c7                	mov    edi,eax
c001f275:	88 c1                	mov    cl,al
c001f277:	d3 e6                	shl    esi,cl
c001f279:	89 e8                	mov    eax,ebp
c001f27b:	88 d1                	mov    cl,dl
c001f27d:	d3 e8                	shr    eax,cl
c001f27f:	09 f0                	or     eax,esi
c001f281:	89 f9                	mov    ecx,edi
c001f283:	d3 e5                	shl    ebp,cl
c001f285:	89 da                	mov    edx,ebx
c001f287:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f28b:	89 d3                	mov    ebx,edx
c001f28d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f291:	89 c6                	mov    esi,eax
c001f293:	89 d1                	mov    ecx,edx
c001f295:	39 d3                	cmp    ebx,edx
c001f297:	72 27                	jb     c001f2c0 <__moddi3+0x170>
c001f299:	74 21                	je     c001f2bc <__moddi3+0x16c>
c001f29b:	29 f5                	sub    ebp,esi
c001f29d:	19 cb                	sbb    ebx,ecx
c001f29f:	89 de                	mov    esi,ebx
c001f2a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f2a5:	d3 e6                	shl    esi,cl
c001f2a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f2ab:	89 f9                	mov    ecx,edi
c001f2ad:	d3 ed                	shr    ebp,cl
c001f2af:	09 ee                	or     esi,ebp
c001f2b1:	89 f0                	mov    eax,esi
c001f2b3:	d3 eb                	shr    ebx,cl
c001f2b5:	89 da                	mov    edx,ebx
c001f2b7:	e9 e8 fe ff ff       	jmp    c001f1a4 <__moddi3+0x54>
c001f2bc:	39 c5                	cmp    ebp,eax
c001f2be:	73 db                	jae    c001f29b <__moddi3+0x14b>
c001f2c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f2c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f2c8:	89 d1                	mov    ecx,edx
c001f2ca:	89 c6                	mov    esi,eax
c001f2cc:	eb cd                	jmp    c001f29b <__moddi3+0x14b>
c001f2ce:	66 90                	xchg   ax,ax

c001f2d0 <__udivdi3>:
c001f2d0:	55                   	push   ebp
c001f2d1:	57                   	push   edi
c001f2d2:	56                   	push   esi
c001f2d3:	53                   	push   ebx
c001f2d4:	83 ec 1c             	sub    esp,0x1c
c001f2d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f2df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f2e7:	85 d2                	test   edx,edx
c001f2e9:	75 41                	jne    c001f32c <__udivdi3+0x5c>
c001f2eb:	39 f7                	cmp    edi,esi
c001f2ed:	76 15                	jbe    c001f304 <__udivdi3+0x34>
c001f2ef:	89 e8                	mov    eax,ebp
c001f2f1:	89 f2                	mov    edx,esi
c001f2f3:	f7 f7                	div    edi
c001f2f5:	31 db                	xor    ebx,ebx
c001f2f7:	89 da                	mov    edx,ebx
c001f2f9:	83 c4 1c             	add    esp,0x1c
c001f2fc:	5b                   	pop    ebx
c001f2fd:	5e                   	pop    esi
c001f2fe:	5f                   	pop    edi
c001f2ff:	5d                   	pop    ebp
c001f300:	c3                   	ret    
c001f301:	8d 76 00             	lea    esi,[esi+0x0]
c001f304:	89 f9                	mov    ecx,edi
c001f306:	85 ff                	test   edi,edi
c001f308:	75 0b                	jne    c001f315 <__udivdi3+0x45>
c001f30a:	b8 01 00 00 00       	mov    eax,0x1
c001f30f:	31 d2                	xor    edx,edx
c001f311:	f7 f7                	div    edi
c001f313:	89 c1                	mov    ecx,eax
c001f315:	31 d2                	xor    edx,edx
c001f317:	89 f0                	mov    eax,esi
c001f319:	f7 f1                	div    ecx
c001f31b:	89 c3                	mov    ebx,eax
c001f31d:	89 e8                	mov    eax,ebp
c001f31f:	f7 f1                	div    ecx
c001f321:	89 da                	mov    edx,ebx
c001f323:	83 c4 1c             	add    esp,0x1c
c001f326:	5b                   	pop    ebx
c001f327:	5e                   	pop    esi
c001f328:	5f                   	pop    edi
c001f329:	5d                   	pop    ebp
c001f32a:	c3                   	ret    
c001f32b:	90                   	nop
c001f32c:	39 f2                	cmp    edx,esi
c001f32e:	77 1c                	ja     c001f34c <__udivdi3+0x7c>
c001f330:	0f bd da             	bsr    ebx,edx
c001f333:	83 f3 1f             	xor    ebx,0x1f
c001f336:	75 24                	jne    c001f35c <__udivdi3+0x8c>
c001f338:	39 f2                	cmp    edx,esi
c001f33a:	72 08                	jb     c001f344 <__udivdi3+0x74>
c001f33c:	39 ef                	cmp    edi,ebp
c001f33e:	0f 87 84 00 00 00    	ja     c001f3c8 <__udivdi3+0xf8>
c001f344:	b8 01 00 00 00       	mov    eax,0x1
c001f349:	eb ac                	jmp    c001f2f7 <__udivdi3+0x27>
c001f34b:	90                   	nop
c001f34c:	31 db                	xor    ebx,ebx
c001f34e:	31 c0                	xor    eax,eax
c001f350:	89 da                	mov    edx,ebx
c001f352:	83 c4 1c             	add    esp,0x1c
c001f355:	5b                   	pop    ebx
c001f356:	5e                   	pop    esi
c001f357:	5f                   	pop    edi
c001f358:	5d                   	pop    ebp
c001f359:	c3                   	ret    
c001f35a:	66 90                	xchg   ax,ax
c001f35c:	b8 20 00 00 00       	mov    eax,0x20
c001f361:	29 d8                	sub    eax,ebx
c001f363:	88 d9                	mov    cl,bl
c001f365:	d3 e2                	shl    edx,cl
c001f367:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f36b:	89 fa                	mov    edx,edi
c001f36d:	88 c1                	mov    cl,al
c001f36f:	d3 ea                	shr    edx,cl
c001f371:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f375:	09 d1                	or     ecx,edx
c001f377:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f37b:	88 d9                	mov    cl,bl
c001f37d:	d3 e7                	shl    edi,cl
c001f37f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f383:	89 f7                	mov    edi,esi
c001f385:	88 c1                	mov    cl,al
c001f387:	d3 ef                	shr    edi,cl
c001f389:	88 d9                	mov    cl,bl
c001f38b:	d3 e6                	shl    esi,cl
c001f38d:	89 ea                	mov    edx,ebp
c001f38f:	88 c1                	mov    cl,al
c001f391:	d3 ea                	shr    edx,cl
c001f393:	09 d6                	or     esi,edx
c001f395:	89 f0                	mov    eax,esi
c001f397:	89 fa                	mov    edx,edi
c001f399:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f39d:	89 d7                	mov    edi,edx
c001f39f:	89 c6                	mov    esi,eax
c001f3a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3a5:	39 d7                	cmp    edi,edx
c001f3a7:	72 13                	jb     c001f3bc <__udivdi3+0xec>
c001f3a9:	74 09                	je     c001f3b4 <__udivdi3+0xe4>
c001f3ab:	89 f0                	mov    eax,esi
c001f3ad:	31 db                	xor    ebx,ebx
c001f3af:	e9 43 ff ff ff       	jmp    c001f2f7 <__udivdi3+0x27>
c001f3b4:	88 d9                	mov    cl,bl
c001f3b6:	d3 e5                	shl    ebp,cl
c001f3b8:	39 c5                	cmp    ebp,eax
c001f3ba:	73 ef                	jae    c001f3ab <__udivdi3+0xdb>
c001f3bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f3bf:	31 db                	xor    ebx,ebx
c001f3c1:	e9 31 ff ff ff       	jmp    c001f2f7 <__udivdi3+0x27>
c001f3c6:	66 90                	xchg   ax,ax
c001f3c8:	31 c0                	xor    eax,eax
c001f3ca:	e9 28 ff ff ff       	jmp    c001f2f7 <__udivdi3+0x27>
c001f3cf:	90                   	nop

c001f3d0 <__umoddi3>:
c001f3d0:	55                   	push   ebp
c001f3d1:	57                   	push   edi
c001f3d2:	56                   	push   esi
c001f3d3:	53                   	push   ebx
c001f3d4:	83 ec 1c             	sub    esp,0x1c
c001f3d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f3e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f3e7:	89 da                	mov    edx,ebx
c001f3e9:	85 c0                	test   eax,eax
c001f3eb:	75 37                	jne    c001f424 <__umoddi3+0x54>
c001f3ed:	39 df                	cmp    edi,ebx
c001f3ef:	76 13                	jbe    c001f404 <__umoddi3+0x34>
c001f3f1:	89 f0                	mov    eax,esi
c001f3f3:	f7 f7                	div    edi
c001f3f5:	89 d0                	mov    eax,edx
c001f3f7:	31 d2                	xor    edx,edx
c001f3f9:	83 c4 1c             	add    esp,0x1c
c001f3fc:	5b                   	pop    ebx
c001f3fd:	5e                   	pop    esi
c001f3fe:	5f                   	pop    edi
c001f3ff:	5d                   	pop    ebp
c001f400:	c3                   	ret    
c001f401:	8d 76 00             	lea    esi,[esi+0x0]
c001f404:	89 fd                	mov    ebp,edi
c001f406:	85 ff                	test   edi,edi
c001f408:	75 0b                	jne    c001f415 <__umoddi3+0x45>
c001f40a:	b8 01 00 00 00       	mov    eax,0x1
c001f40f:	31 d2                	xor    edx,edx
c001f411:	f7 f7                	div    edi
c001f413:	89 c5                	mov    ebp,eax
c001f415:	89 d8                	mov    eax,ebx
c001f417:	31 d2                	xor    edx,edx
c001f419:	f7 f5                	div    ebp
c001f41b:	89 f0                	mov    eax,esi
c001f41d:	f7 f5                	div    ebp
c001f41f:	89 d0                	mov    eax,edx
c001f421:	eb d4                	jmp    c001f3f7 <__umoddi3+0x27>
c001f423:	90                   	nop
c001f424:	89 f1                	mov    ecx,esi
c001f426:	39 d8                	cmp    eax,ebx
c001f428:	76 0a                	jbe    c001f434 <__umoddi3+0x64>
c001f42a:	89 f0                	mov    eax,esi
c001f42c:	83 c4 1c             	add    esp,0x1c
c001f42f:	5b                   	pop    ebx
c001f430:	5e                   	pop    esi
c001f431:	5f                   	pop    edi
c001f432:	5d                   	pop    ebp
c001f433:	c3                   	ret    
c001f434:	0f bd e8             	bsr    ebp,eax
c001f437:	83 f5 1f             	xor    ebp,0x1f
c001f43a:	75 1c                	jne    c001f458 <__umoddi3+0x88>
c001f43c:	39 d8                	cmp    eax,ebx
c001f43e:	72 04                	jb     c001f444 <__umoddi3+0x74>
c001f440:	39 f7                	cmp    edi,esi
c001f442:	77 08                	ja     c001f44c <__umoddi3+0x7c>
c001f444:	89 da                	mov    edx,ebx
c001f446:	29 fe                	sub    esi,edi
c001f448:	19 c2                	sbb    edx,eax
c001f44a:	89 f1                	mov    ecx,esi
c001f44c:	89 c8                	mov    eax,ecx
c001f44e:	83 c4 1c             	add    esp,0x1c
c001f451:	5b                   	pop    ebx
c001f452:	5e                   	pop    esi
c001f453:	5f                   	pop    edi
c001f454:	5d                   	pop    ebp
c001f455:	c3                   	ret    
c001f456:	66 90                	xchg   ax,ax
c001f458:	ba 20 00 00 00       	mov    edx,0x20
c001f45d:	29 ea                	sub    edx,ebp
c001f45f:	89 e9                	mov    ecx,ebp
c001f461:	d3 e0                	shl    eax,cl
c001f463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f467:	89 f8                	mov    eax,edi
c001f469:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f46d:	88 d1                	mov    cl,dl
c001f46f:	d3 e8                	shr    eax,cl
c001f471:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f475:	09 c1                	or     ecx,eax
c001f477:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f47b:	89 e9                	mov    ecx,ebp
c001f47d:	d3 e7                	shl    edi,cl
c001f47f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f483:	89 d8                	mov    eax,ebx
c001f485:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f489:	88 d1                	mov    cl,dl
c001f48b:	d3 e8                	shr    eax,cl
c001f48d:	89 c7                	mov    edi,eax
c001f48f:	89 e9                	mov    ecx,ebp
c001f491:	d3 e3                	shl    ebx,cl
c001f493:	89 f0                	mov    eax,esi
c001f495:	88 d1                	mov    cl,dl
c001f497:	d3 e8                	shr    eax,cl
c001f499:	09 d8                	or     eax,ebx
c001f49b:	89 e9                	mov    ecx,ebp
c001f49d:	d3 e6                	shl    esi,cl
c001f49f:	89 f3                	mov    ebx,esi
c001f4a1:	89 fa                	mov    edx,edi
c001f4a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f4a7:	89 d1                	mov    ecx,edx
c001f4a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4ad:	89 c6                	mov    esi,eax
c001f4af:	89 d7                	mov    edi,edx
c001f4b1:	39 d1                	cmp    ecx,edx
c001f4b3:	72 27                	jb     c001f4dc <__umoddi3+0x10c>
c001f4b5:	74 21                	je     c001f4d8 <__umoddi3+0x108>
c001f4b7:	89 ca                	mov    edx,ecx
c001f4b9:	29 f3                	sub    ebx,esi
c001f4bb:	19 fa                	sbb    edx,edi
c001f4bd:	89 d0                	mov    eax,edx
c001f4bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f4c3:	d3 e0                	shl    eax,cl
c001f4c5:	89 e9                	mov    ecx,ebp
c001f4c7:	d3 eb                	shr    ebx,cl
c001f4c9:	09 d8                	or     eax,ebx
c001f4cb:	d3 ea                	shr    edx,cl
c001f4cd:	83 c4 1c             	add    esp,0x1c
c001f4d0:	5b                   	pop    ebx
c001f4d1:	5e                   	pop    esi
c001f4d2:	5f                   	pop    edi
c001f4d3:	5d                   	pop    ebp
c001f4d4:	c3                   	ret    
c001f4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4d8:	39 c3                	cmp    ebx,eax
c001f4da:	73 db                	jae    c001f4b7 <__umoddi3+0xe7>
c001f4dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f4e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f4e4:	89 d7                	mov    edi,edx
c001f4e6:	89 c6                	mov    esi,eax
c001f4e8:	eb cd                	jmp    c001f4b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f4ea <_init>:
c001f4ea:	55                   	push   ebp
c001f4eb:	89 e5                	mov    ebp,esp
c001f4ed:	e8 02 0c fe ff       	call   c00000f4 <frame_dummy>
c001f4f2:	e8 e5 fa ff ff       	call   c001efdc <__do_global_ctors_aux>
c001f4f7:	5d                   	pop    ebp
c001f4f8:	c3                   	ret    

Disassembly of section .fini:

c001f4f9 <_fini>:
c001f4f9:	55                   	push   ebp
c001f4fa:	89 e5                	mov    ebp,esp
c001f4fc:	e8 83 0b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f501:	5d                   	pop    ebp
c001f502:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f504 <Computer::~Computer()>:
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	ba 14 08 02 c0       	mov    edx,0xc0020814
c001f50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f510:	89 10                	mov    DWORD PTR [eax],edx
c001f512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f516:	83 ec 0c             	sub    esp,0xc
c001f519:	50                   	push   eax
c001f51a:	e8 4d d1 fe ff       	call   c000c66c <Device::~Device()>
c001f51f:	83 c4 10             	add    esp,0x10
c001f522:	90                   	nop
c001f523:	83 c4 0c             	add    esp,0xc
c001f526:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f528 <Computer::~Computer()>:
c001f528:	83 ec 0c             	sub    esp,0xc
c001f52b:	83 ec 0c             	sub    esp,0xc
c001f52e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f532:	e8 cd ff ff ff       	call   c001f504 <Computer::~Computer()>
c001f537:	83 c4 10             	add    esp,0x10
c001f53a:	83 ec 08             	sub    esp,0x8
c001f53d:	68 70 01 00 00       	push   0x170
c001f542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f546:	e8 cd b2 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f54b:	83 c4 10             	add    esp,0x10
c001f54e:	83 c4 0c             	add    esp,0xc
c001f551:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f552 <idleCommon()>:
c001f552:	83 ec 0c             	sub    esp,0xc
c001f555:	fa                   	cli    
c001f556:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f55c:	e8 f7 66 ff ff       	call   c0015c58 <schedule()>
c001f561:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f566:	48                   	dec    eax
c001f567:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f56c:	75 01                	jne    c001f56f <idleCommon()+0x1d>
c001f56e:	fb                   	sti    
c001f56f:	83 c4 0c             	add    esp,0xc
c001f572:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f574 <LinkedList<UnixFile>::~LinkedList()>:
c001f574:	90                   	nop
c001f575:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f576 <LinkedList<UnixFile>::LinkedList()>:
c001f576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f57a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f584:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f58b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f58f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f59a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5b6:	90                   	nop
c001f5b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f5b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5c0:	75 10                	jne    c001f5d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f5c2:	83 ec 0c             	sub    esp,0xc
c001f5c5:	68 28 0a 02 c0       	push   0xc0020a28
c001f5ca:	e8 ca 1d ff ff       	call   c0011399 <KePanic(char const*)>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5d8:	85 c0                	test   eax,eax
c001f5da:	74 34                	je     c001f610 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5e3:	85 c0                	test   eax,eax
c001f5e5:	74 29                	je     c001f610 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f607:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f60e:	eb 65                	jmp    c001f675 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f614:	8b 00                	mov    eax,DWORD PTR [eax]
c001f616:	85 c0                	test   eax,eax
c001f618:	75 4b                	jne    c001f665 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f61e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f621:	85 c0                	test   eax,eax
c001f623:	75 40                	jne    c001f665 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f62d:	89 10                	mov    DWORD PTR [eax],edx
c001f62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f633:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f637:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f641:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f64f:	85 c0                	test   eax,eax
c001f651:	74 22                	je     c001f675 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f653:	83 ec 0c             	sub    esp,0xc
c001f656:	68 4a 0a 02 c0       	push   0xc0020a4a
c001f65b:	e8 39 1d ff ff       	call   c0011399 <KePanic(char const*)>
c001f660:	83 c4 10             	add    esp,0x10
c001f663:	eb 10                	jmp    c001f675 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f665:	83 ec 0c             	sub    esp,0xc
c001f668:	68 54 0a 02 c0       	push   0xc0020a54
c001f66d:	e8 27 1d ff ff       	call   c0011399 <KePanic(char const*)>
c001f672:	83 c4 10             	add    esp,0x10
c001f675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f679:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f67c:	8d 50 01             	lea    edx,[eax+0x1]
c001f67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f683:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f686:	90                   	nop
c001f687:	83 c4 0c             	add    esp,0xc
c001f68a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f68c <LinkedList<UnixFile>::getFirstElement()>:
c001f68c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f690:	8b 00                	mov    eax,DWORD PTR [eax]
c001f692:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f694 <LinkedList<UnixFile>::removeFirst()>:
c001f694:	83 ec 0c             	sub    esp,0xc
c001f697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f69d:	85 c0                	test   eax,eax
c001f69f:	75 12                	jne    c001f6b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f6a1:	83 ec 0c             	sub    esp,0xc
c001f6a4:	68 60 0a 02 c0       	push   0xc0020a60
c001f6a9:	e8 eb 1c ff ff       	call   c0011399 <KePanic(char const*)>
c001f6ae:	83 c4 10             	add    esp,0x10
c001f6b1:	eb 7e                	jmp    c001f731 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6bd:	85 c0                	test   eax,eax
c001f6bf:	74 10                	je     c001f6d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f6c1:	83 ec 0c             	sub    esp,0xc
c001f6c4:	68 ab 0a 02 c0       	push   0xc0020aab
c001f6c9:	e8 cb 1c ff ff       	call   c0011399 <KePanic(char const*)>
c001f6ce:	83 c4 10             	add    esp,0x10
c001f6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6da:	85 c0                	test   eax,eax
c001f6dc:	75 33                	jne    c001f711 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6fa:	83 f8 01             	cmp    eax,0x1
c001f6fd:	74 21                	je     c001f720 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6ff:	83 ec 0c             	sub    esp,0xc
c001f702:	68 84 0a 02 c0       	push   0xc0020a84
c001f707:	e8 8d 1c ff ff       	call   c0011399 <KePanic(char const*)>
c001f70c:	83 c4 10             	add    esp,0x10
c001f70f:	eb 0f                	jmp    c001f720 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f715:	8b 00                	mov    eax,DWORD PTR [eax]
c001f717:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71e:	89 10                	mov    DWORD PTR [eax],edx
c001f720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f724:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f727:	8d 50 ff             	lea    edx,[eax-0x1]
c001f72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f731:	83 c4 0c             	add    esp,0xc
c001f734:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f736 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f736:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f73a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f73d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f73e <DriverlessDevice::~DriverlessDevice()>:
c001f73e:	ba 3c 16 02 c0       	mov    edx,0xc002163c
c001f743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f747:	89 10                	mov    DWORD PTR [eax],edx
c001f749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f74d:	50                   	push   eax
c001f74e:	e8 19 cf fe ff       	call   c000c66c <Device::~Device()>
c001f753:	83 c4 04             	add    esp,0x4
c001f756:	90                   	nop
c001f757:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f758 <DriverlessDevice::~DriverlessDevice()>:
c001f758:	83 ec 0c             	sub    esp,0xc
c001f75b:	83 ec 0c             	sub    esp,0xc
c001f75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f762:	e8 d7 ff ff ff       	call   c001f73e <DriverlessDevice::~DriverlessDevice()>
c001f767:	83 c4 10             	add    esp,0x10
c001f76a:	83 ec 08             	sub    esp,0x8
c001f76d:	68 58 01 00 00       	push   0x158
c001f772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f776:	e8 9d b0 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f77b:	83 c4 10             	add    esp,0x10
c001f77e:	83 c4 0c             	add    esp,0xc
c001f781:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f782 <LinkedList<Device>::addElement(Device*)>:
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f78a:	75 10                	jne    c001f79c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f78c:	83 ec 0c             	sub    esp,0xc
c001f78f:	68 28 0a 02 c0       	push   0xc0020a28
c001f794:	e8 00 1c ff ff       	call   c0011399 <KePanic(char const*)>
c001f799:	83 c4 10             	add    esp,0x10
c001f79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7a2:	85 c0                	test   eax,eax
c001f7a4:	74 3a                	je     c001f7e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7ad:	85 c0                	test   eax,eax
c001f7af:	74 2f                	je     c001f7e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7de:	eb 68                	jmp    c001f848 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e6:	85 c0                	test   eax,eax
c001f7e8:	75 4e                	jne    c001f838 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7f1:	85 c0                	test   eax,eax
c001f7f3:	75 43                	jne    c001f838 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7fd:	89 10                	mov    DWORD PTR [eax],edx
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f807:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f811:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f822:	85 c0                	test   eax,eax
c001f824:	74 22                	je     c001f848 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f826:	83 ec 0c             	sub    esp,0xc
c001f829:	68 4a 0a 02 c0       	push   0xc0020a4a
c001f82e:	e8 66 1b ff ff       	call   c0011399 <KePanic(char const*)>
c001f833:	83 c4 10             	add    esp,0x10
c001f836:	eb 10                	jmp    c001f848 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	68 54 0a 02 c0       	push   0xc0020a54
c001f840:	e8 54 1b ff ff       	call   c0011399 <KePanic(char const*)>
c001f845:	83 c4 10             	add    esp,0x10
c001f848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f84f:	8d 50 01             	lea    edx,[eax+0x1]
c001f852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f856:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f859:	90                   	nop
c001f85a:	83 c4 0c             	add    esp,0xc
c001f85d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f85e <LinkedList<Device>::LinkedList()>:
c001f85e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f862:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f86c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f877:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f882:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f88c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f897:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f89e:	90                   	nop
c001f89f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8a6:	85 c0                	test   eax,eax
c001f8a8:	75 0e                	jne    c001f8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b1:	85 c0                	test   eax,eax
c001f8b3:	75 03                	jne    c001f8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8b5:	b0 01                	mov    al,0x1
c001f8b7:	c3                   	ret    
c001f8b8:	b0 00                	mov    al,0x0
c001f8ba:	90                   	nop
c001f8bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f8c4:	83 ec 0c             	sub    esp,0xc
c001f8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8cd:	85 c0                	test   eax,eax
c001f8cf:	75 17                	jne    c001f8e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f8d1:	83 ec 0c             	sub    esp,0xc
c001f8d4:	68 60 0a 02 c0       	push   0xc0020a60
c001f8d9:	e8 bb 1a ff ff       	call   c0011399 <KePanic(char const*)>
c001f8de:	83 c4 10             	add    esp,0x10
c001f8e1:	e9 96 00 00 00       	jmp    c001f97c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f8e6:	66 90                	xchg   ax,ax
c001f8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8f2:	85 c0                	test   eax,eax
c001f8f4:	0f 95 c0             	setne  al
c001f8f7:	0f b6 c0             	movzx  eax,al
c001f8fa:	85 c0                	test   eax,eax
c001f8fc:	74 12                	je     c001f910 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f8fe:	83 ec 0c             	sub    esp,0xc
c001f901:	68 ab 0a 02 c0       	push   0xc0020aab
c001f906:	e8 8e 1a ff ff       	call   c0011399 <KePanic(char const*)>
c001f90b:	83 c4 10             	add    esp,0x10
c001f90e:	66 90                	xchg   ax,ax
c001f910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f914:	8b 00                	mov    eax,DWORD PTR [eax]
c001f916:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f919:	85 c0                	test   eax,eax
c001f91b:	0f 94 c0             	sete   al
c001f91e:	0f b6 c0             	movzx  eax,al
c001f921:	85 c0                	test   eax,eax
c001f923:	74 33                	je     c001f958 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f929:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f933:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f941:	83 f8 01             	cmp    eax,0x1
c001f944:	74 22                	je     c001f968 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	68 84 0a 02 c0       	push   0xc0020a84
c001f94e:	e8 46 1a ff ff       	call   c0011399 <KePanic(char const*)>
c001f953:	83 c4 10             	add    esp,0x10
c001f956:	eb 10                	jmp    c001f968 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f95e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f965:	89 10                	mov    DWORD PTR [eax],edx
c001f967:	90                   	nop
c001f968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f96f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f976:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f979:	8d 76 00             	lea    esi,[esi+0x0]
c001f97c:	83 c4 0c             	add    esp,0xc
c001f97f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f980:	83 ec 0c             	sub    esp,0xc
c001f983:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f988:	75 12                	jne    c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f98a:	83 ec 0c             	sub    esp,0xc
c001f98d:	68 28 0a 02 c0       	push   0xc0020a28
c001f992:	e8 02 1a ff ff       	call   c0011399 <KePanic(char const*)>
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	66 90                	xchg   ax,ax
c001f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a2:	85 c0                	test   eax,eax
c001f9a4:	74 36                	je     c001f9dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9ad:	85 c0                	test   eax,eax
c001f9af:	74 2b                	je     c001f9dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9d8:	eb 6a                	jmp    c001fa44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9da:	66 90                	xchg   ax,ax
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9e2:	85 c0                	test   eax,eax
c001f9e4:	75 4e                	jne    c001fa34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9ed:	85 c0                	test   eax,eax
c001f9ef:	75 43                	jne    c001fa34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9f9:	89 10                	mov    DWORD PTR [eax],edx
c001f9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa1b:	85 c0                	test   eax,eax
c001fa1d:	74 25                	je     c001fa44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa1f:	83 ec 0c             	sub    esp,0xc
c001fa22:	68 4a 0a 02 c0       	push   0xc0020a4a
c001fa27:	e8 6d 19 ff ff       	call   c0011399 <KePanic(char const*)>
c001fa2c:	83 c4 10             	add    esp,0x10
c001fa2f:	eb 13                	jmp    c001fa44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa31:	8d 76 00             	lea    esi,[esi+0x0]
c001fa34:	83 ec 0c             	sub    esp,0xc
c001fa37:	68 54 0a 02 c0       	push   0xc0020a54
c001fa3c:	e8 58 19 ff ff       	call   c0011399 <KePanic(char const*)>
c001fa41:	83 c4 10             	add    esp,0x10
c001fa44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa4b:	8d 50 01             	lea    edx,[eax+0x1]
c001fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa55:	90                   	nop
c001fa56:	83 c4 0c             	add    esp,0xc
c001fa59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa5c <ACPI::~ACPI()>:
c001fa5c:	83 ec 0c             	sub    esp,0xc
c001fa5f:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	89 10                	mov    DWORD PTR [eax],edx
c001fa6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6e:	83 ec 0c             	sub    esp,0xc
c001fa71:	50                   	push   eax
c001fa72:	e8 f5 cb fe ff       	call   c000c66c <Device::~Device()>
c001fa77:	83 c4 10             	add    esp,0x10
c001fa7a:	90                   	nop
c001fa7b:	83 c4 0c             	add    esp,0xc
c001fa7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa80 <ACPI::~ACPI()>:
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa8a:	e8 cd ff ff ff       	call   c001fa5c <ACPI::~ACPI()>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	83 ec 08             	sub    esp,0x8
c001fa95:	68 64 12 00 00       	push   0x1264
c001fa9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa9e:	e8 75 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001faa3:	83 c4 10             	add    esp,0x10
c001faa6:	83 c4 0c             	add    esp,0xc
c001faa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001faac <LinkedList<Device>::~LinkedList()>:
c001faac:	90                   	nop
c001faad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fab0 <LinkedList<Device>::isEmpty()>:
c001fab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fab6:	85 c0                	test   eax,eax
c001fab8:	75 0e                	jne    c001fac8 <LinkedList<Device>::isEmpty()+0x18>
c001faba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fac1:	85 c0                	test   eax,eax
c001fac3:	75 03                	jne    c001fac8 <LinkedList<Device>::isEmpty()+0x18>
c001fac5:	b0 01                	mov    al,0x1
c001fac7:	c3                   	ret    
c001fac8:	b0 00                	mov    al,0x0
c001faca:	90                   	nop
c001facb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001facc <LinkedList<Device>::getFirstElement()>:
c001facc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fad4 <LinkedList<Device>::removeFirst()>:
c001fad4:	83 ec 0c             	sub    esp,0xc
c001fad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fadd:	85 c0                	test   eax,eax
c001fadf:	75 17                	jne    c001faf8 <LinkedList<Device>::removeFirst()+0x24>
c001fae1:	83 ec 0c             	sub    esp,0xc
c001fae4:	68 60 0a 02 c0       	push   0xc0020a60
c001fae9:	e8 ab 18 ff ff       	call   c0011399 <KePanic(char const*)>
c001faee:	83 c4 10             	add    esp,0x10
c001faf1:	e9 92 00 00 00       	jmp    c001fb88 <LinkedList<Device>::removeFirst()+0xb4>
c001faf6:	66 90                	xchg   ax,ax
c001faf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb05:	85 c0                	test   eax,eax
c001fb07:	74 13                	je     c001fb1c <LinkedList<Device>::removeFirst()+0x48>
c001fb09:	83 ec 0c             	sub    esp,0xc
c001fb0c:	68 ab 0a 02 c0       	push   0xc0020aab
c001fb11:	e8 83 18 ff ff       	call   c0011399 <KePanic(char const*)>
c001fb16:	83 c4 10             	add    esp,0x10
c001fb19:	8d 76 00             	lea    esi,[esi+0x0]
c001fb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb22:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb28:	85 c0                	test   eax,eax
c001fb2a:	75 34                	jne    c001fb60 <LinkedList<Device>::removeFirst()+0x8c>
c001fb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb48:	83 f8 01             	cmp    eax,0x1
c001fb4b:	74 27                	je     c001fb74 <LinkedList<Device>::removeFirst()+0xa0>
c001fb4d:	83 ec 0c             	sub    esp,0xc
c001fb50:	68 84 0a 02 c0       	push   0xc0020a84
c001fb55:	e8 3f 18 ff ff       	call   c0011399 <KePanic(char const*)>
c001fb5a:	83 c4 10             	add    esp,0x10
c001fb5d:	eb 15                	jmp    c001fb74 <LinkedList<Device>::removeFirst()+0xa0>
c001fb5f:	90                   	nop
c001fb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb66:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb70:	89 10                	mov    DWORD PTR [eax],edx
c001fb72:	66 90                	xchg   ax,ax
c001fb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb7b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb85:	8d 76 00             	lea    esi,[esi+0x0]
c001fb88:	83 c4 0c             	add    esp,0xc
c001fb8b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fb8c <CPU::~CPU()>:
c001fb8c:	83 ec 0c             	sub    esp,0xc
c001fb8f:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c001fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb98:	89 10                	mov    DWORD PTR [eax],edx
c001fb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9e:	83 ec 0c             	sub    esp,0xc
c001fba1:	50                   	push   eax
c001fba2:	e8 c5 ca fe ff       	call   c000c66c <Device::~Device()>
c001fba7:	83 c4 10             	add    esp,0x10
c001fbaa:	90                   	nop
c001fbab:	83 c4 0c             	add    esp,0xc
c001fbae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fbb0 <CPU::~CPU()>:
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	83 ec 0c             	sub    esp,0xc
c001fbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbba:	e8 cd ff ff ff       	call   c001fb8c <CPU::~CPU()>
c001fbbf:	83 c4 10             	add    esp,0x10
c001fbc2:	83 ec 08             	sub    esp,0x8
c001fbc5:	68 94 11 00 00       	push   0x1194
c001fbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbce:	e8 45 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbd3:	83 c4 10             	add    esp,0x10
c001fbd6:	83 c4 0c             	add    esp,0xc
c001fbd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fbdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbe0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fbe3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fbe4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fbe4:	90                   	nop
c001fbe5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fbe8 <ThreadControlBlock::ThreadControlBlock()>:
c001fbe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fbfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc02:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fc09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc0d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fc14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc18:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fc1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc23:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fc27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc2b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fc2f:	90                   	nop
c001fc30:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fc34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fc34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc74:	90                   	nop
c001fc75:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fc76 <PCI::~PCI()>:
c001fc76:	83 ec 0c             	sub    esp,0xc
c001fc79:	ba ac 2c 02 c0       	mov    edx,0xc0022cac
c001fc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc82:	89 10                	mov    DWORD PTR [eax],edx
c001fc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc88:	83 ec 0c             	sub    esp,0xc
c001fc8b:	50                   	push   eax
c001fc8c:	e8 73 c4 fe ff       	call   c000c104 <Bus::~Bus()>
c001fc91:	83 c4 10             	add    esp,0x10
c001fc94:	90                   	nop
c001fc95:	83 c4 0c             	add    esp,0xc
c001fc98:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fc9a <PCI::~PCI()>:
c001fc9a:	83 ec 0c             	sub    esp,0xc
c001fc9d:	83 ec 0c             	sub    esp,0xc
c001fca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca4:	e8 cd ff ff ff       	call   c001fc76 <PCI::~PCI()>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	83 ec 08             	sub    esp,0x8
c001fcaf:	68 5c 01 00 00       	push   0x15c
c001fcb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb8:	e8 5b ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcbd:	83 c4 10             	add    esp,0x10
c001fcc0:	83 c4 0c             	add    esp,0xc
c001fcc3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fcc4 <IDE::~IDE()>:
c001fcc4:	83 ec 0c             	sub    esp,0xc
c001fcc7:	ba 60 2d 02 c0       	mov    edx,0xc0022d60
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	89 10                	mov    DWORD PTR [eax],edx
c001fcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd6:	83 ec 0c             	sub    esp,0xc
c001fcd9:	50                   	push   eax
c001fcda:	e8 05 ce fe ff       	call   c000cae4 <HardDiskController::~HardDiskController()>
c001fcdf:	83 c4 10             	add    esp,0x10
c001fce2:	90                   	nop
c001fce3:	83 c4 0c             	add    esp,0xc
c001fce6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fce8 <IDE::~IDE()>:
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	83 ec 0c             	sub    esp,0xc
c001fcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf2:	e8 cd ff ff ff       	call   c001fcc4 <IDE::~IDE()>
c001fcf7:	83 c4 10             	add    esp,0x10
c001fcfa:	83 ec 08             	sub    esp,0x8
c001fcfd:	68 70 02 00 00       	push   0x270
c001fd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd06:	e8 0d ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	83 c4 0c             	add    esp,0xc
c001fd11:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fd12 <SATABus::~SATABus()>:
c001fd12:	83 ec 0c             	sub    esp,0xc
c001fd15:	ba b0 2d 02 c0       	mov    edx,0xc0022db0
c001fd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1e:	89 10                	mov    DWORD PTR [eax],edx
c001fd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd24:	83 ec 0c             	sub    esp,0xc
c001fd27:	50                   	push   eax
c001fd28:	e8 b7 cd fe ff       	call   c000cae4 <HardDiskController::~HardDiskController()>
c001fd2d:	83 c4 10             	add    esp,0x10
c001fd30:	90                   	nop
c001fd31:	83 c4 0c             	add    esp,0xc
c001fd34:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fd36 <SATABus::~SATABus()>:
c001fd36:	83 ec 0c             	sub    esp,0xc
c001fd39:	83 ec 0c             	sub    esp,0xc
c001fd3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd40:	e8 cd ff ff ff       	call   c001fd12 <SATABus::~SATABus()>
c001fd45:	83 c4 10             	add    esp,0x10
c001fd48:	83 ec 08             	sub    esp,0x8
c001fd4b:	68 64 01 00 00       	push   0x164
c001fd50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd54:	e8 bf aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd59:	83 c4 10             	add    esp,0x10
c001fd5c:	83 c4 0c             	add    esp,0xc
c001fd5f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fd60 <ATA::~ATA()>:
c001fd60:	83 ec 0c             	sub    esp,0xc
c001fd63:	ba f0 2d 02 c0       	mov    edx,0xc0022df0
c001fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6c:	89 10                	mov    DWORD PTR [eax],edx
c001fd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd72:	83 ec 0c             	sub    esp,0xc
c001fd75:	50                   	push   eax
c001fd76:	e8 4b ce fe ff       	call   c000cbc6 <PhysicalDisk::~PhysicalDisk()>
c001fd7b:	83 c4 10             	add    esp,0x10
c001fd7e:	90                   	nop
c001fd7f:	83 c4 0c             	add    esp,0xc
c001fd82:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fd84 <ATA::~ATA()>:
c001fd84:	83 ec 0c             	sub    esp,0xc
c001fd87:	83 ec 0c             	sub    esp,0xc
c001fd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd8e:	e8 cd ff ff ff       	call   c001fd60 <ATA::~ATA()>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	83 ec 08             	sub    esp,0x8
c001fd99:	68 7c 01 00 00       	push   0x17c
c001fd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda2:	e8 71 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	83 c4 0c             	add    esp,0xc
c001fdad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fdae <ATAPI::~ATAPI()>:
c001fdae:	83 ec 0c             	sub    esp,0xc
c001fdb1:	ba 38 2e 02 c0       	mov    edx,0xc0022e38
c001fdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdba:	89 10                	mov    DWORD PTR [eax],edx
c001fdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc0:	83 ec 0c             	sub    esp,0xc
c001fdc3:	50                   	push   eax
c001fdc4:	e8 fd cd fe ff       	call   c000cbc6 <PhysicalDisk::~PhysicalDisk()>
c001fdc9:	83 c4 10             	add    esp,0x10
c001fdcc:	90                   	nop
c001fdcd:	83 c4 0c             	add    esp,0xc
c001fdd0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fdd2 <ATAPI::~ATAPI()>:
c001fdd2:	83 ec 0c             	sub    esp,0xc
c001fdd5:	83 ec 0c             	sub    esp,0xc
c001fdd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fddc:	e8 cd ff ff ff       	call   c001fdae <ATAPI::~ATAPI()>
c001fde1:	83 c4 10             	add    esp,0x10
c001fde4:	83 ec 08             	sub    esp,0x8
c001fde7:	68 84 01 00 00       	push   0x184
c001fdec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf0:	e8 23 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdf5:	83 c4 10             	add    esp,0x10
c001fdf8:	83 c4 0c             	add    esp,0xc
c001fdfb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fdfc <SATA::~SATA()>:
c001fdfc:	83 ec 0c             	sub    esp,0xc
c001fdff:	ba ec 2e 02 c0       	mov    edx,0xc0022eec
c001fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe08:	89 10                	mov    DWORD PTR [eax],edx
c001fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0e:	83 ec 0c             	sub    esp,0xc
c001fe11:	50                   	push   eax
c001fe12:	e8 af cd fe ff       	call   c000cbc6 <PhysicalDisk::~PhysicalDisk()>
c001fe17:	83 c4 10             	add    esp,0x10
c001fe1a:	90                   	nop
c001fe1b:	83 c4 0c             	add    esp,0xc
c001fe1e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fe20 <SATA::~SATA()>:
c001fe20:	83 ec 0c             	sub    esp,0xc
c001fe23:	83 ec 0c             	sub    esp,0xc
c001fe26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe2a:	e8 cd ff ff ff       	call   c001fdfc <SATA::~SATA()>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	83 ec 08             	sub    esp,0x8
c001fe35:	68 7c 01 00 00       	push   0x17c
c001fe3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe3e:	e8 d5 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	83 c4 0c             	add    esp,0xc
c001fe49:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fe4a <SATAPI::~SATAPI()>:
c001fe4a:	83 ec 0c             	sub    esp,0xc
c001fe4d:	ba 10 30 02 c0       	mov    edx,0xc0023010
c001fe52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe56:	89 10                	mov    DWORD PTR [eax],edx
c001fe58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	50                   	push   eax
c001fe60:	e8 61 cd fe ff       	call   c000cbc6 <PhysicalDisk::~PhysicalDisk()>
c001fe65:	83 c4 10             	add    esp,0x10
c001fe68:	90                   	nop
c001fe69:	83 c4 0c             	add    esp,0xc
c001fe6c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fe6e <SATAPI::~SATAPI()>:
c001fe6e:	83 ec 0c             	sub    esp,0xc
c001fe71:	83 ec 0c             	sub    esp,0xc
c001fe74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe78:	e8 cd ff ff ff       	call   c001fe4a <SATAPI::~SATAPI()>
c001fe7d:	83 c4 10             	add    esp,0x10
c001fe80:	83 ec 08             	sub    esp,0x8
c001fe83:	68 84 01 00 00       	push   0x184
c001fe88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe8c:	e8 87 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe91:	83 c4 10             	add    esp,0x10
c001fe94:	83 c4 0c             	add    esp,0xc
c001fe97:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe98 <IOAPIC::~IOAPIC()>:
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea4:	89 10                	mov    DWORD PTR [eax],edx
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	50                   	push   eax
c001feae:	e8 b9 c7 fe ff       	call   c000c66c <Device::~Device()>
c001feb3:	83 c4 10             	add    esp,0x10
c001feb6:	90                   	nop
c001feb7:	83 c4 0c             	add    esp,0xc
c001feba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001febc <IOAPIC::~IOAPIC()>:
c001febc:	83 ec 0c             	sub    esp,0xc
c001febf:	83 ec 0c             	sub    esp,0xc
c001fec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fec6:	e8 cd ff ff ff       	call   c001fe98 <IOAPIC::~IOAPIC()>
c001fecb:	83 c4 10             	add    esp,0x10
c001fece:	83 ec 08             	sub    esp,0x8
c001fed1:	68 68 01 00 00       	push   0x168
c001fed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feda:	e8 39 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	83 c4 0c             	add    esp,0xc
c001fee5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fee8 <APICTimer::~APICTimer()>:
c001fee8:	83 ec 0c             	sub    esp,0xc
c001feeb:	ba 98 30 02 c0       	mov    edx,0xc0023098
c001fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef4:	89 10                	mov    DWORD PTR [eax],edx
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	50                   	push   eax
c001fefe:	e8 35 e2 fe ff       	call   c000e138 <Timer::~Timer()>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	90                   	nop
c001ff07:	83 c4 0c             	add    esp,0xc
c001ff0a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ff0c <APICTimer::~APICTimer()>:
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	83 ec 0c             	sub    esp,0xc
c001ff12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff16:	e8 cd ff ff ff       	call   c001fee8 <APICTimer::~APICTimer()>
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	83 ec 08             	sub    esp,0x8
c001ff21:	68 60 01 00 00       	push   0x160
c001ff26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2a:	e8 e9 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	83 c4 0c             	add    esp,0xc
c001ff35:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff38 <PIT::~PIT()>:
c001ff38:	83 ec 0c             	sub    esp,0xc
c001ff3b:	ba e8 30 02 c0       	mov    edx,0xc00230e8
c001ff40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff44:	89 10                	mov    DWORD PTR [eax],edx
c001ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4a:	83 ec 0c             	sub    esp,0xc
c001ff4d:	50                   	push   eax
c001ff4e:	e8 e5 e1 fe ff       	call   c000e138 <Timer::~Timer()>
c001ff53:	83 c4 10             	add    esp,0x10
c001ff56:	90                   	nop
c001ff57:	83 c4 0c             	add    esp,0xc
c001ff5a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff5c <PIT::~PIT()>:
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	83 ec 0c             	sub    esp,0xc
c001ff62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff66:	e8 cd ff ff ff       	call   c001ff38 <PIT::~PIT()>
c001ff6b:	83 c4 10             	add    esp,0x10
c001ff6e:	83 ec 08             	sub    esp,0x8
c001ff71:	68 5c 01 00 00       	push   0x15c
c001ff76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff7a:	e8 99 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	83 c4 0c             	add    esp,0xc
c001ff85:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be fd 1e 02 c0       	mov    esi,0xc0021efd
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 19 1f 02 c0       	mov    esi,0xc0021f19
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
