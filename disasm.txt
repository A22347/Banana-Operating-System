
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d fc 00 00       	call   c000fc2d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 8f 02 00       	call   c0028f88 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 1e 9c 02 c0       	mov    ebx,0xc0029c1e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 2c 9c 02 c0    	cmp    ebx,0xc0029c2c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 e4 02 c0       	mov    eax,0xc002e4f8
c0000049:	3d f8 e4 02 c0       	cmp    eax,0xc002e4f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 e4 02 c0       	push   0xc002e4f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 e4 02 c0       	mov    eax,0xc002e4f8
c0000075:	2d f8 e4 02 c0       	sub    eax,0xc002e4f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 e4 02 c0       	push   0xc002e4f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 eb 02 c0 00 	cmp    BYTE PTR ds:0xc002eb28,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 34 9c 02 c0       	mov    ebx,0xc0029c34
c00000bb:	81 eb 30 9c 02 c0    	sub    ebx,0xc0029c30
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 30 9c 02 c0       	mov    esi,0xc0029c30
c00000ca:	a1 2c eb 02 c0       	mov    eax,ds:0xc002eb2c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c eb 02 c0       	mov    ds:0xc002eb2c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c eb 02 c0       	mov    eax,ds:0xc002eb2c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 e4 02 c0       	push   0xc002e4f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb28,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 eb 02 c0       	push   0xc002eb30
c000012c:	68 f8 e4 02 c0       	push   0xc002e4f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 a5 da 01 00       	call   c001de48 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 66 28 01 00       	call   c0012c21 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 83 da 01 00       	call   c001de48 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 2b df 01 00       	call   c001e30f <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 89 e5 01 00       	call   c001e976 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 ef 02 c0 	lgdtd  ds:0xc002ef70
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 4b 45 01 00       	call   c0014b2d <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <hexStrToInt>:
c0000646:	56                   	push   esi
c0000647:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064b:	31 d2                	xor    edx,edx

c000064d <hexStrToInt.looping>:
c000064d:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064e:	84 c0                	test   al,al
c0000650:	74 0d                	je     c000065f <hexStrToInt.end>
c0000652:	d4 40                	aam    0x40
c0000654:	d5 39                	aad    0x39
c0000656:	2c 30                	sub    al,0x30
c0000658:	c1 e2 04             	shl    edx,0x4
c000065b:	08 c2                	or     dl,al
c000065d:	eb ee                	jmp    c000064d <hexStrToInt.looping>

c000065f <hexStrToInt.end>:
c000065f:	89 d0                	mov    eax,edx
c0000661:	5e                   	pop    esi
c0000662:	c3                   	ret    

c0000663 <memcpy>:
c0000663:	e9 de de 00 00       	jmp    c000e546 <__not_memcpy>

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 48 eb 02 c0       	mov    ds:0xc002eb48,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 48 eb 02 c0    	mov    DWORD PTR ds:0xc002eb48,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d 48 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002eb48
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 40 9c 02 c0 02 	test   BYTE PTR [edx-0x3ffd63c0],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 40 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd63c0],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 40 9c 02 c0 08 	test   BYTE PTR [edx-0x3ffd63c0],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 40 9c 02 c0 04 	test   BYTE PTR [ebx-0x3ffd63c0],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 40 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd63c0],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <dlfree>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	53                   	push   ebx
c0000db3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000db7:	85 db                	test   ebx,ebx
c0000db9:	0f 84 e2 00 00 00    	je     c0000ea1 <dlfree+0xf1>
c0000dbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dc2:	8b 0d 60 eb 02 c0    	mov    ecx,DWORD PTR ds:0xc002eb60
c0000dc8:	89 f0                	mov    eax,esi
c0000dca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dcd:	83 e0 fc             	and    eax,0xfffffffc
c0000dd0:	39 c1                	cmp    ecx,eax
c0000dd2:	72 24                	jb     c0000df8 <dlfree+0x48>
c0000dd4:	83 c9 03             	or     ecx,0x3
c0000dd7:	c1 e8 03             	shr    eax,0x3
c0000dda:	89 0d 60 eb 02 c0    	mov    DWORD PTR ds:0xc002eb60,ecx
c0000de0:	83 e8 02             	sub    eax,0x2
c0000de3:	8b 0c 85 64 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd149c]
c0000dea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dec:	89 14 85 64 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd149c],edx
c0000df3:	e9 a9 00 00 00       	jmp    c0000ea1 <dlfree+0xf1>
c0000df8:	83 e6 02             	and    esi,0x2
c0000dfb:	0f 85 a0 00 00 00    	jne    c0000ea1 <dlfree+0xf1>
c0000e01:	83 c9 01             	or     ecx,0x1
c0000e04:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e07:	89 0d 60 eb 02 c0    	mov    DWORD PTR ds:0xc002eb60,ecx
c0000e0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e10:	83 e1 fc             	and    ecx,0xfffffffc
c0000e13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e17:	75 13                	jne    c0000e2c <dlfree+0x7c>
c0000e19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e1c:	29 da                	sub    edx,ebx
c0000e1e:	01 d8                	add    eax,ebx
c0000e20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e2c:	39 35 8c eb 02 c0    	cmp    DWORD PTR ds:0xc002eb8c,esi
c0000e32:	74 40                	je     c0000e74 <dlfree+0xc4>
c0000e34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e3b:	80 e3 01             	and    bl,0x1
c0000e3e:	75 0e                	jne    c0000e4e <dlfree+0x9e>
c0000e40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e46:	01 c8                	add    eax,ecx
c0000e48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e4e:	8b 0d 9c eb 02 c0    	mov    ecx,DWORD PTR ds:0xc002eb9c
c0000e54:	c7 42 0c 94 eb 02 c0 	mov    DWORD PTR [edx+0xc],0xc002eb94
c0000e5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e5e:	89 15 9c eb 02 c0    	mov    DWORD PTR ds:0xc002eb9c,edx
c0000e64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e67:	89 c1                	mov    ecx,eax
c0000e69:	83 c9 01             	or     ecx,0x1
c0000e6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e72:	eb 10                	jmp    c0000e84 <dlfree+0xd4>
c0000e74:	01 c8                	add    eax,ecx
c0000e76:	89 c1                	mov    ecx,eax
c0000e78:	83 c9 01             	or     ecx,0x1
c0000e7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7e:	89 15 8c eb 02 c0    	mov    DWORD PTR ds:0xc002eb8c,edx
c0000e84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e89:	76 16                	jbe    c0000ea1 <dlfree+0xf1>
c0000e8b:	f6 05 60 eb 02 c0 02 	test   BYTE PTR ds:0xc002eb60,0x2
c0000e92:	74 0d                	je     c0000ea1 <dlfree+0xf1>
c0000e94:	5b                   	pop    ebx
c0000e95:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c0000e9a:	5e                   	pop    esi
c0000e9b:	5f                   	pop    edi
c0000e9c:	e9 28 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000ea1:	5b                   	pop    ebx
c0000ea2:	5e                   	pop    esi
c0000ea3:	5f                   	pop    edi
c0000ea4:	c3                   	ret    

c0000ea5 <sYSMALLOc>:
c0000ea5:	55                   	push   ebp
c0000ea6:	57                   	push   edi
c0000ea7:	56                   	push   esi
c0000ea8:	53                   	push   ebx
c0000ea9:	89 d3                	mov    ebx,edx
c0000eab:	83 ec 2c             	sub    esp,0x2c
c0000eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000eb2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000eb8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ebb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ec2:	74 1f                	je     c0000ee3 <sYSMALLOc+0x3e>
c0000ec4:	89 d8                	mov    eax,ebx
c0000ec6:	e8 fe fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ecb:	83 ec 0c             	sub    esp,0xc
c0000ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ed2:	83 e8 07             	sub    eax,0x7
c0000ed5:	50                   	push   eax
c0000ed6:	e8 30 02 00 00       	call   c000110b <dlmalloc>
c0000edb:	83 c4 10             	add    esp,0x10
c0000ede:	e9 20 02 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000ee3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ee6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000eef:	83 e0 fc             	and    eax,0xfffffffc
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000efa:	83 c0 10             	add    eax,0x10
c0000efd:	01 c1                	add    ecx,eax
c0000eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f03:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f0a:	74 04                	je     c0000f10 <sYSMALLOc+0x6b>
c0000f0c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f10:	f7 da                	neg    edx
c0000f12:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f1a:	21 d1                	and    ecx,edx
c0000f1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f20:	7f 07                	jg     c0000f29 <sYSMALLOc+0x84>
c0000f22:	31 c0                	xor    eax,eax
c0000f24:	e9 da 01 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f30:	e8 cf e7 00 00       	call   c000f704 <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	89 c6                	mov    esi,eax
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	74 e3                	je     c0000f22 <sYSMALLOc+0x7d>
c0000f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f43:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f47:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f4a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f50:	39 f1                	cmp    ecx,esi
c0000f52:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f58:	75 13                	jne    c0000f6d <sYSMALLOc+0xc8>
c0000f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f62:	83 c8 01             	or     eax,0x1
c0000f65:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f68:	e9 3e 01 00 00       	jmp    c00010ab <sYSMALLOc+0x206>
c0000f6d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f73:	88 d0                	mov    al,dl
c0000f75:	83 e0 01             	and    eax,0x1
c0000f78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f81:	0f 95 c0             	setne  al
c0000f84:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f88:	39 f1                	cmp    ecx,esi
c0000f8a:	76 12                	jbe    c0000f9e <sYSMALLOc+0xf9>
c0000f8c:	84 c0                	test   al,al
c0000f8e:	74 0e                	je     c0000f9e <sYSMALLOc+0xf9>
c0000f90:	83 e2 fe             	and    edx,0xfffffffe
c0000f93:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f99:	e9 83 00 00 00       	jmp    c0001021 <sYSMALLOc+0x17c>
c0000f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fa3:	74 7c                	je     c0001021 <sYSMALLOc+0x17c>
c0000fa5:	84 c0                	test   al,al
c0000fa7:	74 0c                	je     c0000fb5 <sYSMALLOc+0x110>
c0000fa9:	89 f0                	mov    eax,esi
c0000fab:	29 c8                	sub    eax,ecx
c0000fad:	01 e8                	add    eax,ebp
c0000faf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb5:	89 f2                	mov    edx,esi
c0000fb7:	83 e2 07             	and    edx,0x7
c0000fba:	74 0c                	je     c0000fc8 <sYSMALLOc+0x123>
c0000fbc:	b8 08 00 00 00       	mov    eax,0x8
c0000fc1:	29 d0                	sub    eax,edx
c0000fc3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fc6:	eb 04                	jmp    c0000fcc <sYSMALLOc+0x127>
c0000fc8:	89 f5                	mov    ebp,esi
c0000fca:	31 c0                	xor    eax,eax
c0000fcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fd8:	01 c1                	add    ecx,eax
c0000fda:	83 ec 0c             	sub    esp,0xc
c0000fdd:	01 f1                	add    ecx,esi
c0000fdf:	01 ca                	add    edx,ecx
c0000fe1:	29 c8                	sub    eax,ecx
c0000fe3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fe7:	01 c2                	add    edx,eax
c0000fe9:	52                   	push   edx
c0000fea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fee:	e8 11 e7 00 00       	call   c000f704 <sbrk>
c0000ff3:	83 c4 10             	add    esp,0x10
c0000ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ffd:	75 0f                	jne    c000100e <sYSMALLOc+0x169>
c0000fff:	83 ec 0c             	sub    esp,0xc
c0001002:	6a 00                	push   0x0
c0001004:	e8 fb e6 00 00       	call   c000f704 <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	eb 30                	jmp    c000103e <sYSMALLOc+0x199>
c000100e:	39 c6                	cmp    esi,eax
c0001010:	76 33                	jbe    c0001045 <sYSMALLOc+0x1a0>
c0001012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001016:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000101d:	01 f0                	add    eax,esi
c000101f:	eb 1d                	jmp    c000103e <sYSMALLOc+0x199>
c0001021:	83 ec 0c             	sub    esp,0xc
c0001024:	89 f5                	mov    ebp,esi
c0001026:	6a 00                	push   0x0
c0001028:	e8 d7 e6 00 00       	call   c000f704 <sbrk>
c000102d:	89 c2                	mov    edx,eax
c000102f:	29 f2                	sub    edx,esi
c0001031:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001035:	83 c4 10             	add    esp,0x10
c0001038:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103e:	31 d2                	xor    edx,edx
c0001040:	83 f8 ff             	cmp    eax,0xffffffff
c0001043:	74 66                	je     c00010ab <sYSMALLOc+0x206>
c0001045:	29 e8                	sub    eax,ebp
c0001047:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000104a:	01 d0                	add    eax,edx
c000104c:	83 c8 01             	or     eax,0x1
c000104f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001052:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001058:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000105d:	74 4c                	je     c00010ab <sYSMALLOc+0x206>
c000105f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001063:	83 e8 0c             	sub    eax,0xc
c0001066:	83 e0 f8             	and    eax,0xfffffff8
c0001069:	89 c2                	mov    edx,eax
c000106b:	83 ca 01             	or     edx,0x1
c000106e:	83 f8 0f             	cmp    eax,0xf
c0001071:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001074:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000107c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001084:	76 25                	jbe    c00010ab <sYSMALLOc+0x206>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001099:	83 c7 08             	add    edi,0x8
c000109c:	57                   	push   edi
c000109d:	e8 0e fd ff ff       	call   c0000db0 <dlfree>
c00010a2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010a8:	83 c4 10             	add    esp,0x10
c00010ab:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010b1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010b7:	73 06                	jae    c00010bf <sYSMALLOc+0x21a>
c00010b9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010bf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010c5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x22e>
c00010cd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010d9:	83 e2 fc             	and    edx,0xfffffffc
c00010dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010e0:	0f 82 3c fe ff ff    	jb     c0000f22 <sYSMALLOc+0x7d>
c00010e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ea:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010ed:	29 fa                	sub    edx,edi
c00010ef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010f2:	83 ca 01             	or     edx,0x1
c00010f5:	89 fb                	mov    ebx,edi
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	83 cb 01             	or     ebx,0x1
c00010fd:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001100:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001103:	83 c4 2c             	add    esp,0x2c
c0001106:	5b                   	pop    ebx
c0001107:	5e                   	pop    esi
c0001108:	5f                   	pop    edi
c0001109:	5d                   	pop    ebp
c000110a:	c3                   	ret    

c000110b <dlmalloc>:
c000110b:	55                   	push   ebp
c000110c:	57                   	push   edi
c000110d:	56                   	push   esi
c000110e:	53                   	push   ebx
c000110f:	83 ec 1c             	sub    esp,0x1c
c0001112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001116:	83 f8 df             	cmp    eax,0xffffffdf
c0001119:	0f 87 70 03 00 00    	ja     c000148f <dlmalloc+0x384>
c000111f:	83 c0 0b             	add    eax,0xb
c0001122:	be 10 00 00 00       	mov    esi,0x10
c0001127:	83 f8 0f             	cmp    eax,0xf
c000112a:	76 05                	jbe    c0001131 <dlmalloc+0x26>
c000112c:	83 e0 f8             	and    eax,0xfffffff8
c000112f:	89 c6                	mov    esi,eax
c0001131:	8b 3d 60 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb60
c0001137:	f7 c7 01 00 00 00    	test   edi,0x1
c000113d:	75 17                	jne    c0001156 <dlmalloc+0x4b>
c000113f:	85 ff                	test   edi,edi
c0001141:	0f 85 05 03 00 00    	jne    c000144c <dlmalloc+0x341>
c0001147:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c000114c:	e8 78 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001151:	e9 f6 02 00 00       	jmp    c000144c <dlmalloc+0x341>
c0001156:	39 f7                	cmp    edi,esi
c0001158:	72 1f                	jb     c0001179 <dlmalloc+0x6e>
c000115a:	89 f2                	mov    edx,esi
c000115c:	c1 ea 03             	shr    edx,0x3
c000115f:	83 ea 02             	sub    edx,0x2
c0001162:	8b 04 95 64 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd149c]
c0001169:	85 c0                	test   eax,eax
c000116b:	74 0c                	je     c0001179 <dlmalloc+0x6e>
c000116d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001170:	89 0c 95 64 eb 02 c0 	mov    DWORD PTR [edx*4-0x3ffd149c],ecx
c0001177:	eb 30                	jmp    c00011a9 <dlmalloc+0x9e>
c0001179:	89 f0                	mov    eax,esi
c000117b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001181:	77 2e                	ja     c00011b1 <dlmalloc+0xa6>
c0001183:	c1 e8 03             	shr    eax,0x3
c0001186:	8d 14 c5 94 eb 02 c0 	lea    edx,[eax*8-0x3ffd146c]
c000118d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001191:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001194:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001197:	39 c3                	cmp    ebx,eax
c0001199:	74 2e                	je     c00011c9 <dlmalloc+0xbe>
c000119b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000119e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011a6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011a9:	83 c0 08             	add    eax,0x8
c00011ac:	e9 e0 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c00011b1:	e8 8f fa ff ff       	call   c0000c45 <largebin_index>
c00011b6:	83 e7 02             	and    edi,0x2
c00011b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011bd:	74 0a                	je     c00011c9 <dlmalloc+0xbe>
c00011bf:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c00011c4:	e8 00 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c00011c9:	8d 46 10             	lea    eax,[esi+0x10]
c00011cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011d0:	8b 1d a0 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002eba0
c00011d6:	81 fb 94 eb 02 c0    	cmp    ebx,0xc002eb94
c00011dc:	0f 84 13 01 00 00    	je     c00012f5 <dlmalloc+0x1ea>
c00011e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011e5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011e8:	83 e7 fc             	and    edi,0xfffffffc
c00011eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f1:	77 4c                	ja     c000123f <dlmalloc+0x134>
c00011f3:	3d 94 eb 02 c0       	cmp    eax,0xc002eb94
c00011f8:	75 45                	jne    c000123f <dlmalloc+0x134>
c00011fa:	39 1d 90 eb 02 c0    	cmp    DWORD PTR ds:0xc002eb90,ebx
c0001200:	75 3d                	jne    c000123f <dlmalloc+0x134>
c0001202:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001206:	73 37                	jae    c000123f <dlmalloc+0x134>
c0001208:	8d 04 33             	lea    eax,[ebx+esi*1]
c000120b:	89 fa                	mov    edx,edi
c000120d:	a3 9c eb 02 c0       	mov    ds:0xc002eb9c,eax
c0001212:	a3 a0 eb 02 c0       	mov    ds:0xc002eba0,eax
c0001217:	a3 90 eb 02 c0       	mov    ds:0xc002eb90,eax
c000121c:	29 f2                	sub    edx,esi
c000121e:	c7 40 08 94 eb 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eb94
c0001225:	c7 40 0c 94 eb 02 c0 	mov    DWORD PTR [eax+0xc],0xc002eb94
c000122c:	83 ce 01             	or     esi,0x1
c000122f:	89 d1                	mov    ecx,edx
c0001231:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001234:	83 c9 01             	or     ecx,0x1
c0001237:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000123a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000123d:	eb 15                	jmp    c0001254 <dlmalloc+0x149>
c000123f:	a3 a0 eb 02 c0       	mov    ds:0xc002eba0,eax
c0001244:	39 fe                	cmp    esi,edi
c0001246:	c7 40 08 94 eb 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eb94
c000124d:	75 0d                	jne    c000125c <dlmalloc+0x151>
c000124f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001254:	8d 43 08             	lea    eax,[ebx+0x8]
c0001257:	e9 35 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000125c:	89 f8                	mov    eax,edi
c000125e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001264:	77 19                	ja     c000127f <dlmalloc+0x174>
c0001266:	c1 e8 03             	shr    eax,0x3
c0001269:	8d 14 00             	lea    edx,[eax+eax*1]
c000126c:	83 c2 0d             	add    edx,0xd
c000126f:	8d 2c 95 58 eb 02 c0 	lea    ebp,[edx*4-0x3ffd14a8]
c0001276:	8b 14 95 60 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14a0]
c000127d:	eb 46                	jmp    c00012c5 <dlmalloc+0x1ba>
c000127f:	e8 c1 f9 ff ff       	call   c0000c45 <largebin_index>
c0001284:	8d 14 00             	lea    edx,[eax+eax*1]
c0001287:	83 c2 0d             	add    edx,0xd
c000128a:	8d 0c 95 60 eb 02 c0 	lea    ecx,[edx*4-0x3ffd14a0]
c0001291:	8b 14 95 60 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14a0]
c0001298:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000129b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000129f:	89 d5                	mov    ebp,edx
c00012a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012a5:	74 1e                	je     c00012c5 <dlmalloc+0x1ba>
c00012a7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012aa:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ad:	77 12                	ja     c00012c1 <dlmalloc+0x1b6>
c00012af:	83 cf 01             	or     edi,0x1
c00012b2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012b5:	76 05                	jbe    c00012bc <dlmalloc+0x1b1>
c00012b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ba:	eb f6                	jmp    c00012b2 <dlmalloc+0x1a7>
c00012bc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012bf:	eb 04                	jmp    c00012c5 <dlmalloc+0x1ba>
c00012c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012c5:	89 c7                	mov    edi,eax
c00012c7:	88 c1                	mov    cl,al
c00012c9:	c1 ff 05             	sar    edi,0x5
c00012cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012d0:	bf 01 00 00 00       	mov    edi,0x1
c00012d5:	d3 e7                	shl    edi,cl
c00012d7:	89 f8                	mov    eax,edi
c00012d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012dd:	09 04 bd 94 ee 02 c0 	or     DWORD PTR [edi*4-0x3ffd116c],eax
c00012e4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ea:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012ed:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012f0:	e9 db fe ff ff       	jmp    c00011d0 <dlmalloc+0xc5>
c00012f5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012fb:	76 78                	jbe    c0001375 <dlmalloc+0x26a>
c00012fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001301:	8d 04 c5 94 eb 02 c0 	lea    eax,[eax*8-0x3ffd146c]
c0001308:	8d 48 f8             	lea    ecx,[eax-0x8]
c000130b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000130e:	39 ca                	cmp    edx,ecx
c0001310:	74 63                	je     c0001375 <dlmalloc+0x26a>
c0001312:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001315:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001318:	83 e3 fc             	and    ebx,0xfffffffc
c000131b:	39 de                	cmp    esi,ebx
c000131d:	77 52                	ja     c0001371 <dlmalloc+0x266>
c000131f:	89 df                	mov    edi,ebx
c0001321:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001324:	29 f7                	sub    edi,esi
c0001326:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001329:	01 d3                	add    ebx,edx
c000132b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000132e:	83 ff 0f             	cmp    edi,0xf
c0001331:	8d 42 08             	lea    eax,[edx+0x8]
c0001334:	77 09                	ja     c000133f <dlmalloc+0x234>
c0001336:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000133a:	e9 52 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000133f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001342:	83 ce 01             	or     esi,0x1
c0001345:	89 0d 9c eb 02 c0    	mov    DWORD PTR ds:0xc002eb9c,ecx
c000134b:	89 0d a0 eb 02 c0    	mov    DWORD PTR ds:0xc002eba0,ecx
c0001351:	c7 41 08 94 eb 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002eb94
c0001358:	c7 41 0c 94 eb 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002eb94
c000135f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001362:	89 fa                	mov    edx,edi
c0001364:	83 ca 01             	or     edx,0x1
c0001367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136a:	89 3b                	mov    DWORD PTR [ebx],edi
c000136c:	e9 20 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c0001371:	89 c2                	mov    edx,eax
c0001373:	eb 99                	jmp    c000130e <dlmalloc+0x203>
c0001375:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001379:	b8 01 00 00 00       	mov    eax,0x1
c000137e:	41                   	inc    ecx
c000137f:	89 cb                	mov    ebx,ecx
c0001381:	8d 14 cd 8c eb 02 c0 	lea    edx,[ecx*8-0x3ffd1474]
c0001388:	c1 eb 05             	shr    ebx,0x5
c000138b:	d3 e0                	shl    eax,cl
c000138d:	8b 3c 9d 94 ee 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd116c]
c0001394:	39 f8                	cmp    eax,edi
c0001396:	77 04                	ja     c000139c <dlmalloc+0x291>
c0001398:	85 c0                	test   eax,eax
c000139a:	75 26                	jne    c00013c2 <dlmalloc+0x2b7>
c000139c:	43                   	inc    ebx
c000139d:	83 fb 02             	cmp    ebx,0x2
c00013a0:	0f 87 a6 00 00 00    	ja     c000144c <dlmalloc+0x341>
c00013a6:	8b 3c 9d 94 ee 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd116c]
c00013ad:	85 ff                	test   edi,edi
c00013af:	74 eb                	je     c000139c <dlmalloc+0x291>
c00013b1:	89 d8                	mov    eax,ebx
c00013b3:	c1 e0 06             	shl    eax,0x6
c00013b6:	8d 14 85 8c eb 02 c0 	lea    edx,[eax*4-0x3ffd1474]
c00013bd:	b8 01 00 00 00       	mov    eax,0x1
c00013c2:	85 f8                	test   eax,edi
c00013c4:	75 07                	jne    c00013cd <dlmalloc+0x2c2>
c00013c6:	83 c2 08             	add    edx,0x8
c00013c9:	01 c0                	add    eax,eax
c00013cb:	eb f5                	jmp    c00013c2 <dlmalloc+0x2b7>
c00013cd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013d0:	39 ca                	cmp    edx,ecx
c00013d2:	75 14                	jne    c00013e8 <dlmalloc+0x2dd>
c00013d4:	89 c1                	mov    ecx,eax
c00013d6:	83 c2 08             	add    edx,0x8
c00013d9:	f7 d1                	not    ecx
c00013db:	01 c0                	add    eax,eax
c00013dd:	21 cf                	and    edi,ecx
c00013df:	89 3c 9d 94 ee 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd116c],edi
c00013e6:	eb ac                	jmp    c0001394 <dlmalloc+0x289>
c00013e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013eb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013ee:	83 e0 fc             	and    eax,0xfffffffc
c00013f1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013f4:	89 c3                	mov    ebx,eax
c00013f6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013f9:	29 f3                	sub    ebx,esi
c00013fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013fe:	83 fb 0f             	cmp    ebx,0xf
c0001401:	8d 41 08             	lea    eax,[ecx+0x8]
c0001404:	77 09                	ja     c000140f <dlmalloc+0x304>
c0001406:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000140a:	e9 82 00 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000140f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001412:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001418:	89 3d 9c eb 02 c0    	mov    DWORD PTR ds:0xc002eb9c,edi
c000141e:	89 3d a0 eb 02 c0    	mov    DWORD PTR ds:0xc002eba0,edi
c0001424:	c7 47 08 94 eb 02 c0 	mov    DWORD PTR [edi+0x8],0xc002eb94
c000142b:	c7 47 0c 94 eb 02 c0 	mov    DWORD PTR [edi+0xc],0xc002eb94
c0001432:	77 06                	ja     c000143a <dlmalloc+0x32f>
c0001434:	89 3d 90 eb 02 c0    	mov    DWORD PTR ds:0xc002eb90,edi
c000143a:	83 ce 01             	or     esi,0x1
c000143d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001440:	89 d9                	mov    ecx,ebx
c0001442:	83 c9 01             	or     ecx,0x1
c0001445:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001448:	89 1a                	mov    DWORD PTR [edx],ebx
c000144a:	eb 45                	jmp    c0001491 <dlmalloc+0x386>
c000144c:	a1 8c eb 02 c0       	mov    eax,ds:0xc002eb8c
c0001451:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001457:	83 e2 fc             	and    edx,0xfffffffc
c000145a:	39 d1                	cmp    ecx,edx
c000145c:	77 1e                	ja     c000147c <dlmalloc+0x371>
c000145e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001461:	89 f3                	mov    ebx,esi
c0001463:	89 0d 8c eb 02 c0    	mov    DWORD PTR ds:0xc002eb8c,ecx
c0001469:	83 cb 01             	or     ebx,0x1
c000146c:	29 f2                	sub    edx,esi
c000146e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001471:	83 ca 01             	or     edx,0x1
c0001474:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001477:	e9 2d fd ff ff       	jmp    c00011a9 <dlmalloc+0x9e>
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	89 f0                	mov    eax,esi
c0001481:	5b                   	pop    ebx
c0001482:	ba 60 eb 02 c0       	mov    edx,0xc002eb60
c0001487:	5e                   	pop    esi
c0001488:	5f                   	pop    edi
c0001489:	5d                   	pop    ebp
c000148a:	e9 16 fa ff ff       	jmp    c0000ea5 <sYSMALLOc>
c000148f:	31 c0                	xor    eax,eax
c0001491:	83 c4 1c             	add    esp,0x1c
c0001494:	5b                   	pop    ebx
c0001495:	5e                   	pop    esi
c0001496:	5f                   	pop    edi
c0001497:	5d                   	pop    ebp
c0001498:	c3                   	ret    

c0001499 <iALLOc>:
c0001499:	55                   	push   ebp
c000149a:	89 c5                	mov    ebp,eax
c000149c:	57                   	push   edi
c000149d:	56                   	push   esi
c000149e:	53                   	push   ebx
c000149f:	83 ec 2c             	sub    esp,0x2c
c00014a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ae:	83 3d 60 eb 02 c0 00 	cmp    DWORD PTR ds:0xc002eb60,0x0
c00014b5:	75 12                	jne    c00014c9 <iALLOc+0x30>
c00014b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014bb:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c00014c0:	e8 04 f8 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	74 12                	je     c00014e2 <iALLOc+0x49>
c00014d0:	85 ed                	test   ebp,ebp
c00014d2:	0f 84 64 01 00 00    	je     c000163c <iALLOc+0x1a3>
c00014d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014e0:	eb 33                	jmp    c0001515 <iALLOc+0x7c>
c00014e2:	85 ed                	test   ebp,ebp
c00014e4:	75 14                	jne    c00014fa <iALLOc+0x61>
c00014e6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014ee:	83 c4 2c             	add    esp,0x2c
c00014f1:	5b                   	pop    ebx
c00014f2:	5e                   	pop    esi
c00014f3:	5f                   	pop    edi
c00014f4:	5d                   	pop    ebp
c00014f5:	e9 11 fc ff ff       	jmp    c000110b <dlmalloc>
c00014fa:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001501:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001509:	83 f8 0f             	cmp    eax,0xf
c000150c:	76 07                	jbe    c0001515 <iALLOc+0x7c>
c000150e:	83 e0 f8             	and    eax,0xfffffff8
c0001511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001515:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000151a:	75 09                	jne    c0001525 <iALLOc+0x8c>
c000151c:	89 d0                	mov    eax,edx
c000151e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001521:	31 f6                	xor    esi,esi
c0001523:	eb 3b                	jmp    c0001560 <iALLOc+0xc7>
c0001525:	8b 02                	mov    eax,DWORD PTR [edx]
c0001527:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000152f:	83 c0 0b             	add    eax,0xb
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0xa5>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000153e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001542:	0f af f5             	imul   esi,ebp
c0001545:	eb 25                	jmp    c000156c <iALLOc+0xd3>
c0001547:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001549:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000154c:	bb 10 00 00 00       	mov    ebx,0x10
c0001551:	83 f9 0f             	cmp    ecx,0xf
c0001554:	76 05                	jbe    c000155b <iALLOc+0xc2>
c0001556:	83 e1 f8             	and    ecx,0xfffffff8
c0001559:	89 cb                	mov    ebx,ecx
c000155b:	01 de                	add    esi,ebx
c000155d:	83 c0 04             	add    eax,0x4
c0001560:	39 c7                	cmp    edi,eax
c0001562:	75 e3                	jne    c0001547 <iALLOc+0xae>
c0001564:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000156c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001570:	8b 1d b4 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb4
c0001576:	83 ec 0c             	sub    esp,0xc
c0001579:	c7 05 b4 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eeb4,0x0
c0001583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001587:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000158b:	50                   	push   eax
c000158c:	e8 7a fb ff ff       	call   c000110b <dlmalloc>
c0001591:	83 c4 10             	add    esp,0x10
c0001594:	89 1d b4 ee 02 c0    	mov    DWORD PTR ds:0xc002eeb4,ebx
c000159a:	85 c0                	test   eax,eax
c000159c:	0f 84 92 00 00 00    	je     c0001634 <iALLOc+0x19b>
c00015a2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015a5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015a8:	83 e3 fc             	and    ebx,0xfffffffc
c00015ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015af:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015b4:	74 1e                	je     c00015d4 <iALLOc+0x13b>
c00015b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ba:	89 d9                	mov    ecx,ebx
c00015bc:	52                   	push   edx
c00015bd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015c1:	83 e9 04             	sub    ecx,0x4
c00015c4:	51                   	push   ecx
c00015c5:	6a 00                	push   0x0
c00015c7:	50                   	push   eax
c00015c8:	e8 9f f1 ff ff       	call   c000076c <memset>
c00015cd:	83 c4 10             	add    esp,0x10
c00015d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015d9:	75 14                	jne    c00015ef <iALLOc+0x156>
c00015db:	8d 04 37             	lea    eax,[edi+esi*1]
c00015de:	29 f3                	sub    ebx,esi
c00015e0:	8d 48 08             	lea    ecx,[eax+0x8]
c00015e3:	83 cb 01             	or     ebx,0x1
c00015e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ed:	89 f3                	mov    ebx,esi
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	4d                   	dec    ebp
c00015f2:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015f9:	39 c5                	cmp    ebp,eax
c00015fb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015fe:	74 2c                	je     c000162c <iALLOc+0x193>
c0001600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001604:	85 c9                	test   ecx,ecx
c0001606:	75 15                	jne    c000161d <iALLOc+0x184>
c0001608:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000160b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000160e:	b9 10 00 00 00       	mov    ecx,0x10
c0001613:	83 fe 0f             	cmp    esi,0xf
c0001616:	76 05                	jbe    c000161d <iALLOc+0x184>
c0001618:	83 e6 f8             	and    esi,0xfffffff8
c000161b:	89 f1                	mov    ecx,esi
c000161d:	89 ce                	mov    esi,ecx
c000161f:	29 cb                	sub    ebx,ecx
c0001621:	83 ce 01             	or     esi,0x1
c0001624:	40                   	inc    eax
c0001625:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001628:	01 cf                	add    edi,ecx
c000162a:	eb c6                	jmp    c00015f2 <iALLOc+0x159>
c000162c:	83 cb 01             	or     ebx,0x1
c000162f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001632:	eb 08                	jmp    c000163c <iALLOc+0x1a3>
c0001634:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000163c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001640:	83 c4 2c             	add    esp,0x2c
c0001643:	5b                   	pop    ebx
c0001644:	5e                   	pop    esi
c0001645:	5f                   	pop    edi
c0001646:	5d                   	pop    ebp
c0001647:	c3                   	ret    

c0001648 <dlrealloc>:
c0001648:	55                   	push   ebp
c0001649:	57                   	push   edi
c000164a:	56                   	push   esi
c000164b:	53                   	push   ebx
c000164c:	83 ec 1c             	sub    esp,0x1c
c000164f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001657:	85 db                	test   ebx,ebx
c0001659:	75 10                	jne    c000166b <dlrealloc+0x23>
c000165b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000165f:	83 c4 1c             	add    esp,0x1c
c0001662:	5b                   	pop    ebx
c0001663:	5e                   	pop    esi
c0001664:	5f                   	pop    edi
c0001665:	5d                   	pop    ebp
c0001666:	e9 a0 fa ff ff       	jmp    c000110b <dlmalloc>
c000166b:	83 f8 df             	cmp    eax,0xffffffdf
c000166e:	76 07                	jbe    c0001677 <dlrealloc+0x2f>
c0001670:	31 db                	xor    ebx,ebx
c0001672:	e9 6a 01 00 00       	jmp    c00017e1 <dlrealloc+0x199>
c0001677:	83 c0 0b             	add    eax,0xb
c000167a:	bd 10 00 00 00       	mov    ebp,0x10
c000167f:	83 f8 0f             	cmp    eax,0xf
c0001682:	76 05                	jbe    c0001689 <dlrealloc+0x41>
c0001684:	83 e0 f8             	and    eax,0xfffffff8
c0001687:	89 c5                	mov    ebp,eax
c0001689:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000168c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000168f:	89 c6                	mov    esi,eax
c0001691:	83 e6 fc             	and    esi,0xfffffffc
c0001694:	a8 02                	test   al,0x2
c0001696:	75 d8                	jne    c0001670 <dlrealloc+0x28>
c0001698:	39 f5                	cmp    ebp,esi
c000169a:	0f 86 04 01 00 00    	jbe    c00017a4 <dlrealloc+0x15c>
c00016a0:	8d 14 37             	lea    edx,[edi+esi*1]
c00016a3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016a6:	39 15 8c eb 02 c0    	cmp    DWORD PTR ds:0xc002eb8c,edx
c00016ac:	75 33                	jne    c00016e1 <dlrealloc+0x99>
c00016ae:	83 e1 fc             	and    ecx,0xfffffffc
c00016b1:	01 f1                	add    ecx,esi
c00016b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016b7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00016ba:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016be:	77 49                	ja     c0001709 <dlrealloc+0xc1>
c00016c0:	01 ef                	add    edi,ebp
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 e8                	or     eax,ebp
c00016c7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ca:	89 3d 8c eb 02 c0    	mov    DWORD PTR ds:0xc002eb8c,edi
c00016d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016d4:	29 e8                	sub    eax,ebp
c00016d6:	83 c8 01             	or     eax,0x1
c00016d9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016dc:	e9 00 01 00 00       	jmp    c00017e1 <dlrealloc+0x199>
c00016e1:	89 c8                	mov    eax,ecx
c00016e3:	83 e0 fe             	and    eax,0xfffffffe
c00016e6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016eb:	75 1c                	jne    c0001709 <dlrealloc+0xc1>
c00016ed:	83 e1 fc             	and    ecx,0xfffffffc
c00016f0:	01 f1                	add    ecx,esi
c00016f2:	39 cd                	cmp    ebp,ecx
c00016f4:	77 13                	ja     c0001709 <dlrealloc+0xc1>
c00016f6:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016fc:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016ff:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001702:	89 ce                	mov    esi,ecx
c0001704:	e9 9b 00 00 00       	jmp    c00017a4 <dlrealloc+0x15c>
c0001709:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000170d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001710:	83 ec 0c             	sub    esp,0xc
c0001713:	50                   	push   eax
c0001714:	e8 f2 f9 ff ff       	call   c000110b <dlmalloc>
c0001719:	83 c4 10             	add    esp,0x10
c000171c:	85 c0                	test   eax,eax
c000171e:	0f 84 4c ff ff ff    	je     c0001670 <dlrealloc+0x28>
c0001724:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000172b:	39 ca                	cmp    edx,ecx
c000172d:	75 0a                	jne    c0001739 <dlrealloc+0xf1>
c000172f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001732:	83 e0 fc             	and    eax,0xfffffffc
c0001735:	01 c6                	add    esi,eax
c0001737:	eb 6b                	jmp    c00017a4 <dlrealloc+0x15c>
c0001739:	8d 4e fc             	lea    ecx,[esi-0x4]
c000173c:	83 f9 27             	cmp    ecx,0x27
c000173f:	76 08                	jbe    c0001749 <dlrealloc+0x101>
c0001741:	89 de                	mov    esi,ebx
c0001743:	89 c7                	mov    edi,eax
c0001745:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001747:	eb 43                	jmp    c000178c <dlrealloc+0x144>
c0001749:	8b 13                	mov    edx,DWORD PTR [ebx]
c000174b:	83 f9 13             	cmp    ecx,0x13
c000174e:	89 10                	mov    DWORD PTR [eax],edx
c0001750:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001753:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001756:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001759:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000175c:	76 2e                	jbe    c000178c <dlrealloc+0x144>
c000175e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001761:	83 f9 1b             	cmp    ecx,0x1b
c0001764:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001767:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000176a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000176d:	76 1d                	jbe    c000178c <dlrealloc+0x144>
c000176f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001772:	83 f9 23             	cmp    ecx,0x23
c0001775:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001778:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000177b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000177e:	76 0c                	jbe    c000178c <dlrealloc+0x144>
c0001780:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001783:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001786:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001789:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000178c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	53                   	push   ebx
c0001794:	e8 17 f6 ff ff       	call   c0000db0 <dlfree>
c0001799:	83 c4 10             	add    esp,0x10
c000179c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017a0:	89 c3                	mov    ebx,eax
c00017a2:	eb 3d                	jmp    c00017e1 <dlrealloc+0x199>
c00017a4:	89 f2                	mov    edx,esi
c00017a6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017a9:	29 ea                	sub    edx,ebp
c00017ab:	83 e1 01             	and    ecx,0x1
c00017ae:	8d 04 37             	lea    eax,[edi+esi*1]
c00017b1:	83 fa 0f             	cmp    edx,0xf
c00017b4:	77 0b                	ja     c00017c1 <dlrealloc+0x179>
c00017b6:	09 ce                	or     esi,ecx
c00017b8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017bb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bf:	eb 20                	jmp    c00017e1 <dlrealloc+0x199>
c00017c1:	01 ef                	add    edi,ebp
c00017c3:	83 ec 0c             	sub    esp,0xc
c00017c6:	09 cd                	or     ebp,ecx
c00017c8:	83 ca 01             	or     edx,0x1
c00017cb:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017ce:	83 c7 08             	add    edi,0x8
c00017d1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017d4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017d8:	57                   	push   edi
c00017d9:	e8 d2 f5 ff ff       	call   c0000db0 <dlfree>
c00017de:	83 c4 10             	add    esp,0x10
c00017e1:	83 c4 1c             	add    esp,0x1c
c00017e4:	89 d8                	mov    eax,ebx
c00017e6:	5b                   	pop    ebx
c00017e7:	5e                   	pop    esi
c00017e8:	5f                   	pop    edi
c00017e9:	5d                   	pop    ebp
c00017ea:	c3                   	ret    

c00017eb <dlmemalign>:
c00017eb:	55                   	push   ebp
c00017ec:	57                   	push   edi
c00017ed:	56                   	push   esi
c00017ee:	53                   	push   ebx
c00017ef:	83 ec 0c             	sub    esp,0xc
c00017f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017fa:	83 fa 08             	cmp    edx,0x8
c00017fd:	77 10                	ja     c000180f <dlmemalign+0x24>
c00017ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001803:	83 c4 0c             	add    esp,0xc
c0001806:	5b                   	pop    ebx
c0001807:	5e                   	pop    esi
c0001808:	5f                   	pop    edi
c0001809:	5d                   	pop    ebp
c000180a:	e9 fc f8 ff ff       	jmp    c000110b <dlmalloc>
c000180f:	bf 10 00 00 00       	mov    edi,0x10
c0001814:	83 fa 0f             	cmp    edx,0xf
c0001817:	76 13                	jbe    c000182c <dlmemalign+0x41>
c0001819:	8d 4a ff             	lea    ecx,[edx-0x1]
c000181c:	85 d1                	test   ecx,edx
c000181e:	75 04                	jne    c0001824 <dlmemalign+0x39>
c0001820:	89 d7                	mov    edi,edx
c0001822:	eb 08                	jmp    c000182c <dlmemalign+0x41>
c0001824:	39 d7                	cmp    edi,edx
c0001826:	73 04                	jae    c000182c <dlmemalign+0x41>
c0001828:	01 ff                	add    edi,edi
c000182a:	eb f8                	jmp    c0001824 <dlmemalign+0x39>
c000182c:	83 f8 df             	cmp    eax,0xffffffdf
c000182f:	76 07                	jbe    c0001838 <dlmemalign+0x4d>
c0001831:	31 c0                	xor    eax,eax
c0001833:	e9 ce 00 00 00       	jmp    c0001906 <dlmemalign+0x11b>
c0001838:	83 c0 0b             	add    eax,0xb
c000183b:	bd 10 00 00 00       	mov    ebp,0x10
c0001840:	83 f8 0f             	cmp    eax,0xf
c0001843:	76 05                	jbe    c000184a <dlmemalign+0x5f>
c0001845:	83 e0 f8             	and    eax,0xfffffff8
c0001848:	89 c5                	mov    ebp,eax
c000184a:	83 ec 0c             	sub    esp,0xc
c000184d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001851:	50                   	push   eax
c0001852:	e8 b4 f8 ff ff       	call   c000110b <dlmalloc>
c0001857:	83 c4 10             	add    esp,0x10
c000185a:	89 c1                	mov    ecx,eax
c000185c:	85 c0                	test   eax,eax
c000185e:	74 d1                	je     c0001831 <dlmemalign+0x46>
c0001860:	31 d2                	xor    edx,edx
c0001862:	8d 70 f8             	lea    esi,[eax-0x8]
c0001865:	f7 f7                	div    edi
c0001867:	85 d2                	test   edx,edx
c0001869:	74 62                	je     c00018cd <dlmemalign+0xe2>
c000186b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000186f:	89 f8                	mov    eax,edi
c0001871:	f7 d8                	neg    eax
c0001873:	21 c3                	and    ebx,eax
c0001875:	83 eb 08             	sub    ebx,0x8
c0001878:	89 d8                	mov    eax,ebx
c000187a:	29 f0                	sub    eax,esi
c000187c:	83 f8 0f             	cmp    eax,0xf
c000187f:	77 02                	ja     c0001883 <dlmemalign+0x98>
c0001881:	01 fb                	add    ebx,edi
c0001883:	89 d8                	mov    eax,ebx
c0001885:	29 f0                	sub    eax,esi
c0001887:	89 c6                	mov    esi,eax
c0001889:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188c:	89 c2                	mov    edx,eax
c000188e:	83 e2 fc             	and    edx,0xfffffffc
c0001891:	29 f2                	sub    edx,esi
c0001893:	a8 02                	test   al,0x2
c0001895:	74 10                	je     c00018a7 <dlmemalign+0xbc>
c0001897:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000189a:	83 ca 02             	or     edx,0x2
c000189d:	8d 43 08             	lea    eax,[ebx+0x8]
c00018a0:	89 33                	mov    DWORD PTR [ebx],esi
c00018a2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018a5:	eb 5f                	jmp    c0001906 <dlmemalign+0x11b>
c00018a7:	83 ec 0c             	sub    esp,0xc
c00018aa:	89 d0                	mov    eax,edx
c00018ac:	83 c8 01             	or     eax,0x1
c00018af:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018b2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018b7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ba:	83 e0 01             	and    eax,0x1
c00018bd:	09 f0                	or     eax,esi
c00018bf:	89 de                	mov    esi,ebx
c00018c1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018c4:	51                   	push   ecx
c00018c5:	e8 e6 f4 ff ff       	call   c0000db0 <dlfree>
c00018ca:	83 c4 10             	add    esp,0x10
c00018cd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d0:	a8 02                	test   al,0x2
c00018d2:	75 2f                	jne    c0001903 <dlmemalign+0x118>
c00018d4:	83 e0 fc             	and    eax,0xfffffffc
c00018d7:	8d 55 10             	lea    edx,[ebp+0x10]
c00018da:	39 c2                	cmp    edx,eax
c00018dc:	73 25                	jae    c0001903 <dlmemalign+0x118>
c00018de:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018e1:	83 ec 0c             	sub    esp,0xc
c00018e4:	29 e8                	sub    eax,ebp
c00018e6:	83 c2 08             	add    edx,0x8
c00018e9:	83 c8 01             	or     eax,0x1
c00018ec:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018ef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f2:	83 e0 01             	and    eax,0x1
c00018f5:	09 c5                	or     ebp,eax
c00018f7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018fa:	52                   	push   edx
c00018fb:	e8 b0 f4 ff ff       	call   c0000db0 <dlfree>
c0001900:	83 c4 10             	add    esp,0x10
c0001903:	8d 46 08             	lea    eax,[esi+0x8]
c0001906:	83 c4 0c             	add    esp,0xc
c0001909:	5b                   	pop    ebx
c000190a:	5e                   	pop    esi
c000190b:	5f                   	pop    edi
c000190c:	5d                   	pop    ebp
c000190d:	c3                   	ret    

c000190e <dlcalloc>:
c000190e:	53                   	push   ebx
c000190f:	83 ec 14             	sub    esp,0x14
c0001912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001916:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000191b:	50                   	push   eax
c000191c:	e8 ea f7 ff ff       	call   c000110b <dlmalloc>
c0001921:	83 c4 10             	add    esp,0x10
c0001924:	89 c3                	mov    ebx,eax
c0001926:	85 c0                	test   eax,eax
c0001928:	74 77                	je     c00019a1 <dlcalloc+0x93>
c000192a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000192d:	89 d0                	mov    eax,edx
c000192f:	83 e0 fc             	and    eax,0xfffffffc
c0001932:	80 e2 02             	and    dl,0x2
c0001935:	75 5a                	jne    c0001991 <dlcalloc+0x83>
c0001937:	83 e8 04             	sub    eax,0x4
c000193a:	83 f8 27             	cmp    eax,0x27
c000193d:	76 03                	jbe    c0001942 <dlcalloc+0x34>
c000193f:	51                   	push   ecx
c0001940:	eb 53                	jmp    c0001995 <dlcalloc+0x87>
c0001942:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001948:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000194f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001956:	83 f8 13             	cmp    eax,0x13
c0001959:	76 46                	jbe    c00019a1 <dlcalloc+0x93>
c000195b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001962:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001969:	83 f8 1b             	cmp    eax,0x1b
c000196c:	76 33                	jbe    c00019a1 <dlcalloc+0x93>
c000196e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001975:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000197c:	83 f8 23             	cmp    eax,0x23
c000197f:	76 20                	jbe    c00019a1 <dlcalloc+0x93>
c0001981:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001988:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000198f:	eb 10                	jmp    c00019a1 <dlcalloc+0x93>
c0001991:	83 e8 08             	sub    eax,0x8
c0001994:	52                   	push   edx
c0001995:	50                   	push   eax
c0001996:	6a 00                	push   0x0
c0001998:	53                   	push   ebx
c0001999:	e8 ce ed ff ff       	call   c000076c <memset>
c000199e:	83 c4 10             	add    esp,0x10
c00019a1:	89 d8                	mov    eax,ebx
c00019a3:	83 c4 08             	add    esp,0x8
c00019a6:	5b                   	pop    ebx
c00019a7:	c3                   	ret    

c00019a8 <dlcfree>:
c00019a8:	e9 03 f4 ff ff       	jmp    c0000db0 <dlfree>

c00019ad <dlindependent_calloc>:
c00019ad:	83 ec 28             	sub    esp,0x28
c00019b0:	b9 03 00 00 00       	mov    ecx,0x3
c00019b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c9:	e8 cb fa ff ff       	call   c0001499 <iALLOc>
c00019ce:	83 c4 2c             	add    esp,0x2c
c00019d1:	c3                   	ret    

c00019d2 <dlindependent_comalloc>:
c00019d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019da:	31 c9                	xor    ecx,ecx
c00019dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019e4:	e9 b0 fa ff ff       	jmp    c0001499 <iALLOc>

c00019e9 <dlvalloc>:
c00019e9:	83 ec 0c             	sub    esp,0xc
c00019ec:	83 3d 60 eb 02 c0 00 	cmp    DWORD PTR ds:0xc002eb60,0x0
c00019f3:	75 0a                	jne    c00019ff <dlvalloc+0x16>
c00019f5:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c00019fa:	e8 ca f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c00019ff:	50                   	push   eax
c0001a00:	50                   	push   eax
c0001a01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a05:	ff 35 bc ee 02 c0    	push   DWORD PTR ds:0xc002eebc
c0001a0b:	e8 db fd ff ff       	call   c00017eb <dlmemalign>
c0001a10:	83 c4 1c             	add    esp,0x1c
c0001a13:	c3                   	ret    

c0001a14 <dlpvalloc>:
c0001a14:	83 ec 0c             	sub    esp,0xc
c0001a17:	83 3d 60 eb 02 c0 00 	cmp    DWORD PTR ds:0xc002eb60,0x0
c0001a1e:	75 0a                	jne    c0001a2a <dlpvalloc+0x16>
c0001a20:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c0001a25:	e8 9f f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a2a:	a1 bc ee 02 c0       	mov    eax,ds:0xc002eebc
c0001a2f:	89 c1                	mov    ecx,eax
c0001a31:	52                   	push   edx
c0001a32:	f7 d9                	neg    ecx
c0001a34:	52                   	push   edx
c0001a35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a39:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a3d:	21 ca                	and    edx,ecx
c0001a3f:	52                   	push   edx
c0001a40:	50                   	push   eax
c0001a41:	e8 a5 fd ff ff       	call   c00017eb <dlmemalign>
c0001a46:	83 c4 1c             	add    esp,0x1c
c0001a49:	c3                   	ret    

c0001a4a <dlmalloc_trim>:
c0001a4a:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c0001a4f:	e8 75 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a54:	31 c0                	xor    eax,eax
c0001a56:	c3                   	ret    

c0001a57 <dlmalloc_usable_size>:
c0001a57:	53                   	push   ebx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a5e:	85 c9                	test   ecx,ecx
c0001a60:	74 24                	je     c0001a86 <dlmalloc_usable_size+0x2f>
c0001a62:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a65:	f6 c2 02             	test   dl,0x2
c0001a68:	74 08                	je     c0001a72 <dlmalloc_usable_size+0x1b>
c0001a6a:	83 e2 fc             	and    edx,0xfffffffc
c0001a6d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a70:	eb 14                	jmp    c0001a86 <dlmalloc_usable_size+0x2f>
c0001a72:	89 d3                	mov    ebx,edx
c0001a74:	31 c0                	xor    eax,eax
c0001a76:	83 e3 fe             	and    ebx,0xfffffffe
c0001a79:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a7e:	74 06                	je     c0001a86 <dlmalloc_usable_size+0x2f>
c0001a80:	83 e2 fc             	and    edx,0xfffffffc
c0001a83:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a86:	5b                   	pop    ebx
c0001a87:	c3                   	ret    

c0001a88 <dlmallinfo>:
c0001a88:	55                   	push   ebp
c0001a89:	57                   	push   edi
c0001a8a:	56                   	push   esi
c0001a8b:	53                   	push   ebx
c0001a8c:	83 ec 08             	sub    esp,0x8
c0001a8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a93:	83 3d 8c eb 02 c0 00 	cmp    DWORD PTR ds:0xc002eb8c,0x0
c0001a9a:	75 0a                	jne    c0001aa6 <dlmallinfo+0x1e>
c0001a9c:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c0001aa1:	e8 23 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001aa6:	a1 8c eb 02 c0       	mov    eax,ds:0xc002eb8c
c0001aab:	31 ed                	xor    ebp,ebp
c0001aad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ab0:	31 c9                	xor    ecx,ecx
c0001ab2:	83 e0 fc             	and    eax,0xfffffffc
c0001ab5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ab9:	31 c0                	xor    eax,eax
c0001abb:	8b 14 85 64 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd149c]
c0001ac2:	85 d2                	test   edx,edx
c0001ac4:	74 0e                	je     c0001ad4 <dlmallinfo+0x4c>
c0001ac6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ac9:	45                   	inc    ebp
c0001aca:	83 e6 fc             	and    esi,0xfffffffc
c0001acd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ad0:	01 f1                	add    ecx,esi
c0001ad2:	eb ee                	jmp    c0001ac2 <dlmallinfo+0x3a>
c0001ad4:	40                   	inc    eax
c0001ad5:	83 f8 0a             	cmp    eax,0xa
c0001ad8:	75 e1                	jne    c0001abb <dlmallinfo+0x33>
c0001ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ae5:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ae8:	b8 94 eb 02 c0       	mov    eax,0xc002eb94
c0001aed:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001af0:	39 f0                	cmp    eax,esi
c0001af2:	74 10                	je     c0001b04 <dlmallinfo+0x7c>
c0001af4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001af7:	ff 04 24             	inc    DWORD PTR [esp]
c0001afa:	83 e7 fc             	and    edi,0xfffffffc
c0001afd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b00:	01 fa                	add    edx,edi
c0001b02:	eb ec                	jmp    c0001af0 <dlmallinfo+0x68>
c0001b04:	83 c0 08             	add    eax,0x8
c0001b07:	3d 8c ee 02 c0       	cmp    eax,0xc002ee8c
c0001b0c:	75 df                	jne    c0001aed <dlmallinfo+0x65>
c0001b0e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b11:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b14:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b17:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0001b1c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b1f:	89 03                	mov    DWORD PTR [ebx],eax
c0001b21:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b24:	8b 35 b0 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002eeb0
c0001b2a:	29 d0                	sub    eax,edx
c0001b2c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b2f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b32:	8b 35 c4 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002eec4
c0001b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b3c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b3f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b42:	8b 35 d4 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002eed4
c0001b48:	89 d8                	mov    eax,ebx
c0001b4a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b4d:	83 c4 08             	add    esp,0x8
c0001b50:	5b                   	pop    ebx
c0001b51:	5e                   	pop    esi
c0001b52:	5f                   	pop    edi
c0001b53:	5d                   	pop    ebp
c0001b54:	c2 04 00             	ret    0x4

c0001b57 <dlmalloc_stats>:
c0001b57:	83 ec 30             	sub    esp,0x30
c0001b5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b5e:	50                   	push   eax
c0001b5f:	e8 24 ff ff ff       	call   c0001a88 <dlmallinfo>
c0001b64:	83 c4 30             	add    esp,0x30
c0001b67:	c3                   	ret    

c0001b68 <dlmallopt>:
c0001b68:	56                   	push   esi
c0001b69:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c0001b6e:	53                   	push   ebx
c0001b6f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b77:	e8 4d f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001b7c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b7f:	83 f8 05             	cmp    eax,0x5
c0001b82:	77 67                	ja     c0001beb <dlmallopt+0x83>
c0001b84:	ff 24 85 44 9d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd62bc]
c0001b8b:	83 fb 50             	cmp    ebx,0x50
c0001b8e:	77 5b                	ja     c0001beb <dlmallopt+0x83>
c0001b90:	ba 08 00 00 00       	mov    edx,0x8
c0001b95:	85 db                	test   ebx,ebx
c0001b97:	74 12                	je     c0001bab <dlmallopt+0x43>
c0001b99:	83 c3 0b             	add    ebx,0xb
c0001b9c:	ba 10 00 00 00       	mov    edx,0x10
c0001ba1:	83 fb 0f             	cmp    ebx,0xf
c0001ba4:	76 05                	jbe    c0001bab <dlmallopt+0x43>
c0001ba6:	89 da                	mov    edx,ebx
c0001ba8:	83 e2 f8             	and    edx,0xfffffff8
c0001bab:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c0001bb0:	83 e0 03             	and    eax,0x3
c0001bb3:	09 d0                	or     eax,edx
c0001bb5:	a3 60 eb 02 c0       	mov    ds:0xc002eb60,eax
c0001bba:	eb 31                	jmp    c0001bed <dlmallopt+0x85>
c0001bbc:	89 1d a4 ee 02 c0    	mov    DWORD PTR ds:0xc002eea4,ebx
c0001bc2:	eb 06                	jmp    c0001bca <dlmallopt+0x62>
c0001bc4:	89 1d a8 ee 02 c0    	mov    DWORD PTR ds:0xc002eea8,ebx
c0001bca:	be 01 00 00 00       	mov    esi,0x1
c0001bcf:	eb 1c                	jmp    c0001bed <dlmallopt+0x85>
c0001bd1:	89 1d ac ee 02 c0    	mov    DWORD PTR ds:0xc002eeac,ebx
c0001bd7:	eb f1                	jmp    c0001bca <dlmallopt+0x62>
c0001bd9:	31 f6                	xor    esi,esi
c0001bdb:	85 db                	test   ebx,ebx
c0001bdd:	75 0e                	jne    c0001bed <dlmallopt+0x85>
c0001bdf:	c7 05 b4 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eeb4,0x0
c0001be9:	eb df                	jmp    c0001bca <dlmallopt+0x62>
c0001beb:	31 f6                	xor    esi,esi
c0001bed:	89 f0                	mov    eax,esi
c0001bef:	5b                   	pop    ebx
c0001bf0:	5e                   	pop    esi
c0001bf1:	c3                   	ret    

c0001bf2 <disk_status>:
c0001bf2:	31 c0                	xor    eax,eax
c0001bf4:	c3                   	ret    

c0001bf5 <disk_initialize>:
c0001bf5:	31 c0                	xor    eax,eax
c0001bf7:	c3                   	ret    

c0001bf8 <disk_read>:
c0001bf8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bfd:	0f b6 04 85 40 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd9c0]
c0001c05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c09:	e9 28 fa 01 00       	jmp    c0021636 <fatWrapperReadDisk>

c0001c0e <disk_write>:
c0001c0e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c13:	0f b6 04 85 40 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd9c0]
c0001c1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c1f:	e9 59 fa 01 00       	jmp    c002167d <fatWrapperWriteDisk>

c0001c24 <disk_ioctl>:
c0001c24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c2d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c32:	0f b6 04 85 40 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd9c0]
c0001c3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3e:	e9 81 fa 01 00       	jmp    c00216c4 <fatWrapperIoctl>

c0001c43 <ld_word>:
c0001c43:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c4a:	c1 e2 08             	shl    edx,0x8
c0001c4d:	09 d0                	or     eax,edx
c0001c4f:	c3                   	ret    

c0001c50 <ld_dword>:
c0001c50:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c54:	89 d1                	mov    ecx,edx
c0001c56:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c5a:	c1 e1 08             	shl    ecx,0x8
c0001c5d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c60:	09 ca                	or     edx,ecx
c0001c62:	c1 e2 08             	shl    edx,0x8
c0001c65:	09 d0                	or     eax,edx
c0001c67:	c3                   	ret    

c0001c68 <ld_qword>:
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	53                   	push   ebx
c0001c6b:	31 db                	xor    ebx,ebx
c0001c6d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c70:	89 df                	mov    edi,ebx
c0001c72:	89 ce                	mov    esi,ecx
c0001c74:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c78:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7c:	c1 e6 08             	shl    esi,0x8
c0001c7f:	09 f2                	or     edx,esi
c0001c81:	89 d6                	mov    esi,edx
c0001c83:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c87:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c8b:	c1 e6 08             	shl    esi,0x8
c0001c8e:	09 f2                	or     edx,esi
c0001c90:	89 d6                	mov    esi,edx
c0001c92:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c9d:	c1 e6 08             	shl    esi,0x8
c0001ca0:	89 fb                	mov    ebx,edi
c0001ca2:	09 f2                	or     edx,esi
c0001ca4:	89 d1                	mov    ecx,edx
c0001ca6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001caa:	c1 e1 08             	shl    ecx,0x8
c0001cad:	89 da                	mov    edx,ebx
c0001caf:	09 c8                	or     eax,ecx
c0001cb1:	5b                   	pop    ebx
c0001cb2:	5e                   	pop    esi
c0001cb3:	5f                   	pop    edi
c0001cb4:	c3                   	ret    

c0001cb5 <st_word>:
c0001cb5:	66 89 10             	mov    WORD PTR [eax],dx
c0001cb8:	c3                   	ret    

c0001cb9 <st_dword>:
c0001cb9:	89 10                	mov    DWORD PTR [eax],edx
c0001cbb:	c3                   	ret    

c0001cbc <st_qword>:
c0001cbc:	89 10                	mov    DWORD PTR [eax],edx
c0001cbe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cc1:	c3                   	ret    

c0001cc2 <mem_cpy>:
c0001cc2:	85 c9                	test   ecx,ecx
c0001cc4:	74 10                	je     c0001cd6 <mem_cpy+0x14>
c0001cc6:	57                   	push   edi
c0001cc7:	01 c1                	add    ecx,eax
c0001cc9:	56                   	push   esi
c0001cca:	89 c7                	mov    edi,eax
c0001ccc:	89 d6                	mov    esi,edx
c0001cce:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ccf:	39 f9                	cmp    ecx,edi
c0001cd1:	75 fb                	jne    c0001cce <mem_cpy+0xc>
c0001cd3:	5e                   	pop    esi
c0001cd4:	5f                   	pop    edi
c0001cd5:	c3                   	ret    
c0001cd6:	c3                   	ret    

c0001cd7 <mem_set>:
c0001cd7:	01 c1                	add    ecx,eax
c0001cd9:	40                   	inc    eax
c0001cda:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cdd:	39 c8                	cmp    eax,ecx
c0001cdf:	75 f8                	jne    c0001cd9 <mem_set+0x2>
c0001ce1:	c3                   	ret    

c0001ce2 <mem_cmp>:
c0001ce2:	57                   	push   edi
c0001ce3:	56                   	push   esi
c0001ce4:	89 c6                	mov    esi,eax
c0001ce6:	53                   	push   ebx
c0001ce7:	46                   	inc    esi
c0001ce8:	42                   	inc    edx
c0001ce9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ced:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cf1:	29 fb                	sub    ebx,edi
c0001cf3:	89 cf                	mov    edi,ecx
c0001cf5:	29 f7                	sub    edi,esi
c0001cf7:	01 c7                	add    edi,eax
c0001cf9:	74 04                	je     c0001cff <mem_cmp+0x1d>
c0001cfb:	85 db                	test   ebx,ebx
c0001cfd:	74 e8                	je     c0001ce7 <mem_cmp+0x5>
c0001cff:	89 d8                	mov    eax,ebx
c0001d01:	5b                   	pop    ebx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <chk_chr>:
c0001d05:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d08:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d0b:	74 07                	je     c0001d14 <chk_chr+0xf>
c0001d0d:	39 d1                	cmp    ecx,edx
c0001d0f:	74 03                	je     c0001d14 <chk_chr+0xf>
c0001d11:	40                   	inc    eax
c0001d12:	eb f1                	jmp    c0001d05 <chk_chr>
c0001d14:	89 c8                	mov    eax,ecx
c0001d16:	c3                   	ret    

c0001d17 <dbc_1st>:
c0001d17:	31 c0                	xor    eax,eax
c0001d19:	c3                   	ret    

c0001d1a <dbc_2nd>:
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	c3                   	ret    

c0001d1d <tchar2uni>:
c0001d1d:	57                   	push   edi
c0001d1e:	89 c7                	mov    edi,eax
c0001d20:	56                   	push   esi
c0001d21:	53                   	push   ebx
c0001d22:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d24:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d26:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d29:	84 c9                	test   cl,cl
c0001d2b:	78 0a                	js     c0001d37 <tchar2uni+0x1a>
c0001d2d:	0f b6 d1             	movzx  edx,cl
c0001d30:	89 f3                	mov    ebx,esi
c0001d32:	e9 9f 00 00 00       	jmp    c0001dd6 <tchar2uni+0xb9>
c0001d37:	88 ca                	mov    dl,cl
c0001d39:	83 e2 e0             	and    edx,0xffffffe0
c0001d3c:	80 fa c0             	cmp    dl,0xc0
c0001d3f:	75 0c                	jne    c0001d4d <tchar2uni+0x30>
c0001d41:	89 ca                	mov    edx,ecx
c0001d43:	b9 01 00 00 00       	mov    ecx,0x1
c0001d48:	83 e2 1f             	and    edx,0x1f
c0001d4b:	eb 2e                	jmp    c0001d7b <tchar2uni+0x5e>
c0001d4d:	88 ca                	mov    dl,cl
c0001d4f:	83 e2 f0             	and    edx,0xfffffff0
c0001d52:	80 fa e0             	cmp    dl,0xe0
c0001d55:	75 0c                	jne    c0001d63 <tchar2uni+0x46>
c0001d57:	89 ca                	mov    edx,ecx
c0001d59:	b9 02 00 00 00       	mov    ecx,0x2
c0001d5e:	83 e2 0f             	and    edx,0xf
c0001d61:	eb 18                	jmp    c0001d7b <tchar2uni+0x5e>
c0001d63:	88 ca                	mov    dl,cl
c0001d65:	83 e2 f8             	and    edx,0xfffffff8
c0001d68:	88 d0                	mov    al,dl
c0001d6a:	83 ca ff             	or     edx,0xffffffff
c0001d6d:	3c f0                	cmp    al,0xf0
c0001d6f:	75 6c                	jne    c0001ddd <tchar2uni+0xc0>
c0001d71:	89 ca                	mov    edx,ecx
c0001d73:	b9 03 00 00 00       	mov    ecx,0x3
c0001d78:	83 e2 07             	and    edx,0x7
c0001d7b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d7f:	46                   	inc    esi
c0001d80:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d83:	88 c8                	mov    al,cl
c0001d85:	83 e0 c0             	and    eax,0xffffffc0
c0001d88:	3c 80                	cmp    al,0x80
c0001d8a:	75 4e                	jne    c0001dda <tchar2uni+0xbd>
c0001d8c:	c1 e2 06             	shl    edx,0x6
c0001d8f:	83 e1 3f             	and    ecx,0x3f
c0001d92:	09 ca                	or     edx,ecx
c0001d94:	39 de                	cmp    esi,ebx
c0001d96:	75 e7                	jne    c0001d7f <tchar2uni+0x62>
c0001d98:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d9b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001da1:	77 37                	ja     c0001dda <tchar2uni+0xbd>
c0001da3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001da9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001daf:	76 29                	jbe    c0001dda <tchar2uni+0xbd>
c0001db1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001db7:	76 1d                	jbe    c0001dd6 <tchar2uni+0xb9>
c0001db9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dbf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dc5:	c1 e1 06             	shl    ecx,0x6
c0001dc8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dce:	09 ca                	or     edx,ecx
c0001dd0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dd6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dd8:	eb 03                	jmp    c0001ddd <tchar2uni+0xc0>
c0001dda:	83 ca ff             	or     edx,0xffffffff
c0001ddd:	5b                   	pop    ebx
c0001dde:	89 d0                	mov    eax,edx
c0001de0:	5e                   	pop    esi
c0001de1:	5f                   	pop    edi
c0001de2:	c3                   	ret    

c0001de3 <put_utf>:
c0001de3:	53                   	push   ebx
c0001de4:	83 f8 7f             	cmp    eax,0x7f
c0001de7:	89 c3                	mov    ebx,eax
c0001de9:	b0 00                	mov    al,0x0
c0001deb:	77 11                	ja     c0001dfe <put_utf+0x1b>
c0001ded:	85 c9                	test   ecx,ecx
c0001def:	0f 84 e5 00 00 00    	je     c0001eda <put_utf+0xf7>
c0001df5:	88 1a                	mov    BYTE PTR [edx],bl
c0001df7:	b0 01                	mov    al,0x1
c0001df9:	e9 dc 00 00 00       	jmp    c0001eda <put_utf+0xf7>
c0001dfe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e04:	77 23                	ja     c0001e29 <put_utf+0x46>
c0001e06:	83 f9 01             	cmp    ecx,0x1
c0001e09:	0f 86 cb 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e0f:	89 d8                	mov    eax,ebx
c0001e11:	83 e3 3f             	and    ebx,0x3f
c0001e14:	c1 e8 06             	shr    eax,0x6
c0001e17:	83 cb 80             	or     ebx,0xffffff80
c0001e1a:	83 c8 c0             	or     eax,0xffffffc0
c0001e1d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e20:	88 02                	mov    BYTE PTR [edx],al
c0001e22:	b0 02                	mov    al,0x2
c0001e24:	e9 b1 00 00 00       	jmp    c0001eda <put_utf+0xf7>
c0001e29:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e2f:	77 40                	ja     c0001e71 <put_utf+0x8e>
c0001e31:	83 f9 02             	cmp    ecx,0x2
c0001e34:	0f 86 a0 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e3a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e40:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e46:	0f 86 8e 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e4c:	89 d8                	mov    eax,ebx
c0001e4e:	c1 e8 0c             	shr    eax,0xc
c0001e51:	83 c8 e0             	or     eax,0xffffffe0
c0001e54:	88 02                	mov    BYTE PTR [edx],al
c0001e56:	89 d8                	mov    eax,ebx
c0001e58:	83 e3 3f             	and    ebx,0x3f
c0001e5b:	c1 e8 06             	shr    eax,0x6
c0001e5e:	83 cb 80             	or     ebx,0xffffff80
c0001e61:	83 e0 3f             	and    eax,0x3f
c0001e64:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e67:	83 c8 80             	or     eax,0xffffff80
c0001e6a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e6d:	b0 03                	mov    al,0x3
c0001e6f:	eb 69                	jmp    c0001eda <put_utf+0xf7>
c0001e71:	83 f9 03             	cmp    ecx,0x3
c0001e74:	76 64                	jbe    c0001eda <put_utf+0xf7>
c0001e76:	89 d9                	mov    ecx,ebx
c0001e78:	0f b7 c3             	movzx  eax,bx
c0001e7b:	66 31 c9             	xor    cx,cx
c0001e7e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e84:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e8a:	c1 e9 06             	shr    ecx,0x6
c0001e8d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e93:	77 43                	ja     c0001ed8 <put_utf+0xf5>
c0001e95:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e9b:	77 3b                	ja     c0001ed8 <put_utf+0xf5>
c0001e9d:	09 cb                	or     ebx,ecx
c0001e9f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ea5:	89 d8                	mov    eax,ebx
c0001ea7:	c1 e8 12             	shr    eax,0x12
c0001eaa:	83 c8 f0             	or     eax,0xfffffff0
c0001ead:	88 02                	mov    BYTE PTR [edx],al
c0001eaf:	89 d8                	mov    eax,ebx
c0001eb1:	c1 e8 0c             	shr    eax,0xc
c0001eb4:	83 e0 3f             	and    eax,0x3f
c0001eb7:	83 c8 80             	or     eax,0xffffff80
c0001eba:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ebd:	89 d8                	mov    eax,ebx
c0001ebf:	83 e3 3f             	and    ebx,0x3f
c0001ec2:	c1 e8 06             	shr    eax,0x6
c0001ec5:	83 cb 80             	or     ebx,0xffffff80
c0001ec8:	83 e0 3f             	and    eax,0x3f
c0001ecb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ece:	83 c8 80             	or     eax,0xffffff80
c0001ed1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ed4:	b0 04                	mov    al,0x4
c0001ed6:	eb 02                	jmp    c0001eda <put_utf+0xf7>
c0001ed8:	31 c0                	xor    eax,eax
c0001eda:	5b                   	pop    ebx
c0001edb:	c3                   	ret    

c0001edc <clst2sect>:
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	83 ea 02             	sub    edx,0x2
c0001ee1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ee4:	83 e8 02             	sub    eax,0x2
c0001ee7:	39 d0                	cmp    eax,edx
c0001ee9:	76 0d                	jbe    c0001ef8 <clst2sect+0x1c>
c0001eeb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001eef:	f7 e2                	mul    edx
c0001ef1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ef4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001ef7:	c3                   	ret    
c0001ef8:	31 c0                	xor    eax,eax
c0001efa:	31 d2                	xor    edx,edx
c0001efc:	c3                   	ret    

c0001efd <clmt_clust>:
c0001efd:	57                   	push   edi
c0001efe:	89 cf                	mov    edi,ecx
c0001f00:	56                   	push   esi
c0001f01:	89 d6                	mov    esi,edx
c0001f03:	53                   	push   ebx
c0001f04:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f08:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f0b:	89 f2                	mov    edx,esi
c0001f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f0f:	c1 ef 09             	shr    edi,0x9
c0001f12:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f16:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f19:	89 f9                	mov    ecx,edi
c0001f1b:	31 ff                	xor    edi,edi
c0001f1d:	57                   	push   edi
c0001f1e:	56                   	push   esi
c0001f1f:	51                   	push   ecx
c0001f20:	52                   	push   edx
c0001f21:	e8 be 53 02 00       	call   c00272e4 <__udivdi3>
c0001f26:	83 c4 10             	add    esp,0x10
c0001f29:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f2b:	85 d2                	test   edx,edx
c0001f2d:	74 10                	je     c0001f3f <clmt_clust+0x42>
c0001f2f:	39 d0                	cmp    eax,edx
c0001f31:	72 07                	jb     c0001f3a <clmt_clust+0x3d>
c0001f33:	29 d0                	sub    eax,edx
c0001f35:	83 c3 08             	add    ebx,0x8
c0001f38:	eb ef                	jmp    c0001f29 <clmt_clust+0x2c>
c0001f3a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f3d:	89 c2                	mov    edx,eax
c0001f3f:	5b                   	pop    ebx
c0001f40:	89 d0                	mov    eax,edx
c0001f42:	5e                   	pop    esi
c0001f43:	5f                   	pop    edi
c0001f44:	c3                   	ret    

c0001f45 <pick_lfn>:
c0001f45:	55                   	push   ebp
c0001f46:	57                   	push   edi
c0001f47:	56                   	push   esi
c0001f48:	89 d6                	mov    esi,edx
c0001f4a:	53                   	push   ebx
c0001f4b:	89 c3                	mov    ebx,eax
c0001f4d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f50:	e8 ee fc ff ff       	call   c0001c43 <ld_word>
c0001f55:	66 85 c0             	test   ax,ax
c0001f58:	74 04                	je     c0001f5e <pick_lfn+0x19>
c0001f5a:	31 c0                	xor    eax,eax
c0001f5c:	eb 5c                	jmp    c0001fba <pick_lfn+0x75>
c0001f5e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f61:	bd 01 00 00 00       	mov    ebp,0x1
c0001f66:	83 e1 bf             	and    ecx,0xffffffbf
c0001f69:	31 ff                	xor    edi,edi
c0001f6b:	49                   	dec    ecx
c0001f6c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f6f:	0f b6 87 60 9e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd61a0]
c0001f76:	01 f0                	add    eax,esi
c0001f78:	e8 c6 fc ff ff       	call   c0001c43 <ld_word>
c0001f7d:	66 85 ed             	test   bp,bp
c0001f80:	74 11                	je     c0001f93 <pick_lfn+0x4e>
c0001f82:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f88:	77 d0                	ja     c0001f5a <pick_lfn+0x15>
c0001f8a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f8e:	89 c5                	mov    ebp,eax
c0001f90:	41                   	inc    ecx
c0001f91:	eb 04                	jmp    c0001f97 <pick_lfn+0x52>
c0001f93:	66 40                	inc    ax
c0001f95:	75 c3                	jne    c0001f5a <pick_lfn+0x15>
c0001f97:	47                   	inc    edi
c0001f98:	83 ff 0d             	cmp    edi,0xd
c0001f9b:	75 d2                	jne    c0001f6f <pick_lfn+0x2a>
c0001f9d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fa0:	74 13                	je     c0001fb5 <pick_lfn+0x70>
c0001fa2:	66 85 ed             	test   bp,bp
c0001fa5:	74 0e                	je     c0001fb5 <pick_lfn+0x70>
c0001fa7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fad:	77 ab                	ja     c0001f5a <pick_lfn+0x15>
c0001faf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fb5:	b8 01 00 00 00       	mov    eax,0x1
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	5f                   	pop    edi
c0001fbd:	5d                   	pop    ebp
c0001fbe:	c3                   	ret    

c0001fbf <put_lfn>:
c0001fbf:	55                   	push   ebp
c0001fc0:	31 ed                	xor    ebp,ebp
c0001fc2:	57                   	push   edi
c0001fc3:	89 d7                	mov    edi,edx
c0001fc5:	56                   	push   esi
c0001fc6:	31 f6                	xor    esi,esi
c0001fc8:	53                   	push   ebx
c0001fc9:	83 ec 08             	sub    esp,0x8
c0001fcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fcf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fd7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fdd:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fe0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fe3:	31 d2                	xor    edx,edx
c0001fe5:	e8 cb fc ff ff       	call   c0001cb5 <st_word>
c0001fea:	0f b6 d9             	movzx  ebx,cl
c0001fed:	4b                   	dec    ebx
c0001fee:	6b db 0d             	imul   ebx,ebx,0xd
c0001ff1:	66 83 fe ff          	cmp    si,0xffff
c0001ff5:	74 08                	je     c0001fff <put_lfn+0x40>
c0001ff7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001ffa:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001ffe:	43                   	inc    ebx
c0001fff:	0f b6 85 60 9e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd61a0]
c0002006:	0f b7 d6             	movzx  edx,si
c0002009:	01 f8                	add    eax,edi
c000200b:	e8 a5 fc ff ff       	call   c0001cb5 <st_word>
c0002010:	66 85 f6             	test   si,si
c0002013:	75 03                	jne    c0002018 <put_lfn+0x59>
c0002015:	83 ce ff             	or     esi,0xffffffff
c0002018:	45                   	inc    ebp
c0002019:	83 fd 0d             	cmp    ebp,0xd
c000201c:	75 d3                	jne    c0001ff1 <put_lfn+0x32>
c000201e:	66 46                	inc    si
c0002020:	74 0a                	je     c000202c <put_lfn+0x6d>
c0002022:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002025:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000202a:	75 09                	jne    c0002035 <put_lfn+0x76>
c000202c:	88 c8                	mov    al,cl
c000202e:	83 c8 40             	or     eax,0x40
c0002031:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002035:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002039:	88 07                	mov    BYTE PTR [edi],al
c000203b:	83 c4 08             	add    esp,0x8
c000203e:	5b                   	pop    ebx
c000203f:	5e                   	pop    esi
c0002040:	5f                   	pop    edi
c0002041:	5d                   	pop    ebp
c0002042:	c3                   	ret    

c0002043 <gen_numname>:
c0002043:	57                   	push   edi
c0002044:	89 cf                	mov    edi,ecx
c0002046:	56                   	push   esi
c0002047:	b9 0b 00 00 00       	mov    ecx,0xb
c000204c:	53                   	push   ebx
c000204d:	89 c6                	mov    esi,eax
c000204f:	83 ec 10             	sub    esp,0x10
c0002052:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002056:	e8 67 fc ff ff       	call   c0001cc2 <mem_cpy>
c000205b:	83 fb 05             	cmp    ebx,0x5
c000205e:	76 2d                	jbe    c000208d <gen_numname+0x4a>
c0002060:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002063:	66 85 c0             	test   ax,ax
c0002066:	74 25                	je     c000208d <gen_numname+0x4a>
c0002068:	83 c7 02             	add    edi,0x2
c000206b:	ba 10 00 00 00       	mov    edx,0x10
c0002070:	01 db                	add    ebx,ebx
c0002072:	89 c1                	mov    ecx,eax
c0002074:	66 d1 e8             	shr    ax,1
c0002077:	83 e1 01             	and    ecx,0x1
c000207a:	01 cb                	add    ebx,ecx
c000207c:	0f ba e3 10          	bt     ebx,0x10
c0002080:	73 06                	jae    c0002088 <gen_numname+0x45>
c0002082:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002088:	4a                   	dec    edx
c0002089:	75 e5                	jne    c0002070 <gen_numname+0x2d>
c000208b:	eb d3                	jmp    c0002060 <gen_numname+0x1d>
c000208d:	b8 07 00 00 00       	mov    eax,0x7
c0002092:	88 d9                	mov    cl,bl
c0002094:	83 e1 0f             	and    ecx,0xf
c0002097:	8d 51 30             	lea    edx,[ecx+0x30]
c000209a:	80 fa 39             	cmp    dl,0x39
c000209d:	76 03                	jbe    c00020a2 <gen_numname+0x5f>
c000209f:	8d 51 37             	lea    edx,[ecx+0x37]
c00020a2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020a5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020a9:	89 da                	mov    edx,ebx
c00020ab:	c1 ea 04             	shr    edx,0x4
c00020ae:	83 fb 0f             	cmp    ebx,0xf
c00020b1:	76 06                	jbe    c00020b9 <gen_numname+0x76>
c00020b3:	89 c8                	mov    eax,ecx
c00020b5:	89 d3                	mov    ebx,edx
c00020b7:	eb d9                	jmp    c0002092 <gen_numname+0x4f>
c00020b9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020be:	31 d2                	xor    edx,edx
c00020c0:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020c3:	8d 04 16             	lea    eax,[esi+edx*1]
c00020c6:	39 ca                	cmp    edx,ecx
c00020c8:	73 18                	jae    c00020e2 <gen_numname+0x9f>
c00020ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020cd:	3c 20                	cmp    al,0x20
c00020cf:	74 11                	je     c00020e2 <gen_numname+0x9f>
c00020d1:	e8 41 fc ff ff       	call   c0001d17 <dbc_1st>
c00020d6:	85 c0                	test   eax,eax
c00020d8:	74 05                	je     c00020df <gen_numname+0x9c>
c00020da:	39 d3                	cmp    ebx,edx
c00020dc:	74 04                	je     c00020e2 <gen_numname+0x9f>
c00020de:	42                   	inc    edx
c00020df:	42                   	inc    edx
c00020e0:	eb e1                	jmp    c00020c3 <gen_numname+0x80>
c00020e2:	b0 20                	mov    al,0x20
c00020e4:	83 f9 07             	cmp    ecx,0x7
c00020e7:	77 05                	ja     c00020ee <gen_numname+0xab>
c00020e9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020ed:	41                   	inc    ecx
c00020ee:	42                   	inc    edx
c00020ef:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020f3:	83 fa 07             	cmp    edx,0x7
c00020f6:	76 ea                	jbe    c00020e2 <gen_numname+0x9f>
c00020f8:	83 c4 10             	add    esp,0x10
c00020fb:	5b                   	pop    ebx
c00020fc:	5e                   	pop    esi
c00020fd:	5f                   	pop    edi
c00020fe:	c3                   	ret    

c00020ff <sum_sfn>:
c00020ff:	31 c9                	xor    ecx,ecx
c0002101:	31 d2                	xor    edx,edx
c0002103:	d0 ca                	ror    dl,1
c0002105:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002108:	41                   	inc    ecx
c0002109:	83 f9 0b             	cmp    ecx,0xb
c000210c:	75 f5                	jne    c0002103 <sum_sfn+0x4>
c000210e:	88 d0                	mov    al,dl
c0002110:	c3                   	ret    

c0002111 <xdir_sum>:
c0002111:	56                   	push   esi
c0002112:	31 c9                	xor    ecx,ecx
c0002114:	53                   	push   ebx
c0002115:	31 d2                	xor    edx,edx
c0002117:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000211b:	43                   	inc    ebx
c000211c:	c1 e3 05             	shl    ebx,0x5
c000211f:	83 fa 02             	cmp    edx,0x2
c0002122:	74 0b                	je     c000212f <xdir_sum+0x1e>
c0002124:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002128:	66 d1 c9             	ror    cx,1
c000212b:	01 f1                	add    ecx,esi
c000212d:	eb 05                	jmp    c0002134 <xdir_sum+0x23>
c000212f:	ba 03 00 00 00       	mov    edx,0x3
c0002134:	42                   	inc    edx
c0002135:	39 d3                	cmp    ebx,edx
c0002137:	77 e6                	ja     c000211f <xdir_sum+0xe>
c0002139:	89 c8                	mov    eax,ecx
c000213b:	5b                   	pop    ebx
c000213c:	5e                   	pop    esi
c000213d:	c3                   	ret    

c000213e <xsum32>:
c000213e:	d1 ca                	ror    edx,1
c0002140:	0f b6 c0             	movzx  eax,al
c0002143:	01 d0                	add    eax,edx
c0002145:	c3                   	ret    

c0002146 <get_xfileinfo>:
c0002146:	55                   	push   ebp
c0002147:	31 c9                	xor    ecx,ecx
c0002149:	57                   	push   edi
c000214a:	bd 40 00 00 00       	mov    ebp,0x40
c000214f:	56                   	push   esi
c0002150:	31 ff                	xor    edi,edi
c0002152:	53                   	push   ebx
c0002153:	89 c6                	mov    esi,eax
c0002155:	83 ec 0c             	sub    esp,0xc
c0002158:	89 d3                	mov    ebx,edx
c000215a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002161:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002165:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002168:	76 6d                	jbe    c00021d7 <get_xfileinfo+0x91>
c000216a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002170:	76 0b                	jbe    c000217d <get_xfileinfo+0x37>
c0002172:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002176:	bf 01 00 00 00       	mov    edi,0x1
c000217b:	eb 63                	jmp    c00021e0 <get_xfileinfo+0x9a>
c000217d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002183:	75 03                	jne    c0002188 <get_xfileinfo+0x42>
c0002185:	83 c5 02             	add    ebp,0x2
c0002188:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000218b:	83 c5 02             	add    ebp,0x2
c000218e:	e8 b0 fa ff ff       	call   c0001c43 <ld_word>
c0002193:	ff 04 24             	inc    DWORD PTR [esp]
c0002196:	66 85 c9             	test   cx,cx
c0002199:	75 0d                	jne    c00021a8 <get_xfileinfo+0x62>
c000219b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021a1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021a6:	76 2b                	jbe    c00021d3 <get_xfileinfo+0x8d>
c00021a8:	c1 e1 10             	shl    ecx,0x10
c00021ab:	ba ff 00 00 00       	mov    edx,0xff
c00021b0:	0f b7 c0             	movzx  eax,ax
c00021b3:	29 fa                	sub    edx,edi
c00021b5:	09 c8                	or     eax,ecx
c00021b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021bb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021c3:	e8 1b fc ff ff       	call   c0001de3 <put_utf>
c00021c8:	84 c0                	test   al,al
c00021ca:	74 a6                	je     c0002172 <get_xfileinfo+0x2c>
c00021cc:	0f b6 c0             	movzx  eax,al
c00021cf:	01 c7                	add    edi,eax
c00021d1:	31 c0                	xor    eax,eax
c00021d3:	89 c1                	mov    ecx,eax
c00021d5:	eb 8a                	jmp    c0002161 <get_xfileinfo+0x1b>
c00021d7:	85 ff                	test   edi,edi
c00021d9:	74 97                	je     c0002172 <get_xfileinfo+0x2c>
c00021db:	66 85 c9             	test   cx,cx
c00021de:	75 92                	jne    c0002172 <get_xfileinfo+0x2c>
c00021e0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021e5:	31 c0                	xor    eax,eax
c00021e7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021eb:	31 d2                	xor    edx,edx
c00021ed:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021f0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021f3:	80 e1 10             	and    cl,0x10
c00021f6:	75 08                	jne    c0002200 <get_xfileinfo+0xba>
c00021f8:	8d 46 38             	lea    eax,[esi+0x38]
c00021fb:	e8 68 fa ff ff       	call   c0001c68 <ld_qword>
c0002200:	89 03                	mov    DWORD PTR [ebx],eax
c0002202:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002205:	8d 46 0c             	lea    eax,[esi+0xc]
c0002208:	e8 36 fa ff ff       	call   c0001c43 <ld_word>
c000220d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002211:	8d 46 0e             	lea    eax,[esi+0xe]
c0002214:	e8 2a fa ff ff       	call   c0001c43 <ld_word>
c0002219:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000221d:	83 c4 0c             	add    esp,0xc
c0002220:	5b                   	pop    ebx
c0002221:	5e                   	pop    esi
c0002222:	5f                   	pop    edi
c0002223:	5d                   	pop    ebp
c0002224:	c3                   	ret    

c0002225 <get_ldnumber>:
c0002225:	8b 10                	mov    edx,DWORD PTR [eax]
c0002227:	85 d2                	test   edx,edx
c0002229:	74 14                	je     c000223f <get_ldnumber+0x1a>
c000222b:	56                   	push   esi
c000222c:	53                   	push   ebx
c000222d:	89 d3                	mov    ebx,edx
c000222f:	43                   	inc    ebx
c0002230:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002233:	80 f9 1f             	cmp    cl,0x1f
c0002236:	76 0d                	jbe    c0002245 <get_ldnumber+0x20>
c0002238:	80 f9 3a             	cmp    cl,0x3a
c000223b:	75 f2                	jne    c000222f <get_ldnumber+0xa>
c000223d:	eb 0a                	jmp    c0002249 <get_ldnumber+0x24>
c000223f:	83 c9 ff             	or     ecx,0xffffffff
c0002242:	89 c8                	mov    eax,ecx
c0002244:	c3                   	ret    
c0002245:	31 c9                	xor    ecx,ecx
c0002247:	eb 24                	jmp    c000226d <get_ldnumber+0x48>
c0002249:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000224c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000224f:	80 f9 09             	cmp    cl,0x9
c0002252:	77 16                	ja     c000226a <get_ldnumber+0x45>
c0002254:	83 c2 02             	add    edx,0x2
c0002257:	83 c9 ff             	or     ecx,0xffffffff
c000225a:	39 d3                	cmp    ebx,edx
c000225c:	75 0f                	jne    c000226d <get_ldnumber+0x48>
c000225e:	89 f2                	mov    edx,esi
c0002260:	89 18                	mov    DWORD PTR [eax],ebx
c0002262:	0f be ca             	movsx  ecx,dl
c0002265:	83 e9 30             	sub    ecx,0x30
c0002268:	eb 03                	jmp    c000226d <get_ldnumber+0x48>
c000226a:	83 c9 ff             	or     ecx,0xffffffff
c000226d:	89 c8                	mov    eax,ecx
c000226f:	5b                   	pop    ebx
c0002270:	5e                   	pop    esi
c0002271:	c3                   	ret    

c0002272 <crc32>:
c0002272:	56                   	push   esi
c0002273:	89 d6                	mov    esi,edx
c0002275:	53                   	push   ebx
c0002276:	b2 01                	mov    dl,0x1
c0002278:	bb 08 00 00 00       	mov    ebx,0x8
c000227d:	89 f1                	mov    ecx,esi
c000227f:	84 d1                	test   cl,dl
c0002281:	0f 95 c1             	setne  cl
c0002284:	0f b6 c9             	movzx  ecx,cl
c0002287:	31 c1                	xor    ecx,eax
c0002289:	89 c8                	mov    eax,ecx
c000228b:	d1 e8                	shr    eax,1
c000228d:	80 e1 01             	and    cl,0x1
c0002290:	74 05                	je     c0002297 <crc32+0x25>
c0002292:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002297:	d1 e2                	shl    edx,1
c0002299:	4b                   	dec    ebx
c000229a:	75 e1                	jne    c000227d <crc32+0xb>
c000229c:	5b                   	pop    ebx
c000229d:	5e                   	pop    esi
c000229e:	c3                   	ret    

c000229f <test_gpt_header>:
c000229f:	55                   	push   ebp
c00022a0:	b9 10 00 00 00       	mov    ecx,0x10
c00022a5:	57                   	push   edi
c00022a6:	ba 60 9d 02 c0       	mov    edx,0xc0029d60
c00022ab:	56                   	push   esi
c00022ac:	31 ff                	xor    edi,edi
c00022ae:	53                   	push   ebx
c00022af:	89 c3                	mov    ebx,eax
c00022b1:	e8 2c fa ff ff       	call   c0001ce2 <mem_cmp>
c00022b6:	85 c0                	test   eax,eax
c00022b8:	75 55                	jne    c000230f <test_gpt_header+0x70>
c00022ba:	89 c7                	mov    edi,eax
c00022bc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022c1:	83 ce ff             	or     esi,0xffffffff
c00022c4:	31 d2                	xor    edx,edx
c00022c6:	83 fd 03             	cmp    ebp,0x3
c00022c9:	76 05                	jbe    c00022d0 <test_gpt_header+0x31>
c00022cb:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022d0:	89 f0                	mov    eax,esi
c00022d2:	45                   	inc    ebp
c00022d3:	e8 9a ff ff ff       	call   c0002272 <crc32>
c00022d8:	83 fd 4c             	cmp    ebp,0x4c
c00022db:	89 c6                	mov    esi,eax
c00022dd:	75 e5                	jne    c00022c4 <test_gpt_header+0x25>
c00022df:	8d 43 10             	lea    eax,[ebx+0x10]
c00022e2:	f7 d6                	not    esi
c00022e4:	e8 67 f9 ff ff       	call   c0001c50 <ld_dword>
c00022e9:	39 c6                	cmp    esi,eax
c00022eb:	75 22                	jne    c000230f <test_gpt_header+0x70>
c00022ed:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f0:	e8 5b f9 ff ff       	call   c0001c50 <ld_dword>
c00022f5:	83 c0 80             	add    eax,0xffffff80
c00022f8:	75 15                	jne    c000230f <test_gpt_header+0x70>
c00022fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00022fd:	e8 4e f9 ff ff       	call   c0001c50 <ld_dword>
c0002302:	3d 80 00 00 00       	cmp    eax,0x80
c0002307:	0f 96 c0             	setbe  al
c000230a:	0f b6 c0             	movzx  eax,al
c000230d:	89 c7                	mov    edi,eax
c000230f:	5b                   	pop    ebx
c0002310:	89 f8                	mov    eax,edi
c0002312:	5e                   	pop    esi
c0002313:	5f                   	pop    edi
c0002314:	5d                   	pop    ebp
c0002315:	c3                   	ret    

c0002316 <make_rand>:
c0002316:	56                   	push   esi
c0002317:	85 c0                	test   eax,eax
c0002319:	53                   	push   ebx
c000231a:	75 05                	jne    c0002321 <make_rand+0xb>
c000231c:	b8 01 00 00 00       	mov    eax,0x1
c0002321:	01 d1                	add    ecx,edx
c0002323:	bb 08 00 00 00       	mov    ebx,0x8
c0002328:	89 c6                	mov    esi,eax
c000232a:	d1 e8                	shr    eax,1
c000232c:	83 e6 01             	and    esi,0x1
c000232f:	85 f6                	test   esi,esi
c0002331:	74 05                	je     c0002338 <make_rand+0x22>
c0002333:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002338:	4b                   	dec    ebx
c0002339:	75 ed                	jne    c0002328 <make_rand+0x12>
c000233b:	42                   	inc    edx
c000233c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000233f:	39 ca                	cmp    edx,ecx
c0002341:	75 e0                	jne    c0002323 <make_rand+0xd>
c0002343:	5b                   	pop    ebx
c0002344:	5e                   	pop    esi
c0002345:	c3                   	ret    

c0002346 <validate>:
c0002346:	56                   	push   esi
c0002347:	53                   	push   ebx
c0002348:	89 d6                	mov    esi,edx
c000234a:	51                   	push   ecx
c000234b:	85 c0                	test   eax,eax
c000234d:	75 09                	jne    c0002358 <validate+0x12>
c000234f:	b8 09 00 00 00       	mov    eax,0x9
c0002354:	31 c9                	xor    ecx,ecx
c0002356:	eb 2f                	jmp    c0002387 <validate+0x41>
c0002358:	89 c3                	mov    ebx,eax
c000235a:	8b 00                	mov    eax,DWORD PTR [eax]
c000235c:	85 c0                	test   eax,eax
c000235e:	74 ef                	je     c000234f <validate+0x9>
c0002360:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002363:	74 ea                	je     c000234f <validate+0x9>
c0002365:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002369:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000236d:	75 e0                	jne    c000234f <validate+0x9>
c000236f:	83 ec 0c             	sub    esp,0xc
c0002372:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002376:	50                   	push   eax
c0002377:	e8 76 f8 ff ff       	call   c0001bf2 <disk_status>
c000237c:	83 c4 10             	add    esp,0x10
c000237f:	a8 01                	test   al,0x1
c0002381:	75 cc                	jne    c000234f <validate+0x9>
c0002383:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002385:	31 c0                	xor    eax,eax
c0002387:	89 0e                	mov    DWORD PTR [esi],ecx
c0002389:	5a                   	pop    edx
c000238a:	5b                   	pop    ebx
c000238b:	5e                   	pop    esi
c000238c:	c3                   	ret    

c000238d <sync_window>:
c000238d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002391:	0f 84 85 00 00 00    	je     c000241c <sync_window+0x8f>
c0002397:	55                   	push   ebp
c0002398:	8d 68 54             	lea    ebp,[eax+0x54]
c000239b:	57                   	push   edi
c000239c:	56                   	push   esi
c000239d:	53                   	push   ebx
c000239e:	89 c3                	mov    ebx,eax
c00023a0:	83 ec 28             	sub    esp,0x28
c00023a3:	6a 01                	push   0x1
c00023a5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023a8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023ab:	55                   	push   ebp
c00023ac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b0:	50                   	push   eax
c00023b1:	e8 58 f8 ff ff       	call   c0001c0e <disk_write>
c00023b6:	83 c4 20             	add    esp,0x20
c00023b9:	ba 01 00 00 00       	mov    edx,0x1
c00023be:	85 c0                	test   eax,eax
c00023c0:	75 50                	jne    c0002412 <sync_window+0x85>
c00023c2:	31 ff                	xor    edi,edi
c00023c4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023cb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023d2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023d5:	89 c6                	mov    esi,eax
c00023d7:	89 d7                	mov    edi,edx
c00023d9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023dc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023e0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023e3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023e7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023eb:	73 23                	jae    c0002410 <sync_window+0x83>
c00023ed:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023f1:	75 1d                	jne    c0002410 <sync_window+0x83>
c00023f3:	83 ec 0c             	sub    esp,0xc
c00023f6:	6a 01                	push   0x1
c00023f8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023fc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002400:	52                   	push   edx
c0002401:	50                   	push   eax
c0002402:	55                   	push   ebp
c0002403:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 01 f8 ff ff       	call   c0001c0e <disk_write>
c000240d:	83 c4 20             	add    esp,0x20
c0002410:	31 d2                	xor    edx,edx
c0002412:	83 c4 1c             	add    esp,0x1c
c0002415:	89 d0                	mov    eax,edx
c0002417:	5b                   	pop    ebx
c0002418:	5e                   	pop    esi
c0002419:	5f                   	pop    edi
c000241a:	5d                   	pop    ebp
c000241b:	c3                   	ret    
c000241c:	31 d2                	xor    edx,edx
c000241e:	89 d0                	mov    eax,edx
c0002420:	c3                   	ret    

c0002421 <move_window>:
c0002421:	56                   	push   esi
c0002422:	53                   	push   ebx
c0002423:	89 c3                	mov    ebx,eax
c0002425:	83 ec 14             	sub    esp,0x14
c0002428:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000242b:	75 07                	jne    c0002434 <move_window+0x13>
c000242d:	31 f6                	xor    esi,esi
c000242f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002432:	74 59                	je     c000248d <move_window+0x6c>
c0002434:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002438:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000243c:	89 d8                	mov    eax,ebx
c000243e:	e8 4a ff ff ff       	call   c000238d <sync_window>
c0002443:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002447:	89 c6                	mov    esi,eax
c0002449:	85 c0                	test   eax,eax
c000244b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000244f:	75 3c                	jne    c000248d <move_window+0x6c>
c0002451:	83 ec 0c             	sub    esp,0xc
c0002454:	8d 43 54             	lea    eax,[ebx+0x54]
c0002457:	6a 01                	push   0x1
c0002459:	51                   	push   ecx
c000245a:	52                   	push   edx
c000245b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000245f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002463:	50                   	push   eax
c0002464:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002468:	50                   	push   eax
c0002469:	e8 8a f7 ff ff       	call   c0001bf8 <disk_read>
c000246e:	83 c4 20             	add    esp,0x20
c0002471:	85 c0                	test   eax,eax
c0002473:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002477:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000247b:	74 0a                	je     c0002487 <move_window+0x66>
c000247d:	83 ca ff             	or     edx,0xffffffff
c0002480:	be 01 00 00 00       	mov    esi,0x1
c0002485:	89 d1                	mov    ecx,edx
c0002487:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000248a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000248d:	89 f0                	mov    eax,esi
c000248f:	83 c4 14             	add    esp,0x14
c0002492:	5b                   	pop    ebx
c0002493:	5e                   	pop    esi
c0002494:	c3                   	ret    

c0002495 <check_fs>:
c0002495:	53                   	push   ebx
c0002496:	89 c3                	mov    ebx,eax
c0002498:	83 ec 08             	sub    esp,0x8
c000249b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000249f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024a6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ad:	e8 6f ff ff ff       	call   c0002421 <move_window>
c00024b2:	ba 04 00 00 00       	mov    edx,0x4
c00024b7:	85 c0                	test   eax,eax
c00024b9:	0f 85 89 00 00 00    	jne    c0002548 <check_fs+0xb3>
c00024bf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024c5:	e8 79 f7 ff ff       	call   c0001c43 <ld_word>
c00024ca:	ba 03 00 00 00       	mov    edx,0x3
c00024cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00024d3:	75 73                	jne    c0002548 <check_fs+0xb3>
c00024d5:	ba 80 9e 02 c0       	mov    edx,0xc0029e80
c00024da:	8d 43 54             	lea    eax,[ebx+0x54]
c00024dd:	b9 0b 00 00 00       	mov    ecx,0xb
c00024e2:	e8 fb f7 ff ff       	call   c0001ce2 <mem_cmp>
c00024e7:	ba 01 00 00 00       	mov    edx,0x1
c00024ec:	85 c0                	test   eax,eax
c00024ee:	74 58                	je     c0002548 <check_fs+0xb3>
c00024f0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024f3:	8d 50 18             	lea    edx,[eax+0x18]
c00024f6:	80 fa 01             	cmp    dl,0x1
c00024f9:	76 09                	jbe    c0002504 <check_fs+0x6f>
c00024fb:	ba 02 00 00 00       	mov    edx,0x2
c0002500:	3c eb                	cmp    al,0xeb
c0002502:	75 44                	jne    c0002548 <check_fs+0xb3>
c0002504:	ba 50 d3 02 c0       	mov    edx,0xc002d350
c0002509:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000250f:	b9 03 00 00 00       	mov    ecx,0x3
c0002514:	e8 c9 f7 ff ff       	call   c0001ce2 <mem_cmp>
c0002519:	31 d2                	xor    edx,edx
c000251b:	85 c0                	test   eax,eax
c000251d:	74 29                	je     c0002548 <check_fs+0xb3>
c000251f:	ba 8c 9e 02 c0       	mov    edx,0xc0029e8c
c0002524:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000252a:	b9 05 00 00 00       	mov    ecx,0x5
c000252f:	e8 ae f7 ff ff       	call   c0001ce2 <mem_cmp>
c0002534:	31 d2                	xor    edx,edx
c0002536:	85 c0                	test   eax,eax
c0002538:	74 0e                	je     c0002548 <check_fs+0xb3>
c000253a:	31 d2                	xor    edx,edx
c000253c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002543:	0f 95 c2             	setne  dl
c0002546:	01 d2                	add    edx,edx
c0002548:	89 d0                	mov    eax,edx
c000254a:	83 c4 08             	add    esp,0x8
c000254d:	5b                   	pop    ebx
c000254e:	c3                   	ret    

c000254f <find_volume>:
c000254f:	55                   	push   ebp
c0002550:	31 c9                	xor    ecx,ecx
c0002552:	57                   	push   edi
c0002553:	56                   	push   esi
c0002554:	89 d6                	mov    esi,edx
c0002556:	53                   	push   ebx
c0002557:	31 d2                	xor    edx,edx
c0002559:	83 ec 3c             	sub    esp,0x3c
c000255c:	89 c3                	mov    ebx,eax
c000255e:	e8 32 ff ff ff       	call   c0002495 <check_fs>
c0002563:	83 f8 02             	cmp    eax,0x2
c0002566:	74 0e                	je     c0002576 <find_volume+0x27>
c0002568:	0f 87 5d 01 00 00    	ja     c00026cb <find_volume+0x17c>
c000256e:	85 f6                	test   esi,esi
c0002570:	0f 84 55 01 00 00    	je     c00026cb <find_volume+0x17c>
c0002576:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000257d:	0f 85 dd 00 00 00    	jne    c0002660 <find_volume+0x111>
c0002583:	31 c9                	xor    ecx,ecx
c0002585:	ba 01 00 00 00       	mov    edx,0x1
c000258a:	89 d8                	mov    eax,ebx
c000258c:	e8 90 fe ff ff       	call   c0002421 <move_window>
c0002591:	85 c0                	test   eax,eax
c0002593:	74 0a                	je     c000259f <find_volume+0x50>
c0002595:	b8 04 00 00 00       	mov    eax,0x4
c000259a:	e9 2c 01 00 00       	jmp    c00026cb <find_volume+0x17c>
c000259f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025a2:	89 e8                	mov    eax,ebp
c00025a4:	e8 f6 fc ff ff       	call   c000229f <test_gpt_header>
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0a                	jne    c00025b7 <find_volume+0x68>
c00025ad:	b8 03 00 00 00       	mov    eax,0x3
c00025b2:	e9 14 01 00 00       	jmp    c00026cb <find_volume+0x17c>
c00025b7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025bd:	e8 8e f6 ff ff       	call   c0001c50 <ld_dword>
c00025c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025c6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025cc:	e8 97 f6 ff ff       	call   c0001c68 <ld_qword>
c00025d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025ed:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025f1:	74 ba                	je     c00025ad <find_volume+0x5e>
c00025f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025f7:	31 c9                	xor    ecx,ecx
c00025f9:	c1 e7 07             	shl    edi,0x7
c00025fc:	89 d8                	mov    eax,ebx
c00025fe:	89 fa                	mov    edx,edi
c0002600:	c1 ea 09             	shr    edx,0x9
c0002603:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002607:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000260b:	e8 11 fe ff ff       	call   c0002421 <move_window>
c0002610:	85 c0                	test   eax,eax
c0002612:	75 81                	jne    c0002595 <find_volume+0x46>
c0002614:	81 e7 80 01 00 00    	and    edi,0x180
c000261a:	b9 10 00 00 00       	mov    ecx,0x10
c000261f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002623:	ba 70 9e 02 c0       	mov    edx,0xc0029e70
c0002628:	e8 b5 f6 ff ff       	call   c0001ce2 <mem_cmp>
c000262d:	85 c0                	test   eax,eax
c000262f:	75 29                	jne    c000265a <find_volume+0x10b>
c0002631:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002635:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002639:	e8 2a f6 ff ff       	call   c0001c68 <ld_qword>
c000263e:	89 d1                	mov    ecx,edx
c0002640:	89 c2                	mov    edx,eax
c0002642:	89 d8                	mov    eax,ebx
c0002644:	e8 4c fe ff ff       	call   c0002495 <check_fs>
c0002649:	85 f6                	test   esi,esi
c000264b:	75 07                	jne    c0002654 <find_volume+0x105>
c000264d:	83 f8 01             	cmp    eax,0x1
c0002650:	77 08                	ja     c000265a <find_volume+0x10b>
c0002652:	eb 77                	jmp    c00026cb <find_volume+0x17c>
c0002654:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002658:	74 71                	je     c00026cb <find_volume+0x17c>
c000265a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000265e:	eb 89                	jmp    c00025e9 <find_volume+0x9a>
c0002660:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002664:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000266a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002674:	89 cd                	mov    ebp,ecx
c0002676:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000267a:	89 f8                	mov    eax,edi
c000267c:	83 c7 10             	add    edi,0x10
c000267f:	e8 cc f5 ff ff       	call   c0001c50 <ld_dword>
c0002684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002688:	89 01                	mov    DWORD PTR [ecx],eax
c000268a:	83 c1 04             	add    ecx,0x4
c000268d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002691:	75 e3                	jne    c0002676 <find_volume+0x127>
c0002693:	31 ff                	xor    edi,edi
c0002695:	85 f6                	test   esi,esi
c0002697:	74 03                	je     c000269c <find_volume+0x14d>
c0002699:	8d 7e ff             	lea    edi,[esi-0x1]
c000269c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026a0:	85 d2                	test   edx,edx
c00026a2:	74 14                	je     c00026b8 <find_volume+0x169>
c00026a4:	31 c9                	xor    ecx,ecx
c00026a6:	89 d8                	mov    eax,ebx
c00026a8:	e8 e8 fd ff ff       	call   c0002495 <check_fs>
c00026ad:	83 f8 01             	cmp    eax,0x1
c00026b0:	76 19                	jbe    c00026cb <find_volume+0x17c>
c00026b2:	85 f6                	test   esi,esi
c00026b4:	74 0f                	je     c00026c5 <find_volume+0x176>
c00026b6:	eb 13                	jmp    c00026cb <find_volume+0x17c>
c00026b8:	85 f6                	test   esi,esi
c00026ba:	0f 85 ed fe ff ff    	jne    c00025ad <find_volume+0x5e>
c00026c0:	b8 03 00 00 00       	mov    eax,0x3
c00026c5:	47                   	inc    edi
c00026c6:	83 ff 03             	cmp    edi,0x3
c00026c9:	76 d1                	jbe    c000269c <find_volume+0x14d>
c00026cb:	83 c4 3c             	add    esp,0x3c
c00026ce:	5b                   	pop    ebx
c00026cf:	5e                   	pop    esi
c00026d0:	5f                   	pop    edi
c00026d1:	5d                   	pop    ebp
c00026d2:	c3                   	ret    

c00026d3 <mount_volume>:
c00026d3:	55                   	push   ebp
c00026d4:	57                   	push   edi
c00026d5:	89 cf                	mov    edi,ecx
c00026d7:	56                   	push   esi
c00026d8:	53                   	push   ebx
c00026d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00026de:	83 ec 3c             	sub    esp,0x3c
c00026e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026eb:	e8 35 fb ff ff       	call   c0002225 <get_ldnumber>
c00026f0:	85 c0                	test   eax,eax
c00026f2:	0f 88 3a 05 00 00    	js     c0002c32 <mount_volume+0x55f>
c00026f8:	8b 2c 85 00 ef 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1100]
c00026ff:	89 c6                	mov    esi,eax
c0002701:	bb 0c 00 00 00       	mov    ebx,0xc
c0002706:	85 ed                	test   ebp,ebp
c0002708:	0f 84 24 05 00 00    	je     c0002c32 <mount_volume+0x55f>
c000270e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002712:	83 e7 fe             	and    edi,0xfffffffe
c0002715:	89 2a                	mov    DWORD PTR [edx],ebp
c0002717:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000271b:	74 32                	je     c000274f <mount_volume+0x7c>
c000271d:	83 ec 0c             	sub    esp,0xc
c0002720:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002724:	50                   	push   eax
c0002725:	e8 c8 f4 ff ff       	call   c0001bf2 <disk_status>
c000272a:	83 c4 10             	add    esp,0x10
c000272d:	a8 01                	test   al,0x1
c000272f:	75 1e                	jne    c000274f <mount_volume+0x7c>
c0002731:	31 db                	xor    ebx,ebx
c0002733:	89 f9                	mov    ecx,edi
c0002735:	84 c9                	test   cl,cl
c0002737:	0f 84 f5 04 00 00    	je     c0002c32 <mount_volume+0x55f>
c000273d:	a8 04                	test   al,0x4
c000273f:	0f 84 ed 04 00 00    	je     c0002c32 <mount_volume+0x55f>
c0002745:	bb 0a 00 00 00       	mov    ebx,0xa
c000274a:	e9 e3 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c000274f:	83 ec 0c             	sub    esp,0xc
c0002752:	89 f0                	mov    eax,esi
c0002754:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002758:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000275b:	0f b6 f0             	movzx  esi,al
c000275e:	bb 03 00 00 00       	mov    ebx,0x3
c0002763:	56                   	push   esi
c0002764:	e8 8c f4 ff ff       	call   c0001bf5 <disk_initialize>
c0002769:	83 c4 10             	add    esp,0x10
c000276c:	a8 01                	test   al,0x1
c000276e:	0f 85 be 04 00 00    	jne    c0002c32 <mount_volume+0x55f>
c0002774:	89 f9                	mov    ecx,edi
c0002776:	84 c9                	test   cl,cl
c0002778:	74 04                	je     c000277e <mount_volume+0xab>
c000277a:	a8 04                	test   al,0x4
c000277c:	75 c7                	jne    c0002745 <mount_volume+0x72>
c000277e:	31 d2                	xor    edx,edx
c0002780:	89 e8                	mov    eax,ebp
c0002782:	e8 c8 fd ff ff       	call   c000254f <find_volume>
c0002787:	83 f8 04             	cmp    eax,0x4
c000278a:	75 0a                	jne    c0002796 <mount_volume+0xc3>
c000278c:	bb 01 00 00 00       	mov    ebx,0x1
c0002791:	e9 9c 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c0002796:	83 f8 01             	cmp    eax,0x1
c0002799:	76 0a                	jbe    c00027a5 <mount_volume+0xd2>
c000279b:	bb 0d 00 00 00       	mov    ebx,0xd
c00027a0:	e9 8d 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c00027a5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027a8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027b3:	75 17                	jne    c00027cc <mount_volume+0xf9>
c00027b5:	b8 0b 00 00 00       	mov    eax,0xb
c00027ba:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027bf:	75 da                	jne    c000279b <mount_volume+0xc8>
c00027c1:	40                   	inc    eax
c00027c2:	83 f8 40             	cmp    eax,0x40
c00027c5:	75 f3                	jne    c00027ba <mount_volume+0xe7>
c00027c7:	e9 5a 02 00 00       	jmp    c0002a26 <mount_volume+0x353>
c00027cc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027cf:	e8 6f f4 ff ff       	call   c0001c43 <ld_word>
c00027d4:	66 3d 00 02          	cmp    ax,0x200
c00027d8:	75 c1                	jne    c000279b <mount_volume+0xc8>
c00027da:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027dd:	e8 61 f4 ff ff       	call   c0001c43 <ld_word>
c00027e2:	0f b7 c0             	movzx  eax,ax
c00027e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027e9:	85 c0                	test   eax,eax
c00027eb:	75 0c                	jne    c00027f9 <mount_volume+0x126>
c00027ed:	8d 45 78             	lea    eax,[ebp+0x78]
c00027f0:	e8 5b f4 ff ff       	call   c0001c50 <ld_dword>
c00027f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027fd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002800:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002803:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002807:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000280a:	48                   	dec    eax
c000280b:	3c 01                	cmp    al,0x1
c000280d:	77 8c                	ja     c000279b <mount_volume+0xc8>
c000280f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002813:	89 c3                	mov    ebx,eax
c0002815:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002819:	66 85 c0             	test   ax,ax
c000281c:	0f 84 79 ff ff ff    	je     c000279b <mount_volume+0xc8>
c0002822:	8d 40 ff             	lea    eax,[eax-0x1]
c0002825:	85 d8                	test   eax,ebx
c0002827:	0f 85 6e ff ff ff    	jne    c000279b <mount_volume+0xc8>
c000282d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002830:	e8 0e f4 ff ff       	call   c0001c43 <ld_word>
c0002835:	89 c7                	mov    edi,eax
c0002837:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000283b:	a8 0f                	test   al,0xf
c000283d:	0f 85 58 ff ff ff    	jne    c000279b <mount_volume+0xc8>
c0002843:	8d 45 67             	lea    eax,[ebp+0x67]
c0002846:	e8 f8 f3 ff ff       	call   c0001c43 <ld_word>
c000284b:	0f b7 f0             	movzx  esi,ax
c000284e:	85 f6                	test   esi,esi
c0002850:	75 0a                	jne    c000285c <mount_volume+0x189>
c0002852:	8d 45 74             	lea    eax,[ebp+0x74]
c0002855:	e8 f6 f3 ff ff       	call   c0001c50 <ld_dword>
c000285a:	89 c6                	mov    esi,eax
c000285c:	8d 45 62             	lea    eax,[ebp+0x62]
c000285f:	e8 df f3 ff ff       	call   c0001c43 <ld_word>
c0002864:	66 85 c0             	test   ax,ax
c0002867:	0f 84 2e ff ff ff    	je     c000279b <mount_volume+0xc8>
c000286d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002872:	0f b7 c8             	movzx  ecx,ax
c0002875:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000287a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000287e:	89 fa                	mov    edx,edi
c0002880:	66 c1 ea 04          	shr    dx,0x4
c0002884:	0f b7 d2             	movzx  edx,dx
c0002887:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000288b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000288e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002892:	39 c6                	cmp    esi,eax
c0002894:	0f 82 01 ff ff ff    	jb     c000279b <mount_volume+0xc8>
c000289a:	29 c6                	sub    esi,eax
c000289c:	31 d2                	xor    edx,edx
c000289e:	89 f0                	mov    eax,esi
c00028a0:	f7 f3                	div    ebx
c00028a2:	39 de                	cmp    esi,ebx
c00028a4:	0f 82 f1 fe ff ff    	jb     c000279b <mount_volume+0xc8>
c00028aa:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028af:	0f 87 e6 fe ff ff    	ja     c000279b <mount_volume+0xc8>
c00028b5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028ba:	0f 86 63 03 00 00    	jbe    c0002c23 <mount_volume+0x550>
c00028c0:	bb 03 00 00 00       	mov    ebx,0x3
c00028c5:	8d 70 02             	lea    esi,[eax+0x2]
c00028c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028d0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d6:	31 d2                	xor    edx,edx
c00028d8:	89 c8                	mov    eax,ecx
c00028da:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028e9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028ed:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028f7:	31 d2                	xor    edx,edx
c00028f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002901:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002904:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002907:	83 fb 03             	cmp    ebx,0x3
c000290a:	75 2b                	jne    c0002937 <mount_volume+0x264>
c000290c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000290f:	e8 2f f3 ff ff       	call   c0001c43 <ld_word>
c0002914:	66 09 c7             	or     di,ax
c0002917:	0f 85 7e fe ff ff    	jne    c000279b <mount_volume+0xc8>
c000291d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002923:	c1 e6 02             	shl    esi,0x2
c0002926:	e8 25 f3 ff ff       	call   c0001c50 <ld_dword>
c000292b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	eb 30                	jmp    c0002967 <mount_volume+0x294>
c0002937:	66 85 ff             	test   di,di
c000293a:	0f 84 5b fe ff ff    	je     c000279b <mount_volume+0xc8>
c0002940:	31 d2                	xor    edx,edx
c0002942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002946:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000294a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000294e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002951:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002954:	83 fb 02             	cmp    ebx,0x2
c0002957:	75 04                	jne    c000295d <mount_volume+0x28a>
c0002959:	01 f6                	add    esi,esi
c000295b:	eb 0a                	jmp    c0002967 <mount_volume+0x294>
c000295d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002960:	83 e6 01             	and    esi,0x1
c0002963:	d1 e8                	shr    eax,1
c0002965:	01 c6                	add    esi,eax
c0002967:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000296d:	c1 ee 09             	shr    esi,0x9
c0002970:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002974:	0f 87 21 fe ff ff    	ja     c000279b <mount_volume+0xc8>
c000297a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002981:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002988:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000298c:	83 fb 03             	cmp    ebx,0x3
c000298f:	75 7a                	jne    c0002a0b <mount_volume+0x338>
c0002991:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002997:	e8 a7 f2 ff ff       	call   c0001c43 <ld_word>
c000299c:	66 48                	dec    ax
c000299e:	75 6b                	jne    c0002a0b <mount_volume+0x338>
c00029a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029a8:	83 c2 01             	add    edx,0x1
c00029ab:	89 e8                	mov    eax,ebp
c00029ad:	83 d1 00             	adc    ecx,0x0
c00029b0:	e8 6c fa ff ff       	call   c0002421 <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	75 52                	jne    c0002a0b <mount_volume+0x338>
c00029b9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029bd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029c3:	e8 7b f2 ff ff       	call   c0001c43 <ld_word>
c00029c8:	66 3d 55 aa          	cmp    ax,0xaa55
c00029cc:	75 3d                	jne    c0002a0b <mount_volume+0x338>
c00029ce:	8d 45 54             	lea    eax,[ebp+0x54]
c00029d1:	e8 7a f2 ff ff       	call   c0001c50 <ld_dword>
c00029d6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029db:	75 2e                	jne    c0002a0b <mount_volume+0x338>
c00029dd:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029e3:	e8 68 f2 ff ff       	call   c0001c50 <ld_dword>
c00029e8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029ed:	75 1c                	jne    c0002a0b <mount_volume+0x338>
c00029ef:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029f5:	e8 56 f2 ff ff       	call   c0001c50 <ld_dword>
c00029fa:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029fd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a03:	e8 48 f2 ff ff       	call   c0001c50 <ld_dword>
c0002a08:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a0b:	66 a1 e0 ee 02 c0    	mov    ax,ds:0xc002eee0
c0002a11:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a14:	40                   	inc    eax
c0002a15:	31 db                	xor    ebx,ebx
c0002a17:	66 a3 e0 ee 02 c0    	mov    ds:0xc002eee0,ax
c0002a1d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a21:	e9 0c 02 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c0002a26:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a2c:	e8 12 f2 ff ff       	call   c0001c43 <ld_word>
c0002a31:	66 3d 00 01          	cmp    ax,0x100
c0002a35:	0f 85 60 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a3b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a42:	0f 85 53 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a48:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a4e:	e8 15 f2 ff ff       	call   c0001c68 <ld_qword>
c0002a53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a5b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a61:	e8 ea f1 ff ff       	call   c0001c50 <ld_dword>
c0002a66:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a69:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a6f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a72:	fe c8                	dec    al
c0002a74:	0f 85 21 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a7a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a81:	bb 01 00 00 00       	mov    ebx,0x1
c0002a86:	d3 e3                	shl    ebx,cl
c0002a88:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a8c:	66 85 db             	test   bx,bx
c0002a8f:	0f 84 06 fd ff ff    	je     c000279b <mount_volume+0xc8>
c0002a95:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a9b:	e8 b0 f1 ff ff       	call   c0001c50 <ld_dword>
c0002aa0:	89 c6                	mov    esi,eax
c0002aa2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002aa7:	0f 87 ee fc ff ff    	ja     c000279b <mount_volume+0xc8>
c0002aad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ab1:	8d 40 02             	lea    eax,[eax+0x2]
c0002ab4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ab7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002aba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002abe:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ac1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ac7:	e8 84 f1 ff ff       	call   c0001c50 <ld_dword>
c0002acc:	31 d2                	xor    edx,edx
c0002ace:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ad2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ada:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ade:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ae1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ae4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002aea:	e8 61 f1 ff ff       	call   c0001c50 <ld_dword>
c0002aef:	31 d2                	xor    edx,edx
c0002af1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002af5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b00:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b03:	0f b7 c3             	movzx  eax,bx
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	0f af f0             	imul   esi,eax
c0002b0b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b0f:	89 f0                	mov    eax,esi
c0002b11:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b19:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b1d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b21:	39 c1                	cmp    ecx,eax
c0002b23:	89 df                	mov    edi,ebx
c0002b25:	19 d7                	sbb    edi,edx
c0002b27:	0f 82 6e fc ff ff    	jb     c000279b <mount_volume+0xc8>
c0002b2d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b33:	31 db                	xor    ebx,ebx
c0002b35:	e8 16 f1 ff ff       	call   c0001c50 <ld_dword>
c0002b3a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b41:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b4c:	85 db                	test   ebx,ebx
c0002b4e:	75 39                	jne    c0002b89 <mount_volume+0x4b6>
c0002b50:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b54:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b58:	0f 86 3d fc ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002b5e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b61:	31 ff                	xor    edi,edi
c0002b63:	89 e8                	mov    eax,ebp
c0002b65:	e8 72 f3 ff ff       	call   c0001edc <clst2sect>
c0002b6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b6e:	01 c6                	add    esi,eax
c0002b70:	89 e8                	mov    eax,ebp
c0002b72:	11 d7                	adc    edi,edx
c0002b74:	89 f2                	mov    edx,esi
c0002b76:	89 f9                	mov    ecx,edi
c0002b78:	e8 a4 f8 ff ff       	call   c0002421 <move_window>
c0002b7d:	85 c0                	test   eax,eax
c0002b7f:	0f 85 07 fc ff ff    	jne    c000278c <mount_volume+0xb9>
c0002b85:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b89:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b8e:	74 0b                	je     c0002b9b <mount_volume+0x4c8>
c0002b90:	83 c3 20             	add    ebx,0x20
c0002b93:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b99:	eb b1                	jmp    c0002b4c <mount_volume+0x479>
c0002b9b:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b9e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ba2:	e8 a9 f0 ff ff       	call   c0001c50 <ld_dword>
c0002ba7:	89 c3                	mov    ebx,eax
c0002ba9:	83 f8 01             	cmp    eax,0x1
c0002bac:	0f 86 e9 fb ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002bb2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bb5:	0f 86 e0 fb ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002bbb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bbe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bc2:	0f af c2             	imul   eax,edx
c0002bc5:	31 d2                	xor    edx,edx
c0002bc7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bca:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bcd:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bd0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bd3:	31 c9                	xor    ecx,ecx
c0002bd5:	89 da                	mov    edx,ebx
c0002bd7:	89 e8                	mov    eax,ebp
c0002bd9:	c1 ea 07             	shr    edx,0x7
c0002bdc:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bdf:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002be2:	e8 3a f8 ff ff       	call   c0002421 <move_window>
c0002be7:	85 c0                	test   eax,eax
c0002be9:	0f 85 9d fb ff ff    	jne    c000278c <mount_volume+0xb9>
c0002bef:	89 d8                	mov    eax,ebx
c0002bf1:	83 e0 7f             	and    eax,0x7f
c0002bf4:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bf7:	e8 54 f0 ff ff       	call   c0001c50 <ld_dword>
c0002bfc:	83 f8 ff             	cmp    eax,0xffffffff
c0002bff:	74 0a                	je     c0002c0b <mount_volume+0x538>
c0002c01:	43                   	inc    ebx
c0002c02:	39 d8                	cmp    eax,ebx
c0002c04:	74 cd                	je     c0002bd3 <mount_volume+0x500>
c0002c06:	e9 90 fb ff ff       	jmp    c000279b <mount_volume+0xc8>
c0002c0b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c12:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c19:	bb 04 00 00 00       	mov    ebx,0x4
c0002c1e:	e9 e8 fd ff ff       	jmp    c0002a0b <mount_volume+0x338>
c0002c23:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c28:	19 db                	sbb    ebx,ebx
c0002c2a:	83 c3 02             	add    ebx,0x2
c0002c2d:	e9 93 fc ff ff       	jmp    c00028c5 <mount_volume+0x1f2>
c0002c32:	83 c4 3c             	add    esp,0x3c
c0002c35:	89 d8                	mov    eax,ebx
c0002c37:	5b                   	pop    ebx
c0002c38:	5e                   	pop    esi
c0002c39:	5f                   	pop    edi
c0002c3a:	5d                   	pop    ebp
c0002c3b:	c3                   	ret    

c0002c3c <find_bitmap>:
c0002c3c:	55                   	push   ebp
c0002c3d:	57                   	push   edi
c0002c3e:	89 c7                	mov    edi,eax
c0002c40:	56                   	push   esi
c0002c41:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c44:	53                   	push   ebx
c0002c45:	83 ec 1c             	sub    esp,0x1c
c0002c48:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c4b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c4f:	83 e8 02             	sub    eax,0x2
c0002c52:	39 f0                	cmp    eax,esi
c0002c54:	77 02                	ja     c0002c58 <find_bitmap+0x1c>
c0002c56:	31 f6                	xor    esi,esi
c0002c58:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c5c:	89 f3                	mov    ebx,esi
c0002c5e:	31 ed                	xor    ebp,ebp
c0002c60:	31 c9                	xor    ecx,ecx
c0002c62:	89 da                	mov    edx,ebx
c0002c64:	89 f8                	mov    eax,edi
c0002c66:	c1 ea 0c             	shr    edx,0xc
c0002c69:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c6c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c6f:	e8 ad f7 ff ff       	call   c0002421 <move_window>
c0002c74:	85 c0                	test   eax,eax
c0002c76:	75 68                	jne    c0002ce0 <find_bitmap+0xa4>
c0002c78:	89 da                	mov    edx,ebx
c0002c7a:	89 d9                	mov    ecx,ebx
c0002c7c:	c1 ea 03             	shr    edx,0x3
c0002c7f:	83 e1 07             	and    ecx,0x7
c0002c82:	b8 01 00 00 00       	mov    eax,0x1
c0002c87:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c8d:	d3 e0                	shl    eax,cl
c0002c8f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c92:	83 e9 02             	sub    ecx,0x2
c0002c95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c99:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c9d:	43                   	inc    ebx
c0002c9e:	21 c1                	and    ecx,eax
c0002ca0:	d1 e0                	shl    eax,1
c0002ca2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ca6:	77 09                	ja     c0002cb1 <find_bitmap+0x75>
c0002ca8:	31 db                	xor    ebx,ebx
c0002caa:	ba 00 02 00 00       	mov    edx,0x200
c0002caf:	31 c0                	xor    eax,eax
c0002cb1:	84 c9                	test   cl,cl
c0002cb3:	75 10                	jne    c0002cc5 <find_bitmap+0x89>
c0002cb5:	45                   	inc    ebp
c0002cb6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cba:	75 0f                	jne    c0002ccb <find_bitmap+0x8f>
c0002cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cc0:	83 c0 02             	add    eax,0x2
c0002cc3:	eb 22                	jmp    c0002ce7 <find_bitmap+0xab>
c0002cc5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cc9:	31 ed                	xor    ebp,ebp
c0002ccb:	39 de                	cmp    esi,ebx
c0002ccd:	74 16                	je     c0002ce5 <find_bitmap+0xa9>
c0002ccf:	84 c0                	test   al,al
c0002cd1:	75 c6                	jne    c0002c99 <find_bitmap+0x5d>
c0002cd3:	42                   	inc    edx
c0002cd4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cda:	77 84                	ja     c0002c60 <find_bitmap+0x24>
c0002cdc:	b0 01                	mov    al,0x1
c0002cde:	eb b9                	jmp    c0002c99 <find_bitmap+0x5d>
c0002ce0:	83 c8 ff             	or     eax,0xffffffff
c0002ce3:	eb 02                	jmp    c0002ce7 <find_bitmap+0xab>
c0002ce5:	31 c0                	xor    eax,eax
c0002ce7:	83 c4 1c             	add    esp,0x1c
c0002cea:	5b                   	pop    ebx
c0002ceb:	5e                   	pop    esi
c0002cec:	5f                   	pop    edi
c0002ced:	5d                   	pop    ebp
c0002cee:	c3                   	ret    

c0002cef <change_bitmap>:
c0002cef:	55                   	push   ebp
c0002cf0:	89 cd                	mov    ebp,ecx
c0002cf2:	57                   	push   edi
c0002cf3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cf6:	56                   	push   esi
c0002cf7:	89 c7                	mov    edi,eax
c0002cf9:	53                   	push   ebx
c0002cfa:	89 c8                	mov    eax,ecx
c0002cfc:	83 ec 1c             	sub    esp,0x1c
c0002cff:	31 d2                	xor    edx,edx
c0002d01:	89 ce                	mov    esi,ecx
c0002d03:	c1 e8 0c             	shr    eax,0xc
c0002d06:	bb 01 00 00 00       	mov    ebx,0x1
c0002d0b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d0e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d11:	c1 ee 03             	shr    esi,0x3
c0002d14:	83 e1 07             	and    ecx,0x7
c0002d17:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d1d:	d3 e3                	shl    ebx,cl
c0002d1f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d23:	89 c1                	mov    ecx,eax
c0002d25:	89 d3                	mov    ebx,edx
c0002d27:	83 c1 01             	add    ecx,0x1
c0002d2a:	83 d3 00             	adc    ebx,0x0
c0002d2d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d31:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d35:	89 d1                	mov    ecx,edx
c0002d37:	89 c2                	mov    edx,eax
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	e8 e1 f6 ff ff       	call   c0002421 <move_window>
c0002d40:	89 c1                	mov    ecx,eax
c0002d42:	85 c0                	test   eax,eax
c0002d44:	75 48                	jne    c0002d8e <change_bitmap+0x9f>
c0002d46:	31 d2                	xor    edx,edx
c0002d48:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d4c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d50:	0f 95 c2             	setne  dl
c0002d53:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d57:	74 3c                	je     c0002d95 <change_bitmap+0xa6>
c0002d59:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d5d:	4d                   	dec    ebp
c0002d5e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d62:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d66:	74 32                	je     c0002d9a <change_bitmap+0xab>
c0002d68:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d6c:	75 d8                	jne    c0002d46 <change_bitmap+0x57>
c0002d6e:	8d 46 01             	lea    eax,[esi+0x1]
c0002d71:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d76:	89 c3                	mov    ebx,eax
c0002d78:	31 f6                	xor    esi,esi
c0002d7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d82:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d88:	74 99                	je     c0002d23 <change_bitmap+0x34>
c0002d8a:	89 de                	mov    esi,ebx
c0002d8c:	eb b8                	jmp    c0002d46 <change_bitmap+0x57>
c0002d8e:	b9 01 00 00 00       	mov    ecx,0x1
c0002d93:	eb 05                	jmp    c0002d9a <change_bitmap+0xab>
c0002d95:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9a:	83 c4 1c             	add    esp,0x1c
c0002d9d:	89 c8                	mov    eax,ecx
c0002d9f:	5b                   	pop    ebx
c0002da0:	5e                   	pop    esi
c0002da1:	5f                   	pop    edi
c0002da2:	5d                   	pop    ebp
c0002da3:	c3                   	ret    

c0002da4 <put_fat>:
c0002da4:	83 fa 01             	cmp    edx,0x1
c0002da7:	0f 86 7b 01 00 00    	jbe    c0002f28 <put_fat+0x184>
c0002dad:	55                   	push   ebp
c0002dae:	57                   	push   edi
c0002daf:	89 cf                	mov    edi,ecx
c0002db1:	56                   	push   esi
c0002db2:	b9 02 00 00 00       	mov    ecx,0x2
c0002db7:	53                   	push   ebx
c0002db8:	89 c6                	mov    esi,eax
c0002dba:	83 ec 1c             	sub    esp,0x1c
c0002dbd:	89 d3                	mov    ebx,edx
c0002dbf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dc2:	0f 86 68 01 00 00    	jbe    c0002f30 <put_fat+0x18c>
c0002dc8:	8a 00                	mov    al,BYTE PTR [eax]
c0002dca:	3c 02                	cmp    al,0x2
c0002dcc:	0f 84 c7 00 00 00    	je     c0002e99 <put_fat+0xf5>
c0002dd2:	77 09                	ja     c0002ddd <put_fat+0x39>
c0002dd4:	fe c8                	dec    al
c0002dd6:	74 17                	je     c0002def <put_fat+0x4b>
c0002dd8:	e9 53 01 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002ddd:	b9 02 00 00 00       	mov    ecx,0x2
c0002de2:	3c 04                	cmp    al,0x4
c0002de4:	0f 86 e1 00 00 00    	jbe    c0002ecb <put_fat+0x127>
c0002dea:	e9 41 01 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002def:	89 d5                	mov    ebp,edx
c0002df1:	31 c9                	xor    ecx,ecx
c0002df3:	d1 ed                	shr    ebp,1
c0002df5:	89 f0                	mov    eax,esi
c0002df7:	01 d5                	add    ebp,edx
c0002df9:	89 ea                	mov    edx,ebp
c0002dfb:	c1 ea 09             	shr    edx,0x9
c0002dfe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e01:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e04:	e8 18 f6 ff ff       	call   c0002421 <move_window>
c0002e09:	89 c1                	mov    ecx,eax
c0002e0b:	85 c0                	test   eax,eax
c0002e0d:	0f 85 1d 01 00 00    	jne    c0002f30 <put_fat+0x18c>
c0002e13:	8d 46 54             	lea    eax,[esi+0x54]
c0002e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e1a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e1d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e27:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e2b:	89 f8                	mov    eax,edi
c0002e2d:	83 e3 01             	and    ebx,0x1
c0002e30:	74 0d                	je     c0002e3f <put_fat+0x9b>
c0002e32:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e35:	89 fa                	mov    edx,edi
c0002e37:	83 e0 0f             	and    eax,0xf
c0002e3a:	c1 e2 04             	shl    edx,0x4
c0002e3d:	09 d0                	or     eax,edx
c0002e3f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e46:	31 c9                	xor    ecx,ecx
c0002e48:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4c:	c1 ea 09             	shr    edx,0x9
c0002e4f:	89 f0                	mov    eax,esi
c0002e51:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e54:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e57:	e8 c5 f5 ff ff       	call   c0002421 <move_window>
c0002e5c:	89 c1                	mov    ecx,eax
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	0f 85 ca 00 00 00    	jne    c0002f30 <put_fat+0x18c>
c0002e66:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e6a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e70:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e74:	85 db                	test   ebx,ebx
c0002e76:	74 07                	je     c0002e7f <put_fat+0xdb>
c0002e78:	c1 ef 04             	shr    edi,0x4
c0002e7b:	89 fa                	mov    edx,edi
c0002e7d:	eb 0e                	jmp    c0002e8d <put_fat+0xe9>
c0002e7f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e82:	c1 ef 08             	shr    edi,0x8
c0002e85:	83 e2 f0             	and    edx,0xfffffff0
c0002e88:	83 e7 0f             	and    edi,0xf
c0002e8b:	09 fa                	or     edx,edi
c0002e8d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e90:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e94:	e9 97 00 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002e99:	31 c9                	xor    ecx,ecx
c0002e9b:	c1 ea 08             	shr    edx,0x8
c0002e9e:	89 f0                	mov    eax,esi
c0002ea0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ea3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ea6:	e8 76 f5 ff ff       	call   c0002421 <move_window>
c0002eab:	89 c1                	mov    ecx,eax
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	75 7f                	jne    c0002f30 <put_fat+0x18c>
c0002eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002eb5:	01 db                	add    ebx,ebx
c0002eb7:	0f b7 d7             	movzx  edx,di
c0002eba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ec0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ec4:	e8 ec ed ff ff       	call   c0001cb5 <st_word>
c0002ec9:	eb 53                	jmp    c0002f1e <put_fat+0x17a>
c0002ecb:	31 c9                	xor    ecx,ecx
c0002ecd:	c1 ea 07             	shr    edx,0x7
c0002ed0:	89 f0                	mov    eax,esi
c0002ed2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ed5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ed8:	e8 44 f5 ff ff       	call   c0002421 <move_window>
c0002edd:	89 c1                	mov    ecx,eax
c0002edf:	85 c0                	test   eax,eax
c0002ee1:	75 4d                	jne    c0002f30 <put_fat+0x18c>
c0002ee3:	c1 e3 02             	shl    ebx,0x2
c0002ee6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002eec:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002eef:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ef3:	74 1c                	je     c0002f11 <put_fat+0x16d>
c0002ef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002eff:	89 d8                	mov    eax,ebx
c0002f01:	e8 4a ed ff ff       	call   c0001c50 <ld_dword>
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f0f:	09 c7                	or     edi,eax
c0002f11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f15:	89 fa                	mov    edx,edi
c0002f17:	89 d8                	mov    eax,ebx
c0002f19:	e8 9b ed ff ff       	call   c0001cb9 <st_dword>
c0002f1e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f26:	eb 08                	jmp    c0002f30 <put_fat+0x18c>
c0002f28:	b9 02 00 00 00       	mov    ecx,0x2
c0002f2d:	89 c8                	mov    eax,ecx
c0002f2f:	c3                   	ret    
c0002f30:	83 c4 1c             	add    esp,0x1c
c0002f33:	89 c8                	mov    eax,ecx
c0002f35:	5b                   	pop    ebx
c0002f36:	5e                   	pop    esi
c0002f37:	5f                   	pop    edi
c0002f38:	5d                   	pop    ebp
c0002f39:	c3                   	ret    

c0002f3a <fill_last_frag>:
c0002f3a:	57                   	push   edi
c0002f3b:	89 cf                	mov    edi,ecx
c0002f3d:	56                   	push   esi
c0002f3e:	89 d6                	mov    esi,edx
c0002f40:	53                   	push   ebx
c0002f41:	89 c3                	mov    ebx,eax
c0002f43:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f46:	85 c0                	test   eax,eax
c0002f48:	74 21                	je     c0002f6b <fill_last_frag+0x31>
c0002f4a:	89 f9                	mov    ecx,edi
c0002f4c:	83 f8 01             	cmp    eax,0x1
c0002f4f:	76 05                	jbe    c0002f56 <fill_last_frag+0x1c>
c0002f51:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f54:	29 c1                	sub    ecx,eax
c0002f56:	8d 56 01             	lea    edx,[esi+0x1]
c0002f59:	29 c2                	sub    edx,eax
c0002f5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f5d:	e8 42 fe ff ff       	call   c0002da4 <put_fat>
c0002f62:	85 c0                	test   eax,eax
c0002f64:	75 05                	jne    c0002f6b <fill_last_frag+0x31>
c0002f66:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f69:	eb d8                	jmp    c0002f43 <fill_last_frag+0x9>
c0002f6b:	5b                   	pop    ebx
c0002f6c:	5e                   	pop    esi
c0002f6d:	5f                   	pop    edi
c0002f6e:	c3                   	ret    

c0002f6f <fill_first_frag>:
c0002f6f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f73:	75 2d                	jne    c0002fa2 <fill_first_frag+0x33>
c0002f75:	57                   	push   edi
c0002f76:	56                   	push   esi
c0002f77:	53                   	push   ebx
c0002f78:	89 c3                	mov    ebx,eax
c0002f7a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f7d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f80:	01 d7                	add    edi,edx
c0002f82:	39 fa                	cmp    edx,edi
c0002f84:	74 14                	je     c0002f9a <fill_first_frag+0x2b>
c0002f86:	8d 72 01             	lea    esi,[edx+0x1]
c0002f89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f8b:	89 f1                	mov    ecx,esi
c0002f8d:	e8 12 fe ff ff       	call   c0002da4 <put_fat>
c0002f92:	89 f2                	mov    edx,esi
c0002f94:	85 c0                	test   eax,eax
c0002f96:	74 ea                	je     c0002f82 <fill_first_frag+0x13>
c0002f98:	eb 0b                	jmp    c0002fa5 <fill_first_frag+0x36>
c0002f9a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f9e:	31 c0                	xor    eax,eax
c0002fa0:	eb 03                	jmp    c0002fa5 <fill_first_frag+0x36>
c0002fa2:	31 c0                	xor    eax,eax
c0002fa4:	c3                   	ret    
c0002fa5:	5b                   	pop    ebx
c0002fa6:	5e                   	pop    esi
c0002fa7:	5f                   	pop    edi
c0002fa8:	c3                   	ret    

c0002fa9 <get_fat>:
c0002fa9:	83 fa 01             	cmp    edx,0x1
c0002fac:	0f 86 db 01 00 00    	jbe    c000318d <get_fat+0x1e4>
c0002fb2:	55                   	push   ebp
c0002fb3:	b9 01 00 00 00       	mov    ecx,0x1
c0002fb8:	57                   	push   edi
c0002fb9:	56                   	push   esi
c0002fba:	53                   	push   ebx
c0002fbb:	83 ec 1c             	sub    esp,0x1c
c0002fbe:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fc0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fc3:	0f 86 cc 01 00 00    	jbe    c0003195 <get_fat+0x1ec>
c0002fc9:	89 c3                	mov    ebx,eax
c0002fcb:	89 d6                	mov    esi,edx
c0002fcd:	8a 07                	mov    al,BYTE PTR [edi]
c0002fcf:	3c 02                	cmp    al,0x2
c0002fd1:	0f 84 99 00 00 00    	je     c0003070 <get_fat+0xc7>
c0002fd7:	77 09                	ja     c0002fe2 <get_fat+0x39>
c0002fd9:	fe c8                	dec    al
c0002fdb:	74 1a                	je     c0002ff7 <get_fat+0x4e>
c0002fdd:	e9 b3 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0002fe2:	3c 03                	cmp    al,0x3
c0002fe4:	0f 84 b5 00 00 00    	je     c000309f <get_fat+0xf6>
c0002fea:	3c 04                	cmp    al,0x4
c0002fec:	0f 84 e3 00 00 00    	je     c00030d5 <get_fat+0x12c>
c0002ff2:	e9 9e 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0002ff7:	89 d3                	mov    ebx,edx
c0002ff9:	31 c9                	xor    ecx,ecx
c0002ffb:	d1 eb                	shr    ebx,1
c0002ffd:	89 f8                	mov    eax,edi
c0002fff:	01 d3                	add    ebx,edx
c0003001:	89 da                	mov    edx,ebx
c0003003:	c1 ea 09             	shr    edx,0x9
c0003006:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003009:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000300c:	e8 10 f4 ff ff       	call   c0002421 <move_window>
c0003011:	85 c0                	test   eax,eax
c0003013:	74 08                	je     c000301d <get_fat+0x74>
c0003015:	83 c9 ff             	or     ecx,0xffffffff
c0003018:	e9 78 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c000301d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003020:	31 c9                	xor    ecx,ecx
c0003022:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003028:	89 ea                	mov    edx,ebp
c000302a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	89 f8                	mov    eax,edi
c0003033:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003036:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003039:	e8 e3 f3 ff ff       	call   c0002421 <move_window>
c000303e:	85 c0                	test   eax,eax
c0003040:	75 d3                	jne    c0003015 <get_fat+0x6c>
c0003042:	0f b6 c3             	movzx  eax,bl
c0003045:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000304b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003050:	c1 e3 08             	shl    ebx,0x8
c0003053:	09 c3                	or     ebx,eax
c0003055:	89 d9                	mov    ecx,ebx
c0003057:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000305d:	83 e6 01             	and    esi,0x1
c0003060:	0f 84 2f 01 00 00    	je     c0003195 <get_fat+0x1ec>
c0003066:	89 d9                	mov    ecx,ebx
c0003068:	c1 e9 04             	shr    ecx,0x4
c000306b:	e9 25 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0003070:	31 c9                	xor    ecx,ecx
c0003072:	c1 ea 08             	shr    edx,0x8
c0003075:	89 f8                	mov    eax,edi
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 9f f3 ff ff       	call   c0002421 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	75 8f                	jne    c0003015 <get_fat+0x6c>
c0003086:	01 f6                	add    esi,esi
c0003088:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000308e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003092:	e8 ac eb ff ff       	call   c0001c43 <ld_word>
c0003097:	0f b7 c8             	movzx  ecx,ax
c000309a:	e9 f6 00 00 00       	jmp    c0003195 <get_fat+0x1ec>
c000309f:	31 c9                	xor    ecx,ecx
c00030a1:	c1 ea 07             	shr    edx,0x7
c00030a4:	89 f8                	mov    eax,edi
c00030a6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ac:	e8 70 f3 ff ff       	call   c0002421 <move_window>
c00030b1:	85 c0                	test   eax,eax
c00030b3:	0f 85 5c ff ff ff    	jne    c0003015 <get_fat+0x6c>
c00030b9:	c1 e6 02             	shl    esi,0x2
c00030bc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030c2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030c6:	e8 85 eb ff ff       	call   c0001c50 <ld_dword>
c00030cb:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030d0:	e9 b4 00 00 00       	jmp    c0003189 <get_fat+0x1e0>
c00030d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030d8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030db:	89 d1                	mov    ecx,edx
c00030dd:	09 c1                	or     ecx,eax
c00030df:	74 06                	je     c00030e7 <get_fat+0x13e>
c00030e1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030e5:	75 0f                	jne    c00030f6 <get_fat+0x14d>
c00030e7:	b9 01 00 00 00       	mov    ecx,0x1
c00030ec:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030f0:	0f 85 9f 00 00 00    	jne    c0003195 <get_fat+0x1ec>
c00030f6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030fa:	89 f5                	mov    ebp,esi
c00030fc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003101:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003104:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003107:	80 f9 02             	cmp    cl,0x2
c000310a:	75 35                	jne    c0003141 <get_fat+0x198>
c000310c:	83 c0 ff             	add    eax,0xffffffff
c000310f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003114:	83 d2 ff             	adc    edx,0xffffffff
c0003117:	31 db                	xor    ebx,ebx
c0003119:	0f ac d0 09          	shrd   eax,edx,0x9
c000311d:	53                   	push   ebx
c000311e:	c1 ea 09             	shr    edx,0x9
c0003121:	51                   	push   ecx
c0003122:	52                   	push   edx
c0003123:	50                   	push   eax
c0003124:	e8 bb 41 02 00       	call   c00272e4 <__udivdi3>
c0003129:	83 c4 10             	add    esp,0x10
c000312c:	b9 01 00 00 00       	mov    ecx,0x1
c0003131:	39 c5                	cmp    ebp,eax
c0003133:	77 60                	ja     c0003195 <get_fat+0x1ec>
c0003135:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000313a:	74 59                	je     c0003195 <get_fat+0x1ec>
c000313c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000313f:	eb 54                	jmp    c0003195 <get_fat+0x1ec>
c0003141:	80 f9 03             	cmp    cl,0x3
c0003144:	75 05                	jne    c000314b <get_fat+0x1a2>
c0003146:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003149:	77 f1                	ja     c000313c <get_fat+0x193>
c000314b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003150:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003154:	75 3f                	jne    c0003195 <get_fat+0x1ec>
c0003156:	31 c9                	xor    ecx,ecx
c0003158:	89 f2                	mov    edx,esi
c000315a:	89 f8                	mov    eax,edi
c000315c:	c1 ea 07             	shr    edx,0x7
c000315f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003162:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003165:	e8 b7 f2 ff ff       	call   c0002421 <move_window>
c000316a:	85 c0                	test   eax,eax
c000316c:	0f 85 a3 fe ff ff    	jne    c0003015 <get_fat+0x6c>
c0003172:	c1 e6 02             	shl    esi,0x2
c0003175:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000317b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000317f:	e8 cc ea ff ff       	call   c0001c50 <ld_dword>
c0003184:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003189:	89 c1                	mov    ecx,eax
c000318b:	eb 08                	jmp    c0003195 <get_fat+0x1ec>
c000318d:	b9 01 00 00 00       	mov    ecx,0x1
c0003192:	89 c8                	mov    eax,ecx
c0003194:	c3                   	ret    
c0003195:	83 c4 1c             	add    esp,0x1c
c0003198:	89 c8                	mov    eax,ecx
c000319a:	5b                   	pop    ebx
c000319b:	5e                   	pop    esi
c000319c:	5f                   	pop    edi
c000319d:	5d                   	pop    ebp
c000319e:	c3                   	ret    

c000319f <dir_sdi>:
c000319f:	55                   	push   ebp
c00031a0:	57                   	push   edi
c00031a1:	56                   	push   esi
c00031a2:	53                   	push   ebx
c00031a3:	89 c3                	mov    ebx,eax
c00031a5:	83 ec 1c             	sub    esp,0x1c
c00031a8:	8b 38                	mov    edi,DWORD PTR [eax]
c00031aa:	31 c0                	xor    eax,eax
c00031ac:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031af:	0f 94 c0             	sete   al
c00031b2:	48                   	dec    eax
c00031b3:	25 00 00 20 f0       	and    eax,0xf0200000
c00031b8:	05 00 00 00 10       	add    eax,0x10000000
c00031bd:	39 d0                	cmp    eax,edx
c00031bf:	77 0a                	ja     c00031cb <dir_sdi+0x2c>
c00031c1:	b8 02 00 00 00       	mov    eax,0x2
c00031c6:	e9 c4 00 00 00       	jmp    c000328f <dir_sdi+0xf0>
c00031cb:	89 d6                	mov    esi,edx
c00031cd:	f6 c2 1f             	test   dl,0x1f
c00031d0:	75 ef                	jne    c00031c1 <dir_sdi+0x22>
c00031d2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031d5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031d8:	85 c9                	test   ecx,ecx
c00031da:	75 2d                	jne    c0003209 <dir_sdi+0x6a>
c00031dc:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031df:	77 1b                	ja     c00031fc <dir_sdi+0x5d>
c00031e1:	89 f2                	mov    edx,esi
c00031e3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031e7:	c1 ea 05             	shr    edx,0x5
c00031ea:	39 c2                	cmp    edx,eax
c00031ec:	73 d3                	jae    c00031c1 <dir_sdi+0x22>
c00031ee:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031f1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031f4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031f7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031fa:	eb 4b                	jmp    c0003247 <dir_sdi+0xa8>
c00031fc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031ff:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003203:	85 c0                	test   eax,eax
c0003205:	74 da                	je     c00031e1 <dir_sdi+0x42>
c0003207:	89 c1                	mov    ecx,eax
c0003209:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000320d:	c1 e5 09             	shl    ebp,0x9
c0003210:	89 ca                	mov    edx,ecx
c0003212:	39 ee                	cmp    esi,ebp
c0003214:	72 1c                	jb     c0003232 <dir_sdi+0x93>
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 8c fd ff ff       	call   c0002fa9 <get_fat>
c000321d:	89 c1                	mov    ecx,eax
c000321f:	83 f8 ff             	cmp    eax,0xffffffff
c0003222:	74 66                	je     c000328a <dir_sdi+0xeb>
c0003224:	83 f8 01             	cmp    eax,0x1
c0003227:	76 98                	jbe    c00031c1 <dir_sdi+0x22>
c0003229:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000322c:	76 93                	jbe    c00031c1 <dir_sdi+0x22>
c000322e:	29 ee                	sub    esi,ebp
c0003230:	eb de                	jmp    c0003210 <dir_sdi+0x71>
c0003232:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003236:	89 f8                	mov    eax,edi
c0003238:	e8 9f ec ff ff       	call   c0001edc <clst2sect>
c000323d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003241:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003244:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003247:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000324a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000324d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003250:	89 d1                	mov    ecx,edx
c0003252:	09 c1                	or     ecx,eax
c0003254:	0f 84 67 ff ff ff    	je     c00031c1 <dir_sdi+0x22>
c000325a:	89 f1                	mov    ecx,esi
c000325c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003264:	c1 e9 09             	shr    ecx,0x9
c0003267:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000326b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000326f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003273:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003276:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000327c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000327f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003283:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003286:	31 c0                	xor    eax,eax
c0003288:	eb 05                	jmp    c000328f <dir_sdi+0xf0>
c000328a:	b8 01 00 00 00       	mov    eax,0x1
c000328f:	83 c4 1c             	add    esp,0x1c
c0003292:	5b                   	pop    ebx
c0003293:	5e                   	pop    esi
c0003294:	5f                   	pop    edi
c0003295:	5d                   	pop    ebp
c0003296:	c3                   	ret    

c0003297 <create_chain>:
c0003297:	55                   	push   ebp
c0003298:	89 c5                	mov    ebp,eax
c000329a:	57                   	push   edi
c000329b:	56                   	push   esi
c000329c:	53                   	push   ebx
c000329d:	83 ec 1c             	sub    esp,0x1c
c00032a0:	85 d2                	test   edx,edx
c00032a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032a6:	8b 30                	mov    esi,DWORD PTR [eax]
c00032a8:	75 0e                	jne    c00032b8 <create_chain+0x21>
c00032aa:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ad:	85 ff                	test   edi,edi
c00032af:	74 39                	je     c00032ea <create_chain+0x53>
c00032b1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032b4:	77 39                	ja     c00032ef <create_chain+0x58>
c00032b6:	eb 32                	jmp    c00032ea <create_chain+0x53>
c00032b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032bc:	e8 e8 fc ff ff       	call   c0002fa9 <get_fat>
c00032c1:	89 c3                	mov    ebx,eax
c00032c3:	83 f8 01             	cmp    eax,0x1
c00032c6:	77 0a                	ja     c00032d2 <create_chain+0x3b>
c00032c8:	bb 01 00 00 00       	mov    ebx,0x1
c00032cd:	e9 ba 01 00 00       	jmp    c000348c <create_chain+0x1f5>
c00032d2:	83 f8 ff             	cmp    eax,0xffffffff
c00032d5:	0f 84 62 01 00 00    	je     c000343d <create_chain+0x1a6>
c00032db:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032de:	0f 87 a8 01 00 00    	ja     c000348c <create_chain+0x1f5>
c00032e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032e8:	eb 05                	jmp    c00032ef <create_chain+0x58>
c00032ea:	bf 01 00 00 00       	mov    edi,0x1
c00032ef:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032f3:	75 07                	jne    c00032fc <create_chain+0x65>
c00032f5:	31 db                	xor    ebx,ebx
c00032f7:	e9 90 01 00 00       	jmp    c000348c <create_chain+0x1f5>
c00032fc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032ff:	75 74                	jne    c0003375 <create_chain+0xde>
c0003301:	b9 01 00 00 00       	mov    ecx,0x1
c0003306:	89 fa                	mov    edx,edi
c0003308:	89 f0                	mov    eax,esi
c000330a:	e8 2d f9 ff ff       	call   c0002c3c <find_bitmap>
c000330f:	89 c3                	mov    ebx,eax
c0003311:	8d 40 ff             	lea    eax,[eax-0x1]
c0003314:	83 f8 fd             	cmp    eax,0xfffffffd
c0003317:	0f 87 6f 01 00 00    	ja     c000348c <create_chain+0x1f5>
c000331d:	83 ec 0c             	sub    esp,0xc
c0003320:	b9 01 00 00 00       	mov    ecx,0x1
c0003325:	6a 01                	push   0x1
c0003327:	89 da                	mov    edx,ebx
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 bf f9 ff ff       	call   c0002cef <change_bitmap>
c0003330:	83 c4 10             	add    esp,0x10
c0003333:	83 f8 02             	cmp    eax,0x2
c0003336:	74 90                	je     c00032c8 <create_chain+0x31>
c0003338:	83 f8 01             	cmp    eax,0x1
c000333b:	0f 84 fc 00 00 00    	je     c000343d <create_chain+0x1a6>
c0003341:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003346:	75 09                	jne    c0003351 <create_chain+0xba>
c0003348:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000334c:	e9 0c 01 00 00       	jmp    c000345d <create_chain+0x1c6>
c0003351:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003355:	0f 85 e7 00 00 00    	jne    c0003442 <create_chain+0x1ab>
c000335b:	8d 57 01             	lea    edx,[edi+0x1]
c000335e:	39 da                	cmp    edx,ebx
c0003360:	0f 84 f7 00 00 00    	je     c000345d <create_chain+0x1c6>
c0003366:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003369:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000336d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003370:	e9 cd 00 00 00       	jmp    c0003442 <create_chain+0x1ab>
c0003375:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003379:	75 41                	jne    c00033bc <create_chain+0x125>
c000337b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000337e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003381:	77 05                	ja     c0003388 <create_chain+0xf1>
c0003383:	bb 02 00 00 00       	mov    ebx,0x2
c0003388:	89 da                	mov    edx,ebx
c000338a:	89 e8                	mov    eax,ebp
c000338c:	e8 18 fc ff ff       	call   c0002fa9 <get_fat>
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	0f 84 2e ff ff ff    	je     c00032c8 <create_chain+0x31>
c000339a:	83 f8 ff             	cmp    eax,0xffffffff
c000339d:	0f 84 9a 00 00 00    	je     c000343d <create_chain+0x1a6>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 11                	je     c00033b8 <create_chain+0x121>
c00033a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033aa:	83 f8 01             	cmp    eax,0x1
c00033ad:	76 0d                	jbe    c00033bc <create_chain+0x125>
c00033af:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033b2:	76 08                	jbe    c00033bc <create_chain+0x125>
c00033b4:	89 c7                	mov    edi,eax
c00033b6:	eb 04                	jmp    c00033bc <create_chain+0x125>
c00033b8:	85 db                	test   ebx,ebx
c00033ba:	75 38                	jne    c00033f4 <create_chain+0x15d>
c00033bc:	89 fb                	mov    ebx,edi
c00033be:	43                   	inc    ebx
c00033bf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c2:	77 0e                	ja     c00033d2 <create_chain+0x13b>
c00033c4:	83 ff 01             	cmp    edi,0x1
c00033c7:	0f 86 28 ff ff ff    	jbe    c00032f5 <create_chain+0x5e>
c00033cd:	bb 02 00 00 00       	mov    ebx,0x2
c00033d2:	89 da                	mov    edx,ebx
c00033d4:	89 e8                	mov    eax,ebp
c00033d6:	e8 ce fb ff ff       	call   c0002fa9 <get_fat>
c00033db:	85 c0                	test   eax,eax
c00033dd:	74 15                	je     c00033f4 <create_chain+0x15d>
c00033df:	83 f8 01             	cmp    eax,0x1
c00033e2:	0f 84 e0 fe ff ff    	je     c00032c8 <create_chain+0x31>
c00033e8:	40                   	inc    eax
c00033e9:	74 52                	je     c000343d <create_chain+0x1a6>
c00033eb:	39 fb                	cmp    ebx,edi
c00033ed:	75 cf                	jne    c00033be <create_chain+0x127>
c00033ef:	e9 01 ff ff ff       	jmp    c00032f5 <create_chain+0x5e>
c00033f4:	83 c9 ff             	or     ecx,0xffffffff
c00033f7:	89 da                	mov    edx,ebx
c00033f9:	89 f0                	mov    eax,esi
c00033fb:	e8 a4 f9 ff ff       	call   c0002da4 <put_fat>
c0003400:	85 c0                	test   eax,eax
c0003402:	75 32                	jne    c0003436 <create_chain+0x19f>
c0003404:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003409:	74 11                	je     c000341c <create_chain+0x185>
c000340b:	89 d9                	mov    ecx,ebx
c000340d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003411:	89 f0                	mov    eax,esi
c0003413:	e8 8c f9 ff ff       	call   c0002da4 <put_fat>
c0003418:	85 c0                	test   eax,eax
c000341a:	75 1a                	jne    c0003436 <create_chain+0x19f>
c000341c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000341f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003422:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003425:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003428:	39 d0                	cmp    eax,edx
c000342a:	77 04                	ja     c0003430 <create_chain+0x199>
c000342c:	48                   	dec    eax
c000342d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003430:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003434:	eb 56                	jmp    c000348c <create_chain+0x1f5>
c0003436:	48                   	dec    eax
c0003437:	0f 85 8b fe ff ff    	jne    c00032c8 <create_chain+0x31>
c000343d:	83 cb ff             	or     ebx,0xffffffff
c0003440:	eb 4a                	jmp    c000348c <create_chain+0x1f5>
c0003442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003446:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003449:	41                   	inc    ecx
c000344a:	39 d9                	cmp    ecx,ebx
c000344c:	75 19                	jne    c0003467 <create_chain+0x1d0>
c000344e:	b9 02 00 00 00       	mov    ecx,0x2
c0003453:	85 d2                	test   edx,edx
c0003455:	74 03                	je     c000345a <create_chain+0x1c3>
c0003457:	8d 4a 01             	lea    ecx,[edx+0x1]
c000345a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000345d:	85 c0                	test   eax,eax
c000345f:	0f 85 63 fe ff ff    	jne    c00032c8 <create_chain+0x31>
c0003465:	eb b5                	jmp    c000341c <create_chain+0x185>
c0003467:	85 d2                	test   edx,edx
c0003469:	75 07                	jne    c0003472 <create_chain+0x1db>
c000346b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003472:	89 d9                	mov    ecx,ebx
c0003474:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003478:	89 e8                	mov    eax,ebp
c000347a:	e8 bb fa ff ff       	call   c0002f3a <fill_last_frag>
c000347f:	85 c0                	test   eax,eax
c0003481:	75 b3                	jne    c0003436 <create_chain+0x19f>
c0003483:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000348a:	eb 90                	jmp    c000341c <create_chain+0x185>
c000348c:	83 c4 1c             	add    esp,0x1c
c000348f:	89 d8                	mov    eax,ebx
c0003491:	5b                   	pop    ebx
c0003492:	5e                   	pop    esi
c0003493:	5f                   	pop    edi
c0003494:	5d                   	pop    ebp
c0003495:	c3                   	ret    

c0003496 <remove_chain>:
c0003496:	55                   	push   ebp
c0003497:	57                   	push   edi
c0003498:	56                   	push   esi
c0003499:	53                   	push   ebx
c000349a:	83 ec 1c             	sub    esp,0x1c
c000349d:	83 fa 01             	cmp    edx,0x1
c00034a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034a4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034a6:	77 0a                	ja     c00034b2 <remove_chain+0x1c>
c00034a8:	b8 02 00 00 00       	mov    eax,0x2
c00034ad:	e9 24 01 00 00       	jmp    c00035d6 <remove_chain+0x140>
c00034b2:	89 d6                	mov    esi,edx
c00034b4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034b7:	76 ef                	jbe    c00034a8 <remove_chain+0x12>
c00034b9:	89 c7                	mov    edi,eax
c00034bb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034c0:	75 06                	jne    c00034c8 <remove_chain+0x32>
c00034c2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034c6:	eb 54                	jmp    c000351c <remove_chain+0x86>
c00034c8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034cb:	75 06                	jne    c00034d3 <remove_chain+0x3d>
c00034cd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034d1:	74 ef                	je     c00034c2 <remove_chain+0x2c>
c00034d3:	83 c9 ff             	or     ecx,0xffffffff
c00034d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034da:	89 d8                	mov    eax,ebx
c00034dc:	e8 c3 f8 ff ff       	call   c0002da4 <put_fat>
c00034e1:	85 c0                	test   eax,eax
c00034e3:	74 dd                	je     c00034c2 <remove_chain+0x2c>
c00034e5:	e9 ec 00 00 00       	jmp    c00035d6 <remove_chain+0x140>
c00034ea:	83 f8 01             	cmp    eax,0x1
c00034ed:	74 b9                	je     c00034a8 <remove_chain+0x12>
c00034ef:	83 f8 ff             	cmp    eax,0xffffffff
c00034f2:	74 6d                	je     c0003561 <remove_chain+0xcb>
c00034f4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f7:	75 6f                	jne    c0003568 <remove_chain+0xd2>
c00034f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034fc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034ff:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003502:	39 d0                	cmp    eax,edx
c0003504:	73 08                	jae    c000350e <remove_chain+0x78>
c0003506:	40                   	inc    eax
c0003507:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000350b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000350e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003511:	39 e9                	cmp    ecx,ebp
c0003513:	75 64                	jne    c0003579 <remove_chain+0xe3>
c0003515:	89 ee                	mov    esi,ebp
c0003517:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000351a:	76 0f                	jbe    c000352b <remove_chain+0x95>
c000351c:	89 f2                	mov    edx,esi
c000351e:	89 f8                	mov    eax,edi
c0003520:	e8 84 fa ff ff       	call   c0002fa9 <get_fat>
c0003525:	89 c5                	mov    ebp,eax
c0003527:	85 c0                	test   eax,eax
c0003529:	75 bf                	jne    c00034ea <remove_chain+0x54>
c000352b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000352e:	0f 85 a0 00 00 00    	jne    c00035d4 <remove_chain+0x13e>
c0003534:	eb 6c                	jmp    c00035a2 <remove_chain+0x10c>
c0003536:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003539:	84 c0                	test   al,al
c000353b:	75 7d                	jne    c00035ba <remove_chain+0x124>
c000353d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003540:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003544:	0f 84 86 00 00 00    	je     c00035d0 <remove_chain+0x13a>
c000354a:	89 da                	mov    edx,ebx
c000354c:	89 f8                	mov    eax,edi
c000354e:	e8 56 fa ff ff       	call   c0002fa9 <get_fat>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	0f 86 4c ff ff ff    	jbe    c00034a8 <remove_chain+0x12>
c000355c:	83 f8 ff             	cmp    eax,0xffffffff
c000355f:	75 4e                	jne    c00035af <remove_chain+0x119>
c0003561:	b8 01 00 00 00       	mov    eax,0x1
c0003566:	eb 6e                	jmp    c00035d6 <remove_chain+0x140>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 31 f8 ff ff       	call   c0002da4 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	74 82                	je     c00034f9 <remove_chain+0x63>
c0003577:	eb 5d                	jmp    c00035d6 <remove_chain+0x140>
c0003579:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000357c:	75 1b                	jne    c0003599 <remove_chain+0x103>
c000357e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003582:	89 d8                	mov    eax,ebx
c0003584:	83 ec 0c             	sub    esp,0xc
c0003587:	6a 00                	push   0x0
c0003589:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000358d:	e8 5d f7 ff ff       	call   c0002cef <change_bitmap>
c0003592:	83 c4 10             	add    esp,0x10
c0003595:	85 c0                	test   eax,eax
c0003597:	75 3d                	jne    c00035d6 <remove_chain+0x140>
c0003599:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000359d:	e9 73 ff ff ff       	jmp    c0003515 <remove_chain+0x7f>
c00035a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035a7:	75 8d                	jne    c0003536 <remove_chain+0xa0>
c00035a9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ad:	eb 25                	jmp    c00035d4 <remove_chain+0x13e>
c00035af:	8d 53 01             	lea    edx,[ebx+0x1]
c00035b2:	89 c3                	mov    ebx,eax
c00035b4:	39 c2                	cmp    edx,eax
c00035b6:	74 88                	je     c0003540 <remove_chain+0xaa>
c00035b8:	eb 1a                	jmp    c00035d4 <remove_chain+0x13e>
c00035ba:	3c 03                	cmp    al,0x3
c00035bc:	75 16                	jne    c00035d4 <remove_chain+0x13e>
c00035be:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035c5:	77 0d                	ja     c00035d4 <remove_chain+0x13e>
c00035c7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ca:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ce:	72 04                	jb     c00035d4 <remove_chain+0x13e>
c00035d0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035d4:	31 c0                	xor    eax,eax
c00035d6:	83 c4 1c             	add    esp,0x1c
c00035d9:	5b                   	pop    ebx
c00035da:	5e                   	pop    esi
c00035db:	5f                   	pop    edi
c00035dc:	5d                   	pop    ebp
c00035dd:	c3                   	ret    

c00035de <dir_clear>:
c00035de:	55                   	push   ebp
c00035df:	57                   	push   edi
c00035e0:	56                   	push   esi
c00035e1:	89 c6                	mov    esi,eax
c00035e3:	53                   	push   ebx
c00035e4:	83 ec 1c             	sub    esp,0x1c
c00035e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035eb:	e8 9d ed ff ff       	call   c000238d <sync_window>
c00035f0:	85 c0                	test   eax,eax
c00035f2:	0f 85 de 00 00 00    	jne    c00036d6 <dir_clear+0xf8>
c00035f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035fc:	89 f0                	mov    eax,esi
c00035fe:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003601:	e8 d6 e8 ff ff       	call   c0001edc <clst2sect>
c0003606:	b9 00 02 00 00       	mov    ecx,0x200
c000360b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000360f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003613:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003616:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003619:	89 e8                	mov    eax,ebp
c000361b:	31 d2                	xor    edx,edx
c000361d:	e8 b5 e6 ff ff       	call   c0001cd7 <mem_set>
c0003622:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003626:	c1 e3 09             	shl    ebx,0x9
c0003629:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000362f:	76 1f                	jbe    c0003650 <dir_clear+0x72>
c0003631:	bb 00 80 00 00       	mov    ebx,0x8000
c0003636:	eb 18                	jmp    c0003650 <dir_clear+0x72>
c0003638:	83 ec 0c             	sub    esp,0xc
c000363b:	53                   	push   ebx
c000363c:	e8 35 4e 00 00       	call   c0008476 <ff_memalloc>
c0003641:	83 c4 10             	add    esp,0x10
c0003644:	89 c7                	mov    edi,eax
c0003646:	85 c0                	test   eax,eax
c0003648:	0f 85 8f 00 00 00    	jne    c00036dd <dir_clear+0xff>
c000364e:	d1 eb                	shr    ebx,1
c0003650:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003656:	77 e0                	ja     c0003638 <dir_clear+0x5a>
c0003658:	31 db                	xor    ebx,ebx
c000365a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000365e:	39 d8                	cmp    eax,ebx
c0003660:	76 66                	jbe    c00036c8 <dir_clear+0xea>
c0003662:	83 ec 0c             	sub    esp,0xc
c0003665:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003669:	6a 01                	push   0x1
c000366b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000366f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003673:	55                   	push   ebp
c0003674:	50                   	push   eax
c0003675:	e8 94 e5 ff ff       	call   c0001c0e <disk_write>
c000367a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000367f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003684:	83 c4 20             	add    esp,0x20
c0003687:	85 c0                	test   eax,eax
c0003689:	75 3d                	jne    c00036c8 <dir_clear+0xea>
c000368b:	43                   	inc    ebx
c000368c:	eb cc                	jmp    c000365a <dir_clear+0x7c>
c000368e:	83 ec 0c             	sub    esp,0xc
c0003691:	31 d2                	xor    edx,edx
c0003693:	55                   	push   ebp
c0003694:	89 d8                	mov    eax,ebx
c0003696:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000369a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000369e:	52                   	push   edx
c000369f:	50                   	push   eax
c00036a0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036a4:	57                   	push   edi
c00036a5:	50                   	push   eax
c00036a6:	e8 63 e5 ff ff       	call   c0001c0e <disk_write>
c00036ab:	83 c4 20             	add    esp,0x20
c00036ae:	85 c0                	test   eax,eax
c00036b0:	75 0a                	jne    c00036bc <dir_clear+0xde>
c00036b2:	01 eb                	add    ebx,ebp
c00036b4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b8:	39 d8                	cmp    eax,ebx
c00036ba:	77 d2                	ja     c000368e <dir_clear+0xb0>
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	57                   	push   edi
c00036c0:	e8 c7 4d 00 00       	call   c000848c <ff_memfree>
c00036c5:	83 c4 10             	add    esp,0x10
c00036c8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036cc:	39 d8                	cmp    eax,ebx
c00036ce:	0f 95 c0             	setne  al
c00036d1:	0f b6 c0             	movzx  eax,al
c00036d4:	eb 19                	jmp    c00036ef <dir_clear+0x111>
c00036d6:	b8 01 00 00 00       	mov    eax,0x1
c00036db:	eb 12                	jmp    c00036ef <dir_clear+0x111>
c00036dd:	89 d9                	mov    ecx,ebx
c00036df:	31 d2                	xor    edx,edx
c00036e1:	c1 eb 09             	shr    ebx,0x9
c00036e4:	e8 ee e5 ff ff       	call   c0001cd7 <mem_set>
c00036e9:	89 dd                	mov    ebp,ebx
c00036eb:	31 db                	xor    ebx,ebx
c00036ed:	eb c5                	jmp    c00036b4 <dir_clear+0xd6>
c00036ef:	83 c4 1c             	add    esp,0x1c
c00036f2:	5b                   	pop    ebx
c00036f3:	5e                   	pop    esi
c00036f4:	5f                   	pop    edi
c00036f5:	5d                   	pop    ebp
c00036f6:	c3                   	ret    

c00036f7 <dir_next>:
c00036f7:	55                   	push   ebp
c00036f8:	57                   	push   edi
c00036f9:	56                   	push   esi
c00036fa:	53                   	push   ebx
c00036fb:	89 c3                	mov    ebx,eax
c00036fd:	83 ec 1c             	sub    esp,0x1c
c0003700:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003702:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003706:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003709:	8d 78 20             	lea    edi,[eax+0x20]
c000370c:	31 c0                	xor    eax,eax
c000370e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003712:	0f 94 c0             	sete   al
c0003715:	48                   	dec    eax
c0003716:	25 00 00 20 f0       	and    eax,0xf0200000
c000371b:	05 00 00 00 10       	add    eax,0x10000000
c0003720:	39 f8                	cmp    eax,edi
c0003722:	77 0e                	ja     c0003732 <dir_next+0x3b>
c0003724:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000372b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003732:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003735:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003738:	b8 04 00 00 00       	mov    eax,0x4
c000373d:	89 ce                	mov    esi,ecx
c000373f:	09 d6                	or     esi,edx
c0003741:	0f 84 da 00 00 00    	je     c0003821 <dir_next+0x12a>
c0003747:	89 f8                	mov    eax,edi
c0003749:	25 ff 01 00 00       	and    eax,0x1ff
c000374e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003752:	0f 85 b9 00 00 00    	jne    c0003811 <dir_next+0x11a>
c0003758:	83 c2 01             	add    edx,0x1
c000375b:	83 d1 00             	adc    ecx,0x0
c000375e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003761:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003764:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003767:	85 d2                	test   edx,edx
c0003769:	75 29                	jne    c0003794 <dir_next+0x9d>
c000376b:	89 fa                	mov    edx,edi
c000376d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003771:	c1 ea 05             	shr    edx,0x5
c0003774:	39 c2                	cmp    edx,eax
c0003776:	0f 82 95 00 00 00    	jb     c0003811 <dir_next+0x11a>
c000377c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003783:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000378a:	b8 04 00 00 00       	mov    eax,0x4
c000378f:	e9 8d 00 00 00       	jmp    c0003821 <dir_next+0x12a>
c0003794:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003798:	89 f9                	mov    ecx,edi
c000379a:	48                   	dec    eax
c000379b:	c1 e9 09             	shr    ecx,0x9
c000379e:	85 c8                	test   eax,ecx
c00037a0:	75 6f                	jne    c0003811 <dir_next+0x11a>
c00037a2:	89 d8                	mov    eax,ebx
c00037a4:	e8 00 f8 ff ff       	call   c0002fa9 <get_fat>
c00037a9:	89 c6                	mov    esi,eax
c00037ab:	83 f8 01             	cmp    eax,0x1
c00037ae:	77 07                	ja     c00037b7 <dir_next+0xc0>
c00037b0:	b8 02 00 00 00       	mov    eax,0x2
c00037b5:	eb 6a                	jmp    c0003821 <dir_next+0x12a>
c00037b7:	83 f8 ff             	cmp    eax,0xffffffff
c00037ba:	75 07                	jne    c00037c3 <dir_next+0xcc>
c00037bc:	b8 01 00 00 00       	mov    eax,0x1
c00037c1:	eb 5e                	jmp    c0003821 <dir_next+0x12a>
c00037c3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037c6:	77 37                	ja     c00037ff <dir_next+0x108>
c00037c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037cd:	74 ad                	je     c000377c <dir_next+0x85>
c00037cf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 be fa ff ff       	call   c0003297 <create_chain>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	b8 07 00 00 00       	mov    eax,0x7
c00037e0:	85 f6                	test   esi,esi
c00037e2:	74 3d                	je     c0003821 <dir_next+0x12a>
c00037e4:	83 fe 01             	cmp    esi,0x1
c00037e7:	74 c7                	je     c00037b0 <dir_next+0xb9>
c00037e9:	83 fe ff             	cmp    esi,0xffffffff
c00037ec:	74 ce                	je     c00037bc <dir_next+0xc5>
c00037ee:	89 f2                	mov    edx,esi
c00037f0:	89 e8                	mov    eax,ebp
c00037f2:	e8 e7 fd ff ff       	call   c00035de <dir_clear>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	75 c1                	jne    c00037bc <dir_next+0xc5>
c00037fb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037ff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003802:	89 f2                	mov    edx,esi
c0003804:	89 e8                	mov    eax,ebp
c0003806:	e8 d1 e6 ff ff       	call   c0001edc <clst2sect>
c000380b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000380e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003815:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003818:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000381c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000381f:	31 c0                	xor    eax,eax
c0003821:	83 c4 1c             	add    esp,0x1c
c0003824:	5b                   	pop    ebx
c0003825:	5e                   	pop    esi
c0003826:	5f                   	pop    edi
c0003827:	5d                   	pop    ebp
c0003828:	c3                   	ret    

c0003829 <load_xdir>:
c0003829:	55                   	push   ebp
c000382a:	57                   	push   edi
c000382b:	56                   	push   esi
c000382c:	89 c6                	mov    esi,eax
c000382e:	53                   	push   ebx
c000382f:	83 ec 1c             	sub    esp,0x1c
c0003832:	8b 00                	mov    eax,DWORD PTR [eax]
c0003834:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003837:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000383a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000383d:	e8 df eb ff ff       	call   c0002421 <move_window>
c0003842:	89 c3                	mov    ebx,eax
c0003844:	85 c0                	test   eax,eax
c0003846:	0f 85 0c 01 00 00    	jne    c0003958 <load_xdir+0x12f>
c000384c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000384f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003852:	0f 85 fb 00 00 00    	jne    c0003953 <load_xdir+0x12a>
c0003858:	89 f8                	mov    eax,edi
c000385a:	b9 20 00 00 00       	mov    ecx,0x20
c000385f:	e8 5e e4 ff ff       	call   c0001cc2 <mem_cpy>
c0003864:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003868:	40                   	inc    eax
c0003869:	c1 e0 05             	shl    eax,0x5
c000386c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003870:	83 e8 60             	sub    eax,0x60
c0003873:	3d 00 02 00 00       	cmp    eax,0x200
c0003878:	0f 87 d5 00 00 00    	ja     c0003953 <load_xdir+0x12a>
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 f0                	mov    eax,esi
c0003882:	e8 70 fe ff ff       	call   c00036f7 <dir_next>
c0003887:	89 c3                	mov    ebx,eax
c0003889:	83 f8 04             	cmp    eax,0x4
c000388c:	0f 84 c1 00 00 00    	je     c0003953 <load_xdir+0x12a>
c0003892:	85 c0                	test   eax,eax
c0003894:	0f 85 be 00 00 00    	jne    c0003958 <load_xdir+0x12f>
c000389a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00038a2:	e8 7a eb ff ff       	call   c0002421 <move_window>
c00038a7:	89 c3                	mov    ebx,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 85 a7 00 00 00    	jne    c0003958 <load_xdir+0x12f>
c00038b1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038b7:	0f 85 96 00 00 00    	jne    c0003953 <load_xdir+0x12a>
c00038bd:	8d 47 20             	lea    eax,[edi+0x20]
c00038c0:	b9 20 00 00 00       	mov    ecx,0x20
c00038c5:	e8 f8 e3 ff ff       	call   c0001cc2 <mem_cpy>
c00038ca:	31 d2                	xor    edx,edx
c00038cc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038d0:	b9 0f 00 00 00       	mov    ecx,0xf
c00038d5:	83 c0 2c             	add    eax,0x2c
c00038d8:	f7 f1                	div    ecx
c00038da:	c1 e0 05             	shl    eax,0x5
c00038dd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038e1:	77 70                	ja     c0003953 <load_xdir+0x12a>
c00038e3:	bd 40 00 00 00       	mov    ebp,0x40
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	89 f0                	mov    eax,esi
c00038ec:	e8 06 fe ff ff       	call   c00036f7 <dir_next>
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 f8 04             	cmp    eax,0x4
c00038f6:	74 5b                	je     c0003953 <load_xdir+0x12a>
c00038f8:	85 c0                	test   eax,eax
c00038fa:	75 5c                	jne    c0003958 <load_xdir+0x12f>
c00038fc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038ff:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003902:	8b 06                	mov    eax,DWORD PTR [esi]
c0003904:	e8 18 eb ff ff       	call   c0002421 <move_window>
c0003909:	89 c3                	mov    ebx,eax
c000390b:	85 c0                	test   eax,eax
c000390d:	75 49                	jne    c0003958 <load_xdir+0x12f>
c000390f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003912:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003915:	75 3c                	jne    c0003953 <load_xdir+0x12a>
c0003917:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000391d:	77 0d                	ja     c000392c <load_xdir+0x103>
c000391f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003922:	b9 20 00 00 00       	mov    ecx,0x20
c0003927:	e8 96 e3 ff ff       	call   c0001cc2 <mem_cpy>
c000392c:	83 c5 20             	add    ebp,0x20
c000392f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003933:	77 b3                	ja     c00038e8 <load_xdir+0xbf>
c0003935:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000393b:	77 1b                	ja     c0003958 <load_xdir+0x12f>
c000393d:	89 f8                	mov    eax,edi
c000393f:	e8 cd e7 ff ff       	call   c0002111 <xdir_sum>
c0003944:	89 c1                	mov    ecx,eax
c0003946:	8d 47 02             	lea    eax,[edi+0x2]
c0003949:	e8 f5 e2 ff ff       	call   c0001c43 <ld_word>
c000394e:	66 39 c1             	cmp    cx,ax
c0003951:	74 05                	je     c0003958 <load_xdir+0x12f>
c0003953:	bb 02 00 00 00       	mov    ebx,0x2
c0003958:	83 c4 1c             	add    esp,0x1c
c000395b:	89 d8                	mov    eax,ebx
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <load_obj_xdir>:
c0003962:	53                   	push   ebx
c0003963:	89 c3                	mov    ebx,eax
c0003965:	83 ec 08             	sub    esp,0x8
c0003968:	8b 02                	mov    eax,DWORD PTR [edx]
c000396a:	89 03                	mov    DWORD PTR [ebx],eax
c000396c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000396f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003972:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003975:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003978:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000397b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003982:	30 c0                	xor    al,al
c0003984:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000398b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000398e:	89 d8                	mov    eax,ebx
c0003990:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003993:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003996:	e8 04 f8 ff ff       	call   c000319f <dir_sdi>
c000399b:	85 c0                	test   eax,eax
c000399d:	75 0b                	jne    c00039aa <load_obj_xdir+0x48>
c000399f:	89 d8                	mov    eax,ebx
c00039a1:	83 c4 08             	add    esp,0x8
c00039a4:	5b                   	pop    ebx
c00039a5:	e9 7f fe ff ff       	jmp    c0003829 <load_xdir>
c00039aa:	83 c4 08             	add    esp,0x8
c00039ad:	5b                   	pop    ebx
c00039ae:	c3                   	ret    

c00039af <dir_read>:
c00039af:	55                   	push   ebp
c00039b0:	bd 04 00 00 00       	mov    ebp,0x4
c00039b5:	57                   	push   edi
c00039b6:	56                   	push   esi
c00039b7:	be ff ff ff ff       	mov    esi,0xffffffff
c00039bc:	53                   	push   ebx
c00039bd:	89 c3                	mov    ebx,eax
c00039bf:	83 ec 1c             	sub    esp,0x1c
c00039c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00039c8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039cd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039d0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039d3:	89 c8                	mov    eax,ecx
c00039d5:	09 d0                	or     eax,edx
c00039d7:	0f 84 25 01 00 00    	je     c0003b02 <dir_read+0x153>
c00039dd:	89 f8                	mov    eax,edi
c00039df:	e8 3d ea ff ff       	call   c0002421 <move_window>
c00039e4:	89 c5                	mov    ebp,eax
c00039e6:	85 c0                	test   eax,eax
c00039e8:	0f 85 23 01 00 00    	jne    c0003b11 <dir_read+0x162>
c00039ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039f1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039f3:	84 c9                	test   cl,cl
c00039f5:	0f 84 11 01 00 00    	je     c0003b0c <dir_read+0x15d>
c00039fb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039fe:	75 48                	jne    c0003a48 <dir_read+0x99>
c0003a00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a05:	74 10                	je     c0003a17 <dir_read+0x68>
c0003a07:	80 f9 83             	cmp    cl,0x83
c0003a0a:	0f 85 dd 00 00 00    	jne    c0003aed <dir_read+0x13e>
c0003a10:	31 ed                	xor    ebp,ebp
c0003a12:	e9 08 01 00 00       	jmp    c0003b1f <dir_read+0x170>
c0003a17:	80 f9 85             	cmp    cl,0x85
c0003a1a:	0f 85 cd 00 00 00    	jne    c0003aed <dir_read+0x13e>
c0003a20:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a23:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a26:	89 d8                	mov    eax,ebx
c0003a28:	e8 fc fd ff ff       	call   c0003829 <load_xdir>
c0003a2d:	89 c5                	mov    ebp,eax
c0003a2f:	85 c0                	test   eax,eax
c0003a31:	0f 85 da 00 00 00    	jne    c0003b11 <dir_read+0x162>
c0003a37:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a3a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a3d:	83 e0 3f             	and    eax,0x3f
c0003a40:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a43:	e9 d7 00 00 00       	jmp    c0003b1f <dir_read+0x170>
c0003a48:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a4b:	83 e0 3f             	and    eax,0x3f
c0003a4e:	80 f9 2e             	cmp    cl,0x2e
c0003a51:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a55:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a58:	0f 84 8a 00 00 00    	je     c0003ae8 <dir_read+0x139>
c0003a5e:	80 f9 e5             	cmp    cl,0xe5
c0003a61:	0f 84 81 00 00 00    	je     c0003ae8 <dir_read+0x139>
c0003a67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a6b:	83 e0 1f             	and    eax,0x1f
c0003a6e:	83 f8 08             	cmp    eax,0x8
c0003a71:	0f 94 c0             	sete   al
c0003a74:	0f b6 c0             	movzx  eax,al
c0003a77:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a7b:	75 6b                	jne    c0003ae8 <dir_read+0x139>
c0003a7d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a82:	75 44                	jne    c0003ac8 <dir_read+0x119>
c0003a84:	f6 c1 40             	test   cl,0x40
c0003a87:	74 12                	je     c0003a9b <dir_read+0xec>
c0003a89:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a8c:	83 e1 bf             	and    ecx,0xffffffbf
c0003a8f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a93:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a96:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a99:	eb 06                	jmp    c0003aa1 <dir_read+0xf2>
c0003a9b:	89 f0                	mov    eax,esi
c0003a9d:	38 c8                	cmp    al,cl
c0003a9f:	75 47                	jne    c0003ae8 <dir_read+0x139>
c0003aa1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003aa5:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aaa:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aad:	75 3e                	jne    c0003aed <dir_read+0x13e>
c0003aaf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ab3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ab6:	e8 8a e4 ff ff       	call   c0001f45 <pick_lfn>
c0003abb:	85 c0                	test   eax,eax
c0003abd:	74 2e                	je     c0003aed <dir_read+0x13e>
c0003abf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ac3:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ac6:	eb 25                	jmp    c0003aed <dir_read+0x13e>
c0003ac8:	89 f0                	mov    eax,esi
c0003aca:	84 c0                	test   al,al
c0003acc:	75 11                	jne    c0003adf <dir_read+0x130>
c0003ace:	89 d0                	mov    eax,edx
c0003ad0:	e8 2a e6 ff ff       	call   c00020ff <sum_sfn>
c0003ad5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ad9:	0f 84 31 ff ff ff    	je     c0003a10 <dir_read+0x61>
c0003adf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ae6:	eb 37                	jmp    c0003b1f <dir_read+0x170>
c0003ae8:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aed:	31 d2                	xor    edx,edx
c0003aef:	89 d8                	mov    eax,ebx
c0003af1:	e8 01 fc ff ff       	call   c00036f7 <dir_next>
c0003af6:	89 c5                	mov    ebp,eax
c0003af8:	85 c0                	test   eax,eax
c0003afa:	0f 84 cd fe ff ff    	je     c00039cd <dir_read+0x1e>
c0003b00:	eb 0f                	jmp    c0003b11 <dir_read+0x162>
c0003b02:	85 ed                	test   ebp,ebp
c0003b04:	0f 84 06 ff ff ff    	je     c0003a10 <dir_read+0x61>
c0003b0a:	eb 05                	jmp    c0003b11 <dir_read+0x162>
c0003b0c:	bd 04 00 00 00       	mov    ebp,0x4
c0003b11:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b18:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b1f:	83 c4 1c             	add    esp,0x1c
c0003b22:	89 e8                	mov    eax,ebp
c0003b24:	5b                   	pop    ebx
c0003b25:	5e                   	pop    esi
c0003b26:	5f                   	pop    edi
c0003b27:	5d                   	pop    ebp
c0003b28:	c3                   	ret    

c0003b29 <dir_alloc>:
c0003b29:	55                   	push   ebp
c0003b2a:	89 d5                	mov    ebp,edx
c0003b2c:	57                   	push   edi
c0003b2d:	31 d2                	xor    edx,edx
c0003b2f:	56                   	push   esi
c0003b30:	53                   	push   ebx
c0003b31:	89 c3                	mov    ebx,eax
c0003b33:	83 ec 0c             	sub    esp,0xc
c0003b36:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b38:	e8 62 f6 ff ff       	call   c000319f <dir_sdi>
c0003b3d:	85 c0                	test   eax,eax
c0003b3f:	75 4e                	jne    c0003b8f <dir_alloc+0x66>
c0003b41:	31 f6                	xor    esi,esi
c0003b43:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b46:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b49:	89 f8                	mov    eax,edi
c0003b4b:	e8 d1 e8 ff ff       	call   c0002421 <move_window>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	75 3b                	jne    c0003b8f <dir_alloc+0x66>
c0003b54:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b57:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b5a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b5c:	75 07                	jne    c0003b65 <dir_alloc+0x3c>
c0003b5e:	f7 d2                	not    edx
c0003b60:	c0 ea 07             	shr    dl,0x7
c0003b63:	eb 0d                	jmp    c0003b72 <dir_alloc+0x49>
c0003b65:	84 d2                	test   dl,dl
c0003b67:	0f 94 c1             	sete   cl
c0003b6a:	80 fa e5             	cmp    dl,0xe5
c0003b6d:	0f 94 c2             	sete   dl
c0003b70:	09 ca                	or     edx,ecx
c0003b72:	84 d2                	test   dl,dl
c0003b74:	74 07                	je     c0003b7d <dir_alloc+0x54>
c0003b76:	46                   	inc    esi
c0003b77:	39 ee                	cmp    esi,ebp
c0003b79:	75 04                	jne    c0003b7f <dir_alloc+0x56>
c0003b7b:	eb 1c                	jmp    c0003b99 <dir_alloc+0x70>
c0003b7d:	31 f6                	xor    esi,esi
c0003b7f:	ba 01 00 00 00       	mov    edx,0x1
c0003b84:	89 d8                	mov    eax,ebx
c0003b86:	e8 6c fb ff ff       	call   c00036f7 <dir_next>
c0003b8b:	85 c0                	test   eax,eax
c0003b8d:	74 b4                	je     c0003b43 <dir_alloc+0x1a>
c0003b8f:	83 f8 04             	cmp    eax,0x4
c0003b92:	75 05                	jne    c0003b99 <dir_alloc+0x70>
c0003b94:	b8 07 00 00 00       	mov    eax,0x7
c0003b99:	83 c4 0c             	add    esp,0xc
c0003b9c:	5b                   	pop    ebx
c0003b9d:	5e                   	pop    esi
c0003b9e:	5f                   	pop    edi
c0003b9f:	5d                   	pop    ebp
c0003ba0:	c3                   	ret    

c0003ba1 <store_xdir>:
c0003ba1:	55                   	push   ebp
c0003ba2:	57                   	push   edi
c0003ba3:	89 c7                	mov    edi,eax
c0003ba5:	56                   	push   esi
c0003ba6:	53                   	push   ebx
c0003ba7:	83 ec 0c             	sub    esp,0xc
c0003baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bac:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003baf:	89 e8                	mov    eax,ebp
c0003bb1:	e8 5b e5 ff ff       	call   c0002111 <xdir_sum>
c0003bb6:	0f b7 d0             	movzx  edx,ax
c0003bb9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bbc:	e8 f4 e0 ff ff       	call   c0001cb5 <st_word>
c0003bc1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bc5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bc8:	89 f8                	mov    eax,edi
c0003bca:	e8 d0 f5 ff ff       	call   c000319f <dir_sdi>
c0003bcf:	89 c6                	mov    esi,eax
c0003bd1:	85 f6                	test   esi,esi
c0003bd3:	75 3d                	jne    c0003c12 <store_xdir+0x71>
c0003bd5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bd8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	e8 3f e8 ff ff       	call   c0002421 <move_window>
c0003be2:	89 c6                	mov    esi,eax
c0003be4:	85 c0                	test   eax,eax
c0003be6:	75 2a                	jne    c0003c12 <store_xdir+0x71>
c0003be8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003beb:	b9 20 00 00 00       	mov    ecx,0x20
c0003bf0:	89 ea                	mov    edx,ebp
c0003bf2:	e8 cb e0 ff ff       	call   c0001cc2 <mem_cpy>
c0003bf7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bf9:	85 db                	test   ebx,ebx
c0003bfb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003bff:	74 11                	je     c0003c12 <store_xdir+0x71>
c0003c01:	31 d2                	xor    edx,edx
c0003c03:	89 f8                	mov    eax,edi
c0003c05:	83 c5 20             	add    ebp,0x20
c0003c08:	e8 ea fa ff ff       	call   c00036f7 <dir_next>
c0003c0d:	4b                   	dec    ebx
c0003c0e:	89 c6                	mov    esi,eax
c0003c10:	eb bf                	jmp    c0003bd1 <store_xdir+0x30>
c0003c12:	89 f0                	mov    eax,esi
c0003c14:	83 fe 02             	cmp    esi,0x2
c0003c17:	76 05                	jbe    c0003c1e <store_xdir+0x7d>
c0003c19:	b8 02 00 00 00       	mov    eax,0x2
c0003c1e:	83 c4 0c             	add    esp,0xc
c0003c21:	5b                   	pop    ebx
c0003c22:	5e                   	pop    esi
c0003c23:	5f                   	pop    edi
c0003c24:	5d                   	pop    ebp
c0003c25:	c3                   	ret    

c0003c26 <dir_remove>:
c0003c26:	57                   	push   edi
c0003c27:	56                   	push   esi
c0003c28:	53                   	push   ebx
c0003c29:	89 c3                	mov    ebx,eax
c0003c2b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c2e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c30:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c33:	83 fa ff             	cmp    edx,0xffffffff
c0003c36:	74 09                	je     c0003c41 <dir_remove+0x1b>
c0003c38:	e8 62 f5 ff ff       	call   c000319f <dir_sdi>
c0003c3d:	85 c0                	test   eax,eax
c0003c3f:	75 41                	jne    c0003c82 <dir_remove+0x5c>
c0003c41:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c44:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c47:	89 f0                	mov    eax,esi
c0003c49:	e8 d3 e7 ff ff       	call   c0002421 <move_window>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	75 26                	jne    c0003c78 <dir_remove+0x52>
c0003c52:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c55:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c58:	75 05                	jne    c0003c5f <dir_remove+0x39>
c0003c5a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c5d:	eb 03                	jmp    c0003c62 <dir_remove+0x3c>
c0003c5f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c62:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c66:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c69:	73 17                	jae    c0003c82 <dir_remove+0x5c>
c0003c6b:	31 d2                	xor    edx,edx
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 83 fa ff ff       	call   c00036f7 <dir_next>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c9                	je     c0003c41 <dir_remove+0x1b>
c0003c78:	83 f8 04             	cmp    eax,0x4
c0003c7b:	75 05                	jne    c0003c82 <dir_remove+0x5c>
c0003c7d:	b8 02 00 00 00       	mov    eax,0x2
c0003c82:	5b                   	pop    ebx
c0003c83:	5e                   	pop    esi
c0003c84:	5f                   	pop    edi
c0003c85:	c3                   	ret    

c0003c86 <create_name>:
c0003c86:	55                   	push   ebp
c0003c87:	89 d5                	mov    ebp,edx
c0003c89:	57                   	push   edi
c0003c8a:	89 c7                	mov    edi,eax
c0003c8c:	56                   	push   esi
c0003c8d:	31 f6                	xor    esi,esi
c0003c8f:	53                   	push   ebx
c0003c90:	83 ec 3c             	sub    esp,0x3c
c0003c93:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c99:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ca2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ca6:	e8 72 e0 ff ff       	call   c0001d1d <tchar2uni>
c0003cab:	89 c3                	mov    ebx,eax
c0003cad:	83 f8 ff             	cmp    eax,0xffffffff
c0003cb0:	75 0a                	jne    c0003cbc <create_name+0x36>
c0003cb2:	b8 06 00 00 00       	mov    eax,0x6
c0003cb7:	e9 9e 02 00 00       	jmp    c0003f5a <create_name+0x2d4>
c0003cbc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cc1:	76 0c                	jbe    c0003ccf <create_name+0x49>
c0003cc3:	c1 e8 10             	shr    eax,0x10
c0003cc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cca:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cce:	46                   	inc    esi
c0003ccf:	66 83 fb 1f          	cmp    bx,0x1f
c0003cd3:	76 4f                	jbe    c0003d24 <create_name+0x9e>
c0003cd5:	66 83 fb 5c          	cmp    bx,0x5c
c0003cd9:	74 35                	je     c0003d10 <create_name+0x8a>
c0003cdb:	66 83 fb 2f          	cmp    bx,0x2f
c0003cdf:	74 2f                	je     c0003d10 <create_name+0x8a>
c0003ce1:	66 83 fb 7f          	cmp    bx,0x7f
c0003ce5:	77 11                	ja     c0003cf8 <create_name+0x72>
c0003ce7:	0f b7 d3             	movzx  edx,bx
c0003cea:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0003cef:	e8 11 e0 ff ff       	call   c0001d05 <chk_chr>
c0003cf4:	85 c0                	test   eax,eax
c0003cf6:	75 ba                	jne    c0003cb2 <create_name+0x2c>
c0003cf8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003cfe:	77 b2                	ja     c0003cb2 <create_name+0x2c>
c0003d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d04:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d08:	46                   	inc    esi
c0003d09:	eb 97                	jmp    c0003ca2 <create_name+0x1c>
c0003d0b:	40                   	inc    eax
c0003d0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d14:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d16:	80 fa 2f             	cmp    dl,0x2f
c0003d19:	74 f0                	je     c0003d0b <create_name+0x85>
c0003d1b:	80 fa 5c             	cmp    dl,0x5c
c0003d1e:	74 eb                	je     c0003d0b <create_name+0x85>
c0003d20:	31 db                	xor    ebx,ebx
c0003d22:	eb 02                	jmp    c0003d26 <create_name+0xa0>
c0003d24:	b3 04                	mov    bl,0x4
c0003d26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d2a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d2d:	85 f6                	test   esi,esi
c0003d2f:	74 18                	je     c0003d49 <create_name+0xc3>
c0003d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d35:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d3a:	66 83 f8 20          	cmp    ax,0x20
c0003d3e:	74 06                	je     c0003d46 <create_name+0xc0>
c0003d40:	66 83 f8 2e          	cmp    ax,0x2e
c0003d44:	75 03                	jne    c0003d49 <create_name+0xc3>
c0003d46:	4e                   	dec    esi
c0003d47:	eb e4                	jmp    c0003d2d <create_name+0xa7>
c0003d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d4d:	31 ed                	xor    ebp,ebp
c0003d4f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d55:	85 f6                	test   esi,esi
c0003d57:	0f 84 55 ff ff ff    	je     c0003cb2 <create_name+0x2c>
c0003d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d61:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d64:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d68:	66 83 f8 20          	cmp    ax,0x20
c0003d6c:	75 04                	jne    c0003d72 <create_name+0xec>
c0003d6e:	89 d5                	mov    ebp,edx
c0003d70:	eb eb                	jmp    c0003d5d <create_name+0xd7>
c0003d72:	85 ed                	test   ebp,ebp
c0003d74:	75 06                	jne    c0003d7c <create_name+0xf6>
c0003d76:	66 83 f8 2e          	cmp    ax,0x2e
c0003d7a:	75 08                	jne    c0003d84 <create_name+0xfe>
c0003d7c:	83 cb 03             	or     ebx,0x3
c0003d7f:	eb 03                	jmp    c0003d84 <create_name+0xfe>
c0003d81:	4e                   	dec    esi
c0003d82:	74 0c                	je     c0003d90 <create_name+0x10a>
c0003d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d88:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d8e:	75 f1                	jne    c0003d81 <create_name+0xfb>
c0003d90:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d95:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d98:	ba 20 00 00 00       	mov    edx,0x20
c0003d9d:	e8 35 df ff ff       	call   c0001cd7 <mem_set>
c0003da2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003daa:	31 c9                	xor    ecx,ecx
c0003dac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003db1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003db4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dbc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dc0:	66 85 ed             	test   bp,bp
c0003dc3:	0f 84 30 01 00 00    	je     c0003ef9 <create_name+0x273>
c0003dc9:	66 83 fd 20          	cmp    bp,0x20
c0003dcd:	74 10                	je     c0003ddf <create_name+0x159>
c0003dcf:	66 83 fd 2e          	cmp    bp,0x2e
c0003dd3:	75 13                	jne    c0003de8 <create_name+0x162>
c0003dd5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd9:	0f 84 6b 01 00 00    	je     c0003f4a <create_name+0x2c4>
c0003ddf:	83 cb 03             	or     ebx,0x3
c0003de2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003de6:	eb c9                	jmp    c0003db1 <create_name+0x12b>
c0003de8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dec:	73 0b                	jae    c0003df9 <create_name+0x173>
c0003dee:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df2:	75 47                	jne    c0003e3b <create_name+0x1b5>
c0003df4:	e9 51 01 00 00       	jmp    c0003f4a <create_name+0x2c4>
c0003df9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003dfe:	75 10                	jne    c0003e10 <create_name+0x18a>
c0003e00:	83 cb 03             	or     ebx,0x3
c0003e03:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e0b:	e9 e9 00 00 00       	jmp    c0003ef9 <create_name+0x273>
c0003e10:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e14:	74 0d                	je     c0003e23 <create_name+0x19d>
c0003e16:	83 cb 03             	or     ebx,0x3
c0003e19:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1d:	0f 87 d6 00 00 00    	ja     c0003ef9 <create_name+0x273>
c0003e23:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e28:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e2c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e34:	b9 08 00 00 00       	mov    ecx,0x8
c0003e39:	eb a7                	jmp    c0003de2 <create_name+0x15c>
c0003e3b:	66 83 fd 7f          	cmp    bp,0x7f
c0003e3f:	76 68                	jbe    c0003ea9 <create_name+0x223>
c0003e41:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e45:	88 da                	mov    dl,bl
c0003e47:	83 ca 02             	or     edx,0x2
c0003e4a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e4e:	50                   	push   eax
c0003e4f:	50                   	push   eax
c0003e50:	68 b5 01 00 00       	push   0x1b5
c0003e55:	55                   	push   ebp
c0003e56:	e8 48 46 00 00       	call   c00084a3 <ff_uni2oem>
c0003e5b:	83 c4 10             	add    esp,0x10
c0003e5e:	89 c5                	mov    ebp,eax
c0003e60:	a8 80                	test   al,0x80
c0003e62:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e6a:	74 0c                	je     c0003e78 <create_name+0x1f2>
c0003e6c:	83 e5 7f             	and    ebp,0x7f
c0003e6f:	0f b6 ad e0 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6220]
c0003e76:	eb 2a                	jmp    c0003ea2 <create_name+0x21c>
c0003e78:	66 3d ff 00          	cmp    ax,0xff
c0003e7c:	76 24                	jbe    c0003ea2 <create_name+0x21c>
c0003e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e82:	48                   	dec    eax
c0003e83:	39 c8                	cmp    eax,ecx
c0003e85:	77 0c                	ja     c0003e93 <create_name+0x20d>
c0003e87:	83 cb 03             	or     ebx,0x3
c0003e8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e8e:	e9 4f ff ff ff       	jmp    c0003de2 <create_name+0x15c>
c0003e93:	89 e8                	mov    eax,ebp
c0003e95:	88 d3                	mov    bl,dl
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e9f:	41                   	inc    ecx
c0003ea0:	eb 4b                	jmp    c0003eed <create_name+0x267>
c0003ea2:	88 d3                	mov    bl,dl
c0003ea4:	66 85 ed             	test   bp,bp
c0003ea7:	74 19                	je     c0003ec2 <create_name+0x23c>
c0003ea9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ead:	0f b7 d5             	movzx  edx,bp
c0003eb0:	b8 9b 9e 02 c0       	mov    eax,0xc0029e9b
c0003eb5:	e8 4b de ff ff       	call   c0001d05 <chk_chr>
c0003eba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ebe:	85 c0                	test   eax,eax
c0003ec0:	74 0a                	je     c0003ecc <create_name+0x246>
c0003ec2:	83 cb 03             	or     ebx,0x3
c0003ec5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eca:	eb 21                	jmp    c0003eed <create_name+0x267>
c0003ecc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ecf:	66 83 f8 19          	cmp    ax,0x19
c0003ed3:	77 07                	ja     c0003edc <create_name+0x256>
c0003ed5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003eda:	eb 11                	jmp    c0003eed <create_name+0x267>
c0003edc:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003edf:	66 83 f8 19          	cmp    ax,0x19
c0003ee3:	77 08                	ja     c0003eed <create_name+0x267>
c0003ee5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003eea:	83 ed 20             	sub    ebp,0x20
c0003eed:	89 e8                	mov    eax,ebp
c0003eef:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ef3:	41                   	inc    ecx
c0003ef4:	e9 e9 fe ff ff       	jmp    c0003de2 <create_name+0x15c>
c0003ef9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003efd:	75 04                	jne    c0003f03 <create_name+0x27d>
c0003eff:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f03:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f08:	75 05                	jne    c0003f0f <create_name+0x289>
c0003f0a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f13:	83 e0 0c             	and    eax,0xc
c0003f16:	3c 0c                	cmp    al,0xc
c0003f18:	74 0b                	je     c0003f25 <create_name+0x29f>
c0003f1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1e:	83 e0 03             	and    eax,0x3
c0003f21:	3c 03                	cmp    al,0x3
c0003f23:	75 05                	jne    c0003f2a <create_name+0x2a4>
c0003f25:	83 cb 02             	or     ebx,0x2
c0003f28:	eb 19                	jmp    c0003f43 <create_name+0x2bd>
c0003f2a:	f6 c3 02             	test   bl,0x2
c0003f2d:	75 14                	jne    c0003f43 <create_name+0x2bd>
c0003f2f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f34:	74 03                	je     c0003f39 <create_name+0x2b3>
c0003f36:	83 cb 10             	or     ebx,0x10
c0003f39:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f3e:	74 03                	je     c0003f43 <create_name+0x2bd>
c0003f40:	83 cb 08             	or     ebx,0x8
c0003f43:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f46:	31 c0                	xor    eax,eax
c0003f48:	eb 10                	jmp    c0003f5a <create_name+0x2d4>
c0003f4a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f4f:	0f 85 ce fe ff ff    	jne    c0003e23 <create_name+0x19d>
c0003f55:	e9 a6 fe ff ff       	jmp    c0003e00 <create_name+0x17a>
c0003f5a:	83 c4 3c             	add    esp,0x3c
c0003f5d:	5b                   	pop    ebx
c0003f5e:	5e                   	pop    esi
c0003f5f:	5f                   	pop    edi
c0003f60:	5d                   	pop    ebp
c0003f61:	c3                   	ret    

c0003f62 <xname_sum>:
c0003f62:	56                   	push   esi
c0003f63:	53                   	push   ebx
c0003f64:	89 c6                	mov    esi,eax
c0003f66:	51                   	push   ecx
c0003f67:	31 db                	xor    ebx,ebx
c0003f69:	83 c6 02             	add    esi,0x2
c0003f6c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f70:	66 85 c0             	test   ax,ax
c0003f73:	74 1f                	je     c0003f94 <xname_sum+0x32>
c0003f75:	83 ec 0c             	sub    esp,0xc
c0003f78:	66 d1 cb             	ror    bx,1
c0003f7b:	50                   	push   eax
c0003f7c:	e8 1e 46 00 00       	call   c000859f <ff_wtoupper>
c0003f81:	83 c4 10             	add    esp,0x10
c0003f84:	0f b6 d0             	movzx  edx,al
c0003f87:	66 c1 e8 08          	shr    ax,0x8
c0003f8b:	01 d3                	add    ebx,edx
c0003f8d:	66 d1 cb             	ror    bx,1
c0003f90:	01 c3                	add    ebx,eax
c0003f92:	eb d5                	jmp    c0003f69 <xname_sum+0x7>
c0003f94:	89 d8                	mov    eax,ebx
c0003f96:	5a                   	pop    edx
c0003f97:	5b                   	pop    ebx
c0003f98:	5e                   	pop    esi
c0003f99:	c3                   	ret    

c0003f9a <create_xdir>:
c0003f9a:	55                   	push   ebp
c0003f9b:	b9 40 00 00 00       	mov    ecx,0x40
c0003fa0:	57                   	push   edi
c0003fa1:	bd 01 00 00 00       	mov    ebp,0x1
c0003fa6:	56                   	push   esi
c0003fa7:	31 ff                	xor    edi,edi
c0003fa9:	53                   	push   ebx
c0003faa:	be 40 00 00 00       	mov    esi,0x40
c0003faf:	89 c3                	mov    ebx,eax
c0003fb1:	83 ec 1c             	sub    esp,0x1c
c0003fb4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fb8:	31 d2                	xor    edx,edx
c0003fba:	e8 18 dd ff ff       	call   c0001cd7 <mem_set>
c0003fbf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fc2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fc6:	31 c9                	xor    ecx,ecx
c0003fc8:	8d 46 01             	lea    eax,[esi+0x1]
c0003fcb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fcf:	83 c6 02             	add    esi,0x2
c0003fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fd6:	66 85 ed             	test   bp,bp
c0003fd9:	74 12                	je     c0003fed <create_xdir+0x53>
c0003fdb:	0f b6 c1             	movzx  eax,cl
c0003fde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fe6:	66 83 fd 01          	cmp    bp,0x1
c0003fea:	80 d9 ff             	sbb    cl,0xff
c0003fed:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ff0:	0f b7 d5             	movzx  edx,bp
c0003ff3:	83 c6 02             	add    esi,0x2
c0003ff6:	e8 ba dc ff ff       	call   c0001cb5 <st_word>
c0003ffb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004001:	75 d3                	jne    c0003fd6 <create_xdir+0x3c>
c0004003:	8d 47 01             	lea    eax,[edi+0x1]
c0004006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000400a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000400e:	0f b6 c1             	movzx  eax,cl
c0004011:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004016:	74 07                	je     c000401f <create_xdir+0x85>
c0004018:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000401d:	eb a9                	jmp    c0003fc8 <create_xdir+0x2e>
c000401f:	8d 47 02             	lea    eax,[edi+0x2]
c0004022:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004025:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004028:	89 d0                	mov    eax,edx
c000402a:	e8 33 ff ff ff       	call   c0003f62 <xname_sum>
c000402f:	83 c4 1c             	add    esp,0x1c
c0004032:	0f b7 d0             	movzx  edx,ax
c0004035:	8d 43 24             	lea    eax,[ebx+0x24]
c0004038:	5b                   	pop    ebx
c0004039:	5e                   	pop    esi
c000403a:	5f                   	pop    edi
c000403b:	5d                   	pop    ebp
c000403c:	e9 74 dc ff ff       	jmp    c0001cb5 <st_word>

c0004041 <cmp_lfn>:
c0004041:	55                   	push   ebp
c0004042:	57                   	push   edi
c0004043:	89 d7                	mov    edi,edx
c0004045:	56                   	push   esi
c0004046:	53                   	push   ebx
c0004047:	83 ec 1c             	sub    esp,0x1c
c000404a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000404e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004051:	e8 ed db ff ff       	call   c0001c43 <ld_word>
c0004056:	66 85 c0             	test   ax,ax
c0004059:	74 07                	je     c0004062 <cmp_lfn+0x21>
c000405b:	31 c0                	xor    eax,eax
c000405d:	e9 9a 00 00 00       	jmp    c00040fc <cmp_lfn+0xbb>
c0004062:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004064:	bd 01 00 00 00       	mov    ebp,0x1
c0004069:	83 e3 3f             	and    ebx,0x3f
c000406c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004074:	4b                   	dec    ebx
c0004075:	6b db 0d             	imul   ebx,ebx,0xd
c0004078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000407c:	0f b6 80 60 9e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd61a0]
c0004083:	01 f8                	add    eax,edi
c0004085:	e8 b9 db ff ff       	call   c0001c43 <ld_word>
c000408a:	66 85 ed             	test   bp,bp
c000408d:	89 c6                	mov    esi,eax
c000408f:	74 3c                	je     c00040cd <cmp_lfn+0x8c>
c0004091:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0004097:	77 c2                	ja     c000405b <cmp_lfn+0x1a>
c0004099:	83 ec 0c             	sub    esp,0xc
c000409c:	0f b7 c0             	movzx  eax,ax
c000409f:	50                   	push   eax
c00040a0:	e8 fa 44 00 00       	call   c000859f <ff_wtoupper>
c00040a5:	89 c5                	mov    ebp,eax
c00040a7:	8d 43 01             	lea    eax,[ebx+0x1]
c00040aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040b2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b9:	e8 e1 44 00 00       	call   c000859f <ff_wtoupper>
c00040be:	83 c4 10             	add    esp,0x10
c00040c1:	39 c5                	cmp    ebp,eax
c00040c3:	75 96                	jne    c000405b <cmp_lfn+0x1a>
c00040c5:	89 f5                	mov    ebp,esi
c00040c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040cb:	eb 04                	jmp    c00040d1 <cmp_lfn+0x90>
c00040cd:	66 46                	inc    si
c00040cf:	75 8a                	jne    c000405b <cmp_lfn+0x1a>
c00040d1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040d5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040da:	75 9c                	jne    c0004078 <cmp_lfn+0x37>
c00040dc:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040df:	74 16                	je     c00040f7 <cmp_lfn+0xb6>
c00040e1:	66 85 ed             	test   bp,bp
c00040e4:	74 11                	je     c00040f7 <cmp_lfn+0xb6>
c00040e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ea:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040ef:	0f 94 c0             	sete   al
c00040f2:	0f b6 c0             	movzx  eax,al
c00040f5:	eb 05                	jmp    c00040fc <cmp_lfn+0xbb>
c00040f7:	b8 01 00 00 00       	mov    eax,0x1
c00040fc:	83 c4 1c             	add    esp,0x1c
c00040ff:	5b                   	pop    ebx
c0004100:	5e                   	pop    esi
c0004101:	5f                   	pop    edi
c0004102:	5d                   	pop    ebp
c0004103:	c3                   	ret    

c0004104 <dir_find>:
c0004104:	55                   	push   ebp
c0004105:	31 d2                	xor    edx,edx
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	89 c3                	mov    ebx,eax
c000410c:	83 ec 1c             	sub    esp,0x1c
c000410f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004111:	e8 89 f0 ff ff       	call   c000319f <dir_sdi>
c0004116:	89 04 24             	mov    DWORD PTR [esp],eax
c0004119:	85 c0                	test   eax,eax
c000411b:	0f 85 9e 01 00 00    	jne    c00042bf <dir_find+0x1bb>
c0004121:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004124:	0f 85 8d 00 00 00    	jne    c00041b7 <dir_find+0xb3>
c000412a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000412d:	e8 30 fe ff ff       	call   c0003f62 <xname_sum>
c0004132:	89 c7                	mov    edi,eax
c0004134:	31 d2                	xor    edx,edx
c0004136:	89 d8                	mov    eax,ebx
c0004138:	e8 72 f8 ff ff       	call   c00039af <dir_read>
c000413d:	85 c0                	test   eax,eax
c000413f:	0f 85 5e 01 00 00    	jne    c00042a3 <dir_find+0x19f>
c0004145:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004148:	8d 41 24             	lea    eax,[ecx+0x24]
c000414b:	e8 f3 da ff ff       	call   c0001c43 <ld_word>
c0004150:	66 39 f8             	cmp    ax,di
c0004153:	75 df                	jne    c0004134 <dir_find+0x30>
c0004155:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004158:	31 ed                	xor    ebp,ebp
c000415a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000415e:	ba 40 00 00 00       	mov    edx,0x40
c0004163:	89 e9                	mov    ecx,ebp
c0004165:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004169:	0f 84 42 01 00 00    	je     c00042b1 <dir_find+0x1ad>
c000416f:	f6 c2 1f             	test   dl,0x1f
c0004172:	75 03                	jne    c0004177 <dir_find+0x73>
c0004174:	83 c2 02             	add    edx,0x2
c0004177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000417b:	89 d0                	mov    eax,edx
c000417d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004180:	e8 be da ff ff       	call   c0001c43 <ld_word>
c0004185:	83 ec 0c             	sub    esp,0xc
c0004188:	0f b7 c0             	movzx  eax,ax
c000418b:	50                   	push   eax
c000418c:	e8 0e 44 00 00       	call   c000859f <ff_wtoupper>
c0004191:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004195:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004198:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c000419c:	89 04 24             	mov    DWORD PTR [esp],eax
c000419f:	e8 fb 43 00 00       	call   c000859f <ff_wtoupper>
c00041a4:	83 c4 10             	add    esp,0x10
c00041a7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041ab:	75 87                	jne    c0004134 <dir_find+0x30>
c00041ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041b1:	45                   	inc    ebp
c00041b2:	83 c2 02             	add    edx,0x2
c00041b5:	eb ac                	jmp    c0004163 <dir_find+0x5f>
c00041b7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041be:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041c3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ce:	89 f0                	mov    eax,esi
c00041d0:	e8 4c e2 ff ff       	call   c0002421 <move_window>
c00041d5:	85 c0                	test   eax,eax
c00041d7:	0f 85 c6 00 00 00    	jne    c00042a3 <dir_find+0x19f>
c00041dd:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041e3:	84 c9                	test   cl,cl
c00041e5:	0f 84 bd 00 00 00    	je     c00042a8 <dir_find+0x1a4>
c00041eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041ee:	88 d0                	mov    al,dl
c00041f0:	83 e0 3f             	and    eax,0x3f
c00041f3:	80 f9 e5             	cmp    cl,0xe5
c00041f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041f9:	0f 84 87 00 00 00    	je     c0004286 <dir_find+0x182>
c00041ff:	80 e2 08             	and    dl,0x8
c0004202:	74 06                	je     c000420a <dir_find+0x106>
c0004204:	3c 0f                	cmp    al,0xf
c0004206:	75 7e                	jne    c0004286 <dir_find+0x182>
c0004208:	eb 04                	jmp    c000420e <dir_find+0x10a>
c000420a:	3c 0f                	cmp    al,0xf
c000420c:	75 4c                	jne    c000425a <dir_find+0x156>
c000420e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004212:	75 7e                	jne    c0004292 <dir_find+0x18e>
c0004214:	f6 c1 40             	test   cl,0x40
c0004217:	74 12                	je     c000422b <dir_find+0x127>
c0004219:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000421c:	83 e1 bf             	and    ecx,0xffffffbf
c000421f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004223:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004226:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004229:	eb 06                	jmp    c0004231 <dir_find+0x12d>
c000422b:	89 f8                	mov    eax,edi
c000422d:	38 c8                	cmp    al,cl
c000422f:	75 5c                	jne    c000428d <dir_find+0x189>
c0004231:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004235:	bf ff ff ff ff       	mov    edi,0xffffffff
c000423a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000423d:	75 53                	jne    c0004292 <dir_find+0x18e>
c000423f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004243:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004246:	89 ea                	mov    edx,ebp
c0004248:	e8 f4 fd ff ff       	call   c0004041 <cmp_lfn>
c000424d:	85 c0                	test   eax,eax
c000424f:	74 41                	je     c0004292 <dir_find+0x18e>
c0004251:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004255:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004258:	eb 38                	jmp    c0004292 <dir_find+0x18e>
c000425a:	89 f8                	mov    eax,edi
c000425c:	84 c0                	test   al,al
c000425e:	75 0d                	jne    c000426d <dir_find+0x169>
c0004260:	89 e8                	mov    eax,ebp
c0004262:	e8 98 de ff ff       	call   c00020ff <sum_sfn>
c0004267:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000426b:	74 52                	je     c00042bf <dir_find+0x1bb>
c000426d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004271:	75 13                	jne    c0004286 <dir_find+0x182>
c0004273:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004276:	b9 0b 00 00 00       	mov    ecx,0xb
c000427b:	89 e8                	mov    eax,ebp
c000427d:	e8 60 da ff ff       	call   c0001ce2 <mem_cmp>
c0004282:	85 c0                	test   eax,eax
c0004284:	74 39                	je     c00042bf <dir_find+0x1bb>
c0004286:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000428d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004292:	31 d2                	xor    edx,edx
c0004294:	89 d8                	mov    eax,ebx
c0004296:	e8 5c f4 ff ff       	call   c00036f7 <dir_next>
c000429b:	85 c0                	test   eax,eax
c000429d:	0f 84 25 ff ff ff    	je     c00041c8 <dir_find+0xc4>
c00042a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00042a6:	eb 17                	jmp    c00042bf <dir_find+0x1bb>
c00042a8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042af:	eb 0e                	jmp    c00042bf <dir_find+0x1bb>
c00042b1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042b4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042b9:	0f 85 75 fe ff ff    	jne    c0004134 <dir_find+0x30>
c00042bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042c2:	83 c4 1c             	add    esp,0x1c
c00042c5:	5b                   	pop    ebx
c00042c6:	5e                   	pop    esi
c00042c7:	5f                   	pop    edi
c00042c8:	5d                   	pop    ebp
c00042c9:	c3                   	ret    

c00042ca <dir_register>:
c00042ca:	55                   	push   ebp
c00042cb:	57                   	push   edi
c00042cc:	56                   	push   esi
c00042cd:	be 06 00 00 00       	mov    esi,0x6
c00042d2:	53                   	push   ebx
c00042d3:	83 ec 6c             	sub    esp,0x6c
c00042d6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042da:	0f 85 62 02 00 00    	jne    c0004542 <dir_register+0x278>
c00042e0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042e2:	31 ff                	xor    edi,edi
c00042e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042ec:	74 03                	je     c00042f1 <dir_register+0x27>
c00042ee:	47                   	inc    edi
c00042ef:	eb f6                	jmp    c00042e7 <dir_register+0x1d>
c00042f1:	89 c3                	mov    ebx,eax
c00042f3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042f7:	0f 85 e1 00 00 00    	jne    c00043de <dir_register+0x114>
c00042fd:	83 c7 0e             	add    edi,0xe
c0004300:	b9 0f 00 00 00       	mov    ecx,0xf
c0004305:	89 f8                	mov    eax,edi
c0004307:	31 d2                	xor    edx,edx
c0004309:	f7 f1                	div    ecx
c000430b:	8d 50 02             	lea    edx,[eax+0x2]
c000430e:	89 c7                	mov    edi,eax
c0004310:	89 d8                	mov    eax,ebx
c0004312:	e8 12 f8 ff ff       	call   c0003b29 <dir_alloc>
c0004317:	89 c6                	mov    esi,eax
c0004319:	85 c0                	test   eax,eax
c000431b:	0f 85 21 02 00 00    	jne    c0004542 <dir_register+0x278>
c0004321:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004327:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000432a:	c1 e7 05             	shl    edi,0x5
c000432d:	29 f8                	sub    eax,edi
c000432f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004332:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004335:	a8 04                	test   al,0x4
c0004337:	0f 84 91 00 00 00    	je     c00043ce <dir_register+0x104>
c000433d:	83 e0 fb             	and    eax,0xfffffffb
c0004340:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004343:	89 d8                	mov    eax,ebx
c0004345:	e8 25 ec ff ff       	call   c0002f6f <fill_first_frag>
c000434a:	85 c0                	test   eax,eax
c000434c:	0f 85 ee 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004352:	83 c9 ff             	or     ecx,0xffffffff
c0004355:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004358:	89 d8                	mov    eax,ebx
c000435a:	e8 db eb ff ff       	call   c0002f3a <fill_last_frag>
c000435f:	85 c0                	test   eax,eax
c0004361:	0f 85 d9 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004367:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000436b:	74 61                	je     c00043ce <dir_register+0x104>
c000436d:	89 da                	mov    edx,ebx
c000436f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004373:	e8 ea f5 ff ff       	call   c0003962 <load_obj_xdir>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 c0 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004380:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004384:	31 c9                	xor    ecx,ecx
c0004386:	c1 e2 09             	shl    edx,0x9
c0004389:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000438c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000438f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004392:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004395:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004398:	83 c0 38             	add    eax,0x38
c000439b:	e8 1c d9 ff ff       	call   c0001cbc <st_qword>
c00043a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043a6:	83 c0 28             	add    eax,0x28
c00043a9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ac:	e8 0b d9 ff ff       	call   c0001cbc <st_qword>
c00043b1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043b4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043b7:	83 c8 01             	or     eax,0x1
c00043ba:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043c1:	e8 db f7 ff ff       	call   c0003ba1 <store_xdir>
c00043c6:	85 c0                	test   eax,eax
c00043c8:	0f 85 72 01 00 00    	jne    c0004540 <dir_register+0x276>
c00043ce:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d4:	e8 c1 fb ff ff       	call   c0003f9a <create_xdir>
c00043d9:	e9 64 01 00 00       	jmp    c0004542 <dir_register+0x278>
c00043de:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043e1:	b9 0c 00 00 00       	mov    ecx,0xc
c00043e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ea:	89 c2                	mov    edx,eax
c00043ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043f0:	e8 cd d8 ff ff       	call   c0001cc2 <mem_cpy>
c00043f5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043fa:	74 58                	je     c0004454 <dir_register+0x18a>
c00043fc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004400:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004408:	83 ec 0c             	sub    esp,0xc
c000440b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000440e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004412:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000441a:	e8 24 dc ff ff       	call   c0002043 <gen_numname>
c000441f:	89 d8                	mov    eax,ebx
c0004421:	e8 de fc ff ff       	call   c0004104 <dir_find>
c0004426:	83 c4 10             	add    esp,0x10
c0004429:	89 c6                	mov    esi,eax
c000442b:	85 c0                	test   eax,eax
c000442d:	75 15                	jne    c0004444 <dir_register+0x17a>
c000442f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004433:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004438:	75 ce                	jne    c0004408 <dir_register+0x13e>
c000443a:	be 07 00 00 00       	mov    esi,0x7
c000443f:	e9 fe 00 00 00       	jmp    c0004542 <dir_register+0x278>
c0004444:	83 f8 04             	cmp    eax,0x4
c0004447:	0f 85 f5 00 00 00    	jne    c0004542 <dir_register+0x278>
c000444d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004451:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004454:	b9 01 00 00 00       	mov    ecx,0x1
c0004459:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000445e:	74 0f                	je     c000446f <dir_register+0x1a5>
c0004460:	b9 0d 00 00 00       	mov    ecx,0xd
c0004465:	8d 47 0c             	lea    eax,[edi+0xc]
c0004468:	31 d2                	xor    edx,edx
c000446a:	f7 f1                	div    ecx
c000446c:	8d 48 01             	lea    ecx,[eax+0x1]
c000446f:	89 ca                	mov    edx,ecx
c0004471:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004475:	89 d8                	mov    eax,ebx
c0004477:	e8 ad f6 ff ff       	call   c0003b29 <dir_alloc>
c000447c:	89 c6                	mov    esi,eax
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 bc 00 00 00    	jne    c0004542 <dir_register+0x278>
c0004486:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000448a:	49                   	dec    ecx
c000448b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000448f:	74 6a                	je     c00044fb <dir_register+0x231>
c0004491:	89 c8                	mov    eax,ecx
c0004493:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004496:	c1 e0 05             	shl    eax,0x5
c0004499:	29 c2                	sub    edx,eax
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 fd ec ff ff       	call   c000319f <dir_sdi>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 96 00 00 00    	jne    c0004542 <dir_register+0x278>
c00044ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044b0:	e8 4a dc ff ff       	call   c00020ff <sum_sfn>
c00044b5:	0f b6 f8             	movzx  edi,al
c00044b8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044bb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044be:	89 e8                	mov    eax,ebp
c00044c0:	e8 5c df ff ff       	call   c0002421 <move_window>
c00044c5:	89 c6                	mov    esi,eax
c00044c7:	85 c0                	test   eax,eax
c00044c9:	75 77                	jne    c0004542 <dir_register+0x278>
c00044cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044d0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044d3:	83 ec 0c             	sub    esp,0xc
c00044d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044d9:	57                   	push   edi
c00044da:	e8 e0 da ff ff       	call   c0001fbf <put_lfn>
c00044df:	31 d2                	xor    edx,edx
c00044e1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044e5:	89 d8                	mov    eax,ebx
c00044e7:	e8 0b f2 ff ff       	call   c00036f7 <dir_next>
c00044ec:	83 c4 10             	add    esp,0x10
c00044ef:	89 c6                	mov    esi,eax
c00044f1:	85 c0                	test   eax,eax
c00044f3:	75 4d                	jne    c0004542 <dir_register+0x278>
c00044f5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044f9:	75 bd                	jne    c00044b8 <dir_register+0x1ee>
c00044fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fe:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004501:	89 e8                	mov    eax,ebp
c0004503:	e8 19 df ff ff       	call   c0002421 <move_window>
c0004508:	89 c6                	mov    esi,eax
c000450a:	85 c0                	test   eax,eax
c000450c:	75 34                	jne    c0004542 <dir_register+0x278>
c000450e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004511:	b9 20 00 00 00       	mov    ecx,0x20
c0004516:	31 d2                	xor    edx,edx
c0004518:	e8 ba d7 ff ff       	call   c0001cd7 <mem_set>
c000451d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004524:	b9 0b 00 00 00       	mov    ecx,0xb
c0004529:	e8 94 d7 ff ff       	call   c0001cc2 <mem_cpy>
c000452e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004531:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004534:	83 e0 18             	and    eax,0x18
c0004537:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000453a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000453e:	eb 02                	jmp    c0004542 <dir_register+0x278>
c0004540:	89 c6                	mov    esi,eax
c0004542:	83 c4 6c             	add    esp,0x6c
c0004545:	89 f0                	mov    eax,esi
c0004547:	5b                   	pop    ebx
c0004548:	5e                   	pop    esi
c0004549:	5f                   	pop    edi
c000454a:	5d                   	pop    ebp
c000454b:	c3                   	ret    

c000454c <sync_fs>:
c000454c:	56                   	push   esi
c000454d:	53                   	push   ebx
c000454e:	53                   	push   ebx
c000454f:	89 c3                	mov    ebx,eax
c0004551:	e8 37 de ff ff       	call   c000238d <sync_window>
c0004556:	85 c0                	test   eax,eax
c0004558:	0f 85 b1 00 00 00    	jne    c000460f <sync_fs+0xc3>
c000455e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004561:	0f 85 8e 00 00 00    	jne    c00045f5 <sync_fs+0xa9>
c0004567:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000456b:	0f 85 84 00 00 00    	jne    c00045f5 <sync_fs+0xa9>
c0004571:	b9 00 02 00 00       	mov    ecx,0x200
c0004576:	8d 73 54             	lea    esi,[ebx+0x54]
c0004579:	31 d2                	xor    edx,edx
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 55 d7 ff ff       	call   c0001cd7 <mem_set>
c0004582:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004588:	ba 55 aa 00 00       	mov    edx,0xaa55
c000458d:	e8 23 d7 ff ff       	call   c0001cb5 <st_word>
c0004592:	ba 52 52 61 41       	mov    edx,0x41615252
c0004597:	89 f0                	mov    eax,esi
c0004599:	e8 1b d7 ff ff       	call   c0001cb9 <st_dword>
c000459e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045a4:	ba 72 72 41 61       	mov    edx,0x61417272
c00045a9:	e8 0b d7 ff ff       	call   c0001cb9 <st_dword>
c00045ae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045b1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045b7:	e8 fd d6 ff ff       	call   c0001cb9 <st_dword>
c00045bc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045bf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045c5:	e8 ef d6 ff ff       	call   c0001cb9 <st_dword>
c00045ca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045cd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045d0:	83 c0 01             	add    eax,0x1
c00045d3:	83 d2 00             	adc    edx,0x0
c00045d6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045d9:	83 ec 0c             	sub    esp,0xc
c00045dc:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045df:	6a 01                	push   0x1
c00045e1:	52                   	push   edx
c00045e2:	50                   	push   eax
c00045e3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045e7:	56                   	push   esi
c00045e8:	50                   	push   eax
c00045e9:	e8 20 d6 ff ff       	call   c0001c0e <disk_write>
c00045ee:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045f2:	83 c4 20             	add    esp,0x20
c00045f5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f9:	51                   	push   ecx
c00045fa:	6a 00                	push   0x0
c00045fc:	6a 00                	push   0x0
c00045fe:	50                   	push   eax
c00045ff:	e8 20 d6 ff ff       	call   c0001c24 <disk_ioctl>
c0004604:	83 c4 10             	add    esp,0x10
c0004607:	85 c0                	test   eax,eax
c0004609:	0f 95 c0             	setne  al
c000460c:	0f b6 c0             	movzx  eax,al
c000460f:	5a                   	pop    edx
c0004610:	5b                   	pop    ebx
c0004611:	5e                   	pop    esi
c0004612:	c3                   	ret    

c0004613 <create_partition>:
c0004613:	55                   	push   ebp
c0004614:	0f b6 c0             	movzx  eax,al
c0004617:	57                   	push   edi
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 60             	sub    esp,0x60
c000461d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004621:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004625:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004629:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000462d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004631:	50                   	push   eax
c0004632:	6a 01                	push   0x1
c0004634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004638:	e8 e7 d5 ff ff       	call   c0001c24 <disk_ioctl>
c000463d:	83 c4 10             	add    esp,0x10
c0004640:	85 c0                	test   eax,eax
c0004642:	74 0a                	je     c000464e <create_partition+0x3b>
c0004644:	b8 01 00 00 00       	mov    eax,0x1
c0004649:	e9 67 05 00 00       	jmp    c0004bb5 <create_partition+0x5a2>
c000464e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004652:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000465a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000465e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004663:	0f 86 ed 03 00 00    	jbe    c0004a56 <create_partition+0x443>
c0004669:	83 c0 df             	add    eax,0xffffffdf
c000466c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004674:	83 d2 ff             	adc    edx,0xffffffff
c0004677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000467b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000467f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004687:	83 c0 bd             	add    eax,0xffffffbd
c000468a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004691:	83 d2 ff             	adc    edx,0xffffffff
c0004694:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004698:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000469c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046a4:	be 22 00 00 00       	mov    esi,0x22
c00046a9:	31 ff                	xor    edi,edi
c00046ab:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046b3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046bb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046c7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046cd:	75 0e                	jne    c00046dd <create_partition+0xca>
c00046cf:	b9 00 02 00 00       	mov    ecx,0x200
c00046d4:	31 d2                	xor    edx,edx
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 fa d5 ff ff       	call   c0001cd7 <mem_set>
c00046dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	0f 84 23 01 00 00    	je     c0004815 <create_partition+0x202>
c00046f2:	89 f0                	mov    eax,esi
c00046f4:	89 fa                	mov    edx,edi
c00046f6:	05 ff 07 00 00       	add    eax,0x7ff
c00046fb:	83 d2 00             	adc    edx,0x0
c00046fe:	89 c1                	mov    ecx,eax
c0004700:	89 d7                	mov    edi,edx
c0004702:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004708:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000470c:	89 ce                	mov    esi,ecx
c000470e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004712:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004716:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000471a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000471d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004721:	89 04 24             	mov    DWORD PTR [esp],eax
c0004724:	b8 64 00 00 00       	mov    eax,0x64
c0004729:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000472c:	b8 00 00 00 00       	mov    eax,0x0
c0004731:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004735:	72 41                	jb     c0004778 <create_partition+0x165>
c0004737:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000473b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000473f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004743:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004748:	01 c1                	add    ecx,eax
c000474a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000474e:	f7 24 24             	mul    DWORD PTR [esp]
c0004751:	6a 00                	push   0x0
c0004753:	01 ca                	add    edx,ecx
c0004755:	6a 64                	push   0x64
c0004757:	52                   	push   edx
c0004758:	50                   	push   eax
c0004759:	e8 86 2b 02 00       	call   c00272e4 <__udivdi3>
c000475e:	83 c4 10             	add    esp,0x10
c0004761:	05 ff 07 00 00       	add    eax,0x7ff
c0004766:	83 d2 00             	adc    edx,0x0
c0004769:	89 c1                	mov    ecx,eax
c000476b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000476f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004775:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004778:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000477b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000477f:	01 f0                	add    eax,esi
c0004781:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004785:	11 fa                	adc    edx,edi
c0004787:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000478b:	19 d1                	sbb    ecx,edx
c000478d:	73 2e                	jae    c00047bd <create_partition+0x1aa>
c000478f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004793:	89 f8                	mov    eax,edi
c0004795:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000479c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047a0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047a8:	73 6b                	jae    c0004815 <create_partition+0x202>
c00047aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047b2:	29 f0                	sub    eax,esi
c00047b4:	19 fa                	sbb    edx,edi
c00047b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00047b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047c1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047c4:	74 4f                	je     c0004815 <create_partition+0x202>
c00047c6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047c9:	b9 10 00 00 00       	mov    ecx,0x10
c00047ce:	ba 70 9e 02 c0       	mov    edx,0xc0029e70
c00047d3:	e8 ea d4 ff ff       	call   c0001cc2 <mem_cpy>
c00047d8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047dc:	b9 10 00 00 00       	mov    ecx,0x10
c00047e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047e5:	e8 2c db ff ff       	call   c0002316 <make_rand>
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047f2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047f6:	e8 c1 d4 ff ff       	call   c0001cbc <st_qword>
c00047fb:	03 34 24             	add    esi,DWORD PTR [esp]
c00047fe:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004802:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004806:	89 f2                	mov    edx,esi
c0004808:	89 f9                	mov    ecx,edi
c000480a:	83 c2 ff             	add    edx,0xffffffff
c000480d:	83 d1 ff             	adc    ecx,0xffffffff
c0004810:	e8 a7 d4 ff ff       	call   c0001cbc <st_qword>
c0004815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004819:	83 e8 80             	sub    eax,0xffffff80
c000481c:	89 c5                	mov    ebp,eax
c000481e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004822:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004828:	75 6b                	jne    c0004895 <create_partition+0x282>
c000482a:	45                   	inc    ebp
c000482b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000482f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004834:	e8 39 da ff ff       	call   c0002272 <crc32>
c0004839:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000483f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004843:	75 e5                	jne    c000482a <create_partition+0x217>
c0004845:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004849:	31 d2                	xor    edx,edx
c000484b:	83 ec 0c             	sub    esp,0xc
c000484e:	c1 ed 09             	shr    ebp,0x9
c0004851:	6a 01                	push   0x1
c0004853:	8d 45 02             	lea    eax,[ebp+0x2]
c0004856:	52                   	push   edx
c0004857:	50                   	push   eax
c0004858:	53                   	push   ebx
c0004859:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000485d:	e8 ac d3 ff ff       	call   c0001c0e <disk_write>
c0004862:	83 c4 20             	add    esp,0x20
c0004865:	85 c0                	test   eax,eax
c0004867:	0f 85 d7 fd ff ff    	jne    c0004644 <create_partition+0x31>
c000486d:	83 ec 0c             	sub    esp,0xc
c0004870:	31 d2                	xor    edx,edx
c0004872:	6a 01                	push   0x1
c0004874:	89 e8                	mov    eax,ebp
c0004876:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000487a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000487e:	52                   	push   edx
c000487f:	50                   	push   eax
c0004880:	53                   	push   ebx
c0004881:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004885:	e8 84 d3 ff ff       	call   c0001c0e <disk_write>
c000488a:	83 c4 20             	add    esp,0x20
c000488d:	85 c0                	test   eax,eax
c000488f:	0f 85 af fd ff ff    	jne    c0004644 <create_partition+0x31>
c0004895:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004899:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000489d:	3d 00 40 00 00       	cmp    eax,0x4000
c00048a2:	74 0d                	je     c00048b1 <create_partition+0x29e>
c00048a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ac:	e9 12 fe ff ff       	jmp    c00046c3 <create_partition+0xb0>
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	b9 00 02 00 00       	mov    ecx,0x200
c00048b8:	89 d8                	mov    eax,ebx
c00048ba:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048bd:	e8 15 d4 ff ff       	call   c0001cd7 <mem_set>
c00048c2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048c5:	b9 10 00 00 00       	mov    ecx,0x10
c00048ca:	ba 60 9d 02 c0       	mov    edx,0xc0029d60
c00048cf:	89 d8                	mov    eax,ebx
c00048d1:	e8 ec d3 ff ff       	call   c0001cc2 <mem_cpy>
c00048d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048da:	8d 43 58             	lea    eax,[ebx+0x58]
c00048dd:	f7 d2                	not    edx
c00048df:	e8 d5 d3 ff ff       	call   c0001cb9 <st_dword>
c00048e4:	8d 43 18             	lea    eax,[ebx+0x18]
c00048e7:	31 c9                	xor    ecx,ecx
c00048e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00048ec:	ba 01 00 00 00       	mov    edx,0x1
c00048f1:	e8 c6 d3 ff ff       	call   c0001cbc <st_qword>
c00048f6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048fa:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048fe:	83 c2 ff             	add    edx,0xffffffff
c0004901:	89 e8                	mov    eax,ebp
c0004903:	83 d1 ff             	adc    ecx,0xffffffff
c0004906:	e8 b1 d3 ff ff       	call   c0001cbc <st_qword>
c000490b:	31 c9                	xor    ecx,ecx
c000490d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004910:	ba 22 00 00 00       	mov    edx,0x22
c0004915:	e8 a2 d3 ff ff       	call   c0001cbc <st_qword>
c000491a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000491e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004922:	83 c2 de             	add    edx,0xffffffde
c0004925:	8d 43 30             	lea    eax,[ebx+0x30]
c0004928:	83 d1 ff             	adc    ecx,0xffffffff
c000492b:	31 f6                	xor    esi,esi
c000492d:	e8 8a d3 ff ff       	call   c0001cbc <st_qword>
c0004932:	8d 43 54             	lea    eax,[ebx+0x54]
c0004935:	ba 80 00 00 00       	mov    edx,0x80
c000493a:	e8 7a d3 ff ff       	call   c0001cb9 <st_dword>
c000493f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004942:	ba 80 00 00 00       	mov    edx,0x80
c0004947:	e8 6d d3 ff ff       	call   c0001cb9 <st_dword>
c000494c:	ba 02 00 00 00       	mov    edx,0x2
c0004951:	89 f8                	mov    eax,edi
c0004953:	e8 61 d3 ff ff       	call   c0001cb9 <st_dword>
c0004958:	8d 53 38             	lea    edx,[ebx+0x38]
c000495b:	b9 10 00 00 00       	mov    ecx,0x10
c0004960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004964:	e8 ad d9 ff ff       	call   c0002316 <make_rand>
c0004969:	83 c8 ff             	or     eax,0xffffffff
c000496c:	46                   	inc    esi
c000496d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004972:	e8 fb d8 ff ff       	call   c0002272 <crc32>
c0004977:	83 fe 5c             	cmp    esi,0x5c
c000497a:	75 f0                	jne    c000496c <create_partition+0x359>
c000497c:	f7 d0                	not    eax
c000497e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004981:	89 c2                	mov    edx,eax
c0004983:	89 f0                	mov    eax,esi
c0004985:	e8 2f d3 ff ff       	call   c0001cb9 <st_dword>
c000498a:	83 ec 0c             	sub    esp,0xc
c000498d:	6a 01                	push   0x1
c000498f:	6a 00                	push   0x0
c0004991:	6a 01                	push   0x1
c0004993:	53                   	push   ebx
c0004994:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004998:	e8 71 d2 ff ff       	call   c0001c0e <disk_write>
c000499d:	83 c4 20             	add    esp,0x20
c00049a0:	85 c0                	test   eax,eax
c00049a2:	0f 85 9c fc ff ff    	jne    c0004644 <create_partition+0x31>
c00049a8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ac:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049b0:	83 c2 ff             	add    edx,0xffffffff
c00049b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b6:	83 d1 ff             	adc    ecx,0xffffffff
c00049b9:	e8 fe d2 ff ff       	call   c0001cbc <st_qword>
c00049be:	ba 01 00 00 00       	mov    edx,0x1
c00049c3:	31 c9                	xor    ecx,ecx
c00049c5:	89 e8                	mov    eax,ebp
c00049c7:	e8 f0 d2 ff ff       	call   c0001cbc <st_qword>
c00049cc:	89 f8                	mov    eax,edi
c00049ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049d6:	31 ff                	xor    edi,edi
c00049d8:	e8 df d2 ff ff       	call   c0001cbc <st_qword>
c00049dd:	89 f0                	mov    eax,esi
c00049df:	31 d2                	xor    edx,edx
c00049e1:	e8 d3 d2 ff ff       	call   c0001cb9 <st_dword>
c00049e6:	83 c8 ff             	or     eax,0xffffffff
c00049e9:	47                   	inc    edi
c00049ea:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049ef:	e8 7e d8 ff ff       	call   c0002272 <crc32>
c00049f4:	83 ff 5c             	cmp    edi,0x5c
c00049f7:	75 f0                	jne    c00049e9 <create_partition+0x3d6>
c00049f9:	f7 d0                	not    eax
c00049fb:	89 c2                	mov    edx,eax
c00049fd:	89 f0                	mov    eax,esi
c00049ff:	e8 b5 d2 ff ff       	call   c0001cb9 <st_dword>
c0004a04:	83 ec 0c             	sub    esp,0xc
c0004a07:	6a 01                	push   0x1
c0004a09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a0d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a11:	83 c0 ff             	add    eax,0xffffffff
c0004a14:	83 d2 ff             	adc    edx,0xffffffff
c0004a17:	52                   	push   edx
c0004a18:	50                   	push   eax
c0004a19:	53                   	push   ebx
c0004a1a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a1e:	e8 eb d1 ff ff       	call   c0001c0e <disk_write>
c0004a23:	83 c4 20             	add    esp,0x20
c0004a26:	85 c0                	test   eax,eax
c0004a28:	0f 85 16 fc ff ff    	jne    c0004644 <create_partition+0x31>
c0004a2e:	31 d2                	xor    edx,edx
c0004a30:	89 d8                	mov    eax,ebx
c0004a32:	b9 00 02 00 00       	mov    ecx,0x200
c0004a37:	e8 9b d2 ff ff       	call   c0001cd7 <mem_set>
c0004a3c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a42:	b9 10 00 00 00       	mov    ecx,0x10
c0004a47:	ba 70 9d 02 c0       	mov    edx,0xc0029d70
c0004a4c:	e8 71 d2 ff ff       	call   c0001cc2 <mem_cpy>
c0004a51:	e9 21 01 00 00       	jmp    c0004b77 <create_partition+0x564>
c0004a56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a5a:	b9 05 00 00 00       	mov    ecx,0x5
c0004a5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a62:	bf 08 00 00 00       	mov    edi,0x8
c0004a67:	89 f8                	mov    eax,edi
c0004a69:	31 d2                	xor    edx,edx
c0004a6b:	0f b6 f0             	movzx  esi,al
c0004a6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a71:	f7 f6                	div    esi
c0004a73:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a78:	76 0a                	jbe    c0004a84 <create_partition+0x471>
c0004a7a:	d1 e7                	shl    edi,1
c0004a7c:	49                   	dec    ecx
c0004a7d:	75 e8                	jne    c0004a67 <create_partition+0x454>
c0004a7f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a84:	b9 00 02 00 00       	mov    ecx,0x200
c0004a89:	31 d2                	xor    edx,edx
c0004a8b:	89 d8                	mov    eax,ebx
c0004a8d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a93:	e8 3f d2 ff ff       	call   c0001cd7 <mem_set>
c0004a98:	b9 64 00 00 00       	mov    ecx,0x64
c0004a9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004aa0:	31 d2                	xor    edx,edx
c0004aa2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aaa:	f7 f1                	div    ecx
c0004aac:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ab1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ab5:	89 f8                	mov    eax,edi
c0004ab7:	0f b6 c0             	movzx  eax,al
c0004aba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004abe:	e9 80 00 00 00       	jmp    c0004b43 <create_partition+0x530>
c0004ac3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac6:	29 cf                	sub    edi,ecx
c0004ac8:	89 ca                	mov    edx,ecx
c0004aca:	89 f0                	mov    eax,esi
c0004acc:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ad1:	e8 e3 d1 ff ff       	call   c0001cb9 <st_dword>
c0004ad6:	8d 46 04             	lea    eax,[esi+0x4]
c0004ad9:	89 fa                	mov    edx,edi
c0004adb:	83 c6 10             	add    esi,0x10
c0004ade:	e8 d6 d1 ff ff       	call   c0001cb9 <st_dword>
c0004ae3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004ae7:	31 d2                	xor    edx,edx
c0004ae9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004aec:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004af0:	89 c8                	mov    eax,ecx
c0004af2:	01 f9                	add    ecx,edi
c0004af4:	f7 f5                	div    ebp
c0004af6:	89 d5                	mov    ebp,edx
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	45                   	inc    ebp
c0004afb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004aff:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b02:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b05:	89 c2                	mov    edx,eax
c0004b07:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b0a:	c1 ea 02             	shr    edx,0x2
c0004b0d:	83 e2 c0             	and    edx,0xffffffc0
c0004b10:	09 ea                	or     edx,ebp
c0004b12:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b17:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b1a:	31 d2                	xor    edx,edx
c0004b1c:	f7 f5                	div    ebp
c0004b1e:	89 d7                	mov    edi,edx
c0004b20:	31 d2                	xor    edx,edx
c0004b22:	47                   	inc    edi
c0004b23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b27:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b2a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b2d:	89 c5                	mov    ebp,eax
c0004b2f:	c1 ed 02             	shr    ebp,0x2
c0004b32:	83 e5 c0             	and    ebp,0xffffffc0
c0004b35:	09 ef                	or     edi,ebp
c0004b37:	89 fa                	mov    edx,edi
c0004b39:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b3c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b41:	74 34                	je     c0004b77 <create_partition+0x564>
c0004b43:	85 c9                	test   ecx,ecx
c0004b45:	74 30                	je     c0004b77 <create_partition+0x564>
c0004b47:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b4a:	76 2b                	jbe    c0004b77 <create_partition+0x564>
c0004b4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b50:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b54:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b57:	83 ff 64             	cmp    edi,0x64
c0004b5a:	76 4b                	jbe    c0004ba7 <create_partition+0x594>
c0004b5c:	89 f8                	mov    eax,edi
c0004b5e:	01 c8                	add    eax,ecx
c0004b60:	0f 82 5d ff ff ff    	jb     c0004ac3 <create_partition+0x4b0>
c0004b66:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b69:	0f 87 54 ff ff ff    	ja     c0004ac3 <create_partition+0x4b0>
c0004b6f:	85 ff                	test   edi,edi
c0004b71:	0f 85 51 ff ff ff    	jne    c0004ac8 <create_partition+0x4b5>
c0004b77:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b7d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b82:	e8 2e d1 ff ff       	call   c0001cb5 <st_word>
c0004b87:	83 ec 0c             	sub    esp,0xc
c0004b8a:	6a 01                	push   0x1
c0004b8c:	6a 00                	push   0x0
c0004b8e:	6a 00                	push   0x0
c0004b90:	53                   	push   ebx
c0004b91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b95:	e8 74 d0 ff ff       	call   c0001c0e <disk_write>
c0004b9a:	83 c4 20             	add    esp,0x20
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	0f 95 c0             	setne  al
c0004ba2:	0f b6 c0             	movzx  eax,al
c0004ba5:	eb 0e                	jmp    c0004bb5 <create_partition+0x5a2>
c0004ba7:	74 07                	je     c0004bb0 <create_partition+0x59d>
c0004ba9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bae:	eb ac                	jmp    c0004b5c <create_partition+0x549>
c0004bb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bb3:	eb a7                	jmp    c0004b5c <create_partition+0x549>
c0004bb5:	83 c4 5c             	add    esp,0x5c
c0004bb8:	5b                   	pop    ebx
c0004bb9:	5e                   	pop    esi
c0004bba:	5f                   	pop    edi
c0004bbb:	5d                   	pop    ebp
c0004bbc:	c3                   	ret    

c0004bbd <get_fileinfo>:
c0004bbd:	55                   	push   ebp
c0004bbe:	57                   	push   edi
c0004bbf:	56                   	push   esi
c0004bc0:	53                   	push   ebx
c0004bc1:	83 ec 1c             	sub    esp,0x1c
c0004bc4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bc6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bce:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bd1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bd4:	0f 84 dc 01 00 00    	je     c0004db6 <get_fileinfo+0x1f9>
c0004bda:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bdd:	75 0f                	jne    c0004bee <get_fileinfo+0x31>
c0004bdf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004be2:	83 c4 1c             	add    esp,0x1c
c0004be5:	5b                   	pop    ebx
c0004be6:	5e                   	pop    esi
c0004be7:	5f                   	pop    edi
c0004be8:	5d                   	pop    ebp
c0004be9:	e9 58 d5 ff ff       	jmp    c0002146 <get_xfileinfo>
c0004bee:	89 d3                	mov    ebx,edx
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bf6:	74 6a                	je     c0004c62 <get_fileinfo+0xa5>
c0004bf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c00:	31 ed                	xor    ebp,ebp
c0004c02:	31 ff                	xor    edi,edi
c0004c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c0f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c13:	66 85 d2             	test   dx,dx
c0004c16:	74 3e                	je     c0004c56 <get_fileinfo+0x99>
c0004c18:	66 85 ed             	test   bp,bp
c0004c1b:	75 0c                	jne    c0004c29 <get_fileinfo+0x6c>
c0004c1d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c23:	66 3d ff 07          	cmp    ax,0x7ff
c0004c27:	76 22                	jbe    c0004c4b <get_fileinfo+0x8e>
c0004c29:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c2e:	89 e8                	mov    eax,ebp
c0004c30:	29 f9                	sub    ecx,edi
c0004c32:	c1 e0 10             	shl    eax,0x10
c0004c35:	09 d0                	or     eax,edx
c0004c37:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c3b:	e8 a3 d1 ff ff       	call   c0001de3 <put_utf>
c0004c40:	84 c0                	test   al,al
c0004c42:	74 10                	je     c0004c54 <get_fileinfo+0x97>
c0004c44:	0f b6 c0             	movzx  eax,al
c0004c47:	31 d2                	xor    edx,edx
c0004c49:	01 c7                	add    edi,eax
c0004c4b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c50:	89 d5                	mov    ebp,edx
c0004c52:	eb b0                	jmp    c0004c04 <get_fileinfo+0x47>
c0004c54:	31 ff                	xor    edi,edi
c0004c56:	66 85 ed             	test   bp,bp
c0004c59:	74 02                	je     c0004c5d <get_fileinfo+0xa0>
c0004c5b:	31 ff                	xor    edi,edi
c0004c5d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c62:	31 ff                	xor    edi,edi
c0004c64:	31 c9                	xor    ecx,ecx
c0004c66:	83 f9 0a             	cmp    ecx,0xa
c0004c69:	0f 87 ad 00 00 00    	ja     c0004d1c <get_fileinfo+0x15f>
c0004c6f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c72:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c75:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c79:	66 83 fa 20          	cmp    dx,0x20
c0004c7d:	0f 84 92 00 00 00    	je     c0004d15 <get_fileinfo+0x158>
c0004c83:	66 83 fa 05          	cmp    dx,0x5
c0004c87:	75 05                	jne    c0004c8e <get_fileinfo+0xd1>
c0004c89:	ba e5 00 00 00       	mov    edx,0xe5
c0004c8e:	83 ff 0b             	cmp    edi,0xb
c0004c91:	77 0b                	ja     c0004c9e <get_fileinfo+0xe1>
c0004c93:	83 fd 09             	cmp    ebp,0x9
c0004c96:	75 06                	jne    c0004c9e <get_fileinfo+0xe1>
c0004c98:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c9d:	47                   	inc    edi
c0004c9e:	0f b7 c2             	movzx  eax,dx
c0004ca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ca5:	e8 6d d0 ff ff       	call   c0001d17 <dbc_1st>
c0004caa:	85 c0                	test   eax,eax
c0004cac:	74 2f                	je     c0004cdd <get_fileinfo+0x120>
c0004cae:	83 fd 08             	cmp    ebp,0x8
c0004cb1:	74 2a                	je     c0004cdd <get_fileinfo+0x120>
c0004cb3:	83 fd 0b             	cmp    ebp,0xb
c0004cb6:	74 25                	je     c0004cdd <get_fileinfo+0x120>
c0004cb8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cbb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cbf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cc3:	e8 52 d0 ff ff       	call   c0001d1a <dbc_2nd>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 11                	je     c0004cdd <get_fileinfo+0x120>
c0004ccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cd5:	c1 e2 08             	shl    edx,0x8
c0004cd8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cdb:	09 c2                	or     edx,eax
c0004cdd:	0f b7 d2             	movzx  edx,dx
c0004ce0:	50                   	push   eax
c0004ce1:	50                   	push   eax
c0004ce2:	68 b5 01 00 00       	push   0x1b5
c0004ce7:	52                   	push   edx
c0004ce8:	e8 46 38 00 00       	call   c0008533 <ff_oem2uni>
c0004ced:	83 c4 10             	add    esp,0x10
c0004cf0:	66 85 c0             	test   ax,ax
c0004cf3:	75 04                	jne    c0004cf9 <get_fileinfo+0x13c>
c0004cf5:	31 ff                	xor    edi,edi
c0004cf7:	eb 23                	jmp    c0004d1c <get_fileinfo+0x15f>
c0004cf9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004cfe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d02:	29 f9                	sub    ecx,edi
c0004d04:	0f b7 c0             	movzx  eax,ax
c0004d07:	e8 d7 d0 ff ff       	call   c0001de3 <put_utf>
c0004d0c:	84 c0                	test   al,al
c0004d0e:	74 e5                	je     c0004cf5 <get_fileinfo+0x138>
c0004d10:	0f b6 c0             	movzx  eax,al
c0004d13:	01 c7                	add    edi,eax
c0004d15:	89 e9                	mov    ecx,ebp
c0004d17:	e9 4a ff ff ff       	jmp    c0004c66 <get_fileinfo+0xa9>
c0004d1c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d21:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d25:	75 54                	jne    c0004d7b <get_fileinfo+0x1be>
c0004d27:	85 ff                	test   edi,edi
c0004d29:	75 0b                	jne    c0004d36 <get_fileinfo+0x179>
c0004d2b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d2f:	ba 01 00 00 00       	mov    edx,0x1
c0004d34:	eb 33                	jmp    c0004d69 <get_fileinfo+0x1ac>
c0004d36:	b1 08                	mov    cl,0x8
c0004d38:	31 d2                	xor    edx,edx
c0004d3a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d40:	84 c0                	test   al,al
c0004d42:	74 25                	je     c0004d69 <get_fileinfo+0x1ac>
c0004d44:	66 83 f8 2e          	cmp    ax,0x2e
c0004d48:	74 16                	je     c0004d60 <get_fileinfo+0x1a3>
c0004d4a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d4d:	66 83 ff 19          	cmp    di,0x19
c0004d51:	77 0f                	ja     c0004d62 <get_fileinfo+0x1a5>
c0004d53:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d56:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d59:	74 07                	je     c0004d62 <get_fileinfo+0x1a5>
c0004d5b:	83 c0 20             	add    eax,0x20
c0004d5e:	eb 02                	jmp    c0004d62 <get_fileinfo+0x1a5>
c0004d60:	b1 10                	mov    cl,0x10
c0004d62:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d66:	42                   	inc    edx
c0004d67:	eb d1                	jmp    c0004d3a <get_fileinfo+0x17d>
c0004d69:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d71:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d75:	75 04                	jne    c0004d7b <get_fileinfo+0x1be>
c0004d77:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d7b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d81:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d84:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d87:	83 c0 1c             	add    eax,0x1c
c0004d8a:	e8 c1 ce ff ff       	call   c0001c50 <ld_dword>
c0004d8f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d96:	89 03                	mov    DWORD PTR [ebx],eax
c0004d98:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9b:	83 c0 16             	add    eax,0x16
c0004d9e:	e8 a0 ce ff ff       	call   c0001c43 <ld_word>
c0004da3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004da7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004daa:	83 c0 18             	add    eax,0x18
c0004dad:	e8 91 ce ff ff       	call   c0001c43 <ld_word>
c0004db2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004db6:	83 c4 1c             	add    esp,0x1c
c0004db9:	5b                   	pop    ebx
c0004dba:	5e                   	pop    esi
c0004dbb:	5f                   	pop    edi
c0004dbc:	5d                   	pop    ebp
c0004dbd:	c3                   	ret    

c0004dbe <ld_clust.isra.0>:
c0004dbe:	56                   	push   esi
c0004dbf:	89 c6                	mov    esi,eax
c0004dc1:	53                   	push   ebx
c0004dc2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dc5:	89 d3                	mov    ebx,edx
c0004dc7:	e8 77 ce ff ff       	call   c0001c43 <ld_word>
c0004dcc:	0f b7 c8             	movzx  ecx,ax
c0004dcf:	89 f0                	mov    eax,esi
c0004dd1:	3c 03                	cmp    al,0x3
c0004dd3:	75 0d                	jne    c0004de2 <ld_clust.isra.0+0x24>
c0004dd5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dd8:	e8 66 ce ff ff       	call   c0001c43 <ld_word>
c0004ddd:	c1 e0 10             	shl    eax,0x10
c0004de0:	09 c1                	or     ecx,eax
c0004de2:	89 c8                	mov    eax,ecx
c0004de4:	5b                   	pop    ebx
c0004de5:	5e                   	pop    esi
c0004de6:	c3                   	ret    

c0004de7 <st_clust.isra.1>:
c0004de7:	56                   	push   esi
c0004de8:	89 c6                	mov    esi,eax
c0004dea:	53                   	push   ebx
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	0f b7 d1             	movzx  edx,cx
c0004df0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004df3:	e8 bd ce ff ff       	call   c0001cb5 <st_word>
c0004df8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004dfb:	75 0f                	jne    c0004e0c <st_clust.isra.1+0x25>
c0004dfd:	c1 e9 10             	shr    ecx,0x10
c0004e00:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e03:	89 ca                	mov    edx,ecx
c0004e05:	5b                   	pop    ebx
c0004e06:	5e                   	pop    esi
c0004e07:	e9 a9 ce ff ff       	jmp    c0001cb5 <st_word>
c0004e0c:	5b                   	pop    ebx
c0004e0d:	5e                   	pop    esi
c0004e0e:	c3                   	ret    

c0004e0f <init_alloc_info.isra.2>:
c0004e0f:	56                   	push   esi
c0004e10:	53                   	push   ebx
c0004e11:	89 c6                	mov    esi,eax
c0004e13:	89 d3                	mov    ebx,edx
c0004e15:	51                   	push   ecx
c0004e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e18:	83 c0 34             	add    eax,0x34
c0004e1b:	e8 30 ce ff ff       	call   c0001c50 <ld_dword>
c0004e20:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e23:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e25:	83 c0 38             	add    eax,0x38
c0004e28:	e8 3b ce ff ff       	call   c0001c68 <ld_qword>
c0004e2d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e30:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e35:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e38:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e3f:	83 e0 02             	and    eax,0x2
c0004e42:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e45:	5b                   	pop    ebx
c0004e46:	5b                   	pop    ebx
c0004e47:	5e                   	pop    esi
c0004e48:	c3                   	ret    

c0004e49 <follow_path>:
c0004e49:	56                   	push   esi
c0004e4a:	53                   	push   ebx
c0004e4b:	89 c3                	mov    ebx,eax
c0004e4d:	83 ec 14             	sub    esp,0x14
c0004e50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e54:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e5c:	80 fa 5c             	cmp    dl,0x5c
c0004e5f:	75 07                	jne    c0004e68 <follow_path+0x1f>
c0004e61:	40                   	inc    eax
c0004e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e66:	eb ee                	jmp    c0004e56 <follow_path+0xd>
c0004e68:	80 fa 2f             	cmp    dl,0x2f
c0004e6b:	74 f4                	je     c0004e61 <follow_path+0x18>
c0004e6d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e7b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e7e:	77 52                	ja     c0004ed2 <follow_path+0x89>
c0004e80:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e84:	31 d2                	xor    edx,edx
c0004e86:	89 d8                	mov    eax,ebx
c0004e88:	e8 12 e3 ff ff       	call   c000319f <dir_sdi>
c0004e8d:	eb 7c                	jmp    c0004f0b <follow_path+0xc2>
c0004e8f:	89 d8                	mov    eax,ebx
c0004e91:	e8 6e f2 ff ff       	call   c0004104 <dir_find>
c0004e96:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e99:	85 c0                	test   eax,eax
c0004e9b:	75 46                	jne    c0004ee3 <follow_path+0x9a>
c0004e9d:	80 e2 04             	and    dl,0x4
c0004ea0:	75 69                	jne    c0004f0b <follow_path+0xc2>
c0004ea2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ea6:	74 5e                	je     c0004f06 <follow_path+0xbd>
c0004ea8:	8a 06                	mov    al,BYTE PTR [esi]
c0004eaa:	3c 04                	cmp    al,0x4
c0004eac:	75 41                	jne    c0004eef <follow_path+0xa6>
c0004eae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eb1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004eb5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004eb8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ebb:	30 c0                	xor    al,al
c0004ebd:	09 d0                	or     eax,edx
c0004ebf:	89 da                	mov    edx,ebx
c0004ec1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ec4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ec7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eca:	8d 46 10             	lea    eax,[esi+0x10]
c0004ecd:	e8 3d ff ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c0004ed2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ed6:	89 d8                	mov    eax,ebx
c0004ed8:	e8 a9 ed ff ff       	call   c0003c86 <create_name>
c0004edd:	85 c0                	test   eax,eax
c0004edf:	74 ae                	je     c0004e8f <follow_path+0x46>
c0004ee1:	eb 28                	jmp    c0004f0b <follow_path+0xc2>
c0004ee3:	83 f8 04             	cmp    eax,0x4
c0004ee6:	75 23                	jne    c0004f0b <follow_path+0xc2>
c0004ee8:	80 e2 04             	and    dl,0x4
c0004eeb:	74 19                	je     c0004f06 <follow_path+0xbd>
c0004eed:	eb 1c                	jmp    c0004f0b <follow_path+0xc2>
c0004eef:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ef2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ef8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004efc:	e8 bd fe ff ff       	call   c0004dbe <ld_clust.isra.0>
c0004f01:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f04:	eb cc                	jmp    c0004ed2 <follow_path+0x89>
c0004f06:	b8 05 00 00 00       	mov    eax,0x5
c0004f0b:	83 c4 14             	add    esp,0x14
c0004f0e:	5b                   	pop    ebx
c0004f0f:	5e                   	pop    esi
c0004f10:	c3                   	ret    

c0004f11 <f_mount>:
c0004f11:	53                   	push   ebx
c0004f12:	83 ec 18             	sub    esp,0x18
c0004f15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f19:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f25:	e8 fb d2 ff ff       	call   c0002225 <get_ldnumber>
c0004f2a:	89 c2                	mov    edx,eax
c0004f2c:	b8 0b 00 00 00       	mov    eax,0xb
c0004f31:	85 d2                	test   edx,edx
c0004f33:	78 39                	js     c0004f6e <f_mount+0x5d>
c0004f35:	8b 04 95 00 ef 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1100]
c0004f3c:	85 c0                	test   eax,eax
c0004f3e:	74 03                	je     c0004f43 <f_mount+0x32>
c0004f40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 c0                	test   eax,eax
c0004f49:	74 03                	je     c0004f4e <f_mount+0x3d>
c0004f4b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f52:	89 04 95 00 ef 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1100],eax
c0004f59:	31 c0                	xor    eax,eax
c0004f5b:	84 db                	test   bl,bl
c0004f5d:	74 0f                	je     c0004f6e <f_mount+0x5d>
c0004f5f:	31 c9                	xor    ecx,ecx
c0004f61:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f69:	e8 65 d7 ff ff       	call   c00026d3 <mount_volume>
c0004f6e:	83 c4 18             	add    esp,0x18
c0004f71:	5b                   	pop    ebx
c0004f72:	c3                   	ret    

c0004f73 <f_open>:
c0004f73:	55                   	push   ebp
c0004f74:	bd 09 00 00 00       	mov    ebp,0x9
c0004f79:	57                   	push   edi
c0004f7a:	56                   	push   esi
c0004f7b:	53                   	push   ebx
c0004f7c:	83 ec 7c             	sub    esp,0x7c
c0004f7f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f86:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f8d:	85 db                	test   ebx,ebx
c0004f8f:	0f 84 10 04 00 00    	je     c00053a5 <f_open+0x432>
c0004f95:	89 fe                	mov    esi,edi
c0004f97:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f9b:	83 e6 3f             	and    esi,0x3f
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	0f b6 c8             	movzx  ecx,al
c0004fa3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004faa:	e8 24 d7 ff ff       	call   c00026d3 <mount_volume>
c0004faf:	89 c5                	mov    ebp,eax
c0004fb1:	85 c0                	test   eax,eax
c0004fb3:	0f 85 e6 03 00 00    	jne    c000539f <f_open+0x42c>
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	bd 11 00 00 00       	mov    ebp,0x11
c0004fc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fc6:	83 ec 0c             	sub    esp,0xc
c0004fc9:	68 60 04 00 00       	push   0x460
c0004fce:	e8 a3 34 00 00       	call   c0008476 <ff_memalloc>
c0004fd3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fd7:	83 c4 10             	add    esp,0x10
c0004fda:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fdf:	0f 84 c0 03 00 00    	je     c00053a5 <f_open+0x432>
c0004fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fed:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ff3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004ff6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004ff9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005000:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005004:	e8 40 fe ff ff       	call   c0004e49 <follow_path>
c0005009:	89 c5                	mov    ebp,eax
c000500b:	85 c0                	test   eax,eax
c000500d:	75 0c                	jne    c000501b <f_open+0xa8>
c000500f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005014:	79 05                	jns    c000501b <f_open+0xa8>
c0005016:	bd 06 00 00 00       	mov    ebp,0x6
c000501b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005021:	0f 84 84 01 00 00    	je     c00051ab <f_open+0x238>
c0005027:	85 ed                	test   ebp,ebp
c0005029:	74 20                	je     c000504b <f_open+0xd8>
c000502b:	83 fd 04             	cmp    ebp,0x4
c000502e:	0f 85 58 03 00 00    	jne    c000538c <f_open+0x419>
c0005034:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005038:	83 ce 08             	or     esi,0x8
c000503b:	e8 8a f2 ff ff       	call   c00042ca <dir_register>
c0005040:	89 c5                	mov    ebp,eax
c0005042:	85 c0                	test   eax,eax
c0005044:	74 2f                	je     c0005075 <f_open+0x102>
c0005046:	e9 41 03 00 00       	jmp    c000538c <f_open+0x419>
c000504b:	bd 07 00 00 00       	mov    ebp,0x7
c0005050:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005055:	0f 85 31 03 00 00    	jne    c000538c <f_open+0x419>
c000505b:	bd 08 00 00 00       	mov    ebp,0x8
c0005060:	f7 c7 04 00 00 00    	test   edi,0x4
c0005066:	0f 85 20 03 00 00    	jne    c000538c <f_open+0x419>
c000506c:	83 e7 08             	and    edi,0x8
c000506f:	0f 84 65 01 00 00    	je     c00051da <f_open+0x267>
c0005075:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005079:	8a 02                	mov    al,BYTE PTR [edx]
c000507b:	3c 04                	cmp    al,0x4
c000507d:	0f 85 97 00 00 00    	jne    c000511a <f_open+0x1a7>
c0005083:	8d 42 10             	lea    eax,[edx+0x10]
c0005086:	89 13                	mov    DWORD PTR [ebx],edx
c0005088:	89 da                	mov    edx,ebx
c000508a:	e8 80 fd ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000508f:	31 d2                	xor    edx,edx
c0005091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005095:	b9 1e 00 00 00       	mov    ecx,0x1e
c000509a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000509d:	83 c0 02             	add    eax,0x2
c00050a0:	e8 32 cc ff ff       	call   c0001cd7 <mem_set>
c00050a5:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050aa:	31 d2                	xor    edx,edx
c00050ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b3:	83 c0 26             	add    eax,0x26
c00050b6:	e8 1c cc ff ff       	call   c0001cd7 <mem_set>
c00050bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050c2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00050cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ce:	83 c0 08             	add    eax,0x8
c00050d1:	e8 e3 cb ff ff       	call   c0001cb9 <st_dword>
c00050d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050dd:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050e5:	e8 b7 ea ff ff       	call   c0003ba1 <store_xdir>
c00050ea:	89 c5                	mov    ebp,eax
c00050ec:	85 c0                	test   eax,eax
c00050ee:	0f 85 98 02 00 00    	jne    c000538c <f_open+0x419>
c00050f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f7:	85 d2                	test   edx,edx
c00050f9:	0f 84 db 00 00 00    	je     c00051da <f_open+0x267>
c00050ff:	31 c9                	xor    ecx,ecx
c0005101:	89 d8                	mov    eax,ebx
c0005103:	e8 8e e3 ff ff       	call   c0003496 <remove_chain>
c0005108:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000510c:	89 c5                	mov    ebp,eax
c000510e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005111:	48                   	dec    eax
c0005112:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005115:	e9 b8 00 00 00       	jmp    c00051d2 <f_open+0x25f>
c000511a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000511e:	89 ea                	mov    edx,ebp
c0005120:	e8 99 fc ff ff       	call   c0004dbe <ld_clust.isra.0>
c0005125:	ba 00 00 21 50       	mov    edx,0x50210000
c000512a:	89 c7                	mov    edi,eax
c000512c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000512f:	e8 85 cb ff ff       	call   c0001cb9 <st_dword>
c0005134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005138:	31 c9                	xor    ecx,ecx
c000513a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005146:	e8 9c fc ff ff       	call   c0004de7 <st_clust.isra.1>
c000514b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000514f:	31 d2                	xor    edx,edx
c0005151:	83 c0 1c             	add    eax,0x1c
c0005154:	e8 60 cb ff ff       	call   c0001cb9 <st_dword>
c0005159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515d:	85 ff                	test   edi,edi
c000515f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005163:	74 75                	je     c00051da <f_open+0x267>
c0005165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005169:	31 c9                	xor    ecx,ecx
c000516b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000516e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005171:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005179:	89 fa                	mov    edx,edi
c000517b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000517f:	e8 12 e3 ff ff       	call   c0003496 <remove_chain>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	85 c0                	test   eax,eax
c0005188:	0f 85 fe 01 00 00    	jne    c000538c <f_open+0x419>
c000518e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000519a:	4f                   	dec    edi
c000519b:	e8 81 d2 ff ff       	call   c0002421 <move_window>
c00051a0:	89 c5                	mov    ebp,eax
c00051a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051a9:	eb 27                	jmp    c00051d2 <f_open+0x25f>
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 d9 01 00 00    	jne    c000538c <f_open+0x419>
c00051b3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051b7:	bd 04 00 00 00       	mov    ebp,0x4
c00051bc:	a8 10                	test   al,0x10
c00051be:	0f 85 c8 01 00 00    	jne    c000538c <f_open+0x419>
c00051c4:	83 e7 02             	and    edi,0x2
c00051c7:	74 11                	je     c00051da <f_open+0x267>
c00051c9:	bd 07 00 00 00       	mov    ebp,0x7
c00051ce:	a8 01                	test   al,0x1
c00051d0:	eb 02                	jmp    c00051d4 <f_open+0x261>
c00051d2:	85 ed                	test   ebp,ebp
c00051d4:	0f 85 b2 01 00 00    	jne    c000538c <f_open+0x419>
c00051da:	f7 c6 08 00 00 00    	test   esi,0x8
c00051e0:	74 03                	je     c00051e5 <f_open+0x272>
c00051e2:	83 ce 40             	or     esi,0x40
c00051e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051e9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051ec:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051ef:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051f2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051f5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051f9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051fc:	8a 02                	mov    al,BYTE PTR [edx]
c00051fe:	3c 04                	cmp    al,0x4
c0005200:	75 2a                	jne    c000522c <f_open+0x2b9>
c0005202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005206:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000520b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000520e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005212:	30 c0                	xor    al,al
c0005214:	09 c8                	or     eax,ecx
c0005216:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005219:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000521d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005220:	8d 42 10             	lea    eax,[edx+0x10]
c0005223:	89 da                	mov    edx,ebx
c0005225:	e8 e5 fb ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000522a:	eb 1c                	jmp    c0005248 <f_open+0x2d5>
c000522c:	89 fa                	mov    edx,edi
c000522e:	e8 8b fb ff ff       	call   c0004dbe <ld_clust.isra.0>
c0005233:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005236:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005239:	e8 12 ca ff ff       	call   c0001c50 <ld_dword>
c000523e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005245:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000524c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005253:	89 03                	mov    DWORD PTR [ebx],eax
c0005255:	31 d2                	xor    edx,edx
c0005257:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000525b:	b9 00 02 00 00       	mov    ecx,0x200
c0005260:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005264:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005268:	89 f0                	mov    eax,esi
c000526a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005271:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005274:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000527b:	8d 43 50             	lea    eax,[ebx+0x50]
c000527e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005285:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000528c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005290:	e8 42 ca ff ff       	call   c0001cd7 <mem_set>
c0005295:	83 e6 20             	and    esi,0x20
c0005298:	75 07                	jne    c00052a1 <f_open+0x32e>
c000529a:	31 ed                	xor    ebp,ebp
c000529c:	e9 eb 00 00 00       	jmp    c000538c <f_open+0x419>
c00052a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052a4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052b3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052b7:	74 e1                	je     c000529a <f_open+0x327>
c00052b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052c1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052c4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052cb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ce:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052d2:	31 ff                	xor    edi,edi
c00052d4:	c1 e5 09             	shl    ebp,0x9
c00052d7:	89 ee                	mov    esi,ebp
c00052d9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052dd:	89 f8                	mov    eax,edi
c00052df:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052e3:	73 22                	jae    c0005307 <f_open+0x394>
c00052e5:	89 d8                	mov    eax,ebx
c00052e7:	e8 bd dc ff ff       	call   c0002fa9 <get_fat>
c00052ec:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052f0:	89 c2                	mov    edx,eax
c00052f2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052f6:	83 f8 01             	cmp    eax,0x1
c00052f9:	76 10                	jbe    c000530b <f_open+0x398>
c00052fb:	83 f8 ff             	cmp    eax,0xffffffff
c00052fe:	75 d9                	jne    c00052d9 <f_open+0x366>
c0005300:	bd 01 00 00 00       	mov    ebp,0x1
c0005305:	eb 09                	jmp    c0005310 <f_open+0x39d>
c0005307:	31 ed                	xor    ebp,ebp
c0005309:	eb 05                	jmp    c0005310 <f_open+0x39d>
c000530b:	bd 02 00 00 00       	mov    ebp,0x2
c0005310:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005313:	85 ed                	test   ebp,ebp
c0005315:	75 75                	jne    c000538c <f_open+0x419>
c0005317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531b:	25 ff 01 00 00       	and    eax,0x1ff
c0005320:	0f 84 74 ff ff ff    	je     c000529a <f_open+0x327>
c0005326:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000532a:	bd 02 00 00 00       	mov    ebp,0x2
c000532f:	89 c8                	mov    eax,ecx
c0005331:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005335:	e8 a2 cb ff ff       	call   c0001edc <clst2sect>
c000533a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000533e:	89 d7                	mov    edi,edx
c0005340:	09 c7                	or     edi,eax
c0005342:	74 48                	je     c000538c <f_open+0x419>
c0005344:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005348:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000534c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005354:	0f ac fe 09          	shrd   esi,edi,0x9
c0005358:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000535c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005360:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005363:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005367:	83 ec 0c             	sub    esp,0xc
c000536a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000536d:	6a 01                	push   0x1
c000536f:	52                   	push   edx
c0005370:	50                   	push   eax
c0005371:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005375:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005379:	50                   	push   eax
c000537a:	e8 79 c8 ff ff       	call   c0001bf8 <disk_read>
c000537f:	83 c4 20             	add    esp,0x20
c0005382:	85 c0                	test   eax,eax
c0005384:	0f 95 c0             	setne  al
c0005387:	0f b6 c0             	movzx  eax,al
c000538a:	89 c5                	mov    ebp,eax
c000538c:	83 ec 0c             	sub    esp,0xc
c000538f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005393:	e8 f4 30 00 00       	call   c000848c <ff_memfree>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	85 ed                	test   ebp,ebp
c000539d:	74 06                	je     c00053a5 <f_open+0x432>
c000539f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053a5:	83 c4 7c             	add    esp,0x7c
c00053a8:	89 e8                	mov    eax,ebp
c00053aa:	5b                   	pop    ebx
c00053ab:	5e                   	pop    esi
c00053ac:	5f                   	pop    edi
c00053ad:	5d                   	pop    ebp
c00053ae:	c3                   	ret    

c00053af <f_read>:
c00053af:	55                   	push   ebp
c00053b0:	57                   	push   edi
c00053b1:	56                   	push   esi
c00053b2:	53                   	push   ebx
c00053b3:	83 ec 2c             	sub    esp,0x2c
c00053b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053ba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053c4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053c8:	89 d8                	mov    eax,ebx
c00053ca:	e8 77 cf ff ff       	call   c0002346 <validate>
c00053cf:	89 c5                	mov    ebp,eax
c00053d1:	85 c0                	test   eax,eax
c00053d3:	0f 85 4c 02 00 00    	jne    c0005625 <f_read+0x276>
c00053d9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053dd:	85 ed                	test   ebp,ebp
c00053df:	0f 85 40 02 00 00    	jne    c0005625 <f_read+0x276>
c00053e5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053e9:	0f 84 31 02 00 00    	je     c0005620 <f_read+0x271>
c00053ef:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053f2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053f5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053f8:	bf 00 00 00 00       	mov    edi,0x0
c00053fd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005400:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005404:	89 d1                	mov    ecx,edx
c0005406:	19 f9                	sbb    ecx,edi
c0005408:	0f 83 cf 00 00 00    	jae    c00054dd <f_read+0x12e>
c000540e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005412:	e9 c6 00 00 00       	jmp    c00054dd <f_read+0x12e>
c0005417:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000541a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000541d:	89 d0                	mov    eax,edx
c000541f:	25 ff 01 00 00       	and    eax,0x1ff
c0005424:	0f 85 c9 01 00 00    	jne    c00055f3 <f_read+0x244>
c000542a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000542e:	89 d6                	mov    esi,edx
c0005430:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005434:	89 cf                	mov    edi,ecx
c0005436:	48                   	dec    eax
c0005437:	0f ac fe 09          	shrd   esi,edi,0x9
c000543b:	21 f0                	and    eax,esi
c000543d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005441:	0f 84 a6 00 00 00    	je     c00054ed <f_read+0x13e>
c0005447:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000544b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000544e:	89 c8                	mov    eax,ecx
c0005450:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005453:	e8 84 ca ff ff       	call   c0001edc <clst2sect>
c0005458:	89 d7                	mov    edi,edx
c000545a:	09 c7                	or     edi,eax
c000545c:	0f 84 b4 00 00 00    	je     c0005516 <f_read+0x167>
c0005462:	31 ff                	xor    edi,edi
c0005464:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005468:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000546b:	01 c6                	add    esi,eax
c000546d:	11 d7                	adc    edi,edx
c000546f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005477:	0f 86 fd 00 00 00    	jbe    c000557a <f_read+0x1cb>
c000547d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005481:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005485:	c1 e8 09             	shr    eax,0x9
c0005488:	89 04 24             	mov    DWORD PTR [esp],eax
c000548b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000548f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005492:	39 c2                	cmp    edx,eax
c0005494:	76 07                	jbe    c000549d <f_read+0xee>
c0005496:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000549a:	89 04 24             	mov    DWORD PTR [esp],eax
c000549d:	83 ec 0c             	sub    esp,0xc
c00054a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054a4:	57                   	push   edi
c00054a5:	56                   	push   esi
c00054a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054ae:	50                   	push   eax
c00054af:	e8 44 c7 ff ff       	call   c0001bf8 <disk_read>
c00054b4:	83 c4 20             	add    esp,0x20
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 6e                	jne    c0005529 <f_read+0x17a>
c00054bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054bf:	78 7e                	js     c000553f <f_read+0x190>
c00054c1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	31 ff                	xor    edi,edi
c00054c9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054d1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d5:	01 30                	add    DWORD PTR [eax],esi
c00054d7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054da:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054e2:	0f 85 2f ff ff ff    	jne    c0005417 <f_read+0x68>
c00054e8:	e9 38 01 00 00       	jmp    c0005625 <f_read+0x276>
c00054ed:	89 c8                	mov    eax,ecx
c00054ef:	09 d0                	or     eax,edx
c00054f1:	75 05                	jne    c00054f8 <f_read+0x149>
c00054f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054f6:	eb 19                	jmp    c0005511 <f_read+0x162>
c00054f8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054fc:	74 09                	je     c0005507 <f_read+0x158>
c00054fe:	89 d8                	mov    eax,ebx
c0005500:	e8 f8 c9 ff ff       	call   c0001efd <clmt_clust>
c0005505:	eb 0a                	jmp    c0005511 <f_read+0x162>
c0005507:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000550a:	89 d8                	mov    eax,ebx
c000550c:	e8 98 da ff ff       	call   c0002fa9 <get_fat>
c0005511:	83 f8 01             	cmp    eax,0x1
c0005514:	77 0e                	ja     c0005524 <f_read+0x175>
c0005516:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000551a:	bd 02 00 00 00       	mov    ebp,0x2
c000551f:	e9 01 01 00 00       	jmp    c0005625 <f_read+0x276>
c0005524:	83 f8 ff             	cmp    eax,0xffffffff
c0005527:	75 0e                	jne    c0005537 <f_read+0x188>
c0005529:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000552d:	bd 01 00 00 00       	mov    ebp,0x1
c0005532:	e9 ee 00 00 00       	jmp    c0005625 <f_read+0x276>
c0005537:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000553a:	e9 08 ff ff ff       	jmp    c0005447 <f_read+0x98>
c000553f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005542:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005545:	29 f0                	sub    eax,esi
c0005547:	19 fa                	sbb    edx,edi
c0005549:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000554c:	89 d7                	mov    edi,edx
c000554e:	ba 00 00 00 00       	mov    edx,0x0
c0005553:	89 f9                	mov    ecx,edi
c0005555:	19 d1                	sbb    ecx,edx
c0005557:	0f 83 64 ff ff ff    	jae    c00054c1 <f_read+0x112>
c000555d:	89 c7                	mov    edi,eax
c000555f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005562:	c1 e7 09             	shl    edi,0x9
c0005565:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005569:	b9 00 02 00 00       	mov    ecx,0x200
c000556e:	01 f8                	add    eax,edi
c0005570:	e8 4d c7 ff ff       	call   c0001cc2 <mem_cpy>
c0005575:	e9 47 ff ff ff       	jmp    c00054c1 <f_read+0x112>
c000557a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005580:	89 04 24             	mov    DWORD PTR [esp],eax
c0005583:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005587:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000558b:	75 05                	jne    c0005592 <f_read+0x1e3>
c000558d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005590:	74 5b                	je     c00055ed <f_read+0x23e>
c0005592:	8d 43 50             	lea    eax,[ebx+0x50]
c0005595:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000559d:	79 2a                	jns    c00055c9 <f_read+0x21a>
c000559f:	83 ec 0c             	sub    esp,0xc
c00055a2:	6a 01                	push   0x1
c00055a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055b4:	50                   	push   eax
c00055b5:	e8 54 c6 ff ff       	call   c0001c0e <disk_write>
c00055ba:	83 c4 20             	add    esp,0x20
c00055bd:	85 c0                	test   eax,eax
c00055bf:	0f 85 64 ff ff ff    	jne    c0005529 <f_read+0x17a>
c00055c5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055c9:	83 ec 0c             	sub    esp,0xc
c00055cc:	6a 01                	push   0x1
c00055ce:	57                   	push   edi
c00055cf:	56                   	push   esi
c00055d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055dc:	50                   	push   eax
c00055dd:	e8 16 c6 ff ff       	call   c0001bf8 <disk_read>
c00055e2:	83 c4 20             	add    esp,0x20
c00055e5:	85 c0                	test   eax,eax
c00055e7:	0f 85 3c ff ff ff    	jne    c0005529 <f_read+0x17a>
c00055ed:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f6:	ba 00 02 00 00       	mov    edx,0x200
c00055fb:	25 ff 01 00 00       	and    eax,0x1ff
c0005600:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005604:	29 c2                	sub    edx,eax
c0005606:	39 d6                	cmp    esi,edx
c0005608:	76 02                	jbe    c000560c <f_read+0x25d>
c000560a:	89 d6                	mov    esi,edx
c000560c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005610:	89 f1                	mov    ecx,esi
c0005612:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005616:	e8 a7 c6 ff ff       	call   c0001cc2 <mem_cpy>
c000561b:	e9 a7 fe ff ff       	jmp    c00054c7 <f_read+0x118>
c0005620:	bd 07 00 00 00       	mov    ebp,0x7
c0005625:	83 c4 2c             	add    esp,0x2c
c0005628:	89 e8                	mov    eax,ebp
c000562a:	5b                   	pop    ebx
c000562b:	5e                   	pop    esi
c000562c:	5f                   	pop    edi
c000562d:	5d                   	pop    ebp
c000562e:	c3                   	ret    

c000562f <f_write>:
c000562f:	55                   	push   ebp
c0005630:	57                   	push   edi
c0005631:	56                   	push   esi
c0005632:	53                   	push   ebx
c0005633:	83 ec 2c             	sub    esp,0x2c
c0005636:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000563a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000563e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005644:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005648:	89 d8                	mov    eax,ebx
c000564a:	e8 f7 cc ff ff       	call   c0002346 <validate>
c000564f:	89 c5                	mov    ebp,eax
c0005651:	85 c0                	test   eax,eax
c0005653:	0f 85 86 02 00 00    	jne    c00058df <f_write+0x2b0>
c0005659:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000565d:	85 ed                	test   ebp,ebp
c000565f:	0f 85 7a 02 00 00    	jne    c00058df <f_write+0x2b0>
c0005665:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005669:	0f 84 6b 02 00 00    	je     c00058da <f_write+0x2ab>
c000566f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005673:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005676:	0f 84 43 01 00 00    	je     c00057bf <f_write+0x190>
c000567c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567f:	89 c1                	mov    ecx,eax
c0005681:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005685:	0f 83 34 01 00 00    	jae    c00057bf <f_write+0x190>
c000568b:	f7 d0                	not    eax
c000568d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005691:	e9 29 01 00 00       	jmp    c00057bf <f_write+0x190>
c0005696:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005699:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000569c:	89 d0                	mov    eax,edx
c000569e:	25 ff 01 00 00       	and    eax,0x1ff
c00056a3:	0f 85 00 02 00 00    	jne    c00058a9 <f_write+0x27a>
c00056a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ad:	89 d6                	mov    esi,edx
c00056af:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056b3:	89 cf                	mov    edi,ecx
c00056b5:	48                   	dec    eax
c00056b6:	0f ac fe 09          	shrd   esi,edi,0x9
c00056ba:	21 f0                	and    eax,esi
c00056bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056c0:	0f 84 06 01 00 00    	je     c00057cc <f_write+0x19d>
c00056c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ca:	0f 88 6e 01 00 00    	js     c000583e <f_write+0x20f>
c00056d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056d4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056d7:	89 c8                	mov    eax,ecx
c00056d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056dd:	e8 fa c7 ff ff       	call   c0001edc <clst2sect>
c00056e2:	89 d1                	mov    ecx,edx
c00056e4:	09 c1                	or     ecx,eax
c00056e6:	0f 84 1c 01 00 00    	je     c0005808 <f_write+0x1d9>
c00056ec:	31 ff                	xor    edi,edi
c00056ee:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056f6:	01 c6                	add    esi,eax
c00056f8:	11 d7                	adc    edi,edx
c00056fa:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005702:	0f 86 63 01 00 00    	jbe    c000586b <f_write+0x23c>
c0005708:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000570c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005710:	c1 e8 09             	shr    eax,0x9
c0005713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005717:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000571b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000571f:	39 c2                	cmp    edx,eax
c0005721:	76 08                	jbe    c000572b <f_write+0xfc>
c0005723:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000572b:	83 ec 0c             	sub    esp,0xc
c000572e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005732:	57                   	push   edi
c0005733:	56                   	push   esi
c0005734:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005738:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000573c:	50                   	push   eax
c000573d:	e8 cc c4 ff ff       	call   c0001c0e <disk_write>
c0005742:	83 c4 20             	add    esp,0x20
c0005745:	85 c0                	test   eax,eax
c0005747:	0f 85 ce 00 00 00    	jne    c000581b <f_write+0x1ec>
c000574d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005750:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005753:	29 f0                	sub    eax,esi
c0005755:	19 fa                	sbb    edx,edi
c0005757:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000575b:	89 d7                	mov    edi,edx
c000575d:	ba 00 00 00 00       	mov    edx,0x0
c0005762:	89 f9                	mov    ecx,edi
c0005764:	19 d1                	sbb    ecx,edx
c0005766:	73 1c                	jae    c0005784 <f_write+0x155>
c0005768:	89 c7                	mov    edi,eax
c000576a:	b9 00 02 00 00       	mov    ecx,0x200
c000576f:	c1 e7 09             	shl    edi,0x9
c0005772:	8d 43 50             	lea    eax,[ebx+0x50]
c0005775:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005779:	89 fa                	mov    edx,edi
c000577b:	e8 42 c5 ff ff       	call   c0001cc2 <mem_cpy>
c0005780:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005784:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005788:	c1 e6 09             	shl    esi,0x9
c000578b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000578f:	31 ff                	xor    edi,edi
c0005791:	01 30                	add    DWORD PTR [eax],esi
c0005793:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005797:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000579b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000579e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057a4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057a7:	89 c1                	mov    ecx,eax
c00057a9:	39 f2                	cmp    edx,esi
c00057ab:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057ae:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057b1:	19 f9                	sbb    ecx,edi
c00057b3:	73 04                	jae    c00057b9 <f_write+0x18a>
c00057b5:	89 f2                	mov    edx,esi
c00057b7:	89 f8                	mov    eax,edi
c00057b9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057bc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057bf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057c4:	0f 85 cc fe ff ff    	jne    c0005696 <f_write+0x67>
c00057ca:	eb 2e                	jmp    c00057fa <f_write+0x1cb>
c00057cc:	89 c8                	mov    eax,ecx
c00057ce:	09 d0                	or     eax,edx
c00057d0:	75 0b                	jne    c00057dd <f_write+0x1ae>
c00057d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057d5:	31 d2                	xor    edx,edx
c00057d7:	85 c0                	test   eax,eax
c00057d9:	75 28                	jne    c0005803 <f_write+0x1d4>
c00057db:	eb 12                	jmp    c00057ef <f_write+0x1c0>
c00057dd:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057e1:	74 09                	je     c00057ec <f_write+0x1bd>
c00057e3:	89 d8                	mov    eax,ebx
c00057e5:	e8 13 c7 ff ff       	call   c0001efd <clmt_clust>
c00057ea:	eb 0a                	jmp    c00057f6 <f_write+0x1c7>
c00057ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057ef:	89 d8                	mov    eax,ebx
c00057f1:	e8 a1 da ff ff       	call   c0003297 <create_chain>
c00057f6:	85 c0                	test   eax,eax
c00057f8:	75 09                	jne    c0005803 <f_write+0x1d4>
c00057fa:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057fe:	e9 dc 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005803:	83 f8 01             	cmp    eax,0x1
c0005806:	75 0e                	jne    c0005816 <f_write+0x1e7>
c0005808:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000580c:	bd 02 00 00 00       	mov    ebp,0x2
c0005811:	e9 c9 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005816:	83 f8 ff             	cmp    eax,0xffffffff
c0005819:	75 0e                	jne    c0005829 <f_write+0x1fa>
c000581b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000581f:	bd 01 00 00 00       	mov    ebp,0x1
c0005824:	e9 b6 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005829:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000582c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005830:	0f 85 90 fe ff ff    	jne    c00056c6 <f_write+0x97>
c0005836:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005839:	e9 88 fe ff ff       	jmp    c00056c6 <f_write+0x97>
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	8d 43 50             	lea    eax,[ebx+0x50]
c0005844:	6a 01                	push   0x1
c0005846:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005849:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584c:	50                   	push   eax
c000584d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005851:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005855:	50                   	push   eax
c0005856:	e8 b3 c3 ff ff       	call   c0001c0e <disk_write>
c000585b:	83 c4 20             	add    esp,0x20
c000585e:	85 c0                	test   eax,eax
c0005860:	75 b9                	jne    c000581b <f_write+0x1ec>
c0005862:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005866:	e9 65 fe ff ff       	jmp    c00056d0 <f_write+0xa1>
c000586b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000586e:	75 05                	jne    c0005875 <f_write+0x246>
c0005870:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005873:	74 2e                	je     c00058a3 <f_write+0x274>
c0005875:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005878:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000587e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005881:	73 20                	jae    c00058a3 <f_write+0x274>
c0005883:	83 ec 0c             	sub    esp,0xc
c0005886:	8d 43 50             	lea    eax,[ebx+0x50]
c0005889:	6a 01                	push   0x1
c000588b:	57                   	push   edi
c000588c:	56                   	push   esi
c000588d:	50                   	push   eax
c000588e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005892:	50                   	push   eax
c0005893:	e8 60 c3 ff ff       	call   c0001bf8 <disk_read>
c0005898:	83 c4 20             	add    esp,0x20
c000589b:	85 c0                	test   eax,eax
c000589d:	0f 85 78 ff ff ff    	jne    c000581b <f_write+0x1ec>
c00058a3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058a6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ac:	ba 00 02 00 00       	mov    edx,0x200
c00058b1:	25 ff 01 00 00       	and    eax,0x1ff
c00058b6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058ba:	29 c2                	sub    edx,eax
c00058bc:	39 d6                	cmp    esi,edx
c00058be:	76 02                	jbe    c00058c2 <f_write+0x293>
c00058c0:	89 d6                	mov    esi,edx
c00058c2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058c6:	89 f1                	mov    ecx,esi
c00058c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058cc:	e8 f1 c3 ff ff       	call   c0001cc2 <mem_cpy>
c00058d1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058d5:	e9 b1 fe ff ff       	jmp    c000578b <f_write+0x15c>
c00058da:	bd 07 00 00 00       	mov    ebp,0x7
c00058df:	83 c4 2c             	add    esp,0x2c
c00058e2:	89 e8                	mov    eax,ebp
c00058e4:	5b                   	pop    ebx
c00058e5:	5e                   	pop    esi
c00058e6:	5f                   	pop    edi
c00058e7:	5d                   	pop    ebp
c00058e8:	c3                   	ret    

c00058e9 <f_sync>:
c00058e9:	56                   	push   esi
c00058ea:	53                   	push   ebx
c00058eb:	83 ec 64             	sub    esp,0x64
c00058ee:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058f2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058f6:	89 d8                	mov    eax,ebx
c00058f8:	e8 49 ca ff ff       	call   c0002346 <validate>
c00058fd:	85 c0                	test   eax,eax
c00058ff:	0f 85 ba 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005905:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005908:	f6 c2 40             	test   dl,0x40
c000590b:	0f 84 ae 01 00 00    	je     c0005abf <f_sync+0x1d6>
c0005911:	84 d2                	test   dl,dl
c0005913:	79 33                	jns    c0005948 <f_sync+0x5f>
c0005915:	83 ec 0c             	sub    esp,0xc
c0005918:	8d 43 50             	lea    eax,[ebx+0x50]
c000591b:	6a 01                	push   0x1
c000591d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005920:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005923:	50                   	push   eax
c0005924:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005928:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000592c:	50                   	push   eax
c000592d:	e8 dc c2 ff ff       	call   c0001c0e <disk_write>
c0005932:	83 c4 20             	add    esp,0x20
c0005935:	89 c2                	mov    edx,eax
c0005937:	b8 01 00 00 00       	mov    eax,0x1
c000593c:	85 d2                	test   edx,edx
c000593e:	0f 85 7b 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005944:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594f:	0f 85 11 01 00 00    	jne    c0005a66 <f_sync+0x17d>
c0005955:	89 d8                	mov    eax,ebx
c0005957:	e8 13 d6 ff ff       	call   c0002f6f <fill_first_frag>
c000595c:	85 c0                	test   eax,eax
c000595e:	0f 85 5b 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005964:	83 c9 ff             	or     ecx,0xffffffff
c0005967:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000596a:	89 d8                	mov    eax,ebx
c000596c:	e8 c9 d5 ff ff       	call   c0002f3a <fill_last_frag>
c0005971:	85 c0                	test   eax,eax
c0005973:	0f 85 46 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005979:	83 ec 0c             	sub    esp,0xc
c000597c:	68 60 04 00 00       	push   0x460
c0005981:	e8 f0 2a 00 00       	call   c0008476 <ff_memalloc>
c0005986:	83 c4 10             	add    esp,0x10
c0005989:	89 c6                	mov    esi,eax
c000598b:	b8 11 00 00 00       	mov    eax,0x11
c0005990:	85 f6                	test   esi,esi
c0005992:	0f 84 27 01 00 00    	je     c0005abf <f_sync+0x1d6>
c0005998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000599c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059a2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059a5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059a8:	89 da                	mov    edx,ebx
c00059aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059ae:	e8 af df ff ff       	call   c0003962 <load_obj_xdir>
c00059b3:	85 c0                	test   eax,eax
c00059b5:	0f 85 95 00 00 00    	jne    c0005a50 <f_sync+0x167>
c00059bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059c2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059c6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059c9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059cc:	83 ca 01             	or     edx,0x1
c00059cf:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059d8:	83 c0 34             	add    eax,0x34
c00059db:	e8 d9 c2 ff ff       	call   c0001cb9 <st_dword>
c00059e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ea:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059ed:	83 c0 38             	add    eax,0x38
c00059f0:	e8 c7 c2 ff ff       	call   c0001cbc <st_qword>
c00059f5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a02:	83 c0 28             	add    eax,0x28
c0005a05:	e8 b2 c2 ff ff       	call   c0001cbc <st_qword>
c0005a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a13:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a16:	83 c0 0c             	add    eax,0xc
c0005a19:	e8 9b c2 ff ff       	call   c0001cb9 <st_dword>
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a25:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a29:	31 d2                	xor    edx,edx
c0005a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2e:	83 c0 10             	add    eax,0x10
c0005a31:	e8 83 c2 ff ff       	call   c0001cb9 <st_dword>
c0005a36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a3a:	e8 62 e1 ff ff       	call   c0003ba1 <store_xdir>
c0005a3f:	85 c0                	test   eax,eax
c0005a41:	75 0d                	jne    c0005a50 <f_sync+0x167>
c0005a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a47:	e8 00 eb ff ff       	call   c000454c <sync_fs>
c0005a4c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a54:	83 ec 0c             	sub    esp,0xc
c0005a57:	56                   	push   esi
c0005a58:	e8 2f 2a 00 00       	call   c000848c <ff_memfree>
c0005a5d:	83 c4 10             	add    esp,0x10
c0005a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a64:	eb 59                	jmp    c0005abf <f_sync+0x1d6>
c0005a66:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a69:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a6c:	e8 b0 c9 ff ff       	call   c0002421 <move_window>
c0005a71:	85 c0                	test   eax,eax
c0005a73:	75 4a                	jne    c0005abf <f_sync+0x1d6>
c0005a75:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a78:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a83:	e8 5f f3 ff ff       	call   c0004de7 <st_clust.isra.1>
c0005a88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a8b:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a8e:	e8 26 c2 ff ff       	call   c0001cb9 <st_dword>
c0005a93:	8d 46 16             	lea    eax,[esi+0x16]
c0005a96:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a9b:	e8 19 c2 ff ff       	call   c0001cb9 <st_dword>
c0005aa0:	8d 46 12             	lea    eax,[esi+0x12]
c0005aa3:	31 d2                	xor    edx,edx
c0005aa5:	e8 0b c2 ff ff       	call   c0001cb5 <st_word>
c0005aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aae:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ab6:	e8 91 ea ff ff       	call   c000454c <sync_fs>
c0005abb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005abf:	83 c4 64             	add    esp,0x64
c0005ac2:	5b                   	pop    ebx
c0005ac3:	5e                   	pop    esi
c0005ac4:	c3                   	ret    

c0005ac5 <f_close>:
c0005ac5:	53                   	push   ebx
c0005ac6:	83 ec 24             	sub    esp,0x24
c0005ac9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005acd:	53                   	push   ebx
c0005ace:	e8 16 fe ff ff       	call   c00058e9 <f_sync>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	85 c0                	test   eax,eax
c0005ad8:	75 15                	jne    c0005aef <f_close+0x2a>
c0005ada:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ade:	89 d8                	mov    eax,ebx
c0005ae0:	e8 61 c8 ff ff       	call   c0002346 <validate>
c0005ae5:	85 c0                	test   eax,eax
c0005ae7:	75 06                	jne    c0005aef <f_close+0x2a>
c0005ae9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005aef:	83 c4 18             	add    esp,0x18
c0005af2:	5b                   	pop    ebx
c0005af3:	c3                   	ret    

c0005af4 <f_lseek>:
c0005af4:	55                   	push   ebp
c0005af5:	57                   	push   edi
c0005af6:	56                   	push   esi
c0005af7:	53                   	push   ebx
c0005af8:	83 ec 3c             	sub    esp,0x3c
c0005afb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005aff:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b03:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b07:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b0e:	89 d8                	mov    eax,ebx
c0005b10:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b14:	e8 2d c8 ff ff       	call   c0002346 <validate>
c0005b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	0f 85 7a 04 00 00    	jne    c0005f9f <f_lseek+0x4ab>
c0005b25:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b2d:	85 c0                	test   eax,eax
c0005b2f:	0f 85 6a 04 00 00    	jne    c0005f9f <f_lseek+0x4ab>
c0005b35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b39:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b3c:	74 0c                	je     c0005b4a <f_lseek+0x56>
c0005b3e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b41:	85 c0                	test   eax,eax
c0005b43:	75 1f                	jne    c0005b64 <f_lseek+0x70>
c0005b45:	e9 b5 01 00 00       	jmp    c0005cff <f_lseek+0x20b>
c0005b4a:	83 c9 ff             	or     ecx,0xffffffff
c0005b4d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b50:	89 d8                	mov    eax,ebx
c0005b52:	e8 e3 d3 ff ff       	call   c0002f3a <fill_last_frag>
c0005b57:	85 c0                	test   eax,eax
c0005b59:	74 e3                	je     c0005b3e <f_lseek+0x4a>
c0005b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5f:	e9 3b 04 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005b64:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b69:	0f 85 ac 00 00 00    	jne    c0005c1b <f_lseek+0x127>
c0005b6f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b73:	0f 85 a2 00 00 00    	jne    c0005c1b <f_lseek+0x127>
c0005b79:	8d 78 04             	lea    edi,[eax+0x4]
c0005b7c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b81:	be 02 00 00 00       	mov    esi,0x2
c0005b86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b8a:	85 ed                	test   ebp,ebp
c0005b8c:	74 73                	je     c0005c01 <f_lseek+0x10d>
c0005b8e:	89 e9                	mov    ecx,ebp
c0005b90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b97:	ff 04 24             	inc    DWORD PTR [esp]
c0005b9a:	89 ca                	mov    edx,ecx
c0005b9c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba0:	89 d8                	mov    eax,ebx
c0005ba2:	e8 02 d4 ff ff       	call   c0002fa9 <get_fat>
c0005ba7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bab:	83 f8 01             	cmp    eax,0x1
c0005bae:	77 11                	ja     c0005bc1 <f_lseek+0xcd>
c0005bb0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bb4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bbc:	e9 de 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005bc1:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc4:	75 11                	jne    c0005bd7 <f_lseek+0xe3>
c0005bc6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bca:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bd2:	e9 c8 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005bd7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bda:	89 c1                	mov    ecx,eax
c0005bdc:	39 c2                	cmp    edx,eax
c0005bde:	74 b7                	je     c0005b97 <f_lseek+0xa3>
c0005be0:	83 c6 02             	add    esi,0x2
c0005be3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005be7:	72 0b                	jb     c0005bf4 <f_lseek+0x100>
c0005be9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bec:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bef:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bf1:	83 c7 08             	add    edi,0x8
c0005bf4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfb:	76 04                	jbe    c0005c01 <f_lseek+0x10d>
c0005bfd:	89 c5                	mov    ebp,eax
c0005bff:	eb 8d                	jmp    c0005b8e <f_lseek+0x9a>
c0005c01:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c04:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c08:	89 30                	mov    DWORD PTR [eax],esi
c0005c0a:	0f 87 87 03 00 00    	ja     c0005f97 <f_lseek+0x4a3>
c0005c10:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c16:	e9 84 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005c1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c1e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c2d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c34:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c38:	73 0f                	jae    c0005c49 <f_lseek+0x155>
c0005c3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c51:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c54:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c5b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c5f:	0f 84 3a 03 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005c65:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6d:	83 c6 ff             	add    esi,0xffffffff
c0005c70:	89 d8                	mov    eax,ebx
c0005c72:	83 d7 ff             	adc    edi,0xffffffff
c0005c75:	89 f2                	mov    edx,esi
c0005c77:	89 f9                	mov    ecx,edi
c0005c79:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c80:	e8 78 c2 ff ff       	call   c0001efd <clmt_clust>
c0005c85:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c89:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c8c:	89 c2                	mov    edx,eax
c0005c8e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c92:	89 c8                	mov    eax,ecx
c0005c94:	e8 43 c2 ff ff       	call   c0001edc <clst2sect>
c0005c99:	89 d7                	mov    edi,edx
c0005c9b:	09 c7                	or     edi,eax
c0005c9d:	0f 84 0d ff ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005ca3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ca7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cad:	0f 84 ec 02 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005cb3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cbb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cbe:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cc2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc6:	4d                   	dec    ebp
c0005cc7:	31 ff                	xor    edi,edi
c0005cc9:	21 ee                	and    esi,ebp
c0005ccb:	01 c6                	add    esi,eax
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	11 d7                	adc    edi,edx
c0005cd2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd5:	39 fa                	cmp    edx,edi
c0005cd7:	75 08                	jne    c0005ce1 <f_lseek+0x1ed>
c0005cd9:	39 f0                	cmp    eax,esi
c0005cdb:	0f 84 be 02 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005ce1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce8:	0f 89 80 02 00 00    	jns    c0005f6e <f_lseek+0x47a>
c0005cee:	83 ec 0c             	sub    esp,0xc
c0005cf1:	6a 01                	push   0x1
c0005cf3:	52                   	push   edx
c0005cf4:	50                   	push   eax
c0005cf5:	55                   	push   ebp
c0005cf6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cfa:	e9 5a 02 00 00       	jmp    c0005f59 <f_lseek+0x465>
c0005cff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d03:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d06:	74 16                	je     c0005d1e <f_lseek+0x22a>
c0005d08:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d0d:	76 0f                	jbe    c0005d1e <f_lseek+0x22a>
c0005d0f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d16:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d1e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d24:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d27:	89 c7                	mov    edi,eax
c0005d29:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d2d:	73 0d                	jae    c0005d3c <f_lseek+0x248>
c0005d2f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d33:	75 07                	jne    c0005d3c <f_lseek+0x248>
c0005d35:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d3c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d42:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d46:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d4d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d54:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d57:	75 09                	jne    c0005d62 <f_lseek+0x26e>
c0005d59:	31 f6                	xor    esi,esi
c0005d5b:	31 ff                	xor    edi,edi
c0005d5d:	e9 af 01 00 00       	jmp    c0005f11 <f_lseek+0x41d>
c0005d62:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d66:	89 d7                	mov    edi,edx
c0005d68:	c1 e1 09             	shl    ecx,0x9
c0005d6b:	09 c7                	or     edi,eax
c0005d6d:	89 cd                	mov    ebp,ecx
c0005d6f:	74 6d                	je     c0005dde <f_lseek+0x2ea>
c0005d71:	83 c0 ff             	add    eax,0xffffffff
c0005d74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d78:	83 d2 ff             	adc    edx,0xffffffff
c0005d7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d82:	83 c0 ff             	add    eax,0xffffffff
c0005d85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d89:	83 d2 ff             	adc    edx,0xffffffff
c0005d8c:	31 ff                	xor    edi,edi
c0005d8e:	57                   	push   edi
c0005d8f:	51                   	push   ecx
c0005d90:	52                   	push   edx
c0005d91:	50                   	push   eax
c0005d92:	e8 4d 15 02 00       	call   c00272e4 <__udivdi3>
c0005d97:	83 c4 10             	add    esp,0x10
c0005d9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005da2:	57                   	push   edi
c0005da3:	55                   	push   ebp
c0005da4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005da8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dac:	e8 33 15 02 00       	call   c00272e4 <__udivdi3>
c0005db1:	83 c4 10             	add    esp,0x10
c0005db4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005db8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dbc:	19 d1                	sbb    ecx,edx
c0005dbe:	72 1e                	jb     c0005dde <f_lseek+0x2ea>
c0005dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dc4:	89 e9                	mov    ecx,ebp
c0005dc6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dc9:	f7 d9                	neg    ecx
c0005dcb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dce:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dd2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dd5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dd8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ddc:	eb 28                	jmp    c0005e06 <f_lseek+0x312>
c0005dde:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005de1:	85 c0                	test   eax,eax
c0005de3:	75 1e                	jne    c0005e03 <f_lseek+0x30f>
c0005de5:	31 d2                	xor    edx,edx
c0005de7:	89 d8                	mov    eax,ebx
c0005de9:	e8 a9 d4 ff ff       	call   c0003297 <create_chain>
c0005dee:	83 f8 01             	cmp    eax,0x1
c0005df1:	0f 84 b9 fd ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005df7:	83 f8 ff             	cmp    eax,0xffffffff
c0005dfa:	0f 84 c6 fd ff ff    	je     c0005bc6 <f_lseek+0xd2>
c0005e00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e03:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e06:	85 c0                	test   eax,eax
c0005e08:	0f 84 4b ff ff ff    	je     c0005d59 <f_lseek+0x265>
c0005e0e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e12:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e1a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e21:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e24:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e27:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e2b:	0f 83 9d 00 00 00    	jae    c0005ece <f_lseek+0x3da>
c0005e31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e39:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e3c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e40:	01 f2                	add    edx,esi
c0005e42:	11 f9                	adc    ecx,edi
c0005e44:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e4c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e4f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e52:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e55:	f6 c1 02             	test   cl,0x2
c0005e58:	74 35                	je     c0005e8f <f_lseek+0x39b>
c0005e5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e5e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e61:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e64:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e68:	73 16                	jae    c0005e80 <f_lseek+0x38c>
c0005e6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e6e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e72:	88 ca                	mov    dl,cl
c0005e74:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e77:	83 ca 40             	or     edx,0x40
c0005e7a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e7d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e80:	89 c2                	mov    edx,eax
c0005e82:	89 d8                	mov    eax,ebx
c0005e84:	e8 0e d4 ff ff       	call   c0003297 <create_chain>
c0005e89:	85 c0                	test   eax,eax
c0005e8b:	75 0b                	jne    c0005e98 <f_lseek+0x3a4>
c0005e8d:	eb 30                	jmp    c0005ebf <f_lseek+0x3cb>
c0005e8f:	89 c2                	mov    edx,eax
c0005e91:	89 d8                	mov    eax,ebx
c0005e93:	e8 11 d1 ff ff       	call   c0002fa9 <get_fat>
c0005e98:	83 f8 ff             	cmp    eax,0xffffffff
c0005e9b:	0f 84 25 fd ff ff    	je     c0005bc6 <f_lseek+0xd2>
c0005ea1:	83 f8 01             	cmp    eax,0x1
c0005ea4:	0f 86 06 fd ff ff    	jbe    c0005bb0 <f_lseek+0xbc>
c0005eaa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005eae:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eb1:	0f 86 f9 fc ff ff    	jbe    c0005bb0 <f_lseek+0xbc>
c0005eb7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005eba:	e9 5b ff ff ff       	jmp    c0005e1a <f_lseek+0x326>
c0005ebf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ec6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ece:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ed1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ed5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ed8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005edb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ede:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ee4:	0f 84 6f fe ff ff    	je     c0005d59 <f_lseek+0x265>
c0005eea:	89 c2                	mov    edx,eax
c0005eec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ef0:	e8 e7 bf ff ff       	call   c0001edc <clst2sect>
c0005ef5:	89 d7                	mov    edi,edx
c0005ef7:	09 c7                	or     edi,eax
c0005ef9:	0f 84 b1 fc ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005eff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f03:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f06:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f0a:	c1 ef 09             	shr    edi,0x9
c0005f0d:	01 c6                	add    esi,eax
c0005f0f:	11 d7                	adc    edi,edx
c0005f11:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f14:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f17:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f1a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f1d:	19 d1                	sbb    ecx,edx
c0005f1f:	73 0a                	jae    c0005f2b <f_lseek+0x437>
c0005f21:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f24:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f27:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f2b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f30:	74 6d                	je     c0005f9f <f_lseek+0x4ab>
c0005f32:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f38:	39 fa                	cmp    edx,edi
c0005f3a:	75 04                	jne    c0005f40 <f_lseek+0x44c>
c0005f3c:	39 f0                	cmp    eax,esi
c0005f3e:	74 5f                	je     c0005f9f <f_lseek+0x4ab>
c0005f40:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f43:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f47:	79 25                	jns    c0005f6e <f_lseek+0x47a>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	6a 01                	push   0x1
c0005f4e:	52                   	push   edx
c0005f4f:	50                   	push   eax
c0005f50:	55                   	push   ebp
c0005f51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f55:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f59:	50                   	push   eax
c0005f5a:	e8 af bc ff ff       	call   c0001c0e <disk_write>
c0005f5f:	83 c4 20             	add    esp,0x20
c0005f62:	85 c0                	test   eax,eax
c0005f64:	0f 85 5c fc ff ff    	jne    c0005bc6 <f_lseek+0xd2>
c0005f6a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f6e:	83 ec 0c             	sub    esp,0xc
c0005f71:	6a 01                	push   0x1
c0005f73:	57                   	push   edi
c0005f74:	56                   	push   esi
c0005f75:	55                   	push   ebp
c0005f76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7e:	50                   	push   eax
c0005f7f:	e8 74 bc ff ff       	call   c0001bf8 <disk_read>
c0005f84:	83 c4 20             	add    esp,0x20
c0005f87:	85 c0                	test   eax,eax
c0005f89:	0f 85 37 fc ff ff    	jne    c0005bc6 <f_lseek+0xd2>
c0005f8f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f92:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f95:	eb 08                	jmp    c0005f9f <f_lseek+0x4ab>
c0005f97:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fa3:	83 c4 3c             	add    esp,0x3c
c0005fa6:	5b                   	pop    ebx
c0005fa7:	5e                   	pop    esi
c0005fa8:	5f                   	pop    edi
c0005fa9:	5d                   	pop    ebp
c0005faa:	c3                   	ret    

c0005fab <f_opendir>:
c0005fab:	56                   	push   esi
c0005fac:	b8 09 00 00 00       	mov    eax,0x9
c0005fb1:	53                   	push   ebx
c0005fb2:	83 ec 24             	sub    esp,0x24
c0005fb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fb9:	85 db                	test   ebx,ebx
c0005fbb:	0f 84 e6 00 00 00    	je     c00060a7 <f_opendir+0xfc>
c0005fc1:	31 c9                	xor    ecx,ecx
c0005fc3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fc7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fcb:	e8 03 c7 ff ff       	call   c00026d3 <mount_volume>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	0f 85 c9 00 00 00    	jne    c00060a1 <f_opendir+0xf6>
c0005fd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fdc:	83 ec 0c             	sub    esp,0xc
c0005fdf:	89 03                	mov    DWORD PTR [ebx],eax
c0005fe1:	68 60 04 00 00       	push   0x460
c0005fe6:	e8 8b 24 00 00       	call   c0008476 <ff_memalloc>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	89 c6                	mov    esi,eax
c0005ff0:	b8 11 00 00 00       	mov    eax,0x11
c0005ff5:	85 f6                	test   esi,esi
c0005ff7:	0f 84 aa 00 00 00    	je     c00060a7 <f_opendir+0xfc>
c0005ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006001:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006007:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000600a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000600d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006011:	89 d8                	mov    eax,ebx
c0006013:	e8 31 ee ff ff       	call   c0004e49 <follow_path>
c0006018:	85 c0                	test   eax,eax
c000601a:	75 61                	jne    c000607d <f_opendir+0xd2>
c000601c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006020:	78 46                	js     c0006068 <f_opendir+0xbd>
c0006022:	b8 05 00 00 00       	mov    eax,0x5
c0006027:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000602b:	74 50                	je     c000607d <f_opendir+0xd2>
c000602d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006031:	8a 01                	mov    al,BYTE PTR [ecx]
c0006033:	3c 04                	cmp    al,0x4
c0006035:	75 26                	jne    c000605d <f_opendir+0xb2>
c0006037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000603a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000603d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006040:	30 d2                	xor    dl,dl
c0006042:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006046:	09 c2                	or     edx,eax
c0006048:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000604b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000604e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006051:	89 da                	mov    edx,ebx
c0006053:	8d 41 10             	lea    eax,[ecx+0x10]
c0006056:	e8 b4 ed ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000605b:	eb 0b                	jmp    c0006068 <f_opendir+0xbd>
c000605d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006060:	e8 59 ed ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006065:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006068:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000606c:	31 d2                	xor    edx,edx
c000606e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006072:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006076:	89 d8                	mov    eax,ebx
c0006078:	e8 22 d1 ff ff       	call   c000319f <dir_sdi>
c000607d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006081:	83 ec 0c             	sub    esp,0xc
c0006084:	56                   	push   esi
c0006085:	e8 02 24 00 00       	call   c000848c <ff_memfree>
c000608a:	83 c4 10             	add    esp,0x10
c000608d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006091:	83 f8 04             	cmp    eax,0x4
c0006094:	74 06                	je     c000609c <f_opendir+0xf1>
c0006096:	85 c0                	test   eax,eax
c0006098:	74 0d                	je     c00060a7 <f_opendir+0xfc>
c000609a:	eb 05                	jmp    c00060a1 <f_opendir+0xf6>
c000609c:	b8 05 00 00 00       	mov    eax,0x5
c00060a1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060a7:	83 c4 24             	add    esp,0x24
c00060aa:	5b                   	pop    ebx
c00060ab:	5e                   	pop    esi
c00060ac:	c3                   	ret    

c00060ad <f_closedir>:
c00060ad:	53                   	push   ebx
c00060ae:	83 ec 18             	sub    esp,0x18
c00060b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060b5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060b9:	89 d8                	mov    eax,ebx
c00060bb:	e8 86 c2 ff ff       	call   c0002346 <validate>
c00060c0:	85 c0                	test   eax,eax
c00060c2:	75 06                	jne    c00060ca <f_closedir+0x1d>
c00060c4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ca:	83 c4 18             	add    esp,0x18
c00060cd:	5b                   	pop    ebx
c00060ce:	c3                   	ret    

c00060cf <f_readdir>:
c00060cf:	57                   	push   edi
c00060d0:	56                   	push   esi
c00060d1:	53                   	push   ebx
c00060d2:	83 ec 20             	sub    esp,0x20
c00060d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060d9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060e1:	89 d8                	mov    eax,ebx
c00060e3:	e8 5e c2 ff ff       	call   c0002346 <validate>
c00060e8:	85 c0                	test   eax,eax
c00060ea:	75 77                	jne    c0006163 <f_readdir+0x94>
c00060ec:	85 ff                	test   edi,edi
c00060ee:	75 0b                	jne    c00060fb <f_readdir+0x2c>
c00060f0:	31 d2                	xor    edx,edx
c00060f2:	89 d8                	mov    eax,ebx
c00060f4:	e8 a6 d0 ff ff       	call   c000319f <dir_sdi>
c00060f9:	eb 68                	jmp    c0006163 <f_readdir+0x94>
c00060fb:	83 ec 0c             	sub    esp,0xc
c00060fe:	68 60 04 00 00       	push   0x460
c0006103:	e8 6e 23 00 00       	call   c0008476 <ff_memalloc>
c0006108:	83 c4 10             	add    esp,0x10
c000610b:	89 c6                	mov    esi,eax
c000610d:	b8 11 00 00 00       	mov    eax,0x11
c0006112:	85 f6                	test   esi,esi
c0006114:	74 4d                	je     c0006163 <f_readdir+0x94>
c0006116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000611a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006120:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006123:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006126:	31 d2                	xor    edx,edx
c0006128:	89 d8                	mov    eax,ebx
c000612a:	e8 80 d8 ff ff       	call   c00039af <dir_read>
c000612f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006134:	75 19                	jne    c000614f <f_readdir+0x80>
c0006136:	89 fa                	mov    edx,edi
c0006138:	89 d8                	mov    eax,ebx
c000613a:	e8 7e ea ff ff       	call   c0004bbd <get_fileinfo>
c000613f:	31 d2                	xor    edx,edx
c0006141:	89 d8                	mov    eax,ebx
c0006143:	e8 af d5 ff ff       	call   c00036f7 <dir_next>
c0006148:	83 f8 04             	cmp    eax,0x4
c000614b:	75 02                	jne    c000614f <f_readdir+0x80>
c000614d:	31 c0                	xor    eax,eax
c000614f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006153:	83 ec 0c             	sub    esp,0xc
c0006156:	56                   	push   esi
c0006157:	e8 30 23 00 00       	call   c000848c <ff_memfree>
c000615c:	83 c4 10             	add    esp,0x10
c000615f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006163:	83 c4 20             	add    esp,0x20
c0006166:	5b                   	pop    ebx
c0006167:	5e                   	pop    esi
c0006168:	5f                   	pop    edi
c0006169:	c3                   	ret    

c000616a <f_stat>:
c000616a:	57                   	push   edi
c000616b:	31 c9                	xor    ecx,ecx
c000616d:	56                   	push   esi
c000616e:	53                   	push   ebx
c000616f:	83 ec 50             	sub    esp,0x50
c0006172:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006176:	8d 54 24 04          	lea    edx,[esp+0x4]
c000617a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000617e:	e8 50 c5 ff ff       	call   c00026d3 <mount_volume>
c0006183:	89 c3                	mov    ebx,eax
c0006185:	85 c0                	test   eax,eax
c0006187:	75 67                	jne    c00061f0 <f_stat+0x86>
c0006189:	83 ec 0c             	sub    esp,0xc
c000618c:	bb 11 00 00 00       	mov    ebx,0x11
c0006191:	68 60 04 00 00       	push   0x460
c0006196:	e8 db 22 00 00       	call   c0008476 <ff_memalloc>
c000619b:	83 c4 10             	add    esp,0x10
c000619e:	89 c6                	mov    esi,eax
c00061a0:	85 c0                	test   eax,eax
c00061a2:	74 4c                	je     c00061f0 <f_stat+0x86>
c00061a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061a8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061ae:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061b1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061b4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 88 ec ff ff       	call   c0004e49 <follow_path>
c00061c1:	89 c3                	mov    ebx,eax
c00061c3:	85 c0                	test   eax,eax
c00061c5:	75 1d                	jne    c00061e4 <f_stat+0x7a>
c00061c7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061cc:	78 11                	js     c00061df <f_stat+0x75>
c00061ce:	85 ff                	test   edi,edi
c00061d0:	74 12                	je     c00061e4 <f_stat+0x7a>
c00061d2:	89 fa                	mov    edx,edi
c00061d4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061d8:	e8 e0 e9 ff ff       	call   c0004bbd <get_fileinfo>
c00061dd:	eb 05                	jmp    c00061e4 <f_stat+0x7a>
c00061df:	bb 06 00 00 00       	mov    ebx,0x6
c00061e4:	83 ec 0c             	sub    esp,0xc
c00061e7:	56                   	push   esi
c00061e8:	e8 9f 22 00 00       	call   c000848c <ff_memfree>
c00061ed:	83 c4 10             	add    esp,0x10
c00061f0:	83 c4 50             	add    esp,0x50
c00061f3:	89 d8                	mov    eax,ebx
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	5f                   	pop    edi
c00061f8:	c3                   	ret    

c00061f9 <f_getfree>:
c00061f9:	55                   	push   ebp
c00061fa:	31 c9                	xor    ecx,ecx
c00061fc:	57                   	push   edi
c00061fd:	56                   	push   esi
c00061fe:	53                   	push   ebx
c00061ff:	83 ec 5c             	sub    esp,0x5c
c0006202:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006206:	8d 44 24 70          	lea    eax,[esp+0x70]
c000620a:	e8 c4 c4 ff ff       	call   c00026d3 <mount_volume>
c000620f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006213:	85 c0                	test   eax,eax
c0006215:	0f 85 9d 01 00 00    	jne    c00063b8 <f_getfree+0x1bf>
c000621b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000621f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006223:	89 02                	mov    DWORD PTR [edx],eax
c0006225:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006228:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000622b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000622e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006232:	39 f2                	cmp    edx,esi
c0006234:	77 0b                	ja     c0006241 <f_getfree+0x48>
c0006236:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000623a:	89 10                	mov    DWORD PTR [eax],edx
c000623c:	e9 77 01 00 00       	jmp    c00063b8 <f_getfree+0x1bf>
c0006241:	8a 10                	mov    dl,BYTE PTR [eax]
c0006243:	80 fa 01             	cmp    dl,0x1
c0006246:	75 3a                	jne    c0006282 <f_getfree+0x89>
c0006248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000624c:	be 02 00 00 00       	mov    esi,0x2
c0006251:	31 db                	xor    ebx,ebx
c0006253:	89 f2                	mov    edx,esi
c0006255:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006259:	e8 4b cd ff ff       	call   c0002fa9 <get_fat>
c000625e:	83 f8 ff             	cmp    eax,0xffffffff
c0006261:	0f 84 28 01 00 00    	je     c000638f <f_getfree+0x196>
c0006267:	83 f8 01             	cmp    eax,0x1
c000626a:	0f 84 29 01 00 00    	je     c0006399 <f_getfree+0x1a0>
c0006270:	83 d3 00             	adc    ebx,0x0
c0006273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006277:	46                   	inc    esi
c0006278:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000627b:	77 d6                	ja     c0006253 <f_getfree+0x5a>
c000627d:	e9 25 01 00 00       	jmp    c00063a7 <f_getfree+0x1ae>
c0006282:	80 fa 04             	cmp    dl,0x4
c0006285:	0f 85 88 00 00 00    	jne    c0006313 <f_getfree+0x11a>
c000628b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000628e:	31 ed                	xor    ebp,ebp
c0006290:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006297:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000629b:	31 db                	xor    ebx,ebx
c000629d:	85 ed                	test   ebp,ebp
c000629f:	75 3f                	jne    c00062e0 <f_getfree+0xe7>
c00062a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062a9:	83 c0 01             	add    eax,0x1
c00062ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062b0:	83 d2 00             	adc    edx,0x0
c00062b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062c3:	e8 59 c1 ff ff       	call   c0002421 <move_window>
c00062c8:	85 c0                	test   eax,eax
c00062ca:	0f 85 d3 00 00 00    	jne    c00063a3 <f_getfree+0x1aa>
c00062d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062e7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062eb:	89 cf                	mov    edi,ecx
c00062ed:	85 f6                	test   esi,esi
c00062ef:	74 12                	je     c0006303 <f_getfree+0x10a>
c00062f1:	88 c1                	mov    cl,al
c00062f3:	83 e1 01             	and    ecx,0x1
c00062f6:	80 f9 01             	cmp    cl,0x1
c00062f9:	83 d3 00             	adc    ebx,0x0
c00062fc:	d0 e8                	shr    al,1
c00062fe:	4e                   	dec    esi
c00062ff:	39 fe                	cmp    esi,edi
c0006301:	75 ea                	jne    c00062ed <f_getfree+0xf4>
c0006303:	45                   	inc    ebp
c0006304:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000630a:	85 f6                	test   esi,esi
c000630c:	75 8f                	jne    c000629d <f_getfree+0xa4>
c000630e:	e9 94 00 00 00       	jmp    c00063a7 <f_getfree+0x1ae>
c0006313:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006316:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006319:	31 f6                	xor    esi,esi
c000631b:	31 db                	xor    ebx,ebx
c000631d:	85 f6                	test   esi,esi
c000631f:	75 1b                	jne    c000633c <f_getfree+0x143>
c0006321:	89 d7                	mov    edi,edx
c0006323:	89 cd                	mov    ebp,ecx
c0006325:	83 c7 01             	add    edi,0x1
c0006328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000632c:	83 d5 00             	adc    ebp,0x0
c000632f:	e8 ed c0 ff ff       	call   c0002421 <move_window>
c0006334:	85 c0                	test   eax,eax
c0006336:	75 6b                	jne    c00063a3 <f_getfree+0x1aa>
c0006338:	89 fa                	mov    edx,edi
c000633a:	89 e9                	mov    ecx,ebp
c000633c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006340:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006344:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006348:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000634b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000634f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006353:	75 11                	jne    c0006366 <f_getfree+0x16d>
c0006355:	e8 e9 b8 ff ff       	call   c0001c43 <ld_word>
c000635a:	66 83 f8 01          	cmp    ax,0x1
c000635e:	83 d3 00             	adc    ebx,0x0
c0006361:	83 c6 02             	add    esi,0x2
c0006364:	eb 13                	jmp    c0006379 <f_getfree+0x180>
c0006366:	e8 e5 b8 ff ff       	call   c0001c50 <ld_dword>
c000636b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006370:	83 f8 01             	cmp    eax,0x1
c0006373:	83 d3 00             	adc    ebx,0x0
c0006376:	83 c6 04             	add    esi,0x4
c0006379:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000637f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006383:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006387:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000638b:	75 90                	jne    c000631d <f_getfree+0x124>
c000638d:	eb 18                	jmp    c00063a7 <f_getfree+0x1ae>
c000638f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006397:	eb 0e                	jmp    c00063a7 <f_getfree+0x1ae>
c0006399:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063a1:	eb 04                	jmp    c00063a7 <f_getfree+0x1ae>
c00063a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063a7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063ab:	89 18                	mov    DWORD PTR [eax],ebx
c00063ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063b1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063bc:	83 c4 5c             	add    esp,0x5c
c00063bf:	5b                   	pop    ebx
c00063c0:	5e                   	pop    esi
c00063c1:	5f                   	pop    edi
c00063c2:	5d                   	pop    ebp
c00063c3:	c3                   	ret    

c00063c4 <f_truncate>:
c00063c4:	56                   	push   esi
c00063c5:	53                   	push   ebx
c00063c6:	83 ec 14             	sub    esp,0x14
c00063c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063cd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063d1:	89 d8                	mov    eax,ebx
c00063d3:	e8 6e bf ff ff       	call   c0002346 <validate>
c00063d8:	89 c6                	mov    esi,eax
c00063da:	85 c0                	test   eax,eax
c00063dc:	0f 85 d2 00 00 00    	jne    c00064b4 <f_truncate+0xf0>
c00063e2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063e6:	85 f6                	test   esi,esi
c00063e8:	0f 85 c6 00 00 00    	jne    c00064b4 <f_truncate+0xf0>
c00063ee:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063f2:	0f 84 b7 00 00 00    	je     c00064af <f_truncate+0xeb>
c00063f8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063fe:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006401:	89 d1                	mov    ecx,edx
c0006403:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006406:	0f 83 a8 00 00 00    	jae    c00064b4 <f_truncate+0xf0>
c000640c:	09 c2                	or     edx,eax
c000640e:	75 15                	jne    c0006425 <f_truncate+0x61>
c0006410:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006413:	31 c9                	xor    ecx,ecx
c0006415:	89 d8                	mov    eax,ebx
c0006417:	e8 7a d0 ff ff       	call   c0003496 <remove_chain>
c000641c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006423:	eb 35                	jmp    c000645a <f_truncate+0x96>
c0006425:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006428:	89 d8                	mov    eax,ebx
c000642a:	e8 7a cb ff ff       	call   c0002fa9 <get_fat>
c000642f:	89 c2                	mov    edx,eax
c0006431:	b8 01 00 00 00       	mov    eax,0x1
c0006436:	83 fa ff             	cmp    edx,0xffffffff
c0006439:	74 1f                	je     c000645a <f_truncate+0x96>
c000643b:	b8 02 00 00 00       	mov    eax,0x2
c0006440:	83 fa 01             	cmp    edx,0x1
c0006443:	74 15                	je     c000645a <f_truncate+0x96>
c0006445:	31 c0                	xor    eax,eax
c0006447:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000644b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000644e:	76 0a                	jbe    c000645a <f_truncate+0x96>
c0006450:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006453:	89 d8                	mov    eax,ebx
c0006455:	e8 3c d0 ff ff       	call   c0003496 <remove_chain>
c000645a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000645d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006460:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006463:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006466:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006469:	83 ca 40             	or     edx,0x40
c000646c:	85 c0                	test   eax,eax
c000646e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006471:	75 35                	jne    c00064a8 <f_truncate+0xe4>
c0006473:	84 d2                	test   dl,dl
c0006475:	79 3d                	jns    c00064b4 <f_truncate+0xf0>
c0006477:	83 ec 0c             	sub    esp,0xc
c000647a:	8d 43 50             	lea    eax,[ebx+0x50]
c000647d:	6a 01                	push   0x1
c000647f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006482:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006485:	50                   	push   eax
c0006486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000648a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000648e:	50                   	push   eax
c000648f:	e8 7a b7 ff ff       	call   c0001c0e <disk_write>
c0006494:	83 c4 20             	add    esp,0x20
c0006497:	85 c0                	test   eax,eax
c0006499:	75 08                	jne    c00064a3 <f_truncate+0xdf>
c000649b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000649f:	31 f6                	xor    esi,esi
c00064a1:	eb 11                	jmp    c00064b4 <f_truncate+0xf0>
c00064a3:	b8 01 00 00 00       	mov    eax,0x1
c00064a8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064ab:	89 c6                	mov    esi,eax
c00064ad:	eb 05                	jmp    c00064b4 <f_truncate+0xf0>
c00064af:	be 07 00 00 00       	mov    esi,0x7
c00064b4:	89 f0                	mov    eax,esi
c00064b6:	83 c4 14             	add    esp,0x14
c00064b9:	5b                   	pop    ebx
c00064ba:	5e                   	pop    esi
c00064bb:	c3                   	ret    

c00064bc <f_unlink>:
c00064bc:	56                   	push   esi
c00064bd:	b9 02 00 00 00       	mov    ecx,0x2
c00064c2:	53                   	push   ebx
c00064c3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064c9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064cd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064d4:	e8 fa c1 ff ff       	call   c00026d3 <mount_volume>
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 55 01 00 00    	jne    c0006636 <f_unlink+0x17a>
c00064e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064e5:	83 ec 0c             	sub    esp,0xc
c00064e8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064ec:	68 60 04 00 00       	push   0x460
c00064f1:	e8 80 1f 00 00       	call   c0008476 <ff_memalloc>
c00064f6:	83 c4 10             	add    esp,0x10
c00064f9:	89 c3                	mov    ebx,eax
c00064fb:	b8 11 00 00 00       	mov    eax,0x11
c0006500:	85 db                	test   ebx,ebx
c0006502:	0f 84 2e 01 00 00    	je     c0006636 <f_unlink+0x17a>
c0006508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006512:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006515:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006518:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000651f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006523:	e8 21 e9 ff ff       	call   c0004e49 <follow_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 85 f2 00 00 00    	jne    c0006622 <f_unlink+0x166>
c0006530:	b8 06 00 00 00       	mov    eax,0x6
c0006535:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000653d:	0f 88 df 00 00 00    	js     c0006622 <f_unlink+0x166>
c0006543:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006548:	74 0a                	je     c0006554 <f_unlink+0x98>
c000654a:	b8 07 00 00 00       	mov    eax,0x7
c000654f:	e9 ce 00 00 00       	jmp    c0006622 <f_unlink+0x166>
c0006554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006558:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000655c:	8a 02                	mov    al,BYTE PTR [edx]
c000655e:	3c 04                	cmp    al,0x4
c0006560:	75 12                	jne    c0006574 <f_unlink+0xb8>
c0006562:	8d 42 10             	lea    eax,[edx+0x10]
c0006565:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006569:	e8 a1 e8 ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000656e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006572:	eb 0e                	jmp    c0006582 <f_unlink+0xc6>
c0006574:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000657b:	e8 3e e8 ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006580:	89 c6                	mov    esi,eax
c0006582:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006587:	75 12                	jne    c000659b <f_unlink+0xdf>
c0006589:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658d:	e8 94 d6 ff ff       	call   c0003c26 <dir_remove>
c0006592:	85 c0                	test   eax,eax
c0006594:	74 6c                	je     c0006602 <f_unlink+0x146>
c0006596:	e9 87 00 00 00       	jmp    c0006622 <f_unlink+0x166>
c000659b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000659f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065a6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ad:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b0:	75 21                	jne    c00065d3 <f_unlink+0x117>
c00065b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065ba:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065c1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065c8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065cc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065d3:	31 d2                	xor    edx,edx
c00065d5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065dc:	e8 be cb ff ff       	call   c000319f <dir_sdi>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	75 3d                	jne    c0006622 <f_unlink+0x166>
c00065e5:	31 d2                	xor    edx,edx
c00065e7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065ee:	e8 bc d3 ff ff       	call   c00039af <dir_read>
c00065f3:	85 c0                	test   eax,eax
c00065f5:	0f 84 4f ff ff ff    	je     c000654a <f_unlink+0x8e>
c00065fb:	83 f8 04             	cmp    eax,0x4
c00065fe:	75 22                	jne    c0006622 <f_unlink+0x166>
c0006600:	eb 87                	jmp    c0006589 <f_unlink+0xcd>
c0006602:	85 f6                	test   esi,esi
c0006604:	75 0b                	jne    c0006611 <f_unlink+0x155>
c0006606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000660a:	e8 3d df ff ff       	call   c000454c <sync_fs>
c000660f:	eb 11                	jmp    c0006622 <f_unlink+0x166>
c0006611:	31 c9                	xor    ecx,ecx
c0006613:	89 f2                	mov    edx,esi
c0006615:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006619:	e8 78 ce ff ff       	call   c0003496 <remove_chain>
c000661e:	85 c0                	test   eax,eax
c0006620:	74 e4                	je     c0006606 <f_unlink+0x14a>
c0006622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006626:	83 ec 0c             	sub    esp,0xc
c0006629:	53                   	push   ebx
c000662a:	e8 5d 1e 00 00       	call   c000848c <ff_memfree>
c000662f:	83 c4 10             	add    esp,0x10
c0006632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006636:	81 c4 e4 00 00 00    	add    esp,0xe4
c000663c:	5b                   	pop    ebx
c000663d:	5e                   	pop    esi
c000663e:	c3                   	ret    

c000663f <f_mkdir>:
c000663f:	57                   	push   edi
c0006640:	b9 02 00 00 00       	mov    ecx,0x2
c0006645:	56                   	push   esi
c0006646:	53                   	push   ebx
c0006647:	83 c4 80             	add    esp,0xffffff80
c000664a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000664e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006655:	e8 79 c0 ff ff       	call   c00026d3 <mount_volume>
c000665a:	89 c3                	mov    ebx,eax
c000665c:	85 c0                	test   eax,eax
c000665e:	0f 85 fe 01 00 00    	jne    c0006862 <f_mkdir+0x223>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	bb 11 00 00 00       	mov    ebx,0x11
c000666d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006671:	83 ec 0c             	sub    esp,0xc
c0006674:	68 60 04 00 00       	push   0x460
c0006679:	e8 f8 1d 00 00       	call   c0008476 <ff_memalloc>
c000667e:	83 c4 10             	add    esp,0x10
c0006681:	89 c7                	mov    edi,eax
c0006683:	85 c0                	test   eax,eax
c0006685:	0f 84 d7 01 00 00    	je     c0006862 <f_mkdir+0x223>
c000668b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006695:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006698:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000669b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 9e e7 ff ff       	call   c0004e49 <follow_path>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	74 3e                	je     c00066ef <f_mkdir+0xb0>
c00066b1:	83 f8 04             	cmp    eax,0x4
c00066b4:	75 3e                	jne    c00066f4 <f_mkdir+0xb5>
c00066b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ba:	31 d2                	xor    edx,edx
c00066bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066c4:	e8 ce cb ff ff       	call   c0003297 <create_chain>
c00066c9:	89 c6                	mov    esi,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 0c                	je     c00066db <f_mkdir+0x9c>
c00066cf:	bb 02 00 00 00       	mov    ebx,0x2
c00066d4:	83 f8 01             	cmp    eax,0x1
c00066d7:	74 07                	je     c00066e0 <f_mkdir+0xa1>
c00066d9:	eb 2a                	jmp    c0006705 <f_mkdir+0xc6>
c00066db:	bb 07 00 00 00       	mov    ebx,0x7
c00066e0:	31 c9                	xor    ecx,ecx
c00066e2:	89 f2                	mov    edx,esi
c00066e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e8:	e8 a9 cd ff ff       	call   c0003496 <remove_chain>
c00066ed:	eb 05                	jmp    c00066f4 <f_mkdir+0xb5>
c00066ef:	bb 08 00 00 00       	mov    ebx,0x8
c00066f4:	83 ec 0c             	sub    esp,0xc
c00066f7:	57                   	push   edi
c00066f8:	e8 8f 1d 00 00       	call   c000848c <ff_memfree>
c00066fd:	83 c4 10             	add    esp,0x10
c0006700:	e9 5d 01 00 00       	jmp    c0006862 <f_mkdir+0x223>
c0006705:	bb 01 00 00 00       	mov    ebx,0x1
c000670a:	83 f8 ff             	cmp    eax,0xffffffff
c000670d:	74 d1                	je     c00066e0 <f_mkdir+0xa1>
c000670f:	89 f2                	mov    edx,esi
c0006711:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006715:	e8 c4 ce ff ff       	call   c00035de <dir_clear>
c000671a:	89 c3                	mov    ebx,eax
c000671c:	85 c0                	test   eax,eax
c000671e:	75 c0                	jne    c00066e0 <f_mkdir+0xa1>
c0006720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006724:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006727:	74 69                	je     c0006792 <f_mkdir+0x153>
c0006729:	b9 0b 00 00 00       	mov    ecx,0xb
c000672e:	83 c0 54             	add    eax,0x54
c0006731:	ba 20 00 00 00       	mov    edx,0x20
c0006736:	e8 9c b5 ff ff       	call   c0001cd7 <mem_set>
c000673b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006744:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006748:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000674c:	83 c0 6a             	add    eax,0x6a
c000674f:	e8 65 b5 ff ff       	call   c0001cb9 <st_dword>
c0006754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006758:	89 f1                	mov    ecx,esi
c000675a:	8d 50 54             	lea    edx,[eax+0x54]
c000675d:	e8 85 e6 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	b9 20 00 00 00       	mov    ecx,0x20
c000676b:	8d 50 54             	lea    edx,[eax+0x54]
c000676e:	83 c0 74             	add    eax,0x74
c0006771:	e8 4c b5 ff ff       	call   c0001cc2 <mem_cpy>
c0006776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000677e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006782:	8d 50 74             	lea    edx,[eax+0x74]
c0006785:	e8 5d e6 ff ff       	call   c0004de7 <st_clust.isra.1>
c000678a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006792:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006796:	e8 2f db ff ff       	call   c00042ca <dir_register>
c000679b:	89 c3                	mov    ebx,eax
c000679d:	85 c0                	test   eax,eax
c000679f:	0f 85 3b ff ff ff    	jne    c00066e0 <f_mkdir+0xa1>
c00067a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ac:	75 74                	jne    c0006822 <f_mkdir+0x1e3>
c00067ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067b1:	ba 00 00 21 50       	mov    edx,0x50210000
c00067b6:	83 c0 0c             	add    eax,0xc
c00067b9:	e8 fb b4 ff ff       	call   c0001cb9 <st_dword>
c00067be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c2:	89 f2                	mov    edx,esi
c00067c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c7:	83 c0 34             	add    eax,0x34
c00067ca:	e8 ea b4 ff ff       	call   c0001cb9 <st_dword>
c00067cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067da:	c1 e2 09             	shl    edx,0x9
c00067dd:	83 c0 38             	add    eax,0x38
c00067e0:	e8 d4 b4 ff ff       	call   c0001cb9 <st_dword>
c00067e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f0:	c1 e2 09             	shl    edx,0x9
c00067f3:	83 c0 28             	add    eax,0x28
c00067f6:	e8 be b4 ff ff       	call   c0001cb9 <st_dword>
c00067fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ff:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006802:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006809:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000680d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006811:	e8 8b d3 ff ff       	call   c0003ba1 <store_xdir>
c0006816:	89 c3                	mov    ebx,eax
c0006818:	85 c0                	test   eax,eax
c000681a:	0f 85 d4 fe ff ff    	jne    c00066f4 <f_mkdir+0xb5>
c0006820:	eb 30                	jmp    c0006852 <f_mkdir+0x213>
c0006822:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006826:	ba 00 00 21 50       	mov    edx,0x50210000
c000682b:	83 c0 16             	add    eax,0x16
c000682e:	e8 86 b4 ff ff       	call   c0001cb9 <st_dword>
c0006833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006837:	89 f1                	mov    ecx,esi
c0006839:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000683d:	e8 a5 e5 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006842:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006846:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000684a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000684e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006856:	e8 f1 dc ff ff       	call   c000454c <sync_fs>
c000685b:	89 c3                	mov    ebx,eax
c000685d:	e9 92 fe ff ff       	jmp    c00066f4 <f_mkdir+0xb5>
c0006862:	83 ec 80             	sub    esp,0xffffff80
c0006865:	89 d8                	mov    eax,ebx
c0006867:	5b                   	pop    ebx
c0006868:	5e                   	pop    esi
c0006869:	5f                   	pop    edi
c000686a:	c3                   	ret    

c000686b <f_rename>:
c000686b:	55                   	push   ebp
c000686c:	57                   	push   edi
c000686d:	56                   	push   esi
c000686e:	53                   	push   ebx
c000686f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006875:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000687c:	e8 a4 b9 ff ff       	call   c0002225 <get_ldnumber>
c0006881:	b9 02 00 00 00       	mov    ecx,0x2
c0006886:	8d 54 24 14          	lea    edx,[esp+0x14]
c000688a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006891:	e8 3d be ff ff       	call   c00026d3 <mount_volume>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 b5 02 00 00    	jne    c0006b53 <f_rename+0x2e8>
c000689e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a2:	83 ec 0c             	sub    esp,0xc
c00068a5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068a9:	68 60 04 00 00       	push   0x460
c00068ae:	e8 c3 1b 00 00       	call   c0008476 <ff_memalloc>
c00068b3:	83 c4 10             	add    esp,0x10
c00068b6:	89 c3                	mov    ebx,eax
c00068b8:	b8 11 00 00 00       	mov    eax,0x11
c00068bd:	85 db                	test   ebx,ebx
c00068bf:	0f 84 8e 02 00 00    	je     c0006b53 <f_rename+0x2e8>
c00068c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068cf:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068d2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068d5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 64 e5 ff ff       	call   c0004e49 <follow_path>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	0f 85 52 02 00 00    	jne    c0006b3f <f_rename+0x2d4>
c00068ed:	b8 06 00 00 00       	mov    eax,0x6
c00068f2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068fa:	0f 85 3f 02 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006904:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006907:	0f 85 05 01 00 00    	jne    c0006a12 <f_rename+0x1a7>
c000690d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006910:	b9 40 00 00 00       	mov    ecx,0x40
c0006915:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006919:	e8 a4 b3 ff ff       	call   c0001cc2 <mem_cpy>
c000691e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006923:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006927:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000692e:	e8 8f b3 ff ff       	call   c0001cc2 <mem_cpy>
c0006933:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000693a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006941:	e8 03 e5 ff ff       	call   c0004e49 <follow_path>
c0006946:	85 c0                	test   eax,eax
c0006948:	75 29                	jne    c0006973 <f_rename+0x108>
c000694a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000694e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006955:	74 0a                	je     c0006961 <f_rename+0xf6>
c0006957:	b8 08 00 00 00       	mov    eax,0x8
c000695c:	e9 de 01 00 00       	jmp    c0006b3f <f_rename+0x2d4>
c0006961:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006968:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000696f:	75 e6                	jne    c0006957 <f_rename+0xec>
c0006971:	eb 09                	jmp    c000697c <f_rename+0x111>
c0006973:	83 f8 04             	cmp    eax,0x4
c0006976:	0f 85 c3 01 00 00    	jne    c0006b3f <f_rename+0x2d4>
c000697c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006983:	e8 42 d9 ff ff       	call   c00042ca <dir_register>
c0006988:	85 c0                	test   eax,eax
c000698a:	0f 85 af 01 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006994:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006997:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000699a:	89 c5                	mov    ebp,eax
c000699c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000699f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069a3:	8d 46 24             	lea    eax,[esi+0x24]
c00069a6:	e8 98 b2 ff ff       	call   c0001c43 <ld_word>
c00069ab:	b9 40 00 00 00       	mov    ecx,0x40
c00069b0:	89 c7                	mov    edi,eax
c00069b2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069b6:	89 f0                	mov    eax,esi
c00069b8:	e8 05 b3 ff ff       	call   c0001cc2 <mem_cpy>
c00069bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069c1:	89 e9                	mov    ecx,ebp
c00069c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069c9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069d7:	0f b7 d7             	movzx  edx,di
c00069da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069dd:	83 c0 24             	add    eax,0x24
c00069e0:	e8 d0 b2 ff ff       	call   c0001cb5 <st_word>
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069ec:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069ef:	a8 10                	test   al,0x10
c00069f1:	75 06                	jne    c00069f9 <f_rename+0x18e>
c00069f3:	83 c8 20             	or     eax,0x20
c00069f6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069f9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a00:	e8 9c d1 ff ff       	call   c0003ba1 <store_xdir>
c0006a05:	85 c0                	test   eax,eax
c0006a07:	0f 84 1c 01 00 00    	je     c0006b29 <f_rename+0x2be>
c0006a0d:	e9 2d 01 00 00       	jmp    c0006b3f <f_rename+0x2d4>
c0006a12:	b9 20 00 00 00       	mov    ecx,0x20
c0006a17:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a22:	e8 9b b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006a27:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a2c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a30:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a37:	e8 86 b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006a3c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a43:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a4a:	e8 fa e3 ff ff       	call   c0004e49 <follow_path>
c0006a4f:	85 c0                	test   eax,eax
c0006a51:	75 27                	jne    c0006a7a <f_rename+0x20f>
c0006a53:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a57:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a5e:	0f 85 f3 fe ff ff    	jne    c0006957 <f_rename+0xec>
c0006a64:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a6b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a72:	0f 85 df fe ff ff    	jne    c0006957 <f_rename+0xec>
c0006a78:	eb 09                	jmp    c0006a83 <f_rename+0x218>
c0006a7a:	83 f8 04             	cmp    eax,0x4
c0006a7d:	0f 85 bc 00 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006a83:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a8a:	e8 3b d8 ff ff       	call   c00042ca <dir_register>
c0006a8f:	85 c0                	test   eax,eax
c0006a91:	0f 85 a8 00 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006a97:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a9e:	b9 13 00 00 00       	mov    ecx,0x13
c0006aa3:	8d 46 0d             	lea    eax,[esi+0xd]
c0006aa6:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aaa:	e8 13 b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006aaf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ab3:	a8 10                	test   al,0x10
c0006ab5:	75 03                	jne    c0006aba <f_rename+0x24f>
c0006ab7:	83 c8 20             	or     eax,0x20
c0006aba:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006abd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ac9:	74 5e                	je     c0006b29 <f_rename+0x2be>
c0006acb:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ad2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006ad6:	74 51                	je     c0006b29 <f_rename+0x2be>
c0006ad8:	89 f2                	mov    edx,esi
c0006ada:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ade:	8a 07                	mov    al,BYTE PTR [edi]
c0006ae0:	e8 d9 e2 ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006ae5:	89 c2                	mov    edx,eax
c0006ae7:	89 f8                	mov    eax,edi
c0006ae9:	e8 ee b3 ff ff       	call   c0001edc <clst2sect>
c0006aee:	89 c6                	mov    esi,eax
c0006af0:	89 d1                	mov    ecx,edx
c0006af2:	b8 02 00 00 00       	mov    eax,0x2
c0006af7:	09 f2                	or     edx,esi
c0006af9:	74 44                	je     c0006b3f <f_rename+0x2d4>
c0006afb:	89 f2                	mov    edx,esi
c0006afd:	89 f8                	mov    eax,edi
c0006aff:	e8 1d b9 ff ff       	call   c0002421 <move_window>
c0006b04:	85 c0                	test   eax,eax
c0006b06:	75 37                	jne    c0006b3f <f_rename+0x2d4>
c0006b08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b0c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b10:	75 17                	jne    c0006b29 <f_rename+0x2be>
c0006b12:	8d 50 74             	lea    edx,[eax+0x74]
c0006b15:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b1c:	e8 c6 e2 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006b21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b25:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b29:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b2d:	e8 f4 d0 ff ff       	call   c0003c26 <dir_remove>
c0006b32:	85 c0                	test   eax,eax
c0006b34:	75 09                	jne    c0006b3f <f_rename+0x2d4>
c0006b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b3a:	e8 0d da ff ff       	call   c000454c <sync_fs>
c0006b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b43:	83 ec 0c             	sub    esp,0xc
c0006b46:	53                   	push   ebx
c0006b47:	e8 40 19 00 00       	call   c000848c <ff_memfree>
c0006b4c:	83 c4 10             	add    esp,0x10
c0006b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b53:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b59:	5b                   	pop    ebx
c0006b5a:	5e                   	pop    esi
c0006b5b:	5f                   	pop    edi
c0006b5c:	5d                   	pop    ebp
c0006b5d:	c3                   	ret    

c0006b5e <f_chmod>:
c0006b5e:	57                   	push   edi
c0006b5f:	b9 02 00 00 00       	mov    ecx,0x2
c0006b64:	56                   	push   esi
c0006b65:	53                   	push   ebx
c0006b66:	83 ec 60             	sub    esp,0x60
c0006b69:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b6d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b71:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b75:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b79:	e8 55 bb ff ff       	call   c00026d3 <mount_volume>
c0006b7e:	85 c0                	test   eax,eax
c0006b80:	0f 85 af 00 00 00    	jne    c0006c35 <f_chmod+0xd7>
c0006b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8a:	83 ec 0c             	sub    esp,0xc
c0006b8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b91:	68 60 04 00 00       	push   0x460
c0006b96:	e8 db 18 00 00       	call   c0008476 <ff_memalloc>
c0006b9b:	83 c4 10             	add    esp,0x10
c0006b9e:	89 c6                	mov    esi,eax
c0006ba0:	b8 11 00 00 00       	mov    eax,0x11
c0006ba5:	85 f6                	test   esi,esi
c0006ba7:	0f 84 88 00 00 00    	je     c0006c35 <f_chmod+0xd7>
c0006bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bb7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc5:	e8 7f e2 ff ff       	call   c0004e49 <follow_path>
c0006bca:	85 c0                	test   eax,eax
c0006bcc:	75 53                	jne    c0006c21 <f_chmod+0xc3>
c0006bce:	b8 06 00 00 00       	mov    eax,0x6
c0006bd3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd8:	75 47                	jne    c0006c21 <f_chmod+0xc3>
c0006bda:	89 f9                	mov    ecx,edi
c0006bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be0:	83 e1 27             	and    ecx,0x27
c0006be3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006be6:	75 1d                	jne    c0006c05 <f_chmod+0xa7>
c0006be8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006beb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bee:	21 cb                	and    ebx,ecx
c0006bf0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bf3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bfa:	e8 a2 cf ff ff       	call   c0003ba1 <store_xdir>
c0006bff:	85 c0                	test   eax,eax
c0006c01:	75 1e                	jne    c0006c21 <f_chmod+0xc3>
c0006c03:	eb 13                	jmp    c0006c18 <f_chmod+0xba>
c0006c05:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c09:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c11:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c14:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1c:	e8 2b d9 ff ff       	call   c000454c <sync_fs>
c0006c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c25:	83 ec 0c             	sub    esp,0xc
c0006c28:	56                   	push   esi
c0006c29:	e8 5e 18 00 00       	call   c000848c <ff_memfree>
c0006c2e:	83 c4 10             	add    esp,0x10
c0006c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c35:	83 c4 60             	add    esp,0x60
c0006c38:	5b                   	pop    ebx
c0006c39:	5e                   	pop    esi
c0006c3a:	5f                   	pop    edi
c0006c3b:	c3                   	ret    

c0006c3c <f_utime>:
c0006c3c:	56                   	push   esi
c0006c3d:	b9 02 00 00 00       	mov    ecx,0x2
c0006c42:	53                   	push   ebx
c0006c43:	83 ec 64             	sub    esp,0x64
c0006c46:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c4a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c52:	e8 7c ba ff ff       	call   c00026d3 <mount_volume>
c0006c57:	85 c0                	test   eax,eax
c0006c59:	0f 85 b5 00 00 00    	jne    c0006d14 <f_utime+0xd8>
c0006c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c63:	83 ec 0c             	sub    esp,0xc
c0006c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c6a:	68 60 04 00 00       	push   0x460
c0006c6f:	e8 02 18 00 00       	call   c0008476 <ff_memalloc>
c0006c74:	83 c4 10             	add    esp,0x10
c0006c77:	89 c3                	mov    ebx,eax
c0006c79:	b8 11 00 00 00       	mov    eax,0x11
c0006c7e:	85 db                	test   ebx,ebx
c0006c80:	0f 84 8e 00 00 00    	je     c0006d14 <f_utime+0xd8>
c0006c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c90:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c93:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c96:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9e:	e8 a6 e1 ff ff       	call   c0004e49 <follow_path>
c0006ca3:	85 c0                	test   eax,eax
c0006ca5:	75 59                	jne    c0006d00 <f_utime+0xc4>
c0006ca7:	b8 06 00 00 00       	mov    eax,0x6
c0006cac:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cb1:	75 4d                	jne    c0006d00 <f_utime+0xc4>
c0006cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cbb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cbf:	c1 e2 10             	shl    edx,0x10
c0006cc2:	09 ca                	or     edx,ecx
c0006cc4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cc7:	75 1a                	jne    c0006ce3 <f_utime+0xa7>
c0006cc9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ccc:	83 c0 0c             	add    eax,0xc
c0006ccf:	e8 e5 af ff ff       	call   c0001cb9 <st_dword>
c0006cd4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cd8:	e8 c4 ce ff ff       	call   c0003ba1 <store_xdir>
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	75 1f                	jne    c0006d00 <f_utime+0xc4>
c0006ce1:	eb 14                	jmp    c0006cf7 <f_utime+0xbb>
c0006ce3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ce7:	83 c0 16             	add    eax,0x16
c0006cea:	e8 ca af ff ff       	call   c0001cb9 <st_dword>
c0006cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cfb:	e8 4c d8 ff ff       	call   c000454c <sync_fs>
c0006d00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d04:	83 ec 0c             	sub    esp,0xc
c0006d07:	53                   	push   ebx
c0006d08:	e8 7f 17 00 00       	call   c000848c <ff_memfree>
c0006d0d:	83 c4 10             	add    esp,0x10
c0006d10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d14:	83 c4 64             	add    esp,0x64
c0006d17:	5b                   	pop    ebx
c0006d18:	5e                   	pop    esi
c0006d19:	c3                   	ret    

c0006d1a <f_getlabel>:
c0006d1a:	55                   	push   ebp
c0006d1b:	31 c9                	xor    ecx,ecx
c0006d1d:	57                   	push   edi
c0006d1e:	56                   	push   esi
c0006d1f:	53                   	push   ebx
c0006d20:	83 ec 6c             	sub    esp,0x6c
c0006d23:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d27:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2e:	e8 a0 b9 ff ff       	call   c00026d3 <mount_volume>
c0006d33:	89 c6                	mov    esi,eax
c0006d35:	85 c0                	test   eax,eax
c0006d37:	0f 85 c1 01 00 00    	jne    c0006efe <f_getlabel+0x1e4>
c0006d3d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d45:	0f 84 5f 01 00 00    	je     c0006eaa <f_getlabel+0x190>
c0006d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4f:	31 d2                	xor    edx,edx
c0006d51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d55:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d61:	e8 39 c4 ff ff       	call   c000319f <dir_sdi>
c0006d66:	85 c0                	test   eax,eax
c0006d68:	0f 85 2d 01 00 00    	jne    c0006e9b <f_getlabel+0x181>
c0006d6e:	ba 01 00 00 00       	mov    edx,0x1
c0006d73:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d77:	e8 33 cc ff ff       	call   c00039af <dir_read>
c0006d7c:	85 c0                	test   eax,eax
c0006d7e:	0f 85 17 01 00 00    	jne    c0006e9b <f_getlabel+0x181>
c0006d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d88:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d8b:	74 09                	je     c0006d96 <f_getlabel+0x7c>
c0006d8d:	31 db                	xor    ebx,ebx
c0006d8f:	31 c9                	xor    ecx,ecx
c0006d91:	e9 c8 00 00 00       	jmp    c0006e5e <f_getlabel+0x144>
c0006d96:	31 ed                	xor    ebp,ebp
c0006d98:	31 db                	xor    ebx,ebx
c0006d9a:	31 ff                	xor    edi,edi
c0006d9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006da0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006da4:	39 fa                	cmp    edx,edi
c0006da6:	76 4b                	jbe    c0006df3 <f_getlabel+0xd9>
c0006da8:	47                   	inc    edi
c0006da9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dac:	01 d0                	add    eax,edx
c0006dae:	e8 90 ae ff ff       	call   c0001c43 <ld_word>
c0006db3:	66 85 ed             	test   bp,bp
c0006db6:	75 0d                	jne    c0006dc5 <f_getlabel+0xab>
c0006db8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dbe:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dc3:	76 28                	jbe    c0006ded <f_getlabel+0xd3>
c0006dc5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dcc:	89 e9                	mov    ecx,ebp
c0006dce:	01 da                	add    edx,ebx
c0006dd0:	c1 e1 10             	shl    ecx,0x10
c0006dd3:	0f b7 c0             	movzx  eax,ax
c0006dd6:	09 c8                	or     eax,ecx
c0006dd8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ddd:	e8 01 b0 ff ff       	call   c0001de3 <put_utf>
c0006de2:	84 c0                	test   al,al
c0006de4:	74 0b                	je     c0006df1 <f_getlabel+0xd7>
c0006de6:	0f b6 c0             	movzx  eax,al
c0006de9:	01 c3                	add    ebx,eax
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	89 c5                	mov    ebp,eax
c0006def:	eb ab                	jmp    c0006d9c <f_getlabel+0x82>
c0006df1:	31 db                	xor    ebx,ebx
c0006df3:	66 85 ed             	test   bp,bp
c0006df6:	74 02                	je     c0006dfa <f_getlabel+0xe0>
c0006df8:	31 db                	xor    ebx,ebx
c0006dfa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e01:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e05:	e9 a0 00 00 00       	jmp    c0006eaa <f_getlabel+0x190>
c0006e0a:	83 ff 0b             	cmp    edi,0xb
c0006e0d:	74 11                	je     c0006e20 <f_getlabel+0x106>
c0006e0f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e18:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e1b:	c1 e0 08             	shl    eax,0x8
c0006e1e:	09 c2                	or     edx,eax
c0006e20:	0f b7 d2             	movzx  edx,dx
c0006e23:	50                   	push   eax
c0006e24:	50                   	push   eax
c0006e25:	68 b5 01 00 00       	push   0x1b5
c0006e2a:	52                   	push   edx
c0006e2b:	e8 03 17 00 00       	call   c0008533 <ff_oem2uni>
c0006e30:	83 c4 10             	add    esp,0x10
c0006e33:	66 85 c0             	test   ax,ax
c0006e36:	74 46                	je     c0006e7e <f_getlabel+0x164>
c0006e38:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e3f:	0f b7 c0             	movzx  eax,ax
c0006e42:	01 da                	add    edx,ebx
c0006e44:	b9 04 00 00 00       	mov    ecx,0x4
c0006e49:	e8 95 af ff ff       	call   c0001de3 <put_utf>
c0006e4e:	84 c0                	test   al,al
c0006e50:	74 2c                	je     c0006e7e <f_getlabel+0x164>
c0006e52:	0f b6 c0             	movzx  eax,al
c0006e55:	01 c3                	add    ebx,eax
c0006e57:	83 ff 0b             	cmp    edi,0xb
c0006e5a:	74 24                	je     c0006e80 <f_getlabel+0x166>
c0006e5c:	89 f9                	mov    ecx,edi
c0006e5e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e62:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e6a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e73:	e8 9f ae ff ff       	call   c0001d17 <dbc_1st>
c0006e78:	85 c0                	test   eax,eax
c0006e7a:	74 a4                	je     c0006e20 <f_getlabel+0x106>
c0006e7c:	eb 8c                	jmp    c0006e0a <f_getlabel+0xf0>
c0006e7e:	31 db                	xor    ebx,ebx
c0006e80:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e87:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e8a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e91:	74 17                	je     c0006eaa <f_getlabel+0x190>
c0006e93:	4b                   	dec    ebx
c0006e94:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e97:	74 ee                	je     c0006e87 <f_getlabel+0x16d>
c0006e99:	eb 0f                	jmp    c0006eaa <f_getlabel+0x190>
c0006e9b:	83 f8 04             	cmp    eax,0x4
c0006e9e:	75 5c                	jne    c0006efc <f_getlabel+0x1e2>
c0006ea0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ea7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eaa:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eb2:	74 4a                	je     c0006efe <f_getlabel+0x1e4>
c0006eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ebb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ebe:	e8 5e b5 ff ff       	call   c0002421 <move_window>
c0006ec3:	89 c6                	mov    esi,eax
c0006ec5:	85 c0                	test   eax,eax
c0006ec7:	75 35                	jne    c0006efe <f_getlabel+0x1e4>
c0006ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecd:	b8 43 00 00 00       	mov    eax,0x43
c0006ed2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ed4:	80 f9 03             	cmp    cl,0x3
c0006ed7:	74 0f                	je     c0006ee8 <f_getlabel+0x1ce>
c0006ed9:	31 c0                	xor    eax,eax
c0006edb:	80 f9 04             	cmp    cl,0x4
c0006ede:	0f 94 c0             	sete   al
c0006ee1:	48                   	dec    eax
c0006ee2:	83 e0 c3             	and    eax,0xffffffc3
c0006ee5:	83 c0 64             	add    eax,0x64
c0006ee8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006eec:	e8 5f ad ff ff       	call   c0001c50 <ld_dword>
c0006ef1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006ef8:	89 07                	mov    DWORD PTR [edi],eax
c0006efa:	eb 02                	jmp    c0006efe <f_getlabel+0x1e4>
c0006efc:	89 c6                	mov    esi,eax
c0006efe:	83 c4 6c             	add    esp,0x6c
c0006f01:	89 f0                	mov    eax,esi
c0006f03:	5b                   	pop    ebx
c0006f04:	5e                   	pop    esi
c0006f05:	5f                   	pop    edi
c0006f06:	5d                   	pop    ebp
c0006f07:	c3                   	ret    

c0006f08 <f_setlabel>:
c0006f08:	56                   	push   esi
c0006f09:	b9 02 00 00 00       	mov    ecx,0x2
c0006f0e:	53                   	push   ebx
c0006f0f:	83 ec 74             	sub    esp,0x74
c0006f12:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f16:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f1d:	e8 b1 b7 ff ff       	call   c00026d3 <mount_volume>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	85 c0                	test   eax,eax
c0006f26:	0f 85 41 02 00 00    	jne    c000716d <f_setlabel+0x265>
c0006f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f30:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f33:	0f 85 8e 00 00 00    	jne    c0006fc7 <f_setlabel+0xbf>
c0006f39:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3e:	31 d2                	xor    edx,edx
c0006f40:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f44:	31 db                	xor    ebx,ebx
c0006f46:	e8 8c ad ff ff       	call   c0001cd7 <mem_set>
c0006f4b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f52:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f55:	0f 86 0a 01 00 00    	jbe    c0007065 <f_setlabel+0x15d>
c0006f5b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f62:	e8 b6 ad ff ff       	call   c0001d1d <tchar2uni>
c0006f67:	89 c6                	mov    esi,eax
c0006f69:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f6e:	76 2a                	jbe    c0006f9a <f_setlabel+0x92>
c0006f70:	83 f8 ff             	cmp    eax,0xffffffff
c0006f73:	74 05                	je     c0006f7a <f_setlabel+0x72>
c0006f75:	83 fb 09             	cmp    ebx,0x9
c0006f78:	76 0a                	jbe    c0006f84 <f_setlabel+0x7c>
c0006f7a:	be 06 00 00 00       	mov    esi,0x6
c0006f7f:	e9 e9 01 00 00       	jmp    c000716d <f_setlabel+0x265>
c0006f84:	89 c2                	mov    edx,eax
c0006f86:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f8a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f8d:	c1 ea 10             	shr    edx,0x10
c0006f90:	01 c8                	add    eax,ecx
c0006f92:	43                   	inc    ebx
c0006f93:	e8 1d ad ff ff       	call   c0001cb5 <st_word>
c0006f98:	eb 04                	jmp    c0006f9e <f_setlabel+0x96>
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	74 dc                	je     c0006f7a <f_setlabel+0x72>
c0006f9e:	89 f2                	mov    edx,esi
c0006fa0:	b8 b7 9d 02 c0       	mov    eax,0xc0029db7
c0006fa5:	e8 5b ad ff ff       	call   c0001d05 <chk_chr>
c0006faa:	85 c0                	test   eax,eax
c0006fac:	75 cc                	jne    c0006f7a <f_setlabel+0x72>
c0006fae:	83 fb 0a             	cmp    ebx,0xa
c0006fb1:	77 c7                	ja     c0006f7a <f_setlabel+0x72>
c0006fb3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fba:	0f b7 d6             	movzx  edx,si
c0006fbd:	01 c8                	add    eax,ecx
c0006fbf:	43                   	inc    ebx
c0006fc0:	e8 f0 ac ff ff       	call   c0001cb5 <st_word>
c0006fc5:	eb 84                	jmp    c0006f4b <f_setlabel+0x43>
c0006fc7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fcc:	ba 20 00 00 00       	mov    edx,0x20
c0006fd1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fd5:	31 db                	xor    ebx,ebx
c0006fd7:	e8 fb ac ff ff       	call   c0001cd7 <mem_set>
c0006fdc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fe3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fe6:	76 60                	jbe    c0007048 <f_setlabel+0x140>
c0006fe8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fef:	e8 29 ad ff ff       	call   c0001d1d <tchar2uni>
c0006ff4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006ff9:	0f 87 7b ff ff ff    	ja     c0006f7a <f_setlabel+0x72>
c0006fff:	83 ec 0c             	sub    esp,0xc
c0007002:	50                   	push   eax
c0007003:	e8 97 15 00 00       	call   c000859f <ff_wtoupper>
c0007008:	5a                   	pop    edx
c0007009:	59                   	pop    ecx
c000700a:	68 b5 01 00 00       	push   0x1b5
c000700f:	50                   	push   eax
c0007010:	e8 8e 14 00 00       	call   c00084a3 <ff_uni2oem>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	89 c6                	mov    esi,eax
c000701a:	66 85 c0             	test   ax,ax
c000701d:	0f 84 57 ff ff ff    	je     c0006f7a <f_setlabel+0x72>
c0007023:	0f b7 d0             	movzx  edx,ax
c0007026:	b8 b0 9d 02 c0       	mov    eax,0xc0029db0
c000702b:	e8 d5 ac ff ff       	call   c0001d05 <chk_chr>
c0007030:	85 c0                	test   eax,eax
c0007032:	0f 85 42 ff ff ff    	jne    c0006f7a <f_setlabel+0x72>
c0007038:	66 81 fe ff 00       	cmp    si,0xff
c000703d:	0f 87 14 01 00 00    	ja     c0007157 <f_setlabel+0x24f>
c0007043:	e9 fa 00 00 00       	jmp    c0007142 <f_setlabel+0x23a>
c0007048:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000704d:	0f 84 27 ff ff ff    	je     c0006f7a <f_setlabel+0x72>
c0007053:	85 db                	test   ebx,ebx
c0007055:	74 0e                	je     c0007065 <f_setlabel+0x15d>
c0007057:	8d 43 ff             	lea    eax,[ebx-0x1]
c000705a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000705f:	75 04                	jne    c0007065 <f_setlabel+0x15d>
c0007061:	89 c3                	mov    ebx,eax
c0007063:	eb ee                	jmp    c0007053 <f_setlabel+0x14b>
c0007065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007069:	31 d2                	xor    edx,edx
c000706b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000706f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007077:	8d 44 24 24          	lea    eax,[esp+0x24]
c000707b:	e8 1f c1 ff ff       	call   c000319f <dir_sdi>
c0007080:	89 c6                	mov    esi,eax
c0007082:	85 c0                	test   eax,eax
c0007084:	0f 85 e3 00 00 00    	jne    c000716d <f_setlabel+0x265>
c000708a:	ba 01 00 00 00       	mov    edx,0x1
c000708f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007093:	e8 17 c9 ff ff       	call   c00039af <dir_read>
c0007098:	85 c0                	test   eax,eax
c000709a:	75 21                	jne    c00070bd <f_setlabel+0x1b5>
c000709c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070a7:	74 5d                	je     c0007106 <f_setlabel+0x1fe>
c00070a9:	85 db                	test   ebx,ebx
c00070ab:	74 0b                	je     c00070b8 <f_setlabel+0x1b0>
c00070ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00070b2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070b6:	eb 70                	jmp    c0007128 <f_setlabel+0x220>
c00070b8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070bb:	eb 70                	jmp    c000712d <f_setlabel+0x225>
c00070bd:	83 f8 04             	cmp    eax,0x4
c00070c0:	75 7c                	jne    c000713e <f_setlabel+0x236>
c00070c2:	85 db                	test   ebx,ebx
c00070c4:	0f 84 a3 00 00 00    	je     c000716d <f_setlabel+0x265>
c00070ca:	ba 01 00 00 00       	mov    edx,0x1
c00070cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d3:	e8 51 ca ff ff       	call   c0003b29 <dir_alloc>
c00070d8:	89 c6                	mov    esi,eax
c00070da:	85 c0                	test   eax,eax
c00070dc:	0f 85 8b 00 00 00    	jne    c000716d <f_setlabel+0x265>
c00070e2:	31 d2                	xor    edx,edx
c00070e4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e8:	b9 20 00 00 00       	mov    ecx,0x20
c00070ed:	e8 e5 ab ff ff       	call   c0001cd7 <mem_set>
c00070f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070f6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070fd:	75 18                	jne    c0007117 <f_setlabel+0x20f>
c00070ff:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007109:	b9 16 00 00 00       	mov    ecx,0x16
c000710e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007112:	83 c0 02             	add    eax,0x2
c0007115:	eb 9b                	jmp    c00070b2 <f_setlabel+0x1aa>
c0007117:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000711b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007120:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007124:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007128:	e8 95 ab ff ff       	call   c0001cc2 <mem_cpy>
c000712d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007131:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007135:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007139:	e8 0e d4 ff ff       	call   c000454c <sync_fs>
c000713e:	89 c6                	mov    esi,eax
c0007140:	eb 2b                	jmp    c000716d <f_setlabel+0x265>
c0007142:	83 fb 0a             	cmp    ebx,0xa
c0007145:	0f 87 2f fe ff ff    	ja     c0006f7a <f_setlabel+0x72>
c000714b:	89 f0                	mov    eax,esi
c000714d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007151:	43                   	inc    ebx
c0007152:	e9 85 fe ff ff       	jmp    c0006fdc <f_setlabel+0xd4>
c0007157:	83 fb 09             	cmp    ebx,0x9
c000715a:	0f 87 1a fe ff ff    	ja     c0006f7a <f_setlabel+0x72>
c0007160:	89 f0                	mov    eax,esi
c0007162:	66 c1 e8 08          	shr    ax,0x8
c0007166:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716a:	43                   	inc    ebx
c000716b:	eb de                	jmp    c000714b <f_setlabel+0x243>
c000716d:	89 f0                	mov    eax,esi
c000716f:	83 c4 74             	add    esp,0x74
c0007172:	5b                   	pop    ebx
c0007173:	5e                   	pop    esi
c0007174:	c3                   	ret    

c0007175 <f_forward>:
c0007175:	55                   	push   ebp
c0007176:	57                   	push   edi
c0007177:	56                   	push   esi
c0007178:	53                   	push   ebx
c0007179:	83 ec 2c             	sub    esp,0x2c
c000717c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007180:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007184:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000718a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000718e:	89 d8                	mov    eax,ebx
c0007190:	e8 b1 b1 ff ff       	call   c0002346 <validate>
c0007195:	89 c5                	mov    ebp,eax
c0007197:	85 c0                	test   eax,eax
c0007199:	0f 85 aa 01 00 00    	jne    c0007349 <f_forward+0x1d4>
c000719f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071a3:	85 ed                	test   ebp,ebp
c00071a5:	0f 85 9e 01 00 00    	jne    c0007349 <f_forward+0x1d4>
c00071ab:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071af:	0f 84 8f 01 00 00    	je     c0007344 <f_forward+0x1cf>
c00071b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071b8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071bb:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071be:	bf 00 00 00 00       	mov    edi,0x0
c00071c3:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071c6:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ca:	89 d1                	mov    ecx,edx
c00071cc:	19 f9                	sbb    ecx,edi
c00071ce:	0f 83 cf 00 00 00    	jae    c00072a3 <f_forward+0x12e>
c00071d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071d8:	e9 c6 00 00 00       	jmp    c00072a3 <f_forward+0x12e>
c00071dd:	50                   	push   eax
c00071de:	50                   	push   eax
c00071df:	6a 00                	push   0x0
c00071e1:	6a 00                	push   0x0
c00071e3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	0f 84 57 01 00 00    	je     c0007349 <f_forward+0x1d4>
c00071f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071f9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071fc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007200:	89 d7                	mov    edi,edx
c0007202:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007205:	89 c6                	mov    esi,eax
c0007207:	0f ac fe 09          	shrd   esi,edi,0x9
c000720b:	21 ce                	and    esi,ecx
c000720d:	89 c1                	mov    ecx,eax
c000720f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007215:	0f 84 98 00 00 00    	je     c00072b3 <f_forward+0x13e>
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007222:	89 c8                	mov    eax,ecx
c0007224:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007228:	e8 af ac ff ff       	call   c0001edc <clst2sect>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	0f 84 9e 00 00 00    	je     c00072d5 <f_forward+0x160>
c0007237:	31 ff                	xor    edi,edi
c0007239:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000723c:	01 c6                	add    esi,eax
c000723e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007242:	11 d7                	adc    edi,edx
c0007244:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007247:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000724a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000724e:	39 fa                	cmp    edx,edi
c0007250:	0f 85 a2 00 00 00    	jne    c00072f8 <f_forward+0x183>
c0007256:	39 f0                	cmp    eax,esi
c0007258:	0f 85 9a 00 00 00    	jne    c00072f8 <f_forward+0x183>
c000725e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007261:	ba 00 02 00 00       	mov    edx,0x200
c0007266:	25 ff 01 00 00       	and    eax,0x1ff
c000726b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000726f:	29 c2                	sub    edx,eax
c0007271:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007274:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007277:	39 d1                	cmp    ecx,edx
c0007279:	76 02                	jbe    c000727d <f_forward+0x108>
c000727b:	89 d1                	mov    ecx,edx
c000727d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007280:	52                   	push   edx
c0007281:	01 c6                	add    esi,eax
c0007283:	52                   	push   edx
c0007284:	51                   	push   ecx
c0007285:	56                   	push   esi
c0007286:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000728a:	83 c4 10             	add    esp,0x10
c000728d:	85 c0                	test   eax,eax
c000728f:	74 44                	je     c00072d5 <f_forward+0x160>
c0007291:	31 ff                	xor    edi,edi
c0007293:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007296:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007299:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000729d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072a1:	01 07                	add    DWORD PTR [edi],eax
c00072a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072a8:	0f 85 2f ff ff ff    	jne    c00071dd <f_forward+0x68>
c00072ae:	e9 96 00 00 00       	jmp    c0007349 <f_forward+0x1d4>
c00072b3:	85 f6                	test   esi,esi
c00072b5:	0f 85 60 ff ff ff    	jne    c000721b <f_forward+0xa6>
c00072bb:	89 d7                	mov    edi,edx
c00072bd:	09 c7                	or     edi,eax
c00072bf:	75 05                	jne    c00072c6 <f_forward+0x151>
c00072c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072c4:	eb 0a                	jmp    c00072d0 <f_forward+0x15b>
c00072c6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072c9:	89 d8                	mov    eax,ebx
c00072cb:	e8 d9 bc ff ff       	call   c0002fa9 <get_fat>
c00072d0:	83 f8 01             	cmp    eax,0x1
c00072d3:	77 0b                	ja     c00072e0 <f_forward+0x16b>
c00072d5:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072d9:	bd 02 00 00 00       	mov    ebp,0x2
c00072de:	eb 69                	jmp    c0007349 <f_forward+0x1d4>
c00072e0:	83 f8 ff             	cmp    eax,0xffffffff
c00072e3:	75 0b                	jne    c00072f0 <f_forward+0x17b>
c00072e5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072e9:	bd 01 00 00 00       	mov    ebp,0x1
c00072ee:	eb 59                	jmp    c0007349 <f_forward+0x1d4>
c00072f0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072f3:	e9 23 ff ff ff       	jmp    c000721b <f_forward+0xa6>
c00072f8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072fc:	79 20                	jns    c000731e <f_forward+0x1a9>
c00072fe:	83 ec 0c             	sub    esp,0xc
c0007301:	6a 01                	push   0x1
c0007303:	52                   	push   edx
c0007304:	50                   	push   eax
c0007305:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007309:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000730d:	50                   	push   eax
c000730e:	e8 fb a8 ff ff       	call   c0001c0e <disk_write>
c0007313:	83 c4 20             	add    esp,0x20
c0007316:	85 c0                	test   eax,eax
c0007318:	75 cb                	jne    c00072e5 <f_forward+0x170>
c000731a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000731e:	83 ec 0c             	sub    esp,0xc
c0007321:	6a 01                	push   0x1
c0007323:	57                   	push   edi
c0007324:	56                   	push   esi
c0007325:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007329:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000732d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007331:	50                   	push   eax
c0007332:	e8 c1 a8 ff ff       	call   c0001bf8 <disk_read>
c0007337:	83 c4 20             	add    esp,0x20
c000733a:	85 c0                	test   eax,eax
c000733c:	0f 84 1c ff ff ff    	je     c000725e <f_forward+0xe9>
c0007342:	eb a1                	jmp    c00072e5 <f_forward+0x170>
c0007344:	bd 07 00 00 00       	mov    ebp,0x7
c0007349:	83 c4 2c             	add    esp,0x2c
c000734c:	89 e8                	mov    eax,ebp
c000734e:	5b                   	pop    ebx
c000734f:	5e                   	pop    esi
c0007350:	5f                   	pop    edi
c0007351:	5d                   	pop    ebp
c0007352:	c3                   	ret    

c0007353 <f_mkfs>:
c0007353:	55                   	push   ebp
c0007354:	57                   	push   edi
c0007355:	56                   	push   esi
c0007356:	53                   	push   ebx
c0007357:	bb 0b 00 00 00       	mov    ebx,0xb
c000735c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007362:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007369:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007370:	e8 b0 ae ff ff       	call   c0002225 <get_ldnumber>
c0007375:	85 c0                	test   eax,eax
c0007377:	0f 88 ec 10 00 00    	js     c0008469 <f_mkfs+0x1116>
c000737d:	8b 14 85 00 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1100]
c0007384:	85 d2                	test   edx,edx
c0007386:	74 03                	je     c000738b <f_mkfs+0x38>
c0007388:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000738b:	85 f6                	test   esi,esi
c000738d:	75 05                	jne    c0007394 <f_mkfs+0x41>
c000738f:	be a0 9d 02 c0       	mov    esi,0xc0029da0
c0007394:	83 ec 0c             	sub    esp,0xc
c0007397:	0f b6 c0             	movzx  eax,al
c000739a:	bb 03 00 00 00       	mov    ebx,0x3
c000739f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a7:	e8 49 a8 ff ff       	call   c0001bf5 <disk_initialize>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	a8 01                	test   al,0x1
c00073b1:	0f 85 b2 10 00 00    	jne    c0008469 <f_mkfs+0x1116>
c00073b7:	bb 0a 00 00 00       	mov    ebx,0xa
c00073bc:	a8 04                	test   al,0x4
c00073be:	0f 85 a5 10 00 00    	jne    c0008469 <f_mkfs+0x1116>
c00073c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073c7:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073cb:	85 c0                	test   eax,eax
c00073cd:	75 20                	jne    c00073ef <f_mkfs+0x9c>
c00073cf:	51                   	push   ecx
c00073d0:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073d4:	50                   	push   eax
c00073d5:	6a 03                	push   0x3
c00073d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073db:	e8 44 a8 ff ff       	call   c0001c24 <disk_ioctl>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 c0                	test   eax,eax
c00073e5:	74 08                	je     c00073ef <f_mkfs+0x9c>
c00073e7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ef:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073f3:	8d 42 ff             	lea    eax,[edx-0x1]
c00073f6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073fb:	77 04                	ja     c0007401 <f_mkfs+0xae>
c00073fd:	85 c2                	test   edx,eax
c00073ff:	74 08                	je     c0007409 <f_mkfs+0xb6>
c0007401:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007409:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000740c:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007410:	48                   	dec    eax
c0007411:	3c 01                	cmp    al,0x1
c0007413:	76 05                	jbe    c000741a <f_mkfs+0xc7>
c0007415:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000741a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000741d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007421:	48                   	dec    eax
c0007422:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007427:	77 07                	ja     c0007430 <f_mkfs+0xdd>
c0007429:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000742e:	74 08                	je     c0007438 <f_mkfs+0xe5>
c0007430:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007438:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000743b:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007441:	77 07                	ja     c000744a <f_mkfs+0xf7>
c0007443:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007446:	85 d8                	test   eax,ebx
c0007448:	74 02                	je     c000744c <f_mkfs+0xf9>
c000744a:	31 db                	xor    ebx,ebx
c000744c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007457:	77 0a                	ja     c0007463 <f_mkfs+0x110>
c0007459:	bb 11 00 00 00       	mov    ebx,0x11
c000745e:	e9 06 10 00 00       	jmp    c0008469 <f_mkfs+0x1116>
c0007463:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000746a:	8b 36                	mov    esi,DWORD PTR [esi]
c000746c:	85 ed                	test   ebp,ebp
c000746e:	75 1e                	jne    c000748e <f_mkfs+0x13b>
c0007470:	83 ec 0c             	sub    esp,0xc
c0007473:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000747a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000747f:	50                   	push   eax
c0007480:	e8 f1 0f 00 00       	call   c0008476 <ff_memalloc>
c0007485:	83 c4 10             	add    esp,0x10
c0007488:	89 c5                	mov    ebp,eax
c000748a:	85 c0                	test   eax,eax
c000748c:	74 cb                	je     c0007459 <f_mkfs+0x106>
c000748e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007496:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000749e:	52                   	push   edx
c000749f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074a3:	50                   	push   eax
c00074a4:	6a 01                	push   0x1
c00074a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074aa:	e8 75 a7 ff ff       	call   c0001c24 <disk_ioctl>
c00074af:	83 c4 10             	add    esp,0x10
c00074b2:	85 c0                	test   eax,eax
c00074b4:	0f 85 4a 0f 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c00074ba:	89 f1                	mov    ecx,esi
c00074bc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074c4:	83 e1 0f             	and    ecx,0xf
c00074c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074cf:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074d3:	83 e6 08             	and    esi,0x8
c00074d6:	75 56                	jne    c000752e <f_mkfs+0x1db>
c00074d8:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074dc:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074e0:	83 ff 00             	cmp    edi,0x0
c00074e3:	76 20                	jbe    c0007505 <f_mkfs+0x1b2>
c00074e5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ea:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074f2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074f8:	83 d7 ff             	adc    edi,0xffffffff
c00074fb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074ff:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007503:	eb 21                	jmp    c0007526 <f_mkfs+0x1d3>
c0007505:	ba 3f 00 00 00       	mov    edx,0x3f
c000750a:	39 f2                	cmp    edx,esi
c000750c:	19 f8                	sbb    eax,edi
c000750e:	73 1e                	jae    c000752e <f_mkfs+0x1db>
c0007510:	83 c6 c1             	add    esi,0xffffffc1
c0007513:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000751b:	83 d7 ff             	adc    edi,0xffffffff
c000751e:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007522:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007526:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000752e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007532:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007536:	89 04 24             	mov    DWORD PTR [esp],eax
c0007539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000753d:	31 c0                	xor    eax,eax
c000753f:	ba 7f 00 00 00       	mov    edx,0x7f
c0007544:	89 c7                	mov    edi,eax
c0007546:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007549:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000754d:	0f 83 c5 0a 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c0007553:	89 df                	mov    edi,ebx
c0007555:	c1 ef 09             	shr    edi,0x9
c0007558:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000755c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007563:	c1 ef 09             	shr    edi,0x9
c0007566:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000756b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000756f:	74 29                	je     c000759a <f_mkfs+0x247>
c0007571:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007577:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000757c:	0f 97 c2             	seta   dl
c000757f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007582:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007586:	0f 92 c0             	setb   al
c0007589:	08 c2                	or     dl,al
c000758b:	75 5b                	jne    c00075e8 <f_mkfs+0x295>
c000758d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007591:	83 e0 07             	and    eax,0x7
c0007594:	3c 04                	cmp    al,0x4
c0007596:	74 50                	je     c00075e8 <f_mkfs+0x295>
c0007598:	eb 1b                	jmp    c00075b5 <f_mkfs+0x262>
c000759a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000759f:	0f 87 73 0a 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c00075a5:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075ab:	76 08                	jbe    c00075b5 <f_mkfs+0x262>
c00075ad:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075b5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b9:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075bd:	83 e0 01             	and    eax,0x1
c00075c0:	80 e1 02             	and    cl,0x2
c00075c3:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075c7:	74 0d                	je     c00075d6 <f_mkfs+0x283>
c00075c9:	84 c0                	test   al,al
c00075cb:	0f 84 53 09 00 00    	je     c0007f24 <f_mkfs+0xbd1>
c00075d1:	e9 12 08 00 00       	jmp    c0007de8 <f_mkfs+0xa95>
c00075d6:	bb 13 00 00 00       	mov    ebx,0x13
c00075db:	84 c0                	test   al,al
c00075dd:	0f 85 05 08 00 00    	jne    c0007de8 <f_mkfs+0xa95>
c00075e3:	e9 39 0e 00 00       	jmp    c0008421 <f_mkfs+0x10ce>
c00075e8:	31 c0                	xor    eax,eax
c00075ea:	ba ff 0f 00 00       	mov    edx,0xfff
c00075ef:	89 c7                	mov    edi,eax
c00075f1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075f4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075f8:	0f 83 1a 0a 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c00075fe:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007604:	77 39                	ja     c000763f <f_mkfs+0x2ec>
c0007606:	ba ff ff 07 00       	mov    edx,0x7ffff
c000760b:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007613:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007616:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000761a:	73 08                	jae    c0007624 <f_mkfs+0x2d1>
c000761c:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007624:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007629:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000762c:	b8 00 00 00 00       	mov    eax,0x0
c0007631:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007635:	73 08                	jae    c000763f <f_mkfs+0x2ec>
c0007637:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000763f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007643:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007647:	83 c0 20             	add    eax,0x20
c000764a:	83 d2 00             	adc    edx,0x0
c000764d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007651:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007659:	31 d2                	xor    edx,edx
c000765b:	31 ff                	xor    edi,edi
c000765d:	52                   	push   edx
c000765e:	89 fb                	mov    ebx,edi
c0007660:	50                   	push   eax
c0007661:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007665:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007669:	e8 76 fc 01 00       	call   c00272e4 <__udivdi3>
c000766e:	83 c4 10             	add    esp,0x10
c0007671:	c1 e0 02             	shl    eax,0x2
c0007674:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007678:	05 07 02 00 00       	add    eax,0x207
c000767d:	89 f1                	mov    ecx,esi
c000767f:	c1 e8 09             	shr    eax,0x9
c0007682:	83 c1 ff             	add    ecx,0xffffffff
c0007685:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007689:	83 d3 ff             	adc    ebx,0xffffffff
c000768c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007690:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007694:	31 d2                	xor    edx,edx
c0007696:	01 c8                	add    eax,ecx
c0007698:	11 da                	adc    edx,ebx
c000769a:	89 c1                	mov    ecx,eax
c000769c:	f7 de                	neg    esi
c000769e:	89 d0                	mov    eax,edx
c00076a0:	83 d7 00             	adc    edi,0x0
c00076a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076a7:	f7 df                	neg    edi
c00076a9:	21 f1                	and    ecx,esi
c00076ab:	21 f8                	and    eax,edi
c00076ad:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076bd:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076c4:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076c8:	0f ac d0 01          	shrd   eax,edx,0x1
c00076cc:	89 df                	mov    edi,ebx
c00076ce:	d1 ea                	shr    edx,1
c00076d0:	39 c1                	cmp    ecx,eax
c00076d2:	19 d7                	sbb    edi,edx
c00076d4:	0f 83 3e 09 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c00076da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076de:	31 d2                	xor    edx,edx
c00076e0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ef:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076f3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076f7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076ff:	83 f8 0f             	cmp    eax,0xf
c0007702:	0f 86 10 09 00 00    	jbe    c0008018 <f_mkfs+0xcc5>
c0007708:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007710:	0f 87 02 09 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c0007716:	31 d2                	xor    edx,edx
c0007718:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000771c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007724:	83 c0 07             	add    eax,0x7
c0007727:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000772f:	c1 e8 03             	shr    eax,0x3
c0007732:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007739:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000773d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007741:	c1 e0 09             	shl    eax,0x9
c0007744:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007748:	48                   	dec    eax
c0007749:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000774d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007751:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007755:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007759:	31 d2                	xor    edx,edx
c000775b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000775f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000776a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000776f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007773:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007777:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000777b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000777f:	31 ff                	xor    edi,edi
c0007781:	31 f6                	xor    esi,esi
c0007783:	31 db                	xor    ebx,ebx
c0007785:	85 ff                	test   edi,edi
c0007787:	74 05                	je     c000778e <f_mkfs+0x43b>
c0007789:	4f                   	dec    edi
c000778a:	74 44                	je     c00077d0 <f_mkfs+0x47d>
c000778c:	eb 4f                	jmp    c00077dd <f_mkfs+0x48a>
c000778e:	83 ec 0c             	sub    esp,0xc
c0007791:	0f b7 c3             	movzx  eax,bx
c0007794:	50                   	push   eax
c0007795:	e8 05 0e 00 00       	call   c000859f <ff_wtoupper>
c000779a:	83 c4 10             	add    esp,0x10
c000779d:	89 c1                	mov    ecx,eax
c000779f:	8d 53 01             	lea    edx,[ebx+0x1]
c00077a2:	66 39 c3             	cmp    bx,ax
c00077a5:	75 3e                	jne    c00077e5 <f_mkfs+0x492>
c00077a7:	be 01 00 00 00       	mov    esi,0x1
c00077ac:	89 df                	mov    edi,ebx
c00077ae:	66 01 f7             	add    di,si
c00077b1:	75 07                	jne    c00077ba <f_mkfs+0x467>
c00077b3:	83 fe 7f             	cmp    esi,0x7f
c00077b6:	77 31                	ja     c00077e9 <f_mkfs+0x496>
c00077b8:	eb 16                	jmp    c00077d0 <f_mkfs+0x47d>
c00077ba:	83 ec 0c             	sub    esp,0xc
c00077bd:	0f b7 ff             	movzx  edi,di
c00077c0:	57                   	push   edi
c00077c1:	e8 d9 0d 00 00       	call   c000859f <ff_wtoupper>
c00077c6:	83 c4 10             	add    esp,0x10
c00077c9:	39 c7                	cmp    edi,eax
c00077cb:	75 e6                	jne    c00077b3 <f_mkfs+0x460>
c00077cd:	46                   	inc    esi
c00077ce:	eb dc                	jmp    c00077ac <f_mkfs+0x459>
c00077d0:	31 c0                	xor    eax,eax
c00077d2:	89 d9                	mov    ecx,ebx
c00077d4:	4e                   	dec    esi
c00077d5:	0f 95 c0             	setne  al
c00077d8:	43                   	inc    ebx
c00077d9:	89 c7                	mov    edi,eax
c00077db:	eb 14                	jmp    c00077f1 <f_mkfs+0x49e>
c00077dd:	89 f1                	mov    ecx,esi
c00077df:	01 f3                	add    ebx,esi
c00077e1:	31 ff                	xor    edi,edi
c00077e3:	eb 0c                	jmp    c00077f1 <f_mkfs+0x49e>
c00077e5:	89 d3                	mov    ebx,edx
c00077e7:	eb 08                	jmp    c00077f1 <f_mkfs+0x49e>
c00077e9:	bf 02 00 00 00       	mov    edi,0x2
c00077ee:	83 c9 ff             	or     ecx,0xffffffff
c00077f1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077fc:	0f b6 c1             	movzx  eax,cl
c00077ff:	e8 3a a9 ff ff       	call   c000213e <xsum32>
c0007804:	66 c1 e9 08          	shr    cx,0x8
c0007808:	89 c2                	mov    edx,eax
c000780a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780d:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007811:	0f b7 c1             	movzx  eax,cx
c0007814:	e8 25 a9 ff ff       	call   c000213e <xsum32>
c0007819:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000781e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007822:	66 85 db             	test   bx,bx
c0007825:	74 1f                	je     c0007846 <f_mkfs+0x4f3>
c0007827:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782a:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007831:	83 c0 02             	add    eax,0x2
c0007834:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000783a:	39 c2                	cmp    edx,eax
c000783c:	74 08                	je     c0007846 <f_mkfs+0x4f3>
c000783e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007841:	e9 3f ff ff ff       	jmp    c0007785 <f_mkfs+0x432>
c0007846:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007849:	83 ec 0c             	sub    esp,0xc
c000784c:	05 01 02 00 00       	add    eax,0x201
c0007851:	c1 e8 09             	shr    eax,0x9
c0007854:	50                   	push   eax
c0007855:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007859:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000785d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007861:	55                   	push   ebp
c0007862:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007866:	e8 a3 a3 ff ff       	call   c0001c0e <disk_write>
c000786b:	83 c4 20             	add    esp,0x20
c000786e:	85 c0                	test   eax,eax
c0007870:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007873:	0f 85 8b 0b 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007879:	89 d0                	mov    eax,edx
c000787b:	31 d2                	xor    edx,edx
c000787d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007881:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007885:	66 85 db             	test   bx,bx
c0007888:	74 04                	je     c000788e <f_mkfs+0x53b>
c000788a:	31 c0                	xor    eax,eax
c000788c:	eb b0                	jmp    c000783e <f_mkfs+0x4eb>
c000788e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007892:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007896:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000789a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078a0:	31 d2                	xor    edx,edx
c00078a2:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ad:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b1:	c1 eb 09             	shr    ebx,0x9
c00078b4:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bf:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078c7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078cb:	8d 70 01             	lea    esi,[eax+0x1]
c00078ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078d6:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078dd:	31 d2                	xor    edx,edx
c00078df:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e7:	89 c1                	mov    ecx,eax
c00078e9:	89 e8                	mov    eax,ebp
c00078eb:	e8 e7 a3 ff ff       	call   c0001cd7 <mem_set>
c00078f0:	31 c0                	xor    eax,eax
c00078f2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f5:	76 10                	jbe    c0007907 <f_mkfs+0x5b4>
c00078f7:	83 fe 07             	cmp    esi,0x7
c00078fa:	76 0b                	jbe    c0007907 <f_mkfs+0x5b4>
c00078fc:	40                   	inc    eax
c00078fd:	83 ee 08             	sub    esi,0x8
c0007900:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007905:	eb eb                	jmp    c00078f2 <f_mkfs+0x59f>
c0007907:	b2 01                	mov    dl,0x1
c0007909:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000790d:	85 f6                	test   esi,esi
c000790f:	74 0c                	je     c000791d <f_mkfs+0x5ca>
c0007911:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007914:	76 07                	jbe    c000791d <f_mkfs+0x5ca>
c0007916:	08 11                	or     BYTE PTR [ecx],dl
c0007918:	4e                   	dec    esi
c0007919:	d1 e2                	shl    edx,1
c000791b:	eb f0                	jmp    c000790d <f_mkfs+0x5ba>
c000791d:	89 df                	mov    edi,ebx
c000791f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007923:	76 04                	jbe    c0007929 <f_mkfs+0x5d6>
c0007925:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007929:	83 ec 0c             	sub    esp,0xc
c000792c:	57                   	push   edi
c000792d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007931:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007935:	55                   	push   ebp
c0007936:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000793a:	e8 cf a2 ff ff       	call   c0001c0e <disk_write>
c000793f:	83 c4 20             	add    esp,0x20
c0007942:	85 c0                	test   eax,eax
c0007944:	0f 85 ba 0a 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c000794a:	31 d2                	xor    edx,edx
c000794c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007950:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007954:	29 fb                	sub    ebx,edi
c0007956:	0f 85 7a ff ff ff    	jne    c00078d6 <f_mkfs+0x583>
c000795c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007960:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007968:	31 f6                	xor    esi,esi
c000796a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000796e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007971:	31 d2                	xor    edx,edx
c0007973:	89 e8                	mov    eax,ebp
c0007975:	e8 5d a3 ff ff       	call   c0001cd7 <mem_set>
c000797a:	31 c9                	xor    ecx,ecx
c000797c:	85 db                	test   ebx,ebx
c000797e:	75 40                	jne    c00079c0 <f_mkfs+0x66d>
c0007980:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007985:	89 e8                	mov    eax,ebp
c0007987:	bb 02 00 00 00       	mov    ebx,0x2
c000798c:	e8 28 a3 ff ff       	call   c0001cb9 <st_dword>
c0007991:	8d 45 04             	lea    eax,[ebp+0x4]
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	e8 1d a3 ff ff       	call   c0001cb9 <st_dword>
c000799c:	b9 08 00 00 00       	mov    ecx,0x8
c00079a1:	eb 1d                	jmp    c00079c0 <f_mkfs+0x66d>
c00079a3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079a6:	76 3b                	jbe    c00079e3 <f_mkfs+0x690>
c00079a8:	43                   	inc    ebx
c00079a9:	83 fe 01             	cmp    esi,0x1
c00079ac:	89 da                	mov    edx,ebx
c00079ae:	77 03                	ja     c00079b3 <f_mkfs+0x660>
c00079b0:	83 ca ff             	or     edx,0xffffffff
c00079b3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079b7:	4e                   	dec    esi
c00079b8:	e8 fc a2 ff ff       	call   c0001cb9 <st_dword>
c00079bd:	83 c1 04             	add    ecx,0x4
c00079c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079c4:	85 f6                	test   esi,esi
c00079c6:	75 db                	jne    c00079a3 <f_mkfs+0x650>
c00079c8:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079cd:	77 14                	ja     c00079e3 <f_mkfs+0x690>
c00079cf:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079d3:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079da:	85 f6                	test   esi,esi
c00079dc:	74 05                	je     c00079e3 <f_mkfs+0x690>
c00079de:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e1:	77 dd                	ja     c00079c0 <f_mkfs+0x66d>
c00079e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079e7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079eb:	39 cf                	cmp    edi,ecx
c00079ed:	76 02                	jbe    c00079f1 <f_mkfs+0x69e>
c00079ef:	89 cf                	mov    edi,ecx
c00079f1:	83 ec 0c             	sub    esp,0xc
c00079f4:	57                   	push   edi
c00079f5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079fd:	55                   	push   ebp
c00079fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a02:	e8 07 a2 ff ff       	call   c0001c0e <disk_write>
c0007a07:	83 c4 20             	add    esp,0x20
c0007a0a:	85 c0                	test   eax,eax
c0007a0c:	0f 85 f2 09 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007a12:	31 d2                	xor    edx,edx
c0007a14:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a18:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a1c:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a20:	0f 85 48 ff ff ff    	jne    c000796e <f_mkfs+0x61b>
c0007a26:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a29:	31 d2                	xor    edx,edx
c0007a2b:	89 e8                	mov    eax,ebp
c0007a2d:	31 ff                	xor    edi,edi
c0007a2f:	e8 a3 a2 ff ff       	call   c0001cd7 <mem_set>
c0007a34:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a37:	ba 02 00 00 00       	mov    edx,0x2
c0007a3c:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a40:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a44:	e8 70 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a49:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a4c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a50:	e8 64 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a55:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a58:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a5c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a60:	e8 54 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a65:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a70:	83 c2 02             	add    edx,0x2
c0007a73:	e8 41 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a78:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a7b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a7f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a83:	e8 31 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a8c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a91:	89 c6                	mov    esi,eax
c0007a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a97:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a9e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aa2:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007aa5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aa9:	39 cb                	cmp    ebx,ecx
c0007aab:	76 02                	jbe    c0007aaf <f_mkfs+0x75c>
c0007aad:	89 cb                	mov    ebx,ecx
c0007aaf:	83 ec 0c             	sub    esp,0xc
c0007ab2:	53                   	push   ebx
c0007ab3:	57                   	push   edi
c0007ab4:	56                   	push   esi
c0007ab5:	55                   	push   ebp
c0007ab6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aba:	e8 4f a1 ff ff       	call   c0001c0e <disk_write>
c0007abf:	83 c4 20             	add    esp,0x20
c0007ac2:	85 c0                	test   eax,eax
c0007ac4:	0f 85 3a 09 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007aca:	31 d2                	xor    edx,edx
c0007acc:	b9 00 02 00 00       	mov    ecx,0x200
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 ff a1 ff ff       	call   c0001cd7 <mem_set>
c0007ad8:	31 d2                	xor    edx,edx
c0007ada:	01 de                	add    esi,ebx
c0007adc:	11 d7                	adc    edi,edx
c0007ade:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ae1:	75 bf                	jne    c0007aa2 <f_mkfs+0x74f>
c0007ae3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ae7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007aeb:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007af3:	b9 00 02 00 00       	mov    ecx,0x200
c0007af8:	31 d2                	xor    edx,edx
c0007afa:	89 e8                	mov    eax,ebp
c0007afc:	e8 d6 a1 ff ff       	call   c0001cd7 <mem_set>
c0007b01:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b06:	ba 80 9e 02 c0       	mov    edx,0xc0029e80
c0007b0b:	89 e8                	mov    eax,ebp
c0007b0d:	e8 b0 a1 ff ff       	call   c0001cc2 <mem_cpy>
c0007b12:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b19:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b1d:	e8 9a a1 ff ff       	call   c0001cbc <st_qword>
c0007b22:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b26:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b29:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b2d:	e8 8a a1 ff ff       	call   c0001cbc <st_qword>
c0007b32:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b35:	ba 20 00 00 00       	mov    edx,0x20
c0007b3a:	e8 7a a1 ff ff       	call   c0001cb9 <st_dword>
c0007b3f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b47:	e8 6d a1 ff ff       	call   c0001cb9 <st_dword>
c0007b4c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b50:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b54:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b58:	e8 5c a1 ff ff       	call   c0001cb9 <st_dword>
c0007b5d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b60:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b64:	e8 50 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b6d:	8d 50 02             	lea    edx,[eax+0x2]
c0007b70:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b73:	e8 41 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b78:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b7b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b80:	e8 34 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b85:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b88:	ba 00 01 00 00       	mov    edx,0x100
c0007b8d:	e8 23 a1 ff ff       	call   c0001cb5 <st_word>
c0007b92:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b96:	b8 0a 00 00 00       	mov    eax,0xa
c0007b9b:	48                   	dec    eax
c0007b9c:	74 05                	je     c0007ba3 <f_mkfs+0x850>
c0007b9e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ba1:	eb f8                	jmp    c0007b9b <f_mkfs+0x848>
c0007ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba7:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007baf:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bb3:	74 05                	je     c0007bba <f_mkfs+0x867>
c0007bb5:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bb8:	eb f5                	jmp    c0007baf <f_mkfs+0x85c>
c0007bba:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bbd:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bc2:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bc8:	31 db                	xor    ebx,ebx
c0007bca:	e8 e6 a0 ff ff       	call   c0001cb5 <st_word>
c0007bcf:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bd5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bda:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdd:	e8 d3 a0 ff ff       	call   c0001cb5 <st_word>
c0007be2:	31 c9                	xor    ecx,ecx
c0007be4:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007be7:	83 f8 01             	cmp    eax,0x1
c0007bea:	76 13                	jbe    c0007bff <f_mkfs+0x8ac>
c0007bec:	83 f9 70             	cmp    ecx,0x70
c0007bef:	74 0e                	je     c0007bff <f_mkfs+0x8ac>
c0007bf1:	89 da                	mov    edx,ebx
c0007bf3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bf8:	e8 41 a5 ff ff       	call   c000213e <xsum32>
c0007bfd:	89 c3                	mov    ebx,eax
c0007bff:	41                   	inc    ecx
c0007c00:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c06:	75 dc                	jne    c0007be4 <f_mkfs+0x891>
c0007c08:	89 f0                	mov    eax,esi
c0007c0a:	89 fa                	mov    edx,edi
c0007c0c:	83 c0 01             	add    eax,0x1
c0007c0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c13:	83 d2 00             	adc    edx,0x0
c0007c16:	83 ec 0c             	sub    esp,0xc
c0007c19:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c1d:	6a 01                	push   0x1
c0007c1f:	57                   	push   edi
c0007c20:	56                   	push   esi
c0007c21:	55                   	push   ebp
c0007c22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c26:	e8 e3 9f ff ff       	call   c0001c0e <disk_write>
c0007c2b:	83 c4 20             	add    esp,0x20
c0007c2e:	85 c0                	test   eax,eax
c0007c30:	0f 85 ce 07 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3d:	89 e8                	mov    eax,ebp
c0007c3f:	e8 93 a0 ff ff       	call   c0001cd7 <mem_set>
c0007c44:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c4c:	e8 64 a0 ff ff       	call   c0001cb5 <st_word>
c0007c51:	89 f0                	mov    eax,esi
c0007c53:	89 fa                	mov    edx,edi
c0007c55:	83 c0 09             	add    eax,0x9
c0007c58:	83 d2 00             	adc    edx,0x0
c0007c5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c62:	31 c9                	xor    ecx,ecx
c0007c64:	41                   	inc    ecx
c0007c65:	89 da                	mov    edx,ebx
c0007c67:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c6c:	e8 cd a4 ff ff       	call   c000213e <xsum32>
c0007c71:	89 c3                	mov    ebx,eax
c0007c73:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c79:	75 e9                	jne    c0007c64 <f_mkfs+0x911>
c0007c7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c83:	83 c0 01             	add    eax,0x1
c0007c86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c8a:	83 d2 00             	adc    edx,0x0
c0007c8d:	83 ec 0c             	sub    esp,0xc
c0007c90:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c94:	6a 01                	push   0x1
c0007c96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9e:	55                   	push   ebp
c0007c9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ca3:	e8 66 9f ff ff       	call   c0001c0e <disk_write>
c0007ca8:	83 c4 20             	add    esp,0x20
c0007cab:	85 c0                	test   eax,eax
c0007cad:	0f 85 51 07 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cb7:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cbb:	75 09                	jne    c0007cc6 <f_mkfs+0x973>
c0007cbd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cc0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cc4:	74 12                	je     c0007cd8 <f_mkfs+0x985>
c0007cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cd6:	eb 8a                	jmp    c0007c62 <f_mkfs+0x90f>
c0007cd8:	31 d2                	xor    edx,edx
c0007cda:	b9 00 02 00 00       	mov    ecx,0x200
c0007cdf:	89 e8                	mov    eax,ebp
c0007ce1:	e8 f1 9f ff ff       	call   c0001cd7 <mem_set>
c0007ce6:	83 c6 0b             	add    esi,0xb
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cf0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cf4:	31 c9                	xor    ecx,ecx
c0007cf6:	41                   	inc    ecx
c0007cf7:	89 da                	mov    edx,ebx
c0007cf9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cfe:	e8 3b a4 ff ff       	call   c000213e <xsum32>
c0007d03:	89 c3                	mov    ebx,eax
c0007d05:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d0b:	75 e9                	jne    c0007cf6 <f_mkfs+0x9a3>
c0007d0d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d14:	83 c6 01             	add    esi,0x1
c0007d17:	83 d7 00             	adc    edi,0x0
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	6a 01                	push   0x1
c0007d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d27:	55                   	push   ebp
c0007d28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d2c:	e8 dd 9e ff ff       	call   c0001c0e <disk_write>
c0007d31:	83 c4 20             	add    esp,0x20
c0007d34:	85 c0                	test   eax,eax
c0007d36:	0f 85 c8 06 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007d3c:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d40:	75 06                	jne    c0007d48 <f_mkfs+0x9f5>
c0007d42:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d46:	74 09                	je     c0007d51 <f_mkfs+0x9fe>
c0007d48:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d4b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d4f:	eb a3                	jmp    c0007cf4 <f_mkfs+0x9a1>
c0007d51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d55:	89 da                	mov    edx,ebx
c0007d57:	01 e8                	add    eax,ebp
c0007d59:	e8 5b 9f ff ff       	call   c0001cb9 <st_dword>
c0007d5e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d63:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d6b:	75 e4                	jne    c0007d51 <f_mkfs+0x9fe>
c0007d6d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d70:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d74:	83 c6 02             	add    esi,0x2
c0007d77:	83 d7 00             	adc    edi,0x0
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	6a 01                	push   0x1
c0007d7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d87:	55                   	push   ebp
c0007d88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d8c:	e8 7d 9e ff ff       	call   c0001c0e <disk_write>
c0007d91:	83 c4 20             	add    esp,0x20
c0007d94:	85 c0                	test   eax,eax
c0007d96:	0f 85 68 06 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007d9c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007da1:	74 0d                	je     c0007db0 <f_mkfs+0xa5d>
c0007da3:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dab:	e9 43 fd ff ff       	jmp    c0007af3 <f_mkfs+0x7a0>
c0007db0:	b1 07                	mov    cl,0x7
c0007db2:	e9 e3 05 00 00       	jmp    c000839a <f_mkfs+0x1047>
c0007db7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dbc:	0f 85 4f 02 00 00    	jne    c0008011 <f_mkfs+0xcbe>
c0007dc2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dc7:	0f 86 22 02 00 00    	jbe    c0007fef <f_mkfs+0xc9c>
c0007dcd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dd2:	0f 85 81 06 00 00    	jne    c0008459 <f_mkfs+0x1106>
c0007dd8:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ddb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ddf:	83 f8 40             	cmp    eax,0x40
c0007de2:	0f 87 51 06 00 00    	ja     c0008439 <f_mkfs+0x10e6>
c0007de8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dec:	85 ff                	test   edi,edi
c0007dee:	75 1c                	jne    c0007e0c <f_mkfs+0xab9>
c0007df0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007df3:	ba 80 9d 02 c0       	mov    edx,0xc0029d80
c0007df8:	c1 e9 0c             	shr    ecx,0xc
c0007dfb:	bf 01 00 00 00       	mov    edi,0x1
c0007e00:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e03:	66 85 c0             	test   ax,ax
c0007e06:	0f 85 95 01 00 00    	jne    c0007fa1 <f_mkfs+0xc4e>
c0007e0c:	31 d2                	xor    edx,edx
c0007e0e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e11:	f7 f7                	div    edi
c0007e13:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e18:	0f 86 95 01 00 00    	jbe    c0007fb3 <f_mkfs+0xc60>
c0007e1e:	83 c0 02             	add    eax,0x2
c0007e21:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e26:	01 c0                	add    eax,eax
c0007e28:	05 ff 01 00 00       	add    eax,0x1ff
c0007e2d:	be 01 00 00 00       	mov    esi,0x1
c0007e32:	c1 e8 09             	shr    eax,0x9
c0007e35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e3d:	c1 e0 05             	shl    eax,0x5
c0007e40:	c1 e8 09             	shr    eax,0x9
c0007e43:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e47:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e4c:	31 d2                	xor    edx,edx
c0007e4e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e52:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e56:	89 f0                	mov    eax,esi
c0007e58:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e5c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e6c:	31 d2                	xor    edx,edx
c0007e6e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e73:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e77:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e7b:	31 db                	xor    ebx,ebx
c0007e7d:	01 c8                	add    eax,ecx
c0007e7f:	11 da                	adc    edx,ebx
c0007e81:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e85:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e89:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e8d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e91:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e95:	f7 da                	neg    edx
c0007e97:	21 d1                	and    ecx,edx
c0007e99:	29 d9                	sub    ecx,ebx
c0007e9b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea0:	0f 85 20 01 00 00    	jne    c0007fc6 <f_mkfs+0xc73>
c0007ea6:	31 db                	xor    ebx,ebx
c0007ea8:	01 ce                	add    esi,ecx
c0007eaa:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007eae:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eb2:	31 d2                	xor    edx,edx
c0007eb4:	89 f8                	mov    eax,edi
c0007eb6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007eba:	c1 e0 04             	shl    eax,0x4
c0007ebd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ec1:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ec5:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ec9:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ecd:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ed0:	19 d3                	sbb    ebx,edx
c0007ed2:	0f 82 40 01 00 00    	jb     c0008018 <f_mkfs+0xcc5>
c0007ed8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007edb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007edf:	89 c8                	mov    eax,ecx
c0007ee1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ee6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007eea:	29 f0                	sub    eax,esi
c0007eec:	29 d0                	sub    eax,edx
c0007eee:	31 d2                	xor    edx,edx
c0007ef0:	f7 f7                	div    edi
c0007ef2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef7:	89 c3                	mov    ebx,eax
c0007ef9:	0f 85 b8 fe ff ff    	jne    c0007db7 <f_mkfs+0xa64>
c0007eff:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f04:	0f 87 1d 01 00 00    	ja     c0008027 <f_mkfs+0xcd4>
c0007f0a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f0f:	0f 85 03 01 00 00    	jne    c0008018 <f_mkfs+0xcc5>
c0007f15:	83 ff 01             	cmp    edi,0x1
c0007f18:	0f 86 fa 00 00 00    	jbe    c0008018 <f_mkfs+0xcc5>
c0007f1e:	d1 ef                	shr    edi,1
c0007f20:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f24:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f28:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f2b:	85 db                	test   ebx,ebx
c0007f2d:	75 2d                	jne    c0007f5c <f_mkfs+0xc09>
c0007f2f:	89 cb                	mov    ebx,ecx
c0007f31:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c0007f36:	c1 eb 11             	shr    ebx,0x11
c0007f39:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f41:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f44:	66 85 c0             	test   ax,ax
c0007f47:	74 11                	je     c0007f5a <f_mkfs+0xc07>
c0007f49:	83 c2 02             	add    edx,0x2
c0007f4c:	39 d8                	cmp    eax,ebx
c0007f4e:	77 0a                	ja     c0007f5a <f_mkfs+0xc07>
c0007f50:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f54:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f58:	eb e7                	jmp    c0007f41 <f_mkfs+0xbee>
c0007f5a:	31 db                	xor    ebx,ebx
c0007f5c:	31 d2                	xor    edx,edx
c0007f5e:	89 c8                	mov    eax,ecx
c0007f60:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f64:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f6b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f70:	c1 ea 09             	shr    edx,0x9
c0007f73:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f78:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f7c:	0f 87 96 00 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c0007f82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f86:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f8e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f92:	be 20 00 00 00       	mov    esi,0x20
c0007f97:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f9c:	e9 a6 fe ff ff       	jmp    c0007e47 <f_mkfs+0xaf4>
c0007fa1:	83 c2 02             	add    edx,0x2
c0007fa4:	39 c8                	cmp    eax,ecx
c0007fa6:	0f 87 60 fe ff ff    	ja     c0007e0c <f_mkfs+0xab9>
c0007fac:	01 ff                	add    edi,edi
c0007fae:	e9 4d fe ff ff       	jmp    c0007e00 <f_mkfs+0xaad>
c0007fb3:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fb6:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fbb:	40                   	inc    eax
c0007fbc:	d1 e8                	shr    eax,1
c0007fbe:	83 c0 03             	add    eax,0x3
c0007fc1:	e9 62 fe ff ff       	jmp    c0007e28 <f_mkfs+0xad5>
c0007fc6:	31 d2                	xor    edx,edx
c0007fc8:	89 c8                	mov    eax,ecx
c0007fca:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fce:	85 d2                	test   edx,edx
c0007fd0:	74 0c                	je     c0007fde <f_mkfs+0xc8b>
c0007fd2:	49                   	dec    ecx
c0007fd3:	46                   	inc    esi
c0007fd4:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fd9:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fde:	89 c8                	mov    eax,ecx
c0007fe0:	31 d2                	xor    edx,edx
c0007fe2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fe6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fea:	e9 c3 fe ff ff       	jmp    c0007eb2 <f_mkfs+0xb5f>
c0007fef:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ff4:	77 31                	ja     c0008027 <f_mkfs+0xcd4>
c0007ff6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ffb:	75 1b                	jne    c0008018 <f_mkfs+0xcc5>
c0007ffd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008004:	3d 80 00 00 00       	cmp    eax,0x80
c0008009:	0f 86 d9 fd ff ff    	jbe    c0007de8 <f_mkfs+0xa95>
c000800f:	eb 07                	jmp    c0008018 <f_mkfs+0xcc5>
c0008011:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008016:	76 0a                	jbe    c0008022 <f_mkfs+0xccf>
c0008018:	bb 0e 00 00 00       	mov    ebx,0xe
c000801d:	e9 ff 03 00 00       	jmp    c0008421 <f_mkfs+0x10ce>
c0008022:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008027:	31 d2                	xor    edx,edx
c0008029:	b9 00 02 00 00       	mov    ecx,0x200
c000802e:	89 e8                	mov    eax,ebp
c0008030:	e8 a2 9c ff ff       	call   c0001cd7 <mem_set>
c0008035:	b9 0b 00 00 00       	mov    ecx,0xb
c000803a:	ba a2 9e 02 c0       	mov    edx,0xc0029ea2
c000803f:	89 e8                	mov    eax,ebp
c0008041:	e8 7c 9c ff ff       	call   c0001cc2 <mem_cpy>
c0008046:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008049:	ba 00 02 00 00       	mov    edx,0x200
c000804e:	e8 62 9c ff ff       	call   c0001cb5 <st_word>
c0008053:	89 f8                	mov    eax,edi
c0008055:	0f b7 d6             	movzx  edx,si
c0008058:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000805b:	8d 45 0e             	lea    eax,[ebp+0xe]
c000805e:	e8 52 9c ff ff       	call   c0001cb5 <st_word>
c0008063:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008067:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000806c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000806f:	75 08                	jne    c0008079 <f_mkfs+0xd26>
c0008071:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008079:	8d 45 11             	lea    eax,[ebp+0x11]
c000807c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008080:	e8 30 9c ff ff       	call   c0001cb5 <st_word>
c0008085:	b8 ff ff 00 00       	mov    eax,0xffff
c000808a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000808e:	39 d0                	cmp    eax,edx
c0008090:	b8 00 00 00 00       	mov    eax,0x0
c0008095:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008099:	72 0a                	jb     c00080a5 <f_mkfs+0xd52>
c000809b:	8d 45 13             	lea    eax,[ebp+0x13]
c000809e:	e8 12 9c ff ff       	call   c0001cb5 <st_word>
c00080a3:	eb 08                	jmp    c00080ad <f_mkfs+0xd5a>
c00080a5:	8d 45 20             	lea    eax,[ebp+0x20]
c00080a8:	e8 0c 9c ff ff       	call   c0001cb9 <st_dword>
c00080ad:	8d 45 18             	lea    eax,[ebp+0x18]
c00080b0:	ba 3f 00 00 00       	mov    edx,0x3f
c00080b5:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080b9:	e8 f7 9b ff ff       	call   c0001cb5 <st_word>
c00080be:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080c1:	ba ff 00 00 00       	mov    edx,0xff
c00080c6:	e8 ea 9b ff ff       	call   c0001cb5 <st_word>
c00080cb:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080d2:	e8 e2 9b ff ff       	call   c0001cb9 <st_dword>
c00080d7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080dc:	75 57                	jne    c0008135 <f_mkfs+0xde2>
c00080de:	8d 45 43             	lea    eax,[ebp+0x43]
c00080e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00080e6:	e8 ce 9b ff ff       	call   c0001cb9 <st_dword>
c00080eb:	8d 45 24             	lea    eax,[ebp+0x24]
c00080ee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f2:	e8 c2 9b ff ff       	call   c0001cb9 <st_dword>
c00080f7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080fa:	ba 02 00 00 00       	mov    edx,0x2
c00080ff:	e8 b5 9b ff ff       	call   c0001cb9 <st_dword>
c0008104:	8d 45 30             	lea    eax,[ebp+0x30]
c0008107:	ba 01 00 00 00       	mov    edx,0x1
c000810c:	e8 a4 9b ff ff       	call   c0001cb5 <st_word>
c0008111:	8d 45 32             	lea    eax,[ebp+0x32]
c0008114:	ba 06 00 00 00       	mov    edx,0x6
c0008119:	e8 97 9b ff ff       	call   c0001cb5 <st_word>
c000811e:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008122:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008126:	8d 45 47             	lea    eax,[ebp+0x47]
c0008129:	b9 13 00 00 00       	mov    ecx,0x13
c000812e:	ba ae 9e 02 c0       	mov    edx,0xc0029eae
c0008133:	eb 2f                	jmp    c0008164 <f_mkfs+0xe11>
c0008135:	8d 45 27             	lea    eax,[ebp+0x27]
c0008138:	ba 00 00 21 50       	mov    edx,0x50210000
c000813d:	e8 77 9b ff ff       	call   c0001cb9 <st_dword>
c0008142:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008147:	8d 45 16             	lea    eax,[ebp+0x16]
c000814a:	e8 66 9b ff ff       	call   c0001cb5 <st_word>
c000814f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008153:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008157:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000815a:	b9 13 00 00 00       	mov    ecx,0x13
c000815f:	ba c2 9e 02 c0       	mov    edx,0xc0029ec2
c0008164:	e8 59 9b ff ff       	call   c0001cc2 <mem_cpy>
c0008169:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000816f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008174:	89 f0                	mov    eax,esi
c0008176:	e8 3a 9b ff ff       	call   c0001cb5 <st_word>
c000817b:	83 ec 0c             	sub    esp,0xc
c000817e:	6a 01                	push   0x1
c0008180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008188:	55                   	push   ebp
c0008189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000818d:	e8 7c 9a ff ff       	call   c0001c0e <disk_write>
c0008192:	83 c4 20             	add    esp,0x20
c0008195:	85 c0                	test   eax,eax
c0008197:	0f 85 67 02 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c000819d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a2:	0f 85 b7 00 00 00    	jne    c000825f <f_mkfs+0xf0c>
c00081a8:	83 ec 0c             	sub    esp,0xc
c00081ab:	6a 01                	push   0x1
c00081ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081b5:	83 c0 06             	add    eax,0x6
c00081b8:	83 d2 00             	adc    edx,0x0
c00081bb:	52                   	push   edx
c00081bc:	50                   	push   eax
c00081bd:	55                   	push   ebp
c00081be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c2:	e8 47 9a ff ff       	call   c0001c0e <disk_write>
c00081c7:	83 c4 20             	add    esp,0x20
c00081ca:	b9 00 02 00 00       	mov    ecx,0x200
c00081cf:	31 d2                	xor    edx,edx
c00081d1:	89 e8                	mov    eax,ebp
c00081d3:	e8 ff 9a ff ff       	call   c0001cd7 <mem_set>
c00081d8:	ba 52 52 61 41       	mov    edx,0x41615252
c00081dd:	89 e8                	mov    eax,ebp
c00081df:	e8 d5 9a ff ff       	call   c0001cb9 <st_dword>
c00081e4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ea:	ba 72 72 41 61       	mov    edx,0x61417272
c00081ef:	e8 c5 9a ff ff       	call   c0001cb9 <st_dword>
c00081f4:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081f7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081fd:	e8 b7 9a ff ff       	call   c0001cb9 <st_dword>
c0008202:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008208:	ba 02 00 00 00       	mov    edx,0x2
c000820d:	e8 a7 9a ff ff       	call   c0001cb9 <st_dword>
c0008212:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008217:	89 f0                	mov    eax,esi
c0008219:	e8 97 9a ff ff       	call   c0001cb5 <st_word>
c000821e:	83 ec 0c             	sub    esp,0xc
c0008221:	6a 01                	push   0x1
c0008223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008227:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822b:	83 c0 07             	add    eax,0x7
c000822e:	83 d2 00             	adc    edx,0x0
c0008231:	52                   	push   edx
c0008232:	50                   	push   eax
c0008233:	55                   	push   ebp
c0008234:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008238:	e8 d1 99 ff ff       	call   c0001c0e <disk_write>
c000823d:	83 c4 14             	add    esp,0x14
c0008240:	6a 01                	push   0x1
c0008242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008246:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000824a:	83 c0 01             	add    eax,0x1
c000824d:	83 d2 00             	adc    edx,0x0
c0008250:	52                   	push   edx
c0008251:	50                   	push   eax
c0008252:	55                   	push   ebp
c0008253:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008257:	e8 b2 99 ff ff       	call   c0001c0e <disk_write>
c000825c:	83 c4 20             	add    esp,0x20
c000825f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008266:	31 d2                	xor    edx,edx
c0008268:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000826e:	31 db                	xor    ebx,ebx
c0008270:	89 e8                	mov    eax,ebp
c0008272:	e8 60 9a ff ff       	call   c0001cd7 <mem_set>
c0008277:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000827c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008283:	0f 94 c3             	sete   bl
c0008286:	4b                   	dec    ebx
c0008287:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000828d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008293:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008298:	75 21                	jne    c00082bb <f_mkfs+0xf68>
c000829a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000829f:	89 e8                	mov    eax,ebp
c00082a1:	e8 13 9a ff ff       	call   c0001cb9 <st_dword>
c00082a6:	8d 45 04             	lea    eax,[ebp+0x4]
c00082a9:	83 ca ff             	or     edx,0xffffffff
c00082ac:	e8 08 9a ff ff       	call   c0001cb9 <st_dword>
c00082b1:	8d 45 08             	lea    eax,[ebp+0x8]
c00082b4:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082b9:	eb 04                	jmp    c00082bf <f_mkfs+0xf6c>
c00082bb:	89 da                	mov    edx,ebx
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 f5 99 ff ff       	call   c0001cb9 <st_dword>
c00082c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082cc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082d4:	39 ce                	cmp    esi,ecx
c00082d6:	76 02                	jbe    c00082da <f_mkfs+0xf87>
c00082d8:	89 ce                	mov    esi,ecx
c00082da:	83 ec 0c             	sub    esp,0xc
c00082dd:	56                   	push   esi
c00082de:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 1e 99 ff ff       	call   c0001c0e <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 09 01 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c00082fb:	31 d2                	xor    edx,edx
c00082fd:	b9 00 02 00 00       	mov    ecx,0x200
c0008302:	89 e8                	mov    eax,ebp
c0008304:	e8 ce 99 ff ff       	call   c0001cd7 <mem_set>
c0008309:	31 d2                	xor    edx,edx
c000830b:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000830f:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008313:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008317:	75 b3                	jne    c00082cc <f_mkfs+0xf79>
c0008319:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000831c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008323:	40                   	inc    eax
c0008324:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008328:	0f 87 65 ff ff ff    	ja     c0008293 <f_mkfs+0xf40>
c000832e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008333:	74 04                	je     c0008339 <f_mkfs+0xfe6>
c0008335:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008339:	89 fb                	mov    ebx,edi
c000833b:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000833f:	76 04                	jbe    c0008345 <f_mkfs+0xff2>
c0008341:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008345:	83 ec 0c             	sub    esp,0xc
c0008348:	53                   	push   ebx
c0008349:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008351:	55                   	push   ebp
c0008352:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008356:	e8 b3 98 ff ff       	call   c0001c0e <disk_write>
c000835b:	83 c4 20             	add    esp,0x20
c000835e:	85 c0                	test   eax,eax
c0008360:	0f 85 9e 00 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0008366:	31 d2                	xor    edx,edx
c0008368:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000836c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008370:	29 df                	sub    edi,ebx
c0008372:	75 c5                	jne    c0008339 <f_mkfs+0xfe6>
c0008374:	b1 0c                	mov    cl,0xc
c0008376:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000837b:	74 1d                	je     c000839a <f_mkfs+0x1047>
c000837d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008382:	b1 06                	mov    cl,0x6
c0008384:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008388:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000838c:	72 0c                	jb     c000839a <f_mkfs+0x1047>
c000838e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008393:	0f 94 c1             	sete   cl
c0008396:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000839a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000839f:	75 4c                	jne    c00083ed <f_mkfs+0x109a>
c00083a1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083a5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083a9:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083b0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083b7:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083c2:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083cd:	0f b6 c9             	movzx  ecx,cl
c00083d0:	83 ec 0c             	sub    esp,0xc
c00083d3:	55                   	push   ebp
c00083d4:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083df:	e8 2f c2 ff ff       	call   c0004613 <create_partition>
c00083e4:	83 c4 10             	add    esp,0x10
c00083e7:	89 c3                	mov    ebx,eax
c00083e9:	85 c0                	test   eax,eax
c00083eb:	75 34                	jne    c0008421 <f_mkfs+0x10ce>
c00083ed:	31 db                	xor    ebx,ebx
c00083ef:	50                   	push   eax
c00083f0:	6a 00                	push   0x0
c00083f2:	6a 00                	push   0x0
c00083f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083f8:	e8 27 98 ff ff       	call   c0001c24 <disk_ioctl>
c00083fd:	83 c4 10             	add    esp,0x10
c0008400:	85 c0                	test   eax,eax
c0008402:	74 1d                	je     c0008421 <f_mkfs+0x10ce>
c0008404:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840c:	75 0c                	jne    c000841a <f_mkfs+0x10c7>
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	55                   	push   ebp
c0008412:	e8 75 00 00 00       	call   c000848c <ff_memfree>
c0008417:	83 c4 10             	add    esp,0x10
c000841a:	bb 01 00 00 00       	mov    ebx,0x1
c000841f:	eb 48                	jmp    c0008469 <f_mkfs+0x1116>
c0008421:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008429:	75 3e                	jne    c0008469 <f_mkfs+0x1116>
c000842b:	83 ec 0c             	sub    esp,0xc
c000842e:	55                   	push   ebp
c000842f:	e8 58 00 00 00       	call   c000848c <ff_memfree>
c0008434:	83 c4 10             	add    esp,0x10
c0008437:	eb 30                	jmp    c0008469 <f_mkfs+0x1116>
c0008439:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000843e:	0f 85 eb fa ff ff    	jne    c0007f2f <f_mkfs+0xbdc>
c0008444:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008448:	81 ff 80 00 00 00    	cmp    edi,0x80
c000844e:	0f 86 b8 f9 ff ff    	jbe    c0007e0c <f_mkfs+0xab9>
c0008454:	e9 bf fb ff ff       	jmp    c0008018 <f_mkfs+0xcc5>
c0008459:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845e:	0f 85 c0 fa ff ff    	jne    c0007f24 <f_mkfs+0xbd1>
c0008464:	e9 af fb ff ff       	jmp    c0008018 <f_mkfs+0xcc5>
c0008469:	81 c4 9c 00 00 00    	add    esp,0x9c
c000846f:	89 d8                	mov    eax,ebx
c0008471:	5b                   	pop    ebx
c0008472:	5e                   	pop    esi
c0008473:	5f                   	pop    edi
c0008474:	5d                   	pop    ebp
c0008475:	c3                   	ret    

c0008476 <ff_memalloc>:
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	83 ec 0c             	sub    esp,0xc
c000847c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008480:	e8 23 74 00 00       	call   c000f8a8 <malloc>
c0008485:	83 c4 10             	add    esp,0x10
c0008488:	83 c4 0c             	add    esp,0xc
c000848b:	c3                   	ret    

c000848c <ff_memfree>:
c000848c:	83 ec 0c             	sub    esp,0xc
c000848f:	83 ec 0c             	sub    esp,0xc
c0008492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008496:	e8 1d 74 00 00       	call   c000f8b8 <free>
c000849b:	83 c4 10             	add    esp,0x10
c000849e:	90                   	nop
c000849f:	83 c4 0c             	add    esp,0xc
c00084a2:	c3                   	ret    

c00084a3 <ff_uni2oem>:
c00084a3:	83 ec 14             	sub    esp,0x14
c00084a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084aa:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ae:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084b5:	c7 44 24 0c e0 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a1e0
c00084bd:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084c2:	77 0b                	ja     c00084cf <ff_uni2oem+0x2c>
c00084c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084c8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084cd:	eb 5b                	jmp    c000852a <ff_uni2oem+0x87>
c00084cf:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084d7:	77 51                	ja     c000852a <ff_uni2oem+0x87>
c00084d9:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084df:	75 49                	jne    c000852a <ff_uni2oem+0x87>
c00084e1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084e8:	eb 0b                	jmp    c00084f5 <ff_uni2oem+0x52>
c00084ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084ef:	40                   	inc    eax
c00084f0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084fb:	77 1b                	ja     c0008518 <ff_uni2oem+0x75>
c00084fd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008502:	01 c0                	add    eax,eax
c0008504:	89 c2                	mov    edx,eax
c0008506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000850a:	01 d0                	add    eax,edx
c000850c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000850f:	0f b7 c0             	movzx  eax,ax
c0008512:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008516:	75 d2                	jne    c00084ea <ff_uni2oem+0x47>
c0008518:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000851d:	83 e8 80             	sub    eax,0xffffff80
c0008520:	25 ff 00 00 00       	and    eax,0xff
c0008525:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000852a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000852f:	83 c4 14             	add    esp,0x14
c0008532:	c3                   	ret    

c0008533 <ff_oem2uni>:
c0008533:	83 ec 18             	sub    esp,0x18
c0008536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000853a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000853e:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008543:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008547:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000854e:	c7 44 24 10 e0 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1e0
c0008556:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000855c:	77 0b                	ja     c0008569 <ff_oem2uni+0x36>
c000855e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008562:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008567:	eb 2d                	jmp    c0008596 <ff_oem2uni+0x63>
c0008569:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000856f:	75 25                	jne    c0008596 <ff_oem2uni+0x63>
c0008571:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008578:	77 1c                	ja     c0008596 <ff_oem2uni+0x63>
c000857a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000857f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008584:	01 c0                	add    eax,eax
c0008586:	89 c2                	mov    edx,eax
c0008588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858c:	01 d0                	add    eax,edx
c000858e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008591:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008596:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000859b:	83 c4 18             	add    esp,0x18
c000859e:	c3                   	ret    

c000859f <ff_wtoupper>:
c000859f:	83 ec 10             	sub    esp,0x10
c00085a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085aa:	0f 87 3e 01 00 00    	ja     c00086ee <ff_wtoupper+0x14f>
c00085b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085b9:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085c0:	77 07                	ja     c00085c9 <ff_wtoupper+0x2a>
c00085c2:	b8 e0 9f 02 c0       	mov    eax,0xc0029fe0
c00085c7:	eb 05                	jmp    c00085ce <ff_wtoupper+0x2f>
c00085c9:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c00085ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085d6:	8d 50 02             	lea    edx,[eax+0x2]
c00085d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085dd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085e0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085e5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085eb:	0f 84 f4 00 00 00    	je     c00086e5 <ff_wtoupper+0x146>
c00085f1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085f6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085fb:	0f 82 e4 00 00 00    	jb     c00086e5 <ff_wtoupper+0x146>
c0008601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008605:	8d 50 02             	lea    edx,[eax+0x2]
c0008608:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000860c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000860f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008614:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008619:	66 c1 e8 08          	shr    ax,0x8
c000861d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008622:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008629:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000862e:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008633:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008638:	01 ca                	add    edx,ecx
c000863a:	39 d0                	cmp    eax,edx
c000863c:	0f 8d 86 00 00 00    	jge    c00086c8 <ff_wtoupper+0x129>
c0008642:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008647:	83 f8 08             	cmp    eax,0x8
c000864a:	0f 87 94 00 00 00    	ja     c00086e4 <ff_wtoupper+0x145>
c0008650:	8b 04 85 e0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6120]
c0008657:	ff e0                	jmp    eax
c0008659:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000865e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008663:	29 c2                	sub    edx,eax
c0008665:	89 d0                	mov    eax,edx
c0008667:	01 c0                	add    eax,eax
c0008669:	89 c2                	mov    edx,eax
c000866b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866f:	01 d0                	add    eax,edx
c0008671:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008674:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008679:	eb 4b                	jmp    c00086c6 <ff_wtoupper+0x127>
c000867b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008680:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008684:	83 e0 01             	and    eax,0x1
c0008687:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000868c:	eb 38                	jmp    c00086c6 <ff_wtoupper+0x127>
c000868e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008694:	eb 30                	jmp    c00086c6 <ff_wtoupper+0x127>
c0008696:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000869c:	eb 28                	jmp    c00086c6 <ff_wtoupper+0x127>
c000869e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086a4:	eb 20                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086a6:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ac:	eb 18                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086ae:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086b4:	eb 10                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086b6:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086bc:	eb 08                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086be:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086c5:	90                   	nop
c00086c6:	eb 1c                	jmp    c00086e4 <ff_wtoupper+0x145>
c00086c8:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ce:	0f 85 fe fe ff ff    	jne    c00085d2 <ff_wtoupper+0x33>
c00086d4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086d9:	01 c0                	add    eax,eax
c00086db:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086df:	e9 ee fe ff ff       	jmp    c00085d2 <ff_wtoupper+0x33>
c00086e4:	90                   	nop
c00086e5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086f2:	83 c4 10             	add    esp,0x10
c00086f5:	c3                   	ret    

c00086f6 <psrc_set_converter>:
c00086f6:	56                   	push   esi
c00086f7:	89 d6                	mov    esi,edx
c00086f9:	53                   	push   ebx
c00086fa:	89 c3                	mov    ebx,eax
c00086fc:	83 ec 0c             	sub    esp,0xc
c00086ff:	52                   	push   edx
c0008700:	50                   	push   eax
c0008701:	e8 6f 55 00 00       	call   c000dc75 <sinc_set_converter>
c0008706:	83 c4 10             	add    esp,0x10
c0008709:	85 c0                	test   eax,eax
c000870b:	74 25                	je     c0008732 <psrc_set_converter+0x3c>
c000870d:	50                   	push   eax
c000870e:	50                   	push   eax
c000870f:	56                   	push   esi
c0008710:	53                   	push   ebx
c0008711:	e8 17 5d 00 00       	call   c000e42d <zoh_set_converter>
c0008716:	83 c4 10             	add    esp,0x10
c0008719:	85 c0                	test   eax,eax
c000871b:	74 15                	je     c0008732 <psrc_set_converter+0x3c>
c000871d:	51                   	push   ecx
c000871e:	51                   	push   ecx
c000871f:	56                   	push   esi
c0008720:	53                   	push   ebx
c0008721:	e8 0f 11 00 00       	call   c0009835 <linear_set_converter>
c0008726:	83 c4 10             	add    esp,0x10
c0008729:	ba 0a 00 00 00       	mov    edx,0xa
c000872e:	85 c0                	test   eax,eax
c0008730:	75 02                	jne    c0008734 <psrc_set_converter+0x3e>
c0008732:	31 d2                	xor    edx,edx
c0008734:	89 d0                	mov    eax,edx
c0008736:	5a                   	pop    edx
c0008737:	5b                   	pop    ebx
c0008738:	5e                   	pop    esi
c0008739:	c3                   	ret    

c000873a <src_delete>:
c000873a:	53                   	push   ebx
c000873b:	83 ec 08             	sub    esp,0x8
c000873e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008742:	85 db                	test   ebx,ebx
c0008744:	74 29                	je     c000876f <src_delete+0x35>
c0008746:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008749:	85 c0                	test   eax,eax
c000874b:	74 0c                	je     c0008759 <src_delete+0x1f>
c000874d:	83 ec 0c             	sub    esp,0xc
c0008750:	50                   	push   eax
c0008751:	e8 62 71 00 00       	call   c000f8b8 <free>
c0008756:	83 c4 10             	add    esp,0x10
c0008759:	50                   	push   eax
c000875a:	6a 3c                	push   0x3c
c000875c:	6a 00                	push   0x0
c000875e:	53                   	push   ebx
c000875f:	e8 08 80 ff ff       	call   c000076c <memset>
c0008764:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008767:	e8 4c 71 00 00       	call   c000f8b8 <free>
c000876c:	83 c4 10             	add    esp,0x10
c000876f:	31 c0                	xor    eax,eax
c0008771:	83 c4 08             	add    esp,0x8
c0008774:	5b                   	pop    ebx
c0008775:	c3                   	ret    

c0008776 <src_process>:
c0008776:	55                   	push   ebp
c0008777:	57                   	push   edi
c0008778:	56                   	push   esi
c0008779:	53                   	push   ebx
c000877a:	83 ec 1c             	sub    esp,0x1c
c000877d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008781:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008785:	85 ed                	test   ebp,ebp
c0008787:	0f 84 6f 01 00 00    	je     c00088fc <src_process+0x186>
c000878d:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008791:	0f 84 6c 01 00 00    	je     c0008903 <src_process+0x18d>
c0008797:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000879b:	0f 84 62 01 00 00    	je     c0008903 <src_process+0x18d>
c00087a1:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087a8:	0f 85 5c 01 00 00    	jne    c000890a <src_process+0x194>
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	0f 84 5b 01 00 00    	je     c0008911 <src_process+0x19b>
c00087b6:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087b8:	85 f6                	test   esi,esi
c00087ba:	0f 84 58 01 00 00    	je     c0008918 <src_process+0x1a2>
c00087c0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087c3:	85 ff                	test   edi,edi
c00087c5:	0f 84 4d 01 00 00    	je     c0008918 <src_process+0x1a2>
c00087cb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ce:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087d9:	68 00 00 70 3f       	push   0x3f700000
c00087de:	6a 00                	push   0x0
c00087e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e8:	e8 ca 05 02 00       	call   c0028db7 <__ltdf2>
c00087ed:	83 c4 10             	add    esp,0x10
c00087f0:	85 c0                	test   eax,eax
c00087f2:	0f 88 27 01 00 00    	js     c000891f <src_process+0x1a9>
c00087f8:	68 00 00 70 40       	push   0x40700000
c00087fd:	6a 00                	push   0x0
c00087ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008807:	e8 8d 05 02 00       	call   c0028d99 <__gtdf2>
c000880c:	83 c4 10             	add    esp,0x10
c000880f:	85 c0                	test   eax,eax
c0008811:	0f 8f 08 01 00 00    	jg     c000891f <src_process+0x1a9>
c0008817:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000881b:	79 07                	jns    c0008824 <src_process+0xae>
c000881d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008824:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008827:	85 c0                	test   eax,eax
c0008829:	79 50                	jns    c000887b <src_process+0x105>
c000882b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008832:	39 fe                	cmp    esi,edi
c0008834:	72 37                	jb     c000886d <src_process+0xf7>
c0008836:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000883d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008844:	68 00 00 70 3f       	push   0x3f700000
c0008849:	6a 00                	push   0x0
c000884b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000884e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008851:	e8 61 05 02 00       	call   c0028db7 <__ltdf2>
c0008856:	83 c4 10             	add    esp,0x10
c0008859:	85 c0                	test   eax,eax
c000885b:	79 37                	jns    c0008894 <src_process+0x11e>
c000885d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008861:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008865:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008868:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000886b:	eb 27                	jmp    c0008894 <src_process+0x11e>
c000886d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008870:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008874:	8d 04 86             	lea    eax,[esi+eax*4]
c0008877:	39 c7                	cmp    edi,eax
c0008879:	eb 0d                	jmp    c0008888 <src_process+0x112>
c000887b:	39 fe                	cmp    esi,edi
c000887d:	72 ee                	jb     c000886d <src_process+0xf7>
c000887f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008883:	8d 04 87             	lea    eax,[edi+eax*4]
c0008886:	39 c6                	cmp    esi,eax
c0008888:	73 ac                	jae    c0008836 <src_process+0xc0>
c000888a:	b8 10 00 00 00       	mov    eax,0x10
c000888f:	e9 90 00 00 00       	jmp    c0008924 <src_process+0x1ae>
c0008894:	83 ec 10             	sub    esp,0x10
c0008897:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000889a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000889d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088a3:	e8 14 fc 01 00       	call   c00284bc <__subdf3>
c00088a8:	83 c4 18             	add    esp,0x18
c00088ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088b3:	52                   	push   edx
c00088b4:	50                   	push   eax
c00088b5:	e8 96 06 02 00       	call   c0028f50 <fabs>
c00088ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088c2:	83 c4 10             	add    esp,0x10
c00088c5:	68 af 03 d2 3c       	push   0x3cd203af
c00088ca:	68 16 56 e7 9e       	push   0x9ee75616
c00088cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d7:	e8 db 04 02 00       	call   c0028db7 <__ltdf2>
c00088dc:	83 c4 10             	add    esp,0x10
c00088df:	85 c0                	test   eax,eax
c00088e1:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088e5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088e9:	79 05                	jns    c00088f0 <src_process+0x17a>
c00088eb:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088ee:	eb 03                	jmp    c00088f3 <src_process+0x17d>
c00088f0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088f3:	83 c4 1c             	add    esp,0x1c
c00088f6:	5b                   	pop    ebx
c00088f7:	5e                   	pop    esi
c00088f8:	5f                   	pop    edi
c00088f9:	5d                   	pop    ebp
c00088fa:	ff e0                	jmp    eax
c00088fc:	b8 02 00 00 00       	mov    eax,0x2
c0008901:	eb 21                	jmp    c0008924 <src_process+0x1ae>
c0008903:	b8 07 00 00 00       	mov    eax,0x7
c0008908:	eb 1a                	jmp    c0008924 <src_process+0x1ae>
c000890a:	b8 12 00 00 00       	mov    eax,0x12
c000890f:	eb 13                	jmp    c0008924 <src_process+0x1ae>
c0008911:	b8 03 00 00 00       	mov    eax,0x3
c0008916:	eb 0c                	jmp    c0008924 <src_process+0x1ae>
c0008918:	b8 04 00 00 00       	mov    eax,0x4
c000891d:	eb 05                	jmp    c0008924 <src_process+0x1ae>
c000891f:	b8 06 00 00 00       	mov    eax,0x6
c0008924:	83 c4 1c             	add    esp,0x1c
c0008927:	5b                   	pop    ebx
c0008928:	5e                   	pop    esi
c0008929:	5f                   	pop    edi
c000892a:	5d                   	pop    ebp
c000892b:	c3                   	ret    

c000892c <src_callback_read>:
c000892c:	55                   	push   ebp
c000892d:	57                   	push   edi
c000892e:	56                   	push   esi
c000892f:	53                   	push   ebx
c0008930:	83 ec 3c             	sub    esp,0x3c
c0008933:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008937:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000893b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000893f:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008943:	85 ed                	test   ebp,ebp
c0008945:	0f 8e 52 01 00 00    	jle    c0008a9d <src_callback_read+0x171>
c000894b:	85 db                	test   ebx,ebx
c000894d:	0f 84 4a 01 00 00    	je     c0008a9d <src_callback_read+0x171>
c0008953:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000895a:	74 0c                	je     c0008968 <src_callback_read+0x3c>
c000895c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008963:	e9 35 01 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c0008968:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000896c:	75 0c                	jne    c000897a <src_callback_read+0x4e>
c000896e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008975:	e9 23 01 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c000897a:	51                   	push   ecx
c000897b:	6a 24                	push   0x24
c000897d:	6a 00                	push   0x0
c000897f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008983:	50                   	push   eax
c0008984:	e8 e3 7d ff ff       	call   c000076c <memset>
c0008989:	83 c4 10             	add    esp,0x10
c000898c:	68 00 00 70 3f       	push   0x3f700000
c0008991:	6a 00                	push   0x0
c0008993:	57                   	push   edi
c0008994:	56                   	push   esi
c0008995:	e8 1d 04 02 00       	call   c0028db7 <__ltdf2>
c000899a:	83 c4 10             	add    esp,0x10
c000899d:	85 c0                	test   eax,eax
c000899f:	78 3e                	js     c00089df <src_callback_read+0xb3>
c00089a1:	68 00 00 70 40       	push   0x40700000
c00089a6:	6a 00                	push   0x0
c00089a8:	57                   	push   edi
c00089a9:	56                   	push   esi
c00089aa:	e8 ea 03 02 00       	call   c0028d99 <__gtdf2>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	85 c0                	test   eax,eax
c00089b4:	7f 29                	jg     c00089df <src_callback_read+0xb3>
c00089b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089ba:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089c2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089c6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089c9:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089d1:	31 f6                	xor    esi,esi
c00089d3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089da:	e9 97 00 00 00       	jmp    c0008a76 <src_callback_read+0x14a>
c00089df:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089e6:	e9 b2 00 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c00089eb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089f3:	52                   	push   edx
c00089f4:	52                   	push   edx
c00089f5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f9:	50                   	push   eax
c00089fa:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089fd:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a08:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a0c:	83 c4 10             	add    esp,0x10
c0008a0f:	85 c0                	test   eax,eax
c0008a11:	75 08                	jne    c0008a1b <src_callback_read+0xef>
c0008a13:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a1b:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a22:	50                   	push   eax
c0008a23:	50                   	push   eax
c0008a24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a28:	50                   	push   eax
c0008a29:	53                   	push   ebx
c0008a2a:	e8 47 fd ff ff       	call   c0008776 <src_process>
c0008a2f:	83 c4 10             	add    esp,0x10
c0008a32:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a39:	85 c0                	test   eax,eax
c0008a3b:	75 49                	jne    c0008a86 <src_callback_read+0x15a>
c0008a3d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a41:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a44:	89 f9                	mov    ecx,edi
c0008a46:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a4a:	0f af ca             	imul   ecx,edx
c0008a4d:	c1 e1 02             	shl    ecx,0x2
c0008a50:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a58:	0f af d1             	imul   edx,ecx
c0008a5b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a5f:	c1 e2 02             	shl    edx,0x2
c0008a62:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a66:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a69:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a6e:	74 12                	je     c0008a82 <src_callback_read+0x156>
c0008a70:	39 d5                	cmp    ebp,edx
c0008a72:	7e 14                	jle    c0008a88 <src_callback_read+0x15c>
c0008a74:	89 d6                	mov    esi,edx
c0008a76:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a7b:	75 9e                	jne    c0008a1b <src_callback_read+0xef>
c0008a7d:	e9 69 ff ff ff       	jmp    c00089eb <src_callback_read+0xbf>
c0008a82:	85 c9                	test   ecx,ecx
c0008a84:	75 ea                	jne    c0008a70 <src_callback_read+0x144>
c0008a86:	89 f2                	mov    edx,esi
c0008a88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a8c:	85 c0                	test   eax,eax
c0008a8e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a95:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a98:	74 05                	je     c0008a9f <src_callback_read+0x173>
c0008a9a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9d:	31 d2                	xor    edx,edx
c0008a9f:	83 c4 3c             	add    esp,0x3c
c0008aa2:	89 d0                	mov    eax,edx
c0008aa4:	5b                   	pop    ebx
c0008aa5:	5e                   	pop    esi
c0008aa6:	5f                   	pop    edi
c0008aa7:	5d                   	pop    ebp
c0008aa8:	c3                   	ret    

c0008aa9 <src_set_ratio>:
c0008aa9:	57                   	push   edi
c0008aaa:	ba 02 00 00 00       	mov    edx,0x2
c0008aaf:	56                   	push   esi
c0008ab0:	53                   	push   ebx
c0008ab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ab9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008abd:	85 db                	test   ebx,ebx
c0008abf:	74 4c                	je     c0008b0d <src_set_ratio+0x64>
c0008ac1:	ba 07 00 00 00       	mov    edx,0x7
c0008ac6:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aca:	74 41                	je     c0008b0d <src_set_ratio+0x64>
c0008acc:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ad0:	74 3b                	je     c0008b0d <src_set_ratio+0x64>
c0008ad2:	68 00 00 70 3f       	push   0x3f700000
c0008ad7:	6a 00                	push   0x0
c0008ad9:	57                   	push   edi
c0008ada:	56                   	push   esi
c0008adb:	e8 d7 02 02 00       	call   c0028db7 <__ltdf2>
c0008ae0:	83 c4 10             	add    esp,0x10
c0008ae3:	ba 06 00 00 00       	mov    edx,0x6
c0008ae8:	85 c0                	test   eax,eax
c0008aea:	78 21                	js     c0008b0d <src_set_ratio+0x64>
c0008aec:	68 00 00 70 40       	push   0x40700000
c0008af1:	6a 00                	push   0x0
c0008af3:	57                   	push   edi
c0008af4:	56                   	push   esi
c0008af5:	e8 9f 02 02 00       	call   c0028d99 <__gtdf2>
c0008afa:	83 c4 10             	add    esp,0x10
c0008afd:	ba 06 00 00 00       	mov    edx,0x6
c0008b02:	85 c0                	test   eax,eax
c0008b04:	7f 07                	jg     c0008b0d <src_set_ratio+0x64>
c0008b06:	89 33                	mov    DWORD PTR [ebx],esi
c0008b08:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b0b:	31 d2                	xor    edx,edx
c0008b0d:	5b                   	pop    ebx
c0008b0e:	89 d0                	mov    eax,edx
c0008b10:	5e                   	pop    esi
c0008b11:	5f                   	pop    edi
c0008b12:	c3                   	ret    

c0008b13 <src_get_channels>:
c0008b13:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b17:	b8 02 00 00 00       	mov    eax,0x2
c0008b1c:	85 d2                	test   edx,edx
c0008b1e:	74 14                	je     c0008b34 <src_get_channels+0x21>
c0008b20:	b8 07 00 00 00       	mov    eax,0x7
c0008b25:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b29:	74 09                	je     c0008b34 <src_get_channels+0x21>
c0008b2b:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b2f:	74 03                	je     c0008b34 <src_get_channels+0x21>
c0008b31:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b34:	c3                   	ret    

c0008b35 <src_reset>:
c0008b35:	53                   	push   ebx
c0008b36:	b8 02 00 00 00       	mov    eax,0x2
c0008b3b:	83 ec 08             	sub    esp,0x8
c0008b3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b42:	85 db                	test   ebx,ebx
c0008b44:	74 36                	je     c0008b7c <src_reset+0x47>
c0008b46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b49:	85 c0                	test   eax,eax
c0008b4b:	74 09                	je     c0008b56 <src_reset+0x21>
c0008b4d:	83 ec 0c             	sub    esp,0xc
c0008b50:	53                   	push   ebx
c0008b51:	ff d0                	call   eax
c0008b53:	83 c4 10             	add    esp,0x10
c0008b56:	31 c0                	xor    eax,eax
c0008b58:	31 d2                	xor    edx,edx
c0008b5a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b5d:	89 03                	mov    DWORD PTR [ebx],eax
c0008b5f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b62:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b65:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b6c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b73:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b7a:	31 c0                	xor    eax,eax
c0008b7c:	83 c4 08             	add    esp,0x8
c0008b7f:	5b                   	pop    ebx
c0008b80:	c3                   	ret    

c0008b81 <src_new>:
c0008b81:	57                   	push   edi
c0008b82:	56                   	push   esi
c0008b83:	53                   	push   ebx
c0008b84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b88:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b8c:	85 f6                	test   esi,esi
c0008b8e:	74 73                	je     c0008c03 <src_new+0x82>
c0008b90:	85 ff                	test   edi,edi
c0008b92:	7f 08                	jg     c0008b9c <src_new+0x1b>
c0008b94:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b9a:	eb 1e                	jmp    c0008bba <src_new+0x39>
c0008b9c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008ba2:	50                   	push   eax
c0008ba3:	50                   	push   eax
c0008ba4:	6a 3c                	push   0x3c
c0008ba6:	6a 01                	push   0x1
c0008ba8:	e8 2b 6d 00 00       	call   c000f8d8 <calloc>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	89 c3                	mov    ebx,eax
c0008bb2:	85 c0                	test   eax,eax
c0008bb4:	75 10                	jne    c0008bc6 <src_new+0x45>
c0008bb6:	85 f6                	test   esi,esi
c0008bb8:	75 04                	jne    c0008bbe <src_new+0x3d>
c0008bba:	31 db                	xor    ebx,ebx
c0008bbc:	eb 4b                	jmp    c0008c09 <src_new+0x88>
c0008bbe:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bc4:	eb 43                	jmp    c0008c09 <src_new+0x88>
c0008bc6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bc9:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bd4:	e8 1d fb ff ff       	call   c00086f6 <psrc_set_converter>
c0008bd9:	85 c0                	test   eax,eax
c0008bdb:	74 18                	je     c0008bf5 <src_new+0x74>
c0008bdd:	85 f6                	test   esi,esi
c0008bdf:	74 06                	je     c0008be7 <src_new+0x66>
c0008be1:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008be7:	83 ec 0c             	sub    esp,0xc
c0008bea:	53                   	push   ebx
c0008beb:	31 db                	xor    ebx,ebx
c0008bed:	e8 c6 6c 00 00       	call   c000f8b8 <free>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	53                   	push   ebx
c0008bf9:	e8 37 ff ff ff       	call   c0008b35 <src_reset>
c0008bfe:	83 c4 10             	add    esp,0x10
c0008c01:	eb 06                	jmp    c0008c09 <src_new+0x88>
c0008c03:	85 ff                	test   edi,edi
c0008c05:	7f 9b                	jg     c0008ba2 <src_new+0x21>
c0008c07:	eb b1                	jmp    c0008bba <src_new+0x39>
c0008c09:	89 d8                	mov    eax,ebx
c0008c0b:	5b                   	pop    ebx
c0008c0c:	5e                   	pop    esi
c0008c0d:	5f                   	pop    edi
c0008c0e:	c3                   	ret    

c0008c0f <src_callback_new>:
c0008c0f:	56                   	push   esi
c0008c10:	53                   	push   ebx
c0008c11:	53                   	push   ebx
c0008c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1a:	85 f6                	test   esi,esi
c0008c1c:	75 0e                	jne    c0008c2c <src_callback_new+0x1d>
c0008c1e:	31 db                	xor    ebx,ebx
c0008c20:	85 c0                	test   eax,eax
c0008c22:	74 47                	je     c0008c6b <src_callback_new+0x5c>
c0008c24:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c2a:	eb 3f                	jmp    c0008c6b <src_callback_new+0x5c>
c0008c2c:	85 c0                	test   eax,eax
c0008c2e:	74 06                	je     c0008c36 <src_callback_new+0x27>
c0008c30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c36:	51                   	push   ecx
c0008c37:	50                   	push   eax
c0008c38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c40:	e8 3c ff ff ff       	call   c0008b81 <src_new>
c0008c45:	83 c4 10             	add    esp,0x10
c0008c48:	89 c3                	mov    ebx,eax
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 1d                	je     c0008c6b <src_callback_new+0x5c>
c0008c4e:	83 ec 0c             	sub    esp,0xc
c0008c51:	50                   	push   eax
c0008c52:	e8 de fe ff ff       	call   c0008b35 <src_reset>
c0008c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c5b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c62:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c65:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c68:	83 c4 10             	add    esp,0x10
c0008c6b:	89 d8                	mov    eax,ebx
c0008c6d:	5a                   	pop    edx
c0008c6e:	5b                   	pop    ebx
c0008c6f:	5e                   	pop    esi
c0008c70:	c3                   	ret    

c0008c71 <src_get_name>:
c0008c71:	53                   	push   ebx
c0008c72:	83 ec 14             	sub    esp,0x14
c0008c75:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c79:	53                   	push   ebx
c0008c7a:	e8 d0 4f 00 00       	call   c000dc4f <sinc_get_name>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	75 1d                	jne    c0008ca3 <src_get_name+0x32>
c0008c86:	83 ec 0c             	sub    esp,0xc
c0008c89:	53                   	push   ebx
c0008c8a:	e8 80 57 00 00       	call   c000e40f <zoh_get_name>
c0008c8f:	83 c4 10             	add    esp,0x10
c0008c92:	85 c0                	test   eax,eax
c0008c94:	75 0d                	jne    c0008ca3 <src_get_name+0x32>
c0008c96:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c9a:	83 c4 08             	add    esp,0x8
c0008c9d:	5b                   	pop    ebx
c0008c9e:	e9 74 0b 00 00       	jmp    c0009817 <linear_get_name>
c0008ca3:	83 c4 08             	add    esp,0x8
c0008ca6:	5b                   	pop    ebx
c0008ca7:	c3                   	ret    

c0008ca8 <src_get_description>:
c0008ca8:	53                   	push   ebx
c0008ca9:	83 ec 14             	sub    esp,0x14
c0008cac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cb0:	53                   	push   ebx
c0008cb1:	e8 ac 4f 00 00       	call   c000dc62 <sinc_get_description>
c0008cb6:	83 c4 10             	add    esp,0x10
c0008cb9:	85 c0                	test   eax,eax
c0008cbb:	75 1d                	jne    c0008cda <src_get_description+0x32>
c0008cbd:	83 ec 0c             	sub    esp,0xc
c0008cc0:	53                   	push   ebx
c0008cc1:	e8 58 57 00 00       	call   c000e41e <zoh_get_description>
c0008cc6:	83 c4 10             	add    esp,0x10
c0008cc9:	85 c0                	test   eax,eax
c0008ccb:	75 0d                	jne    c0008cda <src_get_description+0x32>
c0008ccd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cd1:	83 c4 08             	add    esp,0x8
c0008cd4:	5b                   	pop    ebx
c0008cd5:	e9 4c 0b 00 00       	jmp    c0009826 <linear_get_description>
c0008cda:	83 c4 08             	add    esp,0x8
c0008cdd:	5b                   	pop    ebx
c0008cde:	c3                   	ret    

c0008cdf <src_get_version>:
c0008cdf:	b8 e0 a2 02 c0       	mov    eax,0xc002a2e0
c0008ce4:	c3                   	ret    

c0008ce5 <src_is_valid_ratio>:
c0008ce5:	83 ec 1c             	sub    esp,0x1c
c0008ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf8:	68 00 00 70 3f       	push   0x3f700000
c0008cfd:	6a 00                	push   0x0
c0008cff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d07:	e8 ab 00 02 00       	call   c0028db7 <__ltdf2>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	31 d2                	xor    edx,edx
c0008d11:	85 c0                	test   eax,eax
c0008d13:	78 1e                	js     c0008d33 <src_is_valid_ratio+0x4e>
c0008d15:	68 00 00 70 40       	push   0x40700000
c0008d1a:	6a 00                	push   0x0
c0008d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d24:	e8 70 00 02 00       	call   c0028d99 <__gtdf2>
c0008d29:	31 d2                	xor    edx,edx
c0008d2b:	83 c4 10             	add    esp,0x10
c0008d2e:	85 c0                	test   eax,eax
c0008d30:	0f 9e c2             	setle  dl
c0008d33:	89 d0                	mov    eax,edx
c0008d35:	83 c4 1c             	add    esp,0x1c
c0008d38:	c3                   	ret    

c0008d39 <src_error>:
c0008d39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d3d:	31 c0                	xor    eax,eax
c0008d3f:	85 d2                	test   edx,edx
c0008d41:	74 03                	je     c0008d46 <src_error+0xd>
c0008d43:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d46:	c3                   	ret    

c0008d47 <src_strerror>:
c0008d47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d4b:	31 c0                	xor    eax,eax
c0008d4d:	83 fa 17             	cmp    edx,0x17
c0008d50:	77 07                	ja     c0008d59 <src_strerror+0x12>
c0008d52:	8b 04 95 40 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58c0]
c0008d59:	c3                   	ret    

c0008d5a <src_simple>:
c0008d5a:	56                   	push   esi
c0008d5b:	53                   	push   ebx
c0008d5c:	83 ec 18             	sub    esp,0x18
c0008d5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d63:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d67:	50                   	push   eax
c0008d68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d70:	e8 0c fe ff ff       	call   c0008b81 <src_new>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	85 c0                	test   eax,eax
c0008d7a:	75 06                	jne    c0008d82 <src_simple+0x28>
c0008d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d80:	eb 25                	jmp    c0008da7 <src_simple+0x4d>
c0008d82:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d89:	89 c3                	mov    ebx,eax
c0008d8b:	50                   	push   eax
c0008d8c:	50                   	push   eax
c0008d8d:	56                   	push   esi
c0008d8e:	53                   	push   ebx
c0008d8f:	e8 e2 f9 ff ff       	call   c0008776 <src_process>
c0008d94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d9b:	e8 9a f9 ff ff       	call   c000873a <src_delete>
c0008da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	83 c4 14             	add    esp,0x14
c0008daa:	5b                   	pop    ebx
c0008dab:	5e                   	pop    esi
c0008dac:	c3                   	ret    

c0008dad <src_short_to_float_array>:
c0008dad:	53                   	push   ebx
c0008dae:	83 ec 18             	sub    esp,0x18
c0008db1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008db5:	85 db                	test   ebx,ebx
c0008db7:	74 54                	je     c0008e0d <src_short_to_float_array+0x60>
c0008db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dbd:	4b                   	dec    ebx
c0008dbe:	83 ec 0c             	sub    esp,0xc
c0008dc1:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dc5:	50                   	push   eax
c0008dc6:	e8 80 fd 01 00       	call   c0028b4b <__floatsidf>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dd6:	68 00 00 00 3f       	push   0x3f000000
c0008ddb:	6a 00                	push   0x0
c0008ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de5:	e8 fe f6 01 00       	call   c00284e8 <__muldf3>
c0008dea:	59                   	pop    ecx
c0008deb:	59                   	pop    ecx
c0008dec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008df0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008df4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dfc:	e8 ba ff 01 00       	call   c0028dbb <__truncdfsf2>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e08:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e0b:	eb a8                	jmp    c0008db5 <src_short_to_float_array+0x8>
c0008e0d:	83 c4 18             	add    esp,0x18
c0008e10:	5b                   	pop    ebx
c0008e11:	c3                   	ret    

c0008e12 <src_float_to_short_array>:
c0008e12:	56                   	push   esi
c0008e13:	53                   	push   ebx
c0008e14:	83 ec 14             	sub    esp,0x14
c0008e17:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e1f:	85 db                	test   ebx,ebx
c0008e21:	0f 84 a4 00 00 00    	je     c0008ecb <src_float_to_short_array+0xb9>
c0008e27:	83 ec 0c             	sub    esp,0xc
c0008e2a:	4b                   	dec    ebx
c0008e2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e2f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e32:	e8 a8 00 02 00       	call   c0028edf <__extendsfdf2>
c0008e37:	83 c4 10             	add    esp,0x10
c0008e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e42:	68 00 00 e0 41       	push   0x41e00000
c0008e47:	6a 00                	push   0x0
c0008e49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e51:	e8 92 f6 01 00       	call   c00284e8 <__muldf3>
c0008e56:	83 c4 10             	add    esp,0x10
c0008e59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e61:	68 ff ff df 41       	push   0x41dfffff
c0008e66:	68 00 00 c0 ff       	push   0xffc00000
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	e8 3d ff 01 00       	call   c0028db5 <__gedf2>
c0008e78:	83 c4 10             	add    esp,0x10
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	78 08                	js     c0008e87 <src_float_to_short_array+0x75>
c0008e7f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e85:	eb 98                	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008e87:	68 00 00 e0 c1       	push   0xc1e00000
c0008e8c:	6a 00                	push   0x0
c0008e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e96:	e8 1e ff 01 00       	call   c0028db9 <__ledf2>
c0008e9b:	83 c4 10             	add    esp,0x10
c0008e9e:	85 c0                	test   eax,eax
c0008ea0:	7f 0b                	jg     c0008ead <src_float_to_short_array+0x9b>
c0008ea2:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ea8:	e9 72 ff ff ff       	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008ead:	50                   	push   eax
c0008eae:	50                   	push   eax
c0008eaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb7:	e8 b4 00 02 00       	call   c0028f70 <lrint>
c0008ebc:	83 c4 10             	add    esp,0x10
c0008ebf:	c1 f8 10             	sar    eax,0x10
c0008ec2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ec6:	e9 54 ff ff ff       	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008ecb:	83 c4 14             	add    esp,0x14
c0008ece:	5b                   	pop    ebx
c0008ecf:	5e                   	pop    esi
c0008ed0:	c3                   	ret    

c0008ed1 <src_int_to_float_array>:
c0008ed1:	53                   	push   ebx
c0008ed2:	83 ec 18             	sub    esp,0x18
c0008ed5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ed9:	85 db                	test   ebx,ebx
c0008edb:	74 52                	je     c0008f2f <src_int_to_float_array+0x5e>
c0008edd:	83 ec 0c             	sub    esp,0xc
c0008ee0:	4b                   	dec    ebx
c0008ee1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ee5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ee8:	e8 5e fc 01 00       	call   c0028b4b <__floatsidf>
c0008eed:	83 c4 10             	add    esp,0x10
c0008ef0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ef4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ef8:	68 00 00 00 3e       	push   0x3e000000
c0008efd:	6a 00                	push   0x0
c0008eff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f07:	e8 dc f5 01 00       	call   c00284e8 <__muldf3>
c0008f0c:	59                   	pop    ecx
c0008f0d:	59                   	pop    ecx
c0008f0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1e:	e8 98 fe 01 00       	call   c0028dbb <__truncdfsf2>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f2a:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f2d:	eb aa                	jmp    c0008ed9 <src_int_to_float_array+0x8>
c0008f2f:	83 c4 18             	add    esp,0x18
c0008f32:	5b                   	pop    ebx
c0008f33:	c3                   	ret    

c0008f34 <src_float_to_int_array>:
c0008f34:	56                   	push   esi
c0008f35:	53                   	push   ebx
c0008f36:	83 ec 14             	sub    esp,0x14
c0008f39:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f3d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f41:	85 db                	test   ebx,ebx
c0008f43:	0f 84 a2 00 00 00    	je     c0008feb <src_float_to_int_array+0xb7>
c0008f49:	83 ec 0c             	sub    esp,0xc
c0008f4c:	4b                   	dec    ebx
c0008f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f51:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f54:	e8 86 ff 01 00       	call   c0028edf <__extendsfdf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f64:	68 00 00 e0 41       	push   0x41e00000
c0008f69:	6a 00                	push   0x0
c0008f6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f73:	e8 70 f5 01 00       	call   c00284e8 <__muldf3>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f83:	68 ff ff df 41       	push   0x41dfffff
c0008f88:	68 00 00 c0 ff       	push   0xffc00000
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	e8 1b fe 01 00       	call   c0028db5 <__gedf2>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	85 c0                	test   eax,eax
c0008f9f:	78 09                	js     c0008faa <src_float_to_int_array+0x76>
c0008fa1:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fa8:	eb 97                	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008faa:	68 00 00 e0 c1       	push   0xc1e00000
c0008faf:	6a 00                	push   0x0
c0008fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb9:	e8 fb fd 01 00       	call   c0028db9 <__ledf2>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	85 c0                	test   eax,eax
c0008fc3:	7f 0c                	jg     c0008fd1 <src_float_to_int_array+0x9d>
c0008fc5:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fcc:	e9 70 ff ff ff       	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008fd1:	50                   	push   eax
c0008fd2:	50                   	push   eax
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	e8 90 ff 01 00       	call   c0028f70 <lrint>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fe6:	e9 56 ff ff ff       	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008feb:	83 c4 14             	add    esp,0x14
c0008fee:	5b                   	pop    ebx
c0008fef:	5e                   	pop    esi
c0008ff0:	c3                   	ret    

c0008ff1 <linear_vari_process>:
c0008ff1:	55                   	push   ebp
c0008ff2:	31 d2                	xor    edx,edx
c0008ff4:	57                   	push   edi
c0008ff5:	56                   	push   esi
c0008ff6:	53                   	push   ebx
c0008ff7:	83 ec 3c             	sub    esp,0x3c
c0008ffa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ffe:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009002:	0f 8e d3 07 00 00    	jle    c00097db <linear_vari_process+0x7ea>
c0009008:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000900c:	ba 05 00 00 00       	mov    edx,0x5
c0009011:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009014:	85 db                	test   ebx,ebx
c0009016:	0f 84 bf 07 00 00    	je     c00097db <linear_vari_process+0x7ea>
c000901c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000901f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009023:	74 19                	je     c000903e <linear_vari_process+0x4d>
c0009025:	31 d2                	xor    edx,edx
c0009027:	39 c2                	cmp    edx,eax
c0009029:	7d 0c                	jge    c0009037 <linear_vari_process+0x46>
c000902b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000902d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009030:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009034:	42                   	inc    edx
c0009035:	eb f0                	jmp    c0009027 <linear_vari_process+0x36>
c0009037:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000903e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009041:	0f af d0             	imul   edx,eax
c0009044:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009047:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000904b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009052:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009055:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000905c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009060:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009063:	8b 00                	mov    eax,DWORD PTR [eax]
c0009065:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009069:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906d:	68 00 00 70 3f       	push   0x3f700000
c0009072:	6a 00                	push   0x0
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907c:	e8 36 fd 01 00       	call   c0028db7 <__ltdf2>
c0009081:	83 c4 10             	add    esp,0x10
c0009084:	ba 16 00 00 00       	mov    edx,0x16
c0009089:	85 c0                	test   eax,eax
c000908b:	0f 88 4a 07 00 00    	js     c00097db <linear_vari_process+0x7ea>
c0009091:	68 00 00 70 40       	push   0x40700000
c0009096:	6a 00                	push   0x0
c0009098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a0:	e8 f4 fc 01 00       	call   c0028d99 <__gtdf2>
c00090a5:	83 c4 10             	add    esp,0x10
c00090a8:	ba 16 00 00 00       	mov    edx,0x16
c00090ad:	85 c0                	test   eax,eax
c00090af:	0f 8f 26 07 00 00    	jg     c00097db <linear_vari_process+0x7ea>
c00090b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090b9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090c7:	68 00 00 f0 3f       	push   0x3ff00000
c00090cc:	6a 00                	push   0x0
c00090ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d6:	e8 dc fc 01 00       	call   c0028db7 <__ltdf2>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	85 c0                	test   eax,eax
c00090e0:	0f 89 89 02 00 00    	jns    c000936f <linear_vari_process+0x37e>
c00090e6:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090e9:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090ec:	0f 8d 7d 02 00 00    	jge    c000936f <linear_vari_process+0x37e>
c00090f2:	83 ec 0c             	sub    esp,0xc
c00090f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f8:	e8 4e fa 01 00       	call   c0028b4b <__floatsidf>
c00090fd:	83 c4 10             	add    esp,0x10
c0009100:	89 04 24             	mov    DWORD PTR [esp],eax
c0009103:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009107:	68 00 00 f0 3f       	push   0x3ff00000
c000910c:	6a 00                	push   0x0
c000910e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009116:	e8 50 ed 01 00       	call   c0027e6b <__adddf3>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009122:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009130:	e8 b3 f3 01 00       	call   c00284e8 <__muldf3>
c0009135:	5d                   	pop    ebp
c0009136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000913a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000913e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009141:	e8 05 fa 01 00       	call   c0028b4b <__floatsidf>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009151:	52                   	push   edx
c0009152:	50                   	push   eax
c0009153:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009157:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915b:	e8 0b ed 01 00       	call   c0027e6b <__adddf3>
c0009160:	59                   	pop    ecx
c0009161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009165:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009169:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000916c:	e8 da f9 01 00       	call   c0028b4b <__floatsidf>
c0009171:	83 c4 10             	add    esp,0x10
c0009174:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009178:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917c:	52                   	push   edx
c000917d:	50                   	push   eax
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 2a fc 01 00       	call   c0028db5 <__gedf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	0f 89 d9 01 00 00    	jns    c000936f <linear_vari_process+0x37e>
c0009196:	85 ff                	test   edi,edi
c0009198:	0f 8e f4 00 00 00    	jle    c0009292 <linear_vari_process+0x2a1>
c000919e:	83 ec 10             	sub    esp,0x10
c00091a1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091a4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091a7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091ae:	ff 30                	push   DWORD PTR [eax]
c00091b0:	e8 07 f3 01 00       	call   c00284bc <__subdf3>
c00091b5:	83 c4 18             	add    esp,0x18
c00091b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091c0:	52                   	push   edx
c00091c1:	50                   	push   eax
c00091c2:	e8 89 fd 01 00       	call   c0028f50 <fabs>
c00091c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091d7:	68 23 42 92 0c       	push   0xc924223
c00091dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e4:	e8 b0 fb 01 00       	call   c0028d99 <__gtdf2>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	85 c0                	test   eax,eax
c00091ee:	0f 8e 9e 00 00 00    	jle    c0009292 <linear_vari_process+0x2a1>
c00091f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009201:	89 04 24             	mov    DWORD PTR [esp],eax
c0009204:	52                   	push   edx
c0009205:	50                   	push   eax
c0009206:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009209:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000920c:	e8 ab f2 01 00       	call   c00284bc <__subdf3>
c0009211:	59                   	pop    ecx
c0009212:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009216:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000921a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000921d:	e8 29 f9 01 00       	call   c0028b4b <__floatsidf>
c0009222:	83 c4 10             	add    esp,0x10
c0009225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009229:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000922d:	52                   	push   edx
c000922e:	50                   	push   eax
c000922f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009237:	e8 ac f2 01 00       	call   c00284e8 <__muldf3>
c000923c:	5f                   	pop    edi
c000923d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009241:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009245:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009248:	e8 fe f8 01 00       	call   c0028b4b <__floatsidf>
c000924d:	83 c4 10             	add    esp,0x10
c0009250:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009254:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009258:	52                   	push   edx
c0009259:	50                   	push   eax
c000925a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	e8 65 f5 01 00       	call   c00287cc <__divdf3>
c0009267:	83 c4 10             	add    esp,0x10
c000926a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000926e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009272:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009276:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000927a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009282:	e8 e4 eb 01 00       	call   c0027e6b <__adddf3>
c0009287:	83 c4 10             	add    esp,0x10
c000928a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009292:	31 ff                	xor    edi,edi
c0009294:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009297:	0f 8e 9d 00 00 00    	jle    c000933a <linear_vari_process+0x349>
c000929d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092a0:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092a4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092a7:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00092b0:	52                   	push   edx
c00092b1:	52                   	push   edx
c00092b2:	55                   	push   ebp
c00092b3:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092b6:	47                   	inc    edi
c00092b7:	e8 44 e5 01 00       	call   c0027800 <__subsf3>
c00092bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00092bf:	e8 1b fc 01 00       	call   c0028edf <__extendsfdf2>
c00092c4:	83 c4 10             	add    esp,0x10
c00092c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092df:	e8 04 f2 01 00       	call   c00284e8 <__muldf3>
c00092e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092ef:	e8 eb fb 01 00       	call   c0028edf <__extendsfdf2>
c00092f4:	83 c4 10             	add    esp,0x10
c00092f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092ff:	52                   	push   edx
c0009300:	50                   	push   eax
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009309:	e8 5d eb 01 00       	call   c0027e6b <__adddf3>
c000930e:	59                   	pop    ecx
c000930f:	5d                   	pop    ebp
c0009310:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009314:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009318:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009320:	e8 96 fa 01 00       	call   c0028dbb <__truncdfsf2>
c0009325:	83 c4 10             	add    esp,0x10
c0009328:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000932b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000932f:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009332:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009335:	e9 5a ff ff ff       	jmp    c0009294 <linear_vari_process+0x2a3>
c000933a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	68 00 00 f0 3f       	push   0x3ff00000
c0009347:	6a 00                	push   0x0
c0009349:	e8 7e f4 01 00       	call   c00287cc <__divdf3>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	89 04 24             	mov    DWORD PTR [esp],eax
c0009354:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009358:	52                   	push   edx
c0009359:	50                   	push   eax
c000935a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009362:	e8 04 eb 01 00       	call   c0027e6b <__adddf3>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	e9 50 fd ff ff       	jmp    c00090bf <linear_vari_process+0xce>
c000936f:	50                   	push   eax
c0009370:	50                   	push   eax
c0009371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009379:	e8 f2 fb 01 00       	call   c0028f70 <lrint>
c000937e:	83 ec 0c             	sub    esp,0xc
c0009381:	50                   	push   eax
c0009382:	e8 c4 f7 01 00       	call   c0028b4b <__floatsidf>
c0009387:	83 c4 10             	add    esp,0x10
c000938a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000938e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009392:	52                   	push   edx
c0009393:	50                   	push   eax
c0009394:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009398:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000939c:	e8 1b f1 01 00       	call   c00284bc <__subdf3>
c00093a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093a9:	83 c4 20             	add    esp,0x20
c00093ac:	6a 00                	push   0x0
c00093ae:	6a 00                	push   0x0
c00093b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b8:	e8 fa f9 01 00       	call   c0028db7 <__ltdf2>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	85 c0                	test   eax,eax
c00093c2:	79 1e                	jns    c00093e2 <linear_vari_process+0x3f1>
c00093c4:	68 00 00 f0 3f       	push   0x3ff00000
c00093c9:	6a 00                	push   0x0
c00093cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d3:	e8 93 ea 01 00       	call   c0027e6b <__adddf3>
c00093d8:	83 c4 10             	add    esp,0x10
c00093db:	89 04 24             	mov    DWORD PTR [esp],eax
c00093de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093e5:	83 ec 10             	sub    esp,0x10
c00093e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f8:	e8 bf f0 01 00       	call   c00284bc <__subdf3>
c00093fd:	83 c4 18             	add    esp,0x18
c0009400:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009404:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009408:	52                   	push   edx
c0009409:	50                   	push   eax
c000940a:	e8 61 fb 01 00       	call   c0028f70 <lrint>
c000940f:	83 c4 10             	add    esp,0x10
c0009412:	0f af f8             	imul   edi,eax
c0009415:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009418:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000941b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000941e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009421:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009424:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009428:	0f 8d 13 03 00 00    	jge    c0009741 <linear_vari_process+0x750>
c000942e:	83 ec 0c             	sub    esp,0xc
c0009431:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009434:	e8 12 f7 01 00       	call   c0028b4b <__floatsidf>
c0009439:	83 c4 10             	add    esp,0x10
c000943c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009444:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009448:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000944c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009454:	e8 8f f0 01 00       	call   c00284e8 <__muldf3>
c0009459:	89 3c 24             	mov    DWORD PTR [esp],edi
c000945c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009460:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009464:	e8 e2 f6 01 00       	call   c0028b4b <__floatsidf>
c0009469:	83 c4 10             	add    esp,0x10
c000946c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009470:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009474:	52                   	push   edx
c0009475:	50                   	push   eax
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947e:	e8 e8 e9 01 00       	call   c0027e6b <__adddf3>
c0009483:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948e:	e8 b8 f6 01 00       	call   c0028b4b <__floatsidf>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000949a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949e:	52                   	push   edx
c000949f:	50                   	push   eax
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 0a f9 01 00       	call   c0028db7 <__ltdf2>
c00094ad:	83 c4 10             	add    esp,0x10
c00094b0:	85 c0                	test   eax,eax
c00094b2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094b6:	0f 89 85 02 00 00    	jns    c0009741 <linear_vari_process+0x750>
c00094bc:	85 c9                	test   ecx,ecx
c00094be:	0f 8e f5 00 00 00    	jle    c00095b9 <linear_vari_process+0x5c8>
c00094c4:	83 ec 10             	sub    esp,0x10
c00094c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094d4:	ff 30                	push   DWORD PTR [eax]
c00094d6:	e8 e1 ef 01 00       	call   c00284bc <__subdf3>
c00094db:	83 c4 18             	add    esp,0x18
c00094de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e6:	52                   	push   edx
c00094e7:	50                   	push   eax
c00094e8:	e8 63 fa 01 00       	call   c0028f50 <fabs>
c00094ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094f5:	83 c4 10             	add    esp,0x10
c00094f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094fd:	68 23 42 92 0c       	push   0xc924223
c0009502:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000950a:	e8 8a f8 01 00       	call   c0028d99 <__gtdf2>
c000950f:	83 c4 10             	add    esp,0x10
c0009512:	85 c0                	test   eax,eax
c0009514:	0f 8e 9f 00 00 00    	jle    c00095b9 <linear_vari_process+0x5c8>
c000951a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000951e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009521:	8b 00                	mov    eax,DWORD PTR [eax]
c0009523:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	52                   	push   edx
c000952c:	50                   	push   eax
c000952d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009530:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009533:	e8 84 ef 01 00       	call   c00284bc <__subdf3>
c0009538:	5f                   	pop    edi
c0009539:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000953d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009541:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009544:	e8 02 f6 01 00       	call   c0028b4b <__floatsidf>
c0009549:	83 c4 10             	add    esp,0x10
c000954c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009554:	52                   	push   edx
c0009555:	50                   	push   eax
c0009556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955e:	e8 85 ef 01 00       	call   c00284e8 <__muldf3>
c0009563:	5d                   	pop    ebp
c0009564:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009568:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000956c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000956f:	e8 d7 f5 01 00       	call   c0028b4b <__floatsidf>
c0009574:	83 c4 10             	add    esp,0x10
c0009577:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000957b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957f:	52                   	push   edx
c0009580:	50                   	push   eax
c0009581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	e8 3e f2 01 00       	call   c00287cc <__divdf3>
c000958e:	83 c4 10             	add    esp,0x10
c0009591:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009595:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009599:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000959d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a9:	e8 bd e8 01 00       	call   c0027e6b <__adddf3>
c00095ae:	83 c4 10             	add    esp,0x10
c00095b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b9:	31 ff                	xor    edi,edi
c00095bb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095be:	39 f8                	cmp    eax,edi
c00095c0:	0f 8e ac 00 00 00    	jle    c0009672 <linear_vari_process+0x681>
c00095c6:	8b 16                	mov    edx,DWORD PTR [esi]
c00095c8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095cb:	29 c1                	sub    ecx,eax
c00095cd:	89 c8                	mov    eax,ecx
c00095cf:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095d2:	01 f8                	add    eax,edi
c00095d4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095d8:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095e5:	51                   	push   ecx
c00095e6:	01 f8                	add    eax,edi
c00095e8:	51                   	push   ecx
c00095e9:	47                   	inc    edi
c00095ea:	55                   	push   ebp
c00095eb:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095ee:	e8 0d e2 01 00       	call   c0027800 <__subsf3>
c00095f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f6:	e8 e4 f8 01 00       	call   c0028edf <__extendsfdf2>
c00095fb:	83 c4 10             	add    esp,0x10
c00095fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009602:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009606:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009616:	e8 cd ee 01 00       	call   c00284e8 <__muldf3>
c000961b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000961e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009622:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009626:	e8 b4 f8 01 00       	call   c0028edf <__extendsfdf2>
c000962b:	83 c4 10             	add    esp,0x10
c000962e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009632:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009636:	52                   	push   edx
c0009637:	50                   	push   eax
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009640:	e8 26 e8 01 00       	call   c0027e6b <__adddf3>
c0009645:	5d                   	pop    ebp
c0009646:	59                   	pop    ecx
c0009647:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000964b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000964f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009653:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009657:	e8 5f f7 01 00       	call   c0028dbb <__truncdfsf2>
c000965c:	83 c4 10             	add    esp,0x10
c000965f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009663:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009667:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000966a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000966d:	e9 49 ff ff ff       	jmp    c00095bb <linear_vari_process+0x5ca>
c0009672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000967a:	68 00 00 f0 3f       	push   0x3ff00000
c000967f:	6a 00                	push   0x0
c0009681:	e8 46 f1 01 00       	call   c00287cc <__divdf3>
c0009686:	83 c4 10             	add    esp,0x10
c0009689:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000968d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009691:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009695:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a1:	e8 c5 e7 01 00       	call   c0027e6b <__adddf3>
c00096a6:	59                   	pop    ecx
c00096a7:	5f                   	pop    edi
c00096a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b8:	e8 b3 f8 01 00       	call   c0028f70 <lrint>
c00096bd:	83 ec 0c             	sub    esp,0xc
c00096c0:	50                   	push   eax
c00096c1:	e8 85 f4 01 00       	call   c0028b4b <__floatsidf>
c00096c6:	83 c4 10             	add    esp,0x10
c00096c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d1:	52                   	push   edx
c00096d2:	50                   	push   eax
c00096d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096db:	e8 dc ed 01 00       	call   c00284bc <__subdf3>
c00096e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e8:	83 c4 20             	add    esp,0x20
c00096eb:	6a 00                	push   0x0
c00096ed:	6a 00                	push   0x0
c00096ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f7:	e8 bb f6 01 00       	call   c0028db7 <__ltdf2>
c00096fc:	83 c4 10             	add    esp,0x10
c00096ff:	85 c0                	test   eax,eax
c0009701:	79 1e                	jns    c0009721 <linear_vari_process+0x730>
c0009703:	68 00 00 f0 3f       	push   0x3ff00000
c0009708:	6a 00                	push   0x0
c000970a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000970e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009712:	e8 54 e7 01 00       	call   c0027e6b <__adddf3>
c0009717:	83 c4 10             	add    esp,0x10
c000971a:	89 04 24             	mov    DWORD PTR [esp],eax
c000971d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009721:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009724:	83 ec 10             	sub    esp,0x10
c0009727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009733:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009737:	e8 80 ed 01 00       	call   c00284bc <__subdf3>
c000973c:	e9 bc fc ff ff       	jmp    c00093fd <linear_vari_process+0x40c>
c0009741:	39 fd                	cmp    ebp,edi
c0009743:	7d 38                	jge    c000977d <linear_vari_process+0x78c>
c0009745:	83 ec 0c             	sub    esp,0xc
c0009748:	89 f8                	mov    eax,edi
c000974a:	29 e8                	sub    eax,ebp
c000974c:	99                   	cdq    
c000974d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009750:	50                   	push   eax
c0009751:	e8 f5 f3 01 00       	call   c0028b4b <__floatsidf>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000975d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009761:	52                   	push   edx
c0009762:	50                   	push   eax
c0009763:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009767:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000976b:	e8 fb e6 01 00       	call   c0027e6b <__adddf3>
c0009770:	83 c4 10             	add    esp,0x10
c0009773:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009776:	89 04 24             	mov    DWORD PTR [esp],eax
c0009779:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009784:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009788:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000978b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000978e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009791:	85 c0                	test   eax,eax
c0009793:	7f 29                	jg     c00097be <linear_vari_process+0x7cd>
c0009795:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097a1:	89 01                	mov    DWORD PTR [ecx],eax
c00097a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097a9:	99                   	cdq    
c00097aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ad:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097b3:	99                   	cdq    
c00097b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b7:	31 d2                	xor    edx,edx
c00097b9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097bc:	eb 1d                	jmp    c00097db <linear_vari_process+0x7ea>
c00097be:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097c1:	31 d2                	xor    edx,edx
c00097c3:	29 c8                	sub    eax,ecx
c00097c5:	c1 e0 02             	shl    eax,0x2
c00097c8:	39 d1                	cmp    ecx,edx
c00097ca:	7e c9                	jle    c0009795 <linear_vari_process+0x7a4>
c00097cc:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ce:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097d1:	83 c0 04             	add    eax,0x4
c00097d4:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097d8:	42                   	inc    edx
c00097d9:	eb ed                	jmp    c00097c8 <linear_vari_process+0x7d7>
c00097db:	83 c4 3c             	add    esp,0x3c
c00097de:	89 d0                	mov    eax,edx
c00097e0:	5b                   	pop    ebx
c00097e1:	5e                   	pop    esi
c00097e2:	5f                   	pop    edi
c00097e3:	5d                   	pop    ebp
c00097e4:	c3                   	ret    

c00097e5 <linear_reset>:
c00097e5:	83 ec 0c             	sub    esp,0xc
c00097e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097ec:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097ef:	85 c0                	test   eax,eax
c00097f1:	74 20                	je     c0009813 <linear_reset+0x2e>
c00097f3:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097f6:	83 c0 1c             	add    eax,0x1c
c00097f9:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097fc:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009803:	c1 e2 02             	shl    edx,0x2
c0009806:	51                   	push   ecx
c0009807:	52                   	push   edx
c0009808:	6a 00                	push   0x0
c000980a:	50                   	push   eax
c000980b:	e8 5c 6f ff ff       	call   c000076c <memset>
c0009810:	83 c4 10             	add    esp,0x10
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	c3                   	ret    

c0009817 <linear_get_name>:
c0009817:	31 c0                	xor    eax,eax
c0009819:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000981e:	75 05                	jne    c0009825 <linear_get_name+0xe>
c0009820:	b8 a0 a7 02 c0       	mov    eax,0xc002a7a0
c0009825:	c3                   	ret    

c0009826 <linear_get_description>:
c0009826:	31 c0                	xor    eax,eax
c0009828:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000982d:	75 05                	jne    c0009834 <linear_get_description+0xe>
c000982f:	b8 b4 a7 02 c0       	mov    eax,0xc002a7b4
c0009834:	c3                   	ret    

c0009835 <linear_set_converter>:
c0009835:	53                   	push   ebx
c0009836:	b8 0a 00 00 00       	mov    eax,0xa
c000983b:	83 ec 08             	sub    esp,0x8
c000983e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009842:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009847:	75 6e                	jne    c00098b7 <linear_set_converter+0x82>
c0009849:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000984c:	85 c0                	test   eax,eax
c000984e:	74 13                	je     c0009863 <linear_set_converter+0x2e>
c0009850:	83 ec 0c             	sub    esp,0xc
c0009853:	50                   	push   eax
c0009854:	e8 5f 60 00 00       	call   c000f8b8 <free>
c0009859:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009860:	83 c4 10             	add    esp,0x10
c0009863:	50                   	push   eax
c0009864:	50                   	push   eax
c0009865:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009868:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000986f:	50                   	push   eax
c0009870:	6a 01                	push   0x1
c0009872:	e8 61 60 00 00       	call   c000f8d8 <calloc>
c0009877:	83 c4 10             	add    esp,0x10
c000987a:	89 c2                	mov    edx,eax
c000987c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000987f:	85 d2                	test   edx,edx
c0009881:	b8 01 00 00 00       	mov    eax,0x1
c0009886:	74 2f                	je     c00098b7 <linear_set_converter+0x82>
c0009888:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988b:	83 ec 0c             	sub    esp,0xc
c000988e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009891:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009897:	c7 43 24 f1 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ff1
c000989e:	c7 43 20 f1 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ff1
c00098a5:	c7 43 28 e5 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097e5
c00098ac:	53                   	push   ebx
c00098ad:	e8 33 ff ff ff       	call   c00097e5 <linear_reset>
c00098b2:	83 c4 10             	add    esp,0x10
c00098b5:	31 c0                	xor    eax,eax
c00098b7:	83 c4 08             	add    esp,0x8
c00098ba:	5b                   	pop    ebx
c00098bb:	c3                   	ret    

c00098bc <int_to_fp>:
c00098bc:	c1 e0 0c             	shl    eax,0xc
c00098bf:	c3                   	ret    

c00098c0 <fp_to_int>:
c00098c0:	c1 f8 0c             	sar    eax,0xc
c00098c3:	c3                   	ret    

c00098c4 <fp_fraction_part>:
c00098c4:	25 ff 0f 00 00       	and    eax,0xfff
c00098c9:	c3                   	ret    

c00098ca <fp_to_double>:
c00098ca:	83 ec 1c             	sub    esp,0x1c
c00098cd:	e8 f2 ff ff ff       	call   c00098c4 <fp_fraction_part>
c00098d2:	83 ec 0c             	sub    esp,0xc
c00098d5:	50                   	push   eax
c00098d6:	e8 70 f2 01 00       	call   c0028b4b <__floatsidf>
c00098db:	83 c4 10             	add    esp,0x10
c00098de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098e6:	68 00 00 30 3f       	push   0x3f300000
c00098eb:	6a 00                	push   0x0
c00098ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f5:	e8 ee eb 01 00       	call   c00284e8 <__muldf3>
c00098fa:	83 c4 2c             	add    esp,0x2c
c00098fd:	c3                   	ret    

c00098fe <calc_output_single>:
c00098fe:	55                   	push   ebp
c00098ff:	57                   	push   edi
c0009900:	56                   	push   esi
c0009901:	89 c6                	mov    esi,eax
c0009903:	53                   	push   ebx
c0009904:	89 d3                	mov    ebx,edx
c0009906:	83 ec 4c             	sub    esp,0x4c
c0009909:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000990d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009910:	e8 a7 ff ff ff       	call   c00098bc <int_to_fp>
c0009915:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009918:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000991c:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009920:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009924:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009927:	99                   	cdq    
c0009928:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009930:	f7 fb                	idiv   ebx
c0009932:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000993a:	89 da                	mov    edx,ebx
c000993c:	0f af d0             	imul   edx,eax
c000993f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009943:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009947:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000994b:	29 c2                	sub    edx,eax
c000994d:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009954:	83 c5 04             	add    ebp,0x4
c0009957:	e8 6e ff ff ff       	call   c00098ca <fp_to_double>
c000995c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009960:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009968:	e8 53 ff ff ff       	call   c00098c0 <fp_to_int>
c000996d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009970:	52                   	push   edx
c0009971:	52                   	push   edx
c0009972:	51                   	push   ecx
c0009973:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009977:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000997b:	e8 80 de 01 00       	call   c0027800 <__subsf3>
c0009980:	89 04 24             	mov    DWORD PTR [esp],eax
c0009983:	e8 57 f5 01 00       	call   c0028edf <__extendsfdf2>
c0009988:	83 c4 10             	add    esp,0x10
c000998b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000998f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009993:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009997:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000999b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000999f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099a3:	e8 40 eb 01 00       	call   c00284e8 <__muldf3>
c00099a8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099b7:	e8 23 f5 01 00       	call   c0028edf <__extendsfdf2>
c00099bc:	83 c4 10             	add    esp,0x10
c00099bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099c7:	52                   	push   edx
c00099c8:	50                   	push   eax
c00099c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099d1:	e8 95 e4 01 00       	call   c0027e6b <__adddf3>
c00099d6:	59                   	pop    ecx
c00099d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099df:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099e5:	e8 f5 f4 01 00       	call   c0028edf <__extendsfdf2>
c00099ea:	83 c4 10             	add    esp,0x10
c00099ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099f5:	52                   	push   edx
c00099f6:	50                   	push   eax
c00099f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ff:	e8 e4 ea 01 00       	call   c00284e8 <__muldf3>
c0009a04:	83 c4 10             	add    esp,0x10
c0009a07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a0f:	52                   	push   edx
c0009a10:	50                   	push   eax
c0009a11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a19:	e8 4d e4 01 00       	call   c0027e6b <__adddf3>
c0009a1e:	83 c4 10             	add    esp,0x10
c0009a21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a29:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a2d:	0f 89 1d ff ff ff    	jns    c0009950 <calc_output_single+0x52>
c0009a33:	89 d9                	mov    ecx,ebx
c0009a35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a39:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a3d:	89 dd                	mov    ebp,ebx
c0009a3f:	29 c8                	sub    eax,ecx
c0009a41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a49:	99                   	cdq    
c0009a4a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a52:	f7 fb                	idiv   ebx
c0009a54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a58:	0f af e8             	imul   ebp,eax
c0009a5b:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a5f:	01 cd                	add    ebp,ecx
c0009a61:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a64:	89 e8                	mov    eax,ebp
c0009a66:	83 ee 04             	sub    esi,0x4
c0009a69:	e8 5c fe ff ff       	call   c00098ca <fp_to_double>
c0009a6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a76:	89 e8                	mov    eax,ebp
c0009a78:	29 dd                	sub    ebp,ebx
c0009a7a:	e8 41 fe ff ff       	call   c00098c0 <fp_to_int>
c0009a7f:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a82:	52                   	push   edx
c0009a83:	52                   	push   edx
c0009a84:	51                   	push   ecx
c0009a85:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a89:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a8d:	e8 6e dd 01 00       	call   c0027800 <__subsf3>
c0009a92:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a95:	e8 45 f4 01 00       	call   c0028edf <__extendsfdf2>
c0009a9a:	83 c4 10             	add    esp,0x10
c0009a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009aa1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab5:	e8 2e ea 01 00       	call   c00284e8 <__muldf3>
c0009aba:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009abe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ac2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ac5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ac9:	e8 11 f4 01 00       	call   c0028edf <__extendsfdf2>
c0009ace:	83 c4 10             	add    esp,0x10
c0009ad1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ad9:	52                   	push   edx
c0009ada:	50                   	push   eax
c0009adb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009adf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae3:	e8 83 e3 01 00       	call   c0027e6b <__adddf3>
c0009ae8:	59                   	pop    ecx
c0009ae9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009aed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009af1:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009af7:	e8 e3 f3 01 00       	call   c0028edf <__extendsfdf2>
c0009afc:	83 c4 10             	add    esp,0x10
c0009aff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b07:	52                   	push   edx
c0009b08:	50                   	push   eax
c0009b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b11:	e8 d2 e9 01 00       	call   c00284e8 <__muldf3>
c0009b16:	83 c4 10             	add    esp,0x10
c0009b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b21:	52                   	push   edx
c0009b22:	50                   	push   eax
c0009b23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2b:	e8 3b e3 01 00       	call   c0027e6b <__adddf3>
c0009b30:	83 c4 10             	add    esp,0x10
c0009b33:	85 ed                	test   ebp,ebp
c0009b35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b39:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b3d:	0f 8f 21 ff ff ff    	jg     c0009a64 <calc_output_single+0x166>
c0009b43:	52                   	push   edx
c0009b44:	50                   	push   eax
c0009b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4d:	e8 19 e3 01 00       	call   c0027e6b <__adddf3>
c0009b52:	83 c4 5c             	add    esp,0x5c
c0009b55:	5b                   	pop    ebx
c0009b56:	5e                   	pop    esi
c0009b57:	5f                   	pop    edi
c0009b58:	5d                   	pop    ebp
c0009b59:	c3                   	ret    

c0009b5a <calc_output_stereo>:
c0009b5a:	55                   	push   ebp
c0009b5b:	89 cd                	mov    ebp,ecx
c0009b5d:	57                   	push   edi
c0009b5e:	56                   	push   esi
c0009b5f:	53                   	push   ebx
c0009b60:	89 c3                	mov    ebx,eax
c0009b62:	83 ec 6c             	sub    esp,0x6c
c0009b65:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b70:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b77:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b82:	e8 35 fd ff ff       	call   c00098bc <int_to_fp>
c0009b87:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	99                   	cdq    
c0009b9e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ba2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ba6:	0f af d0             	imul   edx,eax
c0009ba9:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bac:	31 d2                	xor    edx,edx
c0009bae:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bb6:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bb9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bbd:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bc0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bc4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bc8:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bcb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bd0:	29 c1                	sub    ecx,eax
c0009bd2:	31 c0                	xor    eax,eax
c0009bd4:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bdf:	83 c7 08             	add    edi,0x8
c0009be2:	e8 e3 fc ff ff       	call   c00098ca <fp_to_double>
c0009be7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009beb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bf3:	e8 c8 fc ff ff       	call   c00098c0 <fp_to_int>
c0009bf8:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bfb:	52                   	push   edx
c0009bfc:	52                   	push   edx
c0009bfd:	51                   	push   ecx
c0009bfe:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c02:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c06:	e8 f5 db 01 00       	call   c0027800 <__subsf3>
c0009c0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c0e:	e8 cc f2 01 00       	call   c0028edf <__extendsfdf2>
c0009c13:	83 c4 10             	add    esp,0x10
c0009c16:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c1a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c26:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2e:	e8 b5 e8 01 00       	call   c00284e8 <__muldf3>
c0009c33:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c37:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c42:	e8 98 f2 01 00       	call   c0028edf <__extendsfdf2>
c0009c47:	83 c4 10             	add    esp,0x10
c0009c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c4e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c52:	52                   	push   edx
c0009c53:	50                   	push   eax
c0009c54:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c58:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c5c:	e8 0a e2 01 00       	call   c0027e6b <__adddf3>
c0009c61:	59                   	pop    ecx
c0009c62:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c66:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c6a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c70:	e8 6a f2 01 00       	call   c0028edf <__extendsfdf2>
c0009c75:	83 c4 10             	add    esp,0x10
c0009c78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c88:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c90:	e8 53 e8 01 00       	call   c00284e8 <__muldf3>
c0009c95:	83 c4 10             	add    esp,0x10
c0009c98:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca0:	52                   	push   edx
c0009ca1:	50                   	push   eax
c0009ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caa:	e8 bc e1 01 00       	call   c0027e6b <__adddf3>
c0009caf:	59                   	pop    ecx
c0009cb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cb4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cb8:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cbe:	e8 1c f2 01 00       	call   c0028edf <__extendsfdf2>
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cca:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cda:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cde:	e8 05 e8 01 00       	call   c00284e8 <__muldf3>
c0009ce3:	83 c4 10             	add    esp,0x10
c0009ce6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cea:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cee:	52                   	push   edx
c0009cef:	50                   	push   eax
c0009cf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf8:	e8 6e e1 01 00       	call   c0027e6b <__adddf3>
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d0c:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d10:	0f 89 c5 fe ff ff    	jns    c0009bdb <calc_output_stereo+0x81>
c0009d16:	29 e9                	sub    ecx,ebp
c0009d18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d1c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d20:	29 c8                	sub    eax,ecx
c0009d22:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d2a:	99                   	cdq    
c0009d2b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d2f:	31 d2                	xor    edx,edx
c0009d31:	0f af f8             	imul   edi,eax
c0009d34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d38:	40                   	inc    eax
c0009d39:	01 cf                	add    edi,ecx
c0009d3b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d40:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d44:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d4c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d4f:	31 c0                	xor    eax,eax
c0009d51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d55:	89 f8                	mov    eax,edi
c0009d57:	83 eb 08             	sub    ebx,0x8
c0009d5a:	e8 6b fb ff ff       	call   c00098ca <fp_to_double>
c0009d5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d63:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d67:	89 f8                	mov    eax,edi
c0009d69:	e8 52 fb ff ff       	call   c00098c0 <fp_to_int>
c0009d6e:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d71:	52                   	push   edx
c0009d72:	52                   	push   edx
c0009d73:	55                   	push   ebp
c0009d74:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d78:	e8 83 da 01 00       	call   c0027800 <__subsf3>
c0009d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d80:	e8 5a f1 01 00       	call   c0028edf <__extendsfdf2>
c0009d85:	83 c4 10             	add    esp,0x10
c0009d88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d8c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009da0:	e8 43 e7 01 00       	call   c00284e8 <__muldf3>
c0009da5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009da8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009db0:	e8 2a f1 01 00       	call   c0028edf <__extendsfdf2>
c0009db5:	83 c4 10             	add    esp,0x10
c0009db8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc0:	52                   	push   edx
c0009dc1:	50                   	push   eax
c0009dc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dca:	e8 9c e0 01 00       	call   c0027e6b <__adddf3>
c0009dcf:	59                   	pop    ecx
c0009dd0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dd4:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dd8:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dde:	e8 fc f0 01 00       	call   c0028edf <__extendsfdf2>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfe:	e8 e5 e6 01 00       	call   c00284e8 <__muldf3>
c0009e03:	83 c4 10             	add    esp,0x10
c0009e06:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e0a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0e:	52                   	push   edx
c0009e0f:	50                   	push   eax
c0009e10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e18:	e8 4e e0 01 00       	call   c0027e6b <__adddf3>
c0009e1d:	5d                   	pop    ebp
c0009e1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e22:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e26:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e2c:	e8 ae f0 01 00       	call   c0028edf <__extendsfdf2>
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e48:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e4c:	e8 97 e6 01 00       	call   c00284e8 <__muldf3>
c0009e51:	83 c4 10             	add    esp,0x10
c0009e54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e5c:	52                   	push   edx
c0009e5d:	50                   	push   eax
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	e8 00 e0 01 00       	call   c0027e6b <__adddf3>
c0009e6b:	83 c4 10             	add    esp,0x10
c0009e6e:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e7a:	85 ff                	test   edi,edi
c0009e7c:	0f 8f d3 fe ff ff    	jg     c0009d55 <calc_output_stereo+0x1fb>
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e92:	e8 d4 df 01 00       	call   c0027e6b <__adddf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ea2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eb2:	e8 31 e6 01 00       	call   c00284e8 <__muldf3>
c0009eb7:	59                   	pop    ecx
c0009eb8:	5b                   	pop    ebx
c0009eb9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ebd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec9:	e8 ed ee 01 00       	call   c0028dbb <__truncdfsf2>
c0009ece:	83 c4 10             	add    esp,0x10
c0009ed1:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ed8:	89 03                	mov    DWORD PTR [ebx],eax
c0009eda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eea:	e8 7c df 01 00       	call   c0027e6b <__adddf3>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ef6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009efa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009efe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f0a:	e8 d9 e5 01 00       	call   c00284e8 <__muldf3>
c0009f0f:	5e                   	pop    esi
c0009f10:	5f                   	pop    edi
c0009f11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f21:	e8 95 ee 01 00       	call   c0028dbb <__truncdfsf2>
c0009f26:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f2d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f30:	83 c4 7c             	add    esp,0x7c
c0009f33:	5b                   	pop    ebx
c0009f34:	5e                   	pop    esi
c0009f35:	5f                   	pop    edi
c0009f36:	5d                   	pop    ebp
c0009f37:	c3                   	ret    

c0009f38 <calc_output_quad>:
c0009f38:	55                   	push   ebp
c0009f39:	57                   	push   edi
c0009f3a:	56                   	push   esi
c0009f3b:	89 c6                	mov    esi,eax
c0009f3d:	53                   	push   ebx
c0009f3e:	83 ec 7c             	sub    esp,0x7c
c0009f41:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f45:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f49:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f50:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f5f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f62:	e8 55 f9 ff ff       	call   c00098bc <int_to_fp>
c0009f67:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f6a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f6d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f71:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f75:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f79:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f7d:	99                   	cdq    
c0009f7e:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f86:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f89:	31 d2                	xor    edx,edx
c0009f8b:	0f af d8             	imul   ebx,eax
c0009f8e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f96:	0f af c7             	imul   eax,edi
c0009f99:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f9d:	29 c1                	sub    ecx,eax
c0009f9f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fa7:	31 c0                	xor    eax,eax
c0009fa9:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fbc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fc0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fc4:	89 d8                	mov    eax,ebx
c0009fc6:	83 c7 10             	add    edi,0x10
c0009fc9:	e8 fc f8 ff ff       	call   c00098ca <fp_to_double>
c0009fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fd6:	89 d8                	mov    eax,ebx
c0009fd8:	e8 e3 f8 ff ff       	call   c00098c0 <fp_to_int>
c0009fdd:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fe1:	52                   	push   edx
c0009fe2:	52                   	push   edx
c0009fe3:	51                   	push   ecx
c0009fe4:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fe8:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fec:	e8 0f d8 01 00       	call   c0027800 <__subsf3>
c0009ff1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ff4:	e8 e6 ee 01 00       	call   c0028edf <__extendsfdf2>
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a000:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a00c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a010:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a014:	e8 cf e4 01 00       	call   c00284e8 <__muldf3>
c000a019:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a01d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a021:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a024:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a028:	e8 b2 ee 01 00       	call   c0028edf <__extendsfdf2>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a034:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a038:	52                   	push   edx
c000a039:	50                   	push   eax
c000a03a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a03e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a042:	e8 24 de 01 00       	call   c0027e6b <__adddf3>
c000a047:	59                   	pop    ecx
c000a048:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a04c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a050:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a056:	e8 84 ee 01 00       	call   c0028edf <__extendsfdf2>
c000a05b:	83 c4 10             	add    esp,0x10
c000a05e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a062:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a072:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a076:	e8 6d e4 01 00       	call   c00284e8 <__muldf3>
c000a07b:	83 c4 10             	add    esp,0x10
c000a07e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a082:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a086:	52                   	push   edx
c000a087:	50                   	push   eax
c000a088:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a090:	e8 d6 dd 01 00       	call   c0027e6b <__adddf3>
c000a095:	59                   	pop    ecx
c000a096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a09a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a09e:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0a4:	e8 36 ee 01 00       	call   c0028edf <__extendsfdf2>
c000a0a9:	83 c4 10             	add    esp,0x10
c000a0ac:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c4:	e8 1f e4 01 00       	call   c00284e8 <__muldf3>
c000a0c9:	83 c4 10             	add    esp,0x10
c000a0cc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d4:	52                   	push   edx
c000a0d5:	50                   	push   eax
c000a0d6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0da:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0de:	e8 88 dd 01 00       	call   c0027e6b <__adddf3>
c000a0e3:	59                   	pop    ecx
c000a0e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0e8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0ec:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0f2:	e8 e8 ed 01 00       	call   c0028edf <__extendsfdf2>
c000a0f7:	83 c4 10             	add    esp,0x10
c000a0fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a10e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a112:	e8 d1 e3 01 00       	call   c00284e8 <__muldf3>
c000a117:	83 c4 10             	add    esp,0x10
c000a11a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a122:	52                   	push   edx
c000a123:	50                   	push   eax
c000a124:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a128:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a12c:	e8 3a dd 01 00       	call   c0027e6b <__adddf3>
c000a131:	59                   	pop    ecx
c000a132:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a136:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a13a:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a140:	e8 9a ed 01 00       	call   c0028edf <__extendsfdf2>
c000a145:	83 c4 10             	add    esp,0x10
c000a148:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a158:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a160:	e8 83 e3 01 00       	call   c00284e8 <__muldf3>
c000a165:	83 c4 10             	add    esp,0x10
c000a168:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a16c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a170:	52                   	push   edx
c000a171:	50                   	push   eax
c000a172:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a176:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a17a:	e8 ec dc 01 00       	call   c0027e6b <__adddf3>
c000a17f:	83 c4 10             	add    esp,0x10
c000a182:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a186:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a18a:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a18e:	0f 89 30 fe ff ff    	jns    c0009fc4 <calc_output_quad+0x8c>
c000a194:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a198:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a19c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1a0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1a4:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ac:	29 c8                	sub    eax,ecx
c000a1ae:	99                   	cdq    
c000a1af:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1b3:	31 d2                	xor    edx,edx
c000a1b5:	0f af d8             	imul   ebx,eax
c000a1b8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1bc:	40                   	inc    eax
c000a1bd:	01 cb                	add    ebx,ecx
c000a1bf:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1c4:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1c8:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1d0:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1d3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1db:	31 c0                	xor    eax,eax
c000a1dd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1e1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1e9:	89 d8                	mov    eax,ebx
c000a1eb:	83 ee 10             	sub    esi,0x10
c000a1ee:	e8 d7 f6 ff ff       	call   c00098ca <fp_to_double>
c000a1f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1fb:	89 d8                	mov    eax,ebx
c000a1fd:	e8 be f6 ff ff       	call   c00098c0 <fp_to_int>
c000a202:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a206:	52                   	push   edx
c000a207:	52                   	push   edx
c000a208:	57                   	push   edi
c000a209:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a20d:	e8 ee d5 01 00       	call   c0027800 <__subsf3>
c000a212:	89 04 24             	mov    DWORD PTR [esp],eax
c000a215:	e8 c5 ec 01 00       	call   c0028edf <__extendsfdf2>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a221:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a231:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a235:	e8 ae e2 01 00       	call   c00284e8 <__muldf3>
c000a23a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a23d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a241:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a245:	e8 95 ec 01 00       	call   c0028edf <__extendsfdf2>
c000a24a:	83 c4 10             	add    esp,0x10
c000a24d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a251:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a255:	52                   	push   edx
c000a256:	50                   	push   eax
c000a257:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25f:	e8 07 dc 01 00       	call   c0027e6b <__adddf3>
c000a264:	59                   	pop    ecx
c000a265:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a269:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26d:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a273:	e8 67 ec 01 00       	call   c0028edf <__extendsfdf2>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a293:	e8 50 e2 01 00       	call   c00284e8 <__muldf3>
c000a298:	83 c4 10             	add    esp,0x10
c000a29b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a3:	52                   	push   edx
c000a2a4:	50                   	push   eax
c000a2a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ad:	e8 b9 db 01 00       	call   c0027e6b <__adddf3>
c000a2b2:	5f                   	pop    edi
c000a2b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2bb:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2c1:	e8 19 ec 01 00       	call   c0028edf <__extendsfdf2>
c000a2c6:	83 c4 10             	add    esp,0x10
c000a2c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2e1:	e8 02 e2 01 00       	call   c00284e8 <__muldf3>
c000a2e6:	83 c4 10             	add    esp,0x10
c000a2e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f1:	52                   	push   edx
c000a2f2:	50                   	push   eax
c000a2f3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2f7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2fb:	e8 6b db 01 00       	call   c0027e6b <__adddf3>
c000a300:	59                   	pop    ecx
c000a301:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a305:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a309:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a30f:	e8 cb eb 01 00       	call   c0028edf <__extendsfdf2>
c000a314:	83 c4 10             	add    esp,0x10
c000a317:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a327:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32f:	e8 b4 e1 01 00       	call   c00284e8 <__muldf3>
c000a334:	83 c4 10             	add    esp,0x10
c000a337:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a33b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33f:	52                   	push   edx
c000a340:	50                   	push   eax
c000a341:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a345:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a349:	e8 1d db 01 00       	call   c0027e6b <__adddf3>
c000a34e:	5f                   	pop    edi
c000a34f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a353:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a357:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a35d:	e8 7d eb 01 00       	call   c0028edf <__extendsfdf2>
c000a362:	83 c4 10             	add    esp,0x10
c000a365:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a369:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a375:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a379:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37d:	e8 66 e1 01 00       	call   c00284e8 <__muldf3>
c000a382:	83 c4 10             	add    esp,0x10
c000a385:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38d:	52                   	push   edx
c000a38e:	50                   	push   eax
c000a38f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a393:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a397:	e8 cf da 01 00       	call   c0027e6b <__adddf3>
c000a39c:	83 c4 10             	add    esp,0x10
c000a39f:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3a7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3ab:	85 db                	test   ebx,ebx
c000a3ad:	0f 8f 36 fe ff ff    	jg     c000a1e9 <calc_output_quad+0x2b1>
c000a3b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c3:	e8 a3 da 01 00       	call   c0027e6b <__adddf3>
c000a3c8:	83 c4 10             	add    esp,0x10
c000a3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e3:	e8 00 e1 01 00       	call   c00284e8 <__muldf3>
c000a3e8:	59                   	pop    ecx
c000a3e9:	5b                   	pop    ebx
c000a3ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fa:	e8 bc e9 01 00       	call   c0028dbb <__truncdfsf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a409:	89 06                	mov    DWORD PTR [esi],eax
c000a40b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a40f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a413:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a417:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a41b:	e8 4b da 01 00       	call   c0027e6b <__adddf3>
c000a420:	83 c4 10             	add    esp,0x10
c000a423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	e8 a8 e0 01 00       	call   c00284e8 <__muldf3>
c000a440:	5e                   	pop    esi
c000a441:	5f                   	pop    edi
c000a442:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a446:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a452:	e8 64 e9 01 00       	call   c0028dbb <__truncdfsf2>
c000a457:	83 c4 10             	add    esp,0x10
c000a45a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a461:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a464:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a468:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a470:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a474:	e8 f2 d9 01 00       	call   c0027e6b <__adddf3>
c000a479:	83 c4 10             	add    esp,0x10
c000a47c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a480:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a494:	e8 4f e0 01 00       	call   c00284e8 <__muldf3>
c000a499:	5d                   	pop    ebp
c000a49a:	59                   	pop    ecx
c000a49b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a49f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ab:	e8 0b e9 01 00       	call   c0028dbb <__truncdfsf2>
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4ba:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cd:	e8 99 d9 01 00       	call   c0027e6b <__adddf3>
c000a4d2:	83 c4 10             	add    esp,0x10
c000a4d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	e8 f6 df 01 00       	call   c00284e8 <__muldf3>
c000a4f2:	5b                   	pop    ebx
c000a4f3:	5e                   	pop    esi
c000a4f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a504:	e8 b2 e8 01 00       	call   c0028dbb <__truncdfsf2>
c000a509:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a510:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a513:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a519:	5b                   	pop    ebx
c000a51a:	5e                   	pop    esi
c000a51b:	5f                   	pop    edi
c000a51c:	5d                   	pop    ebp
c000a51d:	c3                   	ret    

c000a51e <calc_output_hex>:
c000a51e:	55                   	push   ebp
c000a51f:	89 cd                	mov    ebp,ecx
c000a521:	57                   	push   edi
c000a522:	56                   	push   esi
c000a523:	53                   	push   ebx
c000a524:	89 c3                	mov    ebx,eax
c000a526:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a52c:	89 14 24             	mov    DWORD PTR [esp],edx
c000a52f:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a536:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a53d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a548:	e8 6f f3 ff ff       	call   c00098bc <int_to_fp>
c000a54d:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a550:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a554:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a557:	29 c8                	sub    eax,ecx
c000a559:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a55d:	99                   	cdq    
c000a55e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a566:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a569:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a571:	0f af f8             	imul   edi,eax
c000a574:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a577:	01 cf                	add    edi,ecx
c000a579:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a57d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a580:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a584:	0f af c2             	imul   eax,edx
c000a587:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a58b:	29 c1                	sub    ecx,eax
c000a58d:	31 d2                	xor    edx,edx
c000a58f:	31 c0                	xor    eax,eax
c000a591:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a59c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5a4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5a8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5b0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5bc:	89 f8                	mov    eax,edi
c000a5be:	e8 07 f3 ff ff       	call   c00098ca <fp_to_double>
c000a5c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5cb:	89 f8                	mov    eax,edi
c000a5cd:	e8 ee f2 ff ff       	call   c00098c0 <fp_to_int>
c000a5d2:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5d6:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5d9:	52                   	push   edx
c000a5da:	52                   	push   edx
c000a5db:	51                   	push   ecx
c000a5dc:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5e0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5e7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5eb:	e8 10 d2 01 00       	call   c0027800 <__subsf3>
c000a5f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5f3:	e8 e7 e8 01 00       	call   c0028edf <__extendsfdf2>
c000a5f8:	83 c4 10             	add    esp,0x10
c000a5fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a613:	e8 d0 de 01 00       	call   c00284e8 <__muldf3>
c000a618:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a61c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a620:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a623:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a627:	e8 b3 e8 01 00       	call   c0028edf <__extendsfdf2>
c000a62c:	83 c4 10             	add    esp,0x10
c000a62f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a633:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a637:	52                   	push   edx
c000a638:	50                   	push   eax
c000a639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a641:	e8 25 d8 01 00       	call   c0027e6b <__adddf3>
c000a646:	59                   	pop    ecx
c000a647:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a64b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a64f:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a655:	e8 85 e8 01 00       	call   c0028edf <__extendsfdf2>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a661:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a671:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a675:	e8 6e de 01 00       	call   c00284e8 <__muldf3>
c000a67a:	83 c4 10             	add    esp,0x10
c000a67d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a681:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a685:	52                   	push   edx
c000a686:	50                   	push   eax
c000a687:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68f:	e8 d7 d7 01 00       	call   c0027e6b <__adddf3>
c000a694:	59                   	pop    ecx
c000a695:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a699:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a69d:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6a3:	e8 37 e8 01 00       	call   c0028edf <__extendsfdf2>
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6af:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6c3:	e8 20 de 01 00       	call   c00284e8 <__muldf3>
c000a6c8:	83 c4 10             	add    esp,0x10
c000a6cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d3:	52                   	push   edx
c000a6d4:	50                   	push   eax
c000a6d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6dd:	e8 89 d7 01 00       	call   c0027e6b <__adddf3>
c000a6e2:	59                   	pop    ecx
c000a6e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6e7:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6eb:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6f1:	e8 e9 e7 01 00       	call   c0028edf <__extendsfdf2>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6fd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a705:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a709:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a70d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a711:	e8 d2 dd 01 00       	call   c00284e8 <__muldf3>
c000a716:	83 c4 10             	add    esp,0x10
c000a719:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a721:	52                   	push   edx
c000a722:	50                   	push   eax
c000a723:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a727:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a72b:	e8 3b d7 01 00       	call   c0027e6b <__adddf3>
c000a730:	59                   	pop    ecx
c000a731:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a735:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a739:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a73f:	e8 9b e7 01 00       	call   c0028edf <__extendsfdf2>
c000a744:	83 c4 10             	add    esp,0x10
c000a747:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a74f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a753:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a757:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75f:	e8 84 dd 01 00       	call   c00284e8 <__muldf3>
c000a764:	83 c4 10             	add    esp,0x10
c000a767:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a76b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76f:	52                   	push   edx
c000a770:	50                   	push   eax
c000a771:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a775:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a779:	e8 ed d6 01 00       	call   c0027e6b <__adddf3>
c000a77e:	59                   	pop    ecx
c000a77f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a783:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a787:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a78d:	e8 4d e7 01 00       	call   c0028edf <__extendsfdf2>
c000a792:	83 c4 10             	add    esp,0x10
c000a795:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a799:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ad:	e8 36 dd 01 00       	call   c00284e8 <__muldf3>
c000a7b2:	83 c4 10             	add    esp,0x10
c000a7b5:	83 c6 18             	add    esi,0x18
c000a7b8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c0:	52                   	push   edx
c000a7c1:	50                   	push   eax
c000a7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ca:	e8 9c d6 01 00       	call   c0027e6b <__adddf3>
c000a7cf:	59                   	pop    ecx
c000a7d0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7d4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7d8:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7de:	e8 fc e6 01 00       	call   c0028edf <__extendsfdf2>
c000a7e3:	83 c4 10             	add    esp,0x10
c000a7e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fe:	e8 e5 dc 01 00       	call   c00284e8 <__muldf3>
c000a803:	83 c4 10             	add    esp,0x10
c000a806:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a80a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a80e:	52                   	push   edx
c000a80f:	50                   	push   eax
c000a810:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a814:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a818:	e8 4e d6 01 00       	call   c0027e6b <__adddf3>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a824:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a828:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a82b:	0f 89 8b fd ff ff    	jns    c000a5bc <calc_output_hex+0x9e>
c000a831:	31 f6                	xor    esi,esi
c000a833:	31 ff                	xor    edi,edi
c000a835:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a839:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a83c:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a840:	29 e9                	sub    ecx,ebp
c000a842:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a846:	29 c8                	sub    eax,ecx
c000a848:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a84b:	99                   	cdq    
c000a84c:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a850:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a853:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a857:	0f af e8             	imul   ebp,eax
c000a85a:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a85e:	40                   	inc    eax
c000a85f:	01 cd                	add    ebp,ecx
c000a861:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a866:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a86a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a86e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a872:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a875:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a879:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a87d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a881:	89 e8                	mov    eax,ebp
c000a883:	e8 42 f0 ff ff       	call   c00098ca <fp_to_double>
c000a888:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a88c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a890:	89 e8                	mov    eax,ebp
c000a892:	e8 29 f0 ff ff       	call   c00098c0 <fp_to_int>
c000a897:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a89b:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a89e:	52                   	push   edx
c000a89f:	52                   	push   edx
c000a8a0:	51                   	push   ecx
c000a8a1:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8a8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8af:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8b3:	e8 48 cf 01 00       	call   c0027800 <__subsf3>
c000a8b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8bb:	e8 1f e6 01 00       	call   c0028edf <__extendsfdf2>
c000a8c0:	83 c4 10             	add    esp,0x10
c000a8c3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8db:	e8 08 dc 01 00       	call   c00284e8 <__muldf3>
c000a8e0:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8ee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8f2:	e8 e8 e5 01 00       	call   c0028edf <__extendsfdf2>
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8fe:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a902:	52                   	push   edx
c000a903:	50                   	push   eax
c000a904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90c:	e8 5a d5 01 00       	call   c0027e6b <__adddf3>
c000a911:	59                   	pop    ecx
c000a912:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a916:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a91a:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a920:	e8 ba e5 01 00       	call   c0028edf <__extendsfdf2>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a92c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a938:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a940:	e8 a3 db 01 00       	call   c00284e8 <__muldf3>
c000a945:	83 c4 10             	add    esp,0x10
c000a948:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a950:	52                   	push   edx
c000a951:	50                   	push   eax
c000a952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a956:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a95a:	e8 0c d5 01 00       	call   c0027e6b <__adddf3>
c000a95f:	59                   	pop    ecx
c000a960:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a964:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a968:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a96e:	e8 6c e5 01 00       	call   c0028edf <__extendsfdf2>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a97e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a986:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98e:	e8 55 db 01 00       	call   c00284e8 <__muldf3>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a99a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99e:	52                   	push   edx
c000a99f:	50                   	push   eax
c000a9a0:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a4:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a8:	e8 be d4 01 00       	call   c0027e6b <__adddf3>
c000a9ad:	59                   	pop    ecx
c000a9ae:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9b2:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9b6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9bc:	e8 1e e5 01 00       	call   c0028edf <__extendsfdf2>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9dc:	e8 07 db 01 00       	call   c00284e8 <__muldf3>
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ec:	52                   	push   edx
c000a9ed:	50                   	push   eax
c000a9ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f6:	e8 70 d4 01 00       	call   c0027e6b <__adddf3>
c000a9fb:	59                   	pop    ecx
c000a9fc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa00:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa04:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa0a:	e8 d0 e4 01 00       	call   c0028edf <__extendsfdf2>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa16:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa22:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa26:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa2a:	e8 b9 da 01 00       	call   c00284e8 <__muldf3>
c000aa2f:	83 c4 10             	add    esp,0x10
c000aa32:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa36:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa3a:	52                   	push   edx
c000aa3b:	50                   	push   eax
c000aa3c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa40:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa44:	e8 22 d4 01 00       	call   c0027e6b <__adddf3>
c000aa49:	59                   	pop    ecx
c000aa4a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa4e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa52:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa58:	e8 82 e4 01 00       	call   c0028edf <__extendsfdf2>
c000aa5d:	83 c4 10             	add    esp,0x10
c000aa60:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa64:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa70:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa74:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa78:	e8 6b da 01 00       	call   c00284e8 <__muldf3>
c000aa7d:	83 c4 10             	add    esp,0x10
c000aa80:	83 eb 18             	sub    ebx,0x18
c000aa83:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa87:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8b:	52                   	push   edx
c000aa8c:	50                   	push   eax
c000aa8d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa91:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa95:	e8 d1 d3 01 00       	call   c0027e6b <__adddf3>
c000aa9a:	59                   	pop    ecx
c000aa9b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa9f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaa3:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaa9:	e8 31 e4 01 00       	call   c0028edf <__extendsfdf2>
c000aaae:	83 c4 10             	add    esp,0x10
c000aab1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aab5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aabd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac9:	e8 1a da 01 00       	call   c00284e8 <__muldf3>
c000aace:	83 c4 10             	add    esp,0x10
c000aad1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aad9:	52                   	push   edx
c000aada:	50                   	push   eax
c000aadb:	57                   	push   edi
c000aadc:	56                   	push   esi
c000aadd:	e8 89 d3 01 00       	call   c0027e6b <__adddf3>
c000aae2:	83 c4 10             	add    esp,0x10
c000aae5:	89 c6                	mov    esi,eax
c000aae7:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aaea:	89 d7                	mov    edi,edx
c000aaec:	85 ed                	test   ebp,ebp
c000aaee:	0f 8f 8d fd ff ff    	jg     c000a881 <calc_output_hex+0x363>
c000aaf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aafc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab04:	e8 62 d3 01 00       	call   c0027e6b <__adddf3>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab23:	e8 c0 d9 01 00       	call   c00284e8 <__muldf3>
c000ab28:	59                   	pop    ecx
c000ab29:	5b                   	pop    ebx
c000ab2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3a:	e8 7c e2 01 00       	call   c0028dbb <__truncdfsf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab49:	89 03                	mov    DWORD PTR [ebx],eax
c000ab4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab4f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab5b:	e8 0b d3 01 00       	call   c0027e6b <__adddf3>
c000ab60:	83 c4 10             	add    esp,0x10
c000ab63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab6a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7a:	e8 69 d9 01 00       	call   c00284e8 <__muldf3>
c000ab7f:	5d                   	pop    ebp
c000ab80:	59                   	pop    ecx
c000ab81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab91:	e8 25 e2 01 00       	call   c0028dbb <__truncdfsf2>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aba0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aba3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aba7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abaf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abb3:	e8 b3 d2 01 00       	call   c0027e6b <__adddf3>
c000abb8:	83 c4 10             	add    esp,0x10
c000abbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000abbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd2:	e8 11 d9 01 00       	call   c00284e8 <__muldf3>
c000abd7:	5b                   	pop    ebx
c000abd8:	5d                   	pop    ebp
c000abd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe9:	e8 cd e1 01 00       	call   c0028dbb <__truncdfsf2>
c000abee:	83 c4 10             	add    esp,0x10
c000abf1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abf8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abfb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac0b:	e8 5b d2 01 00       	call   c0027e6b <__adddf3>
c000ac10:	83 c4 10             	add    esp,0x10
c000ac13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2a:	e8 b9 d8 01 00       	call   c00284e8 <__muldf3>
c000ac2f:	59                   	pop    ecx
c000ac30:	5b                   	pop    ebx
c000ac31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac41:	e8 75 e1 01 00       	call   c0028dbb <__truncdfsf2>
c000ac46:	83 c4 10             	add    esp,0x10
c000ac49:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac50:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac63:	e8 03 d2 01 00       	call   c0027e6b <__adddf3>
c000ac68:	83 c4 10             	add    esp,0x10
c000ac6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac82:	e8 61 d8 01 00       	call   c00284e8 <__muldf3>
c000ac87:	5d                   	pop    ebp
c000ac88:	59                   	pop    ecx
c000ac89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac99:	e8 1d e1 01 00       	call   c0028dbb <__truncdfsf2>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aca8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acab:	57                   	push   edi
c000acac:	56                   	push   esi
c000acad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb5:	e8 b1 d1 01 00       	call   c0027e6b <__adddf3>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 04 24             	mov    DWORD PTR [esp],eax
c000acc0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd4:	e8 0f d8 01 00       	call   c00284e8 <__muldf3>
c000acd9:	5b                   	pop    ebx
c000acda:	5e                   	pop    esi
c000acdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ace3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aceb:	e8 cb e0 01 00       	call   c0028dbb <__truncdfsf2>
c000acf0:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acf7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acfa:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad00:	5b                   	pop    ebx
c000ad01:	5e                   	pop    esi
c000ad02:	5f                   	pop    edi
c000ad03:	5d                   	pop    ebp
c000ad04:	c3                   	ret    

c000ad05 <sinc_reset>:
c000ad05:	56                   	push   esi
c000ad06:	53                   	push   ebx
c000ad07:	51                   	push   ecx
c000ad08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad0f:	85 db                	test   ebx,ebx
c000ad11:	74 59                	je     c000ad6c <sinc_reset+0x67>
c000ad13:	31 d2                	xor    edx,edx
c000ad15:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad1c:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad1f:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad22:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad29:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad30:	31 c0                	xor    eax,eax
c000ad32:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad38:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad3b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad3e:	52                   	push   edx
c000ad3f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad42:	c1 e0 02             	shl    eax,0x2
c000ad45:	50                   	push   eax
c000ad46:	6a 00                	push   0x0
c000ad48:	56                   	push   esi
c000ad49:	e8 1e 5a ff ff       	call   c000076c <memset>
c000ad4e:	83 c4 0c             	add    esp,0xc
c000ad51:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad54:	c1 e0 02             	shl    eax,0x2
c000ad57:	50                   	push   eax
c000ad58:	68 aa 00 00 00       	push   0xaa
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad63:	50                   	push   eax
c000ad64:	e8 03 5a ff ff       	call   c000076c <memset>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	58                   	pop    eax
c000ad6d:	5b                   	pop    ebx
c000ad6e:	5e                   	pop    esi
c000ad6f:	c3                   	ret    

c000ad70 <calc_output_multi>:
c000ad70:	55                   	push   ebp
c000ad71:	57                   	push   edi
c000ad72:	56                   	push   esi
c000ad73:	89 c6                	mov    esi,eax
c000ad75:	53                   	push   ebx
c000ad76:	83 ec 4c             	sub    esp,0x4c
c000ad79:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad7d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad81:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad85:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad89:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad95:	8d 46 44             	lea    eax,[esi+0x44]
c000ad98:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9b:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ada1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ada5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ada8:	e8 0f eb ff ff       	call   c00098bc <int_to_fp>
c000adad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adb0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adb4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adb8:	99                   	cdq    
c000adb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adc1:	0f af d0             	imul   edx,eax
c000adc4:	0f af c3             	imul   eax,ebx
c000adc7:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adcb:	29 c1                	sub    ecx,eax
c000adcd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000add1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000add5:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000addc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ade0:	57                   	push   edi
c000ade1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade5:	6a 00                	push   0x0
c000ade7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adeb:	e8 7c 59 ff ff       	call   c000076c <memset>
c000adf0:	83 c4 10             	add    esp,0x10
c000adf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adf7:	89 df                	mov    edi,ebx
c000adf9:	e8 cc ea ff ff       	call   c00098ca <fp_to_double>
c000adfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae0a:	e8 b1 ea ff ff       	call   c00098c0 <fp_to_int>
c000ae0f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae12:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae15:	51                   	push   ecx
c000ae16:	51                   	push   ecx
c000ae17:	55                   	push   ebp
c000ae18:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae1c:	e8 df c9 01 00       	call   c0027800 <__subsf3>
c000ae21:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae24:	e8 b6 e0 01 00       	call   c0028edf <__extendsfdf2>
c000ae29:	83 c4 10             	add    esp,0x10
c000ae2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae44:	e8 9f d6 01 00       	call   c00284e8 <__muldf3>
c000ae49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae50:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae54:	e8 86 e0 01 00       	call   c0028edf <__extendsfdf2>
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae64:	52                   	push   edx
c000ae65:	50                   	push   eax
c000ae66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6e:	e8 f8 cf 01 00       	call   c0027e6b <__adddf3>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae7e:	89 f8                	mov    eax,edi
c000ae80:	b9 08 00 00 00       	mov    ecx,0x8
c000ae85:	99                   	cdq    
c000ae86:	f7 f9                	idiv   ecx
c000ae88:	4a                   	dec    edx
c000ae89:	83 fa 06             	cmp    edx,0x6
c000ae8c:	77 07                	ja     c000ae95 <calc_output_multi+0x125>
c000ae8e:	ff 24 95 e4 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd581c]
c000ae95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae98:	4f                   	dec    edi
c000ae99:	83 ec 0c             	sub    esp,0xc
c000ae9c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aea3:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeaa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeae:	e8 2c e0 01 00       	call   c0028edf <__extendsfdf2>
c000aeb3:	83 c4 10             	add    esp,0x10
c000aeb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aebe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aece:	e8 15 d6 01 00       	call   c00284e8 <__muldf3>
c000aed3:	83 c4 10             	add    esp,0x10
c000aed6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aede:	52                   	push   edx
c000aedf:	50                   	push   eax
c000aee0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aee3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee6:	e8 80 cf 01 00       	call   c0027e6b <__adddf3>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aef4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef7:	4f                   	dec    edi
c000aef8:	83 ec 0c             	sub    esp,0xc
c000aefb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aefe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af02:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af0d:	e8 cd df 01 00       	call   c0028edf <__extendsfdf2>
c000af12:	83 c4 10             	add    esp,0x10
c000af15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af29:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af2d:	e8 b6 d5 01 00       	call   c00284e8 <__muldf3>
c000af32:	83 c4 10             	add    esp,0x10
c000af35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af39:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3d:	52                   	push   edx
c000af3e:	50                   	push   eax
c000af3f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af42:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af45:	e8 21 cf 01 00       	call   c0027e6b <__adddf3>
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af50:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af56:	4f                   	dec    edi
c000af57:	83 ec 0c             	sub    esp,0xc
c000af5a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af61:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af68:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af6c:	e8 6e df 01 00       	call   c0028edf <__extendsfdf2>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af84:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af88:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af8c:	e8 57 d5 01 00       	call   c00284e8 <__muldf3>
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af98:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9c:	52                   	push   edx
c000af9d:	50                   	push   eax
c000af9e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afa1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afa4:	e8 c2 ce 01 00       	call   c0027e6b <__adddf3>
c000afa9:	83 c4 10             	add    esp,0x10
c000afac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afaf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afb5:	4f                   	dec    edi
c000afb6:	83 ec 0c             	sub    esp,0xc
c000afb9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afc0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afc7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afcb:	e8 0f df 01 00       	call   c0028edf <__extendsfdf2>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afe7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afeb:	e8 f8 d4 01 00       	call   c00284e8 <__muldf3>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000affb:	52                   	push   edx
c000affc:	50                   	push   eax
c000affd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b000:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b003:	e8 63 ce 01 00       	call   c0027e6b <__adddf3>
c000b008:	83 c4 10             	add    esp,0x10
c000b00b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b00e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b011:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b014:	4f                   	dec    edi
c000b015:	83 ec 0c             	sub    esp,0xc
c000b018:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b01b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b01f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b026:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b02a:	e8 b0 de 01 00       	call   c0028edf <__extendsfdf2>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b036:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b042:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b046:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b04a:	e8 99 d4 01 00       	call   c00284e8 <__muldf3>
c000b04f:	83 c4 10             	add    esp,0x10
c000b052:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b056:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b05a:	52                   	push   edx
c000b05b:	50                   	push   eax
c000b05c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b05f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b062:	e8 04 ce 01 00       	call   c0027e6b <__adddf3>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b06d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b070:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b073:	4f                   	dec    edi
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b07a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b07e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b085:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b089:	e8 51 de 01 00       	call   c0028edf <__extendsfdf2>
c000b08e:	83 c4 10             	add    esp,0x10
c000b091:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b095:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b099:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a9:	e8 3a d4 01 00       	call   c00284e8 <__muldf3>
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b9:	52                   	push   edx
c000b0ba:	50                   	push   eax
c000b0bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c1:	e8 a5 cd 01 00       	call   c0027e6b <__adddf3>
c000b0c6:	83 c4 10             	add    esp,0x10
c000b0c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0cc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0d2:	4f                   	dec    edi
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0dd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0e8:	e8 f2 dd 01 00       	call   c0028edf <__extendsfdf2>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b104:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b108:	e8 db d3 01 00       	call   c00284e8 <__muldf3>
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b114:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b118:	52                   	push   edx
c000b119:	50                   	push   eax
c000b11a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b11d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b120:	e8 46 cd 01 00       	call   c0027e6b <__adddf3>
c000b125:	83 c4 10             	add    esp,0x10
c000b128:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b12e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b131:	4f                   	dec    edi
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b138:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b13c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b143:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b147:	e8 93 dd 01 00       	call   c0028edf <__extendsfdf2>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b163:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b167:	e8 7c d3 01 00       	call   c00284e8 <__muldf3>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b173:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b177:	52                   	push   edx
c000b178:	50                   	push   eax
c000b179:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b17c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b17f:	e8 e7 cc 01 00       	call   c0027e6b <__adddf3>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b18a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b18d:	85 ff                	test   edi,edi
c000b18f:	0f 8f e9 fc ff ff    	jg     c000ae7e <calc_output_multi+0x10e>
c000b195:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b199:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b19d:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1a1:	0f 89 4c fc ff ff    	jns    c000adf3 <calc_output_multi+0x83>
c000b1a7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1af:	29 c8                	sub    eax,ecx
c000b1b1:	99                   	cdq    
c000b1b2:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1ba:	0f af d0             	imul   edx,eax
c000b1bd:	40                   	inc    eax
c000b1be:	01 d1                	add    ecx,edx
c000b1c0:	0f af c3             	imul   eax,ebx
c000b1c3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1c7:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ce:	55                   	push   ebp
c000b1cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d3:	6a 00                	push   0x0
c000b1d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d9:	e8 8e 55 ff ff       	call   c000076c <memset>
c000b1de:	83 c4 10             	add    esp,0x10
c000b1e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1e5:	e8 e0 e6 ff ff       	call   c00098ca <fp_to_double>
c000b1ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1f6:	e8 c5 e6 ff ff       	call   c00098c0 <fp_to_int>
c000b1fb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b201:	57                   	push   edi
c000b202:	57                   	push   edi
c000b203:	89 df                	mov    edi,ebx
c000b205:	55                   	push   ebp
c000b206:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b20a:	e8 f1 c5 01 00       	call   c0027800 <__subsf3>
c000b20f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b212:	e8 c8 dc 01 00       	call   c0028edf <__extendsfdf2>
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b222:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b232:	e8 b1 d2 01 00       	call   c00284e8 <__muldf3>
c000b237:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b23a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b23e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b242:	e8 98 dc 01 00       	call   c0028edf <__extendsfdf2>
c000b247:	83 c4 10             	add    esp,0x10
c000b24a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b252:	52                   	push   edx
c000b253:	50                   	push   eax
c000b254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b25c:	e8 0a cc 01 00       	call   c0027e6b <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b268:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b26c:	89 f8                	mov    eax,edi
c000b26e:	b9 08 00 00 00       	mov    ecx,0x8
c000b273:	99                   	cdq    
c000b274:	f7 f9                	idiv   ecx
c000b276:	4a                   	dec    edx
c000b277:	83 fa 06             	cmp    edx,0x6
c000b27a:	77 07                	ja     c000b283 <calc_output_multi+0x513>
c000b27c:	ff 24 95 00 a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5800]
c000b283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b287:	4f                   	dec    edi
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b292:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b299:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29d:	e8 3d dc 01 00       	call   c0028edf <__extendsfdf2>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bd:	e8 26 d2 01 00       	call   c00284e8 <__muldf3>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cd:	52                   	push   edx
c000b2ce:	50                   	push   eax
c000b2cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d5:	e8 91 cb 01 00       	call   c0027e6b <__adddf3>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e7:	4f                   	dec    edi
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fd:	e8 dd db 01 00       	call   c0028edf <__extendsfdf2>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b315:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b319:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31d:	e8 c6 d1 01 00       	call   c00284e8 <__muldf3>
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32d:	52                   	push   edx
c000b32e:	50                   	push   eax
c000b32f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b332:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b335:	e8 31 cb 01 00       	call   c0027e6b <__adddf3>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b340:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b347:	4f                   	dec    edi
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b34e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b352:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b359:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b35d:	e8 7d db 01 00       	call   c0028edf <__extendsfdf2>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b369:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b379:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b37d:	e8 66 d1 01 00       	call   c00284e8 <__muldf3>
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b389:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38d:	52                   	push   edx
c000b38e:	50                   	push   eax
c000b38f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b392:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b395:	e8 d1 ca 01 00       	call   c0027e6b <__adddf3>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a7:	4f                   	dec    edi
c000b3a8:	83 ec 0c             	sub    esp,0xc
c000b3ab:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3b2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3b9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3bd:	e8 1d db 01 00       	call   c0028edf <__extendsfdf2>
c000b3c2:	83 c4 10             	add    esp,0x10
c000b3c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3dd:	e8 06 d1 01 00       	call   c00284e8 <__muldf3>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ed:	52                   	push   edx
c000b3ee:	50                   	push   eax
c000b3ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3f5:	e8 71 ca 01 00       	call   c0027e6b <__adddf3>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b400:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b407:	4f                   	dec    edi
c000b408:	83 ec 0c             	sub    esp,0xc
c000b40b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b40e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b412:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b419:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b41d:	e8 bd da 01 00       	call   c0028edf <__extendsfdf2>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b431:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b435:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b439:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b43d:	e8 a6 d0 01 00       	call   c00284e8 <__muldf3>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b449:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44d:	52                   	push   edx
c000b44e:	50                   	push   eax
c000b44f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b452:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b455:	e8 11 ca 01 00       	call   c0027e6b <__adddf3>
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b460:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b467:	4f                   	dec    edi
c000b468:	83 ec 0c             	sub    esp,0xc
c000b46b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b46e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b472:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b479:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b47d:	e8 5d da 01 00       	call   c0028edf <__extendsfdf2>
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b495:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b49d:	e8 46 d0 01 00       	call   c00284e8 <__muldf3>
c000b4a2:	83 c4 10             	add    esp,0x10
c000b4a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ad:	52                   	push   edx
c000b4ae:	50                   	push   eax
c000b4af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4b5:	e8 b1 c9 01 00       	call   c0027e6b <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c7:	4f                   	dec    edi
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4d2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4d9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4dd:	e8 fd d9 01 00       	call   c0028edf <__extendsfdf2>
c000b4e2:	83 c4 10             	add    esp,0x10
c000b4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4fd:	e8 e6 cf 01 00       	call   c00284e8 <__muldf3>
c000b502:	83 c4 10             	add    esp,0x10
c000b505:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50d:	52                   	push   edx
c000b50e:	50                   	push   eax
c000b50f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b512:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b515:	e8 51 c9 01 00       	call   c0027e6b <__adddf3>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b520:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b527:	4f                   	dec    edi
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b52e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b532:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b539:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b53d:	e8 9d d9 01 00       	call   c0028edf <__extendsfdf2>
c000b542:	83 c4 10             	add    esp,0x10
c000b545:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b549:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b551:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b555:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b559:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b55d:	e8 86 cf 01 00       	call   c00284e8 <__muldf3>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56d:	52                   	push   edx
c000b56e:	50                   	push   eax
c000b56f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b572:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b575:	e8 f1 c8 01 00       	call   c0027e6b <__adddf3>
c000b57a:	83 c4 10             	add    esp,0x10
c000b57d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b580:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b583:	85 ff                	test   edi,edi
c000b585:	0f 8f e1 fc ff ff    	jg     c000b26c <calc_output_multi+0x4fc>
c000b58b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b58f:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b593:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b597:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b59c:	0f 8f 3f fc ff ff    	jg     c000b1e1 <calc_output_multi+0x471>
c000b5a2:	be 08 00 00 00       	mov    esi,0x8
c000b5a7:	89 d8                	mov    eax,ebx
c000b5a9:	99                   	cdq    
c000b5aa:	f7 fe                	idiv   esi
c000b5ac:	4a                   	dec    edx
c000b5ad:	83 fa 06             	cmp    edx,0x6
c000b5b0:	77 07                	ja     c000b5b9 <calc_output_multi+0x849>
c000b5b2:	ff 24 95 1c a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd57e4]
c000b5b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5bd:	4b                   	dec    ebx
c000b5be:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5cd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d0:	e8 96 c8 01 00       	call   c0027e6b <__adddf3>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f0:	e8 f3 ce 01 00       	call   c00284e8 <__muldf3>
c000b5f5:	5d                   	pop    ebp
c000b5f6:	59                   	pop    ecx
c000b5f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b607:	e8 af d7 01 00       	call   c0028dbb <__truncdfsf2>
c000b60c:	83 c4 10             	add    esp,0x10
c000b60f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b613:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61a:	4b                   	dec    ebx
c000b61b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b622:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b626:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b62a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62d:	e8 39 c8 01 00       	call   c0027e6b <__adddf3>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b639:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64d:	e8 96 ce 01 00       	call   c00284e8 <__muldf3>
c000b652:	59                   	pop    ecx
c000b653:	5f                   	pop    edi
c000b654:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b658:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b664:	e8 52 d7 01 00       	call   c0028dbb <__truncdfsf2>
c000b669:	83 c4 10             	add    esp,0x10
c000b66c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b670:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b677:	4b                   	dec    ebx
c000b678:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b67c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b67f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b683:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b687:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b68a:	e8 dc c7 01 00       	call   c0027e6b <__adddf3>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b696:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6aa:	e8 39 ce 01 00       	call   c00284e8 <__muldf3>
c000b6af:	5f                   	pop    edi
c000b6b0:	5d                   	pop    ebp
c000b6b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c1:	e8 f5 d6 01 00       	call   c0028dbb <__truncdfsf2>
c000b6c6:	83 c4 10             	add    esp,0x10
c000b6c9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6cd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d4:	4b                   	dec    ebx
c000b6d5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6e0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e7:	e8 7f c7 01 00       	call   c0027e6b <__adddf3>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b707:	e8 dc cd 01 00       	call   c00284e8 <__muldf3>
c000b70c:	5d                   	pop    ebp
c000b70d:	59                   	pop    ecx
c000b70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71e:	e8 98 d6 01 00       	call   c0028dbb <__truncdfsf2>
c000b723:	83 c4 10             	add    esp,0x10
c000b726:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b72a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b72d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b731:	4b                   	dec    ebx
c000b732:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b736:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b73d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b741:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b744:	e8 22 c7 01 00       	call   c0027e6b <__adddf3>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b750:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b764:	e8 7f cd 01 00       	call   c00284e8 <__muldf3>
c000b769:	59                   	pop    ecx
c000b76a:	5f                   	pop    edi
c000b76b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b76f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77b:	e8 3b d6 01 00       	call   c0028dbb <__truncdfsf2>
c000b780:	83 c4 10             	add    esp,0x10
c000b783:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b787:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78e:	4b                   	dec    ebx
c000b78f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b793:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b79a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7a1:	e8 c5 c6 01 00       	call   c0027e6b <__adddf3>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c1:	e8 22 cd 01 00       	call   c00284e8 <__muldf3>
c000b7c6:	5f                   	pop    edi
c000b7c7:	5d                   	pop    ebp
c000b7c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d8:	e8 de d5 01 00       	call   c0028dbb <__truncdfsf2>
c000b7dd:	83 c4 10             	add    esp,0x10
c000b7e0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7e4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7eb:	4b                   	dec    ebx
c000b7ec:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7f0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7fe:	e8 68 c6 01 00       	call   c0027e6b <__adddf3>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b80a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81e:	e8 c5 cc 01 00       	call   c00284e8 <__muldf3>
c000b823:	5d                   	pop    ebp
c000b824:	59                   	pop    ecx
c000b825:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b829:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b831:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b835:	e8 81 d5 01 00       	call   c0028dbb <__truncdfsf2>
c000b83a:	83 c4 10             	add    esp,0x10
c000b83d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b841:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b848:	4b                   	dec    ebx
c000b849:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b84d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b854:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b858:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b85b:	e8 0b c6 01 00       	call   c0027e6b <__adddf3>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b867:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b86b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b877:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87b:	e8 68 cc 01 00       	call   c00284e8 <__muldf3>
c000b880:	59                   	pop    ecx
c000b881:	5f                   	pop    edi
c000b882:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b886:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b88a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b88e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b892:	e8 24 d5 01 00       	call   c0028dbb <__truncdfsf2>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	85 db                	test   ebx,ebx
c000b89c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8a0:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8a3:	0f 8f fe fc ff ff    	jg     c000b5a7 <calc_output_multi+0x837>
c000b8a9:	83 c4 4c             	add    esp,0x4c
c000b8ac:	5b                   	pop    ebx
c000b8ad:	5e                   	pop    esi
c000b8ae:	5f                   	pop    edi
c000b8af:	5d                   	pop    ebp
c000b8b0:	c3                   	ret    

c000b8b1 <double_to_fp>:
c000b8b1:	83 ec 0c             	sub    esp,0xc
c000b8b4:	68 00 00 b0 40       	push   0x40b00000
c000b8b9:	6a 00                	push   0x0
c000b8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c3:	e8 20 cc 01 00       	call   c00284e8 <__muldf3>
c000b8c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8d0:	83 c4 1c             	add    esp,0x1c
c000b8d3:	e9 98 d6 01 00       	jmp    c0028f70 <lrint>

c000b8d8 <prepare_data>:
c000b8d8:	55                   	push   ebp
c000b8d9:	57                   	push   edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8e7:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8eb:	0f 89 57 01 00 00    	jns    c000ba48 <prepare_data+0x170>
c000b8f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8f7:	85 d2                	test   edx,edx
c000b8f9:	75 0d                	jne    c000b908 <prepare_data+0x30>
c000b8fb:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8fe:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b901:	29 d0                	sub    eax,edx
c000b903:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b906:	eb 44                	jmp    c000b94c <prepare_data+0x74>
c000b908:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b90b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b90e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b911:	39 c1                	cmp    ecx,eax
c000b913:	7d 04                	jge    c000b919 <prepare_data+0x41>
c000b915:	29 d0                	sub    eax,edx
c000b917:	eb 2d                	jmp    c000b946 <prepare_data+0x6e>
c000b919:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b91f:	29 d7                	sub    edi,edx
c000b921:	01 f7                	add    edi,esi
c000b923:	51                   	push   ecx
c000b924:	29 f2                	sub    edx,esi
c000b926:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b92d:	8d 14 90             	lea    edx,[eax+edx*4]
c000b930:	51                   	push   ecx
c000b931:	52                   	push   edx
c000b932:	50                   	push   eax
c000b933:	e8 6c 4d ff ff       	call   c00006a4 <memmove>
c000b938:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b93b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b93e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b941:	29 f0                	sub    eax,esi
c000b943:	83 c4 10             	add    esp,0x10
c000b946:	29 f0                	sub    eax,esi
c000b948:	79 02                	jns    c000b94c <prepare_data+0x74>
c000b94a:	31 c0                	xor    eax,eax
c000b94c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b94f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b952:	29 ef                	sub    edi,ebp
c000b954:	39 c7                	cmp    edi,eax
c000b956:	7e 02                	jle    c000b95a <prepare_data+0x82>
c000b958:	89 c7                	mov    edi,eax
c000b95a:	89 f8                	mov    eax,edi
c000b95c:	99                   	cdq    
c000b95d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b960:	b8 15 00 00 00       	mov    eax,0x15
c000b965:	29 d7                	sub    edi,edx
c000b967:	0f 88 dd 00 00 00    	js     c000ba4a <prepare_data+0x172>
c000b96d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b970:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b973:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b976:	0f 8f ce 00 00 00    	jg     c000ba4a <prepare_data+0x172>
c000b97c:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b982:	50                   	push   eax
c000b983:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b98a:	50                   	push   eax
c000b98b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b98f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b991:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b994:	50                   	push   eax
c000b995:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b998:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99c:	50                   	push   eax
c000b99d:	e8 c1 4c ff ff       	call   c0000663 <memcpy>
c000b9a2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9a5:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9a8:	01 fd                	add    ebp,edi
c000b9aa:	01 f9                	add    ecx,edi
c000b9ac:	83 c4 10             	add    esp,0x10
c000b9af:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9b2:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9b5:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9bc:	0f 85 86 00 00 00    	jne    c000ba48 <prepare_data+0x170>
c000b9c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9c5:	89 e8                	mov    eax,ebp
c000b9c7:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ca:	29 c8                	sub    eax,ecx
c000b9cc:	39 f8                	cmp    eax,edi
c000b9ce:	7d 78                	jge    c000ba48 <prepare_data+0x170>
c000b9d0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9d4:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9d8:	74 6e                	je     c000ba48 <prepare_data+0x170>
c000b9da:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9e1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9e4:	29 ef                	sub    edi,ebp
c000b9e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ea:	7c 29                	jl     c000ba15 <prepare_data+0x13d>
c000b9ec:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9ef:	29 f1                	sub    ecx,esi
c000b9f1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9f8:	55                   	push   ebp
c000b9f9:	50                   	push   eax
c000b9fa:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9fd:	50                   	push   eax
c000b9fe:	52                   	push   edx
c000b9ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba03:	e8 9c 4c ff ff       	call   c00006a4 <memmove>
c000ba08:	83 c4 10             	add    esp,0x10
c000ba0b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba0e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba15:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba1b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba1e:	83 c6 05             	add    esi,0x5
c000ba21:	78 07                	js     c000ba2a <prepare_data+0x152>
c000ba23:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba26:	39 cf                	cmp    edi,ecx
c000ba28:	7e 04                	jle    c000ba2e <prepare_data+0x156>
c000ba2a:	89 ce                	mov    esi,ecx
c000ba2c:	29 c6                	sub    esi,eax
c000ba2e:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba31:	51                   	push   ecx
c000ba32:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba39:	51                   	push   ecx
c000ba3a:	6a 00                	push   0x0
c000ba3c:	50                   	push   eax
c000ba3d:	e8 2a 4d ff ff       	call   c000076c <memset>
c000ba42:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba45:	83 c4 10             	add    esp,0x10
c000ba48:	31 c0                	xor    eax,eax
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	5b                   	pop    ebx
c000ba4e:	5e                   	pop    esi
c000ba4f:	5f                   	pop    edi
c000ba50:	5d                   	pop    ebp
c000ba51:	c3                   	ret    

c000ba52 <sinc_multichan_vari_process>:
c000ba52:	55                   	push   ebp
c000ba53:	ba 05 00 00 00       	mov    edx,0x5
c000ba58:	57                   	push   edi
c000ba59:	56                   	push   esi
c000ba5a:	53                   	push   ebx
c000ba5b:	83 ec 4c             	sub    esp,0x4c
c000ba5e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba62:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba66:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba69:	85 db                	test   ebx,ebx
c000ba6b:	0f 84 9b 06 00 00    	je     c000c10c <sinc_multichan_vari_process+0x6ba>
c000ba71:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba74:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba77:	0f af c5             	imul   eax,ebp
c000ba7a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba7d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba80:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba87:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba8e:	0f af c5             	imul   eax,ebp
c000ba91:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba94:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba97:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa1:	68 00 00 70 3f       	push   0x3f700000
c000baa6:	6a 00                	push   0x0
c000baa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab0:	e8 02 d3 01 00       	call   c0028db7 <__ltdf2>
c000bab5:	83 c4 10             	add    esp,0x10
c000bab8:	ba 16 00 00 00       	mov    edx,0x16
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 88 47 06 00 00    	js     c000c10c <sinc_multichan_vari_process+0x6ba>
c000bac5:	68 00 00 70 40       	push   0x40700000
c000baca:	6a 00                	push   0x0
c000bacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad4:	e8 c0 d2 01 00       	call   c0028d99 <__gtdf2>
c000bad9:	83 c4 10             	add    esp,0x10
c000badc:	ba 16 00 00 00       	mov    edx,0x16
c000bae1:	85 c0                	test   eax,eax
c000bae3:	0f 8f 23 06 00 00    	jg     c000c10c <sinc_multichan_vari_process+0x6ba>
c000bae9:	83 ec 0c             	sub    esp,0xc
c000baec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000baef:	e8 57 d0 01 00       	call   c0028b4b <__floatsidf>
c000baf4:	83 c4 10             	add    esp,0x10
c000baf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bafb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000baff:	68 00 00 00 40       	push   0x40000000
c000bb04:	6a 00                	push   0x0
c000bb06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0e:	e8 58 c3 01 00       	call   c0027e6b <__adddf3>
c000bb13:	59                   	pop    ecx
c000bb14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb1c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb1f:	e8 27 d0 01 00       	call   c0028b4b <__floatsidf>
c000bb24:	83 c4 10             	add    esp,0x10
c000bb27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2f:	52                   	push   edx
c000bb30:	50                   	push   eax
c000bb31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb39:	e8 8e cc 01 00       	call   c00287cc <__divdf3>
c000bb3e:	83 c4 10             	add    esp,0x10
c000bb41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb49:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb4c:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb67:	e8 2d d2 01 00       	call   c0028d99 <__gtdf2>
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	85 c0                	test   eax,eax
c000bb71:	7e 2d                	jle    c000bba0 <sinc_multichan_vari_process+0x14e>
c000bb73:	68 00 00 f0 3f       	push   0x3ff00000
c000bb78:	6a 00                	push   0x0
c000bb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb82:	e8 30 d2 01 00       	call   c0028db7 <__ltdf2>
c000bb87:	83 c4 10             	add    esp,0x10
c000bb8a:	85 c0                	test   eax,eax
c000bb8c:	79 4d                	jns    c000bbdb <sinc_multichan_vari_process+0x189>
c000bb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb9e:	eb 1b                	jmp    c000bbbb <sinc_multichan_vari_process+0x169>
c000bba0:	68 00 00 f0 3f       	push   0x3ff00000
c000bba5:	6a 00                	push   0x0
c000bba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbaf:	e8 03 d2 01 00       	call   c0028db7 <__ltdf2>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	85 c0                	test   eax,eax
c000bbb9:	79 20                	jns    c000bbdb <sinc_multichan_vari_process+0x189>
c000bbbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbcb:	e8 fc cb 01 00       	call   c00287cc <__divdf3>
c000bbd0:	83 c4 10             	add    esp,0x10
c000bbd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbdb:	50                   	push   eax
c000bbdc:	50                   	push   eax
c000bbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	e8 86 d3 01 00       	call   c0028f70 <lrint>
c000bbea:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbed:	40                   	inc    eax
c000bbee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbf2:	0f af c5             	imul   eax,ebp
c000bbf5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbf9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	58                   	pop    eax
c000bc01:	5a                   	pop    edx
c000bc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0a:	e8 61 d3 01 00       	call   c0028f70 <lrint>
c000bc0f:	83 ec 0c             	sub    esp,0xc
c000bc12:	50                   	push   eax
c000bc13:	e8 33 cf 01 00       	call   c0028b4b <__floatsidf>
c000bc18:	83 c4 10             	add    esp,0x10
c000bc1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc23:	52                   	push   edx
c000bc24:	50                   	push   eax
c000bc25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc2d:	e8 8a c8 01 00       	call   c00284bc <__subdf3>
c000bc32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc3a:	83 c4 20             	add    esp,0x20
c000bc3d:	6a 00                	push   0x0
c000bc3f:	6a 00                	push   0x0
c000bc41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc49:	e8 69 d1 01 00       	call   c0028db7 <__ltdf2>
c000bc4e:	83 c4 10             	add    esp,0x10
c000bc51:	85 c0                	test   eax,eax
c000bc53:	79 1f                	jns    c000bc74 <sinc_multichan_vari_process+0x222>
c000bc55:	68 00 00 f0 3f       	push   0x3ff00000
c000bc5a:	6a 00                	push   0x0
c000bc5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc64:	e8 02 c2 01 00       	call   c0027e6b <__adddf3>
c000bc69:	83 c4 10             	add    esp,0x10
c000bc6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc74:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc77:	83 ec 10             	sub    esp,0x10
c000bc7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc7e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc91:	e8 26 c8 01 00       	call   c00284bc <__subdf3>
c000bc96:	83 c4 18             	add    esp,0x18
c000bc99:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca1:	52                   	push   edx
c000bca2:	50                   	push   eax
c000bca3:	e8 c8 d2 01 00       	call   c0028f70 <lrint>
c000bca8:	0f af e8             	imul   ebp,eax
c000bcab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcaf:	01 e8                	add    eax,ebp
c000bcb1:	99                   	cdq    
c000bcb2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcb5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc0:	68 00 00 f0 3f       	push   0x3ff00000
c000bcc5:	6a 00                	push   0x0
c000bcc7:	e8 00 cb 01 00       	call   c00287cc <__divdf3>
c000bccc:	83 c4 10             	add    esp,0x10
c000bccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcdc:	68 23 42 92 0c       	push   0xc924223
c000bce1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce9:	e8 7d c1 01 00       	call   c0027e6b <__adddf3>
c000bcee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcf2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcf6:	83 c4 20             	add    esp,0x20
c000bcf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd01:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd0c:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd0f:	7d 50                	jge    c000bd61 <sinc_multichan_vari_process+0x30f>
c000bd11:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd14:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd17:	01 c8                	add    eax,ecx
c000bd19:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd1c:	99                   	cdq    
c000bd1d:	f7 f9                	idiv   ecx
c000bd1f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd23:	7d 0c                	jge    c000bd31 <sinc_multichan_vari_process+0x2df>
c000bd25:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd28:	85 ed                	test   ebp,ebp
c000bd2a:	79 6b                	jns    c000bd97 <sinc_multichan_vari_process+0x345>
c000bd2c:	e9 e6 00 00 00       	jmp    c000be17 <sinc_multichan_vari_process+0x3c5>
c000bd31:	50                   	push   eax
c000bd32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd36:	57                   	push   edi
c000bd37:	53                   	push   ebx
c000bd38:	e8 9b fb ff ff       	call   c000b8d8 <prepare_data>
c000bd3d:	83 c4 10             	add    esp,0x10
c000bd40:	89 c2                	mov    edx,eax
c000bd42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd45:	85 c0                	test   eax,eax
c000bd47:	0f 85 bf 03 00 00    	jne    c000c10c <sinc_multichan_vari_process+0x6ba>
c000bd4d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd50:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd53:	01 c8                	add    eax,ecx
c000bd55:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd58:	99                   	cdq    
c000bd59:	f7 f9                	idiv   ecx
c000bd5b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd5f:	7c c4                	jl     c000bd25 <sinc_multichan_vari_process+0x2d3>
c000bd61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd69:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd6c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd77:	89 06                	mov    DWORD PTR [esi],eax
c000bd79:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd7c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd7f:	99                   	cdq    
c000bd80:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd83:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd86:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd89:	99                   	cdq    
c000bd8a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8d:	31 d2                	xor    edx,edx
c000bd8f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd92:	e9 75 03 00 00       	jmp    c000c10c <sinc_multichan_vari_process+0x6ba>
c000bd97:	83 ec 0c             	sub    esp,0xc
c000bd9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd9d:	e8 a9 cd 01 00       	call   c0028b4b <__floatsidf>
c000bda2:	83 c4 10             	add    esp,0x10
c000bda5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bda9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	e8 a9 c0 01 00       	call   c0027e6b <__adddf3>
c000bdc2:	83 c4 10             	add    esp,0x10
c000bdc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddd:	e8 89 c0 01 00       	call   c0027e6b <__adddf3>
c000bde2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bde5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bde9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bded:	e8 59 cd 01 00       	call   c0028b4b <__floatsidf>
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdfd:	52                   	push   edx
c000bdfe:	50                   	push   eax
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be07:	e8 a9 cf 01 00       	call   c0028db5 <__gedf2>
c000be0c:	83 c4 10             	add    esp,0x10
c000be0f:	85 c0                	test   eax,eax
c000be11:	0f 89 4a ff ff ff    	jns    c000bd61 <sinc_multichan_vari_process+0x30f>
c000be17:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be1b:	0f 8e ed 00 00 00    	jle    c000bf0e <sinc_multichan_vari_process+0x4bc>
c000be21:	83 ec 10             	sub    esp,0x10
c000be24:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be27:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be2d:	ff 36                	push   DWORD PTR [esi]
c000be2f:	e8 88 c6 01 00       	call   c00284bc <__subdf3>
c000be34:	83 c4 18             	add    esp,0x18
c000be37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3f:	52                   	push   edx
c000be40:	50                   	push   eax
c000be41:	e8 0a d1 01 00       	call   c0028f50 <fabs>
c000be46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be4a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be56:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be63:	e8 31 cf 01 00       	call   c0028d99 <__gtdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	0f 8e 9b 00 00 00    	jle    c000bf0e <sinc_multichan_vari_process+0x4bc>
c000be73:	8b 06                	mov    eax,DWORD PTR [esi]
c000be75:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be7c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be80:	52                   	push   edx
c000be81:	50                   	push   eax
c000be82:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be85:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be88:	e8 2f c6 01 00       	call   c00284bc <__subdf3>
c000be8d:	59                   	pop    ecx
c000be8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be92:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be96:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be99:	e8 ad cc 01 00       	call   c0028b4b <__floatsidf>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bea5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea9:	52                   	push   edx
c000beaa:	50                   	push   eax
c000beab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beb3:	e8 30 c6 01 00       	call   c00284e8 <__muldf3>
c000beb8:	5d                   	pop    ebp
c000beb9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bebd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bec1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bec4:	e8 82 cc 01 00       	call   c0028b4b <__floatsidf>
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bed0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed4:	52                   	push   edx
c000bed5:	50                   	push   eax
c000bed6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	e8 e9 c8 01 00       	call   c00287cc <__divdf3>
c000bee3:	83 c4 10             	add    esp,0x10
c000bee6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000beea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befe:	e8 68 bf 01 00       	call   c0027e6b <__adddf3>
c000bf03:	83 c4 10             	add    esp,0x10
c000bf06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf0a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf0e:	83 ec 0c             	sub    esp,0xc
c000bf11:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf14:	e8 32 cc 01 00       	call   c0028b4b <__floatsidf>
c000bf19:	83 c4 10             	add    esp,0x10
c000bf1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf34:	e8 7e ce 01 00       	call   c0028db7 <__ltdf2>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf46:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf4a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf4e:	78 10                	js     c000bf60 <sinc_multichan_vari_process+0x50e>
c000bf50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf5c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf70:	e8 73 c5 01 00       	call   c00284e8 <__muldf3>
c000bf75:	59                   	pop    ecx
c000bf76:	5d                   	pop    ebp
c000bf77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf87:	e8 25 f9 ff ff       	call   c000b8b1 <double_to_fp>
c000bf8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf90:	89 c5                	mov    ebp,eax
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9e:	e8 45 c5 01 00       	call   c00284e8 <__muldf3>
c000bfa3:	83 c4 18             	add    esp,0x18
c000bfa6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfae:	52                   	push   edx
c000bfaf:	50                   	push   eax
c000bfb0:	e8 fc f8 ff ff       	call   c000b8b1 <double_to_fp>
c000bfb5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfb8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfbc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfbf:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfc2:	50                   	push   eax
c000bfc3:	50                   	push   eax
c000bfc4:	50                   	push   eax
c000bfc5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc8:	e8 7e cb 01 00       	call   c0028b4b <__floatsidf>
c000bfcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe5:	e8 e2 c7 01 00       	call   c00287cc <__divdf3>
c000bfea:	83 c4 1c             	add    esp,0x1c
c000bfed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bff1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bff5:	52                   	push   edx
c000bff6:	89 ea                	mov    edx,ebp
c000bff8:	50                   	push   eax
c000bff9:	89 d8                	mov    eax,ebx
c000bffb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bffe:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c002:	e8 69 ed ff ff       	call   c000ad70 <calc_output_multi>
c000c007:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c00a:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c00d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c011:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c015:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c019:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c01d:	e8 aa c7 01 00       	call   c00287cc <__divdf3>
c000c022:	83 c4 10             	add    esp,0x10
c000c025:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c029:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c039:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c03d:	e8 29 be 01 00       	call   c0027e6b <__adddf3>
c000c042:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c046:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c04a:	83 c4 28             	add    esp,0x28
c000c04d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c051:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c055:	e8 16 cf 01 00       	call   c0028f70 <lrint>
c000c05a:	83 ec 0c             	sub    esp,0xc
c000c05d:	50                   	push   eax
c000c05e:	e8 e8 ca 01 00       	call   c0028b4b <__floatsidf>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	52                   	push   edx
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c074:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c078:	e8 3f c4 01 00       	call   c00284bc <__subdf3>
c000c07d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	83 c4 20             	add    esp,0x20
c000c088:	6a 00                	push   0x0
c000c08a:	6a 00                	push   0x0
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 1e cd 01 00       	call   c0028db7 <__ltdf2>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	85 c0                	test   eax,eax
c000c09e:	79 20                	jns    c000c0c0 <sinc_multichan_vari_process+0x66e>
c000c0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b0:	e8 b6 bd 01 00       	call   c0027e6b <__adddf3>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0c0:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c3:	83 ec 10             	sub    esp,0x10
c000c0c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0dd:	e8 da c3 01 00       	call   c00284bc <__subdf3>
c000c0e2:	83 c4 18             	add    esp,0x18
c000c0e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ed:	52                   	push   edx
c000c0ee:	50                   	push   eax
c000c0ef:	e8 7c ce 01 00       	call   c0028f70 <lrint>
c000c0f4:	0f af e8             	imul   ebp,eax
c000c0f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0fb:	83 c4 10             	add    esp,0x10
c000c0fe:	01 e8                	add    eax,ebp
c000c100:	99                   	cdq    
c000c101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c107:	e9 fd fb ff ff       	jmp    c000bd09 <sinc_multichan_vari_process+0x2b7>
c000c10c:	83 c4 4c             	add    esp,0x4c
c000c10f:	89 d0                	mov    eax,edx
c000c111:	5b                   	pop    ebx
c000c112:	5e                   	pop    esi
c000c113:	5f                   	pop    edi
c000c114:	5d                   	pop    ebp
c000c115:	c3                   	ret    

c000c116 <sinc_hex_vari_process>:
c000c116:	55                   	push   ebp
c000c117:	ba 05 00 00 00       	mov    edx,0x5
c000c11c:	57                   	push   edi
c000c11d:	56                   	push   esi
c000c11e:	53                   	push   ebx
c000c11f:	83 ec 4c             	sub    esp,0x4c
c000c122:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c126:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c12a:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c12d:	85 db                	test   ebx,ebx
c000c12f:	0f 84 9c 06 00 00    	je     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c135:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c138:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c13b:	0f af c7             	imul   eax,edi
c000c13e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c141:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c144:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c14b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c152:	0f af c7             	imul   eax,edi
c000c155:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c158:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c15b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c15e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c162:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c166:	68 00 00 70 3f       	push   0x3f700000
c000c16b:	6a 00                	push   0x0
c000c16d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c175:	e8 3d cc 01 00       	call   c0028db7 <__ltdf2>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	ba 16 00 00 00       	mov    edx,0x16
c000c182:	85 c0                	test   eax,eax
c000c184:	0f 88 47 06 00 00    	js     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c18a:	68 00 00 70 40       	push   0x40700000
c000c18f:	6a 00                	push   0x0
c000c191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c199:	e8 fb cb 01 00       	call   c0028d99 <__gtdf2>
c000c19e:	83 c4 10             	add    esp,0x10
c000c1a1:	ba 16 00 00 00       	mov    edx,0x16
c000c1a6:	85 c0                	test   eax,eax
c000c1a8:	0f 8f 23 06 00 00    	jg     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c1ae:	83 ec 0c             	sub    esp,0xc
c000c1b1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1b4:	e8 92 c9 01 00       	call   c0028b4b <__floatsidf>
c000c1b9:	83 c4 10             	add    esp,0x10
c000c1bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1c4:	68 00 00 00 40       	push   0x40000000
c000c1c9:	6a 00                	push   0x0
c000c1cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1d3:	e8 93 bc 01 00       	call   c0027e6b <__adddf3>
c000c1d8:	59                   	pop    ecx
c000c1d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1dd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1e1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e4:	e8 62 c9 01 00       	call   c0028b4b <__floatsidf>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f4:	52                   	push   edx
c000c1f5:	50                   	push   eax
c000c1f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fe:	e8 c9 c5 01 00       	call   c00287cc <__divdf3>
c000c203:	83 c4 10             	add    esp,0x10
c000c206:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c20e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c211:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c214:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c218:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22c:	e8 68 cb 01 00       	call   c0028d99 <__gtdf2>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	85 c0                	test   eax,eax
c000c236:	7e 2d                	jle    c000c265 <sinc_hex_vari_process+0x14f>
c000c238:	68 00 00 f0 3f       	push   0x3ff00000
c000c23d:	6a 00                	push   0x0
c000c23f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c247:	e8 6b cb 01 00       	call   c0028db7 <__ltdf2>
c000c24c:	83 c4 10             	add    esp,0x10
c000c24f:	85 c0                	test   eax,eax
c000c251:	79 4d                	jns    c000c2a0 <sinc_hex_vari_process+0x18a>
c000c253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c257:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c25b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c263:	eb 1b                	jmp    c000c280 <sinc_hex_vari_process+0x16a>
c000c265:	68 00 00 f0 3f       	push   0x3ff00000
c000c26a:	6a 00                	push   0x0
c000c26c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c274:	e8 3e cb 01 00       	call   c0028db7 <__ltdf2>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	85 c0                	test   eax,eax
c000c27e:	79 20                	jns    c000c2a0 <sinc_hex_vari_process+0x18a>
c000c280:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c284:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c288:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c290:	e8 37 c5 01 00       	call   c00287cc <__divdf3>
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c29c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2a0:	50                   	push   eax
c000c2a1:	50                   	push   eax
c000c2a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	e8 c1 cc 01 00       	call   c0028f70 <lrint>
c000c2af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2b2:	40                   	inc    eax
c000c2b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b7:	0f af c7             	imul   eax,edi
c000c2ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c5:	58                   	pop    eax
c000c2c6:	5a                   	pop    edx
c000c2c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cf:	e8 9c cc 01 00       	call   c0028f70 <lrint>
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	50                   	push   eax
c000c2d8:	e8 6e c8 01 00       	call   c0028b4b <__floatsidf>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e8:	52                   	push   edx
c000c2e9:	50                   	push   eax
c000c2ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f2:	e8 c5 c1 01 00       	call   c00284bc <__subdf3>
c000c2f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ff:	83 c4 20             	add    esp,0x20
c000c302:	6a 00                	push   0x0
c000c304:	6a 00                	push   0x0
c000c306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30e:	e8 a4 ca 01 00       	call   c0028db7 <__ltdf2>
c000c313:	83 c4 10             	add    esp,0x10
c000c316:	85 c0                	test   eax,eax
c000c318:	79 1f                	jns    c000c339 <sinc_hex_vari_process+0x223>
c000c31a:	68 00 00 f0 3f       	push   0x3ff00000
c000c31f:	6a 00                	push   0x0
c000c321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c325:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c329:	e8 3d bb 01 00       	call   c0027e6b <__adddf3>
c000c32e:	83 c4 10             	add    esp,0x10
c000c331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c335:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c339:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c33c:	83 ec 10             	sub    esp,0x10
c000c33f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c343:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c356:	e8 61 c1 01 00       	call   c00284bc <__subdf3>
c000c35b:	83 c4 18             	add    esp,0x18
c000c35e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c362:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c366:	52                   	push   edx
c000c367:	50                   	push   eax
c000c368:	e8 03 cc 01 00       	call   c0028f70 <lrint>
c000c36d:	0f af f8             	imul   edi,eax
c000c370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c374:	01 f8                	add    eax,edi
c000c376:	99                   	cdq    
c000c377:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c37a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c37d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c381:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c385:	68 00 00 f0 3f       	push   0x3ff00000
c000c38a:	6a 00                	push   0x0
c000c38c:	e8 3b c4 01 00       	call   c00287cc <__divdf3>
c000c391:	83 c4 10             	add    esp,0x10
c000c394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c39c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3a1:	68 23 42 92 0c       	push   0xc924223
c000c3a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ae:	e8 b8 ba 01 00       	call   c0027e6b <__adddf3>
c000c3b3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3b7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3bb:	83 c4 20             	add    esp,0x20
c000c3be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3c6:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3d1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3d4:	7d 50                	jge    c000c426 <sinc_hex_vari_process+0x310>
c000c3d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3dc:	01 c8                	add    eax,ecx
c000c3de:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3e1:	99                   	cdq    
c000c3e2:	f7 f9                	idiv   ecx
c000c3e4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3e8:	7d 0c                	jge    c000c3f6 <sinc_hex_vari_process+0x2e0>
c000c3ea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3ed:	85 ff                	test   edi,edi
c000c3ef:	79 6c                	jns    c000c45d <sinc_hex_vari_process+0x347>
c000c3f1:	e9 e7 00 00 00       	jmp    c000c4dd <sinc_hex_vari_process+0x3c7>
c000c3f6:	50                   	push   eax
c000c3f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fb:	56                   	push   esi
c000c3fc:	53                   	push   ebx
c000c3fd:	e8 d6 f4 ff ff       	call   c000b8d8 <prepare_data>
c000c402:	83 c4 10             	add    esp,0x10
c000c405:	89 c2                	mov    edx,eax
c000c407:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c40a:	85 c0                	test   eax,eax
c000c40c:	0f 85 bf 03 00 00    	jne    c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c412:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c415:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c418:	01 c8                	add    eax,ecx
c000c41a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c41d:	99                   	cdq    
c000c41e:	f7 f9                	idiv   ecx
c000c420:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c424:	7c c4                	jl     c000c3ea <sinc_hex_vari_process+0x2d4>
c000c426:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c42a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c42e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c431:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c438:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c43c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c43f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c442:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c445:	99                   	cdq    
c000c446:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c449:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c44c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c44f:	99                   	cdq    
c000c450:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c453:	31 d2                	xor    edx,edx
c000c455:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c458:	e9 74 03 00 00       	jmp    c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c45d:	83 ec 0c             	sub    esp,0xc
c000c460:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c463:	e8 e3 c6 01 00       	call   c0028b4b <__floatsidf>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c46f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c473:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c477:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c47b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	e8 e3 b9 01 00       	call   c0027e6b <__adddf3>
c000c488:	83 c4 10             	add    esp,0x10
c000c48b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c493:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c497:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a3:	e8 c3 b9 01 00       	call   c0027e6b <__adddf3>
c000c4a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b3:	e8 93 c6 01 00       	call   c0028b4b <__floatsidf>
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c3:	52                   	push   edx
c000c4c4:	50                   	push   eax
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cd:	e8 e3 c8 01 00       	call   c0028db5 <__gedf2>
c000c4d2:	83 c4 10             	add    esp,0x10
c000c4d5:	85 c0                	test   eax,eax
c000c4d7:	0f 89 49 ff ff ff    	jns    c000c426 <sinc_hex_vari_process+0x310>
c000c4dd:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4e1:	0f 8e ef 00 00 00    	jle    c000c5d6 <sinc_hex_vari_process+0x4c0>
c000c4e7:	83 ec 10             	sub    esp,0x10
c000c4ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4f0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4f3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4f6:	e8 c1 bf 01 00       	call   c00284bc <__subdf3>
c000c4fb:	83 c4 18             	add    esp,0x18
c000c4fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c502:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c506:	52                   	push   edx
c000c507:	50                   	push   eax
c000c508:	e8 43 ca 01 00       	call   c0028f50 <fabs>
c000c50d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c511:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c515:	83 c4 10             	add    esp,0x10
c000c518:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c51d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c522:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c526:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c52a:	e8 6a c8 01 00       	call   c0028d99 <__gtdf2>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	85 c0                	test   eax,eax
c000c534:	0f 8e 9c 00 00 00    	jle    c000c5d6 <sinc_hex_vari_process+0x4c0>
c000c53a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c544:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c548:	52                   	push   edx
c000c549:	50                   	push   eax
c000c54a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c54d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c550:	e8 67 bf 01 00       	call   c00284bc <__subdf3>
c000c555:	59                   	pop    ecx
c000c556:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c55a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c55e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c561:	e8 e5 c5 01 00       	call   c0028b4b <__floatsidf>
c000c566:	83 c4 10             	add    esp,0x10
c000c569:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c56d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c571:	52                   	push   edx
c000c572:	50                   	push   eax
c000c573:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c577:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c57b:	e8 68 bf 01 00       	call   c00284e8 <__muldf3>
c000c580:	5f                   	pop    edi
c000c581:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c585:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c589:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c58c:	e8 ba c5 01 00       	call   c0028b4b <__floatsidf>
c000c591:	83 c4 10             	add    esp,0x10
c000c594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c59c:	52                   	push   edx
c000c59d:	50                   	push   eax
c000c59e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	e8 21 c2 01 00       	call   c00287cc <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c6:	e8 a0 b8 01 00       	call   c0027e6b <__adddf3>
c000c5cb:	83 c4 10             	add    esp,0x10
c000c5ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5d6:	83 ec 0c             	sub    esp,0xc
c000c5d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5dc:	e8 6a c5 01 00       	call   c0028b4b <__floatsidf>
c000c5e1:	83 c4 10             	add    esp,0x10
c000c5e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fc:	e8 b6 c7 01 00       	call   c0028db7 <__ltdf2>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	85 c0                	test   eax,eax
c000c606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c60a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c60e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c612:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c616:	78 10                	js     c000c628 <sinc_hex_vari_process+0x512>
c000c618:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c61c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c620:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c624:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c628:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c630:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c634:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c638:	e8 ab be 01 00       	call   c00284e8 <__muldf3>
c000c63d:	59                   	pop    ecx
c000c63e:	5f                   	pop    edi
c000c63f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c643:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64f:	e8 5d f2 ff ff       	call   c000b8b1 <double_to_fp>
c000c654:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c658:	89 c7                	mov    edi,eax
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c666:	e8 7d be 01 00       	call   c00284e8 <__muldf3>
c000c66b:	83 c4 18             	add    esp,0x18
c000c66e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c676:	52                   	push   edx
c000c677:	50                   	push   eax
c000c678:	e8 34 f2 ff ff       	call   c000b8b1 <double_to_fp>
c000c67d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c680:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c684:	83 c4 0c             	add    esp,0xc
c000c687:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c68a:	8d 04 90             	lea    eax,[eax+edx*4]
c000c68d:	50                   	push   eax
c000c68e:	50                   	push   eax
c000c68f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c692:	e8 b4 c4 01 00       	call   c0028b4b <__floatsidf>
c000c697:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c69b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c69f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6af:	e8 18 c1 01 00       	call   c00287cc <__divdf3>
c000c6b4:	83 c4 18             	add    esp,0x18
c000c6b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6bf:	52                   	push   edx
c000c6c0:	89 fa                	mov    edx,edi
c000c6c2:	50                   	push   eax
c000c6c3:	89 d8                	mov    eax,ebx
c000c6c5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6c9:	e8 50 de ff ff       	call   c000a51e <calc_output_hex>
c000c6ce:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6e2:	e8 e5 c0 01 00       	call   c00287cc <__divdf3>
c000c6e7:	83 c4 10             	add    esp,0x10
c000c6ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c702:	e8 64 b7 01 00       	call   c0027e6b <__adddf3>
c000c707:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c70b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c70f:	83 c4 18             	add    esp,0x18
c000c712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c71a:	e8 51 c8 01 00       	call   c0028f70 <lrint>
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	50                   	push   eax
c000c723:	e8 23 c4 01 00       	call   c0028b4b <__floatsidf>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	52                   	push   edx
c000c734:	50                   	push   eax
c000c735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73d:	e8 7a bd 01 00       	call   c00284bc <__subdf3>
c000c742:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	83 c4 20             	add    esp,0x20
c000c74d:	6a 00                	push   0x0
c000c74f:	6a 00                	push   0x0
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 59 c6 01 00       	call   c0028db7 <__ltdf2>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	85 c0                	test   eax,eax
c000c763:	79 20                	jns    c000c785 <sinc_hex_vari_process+0x66f>
c000c765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c775:	e8 f1 b6 01 00       	call   c0027e6b <__adddf3>
c000c77a:	83 c4 10             	add    esp,0x10
c000c77d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c781:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c785:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c788:	83 ec 10             	sub    esp,0x10
c000c78b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c78f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c79a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c79e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7a2:	e8 15 bd 01 00       	call   c00284bc <__subdf3>
c000c7a7:	83 c4 18             	add    esp,0x18
c000c7aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	52                   	push   edx
c000c7b3:	50                   	push   eax
c000c7b4:	e8 b7 c7 01 00       	call   c0028f70 <lrint>
c000c7b9:	0f af f8             	imul   edi,eax
c000c7bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7c0:	83 c4 10             	add    esp,0x10
c000c7c3:	01 f8                	add    eax,edi
c000c7c5:	99                   	cdq    
c000c7c6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7c9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7cc:	e9 fd fb ff ff       	jmp    c000c3ce <sinc_hex_vari_process+0x2b8>
c000c7d1:	83 c4 4c             	add    esp,0x4c
c000c7d4:	89 d0                	mov    eax,edx
c000c7d6:	5b                   	pop    ebx
c000c7d7:	5e                   	pop    esi
c000c7d8:	5f                   	pop    edi
c000c7d9:	5d                   	pop    ebp
c000c7da:	c3                   	ret    

c000c7db <sinc_quad_vari_process>:
c000c7db:	55                   	push   ebp
c000c7dc:	ba 05 00 00 00       	mov    edx,0x5
c000c7e1:	57                   	push   edi
c000c7e2:	56                   	push   esi
c000c7e3:	53                   	push   ebx
c000c7e4:	83 ec 4c             	sub    esp,0x4c
c000c7e7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7eb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7ef:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7f2:	85 db                	test   ebx,ebx
c000c7f4:	0f 84 9c 06 00 00    	je     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c7fa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c800:	0f af c7             	imul   eax,edi
c000c803:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c806:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c809:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c810:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c817:	0f af c7             	imul   eax,edi
c000c81a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c81d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c820:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c823:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82b:	68 00 00 70 3f       	push   0x3f700000
c000c830:	6a 00                	push   0x0
c000c832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83a:	e8 78 c5 01 00       	call   c0028db7 <__ltdf2>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	ba 16 00 00 00       	mov    edx,0x16
c000c847:	85 c0                	test   eax,eax
c000c849:	0f 88 47 06 00 00    	js     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c84f:	68 00 00 70 40       	push   0x40700000
c000c854:	6a 00                	push   0x0
c000c856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85e:	e8 36 c5 01 00       	call   c0028d99 <__gtdf2>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	ba 16 00 00 00       	mov    edx,0x16
c000c86b:	85 c0                	test   eax,eax
c000c86d:	0f 8f 23 06 00 00    	jg     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c873:	83 ec 0c             	sub    esp,0xc
c000c876:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c879:	e8 cd c2 01 00       	call   c0028b4b <__floatsidf>
c000c87e:	83 c4 10             	add    esp,0x10
c000c881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c889:	68 00 00 00 40       	push   0x40000000
c000c88e:	6a 00                	push   0x0
c000c890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c898:	e8 ce b5 01 00       	call   c0027e6b <__adddf3>
c000c89d:	59                   	pop    ecx
c000c89e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8a9:	e8 9d c2 01 00       	call   c0028b4b <__floatsidf>
c000c8ae:	83 c4 10             	add    esp,0x10
c000c8b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b9:	52                   	push   edx
c000c8ba:	50                   	push   eax
c000c8bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c3:	e8 04 bf 01 00       	call   c00287cc <__divdf3>
c000c8c8:	83 c4 10             	add    esp,0x10
c000c8cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8d6:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f1:	e8 a3 c4 01 00       	call   c0028d99 <__gtdf2>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	85 c0                	test   eax,eax
c000c8fb:	7e 2d                	jle    c000c92a <sinc_quad_vari_process+0x14f>
c000c8fd:	68 00 00 f0 3f       	push   0x3ff00000
c000c902:	6a 00                	push   0x0
c000c904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90c:	e8 a6 c4 01 00       	call   c0028db7 <__ltdf2>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	85 c0                	test   eax,eax
c000c916:	79 4d                	jns    c000c965 <sinc_quad_vari_process+0x18a>
c000c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c928:	eb 1b                	jmp    c000c945 <sinc_quad_vari_process+0x16a>
c000c92a:	68 00 00 f0 3f       	push   0x3ff00000
c000c92f:	6a 00                	push   0x0
c000c931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c935:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c939:	e8 79 c4 01 00       	call   c0028db7 <__ltdf2>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	85 c0                	test   eax,eax
c000c943:	79 20                	jns    c000c965 <sinc_quad_vari_process+0x18a>
c000c945:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c94d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c951:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c955:	e8 72 be 01 00       	call   c00287cc <__divdf3>
c000c95a:	83 c4 10             	add    esp,0x10
c000c95d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c961:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c965:	50                   	push   eax
c000c966:	50                   	push   eax
c000c967:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	e8 fc c5 01 00       	call   c0028f70 <lrint>
c000c974:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c977:	40                   	inc    eax
c000c978:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c97c:	0f af c7             	imul   eax,edi
c000c97f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98a:	58                   	pop    eax
c000c98b:	5a                   	pop    edx
c000c98c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c990:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c994:	e8 d7 c5 01 00       	call   c0028f70 <lrint>
c000c999:	83 ec 0c             	sub    esp,0xc
c000c99c:	50                   	push   eax
c000c99d:	e8 a9 c1 01 00       	call   c0028b4b <__floatsidf>
c000c9a2:	83 c4 10             	add    esp,0x10
c000c9a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ad:	52                   	push   edx
c000c9ae:	50                   	push   eax
c000c9af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b7:	e8 00 bb 01 00       	call   c00284bc <__subdf3>
c000c9bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c4:	83 c4 20             	add    esp,0x20
c000c9c7:	6a 00                	push   0x0
c000c9c9:	6a 00                	push   0x0
c000c9cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d3:	e8 df c3 01 00       	call   c0028db7 <__ltdf2>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	85 c0                	test   eax,eax
c000c9dd:	79 1f                	jns    c000c9fe <sinc_quad_vari_process+0x223>
c000c9df:	68 00 00 f0 3f       	push   0x3ff00000
c000c9e4:	6a 00                	push   0x0
c000c9e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ee:	e8 78 b4 01 00       	call   c0027e6b <__adddf3>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9fe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca01:	83 ec 10             	sub    esp,0x10
c000ca04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca08:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca1b:	e8 9c ba 01 00       	call   c00284bc <__subdf3>
c000ca20:	83 c4 18             	add    esp,0x18
c000ca23:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca2b:	52                   	push   edx
c000ca2c:	50                   	push   eax
c000ca2d:	e8 3e c5 01 00       	call   c0028f70 <lrint>
c000ca32:	0f af f8             	imul   edi,eax
c000ca35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca39:	01 f8                	add    eax,edi
c000ca3b:	99                   	cdq    
c000ca3c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca3f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca4a:	68 00 00 f0 3f       	push   0x3ff00000
c000ca4f:	6a 00                	push   0x0
c000ca51:	e8 76 bd 01 00       	call   c00287cc <__divdf3>
c000ca56:	83 c4 10             	add    esp,0x10
c000ca59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca61:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca66:	68 23 42 92 0c       	push   0xc924223
c000ca6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca73:	e8 f3 b3 01 00       	call   c0027e6b <__adddf3>
c000ca78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca80:	83 c4 20             	add    esp,0x20
c000ca83:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca8b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca96:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca99:	7d 50                	jge    c000caeb <sinc_quad_vari_process+0x310>
c000ca9b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca9e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000caa1:	01 c8                	add    eax,ecx
c000caa3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caa6:	99                   	cdq    
c000caa7:	f7 f9                	idiv   ecx
c000caa9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caad:	7d 0c                	jge    c000cabb <sinc_quad_vari_process+0x2e0>
c000caaf:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cab2:	85 ff                	test   edi,edi
c000cab4:	79 6c                	jns    c000cb22 <sinc_quad_vari_process+0x347>
c000cab6:	e9 e7 00 00 00       	jmp    c000cba2 <sinc_quad_vari_process+0x3c7>
c000cabb:	50                   	push   eax
c000cabc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cac0:	56                   	push   esi
c000cac1:	53                   	push   ebx
c000cac2:	e8 11 ee ff ff       	call   c000b8d8 <prepare_data>
c000cac7:	83 c4 10             	add    esp,0x10
c000caca:	89 c2                	mov    edx,eax
c000cacc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cacf:	85 c0                	test   eax,eax
c000cad1:	0f 85 bf 03 00 00    	jne    c000ce96 <sinc_quad_vari_process+0x6bb>
c000cad7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cada:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cadd:	01 c8                	add    eax,ecx
c000cadf:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae2:	99                   	cdq    
c000cae3:	f7 f9                	idiv   ecx
c000cae5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cae9:	7c c4                	jl     c000caaf <sinc_quad_vari_process+0x2d4>
c000caeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000caf6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000caf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb01:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb04:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb07:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb0a:	99                   	cdq    
c000cb0b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb0e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb11:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb14:	99                   	cdq    
c000cb15:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb18:	31 d2                	xor    edx,edx
c000cb1a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb1d:	e9 74 03 00 00       	jmp    c000ce96 <sinc_quad_vari_process+0x6bb>
c000cb22:	83 ec 0c             	sub    esp,0xc
c000cb25:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb28:	e8 1e c0 01 00       	call   c0028b4b <__floatsidf>
c000cb2d:	83 c4 10             	add    esp,0x10
c000cb30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	e8 1e b3 01 00       	call   c0027e6b <__adddf3>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb54:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb68:	e8 fe b2 01 00       	call   c0027e6b <__adddf3>
c000cb6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb70:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb78:	e8 ce bf 01 00       	call   c0028b4b <__floatsidf>
c000cb7d:	83 c4 10             	add    esp,0x10
c000cb80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb84:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb88:	52                   	push   edx
c000cb89:	50                   	push   eax
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb92:	e8 1e c2 01 00       	call   c0028db5 <__gedf2>
c000cb97:	83 c4 10             	add    esp,0x10
c000cb9a:	85 c0                	test   eax,eax
c000cb9c:	0f 89 49 ff ff ff    	jns    c000caeb <sinc_quad_vari_process+0x310>
c000cba2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cba6:	0f 8e ef 00 00 00    	jle    c000cc9b <sinc_quad_vari_process+0x4c0>
c000cbac:	83 ec 10             	sub    esp,0x10
c000cbaf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbb2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbb5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbbb:	e8 fc b8 01 00       	call   c00284bc <__subdf3>
c000cbc0:	83 c4 18             	add    esp,0x18
c000cbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcb:	52                   	push   edx
c000cbcc:	50                   	push   eax
c000cbcd:	e8 7e c3 01 00       	call   c0028f50 <fabs>
c000cbd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbda:	83 c4 10             	add    esp,0x10
c000cbdd:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbe2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbef:	e8 a5 c1 01 00       	call   c0028d99 <__gtdf2>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	0f 8e 9c 00 00 00    	jle    c000cc9b <sinc_quad_vari_process+0x4c0>
c000cbff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc02:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc0d:	52                   	push   edx
c000cc0e:	50                   	push   eax
c000cc0f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc12:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc15:	e8 a2 b8 01 00       	call   c00284bc <__subdf3>
c000cc1a:	59                   	pop    ecx
c000cc1b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc1f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc26:	e8 20 bf 01 00       	call   c0028b4b <__floatsidf>
c000cc2b:	83 c4 10             	add    esp,0x10
c000cc2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc36:	52                   	push   edx
c000cc37:	50                   	push   eax
c000cc38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc40:	e8 a3 b8 01 00       	call   c00284e8 <__muldf3>
c000cc45:	5f                   	pop    edi
c000cc46:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc4a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc4e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc51:	e8 f5 be 01 00       	call   c0028b4b <__floatsidf>
c000cc56:	83 c4 10             	add    esp,0x10
c000cc59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc61:	52                   	push   edx
c000cc62:	50                   	push   eax
c000cc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	e8 5c bb 01 00       	call   c00287cc <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8b:	e8 db b1 01 00       	call   c0027e6b <__adddf3>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc97:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc9b:	83 ec 0c             	sub    esp,0xc
c000cc9e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cca1:	e8 a5 be 01 00       	call   c0028b4b <__floatsidf>
c000cca6:	83 c4 10             	add    esp,0x10
c000cca9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc1:	e8 f1 c0 01 00       	call   c0028db7 <__ltdf2>
c000ccc6:	83 c4 10             	add    esp,0x10
c000ccc9:	85 c0                	test   eax,eax
c000cccb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cccf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccd3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccd7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccdb:	78 10                	js     c000cced <sinc_quad_vari_process+0x512>
c000ccdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cce1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cce5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cce9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cced:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccfd:	e8 e6 b7 01 00       	call   c00284e8 <__muldf3>
c000cd02:	59                   	pop    ecx
c000cd03:	5f                   	pop    edi
c000cd04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd14:	e8 98 eb ff ff       	call   c000b8b1 <double_to_fp>
c000cd19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1d:	89 c7                	mov    edi,eax
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd2b:	e8 b8 b7 01 00       	call   c00284e8 <__muldf3>
c000cd30:	83 c4 18             	add    esp,0x18
c000cd33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd3b:	52                   	push   edx
c000cd3c:	50                   	push   eax
c000cd3d:	e8 6f eb ff ff       	call   c000b8b1 <double_to_fp>
c000cd42:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd45:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd49:	83 c4 0c             	add    esp,0xc
c000cd4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd4f:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd52:	50                   	push   eax
c000cd53:	50                   	push   eax
c000cd54:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd57:	e8 ef bd 01 00       	call   c0028b4b <__floatsidf>
c000cd5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd74:	e8 53 ba 01 00       	call   c00287cc <__divdf3>
c000cd79:	83 c4 18             	add    esp,0x18
c000cd7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd84:	52                   	push   edx
c000cd85:	89 fa                	mov    edx,edi
c000cd87:	50                   	push   eax
c000cd88:	89 d8                	mov    eax,ebx
c000cd8a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd8e:	e8 a5 d1 ff ff       	call   c0009f38 <calc_output_quad>
c000cd93:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda7:	e8 20 ba 01 00       	call   c00287cc <__divdf3>
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdb3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc7:	e8 9f b0 01 00       	call   c0027e6b <__adddf3>
c000cdcc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdd0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdd4:	83 c4 18             	add    esp,0x18
c000cdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddf:	e8 8c c1 01 00       	call   c0028f70 <lrint>
c000cde4:	83 ec 0c             	sub    esp,0xc
c000cde7:	50                   	push   eax
c000cde8:	e8 5e bd 01 00       	call   c0028b4b <__floatsidf>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	52                   	push   edx
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce02:	e8 b5 b6 01 00       	call   c00284bc <__subdf3>
c000ce07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	83 c4 20             	add    esp,0x20
c000ce12:	6a 00                	push   0x0
c000ce14:	6a 00                	push   0x0
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 94 bf 01 00       	call   c0028db7 <__ltdf2>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	85 c0                	test   eax,eax
c000ce28:	79 20                	jns    c000ce4a <sinc_quad_vari_process+0x66f>
c000ce2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3a:	e8 2c b0 01 00       	call   c0027e6b <__adddf3>
c000ce3f:	83 c4 10             	add    esp,0x10
c000ce42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce4a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce4d:	83 ec 10             	sub    esp,0x10
c000ce50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce54:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce67:	e8 50 b6 01 00       	call   c00284bc <__subdf3>
c000ce6c:	83 c4 18             	add    esp,0x18
c000ce6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	52                   	push   edx
c000ce78:	50                   	push   eax
c000ce79:	e8 f2 c0 01 00       	call   c0028f70 <lrint>
c000ce7e:	0f af f8             	imul   edi,eax
c000ce81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	01 f8                	add    eax,edi
c000ce8a:	99                   	cdq    
c000ce8b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce8e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce91:	e9 fd fb ff ff       	jmp    c000ca93 <sinc_quad_vari_process+0x2b8>
c000ce96:	83 c4 4c             	add    esp,0x4c
c000ce99:	89 d0                	mov    eax,edx
c000ce9b:	5b                   	pop    ebx
c000ce9c:	5e                   	pop    esi
c000ce9d:	5f                   	pop    edi
c000ce9e:	5d                   	pop    ebp
c000ce9f:	c3                   	ret    

c000cea0 <sinc_stereo_vari_process>:
c000cea0:	55                   	push   ebp
c000cea1:	ba 05 00 00 00       	mov    edx,0x5
c000cea6:	57                   	push   edi
c000cea7:	56                   	push   esi
c000cea8:	53                   	push   ebx
c000cea9:	83 ec 4c             	sub    esp,0x4c
c000ceac:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ceb0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceb4:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ceb7:	85 db                	test   ebx,ebx
c000ceb9:	0f 84 9c 06 00 00    	je     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cebf:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cec2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cec5:	0f af c7             	imul   eax,edi
c000cec8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cecb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cece:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ced5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cedc:	0f af c7             	imul   eax,edi
c000cedf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cee2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cee5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cee8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cef0:	68 00 00 70 3f       	push   0x3f700000
c000cef5:	6a 00                	push   0x0
c000cef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceff:	e8 b3 be 01 00       	call   c0028db7 <__ltdf2>
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	ba 16 00 00 00       	mov    edx,0x16
c000cf0c:	85 c0                	test   eax,eax
c000cf0e:	0f 88 47 06 00 00    	js     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cf14:	68 00 00 70 40       	push   0x40700000
c000cf19:	6a 00                	push   0x0
c000cf1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf23:	e8 71 be 01 00       	call   c0028d99 <__gtdf2>
c000cf28:	83 c4 10             	add    esp,0x10
c000cf2b:	ba 16 00 00 00       	mov    edx,0x16
c000cf30:	85 c0                	test   eax,eax
c000cf32:	0f 8f 23 06 00 00    	jg     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf3e:	e8 08 bc 01 00       	call   c0028b4b <__floatsidf>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf4e:	68 00 00 00 40       	push   0x40000000
c000cf53:	6a 00                	push   0x0
c000cf55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf5d:	e8 09 af 01 00       	call   c0027e6b <__adddf3>
c000cf62:	59                   	pop    ecx
c000cf63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf67:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf6e:	e8 d8 bb 01 00       	call   c0028b4b <__floatsidf>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7e:	52                   	push   edx
c000cf7f:	50                   	push   eax
c000cf80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf88:	e8 3f b8 01 00       	call   c00287cc <__divdf3>
c000cf8d:	83 c4 10             	add    esp,0x10
c000cf90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf9b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb6:	e8 de bd 01 00       	call   c0028d99 <__gtdf2>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	85 c0                	test   eax,eax
c000cfc0:	7e 2d                	jle    c000cfef <sinc_stereo_vari_process+0x14f>
c000cfc2:	68 00 00 f0 3f       	push   0x3ff00000
c000cfc7:	6a 00                	push   0x0
c000cfc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd1:	e8 e1 bd 01 00       	call   c0028db7 <__ltdf2>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	85 c0                	test   eax,eax
c000cfdb:	79 4d                	jns    c000d02a <sinc_stereo_vari_process+0x18a>
c000cfdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfed:	eb 1b                	jmp    c000d00a <sinc_stereo_vari_process+0x16a>
c000cfef:	68 00 00 f0 3f       	push   0x3ff00000
c000cff4:	6a 00                	push   0x0
c000cff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffe:	e8 b4 bd 01 00       	call   c0028db7 <__ltdf2>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	85 c0                	test   eax,eax
c000d008:	79 20                	jns    c000d02a <sinc_stereo_vari_process+0x18a>
c000d00a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d012:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d016:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d01a:	e8 ad b7 01 00       	call   c00287cc <__divdf3>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d026:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d02a:	50                   	push   eax
c000d02b:	50                   	push   eax
c000d02c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	e8 37 bf 01 00       	call   c0028f70 <lrint>
c000d039:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d03c:	40                   	inc    eax
c000d03d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d041:	0f af c7             	imul   eax,edi
c000d044:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04f:	58                   	pop    eax
c000d050:	5a                   	pop    edx
c000d051:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d059:	e8 12 bf 01 00       	call   c0028f70 <lrint>
c000d05e:	83 ec 0c             	sub    esp,0xc
c000d061:	50                   	push   eax
c000d062:	e8 e4 ba 01 00       	call   c0028b4b <__floatsidf>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d06e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d072:	52                   	push   edx
c000d073:	50                   	push   eax
c000d074:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07c:	e8 3b b4 01 00       	call   c00284bc <__subdf3>
c000d081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d085:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d089:	83 c4 20             	add    esp,0x20
c000d08c:	6a 00                	push   0x0
c000d08e:	6a 00                	push   0x0
c000d090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d094:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d098:	e8 1a bd 01 00       	call   c0028db7 <__ltdf2>
c000d09d:	83 c4 10             	add    esp,0x10
c000d0a0:	85 c0                	test   eax,eax
c000d0a2:	79 1f                	jns    c000d0c3 <sinc_stereo_vari_process+0x223>
c000d0a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d0a9:	6a 00                	push   0x0
c000d0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b3:	e8 b3 ad 01 00       	call   c0027e6b <__adddf3>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0c6:	83 ec 10             	sub    esp,0x10
c000d0c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0cd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0e0:	e8 d7 b3 01 00       	call   c00284bc <__subdf3>
c000d0e5:	83 c4 18             	add    esp,0x18
c000d0e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0f0:	52                   	push   edx
c000d0f1:	50                   	push   eax
c000d0f2:	e8 79 be 01 00       	call   c0028f70 <lrint>
c000d0f7:	0f af f8             	imul   edi,eax
c000d0fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0fe:	01 f8                	add    eax,edi
c000d100:	99                   	cdq    
c000d101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d107:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10f:	68 00 00 f0 3f       	push   0x3ff00000
c000d114:	6a 00                	push   0x0
c000d116:	e8 b1 b6 01 00       	call   c00287cc <__divdf3>
c000d11b:	83 c4 10             	add    esp,0x10
c000d11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d122:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d126:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d12b:	68 23 42 92 0c       	push   0xc924223
c000d130:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d134:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d138:	e8 2e ad 01 00       	call   c0027e6b <__adddf3>
c000d13d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d141:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d145:	83 c4 20             	add    esp,0x20
c000d148:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d150:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d158:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d15b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d15e:	7d 50                	jge    c000d1b0 <sinc_stereo_vari_process+0x310>
c000d160:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d163:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d166:	01 c8                	add    eax,ecx
c000d168:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d16b:	99                   	cdq    
c000d16c:	f7 f9                	idiv   ecx
c000d16e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d172:	7d 0c                	jge    c000d180 <sinc_stereo_vari_process+0x2e0>
c000d174:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d177:	85 ff                	test   edi,edi
c000d179:	79 6c                	jns    c000d1e7 <sinc_stereo_vari_process+0x347>
c000d17b:	e9 e7 00 00 00       	jmp    c000d267 <sinc_stereo_vari_process+0x3c7>
c000d180:	50                   	push   eax
c000d181:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d185:	56                   	push   esi
c000d186:	53                   	push   ebx
c000d187:	e8 4c e7 ff ff       	call   c000b8d8 <prepare_data>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	89 c2                	mov    edx,eax
c000d191:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d194:	85 c0                	test   eax,eax
c000d196:	0f 85 bf 03 00 00    	jne    c000d55b <sinc_stereo_vari_process+0x6bb>
c000d19c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d19f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a2:	01 c8                	add    eax,ecx
c000d1a4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1a7:	99                   	cdq    
c000d1a8:	f7 f9                	idiv   ecx
c000d1aa:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1ae:	7c c4                	jl     c000d174 <sinc_stereo_vari_process+0x2d4>
c000d1b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1bb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1cc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1cf:	99                   	cdq    
c000d1d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1d9:	99                   	cdq    
c000d1da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1dd:	31 d2                	xor    edx,edx
c000d1df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1e2:	e9 74 03 00 00       	jmp    c000d55b <sinc_stereo_vari_process+0x6bb>
c000d1e7:	83 ec 0c             	sub    esp,0xc
c000d1ea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1ed:	e8 59 b9 01 00       	call   c0028b4b <__floatsidf>
c000d1f2:	83 c4 10             	add    esp,0x10
c000d1f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d201:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	e8 59 ac 01 00       	call   c0027e6b <__adddf3>
c000d212:	83 c4 10             	add    esp,0x10
c000d215:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d219:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d221:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d225:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22d:	e8 39 ac 01 00       	call   c0027e6b <__adddf3>
c000d232:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d235:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d239:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23d:	e8 09 b9 01 00       	call   c0028b4b <__floatsidf>
c000d242:	83 c4 10             	add    esp,0x10
c000d245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24d:	52                   	push   edx
c000d24e:	50                   	push   eax
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d257:	e8 59 bb 01 00       	call   c0028db5 <__gedf2>
c000d25c:	83 c4 10             	add    esp,0x10
c000d25f:	85 c0                	test   eax,eax
c000d261:	0f 89 49 ff ff ff    	jns    c000d1b0 <sinc_stereo_vari_process+0x310>
c000d267:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d26b:	0f 8e ef 00 00 00    	jle    c000d360 <sinc_stereo_vari_process+0x4c0>
c000d271:	83 ec 10             	sub    esp,0x10
c000d274:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d277:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d27a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d27d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d280:	e8 37 b2 01 00       	call   c00284bc <__subdf3>
c000d285:	83 c4 18             	add    esp,0x18
c000d288:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d290:	52                   	push   edx
c000d291:	50                   	push   eax
c000d292:	e8 b9 bc 01 00       	call   c0028f50 <fabs>
c000d297:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d29f:	83 c4 10             	add    esp,0x10
c000d2a2:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2a7:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b4:	e8 e0 ba 01 00       	call   c0028d99 <__gtdf2>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	85 c0                	test   eax,eax
c000d2be:	0f 8e 9c 00 00 00    	jle    c000d360 <sinc_stereo_vari_process+0x4c0>
c000d2c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2d2:	52                   	push   edx
c000d2d3:	50                   	push   eax
c000d2d4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2d7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2da:	e8 dd b1 01 00       	call   c00284bc <__subdf3>
c000d2df:	59                   	pop    ecx
c000d2e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2e4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2e8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2eb:	e8 5b b8 01 00       	call   c0028b4b <__floatsidf>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2fb:	52                   	push   edx
c000d2fc:	50                   	push   eax
c000d2fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d301:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d305:	e8 de b1 01 00       	call   c00284e8 <__muldf3>
c000d30a:	5f                   	pop    edi
c000d30b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d313:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d316:	e8 30 b8 01 00       	call   c0028b4b <__floatsidf>
c000d31b:	83 c4 10             	add    esp,0x10
c000d31e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d322:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d326:	52                   	push   edx
c000d327:	50                   	push   eax
c000d328:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	e8 97 b4 01 00       	call   c00287cc <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d33c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d350:	e8 16 ab 01 00       	call   c0027e6b <__adddf3>
c000d355:	83 c4 10             	add    esp,0x10
c000d358:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d35c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d366:	e8 e0 b7 01 00       	call   c0028b4b <__floatsidf>
c000d36b:	83 c4 10             	add    esp,0x10
c000d36e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d372:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d386:	e8 2c ba 01 00       	call   c0028db7 <__ltdf2>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	85 c0                	test   eax,eax
c000d390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d394:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d398:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d39c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3a0:	78 10                	js     c000d3b2 <sinc_stereo_vari_process+0x512>
c000d3a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c2:	e8 21 b1 01 00       	call   c00284e8 <__muldf3>
c000d3c7:	59                   	pop    ecx
c000d3c8:	5f                   	pop    edi
c000d3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d9:	e8 d3 e4 ff ff       	call   c000b8b1 <double_to_fp>
c000d3de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e2:	89 c7                	mov    edi,eax
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f0:	e8 f3 b0 01 00       	call   c00284e8 <__muldf3>
c000d3f5:	83 c4 18             	add    esp,0x18
c000d3f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d400:	52                   	push   edx
c000d401:	50                   	push   eax
c000d402:	e8 aa e4 ff ff       	call   c000b8b1 <double_to_fp>
c000d407:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d40a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d40e:	83 c4 0c             	add    esp,0xc
c000d411:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d414:	8d 04 90             	lea    eax,[eax+edx*4]
c000d417:	50                   	push   eax
c000d418:	50                   	push   eax
c000d419:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d41c:	e8 2a b7 01 00       	call   c0028b4b <__floatsidf>
c000d421:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d425:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d429:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d42d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d431:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d435:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d439:	e8 8e b3 01 00       	call   c00287cc <__divdf3>
c000d43e:	83 c4 18             	add    esp,0x18
c000d441:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d445:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d449:	52                   	push   edx
c000d44a:	89 fa                	mov    edx,edi
c000d44c:	50                   	push   eax
c000d44d:	89 d8                	mov    eax,ebx
c000d44f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d453:	e8 02 c7 ff ff       	call   c0009b5a <calc_output_stereo>
c000d458:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d45c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d460:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d464:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d468:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d46c:	e8 5b b3 01 00       	call   c00287cc <__divdf3>
c000d471:	83 c4 10             	add    esp,0x10
c000d474:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d478:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d484:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d488:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d48c:	e8 da a9 01 00       	call   c0027e6b <__adddf3>
c000d491:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d495:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d499:	83 c4 18             	add    esp,0x18
c000d49c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a4:	e8 c7 ba 01 00       	call   c0028f70 <lrint>
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	50                   	push   eax
c000d4ad:	e8 99 b6 01 00       	call   c0028b4b <__floatsidf>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4bd:	52                   	push   edx
c000d4be:	50                   	push   eax
c000d4bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c7:	e8 f0 af 01 00       	call   c00284bc <__subdf3>
c000d4cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d4:	83 c4 20             	add    esp,0x20
c000d4d7:	6a 00                	push   0x0
c000d4d9:	6a 00                	push   0x0
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 cf b8 01 00       	call   c0028db7 <__ltdf2>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	85 c0                	test   eax,eax
c000d4ed:	79 20                	jns    c000d50f <sinc_stereo_vari_process+0x66f>
c000d4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ff:	e8 67 a9 01 00       	call   c0027e6b <__adddf3>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d50b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d50f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d512:	83 ec 10             	sub    esp,0x10
c000d515:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d519:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d524:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d528:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d52c:	e8 8b af 01 00       	call   c00284bc <__subdf3>
c000d531:	83 c4 18             	add    esp,0x18
c000d534:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	e8 2d ba 01 00       	call   c0028f70 <lrint>
c000d543:	0f af f8             	imul   edi,eax
c000d546:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	01 f8                	add    eax,edi
c000d54f:	99                   	cdq    
c000d550:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d553:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d556:	e9 fd fb ff ff       	jmp    c000d158 <sinc_stereo_vari_process+0x2b8>
c000d55b:	83 c4 4c             	add    esp,0x4c
c000d55e:	89 d0                	mov    eax,edx
c000d560:	5b                   	pop    ebx
c000d561:	5e                   	pop    esi
c000d562:	5f                   	pop    edi
c000d563:	5d                   	pop    ebp
c000d564:	c3                   	ret    

c000d565 <sinc_mono_vari_process>:
c000d565:	55                   	push   ebp
c000d566:	ba 05 00 00 00       	mov    edx,0x5
c000d56b:	57                   	push   edi
c000d56c:	56                   	push   esi
c000d56d:	53                   	push   ebx
c000d56e:	83 ec 4c             	sub    esp,0x4c
c000d571:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d575:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d579:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d57c:	85 db                	test   ebx,ebx
c000d57e:	0f 84 c1 06 00 00    	je     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d584:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d587:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d58a:	0f af c7             	imul   eax,edi
c000d58d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d590:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d593:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d59a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5a1:	0f af c7             	imul   eax,edi
c000d5a4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5b8:	68 00 00 70 3f       	push   0x3f700000
c000d5bd:	6a 00                	push   0x0
c000d5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c7:	e8 eb b7 01 00       	call   c0028db7 <__ltdf2>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	ba 16 00 00 00       	mov    edx,0x16
c000d5d4:	85 c0                	test   eax,eax
c000d5d6:	0f 88 69 06 00 00    	js     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d5dc:	68 00 00 70 40       	push   0x40700000
c000d5e1:	6a 00                	push   0x0
c000d5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5eb:	e8 a9 b7 01 00       	call   c0028d99 <__gtdf2>
c000d5f0:	83 c4 10             	add    esp,0x10
c000d5f3:	ba 16 00 00 00       	mov    edx,0x16
c000d5f8:	85 c0                	test   eax,eax
c000d5fa:	0f 8f 45 06 00 00    	jg     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d600:	83 ec 0c             	sub    esp,0xc
c000d603:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d606:	e8 40 b5 01 00       	call   c0028b4b <__floatsidf>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d616:	68 00 00 00 40       	push   0x40000000
c000d61b:	6a 00                	push   0x0
c000d61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d625:	e8 41 a8 01 00       	call   c0027e6b <__adddf3>
c000d62a:	59                   	pop    ecx
c000d62b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d62f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 10 b5 01 00       	call   c0028b4b <__floatsidf>
c000d63b:	83 c4 10             	add    esp,0x10
c000d63e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d642:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d646:	52                   	push   edx
c000d647:	50                   	push   eax
c000d648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d650:	e8 77 b1 01 00       	call   c00287cc <__divdf3>
c000d655:	83 c4 10             	add    esp,0x10
c000d658:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d65c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d660:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d663:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67e:	e8 16 b7 01 00       	call   c0028d99 <__gtdf2>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	85 c0                	test   eax,eax
c000d688:	7e 2d                	jle    c000d6b7 <sinc_mono_vari_process+0x152>
c000d68a:	68 00 00 f0 3f       	push   0x3ff00000
c000d68f:	6a 00                	push   0x0
c000d691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d699:	e8 19 b7 01 00       	call   c0028db7 <__ltdf2>
c000d69e:	83 c4 10             	add    esp,0x10
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	79 4d                	jns    c000d6f2 <sinc_mono_vari_process+0x18d>
c000d6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b5:	eb 1b                	jmp    c000d6d2 <sinc_mono_vari_process+0x16d>
c000d6b7:	68 00 00 f0 3f       	push   0x3ff00000
c000d6bc:	6a 00                	push   0x0
c000d6be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c6:	e8 ec b6 01 00       	call   c0028db7 <__ltdf2>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	85 c0                	test   eax,eax
c000d6d0:	79 20                	jns    c000d6f2 <sinc_mono_vari_process+0x18d>
c000d6d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e2:	e8 e5 b0 01 00       	call   c00287cc <__divdf3>
c000d6e7:	83 c4 10             	add    esp,0x10
c000d6ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6f2:	50                   	push   eax
c000d6f3:	50                   	push   eax
c000d6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	e8 6f b8 01 00       	call   c0028f70 <lrint>
c000d701:	40                   	inc    eax
c000d702:	0f af c7             	imul   eax,edi
c000d705:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d709:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d70d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d713:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d717:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d71b:	58                   	pop    eax
c000d71c:	5a                   	pop    edx
c000d71d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d721:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d725:	e8 46 b8 01 00       	call   c0028f70 <lrint>
c000d72a:	83 ec 0c             	sub    esp,0xc
c000d72d:	50                   	push   eax
c000d72e:	e8 18 b4 01 00       	call   c0028b4b <__floatsidf>
c000d733:	83 c4 10             	add    esp,0x10
c000d736:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d73a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d73e:	52                   	push   edx
c000d73f:	50                   	push   eax
c000d740:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d744:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d748:	e8 6f ad 01 00       	call   c00284bc <__subdf3>
c000d74d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d751:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d755:	83 c4 20             	add    esp,0x20
c000d758:	6a 00                	push   0x0
c000d75a:	6a 00                	push   0x0
c000d75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d764:	e8 4e b6 01 00       	call   c0028db7 <__ltdf2>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	85 c0                	test   eax,eax
c000d76e:	79 1f                	jns    c000d78f <sinc_mono_vari_process+0x22a>
c000d770:	68 00 00 f0 3f       	push   0x3ff00000
c000d775:	6a 00                	push   0x0
c000d777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77f:	e8 e7 a6 01 00       	call   c0027e6b <__adddf3>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d78f:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d792:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d795:	83 ec 10             	sub    esp,0x10
c000d798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a8:	e8 0f ad 01 00       	call   c00284bc <__subdf3>
c000d7ad:	83 c4 18             	add    esp,0x18
c000d7b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7b8:	52                   	push   edx
c000d7b9:	50                   	push   eax
c000d7ba:	e8 b1 b7 01 00       	call   c0028f70 <lrint>
c000d7bf:	0f af f8             	imul   edi,eax
c000d7c2:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7c5:	31 ff                	xor    edi,edi
c000d7c7:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7cc:	99                   	cdq    
c000d7cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7db:	55                   	push   ebp
c000d7dc:	57                   	push   edi
c000d7dd:	e8 ea af 01 00       	call   c00287cc <__divdf3>
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ed:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7f2:	68 23 42 92 0c       	push   0xc924223
c000d7f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	e8 67 a6 01 00       	call   c0027e6b <__adddf3>
c000d804:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d808:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d80c:	83 c4 20             	add    esp,0x20
c000d80f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d813:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d817:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d81a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d81d:	7d 54                	jge    c000d873 <sinc_mono_vari_process+0x30e>
c000d81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d822:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d825:	01 c8                	add    eax,ecx
c000d827:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d82a:	99                   	cdq    
c000d82b:	f7 f9                	idiv   ecx
c000d82d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d831:	7d 0c                	jge    c000d83f <sinc_mono_vari_process+0x2da>
c000d833:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d836:	85 ff                	test   edi,edi
c000d838:	79 73                	jns    c000d8ad <sinc_mono_vari_process+0x348>
c000d83a:	e9 ee 00 00 00       	jmp    c000d92d <sinc_mono_vari_process+0x3c8>
c000d83f:	50                   	push   eax
c000d840:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d844:	56                   	push   esi
c000d845:	53                   	push   ebx
c000d846:	e8 8d e0 ff ff       	call   c000b8d8 <prepare_data>
c000d84b:	89 c2                	mov    edx,eax
c000d84d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d857:	85 d2                	test   edx,edx
c000d859:	0f 85 e6 03 00 00    	jne    c000dc45 <sinc_mono_vari_process+0x6e0>
c000d85f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d862:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d865:	01 c8                	add    eax,ecx
c000d867:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d86a:	99                   	cdq    
c000d86b:	f7 f9                	idiv   ecx
c000d86d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d871:	7c c0                	jl     c000d833 <sinc_mono_vari_process+0x2ce>
c000d873:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d877:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d87b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d87f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d882:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d889:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d88d:	89 01                	mov    DWORD PTR [ecx],eax
c000d88f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d892:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d895:	99                   	cdq    
c000d896:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d899:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d89c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d89f:	99                   	cdq    
c000d8a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a3:	31 d2                	xor    edx,edx
c000d8a5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8a8:	e9 98 03 00 00       	jmp    c000dc45 <sinc_mono_vari_process+0x6e0>
c000d8ad:	83 ec 0c             	sub    esp,0xc
c000d8b0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8b3:	e8 93 b2 01 00       	call   c0028b4b <__floatsidf>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	e8 93 a5 01 00       	call   c0027e6b <__adddf3>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f3:	e8 73 a5 01 00       	call   c0027e6b <__adddf3>
c000d8f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8ff:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d903:	e8 43 b2 01 00       	call   c0028b4b <__floatsidf>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d913:	52                   	push   edx
c000d914:	50                   	push   eax
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91d:	e8 77 b4 01 00       	call   c0028d99 <__gtdf2>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	85 c0                	test   eax,eax
c000d927:	0f 8f 46 ff ff ff    	jg     c000d873 <sinc_mono_vari_process+0x30e>
c000d92d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d931:	0f 8e f5 00 00 00    	jle    c000da2c <sinc_mono_vari_process+0x4c7>
c000d937:	83 ec 10             	sub    esp,0x10
c000d93a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d93d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d940:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d944:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d947:	ff 30                	push   DWORD PTR [eax]
c000d949:	e8 6e ab 01 00       	call   c00284bc <__subdf3>
c000d94e:	83 c4 18             	add    esp,0x18
c000d951:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d955:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d959:	52                   	push   edx
c000d95a:	50                   	push   eax
c000d95b:	e8 f0 b5 01 00       	call   c0028f50 <fabs>
c000d960:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d964:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d968:	83 c4 10             	add    esp,0x10
c000d96b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d970:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d975:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d979:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d97d:	e8 17 b4 01 00       	call   c0028d99 <__gtdf2>
c000d982:	83 c4 10             	add    esp,0x10
c000d985:	85 c0                	test   eax,eax
c000d987:	0f 8e 9f 00 00 00    	jle    c000da2c <sinc_mono_vari_process+0x4c7>
c000d98d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d991:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d994:	8b 00                	mov    eax,DWORD PTR [eax]
c000d996:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d99a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99e:	52                   	push   edx
c000d99f:	50                   	push   eax
c000d9a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9a3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9a6:	e8 11 ab 01 00       	call   c00284bc <__subdf3>
c000d9ab:	5f                   	pop    edi
c000d9ac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9b0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9b4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9b7:	e8 8f b1 01 00       	call   c0028b4b <__floatsidf>
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9c7:	52                   	push   edx
c000d9c8:	50                   	push   eax
c000d9c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9d1:	e8 12 ab 01 00       	call   c00284e8 <__muldf3>
c000d9d6:	5d                   	pop    ebp
c000d9d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9df:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9e2:	e8 64 b1 01 00       	call   c0028b4b <__floatsidf>
c000d9e7:	83 c4 10             	add    esp,0x10
c000d9ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f2:	52                   	push   edx
c000d9f3:	50                   	push   eax
c000d9f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	e8 cb ad 01 00       	call   c00287cc <__divdf3>
c000da01:	83 c4 10             	add    esp,0x10
c000da04:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1c:	e8 4a a4 01 00       	call   c0027e6b <__adddf3>
c000da21:	83 c4 10             	add    esp,0x10
c000da24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da2c:	83 ec 0c             	sub    esp,0xc
c000da2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da32:	e8 14 b1 01 00       	call   c0028b4b <__floatsidf>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da3e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da52:	e8 60 b3 01 00       	call   c0028db7 <__ltdf2>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	85 c0                	test   eax,eax
c000da5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da60:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da64:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da68:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da6c:	78 10                	js     c000da7e <sinc_mono_vari_process+0x519>
c000da6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8e:	e8 55 aa 01 00       	call   c00284e8 <__muldf3>
c000da93:	59                   	pop    ecx
c000da94:	5f                   	pop    edi
c000da95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa5:	e8 07 de ff ff       	call   c000b8b1 <double_to_fp>
c000daaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daae:	89 c7                	mov    edi,eax
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dabc:	e8 27 aa 01 00       	call   c00284e8 <__muldf3>
c000dac1:	83 c4 18             	add    esp,0x18
c000dac4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dac8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dacc:	52                   	push   edx
c000dacd:	50                   	push   eax
c000dace:	e8 de dd ff ff       	call   c000b8b1 <double_to_fp>
c000dad3:	83 ec 0c             	sub    esp,0xc
c000dad6:	89 c5                	mov    ebp,eax
c000dad8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dadb:	e8 6b b0 01 00       	call   c0028b4b <__floatsidf>
c000dae0:	83 c4 10             	add    esp,0x10
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	52                   	push   edx
c000daec:	50                   	push   eax
c000daed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf5:	e8 d2 ac 01 00       	call   c00287cc <__divdf3>
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	89 e9                	mov    ecx,ebp
c000daff:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db03:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db07:	89 d8                	mov    eax,ebx
c000db09:	89 fa                	mov    edx,edi
c000db0b:	e8 ee bd ff ff       	call   c00098fe <calc_output_single>
c000db10:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db13:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db16:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db1a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1e:	52                   	push   edx
c000db1f:	50                   	push   eax
c000db20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db28:	e8 bb a9 01 00       	call   c00284e8 <__muldf3>
c000db2d:	59                   	pop    ecx
c000db2e:	59                   	pop    ecx
c000db2f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db33:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3f:	e8 77 b2 01 00       	call   c0028dbb <__truncdfsf2>
c000db44:	83 c4 10             	add    esp,0x10
c000db47:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db4a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db5d:	e8 6a ac 01 00       	call   c00287cc <__divdf3>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db69:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7d:	e8 e9 a2 01 00       	call   c0027e6b <__adddf3>
c000db82:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db86:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db8a:	83 c4 18             	add    esp,0x18
c000db8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db95:	e8 d6 b3 01 00       	call   c0028f70 <lrint>
c000db9a:	83 ec 0c             	sub    esp,0xc
c000db9d:	50                   	push   eax
c000db9e:	e8 a8 af 01 00       	call   c0028b4b <__floatsidf>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbae:	52                   	push   edx
c000dbaf:	50                   	push   eax
c000dbb0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb8:	e8 ff a8 01 00       	call   c00284bc <__subdf3>
c000dbbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbc5:	83 c4 20             	add    esp,0x20
c000dbc8:	6a 00                	push   0x0
c000dbca:	6a 00                	push   0x0
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 de b1 01 00       	call   c0028db7 <__ltdf2>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	79 20                	jns    c000dc00 <sinc_mono_vari_process+0x69b>
c000dbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf0:	e8 76 a2 01 00       	call   c0027e6b <__adddf3>
c000dbf5:	83 c4 10             	add    esp,0x10
c000dbf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc00:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc03:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc06:	83 ec 10             	sub    esp,0x10
c000dc09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc11:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc19:	e8 9e a8 01 00       	call   c00284bc <__subdf3>
c000dc1e:	83 c4 18             	add    esp,0x18
c000dc21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc29:	52                   	push   edx
c000dc2a:	50                   	push   eax
c000dc2b:	e8 40 b3 01 00       	call   c0028f70 <lrint>
c000dc30:	83 c4 10             	add    esp,0x10
c000dc33:	0f af f8             	imul   edi,eax
c000dc36:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc39:	99                   	cdq    
c000dc3a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc3d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc40:	e9 d2 fb ff ff       	jmp    c000d817 <sinc_mono_vari_process+0x2b2>
c000dc45:	83 c4 4c             	add    esp,0x4c
c000dc48:	89 d0                	mov    eax,edx
c000dc4a:	5b                   	pop    ebx
c000dc4b:	5e                   	pop    esi
c000dc4c:	5f                   	pop    edi
c000dc4d:	5d                   	pop    ebp
c000dc4e:	c3                   	ret    

c000dc4f <sinc_get_name>:
c000dc4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc53:	31 c0                	xor    eax,eax
c000dc55:	83 fa 02             	cmp    edx,0x2
c000dc58:	77 07                	ja     c000dc61 <sinc_get_name+0x12>
c000dc5a:	8b 04 95 44 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd57bc]
c000dc61:	c3                   	ret    

c000dc62 <sinc_get_description>:
c000dc62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc66:	31 c0                	xor    eax,eax
c000dc68:	83 fa 02             	cmp    edx,0x2
c000dc6b:	77 07                	ja     c000dc74 <sinc_get_description+0x12>
c000dc6d:	8b 04 95 38 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd57c8]
c000dc74:	c3                   	ret    

c000dc75 <sinc_set_converter>:
c000dc75:	53                   	push   ebx
c000dc76:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc7c:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc83:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc86:	85 c0                	test   eax,eax
c000dc88:	74 13                	je     c000dc9d <sinc_set_converter+0x28>
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	50                   	push   eax
c000dc8e:	e8 25 1c 00 00       	call   c000f8b8 <free>
c000dc93:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc9a:	83 c4 10             	add    esp,0x10
c000dc9d:	50                   	push   eax
c000dc9e:	68 44 08 00 00       	push   0x844
c000dca3:	6a 00                	push   0x0
c000dca5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca9:	50                   	push   eax
c000dcaa:	e8 bd 2a ff ff       	call   c000076c <memset>
c000dcaf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcb2:	83 c4 10             	add    esp,0x10
c000dcb5:	b8 0b 00 00 00       	mov    eax,0xb
c000dcba:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcc0:	7f 6e                	jg     c000dd30 <sinc_set_converter+0xbb>
c000dcc2:	83 fa 01             	cmp    edx,0x1
c000dcc5:	75 10                	jne    c000dcd7 <sinc_set_converter+0x62>
c000dcc7:	c7 43 24 65 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d565
c000dcce:	c7 43 20 65 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d565
c000dcd5:	eb 4d                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dcd7:	83 fa 02             	cmp    edx,0x2
c000dcda:	75 10                	jne    c000dcec <sinc_set_converter+0x77>
c000dcdc:	c7 43 24 a0 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cea0
c000dce3:	c7 43 20 a0 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cea0
c000dcea:	eb 38                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dcec:	83 fa 04             	cmp    edx,0x4
c000dcef:	75 10                	jne    c000dd01 <sinc_set_converter+0x8c>
c000dcf1:	c7 43 24 db c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7db
c000dcf8:	c7 43 20 db c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7db
c000dcff:	eb 23                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dd01:	83 fa 06             	cmp    edx,0x6
c000dd04:	75 10                	jne    c000dd16 <sinc_set_converter+0xa1>
c000dd06:	c7 43 24 16 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c116
c000dd0d:	c7 43 20 16 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c116
c000dd14:	eb 0e                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dd16:	c7 43 24 52 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba52
c000dd1d:	c7 43 20 52 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba52
c000dd24:	c7 43 28 05 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad05
c000dd2b:	b8 0a 00 00 00       	mov    eax,0xa
c000dd30:	81 c4 58 08 00 00    	add    esp,0x858
c000dd36:	5b                   	pop    ebx
c000dd37:	c3                   	ret    

c000dd38 <zoh_vari_process>:
c000dd38:	55                   	push   ebp
c000dd39:	31 d2                	xor    edx,edx
c000dd3b:	57                   	push   edi
c000dd3c:	56                   	push   esi
c000dd3d:	53                   	push   ebx
c000dd3e:	83 ec 3c             	sub    esp,0x3c
c000dd41:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd45:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd49:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd4d:	0f 8e 80 06 00 00    	jle    c000e3d3 <zoh_vari_process+0x69b>
c000dd53:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd56:	ba 05 00 00 00       	mov    edx,0x5
c000dd5b:	85 db                	test   ebx,ebx
c000dd5d:	0f 84 70 06 00 00    	je     c000e3d3 <zoh_vari_process+0x69b>
c000dd63:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd66:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd6a:	74 19                	je     c000dd85 <zoh_vari_process+0x4d>
c000dd6c:	31 d2                	xor    edx,edx
c000dd6e:	39 c2                	cmp    edx,eax
c000dd70:	7d 0c                	jge    c000dd7e <zoh_vari_process+0x46>
c000dd72:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd74:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd77:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd7b:	42                   	inc    edx
c000dd7c:	eb f0                	jmp    c000dd6e <zoh_vari_process+0x36>
c000dd7e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd85:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd88:	0f af d0             	imul   edx,eax
c000dd8b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd8e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd99:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd9c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dda3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dda6:	8b 07                	mov    eax,DWORD PTR [edi]
c000dda8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb0:	68 00 00 70 3f       	push   0x3f700000
c000ddb5:	6a 00                	push   0x0
c000ddb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbf:	e8 f3 af 01 00       	call   c0028db7 <__ltdf2>
c000ddc4:	83 c4 10             	add    esp,0x10
c000ddc7:	ba 16 00 00 00       	mov    edx,0x16
c000ddcc:	85 c0                	test   eax,eax
c000ddce:	0f 88 ff 05 00 00    	js     c000e3d3 <zoh_vari_process+0x69b>
c000ddd4:	68 00 00 70 40       	push   0x40700000
c000ddd9:	6a 00                	push   0x0
c000dddb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde3:	e8 b1 af 01 00       	call   c0028d99 <__gtdf2>
c000dde8:	83 c4 10             	add    esp,0x10
c000ddeb:	ba 16 00 00 00       	mov    edx,0x16
c000ddf0:	85 c0                	test   eax,eax
c000ddf2:	0f 8f db 05 00 00    	jg     c000e3d3 <zoh_vari_process+0x69b>
c000ddf8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddfb:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000ddfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de06:	68 00 00 f0 3f       	push   0x3ff00000
c000de0b:	6a 00                	push   0x0
c000de0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de15:	e8 9d af 01 00       	call   c0028db7 <__ltdf2>
c000de1a:	83 c4 10             	add    esp,0x10
c000de1d:	85 c0                	test   eax,eax
c000de1f:	0f 89 da 01 00 00    	jns    c000dfff <zoh_vari_process+0x2c7>
c000de25:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de28:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de2b:	0f 8d ce 01 00 00    	jge    c000dfff <zoh_vari_process+0x2c7>
c000de31:	83 ec 0c             	sub    esp,0xc
c000de34:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de37:	e8 0f ad 01 00       	call   c0028b4b <__floatsidf>
c000de3c:	83 c4 10             	add    esp,0x10
c000de3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000de42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de56:	e8 8d a6 01 00       	call   c00284e8 <__muldf3>
c000de5b:	59                   	pop    ecx
c000de5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de60:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de64:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de67:	e8 df ac 01 00       	call   c0028b4b <__floatsidf>
c000de6c:	83 c4 10             	add    esp,0x10
c000de6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de77:	52                   	push   edx
c000de78:	50                   	push   eax
c000de79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de81:	e8 e5 9f 01 00       	call   c0027e6b <__adddf3>
c000de86:	59                   	pop    ecx
c000de87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de8b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de92:	e8 b4 ac 01 00       	call   c0028b4b <__floatsidf>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea2:	52                   	push   edx
c000dea3:	50                   	push   eax
c000dea4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deac:	e8 04 af 01 00       	call   c0028db5 <__gedf2>
c000deb1:	83 c4 10             	add    esp,0x10
c000deb4:	85 c0                	test   eax,eax
c000deb6:	0f 89 43 01 00 00    	jns    c000dfff <zoh_vari_process+0x2c7>
c000debc:	85 ed                	test   ebp,ebp
c000debe:	0f 8e ec 00 00 00    	jle    c000dfb0 <zoh_vari_process+0x278>
c000dec4:	83 ec 10             	sub    esp,0x10
c000dec7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000decd:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000ded0:	ff 37                	push   DWORD PTR [edi]
c000ded2:	e8 e5 a5 01 00       	call   c00284bc <__subdf3>
c000ded7:	83 c4 18             	add    esp,0x18
c000deda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dede:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dee2:	52                   	push   edx
c000dee3:	50                   	push   eax
c000dee4:	e8 67 b0 01 00       	call   c0028f50 <fabs>
c000dee9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000def1:	83 c4 10             	add    esp,0x10
c000def4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000def9:	68 23 42 92 0c       	push   0xc924223
c000defe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df06:	e8 8e ae 01 00       	call   c0028d99 <__gtdf2>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	85 c0                	test   eax,eax
c000df10:	0f 8e 9a 00 00 00    	jle    c000dfb0 <zoh_vari_process+0x278>
c000df16:	8b 07                	mov    eax,DWORD PTR [edi]
c000df18:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000df1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df22:	52                   	push   edx
c000df23:	50                   	push   eax
c000df24:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df27:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df2a:	e8 8d a5 01 00       	call   c00284bc <__subdf3>
c000df2f:	59                   	pop    ecx
c000df30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df38:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df3b:	e8 0b ac 01 00       	call   c0028b4b <__floatsidf>
c000df40:	83 c4 10             	add    esp,0x10
c000df43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df47:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df4b:	52                   	push   edx
c000df4c:	50                   	push   eax
c000df4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df55:	e8 8e a5 01 00       	call   c00284e8 <__muldf3>
c000df5a:	5d                   	pop    ebp
c000df5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df63:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df66:	e8 e0 ab 01 00       	call   c0028b4b <__floatsidf>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df76:	52                   	push   edx
c000df77:	50                   	push   eax
c000df78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	e8 47 a8 01 00       	call   c00287cc <__divdf3>
c000df85:	83 c4 10             	add    esp,0x10
c000df88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa0:	e8 c6 9e 01 00       	call   c0027e6b <__adddf3>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb0:	31 c0                	xor    eax,eax
c000dfb2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfb5:	7e 13                	jle    c000dfca <zoh_vari_process+0x292>
c000dfb7:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfbb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfbe:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfc1:	40                   	inc    eax
c000dfc2:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfc5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfc8:	eb e8                	jmp    c000dfb2 <zoh_vari_process+0x27a>
c000dfca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfd2:	68 00 00 f0 3f       	push   0x3ff00000
c000dfd7:	6a 00                	push   0x0
c000dfd9:	e8 ee a7 01 00       	call   c00287cc <__divdf3>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfe8:	52                   	push   edx
c000dfe9:	50                   	push   eax
c000dfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 74 9e 01 00       	call   c0027e6b <__adddf3>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	e9 ff fd ff ff       	jmp    c000ddfe <zoh_vari_process+0xc6>
c000dfff:	55                   	push   ebp
c000e000:	55                   	push   ebp
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e009:	e8 62 af 01 00       	call   c0028f70 <lrint>
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	50                   	push   eax
c000e012:	e8 34 ab 01 00       	call   c0028b4b <__floatsidf>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e022:	52                   	push   edx
c000e023:	50                   	push   eax
c000e024:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e02c:	e8 8b a4 01 00       	call   c00284bc <__subdf3>
c000e031:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e035:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e039:	83 c4 20             	add    esp,0x20
c000e03c:	6a 00                	push   0x0
c000e03e:	6a 00                	push   0x0
c000e040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e044:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e048:	e8 6a ad 01 00       	call   c0028db7 <__ltdf2>
c000e04d:	83 c4 10             	add    esp,0x10
c000e050:	85 c0                	test   eax,eax
c000e052:	79 1e                	jns    c000e072 <zoh_vari_process+0x33a>
c000e054:	68 00 00 f0 3f       	push   0x3ff00000
c000e059:	6a 00                	push   0x0
c000e05b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e05f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e063:	e8 03 9e 01 00       	call   c0027e6b <__adddf3>
c000e068:	83 c4 10             	add    esp,0x10
c000e06b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e06e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e072:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e075:	83 ec 10             	sub    esp,0x10
c000e078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e080:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e084:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e088:	e8 2f a4 01 00       	call   c00284bc <__subdf3>
c000e08d:	83 c4 18             	add    esp,0x18
c000e090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e098:	52                   	push   edx
c000e099:	50                   	push   eax
c000e09a:	e8 d1 ae 01 00       	call   c0028f70 <lrint>
c000e09f:	83 c4 10             	add    esp,0x10
c000e0a2:	0f af e8             	imul   ebp,eax
c000e0a5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0a8:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0ab:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0b2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b9:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0bc:	0f 8d 7a 02 00 00    	jge    c000e33c <zoh_vari_process+0x604>
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0c8:	e8 7e aa 01 00       	call   c0028b4b <__floatsidf>
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e8:	e8 fb a3 01 00       	call   c00284e8 <__muldf3>
c000e0ed:	59                   	pop    ecx
c000e0ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0fa:	e8 4c aa 01 00       	call   c0028b4b <__floatsidf>
c000e0ff:	83 c4 10             	add    esp,0x10
c000e102:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e10a:	52                   	push   edx
c000e10b:	50                   	push   eax
c000e10c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e110:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e114:	e8 52 9d 01 00       	call   c0027e6b <__adddf3>
c000e119:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e11c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e124:	e8 22 aa 01 00       	call   c0028b4b <__floatsidf>
c000e129:	83 c4 10             	add    esp,0x10
c000e12c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e130:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e134:	52                   	push   edx
c000e135:	50                   	push   eax
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13e:	e8 76 ac 01 00       	call   c0028db9 <__ledf2>
c000e143:	83 c4 10             	add    esp,0x10
c000e146:	85 c0                	test   eax,eax
c000e148:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e14c:	0f 8f ea 01 00 00    	jg     c000e33c <zoh_vari_process+0x604>
c000e152:	85 c9                	test   ecx,ecx
c000e154:	0f 8e ed 00 00 00    	jle    c000e247 <zoh_vari_process+0x50f>
c000e15a:	83 ec 10             	sub    esp,0x10
c000e15d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e160:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e163:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e166:	ff 37                	push   DWORD PTR [edi]
c000e168:	e8 4f a3 01 00       	call   c00284bc <__subdf3>
c000e16d:	83 c4 18             	add    esp,0x18
c000e170:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e174:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e178:	52                   	push   edx
c000e179:	50                   	push   eax
c000e17a:	e8 d1 ad 01 00       	call   c0028f50 <fabs>
c000e17f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e183:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e18f:	68 23 42 92 0c       	push   0xc924223
c000e194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e19c:	e8 f8 ab 01 00       	call   c0028d99 <__gtdf2>
c000e1a1:	83 c4 10             	add    esp,0x10
c000e1a4:	85 c0                	test   eax,eax
c000e1a6:	0f 8e 9b 00 00 00    	jle    c000e247 <zoh_vari_process+0x50f>
c000e1ac:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1ae:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1b9:	52                   	push   edx
c000e1ba:	50                   	push   eax
c000e1bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1c1:	e8 f6 a2 01 00       	call   c00284bc <__subdf3>
c000e1c6:	5d                   	pop    ebp
c000e1c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1cb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1d2:	e8 74 a9 01 00       	call   c0028b4b <__floatsidf>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1e2:	52                   	push   edx
c000e1e3:	50                   	push   eax
c000e1e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ec:	e8 f7 a2 01 00       	call   c00284e8 <__muldf3>
c000e1f1:	59                   	pop    ecx
c000e1f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1fa:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1fd:	e8 49 a9 01 00       	call   c0028b4b <__floatsidf>
c000e202:	83 c4 10             	add    esp,0x10
c000e205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e209:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e20d:	52                   	push   edx
c000e20e:	50                   	push   eax
c000e20f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	e8 b0 a5 01 00       	call   c00287cc <__divdf3>
c000e21c:	83 c4 10             	add    esp,0x10
c000e21f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e223:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e237:	e8 2f 9c 01 00       	call   c0027e6b <__adddf3>
c000e23c:	83 c4 10             	add    esp,0x10
c000e23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e247:	31 d2                	xor    edx,edx
c000e249:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e24c:	39 d0                	cmp    eax,edx
c000e24e:	7e 1d                	jle    c000e26d <zoh_vari_process+0x535>
c000e250:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e253:	29 c1                	sub    ecx,eax
c000e255:	89 c8                	mov    eax,ecx
c000e257:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e259:	01 d0                	add    eax,edx
c000e25b:	42                   	inc    edx
c000e25c:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e25f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e262:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e265:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e268:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e26b:	eb dc                	jmp    c000e249 <zoh_vari_process+0x511>
c000e26d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e271:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e275:	68 00 00 f0 3f       	push   0x3ff00000
c000e27a:	6a 00                	push   0x0
c000e27c:	e8 4b a5 01 00       	call   c00287cc <__divdf3>
c000e281:	83 c4 10             	add    esp,0x10
c000e284:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e288:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29c:	e8 ca 9b 01 00       	call   c0027e6b <__adddf3>
c000e2a1:	5d                   	pop    ebp
c000e2a2:	59                   	pop    ecx
c000e2a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b3:	e8 b8 ac 01 00       	call   c0028f70 <lrint>
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	50                   	push   eax
c000e2bc:	e8 8a a8 01 00       	call   c0028b4b <__floatsidf>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2cc:	52                   	push   edx
c000e2cd:	50                   	push   eax
c000e2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d6:	e8 e1 a1 01 00       	call   c00284bc <__subdf3>
c000e2db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2e3:	83 c4 20             	add    esp,0x20
c000e2e6:	6a 00                	push   0x0
c000e2e8:	6a 00                	push   0x0
c000e2ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f2:	e8 c0 aa 01 00       	call   c0028db7 <__ltdf2>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	85 c0                	test   eax,eax
c000e2fc:	79 1e                	jns    c000e31c <zoh_vari_process+0x5e4>
c000e2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000e303:	6a 00                	push   0x0
c000e305:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e309:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30d:	e8 59 9b 01 00       	call   c0027e6b <__adddf3>
c000e312:	83 c4 10             	add    esp,0x10
c000e315:	89 04 24             	mov    DWORD PTR [esp],eax
c000e318:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e31c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e31f:	83 ec 10             	sub    esp,0x10
c000e322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e32a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e32e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e332:	e8 85 a1 01 00       	call   c00284bc <__subdf3>
c000e337:	e9 51 fd ff ff       	jmp    c000e08d <zoh_vari_process+0x355>
c000e33c:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e340:	7d 3a                	jge    c000e37c <zoh_vari_process+0x644>
c000e342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e346:	83 ec 0c             	sub    esp,0xc
c000e349:	29 e8                	sub    eax,ebp
c000e34b:	99                   	cdq    
c000e34c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e34f:	50                   	push   eax
c000e350:	e8 f6 a7 01 00       	call   c0028b4b <__floatsidf>
c000e355:	83 c4 10             	add    esp,0x10
c000e358:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e360:	52                   	push   edx
c000e361:	50                   	push   eax
c000e362:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e36a:	e8 fc 9a 01 00       	call   c0027e6b <__adddf3>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e375:	89 04 24             	mov    DWORD PTR [esp],eax
c000e378:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e37c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e37f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e383:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e386:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e389:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e38c:	85 c0                	test   eax,eax
c000e38e:	7f 25                	jg     c000e3b5 <zoh_vari_process+0x67d>
c000e390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e394:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e398:	89 07                	mov    DWORD PTR [edi],eax
c000e39a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e39d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3a0:	99                   	cdq    
c000e3a1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3a4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3aa:	99                   	cdq    
c000e3ab:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ae:	31 d2                	xor    edx,edx
c000e3b0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3b3:	eb 1e                	jmp    c000e3d3 <zoh_vari_process+0x69b>
c000e3b5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3b8:	31 d2                	xor    edx,edx
c000e3ba:	29 c8                	sub    eax,ecx
c000e3bc:	c1 e0 02             	shl    eax,0x2
c000e3bf:	39 d1                	cmp    ecx,edx
c000e3c1:	7e cd                	jle    c000e390 <zoh_vari_process+0x658>
c000e3c3:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3c5:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3c9:	83 c0 04             	add    eax,0x4
c000e3cc:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3d0:	42                   	inc    edx
c000e3d1:	eb ec                	jmp    c000e3bf <zoh_vari_process+0x687>
c000e3d3:	83 c4 3c             	add    esp,0x3c
c000e3d6:	89 d0                	mov    eax,edx
c000e3d8:	5b                   	pop    ebx
c000e3d9:	5e                   	pop    esi
c000e3da:	5f                   	pop    edi
c000e3db:	5d                   	pop    ebp
c000e3dc:	c3                   	ret    

c000e3dd <zoh_reset>:
c000e3dd:	83 ec 0c             	sub    esp,0xc
c000e3e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3e7:	85 c0                	test   eax,eax
c000e3e9:	74 20                	je     c000e40b <zoh_reset+0x2e>
c000e3eb:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3ee:	83 c0 1c             	add    eax,0x1c
c000e3f1:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3f4:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3fb:	c1 e2 02             	shl    edx,0x2
c000e3fe:	51                   	push   ecx
c000e3ff:	52                   	push   edx
c000e400:	6a 00                	push   0x0
c000e402:	50                   	push   eax
c000e403:	e8 64 23 ff ff       	call   c000076c <memset>
c000e408:	83 c4 10             	add    esp,0x10
c000e40b:	83 c4 0c             	add    esp,0xc
c000e40e:	c3                   	ret    

c000e40f <zoh_get_name>:
c000e40f:	31 c0                	xor    eax,eax
c000e411:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e416:	75 05                	jne    c000e41d <zoh_get_name+0xe>
c000e418:	b8 5e a9 02 c0       	mov    eax,0xc002a95e
c000e41d:	c3                   	ret    

c000e41e <zoh_get_description>:
c000e41e:	31 c0                	xor    eax,eax
c000e420:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e425:	75 05                	jne    c000e42c <zoh_get_description+0xe>
c000e427:	b8 6f a9 02 c0       	mov    eax,0xc002a96f
c000e42c:	c3                   	ret    

c000e42d <zoh_set_converter>:
c000e42d:	53                   	push   ebx
c000e42e:	b8 0a 00 00 00       	mov    eax,0xa
c000e433:	83 ec 08             	sub    esp,0x8
c000e436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e43a:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e43f:	75 6e                	jne    c000e4af <zoh_set_converter+0x82>
c000e441:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e444:	85 c0                	test   eax,eax
c000e446:	74 13                	je     c000e45b <zoh_set_converter+0x2e>
c000e448:	83 ec 0c             	sub    esp,0xc
c000e44b:	50                   	push   eax
c000e44c:	e8 67 14 00 00       	call   c000f8b8 <free>
c000e451:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	50                   	push   eax
c000e45c:	50                   	push   eax
c000e45d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e460:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e467:	50                   	push   eax
c000e468:	6a 01                	push   0x1
c000e46a:	e8 69 14 00 00       	call   c000f8d8 <calloc>
c000e46f:	83 c4 10             	add    esp,0x10
c000e472:	89 c2                	mov    edx,eax
c000e474:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e477:	85 d2                	test   edx,edx
c000e479:	b8 01 00 00 00       	mov    eax,0x1
c000e47e:	74 2f                	je     c000e4af <zoh_set_converter+0x82>
c000e480:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e483:	83 ec 0c             	sub    esp,0xc
c000e486:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e489:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e48f:	c7 43 24 38 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd38
c000e496:	c7 43 20 38 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd38
c000e49d:	c7 43 28 dd e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3dd
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 33 ff ff ff       	call   c000e3dd <zoh_reset>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	31 c0                	xor    eax,eax
c000e4af:	83 c4 08             	add    esp,0x8
c000e4b2:	5b                   	pop    ebx
c000e4b3:	c3                   	ret    

c000e4b4 <CPU::current()>:
c000e4b4:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c000e4b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4bf:	c3                   	ret    

c000e4c0 <operator new(unsigned long)>:
c000e4c0:	e9 e3 13 00 00       	jmp    c000f8a8 <malloc>

c000e4c5 <operator delete(void*)>:
c000e4c5:	e9 fe 13 00 00       	jmp    c000f8c8 <rfree>

c000e4ca <disableIRQs()>:
c000e4ca:	fa                   	cli    
c000e4cb:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c000e4d1:	c3                   	ret    

c000e4d2 <enableIRQs()>:
c000e4d2:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c000e4d7:	48                   	dec    eax
c000e4d8:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c000e4dd:	75 01                	jne    c000e4e0 <enableIRQs()+0xe>
c000e4df:	fb                   	sti    
c000e4e0:	c3                   	ret    

c000e4e1 <lockScheduler()>:
c000e4e1:	fa                   	cli    
c000e4e2:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c000e4e8:	c3                   	ret    

c000e4e9 <unlockScheduler()>:
c000e4e9:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c000e4ee:	48                   	dec    eax
c000e4ef:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c000e4f4:	75 01                	jne    c000e4f7 <unlockScheduler()+0xe>
c000e4f6:	fb                   	sti    
c000e4f7:	c3                   	ret    

c000e4f8 <lockStuff()>:
c000e4f8:	fa                   	cli    
c000e4f9:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c000e4ff:	ff 05 a4 24 03 c0    	inc    DWORD PTR ds:0xc00324a4
c000e505:	c3                   	ret    

c000e506 <unlockStuff()>:
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c000e50e:	48                   	dec    eax
c000e50f:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c000e514:	75 18                	jne    c000e52e <unlockStuff()+0x28>
c000e516:	83 3d a0 24 03 c0 00 	cmp    DWORD PTR ds:0xc00324a0,0x0
c000e51d:	74 0f                	je     c000e52e <unlockStuff()+0x28>
c000e51f:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c000e529:	e8 6e 00 01 00       	call   c001e59c <schedule()>
c000e52e:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c000e533:	48                   	dec    eax
c000e534:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c000e539:	75 01                	jne    c000e53c <unlockStuff()+0x36>
c000e53b:	fb                   	sti    
c000e53c:	83 c4 0c             	add    esp,0xc
c000e53f:	c3                   	ret    

c000e540 <Virt::getAKernelVAS()>:
c000e540:	a1 f0 f0 02 c0       	mov    eax,ds:0xc002f0f0
c000e545:	c3                   	ret    

c000e546 <__not_memcpy>:
c000e546:	57                   	push   edi
c000e547:	56                   	push   esi
c000e548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e550:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e554:	89 c7                	mov    edi,eax
c000e556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e558:	5e                   	pop    esi
c000e559:	5f                   	pop    edi
c000e55a:	c3                   	ret    

c000e55b <Krnl::resolveCompatibilitySymbol(char*)>:
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	83 ec 08             	sub    esp,0x8
c000e561:	68 a6 a9 02 c0       	push   0xc002a9a6
c000e566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e56a:	e8 45 23 ff ff       	call   c00008b4 <strcmp>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	85 c0                	test   eax,eax
c000e574:	0f 94 c0             	sete   al
c000e577:	84 c0                	test   al,al
c000e579:	74 0a                	je     c000e585 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e57b:	b8 68 ef 02 c0       	mov    eax,0xc002ef68
c000e580:	e9 e3 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e585:	83 ec 08             	sub    esp,0x8
c000e588:	68 af a9 02 c0       	push   0xc002a9af
c000e58d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e591:	e8 1e 23 ff ff       	call   c00008b4 <strcmp>
c000e596:	83 c4 10             	add    esp,0x10
c000e599:	85 c0                	test   eax,eax
c000e59b:	0f 94 c0             	sete   al
c000e59e:	84 c0                	test   al,al
c000e5a0:	74 0a                	je     c000e5ac <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5a2:	b8 e4 72 02 c0       	mov    eax,0xc00272e4
c000e5a7:	e9 bc 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ac:	83 ec 08             	sub    esp,0x8
c000e5af:	68 b9 a9 02 c0       	push   0xc002a9b9
c000e5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b8:	e8 f7 22 ff ff       	call   c00008b4 <strcmp>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	85 c0                	test   eax,eax
c000e5c2:	0f 94 c0             	sete   al
c000e5c5:	84 c0                	test   al,al
c000e5c7:	74 0a                	je     c000e5d3 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5c9:	b8 18 70 02 c0       	mov    eax,0xc0027018
c000e5ce:	e9 95 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d3:	83 ec 08             	sub    esp,0x8
c000e5d6:	68 c2 a9 02 c0       	push   0xc002a9c2
c000e5db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5df:	e8 d0 22 ff ff       	call   c00008b4 <strcmp>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	85 c0                	test   eax,eax
c000e5e9:	0f 94 c0             	sete   al
c000e5ec:	84 c0                	test   al,al
c000e5ee:	74 07                	je     c000e5f7 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5f0:	b8 e4 73 02 c0       	mov    eax,0xc00273e4
c000e5f5:	eb 71                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f7:	83 ec 08             	sub    esp,0x8
c000e5fa:	68 cc a9 02 c0       	push   0xc002a9cc
c000e5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e603:	e8 ac 22 ff ff       	call   c00008b4 <strcmp>
c000e608:	83 c4 10             	add    esp,0x10
c000e60b:	85 c0                	test   eax,eax
c000e60d:	0f 94 c0             	sete   al
c000e610:	84 c0                	test   al,al
c000e612:	74 07                	je     c000e61b <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e614:	b8 64 71 02 c0       	mov    eax,0xc0027164
c000e619:	eb 4d                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e61b:	83 ec 08             	sub    esp,0x8
c000e61e:	68 d5 a9 02 c0       	push   0xc002a9d5
c000e623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e627:	e8 88 22 ff ff       	call   c00008b4 <strcmp>
c000e62c:	83 c4 10             	add    esp,0x10
c000e62f:	85 c0                	test   eax,eax
c000e631:	0f 94 c0             	sete   al
c000e634:	84 c0                	test   al,al
c000e636:	74 07                	je     c000e63f <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e638:	b8 6c ef 02 c0       	mov    eax,0xc002ef6c
c000e63d:	eb 29                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e63f:	83 ec 08             	sub    esp,0x8
c000e642:	68 e2 a9 02 c0       	push   0xc002a9e2
c000e647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e64b:	e8 64 22 ff ff       	call   c00008b4 <strcmp>
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	85 c0                	test   eax,eax
c000e655:	0f 94 c0             	sete   al
c000e658:	84 c0                	test   al,al
c000e65a:	74 07                	je     c000e663 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e65c:	b8 6d ef 02 c0       	mov    eax,0xc002ef6d
c000e661:	eb 05                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e663:	b8 00 00 00 00       	mov    eax,0x0
c000e668:	83 c4 0c             	add    esp,0xc
c000e66b:	c3                   	ret    

c000e66c <Computer::close(int, int, void*)>:
c000e66c:	57                   	push   edi
c000e66d:	56                   	push   esi
c000e66e:	53                   	push   ebx
c000e66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e677:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e684:	e8 51 5d 00 00       	call   c00143da <Device::closeAll()>
c000e689:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e68f:	83 c4 10             	add    esp,0x10
c000e692:	8b 10                	mov    edx,DWORD PTR [eax]
c000e694:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e698:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e6a0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6a8:	5b                   	pop    ebx
c000e6a9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6ac:	5e                   	pop    esi
c000e6ad:	5f                   	pop    edi
c000e6ae:	ff e0                	jmp    eax

c000e6b0 <Krnl::firstTask()>:
c000e6b0:	53                   	push   ebx
c000e6b1:	83 ec 14             	sub    esp,0x14
c000e6b4:	fb                   	sti    
c000e6b5:	68 3f 07 00 00       	push   0x73f
c000e6ba:	e8 e9 11 00 00       	call   c000f8a8 <malloc>
c000e6bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6c6:	89 c3                	mov    ebx,eax
c000e6c8:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c000e6ce:	68 ef a9 02 c0       	push   0xc002a9ef
c000e6d3:	6a 01                	push   0x1
c000e6d5:	50                   	push   eax
c000e6d6:	e8 85 fa 00 00       	call   c001e160 <Process::Process(bool, char const*, Process*, char**)>
c000e6db:	83 c4 20             	add    esp,0x20
c000e6de:	68 ff 00 00 00       	push   0xff
c000e6e3:	6a 00                	push   0x0
c000e6e5:	68 3b f2 00 c0       	push   0xc000f23b
c000e6ea:	53                   	push   ebx
c000e6eb:	e8 68 fc 00 00       	call   c001e358 <Process::createThread(void (*)(void*), void*, int)>
c000e6f0:	6a 7a                	push   0x7a
c000e6f2:	6a 00                	push   0x0
c000e6f4:	68 d6 ed 01 c0       	push   0xc001edd6
c000e6f9:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c000e6ff:	e8 54 fc 00 00       	call   c001e358 <Process::createThread(void (*)(void*), void*, int)>
c000e704:	83 c4 20             	add    esp,0x20
c000e707:	a3 88 24 03 c0       	mov    ds:0xc0032488,eax
c000e70c:	c6 05 6d ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef6d,0x1
c000e713:	e8 12 0b 01 00       	call   c001f22a <Vm::initialise8086()>
c000e718:	e8 b1 4a 00 00       	call   c00131ce <Fs::initVFS()>
c000e71d:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c000e722:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e728:	8b 10                	mov    edx,DWORD PTR [eax]
c000e72a:	6a 00                	push   0x0
c000e72c:	6a 00                	push   0x0
c000e72e:	6a 00                	push   0x0
c000e730:	50                   	push   eax
c000e731:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e734:	e8 b2 e2 00 00       	call   c001c9eb <Sys::loadSyscalls()>
c000e739:	e8 96 bf 00 00       	call   c001a6d4 <Krnl::loadSystemEnv()>
c000e73e:	83 c4 0c             	add    esp,0xc
c000e741:	6a 3a                	push   0x3a
c000e743:	68 fc a9 02 c0       	push   0xc002a9fc
c000e748:	68 05 aa 02 c0       	push   0xc002aa05
c000e74d:	e8 4b ce 00 00       	call   c001b59d <Reg::readIntWithDefault(char*, char*, int)>
c000e752:	89 04 24             	mov    DWORD PTR [esp],eax
c000e755:	e8 64 55 00 00       	call   c0013cbe <User::loadClockSettings(int)>
c000e75a:	58                   	pop    eax
c000e75b:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c000e760:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e766:	e8 43 5c 00 00       	call   c00143ae <Device::loadDriversForAll()>
c000e76b:	e8 b4 ba 00 00       	call   c001a224 <Krnl::startCPUs()>
c000e770:	5a                   	pop    edx
c000e771:	8b 1d 68 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef68
c000e777:	59                   	pop    ecx
c000e778:	6a 01                	push   0x1
c000e77a:	68 0d aa 02 c0       	push   0xc002aa0d
c000e77f:	e8 39 f4 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c000e784:	5a                   	pop    edx
c000e785:	59                   	pop    ecx
c000e786:	53                   	push   ebx
c000e787:	50                   	push   eax
c000e788:	e8 5b f6 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	6a 02                	push   0x2
c000e795:	e8 01 00 01 00       	call   c001e79b <blockTask(TaskState)>
c000e79a:	83 c4 10             	add    esp,0x10
c000e79d:	eb f1                	jmp    c000e790 <Krnl::firstTask()+0xe0>
c000e79f:	90                   	nop

c000e7a0 <Computer::Computer()>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a7:	83 ec 08             	sub    esp,0x8
c000e7aa:	68 29 aa 02 c0       	push   0xc002aa29
c000e7af:	50                   	push   eax
c000e7b0:	e8 9f 5c 00 00       	call   c0014454 <Device::Device(char const*)>
c000e7b5:	83 c4 10             	add    esp,0x10
c000e7b8:	ba c8 ab 02 c0       	mov    edx,0xc002abc8
c000e7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c1:	89 10                	mov    DWORD PTR [eax],edx
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7e9:	83 ca 04             	or     edx,0x4
c000e7ec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7fc:	0f b6 d0             	movzx  edx,al
c000e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e803:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e814:	0f b6 d0             	movzx  edx,al
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e824:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e82a:	8d 50 01             	lea    edx,[eax+0x1]
c000e82d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e831:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e842:	83 e1 3f             	and    ecx,0x3f
c000e845:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e853:	0f b6 d0             	movzx  edx,al
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86b:	0f b6 d0             	movzx  edx,al
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e881:	8d 50 01             	lea    edx,[eax+0x1]
c000e884:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e888:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e899:	83 e1 3f             	and    ecx,0x3f
c000e89c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8aa:	0f b6 d0             	movzx  edx,al
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c2:	0f b6 d0             	movzx  edx,al
c000e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d8:	8d 50 01             	lea    edx,[eax+0x1]
c000e8db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8df:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8e5:	0f b6 d0             	movzx  edx,al
c000e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8f0:	83 e1 3f             	and    ecx,0x3f
c000e8f3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8f7:	90                   	nop
c000e8f8:	83 c4 0c             	add    esp,0xc
c000e8fb:	c3                   	ret    

c000e8fc <Computer::setBootMessage(char const*)>:
c000e8fc:	c3                   	ret    
c000e8fd:	90                   	nop

c000e8fe <Computer::detectFeatures()>:
c000e8fe:	55                   	push   ebp
c000e8ff:	57                   	push   edi
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 1c             	sub    esp,0x1c
c000e905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e909:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e913:	e8 cc 19 ff ff       	call   c00002e4 <detectCPUID>
c000e918:	85 c0                	test   eax,eax
c000e91a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e920:	0f 95 c2             	setne  dl
c000e923:	83 e0 fd             	and    eax,0xfffffffd
c000e926:	d1 e2                	shl    edx,1
c000e928:	09 d0                	or     eax,edx
c000e92a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e930:	a8 02                	test   al,0x2
c000e932:	75 46                	jne    c000e97a <Computer::detectFeatures()+0x7c>
c000e934:	f6 05 81 ef 02 c0 04 	test   BYTE PTR ds:0xc002ef81,0x4
c000e93b:	74 07                	je     c000e944 <Computer::detectFeatures()+0x46>
c000e93d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e944:	e8 5d 86 01 00       	call   c0026fa6 <x87Detect>
c000e949:	83 e0 01             	and    eax,0x1
c000e94c:	c1 e0 04             	shl    eax,0x4
c000e94f:	88 c2                	mov    dl,al
c000e951:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e957:	83 e0 ef             	and    eax,0xffffffef
c000e95a:	09 d0                	or     eax,edx
c000e95c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e962:	a8 10                	test   al,0x10
c000e964:	0f 85 2a 01 00 00    	jne    c000ea94 <Computer::detectFeatures()+0x196>
c000e96a:	84 c0                	test   al,al
c000e96c:	0f 88 45 01 00 00    	js     c000eab7 <Computer::detectFeatures()+0x1b9>
c000e972:	83 c4 1c             	add    esp,0x1c
c000e975:	5b                   	pop    ebx
c000e976:	5e                   	pop    esi
c000e977:	5f                   	pop    edi
c000e978:	5d                   	pop    ebp
c000e979:	c3                   	ret    
c000e97a:	83 ec 0c             	sub    esp,0xc
c000e97d:	6a 20                	push   0x20
c000e97f:	e8 c0 a5 00 00       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c000e984:	83 e0 01             	and    eax,0x1
c000e987:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e98e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e994:	83 e0 f7             	and    eax,0xfffffff7
c000e997:	09 d0                	or     eax,edx
c000e999:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e99f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9a6:	e8 99 a5 00 00       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ab:	83 e0 01             	and    eax,0x1
c000e9ae:	88 c2                	mov    dl,al
c000e9b0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9b6:	83 e0 fe             	and    eax,0xfffffffe
c000e9b9:	09 d0                	or     eax,edx
c000e9bb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9c8:	e8 77 a5 00 00       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c000e9cd:	c1 e0 07             	shl    eax,0x7
c000e9d0:	88 c2                	mov    dl,al
c000e9d2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9d8:	83 e0 7f             	and    eax,0x7f
c000e9db:	09 d0                	or     eax,edx
c000e9dd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9e3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ea:	e8 55 a5 00 00       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ef:	83 c4 10             	add    esp,0x10
c000e9f2:	83 e0 01             	and    eax,0x1
c000e9f5:	c1 e0 05             	shl    eax,0x5
c000e9f8:	88 c2                	mov    dl,al
c000e9fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea00:	83 e0 df             	and    eax,0xffffffdf
c000ea03:	09 d0                	or     eax,edx
c000ea05:	f7 05 80 ef 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ef80,0x401
c000ea0f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea15:	0f 84 c2 00 00 00    	je     c000eadd <Computer::detectFeatures()+0x1df>
c000ea1b:	83 e0 fe             	and    eax,0xfffffffe
c000ea1e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea24:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea2a:	88 c2                	mov    dl,al
c000ea2c:	83 e2 09             	and    edx,0x9
c000ea2f:	fe ca                	dec    dl
c000ea31:	75 09                	jne    c000ea3c <Computer::detectFeatures()+0x13e>
c000ea33:	83 e0 fe             	and    eax,0xfffffffe
c000ea36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea3c:	83 ec 0c             	sub    esp,0xc
c000ea3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea43:	50                   	push   eax
c000ea44:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea48:	55                   	push   ebp
c000ea49:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea4d:	57                   	push   edi
c000ea4e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea52:	56                   	push   esi
c000ea53:	68 00 00 00 80       	push   0x80000000
c000ea58:	e8 63 a4 00 00       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea5d:	83 c4 20             	add    esp,0x20
c000ea60:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea6b:	0f 86 c3 fe ff ff    	jbe    c000e934 <Computer::detectFeatures()+0x36>
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	50                   	push   eax
c000ea75:	55                   	push   ebp
c000ea76:	57                   	push   edi
c000ea77:	56                   	push   esi
c000ea78:	68 01 00 00 80       	push   0x80000001
c000ea7d:	e8 3e a4 00 00       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea82:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea8c:	83 c4 20             	add    esp,0x20
c000ea8f:	e9 a0 fe ff ff       	jmp    c000e934 <Computer::detectFeatures()+0x36>
c000ea94:	e8 c7 84 01 00       	call   c0026f60 <absolutelyNoChanceInHell>
c000ea99:	88 c2                	mov    dl,al
c000ea9b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaa1:	c1 e2 07             	shl    edx,0x7
c000eaa4:	83 e0 7f             	and    eax,0x7f
c000eaa7:	09 d0                	or     eax,edx
c000eaa9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaaf:	84 c0                	test   al,al
c000eab1:	0f 89 bb fe ff ff    	jns    c000e972 <Computer::detectFeatures()+0x74>
c000eab7:	e8 84 84 01 00       	call   c0026f40 <avxDetect>
c000eabc:	83 e0 01             	and    eax,0x1
c000eabf:	c1 e0 05             	shl    eax,0x5
c000eac2:	88 c2                	mov    dl,al
c000eac4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaca:	83 e0 df             	and    eax,0xffffffdf
c000eacd:	09 d0                	or     eax,edx
c000eacf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ead5:	83 c4 1c             	add    esp,0x1c
c000ead8:	5b                   	pop    ebx
c000ead9:	5e                   	pop    esi
c000eada:	5f                   	pop    edi
c000eadb:	5d                   	pop    ebp
c000eadc:	c3                   	ret    
c000eadd:	83 ec 0c             	sub    esp,0xc
c000eae0:	68 00 02 00 00       	push   0x200
c000eae5:	e8 5a a4 00 00       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c000eaea:	83 c4 10             	add    esp,0x10
c000eaed:	83 e0 01             	and    eax,0x1
c000eaf0:	88 c2                	mov    dl,al
c000eaf2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaf8:	83 e0 fe             	and    eax,0xfffffffe
c000eafb:	09 d0                	or     eax,edx
c000eafd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb03:	e9 1c ff ff ff       	jmp    c000ea24 <Computer::detectFeatures()+0x126>

c000eb08 <Computer::displayFeatures()>:
c000eb08:	53                   	push   ebx
c000eb09:	83 ec 14             	sub    esp,0x14
c000eb0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb10:	68 39 aa 02 c0       	push   0xc002aa39
c000eb15:	e8 29 43 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000eb1a:	83 c4 10             	add    esp,0x10
c000eb1d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb24:	0f 85 73 02 00 00    	jne    c000ed9d <Computer::displayFeatures()+0x295>
c000eb2a:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000eb2f:	83 ec 08             	sub    esp,0x8
c000eb32:	50                   	push   eax
c000eb33:	68 4c aa 02 c0       	push   0xc002aa4c
c000eb38:	e8 06 43 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000eb3d:	83 c4 10             	add    esp,0x10
c000eb40:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb47:	0f 85 8c 02 00 00    	jne    c000edd9 <Computer::displayFeatures()+0x2d1>
c000eb4d:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000eb52:	83 ec 08             	sub    esp,0x8
c000eb55:	50                   	push   eax
c000eb56:	68 5d aa 02 c0       	push   0xc002aa5d
c000eb5b:	e8 e3 42 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb6a:	0f 85 5f 02 00 00    	jne    c000edcf <Computer::displayFeatures()+0x2c7>
c000eb70:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000eb75:	83 ec 08             	sub    esp,0x8
c000eb78:	50                   	push   eax
c000eb79:	68 6e aa 02 c0       	push   0xc002aa6e
c000eb7e:	e8 c0 42 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000eb83:	83 c4 10             	add    esp,0x10
c000eb86:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb8d:	0f 85 32 02 00 00    	jne    c000edc5 <Computer::displayFeatures()+0x2bd>
c000eb93:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000eb98:	83 ec 08             	sub    esp,0x8
c000eb9b:	50                   	push   eax
c000eb9c:	68 7f aa 02 c0       	push   0xc002aa7f
c000eba1:	e8 9d 42 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000eba6:	83 c4 10             	add    esp,0x10
c000eba9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebb0:	0f 85 05 02 00 00    	jne    c000edbb <Computer::displayFeatures()+0x2b3>
c000ebb6:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ebbb:	83 ec 08             	sub    esp,0x8
c000ebbe:	50                   	push   eax
c000ebbf:	68 90 aa 02 c0       	push   0xc002aa90
c000ebc4:	e8 7a 42 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebd3:	0f 85 d8 01 00 00    	jne    c000edb1 <Computer::displayFeatures()+0x2a9>
c000ebd9:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ebde:	83 ec 08             	sub    esp,0x8
c000ebe1:	50                   	push   eax
c000ebe2:	68 a1 aa 02 c0       	push   0xc002aaa1
c000ebe7:	e8 57 42 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ebec:	83 c4 10             	add    esp,0x10
c000ebef:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebf6:	0f 85 ab 01 00 00    	jne    c000eda7 <Computer::displayFeatures()+0x29f>
c000ebfc:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ec01:	83 ec 08             	sub    esp,0x8
c000ec04:	50                   	push   eax
c000ec05:	68 b2 aa 02 c0       	push   0xc002aab2
c000ec0a:	e8 34 42 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ec0f:	83 c4 10             	add    esp,0x10
c000ec12:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec19:	0f 88 1b 02 00 00    	js     c000ee3a <Computer::displayFeatures()+0x332>
c000ec1f:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ec24:	83 ec 08             	sub    esp,0x8
c000ec27:	50                   	push   eax
c000ec28:	68 c3 aa 02 c0       	push   0xc002aac3
c000ec2d:	e8 11 42 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ec32:	83 c4 10             	add    esp,0x10
c000ec35:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec3c:	0f 85 a1 01 00 00    	jne    c000ede3 <Computer::displayFeatures()+0x2db>
c000ec42:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ec47:	83 ec 08             	sub    esp,0x8
c000ec4a:	50                   	push   eax
c000ec4b:	68 d4 aa 02 c0       	push   0xc002aad4
c000ec50:	e8 ee 41 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec5f:	0f 85 cb 01 00 00    	jne    c000ee30 <Computer::displayFeatures()+0x328>
c000ec65:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ec6a:	83 ec 08             	sub    esp,0x8
c000ec6d:	50                   	push   eax
c000ec6e:	68 e5 aa 02 c0       	push   0xc002aae5
c000ec73:	e8 cb 41 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ec78:	83 c4 10             	add    esp,0x10
c000ec7b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec82:	0f 85 9e 01 00 00    	jne    c000ee26 <Computer::displayFeatures()+0x31e>
c000ec88:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ec8d:	83 ec 08             	sub    esp,0x8
c000ec90:	50                   	push   eax
c000ec91:	68 f6 aa 02 c0       	push   0xc002aaf6
c000ec96:	e8 a8 41 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ec9b:	83 c4 10             	add    esp,0x10
c000ec9e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000eca5:	0f 85 71 01 00 00    	jne    c000ee1c <Computer::displayFeatures()+0x314>
c000ecab:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ecb0:	83 ec 08             	sub    esp,0x8
c000ecb3:	50                   	push   eax
c000ecb4:	68 07 ab 02 c0       	push   0xc002ab07
c000ecb9:	e8 85 41 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ecbe:	83 c4 10             	add    esp,0x10
c000ecc1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecc8:	0f 85 44 01 00 00    	jne    c000ee12 <Computer::displayFeatures()+0x30a>
c000ecce:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ecd3:	83 ec 08             	sub    esp,0x8
c000ecd6:	50                   	push   eax
c000ecd7:	68 18 ab 02 c0       	push   0xc002ab18
c000ecdc:	e8 62 41 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ece1:	83 c4 10             	add    esp,0x10
c000ece4:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eceb:	0f 85 17 01 00 00    	jne    c000ee08 <Computer::displayFeatures()+0x300>
c000ecf1:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ecf6:	83 ec 08             	sub    esp,0x8
c000ecf9:	50                   	push   eax
c000ecfa:	68 29 ab 02 c0       	push   0xc002ab29
c000ecff:	e8 3f 41 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ed04:	83 c4 10             	add    esp,0x10
c000ed07:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed0e:	0f 85 ea 00 00 00    	jne    c000edfe <Computer::displayFeatures()+0x2f6>
c000ed14:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ed19:	83 ec 08             	sub    esp,0x8
c000ed1c:	50                   	push   eax
c000ed1d:	68 3a ab 02 c0       	push   0xc002ab3a
c000ed22:	e8 1c 41 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed31:	0f 88 0d 01 00 00    	js     c000ee44 <Computer::displayFeatures()+0x33c>
c000ed37:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ed3c:	83 ec 08             	sub    esp,0x8
c000ed3f:	50                   	push   eax
c000ed40:	68 4b ab 02 c0       	push   0xc002ab4b
c000ed45:	e8 f9 40 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ed4a:	83 c4 10             	add    esp,0x10
c000ed4d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed54:	0f 85 9a 00 00 00    	jne    c000edf4 <Computer::displayFeatures()+0x2ec>
c000ed5a:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ed5f:	83 ec 08             	sub    esp,0x8
c000ed62:	50                   	push   eax
c000ed63:	68 5c ab 02 c0       	push   0xc002ab5c
c000ed68:	e8 d6 40 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed77:	75 74                	jne    c000eded <Computer::displayFeatures()+0x2e5>
c000ed79:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c000ed7e:	83 ec 08             	sub    esp,0x8
c000ed81:	50                   	push   eax
c000ed82:	68 6d ab 02 c0       	push   0xc002ab6d
c000ed87:	e8 b7 40 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ed8c:	c7 44 24 20 d4 c5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c5d4
c000ed94:	83 c4 18             	add    esp,0x18
c000ed97:	5b                   	pop    ebx
c000ed98:	e9 a6 40 00 00       	jmp    c0012e43 <Dbg::kprintf(char const*, ...)>
c000ed9d:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000eda2:	e9 88 fd ff ff       	jmp    c000eb2f <Computer::displayFeatures()+0x27>
c000eda7:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000edac:	e9 50 fe ff ff       	jmp    c000ec01 <Computer::displayFeatures()+0xf9>
c000edb1:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000edb6:	e9 23 fe ff ff       	jmp    c000ebde <Computer::displayFeatures()+0xd6>
c000edbb:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000edc0:	e9 f6 fd ff ff       	jmp    c000ebbb <Computer::displayFeatures()+0xb3>
c000edc5:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000edca:	e9 c9 fd ff ff       	jmp    c000eb98 <Computer::displayFeatures()+0x90>
c000edcf:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000edd4:	e9 9c fd ff ff       	jmp    c000eb75 <Computer::displayFeatures()+0x6d>
c000edd9:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000edde:	e9 6f fd ff ff       	jmp    c000eb52 <Computer::displayFeatures()+0x4a>
c000ede3:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ede8:	e9 5a fe ff ff       	jmp    c000ec47 <Computer::displayFeatures()+0x13f>
c000eded:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000edf2:	eb 8a                	jmp    c000ed7e <Computer::displayFeatures()+0x276>
c000edf4:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000edf9:	e9 61 ff ff ff       	jmp    c000ed5f <Computer::displayFeatures()+0x257>
c000edfe:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ee03:	e9 11 ff ff ff       	jmp    c000ed19 <Computer::displayFeatures()+0x211>
c000ee08:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ee0d:	e9 e4 fe ff ff       	jmp    c000ecf6 <Computer::displayFeatures()+0x1ee>
c000ee12:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ee17:	e9 b7 fe ff ff       	jmp    c000ecd3 <Computer::displayFeatures()+0x1cb>
c000ee1c:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ee21:	e9 8a fe ff ff       	jmp    c000ecb0 <Computer::displayFeatures()+0x1a8>
c000ee26:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ee2b:	e9 5d fe ff ff       	jmp    c000ec8d <Computer::displayFeatures()+0x185>
c000ee30:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ee35:	e9 30 fe ff ff       	jmp    c000ec6a <Computer::displayFeatures()+0x162>
c000ee3a:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ee3f:	e9 e0 fd ff ff       	jmp    c000ec24 <Computer::displayFeatures()+0x11c>
c000ee44:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c000ee49:	e9 ee fe ff ff       	jmp    c000ed3c <Computer::displayFeatures()+0x234>

c000ee4e <Computer::rdmsr(unsigned int)>:
c000ee4e:	83 ec 0c             	sub    esp,0xc
c000ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee5c:	74 0a                	je     c000ee68 <Computer::rdmsr(unsigned int)+0x1a>
c000ee5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee62:	0f 32                	rdmsr  
c000ee64:	83 c4 0c             	add    esp,0xc
c000ee67:	c3                   	ret    
c000ee68:	83 ec 0c             	sub    esp,0xc
c000ee6b:	68 7e ab 02 c0       	push   0xc002ab7e
c000ee70:	e8 98 b9 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000ee75:	83 c4 10             	add    esp,0x10
c000ee78:	eb e4                	jmp    c000ee5e <Computer::rdmsr(unsigned int)+0x10>

c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee7a:	57                   	push   edi
c000ee7b:	56                   	push   esi
c000ee7c:	52                   	push   edx
c000ee7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee81:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee90:	74 0e                	je     c000eea0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee96:	89 f0                	mov    eax,esi
c000ee98:	89 fa                	mov    edx,edi
c000ee9a:	0f 30                	wrmsr  
c000ee9c:	58                   	pop    eax
c000ee9d:	5e                   	pop    esi
c000ee9e:	5f                   	pop    edi
c000ee9f:	c3                   	ret    
c000eea0:	83 ec 0c             	sub    esp,0xc
c000eea3:	68 84 ab 02 c0       	push   0xc002ab84
c000eea8:	e8 60 b9 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	eb e0                	jmp    c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eeb2 <Computer::nmiEnabled()>:
c000eeb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeb6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eebc:	c3                   	ret    
c000eebd:	90                   	nop

c000eebe <Computer::readCMOS(unsigned char)>:
c000eebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eec9:	19 c0                	sbb    eax,eax
c000eecb:	83 e0 80             	and    eax,0xffffff80
c000eece:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eed2:	e6 70                	out    0x70,al
c000eed4:	e4 71                	in     al,0x71
c000eed6:	c3                   	ret    
c000eed7:	90                   	nop

c000eed8 <Computer::enableNMI(bool)>:
c000eed8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eee0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eee6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eeee:	eb ce                	jmp    c000eebe <Computer::readCMOS(unsigned char)>

c000eef0 <Computer::open(int, int, void*)>:
c000eef0:	56                   	push   esi
c000eef1:	53                   	push   ebx
c000eef2:	83 ec 10             	sub    esp,0x10
c000eef5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eef9:	f6 05 80 ef 02 c0 04 	test   BYTE PTR ds:0xc002ef80,0x4
c000ef00:	68 68 12 00 00       	push   0x1268
c000ef05:	0f 94 05 a4 de 02 c0 	sete   BYTE PTR ds:0xc002dea4
c000ef0c:	e8 97 09 00 00       	call   c000f8a8 <malloc>
c000ef11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef14:	89 c6                	mov    esi,eax
c000ef16:	e8 ad 93 00 00       	call   c00182c8 <ACPI::ACPI()>
c000ef1b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef21:	58                   	pop    eax
c000ef22:	5a                   	pop    edx
c000ef23:	56                   	push   esi
c000ef24:	53                   	push   ebx
c000ef25:	e8 3a 53 00 00       	call   c0014264 <Device::addChild(Device*)>
c000ef2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef2d:	e8 cc f9 ff ff       	call   c000e8fe <Computer::detectFeatures()>
c000ef32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef35:	e8 ce fb ff ff       	call   c000eb08 <Computer::displayFeatures()>
c000ef3a:	59                   	pop    ecx
c000ef3b:	5e                   	pop    esi
c000ef3c:	6a 01                	push   0x1
c000ef3e:	53                   	push   ebx
c000ef3f:	e8 94 ff ff ff       	call   c000eed8 <Computer::enableNMI(bool)>
c000ef44:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef4b:	e8 58 09 00 00       	call   c000f8a8 <malloc>
c000ef50:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef53:	89 c6                	mov    esi,eax
c000ef55:	e8 a2 a0 00 00       	call   c0018ffc <CPU::CPU()>
c000ef5a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef60:	58                   	pop    eax
c000ef61:	5a                   	pop    edx
c000ef62:	56                   	push   esi
c000ef63:	53                   	push   ebx
c000ef64:	e8 fb 52 00 00       	call   c0014264 <Device::addChild(Device*)>
c000ef69:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef6f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef75:	6a 00                	push   0x0
c000ef77:	6a 00                	push   0x0
c000ef79:	50                   	push   eax
c000ef7a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef7d:	83 c4 20             	add    esp,0x20
c000ef80:	e8 73 58 00 00       	call   c00147f8 <setupFPU()>
c000ef85:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef8b:	85 c0                	test   eax,eax
c000ef8d:	74 1f                	je     c000efae <Computer::open(int, int, void*)+0xbe>
c000ef8f:	83 ec 08             	sub    esp,0x8
c000ef92:	50                   	push   eax
c000ef93:	53                   	push   ebx
c000ef94:	e8 cb 52 00 00       	call   c0014264 <Device::addChild(Device*)>
c000ef99:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef9f:	8b 10                	mov    edx,DWORD PTR [eax]
c000efa1:	6a 00                	push   0x0
c000efa3:	6a 00                	push   0x0
c000efa5:	6a 00                	push   0x0
c000efa7:	50                   	push   eax
c000efa8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efab:	83 c4 20             	add    esp,0x20
c000efae:	83 ec 0c             	sub    esp,0xc
c000efb1:	68 b0 e6 00 c0       	push   0xc000e6b0
c000efb6:	e8 bf f4 00 00       	call   c001e47a <setupMultitasking(void (*)())>
c000efbb:	83 c4 14             	add    esp,0x14
c000efbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efc3:	5b                   	pop    ebx
c000efc4:	5e                   	pop    esi
c000efc5:	c3                   	ret    

c000efc6 <Computer::disableNMI()>:
c000efc6:	6a 00                	push   0x0
c000efc8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efcc:	e8 07 ff ff ff       	call   c000eed8 <Computer::enableNMI(bool)>
c000efd1:	58                   	pop    eax
c000efd2:	5a                   	pop    edx
c000efd3:	c3                   	ret    

c000efd4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efd8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efdf:	19 c0                	sbb    eax,eax
c000efe1:	83 e0 80             	and    eax,0xffffff80
c000efe4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efe8:	e6 70                	out    0x70,al
c000efea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efee:	e6 71                	out    0x71,al
c000eff0:	c3                   	ret    
c000eff1:	90                   	nop

c000eff2 <Computer::handleNMI()>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	83 ec 10             	sub    esp,0x10
c000eff7:	e4 92                	in     al,0x92
c000eff9:	89 c6                	mov    esi,eax
c000effb:	e4 61                	in     al,0x61
c000effd:	68 8a ab 02 c0       	push   0xc002ab8a
c000f002:	88 c3                	mov    bl,al
c000f004:	e8 3a 3e 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000f009:	83 c4 10             	add    esp,0x10
c000f00c:	83 e6 10             	and    esi,0x10
c000f00f:	75 0d                	jne    c000f01e <Computer::handleNMI()+0x2c>
c000f011:	f6 c3 40             	test   bl,0x40
c000f014:	75 1d                	jne    c000f033 <Computer::handleNMI()+0x41>
c000f016:	84 db                	test   bl,bl
c000f018:	78 2d                	js     c000f047 <Computer::handleNMI()+0x55>
c000f01a:	58                   	pop    eax
c000f01b:	5b                   	pop    ebx
c000f01c:	5e                   	pop    esi
c000f01d:	c3                   	ret    
c000f01e:	83 ec 0c             	sub    esp,0xc
c000f021:	68 9b ab 02 c0       	push   0xc002ab9b
c000f026:	e8 e2 b7 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000f02b:	83 c4 10             	add    esp,0x10
c000f02e:	f6 c3 40             	test   bl,0x40
c000f031:	74 e3                	je     c000f016 <Computer::handleNMI()+0x24>
c000f033:	83 ec 0c             	sub    esp,0xc
c000f036:	68 a8 ab 02 c0       	push   0xc002aba8
c000f03b:	e8 cd b7 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000f040:	83 c4 10             	add    esp,0x10
c000f043:	84 db                	test   bl,bl
c000f045:	79 d3                	jns    c000f01a <Computer::handleNMI()+0x28>
c000f047:	c7 44 24 10 b2 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002abb2
c000f04f:	5a                   	pop    edx
c000f050:	5b                   	pop    ebx
c000f051:	5e                   	pop    esi
c000f052:	e9 b6 b7 00 00       	jmp    c001a80d <Krnl::panic(char const*)>
c000f057:	90                   	nop

c000f058 <Computer::setDiskActivityLight(int, bool)>:
c000f058:	56                   	push   esi
c000f059:	53                   	push   ebx
c000f05a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f05e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f063:	77 1b                	ja     c000f080 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f065:	e4 92                	in     al,0x92
c000f067:	bb 40 00 00 00       	mov    ebx,0x40
c000f06c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f070:	89 da                	mov    edx,ebx
c000f072:	d3 e2                	shl    edx,cl
c000f074:	89 f1                	mov    ecx,esi
c000f076:	f7 d2                	not    edx
c000f078:	d3 e3                	shl    ebx,cl
c000f07a:	21 d0                	and    eax,edx
c000f07c:	09 d8                	or     eax,ebx
c000f07e:	e6 92                	out    0x92,al
c000f080:	5b                   	pop    ebx
c000f081:	5e                   	pop    esi
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setBase(unsigned int)>:
c000f084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f088:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08c:	89 c1                	mov    ecx,eax
c000f08e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f092:	c1 e9 10             	shr    ecx,0x10
c000f095:	c1 e8 18             	shr    eax,0x18
c000f098:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f09b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f09e:	c3                   	ret    
c000f09f:	90                   	nop

c000f0a0 <GDTEntry::setLimit(unsigned int)>:
c000f0a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0ab:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0ae:	83 e2 f0             	and    edx,0xfffffff0
c000f0b1:	c1 e8 10             	shr    eax,0x10
c000f0b4:	83 e0 0f             	and    eax,0xf
c000f0b7:	09 d0                	or     eax,edx
c000f0b9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0bc:	c3                   	ret    
c000f0bd:	90                   	nop

c000f0be <GDT::GDT()>:
c000f0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0d2:	90                   	nop
c000f0d3:	c3                   	ret    

c000f0d4 <GDT::addEntry(GDTEntry)>:
c000f0d4:	53                   	push   ebx
c000f0d5:	83 ec 0c             	sub    esp,0xc
c000f0d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0e5:	52                   	push   edx
c000f0e6:	50                   	push   eax
c000f0e7:	68 ec ab 02 c0       	push   0xc002abec
c000f0ec:	e8 52 3d 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000f0f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0f7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0fb:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0ff:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f103:	8d 50 01             	lea    edx,[eax+0x1]
c000f106:	c1 e0 03             	shl    eax,0x3
c000f109:	89 13                	mov    DWORD PTR [ebx],edx
c000f10b:	83 c4 18             	add    esp,0x18
c000f10e:	5b                   	pop    ebx
c000f10f:	c3                   	ret    

c000f110 <GDT::getNumberOfEntries()>:
c000f110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f114:	8b 00                	mov    eax,DWORD PTR [eax]
c000f116:	c3                   	ret    
c000f117:	90                   	nop

c000f118 <GDT::flush()>:
c000f118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f11c:	8b 10                	mov    edx,DWORD PTR [eax]
c000f11e:	83 c0 04             	add    eax,0x4
c000f121:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f128:	a3 72 ef 02 c0       	mov    ds:0xc002ef72,eax
c000f12d:	66 89 15 70 ef 02 c0 	mov    WORD PTR ds:0xc002ef70,dx
c000f134:	e9 17 13 ff ff       	jmp    c0000450 <loadGDT>
c000f139:	90                   	nop

c000f13a <GDT::setup()>:
c000f13a:	55                   	push   ebp
c000f13b:	57                   	push   edi
c000f13c:	56                   	push   esi
c000f13d:	53                   	push   ebx
c000f13e:	83 ec 3c             	sub    esp,0x3c
c000f141:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f14b:	53                   	push   ebx
c000f14c:	e8 33 ff ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f151:	6a 00                	push   0x0
c000f153:	53                   	push   ebx
c000f154:	e8 47 ff ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f159:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f161:	6a 00                	push   0x0
c000f163:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f167:	53                   	push   ebx
c000f168:	e8 17 ff ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f16d:	68 ff ff ff 00       	push   0xffffff
c000f172:	53                   	push   ebx
c000f173:	e8 28 ff ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f178:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f17c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f181:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f186:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f18a:	83 c4 20             	add    esp,0x20
c000f18d:	6a 00                	push   0x0
c000f18f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f193:	53                   	push   ebx
c000f194:	e8 eb fe ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f199:	68 ff ff ff 00       	push   0xffffff
c000f19e:	53                   	push   ebx
c000f19f:	e8 fc fe ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f1a4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1ac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1b4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1b8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1bd:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1c2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1c6:	89 d8                	mov    eax,ebx
c000f1c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1cc:	80 cc 60             	or     ah,0x60
c000f1cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1d3:	83 c4 0c             	add    esp,0xc
c000f1d6:	89 f8                	mov    eax,edi
c000f1d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1dc:	80 cc 60             	or     ah,0x60
c000f1df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1e3:	89 c7                	mov    edi,eax
c000f1e5:	55                   	push   ebp
c000f1e6:	e8 e9 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f1eb:	83 c4 0c             	add    esp,0xc
c000f1ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1f6:	55                   	push   ebp
c000f1f7:	e8 d8 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f1fc:	83 c4 0c             	add    esp,0xc
c000f1ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f203:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f207:	55                   	push   ebp
c000f208:	e8 c7 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f20d:	83 c4 0c             	add    esp,0xc
c000f210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f214:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f218:	53                   	push   ebx
c000f219:	51                   	push   ecx
c000f21a:	55                   	push   ebp
c000f21b:	e8 b4 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f220:	83 c4 0c             	add    esp,0xc
c000f223:	57                   	push   edi
c000f224:	56                   	push   esi
c000f225:	55                   	push   ebp
c000f226:	e8 a9 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f22b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f22e:	e8 e5 fe ff ff       	call   c000f118 <GDT::flush()>
c000f233:	83 c4 4c             	add    esp,0x4c
c000f236:	5b                   	pop    ebx
c000f237:	5e                   	pop    esi
c000f238:	5f                   	pop    edi
c000f239:	5d                   	pop    ebp
c000f23a:	c3                   	ret    

c000f23b <idleFunction(void*)>:
c000f23b:	53                   	push   ebx
c000f23c:	83 ec 08             	sub    esp,0x8
c000f23f:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c000f244:	48                   	dec    eax
c000f245:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c000f24a:	75 01                	jne    c000f24d <idleFunction(void*)+0x12>
c000f24c:	fb                   	sti    
c000f24d:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c000f252:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f258:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f25f:	74 3c                	je     c000f29d <idleFunction(void*)+0x62>
c000f261:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f268:	74 33                	je     c000f29d <idleFunction(void*)+0x62>
c000f26a:	31 db                	xor    ebx,ebx
c000f26c:	52                   	push   edx
c000f26d:	52                   	push   edx
c000f26e:	68 e1 00 00 00       	push   0xe1
c000f273:	50                   	push   eax
c000f274:	e8 d5 fb ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c000f279:	53                   	push   ebx
c000f27a:	83 e0 02             	and    eax,0x2
c000f27d:	50                   	push   eax
c000f27e:	68 e1 00 00 00       	push   0xe1
c000f283:	ff 35 68 ef 02 c0    	push   DWORD PTR ds:0xc002ef68
c000f289:	e8 ec fb ff ff       	call   c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>
c000f28e:	83 c4 20             	add    esp,0x20
c000f291:	e8 e9 0f ff ff       	call   c000027f <doTPAUSE>
c000f296:	e8 55 9d 01 00       	call   c0028ff0 <idleCommon()>
c000f29b:	eb f4                	jmp    c000f291 <idleFunction(void*)+0x56>
c000f29d:	fb                   	sti    
c000f29e:	f4                   	hlt    
c000f29f:	e8 4c 9d 01 00       	call   c0028ff0 <idleCommon()>
c000f2a4:	eb f7                	jmp    c000f29d <idleFunction(void*)+0x62>

c000f2a6 <IDTEntry::IDTEntry(bool)>:
c000f2a6:	83 ec 04             	sub    esp,0x4
c000f2a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2ad:	88 04 24             	mov    BYTE PTR [esp],al
c000f2b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b4:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2be:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2c9:	83 e2 f0             	and    edx,0xfffffff0
c000f2cc:	83 ca 0e             	or     edx,0xe
c000f2cf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2d9:	83 e2 ef             	and    edx,0xffffffef
c000f2dc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2df:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2e3:	74 04                	je     c000f2e9 <IDTEntry::IDTEntry(bool)+0x43>
c000f2e5:	b2 03                	mov    dl,0x3
c000f2e7:	eb 02                	jmp    c000f2eb <IDTEntry::IDTEntry(bool)+0x45>
c000f2e9:	b2 00                	mov    dl,0x0
c000f2eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ef:	83 e2 03             	and    edx,0x3
c000f2f2:	88 d1                	mov    cl,dl
c000f2f4:	c1 e1 05             	shl    ecx,0x5
c000f2f7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2fa:	83 e2 9f             	and    edx,0xffffff9f
c000f2fd:	09 ca                	or     edx,ecx
c000f2ff:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f302:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f306:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f309:	83 ca 80             	or     edx,0xffffff80
c000f30c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f30f:	90                   	nop
c000f310:	83 c4 04             	add    esp,0x4
c000f313:	c3                   	ret    

c000f314 <IDTEntry::setOffset(unsigned int)>:
c000f314:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31c:	66 89 02             	mov    WORD PTR [edx],ax
c000f31f:	c1 e8 10             	shr    eax,0x10
c000f322:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f326:	c3                   	ret    
c000f327:	90                   	nop

c000f328 <IDT::IDT()>:
c000f328:	90                   	nop
c000f329:	c3                   	ret    

c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f32e:	83 c0 30             	add    eax,0x30
c000f331:	c3                   	ret    

c000f332 <IDT::addEntry(IDTEntry, int)>:
c000f332:	53                   	push   ebx
c000f333:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f337:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f33b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f33f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f343:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f346:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f34a:	5b                   	pop    ebx
c000f34b:	c3                   	ret    

c000f34c <IDT::addEntry(int, void (*)(), bool)>:
c000f34c:	53                   	push   ebx
c000f34d:	83 ec 10             	sub    esp,0x10
c000f350:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f355:	50                   	push   eax
c000f356:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f35a:	53                   	push   ebx
c000f35b:	e8 46 ff ff ff       	call   c000f2a6 <IDTEntry::IDTEntry(bool)>
c000f360:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f364:	53                   	push   ebx
c000f365:	e8 aa ff ff ff       	call   c000f314 <IDTEntry::setOffset(unsigned int)>
c000f36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f36e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f372:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f376:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f37a:	e8 b3 ff ff ff       	call   c000f332 <IDT::addEntry(IDTEntry, int)>
c000f37f:	83 c4 30             	add    esp,0x30
c000f382:	5b                   	pop    ebx
c000f383:	c3                   	ret    

c000f384 <IDT::flush()>:
c000f384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f388:	66 c7 05 78 ef 02 c0 ff 07 	mov    WORD PTR ds:0xc002ef78,0x7ff
c000f391:	a3 7a ef 02 c0       	mov    ds:0xc002ef7a,eax
c000f396:	0f 01 1d 78 ef 02 c0 	lidtd  ds:0xc002ef78
c000f39d:	c3                   	ret    

c000f39e <IDT::setup()>:
c000f39e:	57                   	push   edi
c000f39f:	56                   	push   esi
c000f3a0:	53                   	push   ebx
c000f3a1:	83 ec 10             	sub    esp,0x10
c000f3a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3a8:	6a 00                	push   0x0
c000f3aa:	68 70 04 00 c0       	push   0xc0000470
c000f3af:	6a 00                	push   0x0
c000f3b1:	53                   	push   ebx
c000f3b2:	e8 95 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3b7:	6a 00                	push   0x0
c000f3b9:	68 80 04 00 c0       	push   0xc0000480
c000f3be:	6a 01                	push   0x1
c000f3c0:	53                   	push   ebx
c000f3c1:	e8 86 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3c6:	83 c4 20             	add    esp,0x20
c000f3c9:	6a 00                	push   0x0
c000f3cb:	68 8a 04 00 c0       	push   0xc000048a
c000f3d0:	6a 02                	push   0x2
c000f3d2:	53                   	push   ebx
c000f3d3:	e8 74 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3d8:	6a 00                	push   0x0
c000f3da:	68 94 04 00 c0       	push   0xc0000494
c000f3df:	6a 03                	push   0x3
c000f3e1:	53                   	push   ebx
c000f3e2:	e8 65 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3e7:	83 c4 20             	add    esp,0x20
c000f3ea:	6a 00                	push   0x0
c000f3ec:	68 9e 04 00 c0       	push   0xc000049e
c000f3f1:	6a 04                	push   0x4
c000f3f3:	53                   	push   ebx
c000f3f4:	e8 53 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3f9:	6a 00                	push   0x0
c000f3fb:	68 a8 04 00 c0       	push   0xc00004a8
c000f400:	6a 05                	push   0x5
c000f402:	53                   	push   ebx
c000f403:	e8 44 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f408:	83 c4 20             	add    esp,0x20
c000f40b:	6a 00                	push   0x0
c000f40d:	68 b2 04 00 c0       	push   0xc00004b2
c000f412:	6a 06                	push   0x6
c000f414:	53                   	push   ebx
c000f415:	e8 32 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f41a:	6a 00                	push   0x0
c000f41c:	68 bc 04 00 c0       	push   0xc00004bc
c000f421:	6a 07                	push   0x7
c000f423:	53                   	push   ebx
c000f424:	e8 23 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f429:	83 c4 20             	add    esp,0x20
c000f42c:	6a 00                	push   0x0
c000f42e:	68 c6 04 00 c0       	push   0xc00004c6
c000f433:	6a 08                	push   0x8
c000f435:	53                   	push   ebx
c000f436:	e8 11 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f43b:	6a 00                	push   0x0
c000f43d:	68 ce 04 00 c0       	push   0xc00004ce
c000f442:	6a 09                	push   0x9
c000f444:	53                   	push   ebx
c000f445:	e8 02 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f44a:	83 c4 20             	add    esp,0x20
c000f44d:	6a 00                	push   0x0
c000f44f:	68 d8 04 00 c0       	push   0xc00004d8
c000f454:	6a 0a                	push   0xa
c000f456:	53                   	push   ebx
c000f457:	e8 f0 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f45c:	6a 00                	push   0x0
c000f45e:	68 e0 04 00 c0       	push   0xc00004e0
c000f463:	6a 0b                	push   0xb
c000f465:	53                   	push   ebx
c000f466:	e8 e1 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f46b:	83 c4 20             	add    esp,0x20
c000f46e:	6a 00                	push   0x0
c000f470:	68 e8 04 00 c0       	push   0xc00004e8
c000f475:	6a 0c                	push   0xc
c000f477:	53                   	push   ebx
c000f478:	e8 cf fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f47d:	6a 00                	push   0x0
c000f47f:	68 f0 04 00 c0       	push   0xc00004f0
c000f484:	6a 0d                	push   0xd
c000f486:	53                   	push   ebx
c000f487:	e8 c0 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f48c:	83 c4 20             	add    esp,0x20
c000f48f:	6a 00                	push   0x0
c000f491:	68 f8 04 00 c0       	push   0xc00004f8
c000f496:	6a 0e                	push   0xe
c000f498:	53                   	push   ebx
c000f499:	e8 ae fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f49e:	6a 00                	push   0x0
c000f4a0:	68 00 05 00 c0       	push   0xc0000500
c000f4a5:	6a 0f                	push   0xf
c000f4a7:	53                   	push   ebx
c000f4a8:	e8 9f fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ad:	83 c4 20             	add    esp,0x20
c000f4b0:	6a 00                	push   0x0
c000f4b2:	68 0a 05 00 c0       	push   0xc000050a
c000f4b7:	6a 10                	push   0x10
c000f4b9:	53                   	push   ebx
c000f4ba:	e8 8d fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4bf:	6a 00                	push   0x0
c000f4c1:	68 14 05 00 c0       	push   0xc0000514
c000f4c6:	6a 11                	push   0x11
c000f4c8:	53                   	push   ebx
c000f4c9:	e8 7e fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ce:	83 c4 20             	add    esp,0x20
c000f4d1:	6a 00                	push   0x0
c000f4d3:	68 1e 05 00 c0       	push   0xc000051e
c000f4d8:	6a 12                	push   0x12
c000f4da:	53                   	push   ebx
c000f4db:	e8 6c fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4e0:	6a 01                	push   0x1
c000f4e2:	68 b8 05 00 c0       	push   0xc00005b8
c000f4e7:	6a 60                	push   0x60
c000f4e9:	53                   	push   ebx
c000f4ea:	e8 5d fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	6a 00                	push   0x0
c000f4f4:	68 bf 05 00 c0       	push   0xc00005bf
c000f4f9:	6a 20                	push   0x20
c000f4fb:	53                   	push   ebx
c000f4fc:	e8 4b fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f501:	6a 00                	push   0x0
c000f503:	68 aa 05 00 c0       	push   0xc00005aa
c000f508:	6a 21                	push   0x21
c000f50a:	53                   	push   ebx
c000f50b:	e8 3c fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f510:	83 c4 20             	add    esp,0x20
c000f513:	6a 00                	push   0x0
c000f515:	68 b1 05 00 c0       	push   0xc00005b1
c000f51a:	6a 22                	push   0x22
c000f51c:	53                   	push   ebx
c000f51d:	e8 2a fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f522:	6a 00                	push   0x0
c000f524:	68 28 05 00 c0       	push   0xc0000528
c000f529:	6a 23                	push   0x23
c000f52b:	53                   	push   ebx
c000f52c:	e8 1b fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f531:	83 c4 20             	add    esp,0x20
c000f534:	6a 00                	push   0x0
c000f536:	68 32 05 00 c0       	push   0xc0000532
c000f53b:	6a 24                	push   0x24
c000f53d:	53                   	push   ebx
c000f53e:	e8 09 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f543:	6a 00                	push   0x0
c000f545:	68 3c 05 00 c0       	push   0xc000053c
c000f54a:	6a 25                	push   0x25
c000f54c:	53                   	push   ebx
c000f54d:	e8 fa fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f552:	83 c4 20             	add    esp,0x20
c000f555:	6a 00                	push   0x0
c000f557:	68 46 05 00 c0       	push   0xc0000546
c000f55c:	6a 26                	push   0x26
c000f55e:	53                   	push   ebx
c000f55f:	e8 e8 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f564:	6a 00                	push   0x0
c000f566:	68 50 05 00 c0       	push   0xc0000550
c000f56b:	6a 27                	push   0x27
c000f56d:	53                   	push   ebx
c000f56e:	e8 d9 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f573:	83 c4 20             	add    esp,0x20
c000f576:	6a 00                	push   0x0
c000f578:	68 5a 05 00 c0       	push   0xc000055a
c000f57d:	6a 28                	push   0x28
c000f57f:	53                   	push   ebx
c000f580:	e8 c7 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f585:	6a 00                	push   0x0
c000f587:	68 64 05 00 c0       	push   0xc0000564
c000f58c:	6a 29                	push   0x29
c000f58e:	53                   	push   ebx
c000f58f:	e8 b8 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f594:	83 c4 20             	add    esp,0x20
c000f597:	6a 00                	push   0x0
c000f599:	68 6e 05 00 c0       	push   0xc000056e
c000f59e:	6a 2a                	push   0x2a
c000f5a0:	53                   	push   ebx
c000f5a1:	e8 a6 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5a6:	6a 00                	push   0x0
c000f5a8:	68 78 05 00 c0       	push   0xc0000578
c000f5ad:	6a 2b                	push   0x2b
c000f5af:	53                   	push   ebx
c000f5b0:	e8 97 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5b5:	83 c4 20             	add    esp,0x20
c000f5b8:	6a 00                	push   0x0
c000f5ba:	68 82 05 00 c0       	push   0xc0000582
c000f5bf:	6a 2c                	push   0x2c
c000f5c1:	53                   	push   ebx
c000f5c2:	e8 85 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5c7:	6a 00                	push   0x0
c000f5c9:	68 8c 05 00 c0       	push   0xc000058c
c000f5ce:	6a 2d                	push   0x2d
c000f5d0:	53                   	push   ebx
c000f5d1:	e8 76 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5d6:	83 c4 20             	add    esp,0x20
c000f5d9:	6a 00                	push   0x0
c000f5db:	68 96 05 00 c0       	push   0xc0000596
c000f5e0:	6a 2e                	push   0x2e
c000f5e2:	53                   	push   ebx
c000f5e3:	e8 64 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5e8:	6a 00                	push   0x0
c000f5ea:	68 a0 05 00 c0       	push   0xc00005a0
c000f5ef:	6a 2f                	push   0x2f
c000f5f1:	53                   	push   ebx
c000f5f2:	e8 55 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5f7:	83 c4 20             	add    esp,0x20
c000f5fa:	6a 00                	push   0x0
c000f5fc:	68 f6 05 00 c0       	push   0xc00005f6
c000f601:	6a 30                	push   0x30
c000f603:	53                   	push   ebx
c000f604:	e8 43 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f609:	6a 00                	push   0x0
c000f60b:	68 00 06 00 c0       	push   0xc0000600
c000f610:	6a 31                	push   0x31
c000f612:	53                   	push   ebx
c000f613:	e8 34 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f618:	83 c4 20             	add    esp,0x20
c000f61b:	6a 00                	push   0x0
c000f61d:	68 0a 06 00 c0       	push   0xc000060a
c000f622:	6a 32                	push   0x32
c000f624:	53                   	push   ebx
c000f625:	e8 22 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f62a:	6a 00                	push   0x0
c000f62c:	68 14 06 00 c0       	push   0xc0000614
c000f631:	6a 33                	push   0x33
c000f633:	53                   	push   ebx
c000f634:	e8 13 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f639:	83 c4 20             	add    esp,0x20
c000f63c:	6a 00                	push   0x0
c000f63e:	68 1e 06 00 c0       	push   0xc000061e
c000f643:	6a 34                	push   0x34
c000f645:	53                   	push   ebx
c000f646:	e8 01 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f64b:	6a 00                	push   0x0
c000f64d:	68 28 06 00 c0       	push   0xc0000628
c000f652:	6a 35                	push   0x35
c000f654:	53                   	push   ebx
c000f655:	e8 f2 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f65a:	83 c4 20             	add    esp,0x20
c000f65d:	6a 00                	push   0x0
c000f65f:	68 32 06 00 c0       	push   0xc0000632
c000f664:	6a 36                	push   0x36
c000f666:	53                   	push   ebx
c000f667:	e8 e0 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f66c:	6a 00                	push   0x0
c000f66e:	68 3c 06 00 c0       	push   0xc000063c
c000f673:	6a 37                	push   0x37
c000f675:	53                   	push   ebx
c000f676:	e8 d1 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f67b:	83 c4 1c             	add    esp,0x1c
c000f67e:	6a 03                	push   0x3
c000f680:	6a 02                	push   0x2
c000f682:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c000f688:	e8 e9 2c 00 00       	call   c0012376 <VAS::allocatePages(int, int)>
c000f68d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f694:	89 c6                	mov    esi,eax
c000f696:	e8 0d 02 00 00       	call   c000f8a8 <malloc>
c000f69b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6a1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6a4:	89 c7                	mov    edi,eax
c000f6a6:	e8 c3 1c 00 00       	call   c001136e <TSS::TSS()>
c000f6ab:	83 c4 0c             	add    esp,0xc
c000f6ae:	68 c6 04 00 c0       	push   0xc00004c6
c000f6b3:	56                   	push   esi
c000f6b4:	57                   	push   edi
c000f6b5:	e8 f4 1c 00 00       	call   c00113ae <TSS::setup(unsigned long, unsigned long)>
c000f6ba:	89 c6                	mov    esi,eax
c000f6bc:	58                   	pop    eax
c000f6bd:	5a                   	pop    edx
c000f6be:	6a 00                	push   0x0
c000f6c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6c4:	50                   	push   eax
c000f6c5:	e8 dc fb ff ff       	call   c000f2a6 <IDTEntry::IDTEntry(bool)>
c000f6ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6ce:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6d3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6da:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6e4:	80 ce 05             	or     dh,0x5
c000f6e7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6f2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6f8:	e8 87 fc ff ff       	call   c000f384 <IDT::flush()>
c000f6fd:	83 c4 20             	add    esp,0x20
c000f700:	5b                   	pop    ebx
c000f701:	5e                   	pop    esi
c000f702:	5f                   	pop    edi
c000f703:	c3                   	ret    

c000f704 <sbrk>:
c000f704:	55                   	push   ebp
c000f705:	57                   	push   edi
c000f706:	56                   	push   esi
c000f707:	53                   	push   ebx
c000f708:	83 ec 1c             	sub    esp,0x1c
c000f70b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f70f:	85 c0                	test   eax,eax
c000f711:	74 3e                	je     c000f751 <sbrk+0x4d>
c000f713:	78 43                	js     c000f758 <sbrk+0x54>
c000f715:	8b 15 68 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef68
c000f71b:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f721:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f727:	83 e2 01             	and    edx,0x1
c000f72a:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f72e:	8b 0d 94 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de94
c000f734:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f738:	05 ff 0f 00 00       	add    eax,0xfff
c000f73d:	89 c2                	mov    edx,eax
c000f73f:	78 2f                	js     c000f770 <sbrk+0x6c>
c000f741:	c1 fa 0c             	sar    edx,0xc
c000f744:	89 d7                	mov    edi,edx
c000f746:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f74a:	be 00 00 00 00       	mov    esi,0x0
c000f74f:	eb 36                	jmp    c000f787 <sbrk+0x83>
c000f751:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c000f756:	eb 73                	jmp    c000f7cb <sbrk+0xc7>
c000f758:	83 ec 08             	sub    esp,0x8
c000f75b:	50                   	push   eax
c000f75c:	68 08 ac 02 c0       	push   0xc002ac08
c000f761:	e8 dd 36 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f76e:	eb 5b                	jmp    c000f7cb <sbrk+0xc7>
c000f770:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f776:	eb c9                	jmp    c000f741 <sbrk+0x3d>
c000f778:	81 05 94 de 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002de94,0x1000
c000f782:	46                   	inc    esi
c000f783:	39 f7                	cmp    edi,esi
c000f785:	74 33                	je     c000f7ba <sbrk+0xb6>
c000f787:	8b 1d f0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f0
c000f78d:	8b 2d 94 de 02 c0    	mov    ebp,DWORD PTR ds:0xc002de94
c000f793:	e8 7c 07 00 00       	call   c000ff14 <Phys::allocatePage()>
c000f798:	68 01 0c 00 00       	push   0xc01
c000f79d:	55                   	push   ebp
c000f79e:	50                   	push   eax
c000f79f:	53                   	push   ebx
c000f7a0:	e8 cf 2a 00 00       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7ad:	74 c9                	je     c000f778 <sbrk+0x74>
c000f7af:	8b 1d 94 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de94
c000f7b5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7b8:	eb be                	jmp    c000f778 <sbrk+0x74>
c000f7ba:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7bf:	75 12                	jne    c000f7d3 <sbrk+0xcf>
c000f7c1:	0f 20 d8             	mov    eax,cr3
c000f7c4:	0f 22 d8             	mov    cr3,eax
c000f7c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7cb:	83 c4 1c             	add    esp,0x1c
c000f7ce:	5b                   	pop    ebx
c000f7cf:	5e                   	pop    esi
c000f7d0:	5f                   	pop    edi
c000f7d1:	5d                   	pop    ebp
c000f7d2:	c3                   	ret    
c000f7d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7d7:	89 cb                	mov    ebx,ecx
c000f7d9:	c1 eb 0a             	shr    ebx,0xa
c000f7dc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7e2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7ec:	c1 e0 0c             	shl    eax,0xc
c000f7ef:	01 c8                	add    eax,ecx
c000f7f1:	c1 e8 0a             	shr    eax,0xa
c000f7f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7f9:	2d 00 00 40 00       	sub    eax,0x400000
c000f7fe:	39 c3                	cmp    ebx,eax
c000f800:	77 c5                	ja     c000f7c7 <sbrk+0xc3>
c000f802:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f805:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f80b:	39 d8                	cmp    eax,ebx
c000f80d:	73 f3                	jae    c000f802 <sbrk+0xfe>
c000f80f:	eb b6                	jmp    c000f7c7 <sbrk+0xc3>

c000f811 <mmap>:
c000f811:	83 ec 18             	sub    esp,0x18
c000f814:	68 38 ac 02 c0       	push   0xc002ac38
c000f819:	e8 ef af 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000f81e:	b8 00 00 00 00       	mov    eax,0x0
c000f823:	83 c4 1c             	add    esp,0x1c
c000f826:	c3                   	ret    

c000f827 <munmap>:
c000f827:	83 ec 18             	sub    esp,0x18
c000f82a:	68 3d ac 02 c0       	push   0xc002ac3d
c000f82f:	e8 d9 af 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000f834:	b8 00 00 00 00       	mov    eax,0x0
c000f839:	83 c4 1c             	add    esp,0x1c
c000f83c:	c3                   	ret    

c000f83d <liballoc_lock()>:
c000f83d:	fa                   	cli    
c000f83e:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c000f844:	b8 00 00 00 00       	mov    eax,0x0
c000f849:	c3                   	ret    

c000f84a <liballoc_unlock()>:
c000f84a:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c000f84f:	48                   	dec    eax
c000f850:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c000f855:	75 01                	jne    c000f858 <liballoc_unlock()+0xe>
c000f857:	fb                   	sti    
c000f858:	b8 00 00 00 00       	mov    eax,0x0
c000f85d:	c3                   	ret    

c000f85e <liballoc_alloc(int)>:
c000f85e:	83 ec 10             	sub    esp,0x10
c000f861:	68 01 08 00 00       	push   0x801
c000f866:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f86a:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c000f870:	e8 01 2b 00 00       	call   c0012376 <VAS::allocatePages(int, int)>
c000f875:	83 c4 1c             	add    esp,0x1c
c000f878:	c3                   	ret    

c000f879 <liballoc_free(void*, int)>:
c000f879:	83 ec 14             	sub    esp,0x14
c000f87c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f880:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c000f886:	e8 95 27 00 00       	call   c0012020 <VAS::freeAllocatedPages(unsigned long)>
c000f88b:	b8 00 00 00 00       	mov    eax,0x0
c000f890:	83 c4 1c             	add    esp,0x1c
c000f893:	c3                   	ret    

c000f894 <realloc>:
c000f894:	83 ec 14             	sub    esp,0x14
c000f897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89f:	e8 a4 1d ff ff       	call   c0001648 <dlrealloc>
c000f8a4:	83 c4 1c             	add    esp,0x1c
c000f8a7:	c3                   	ret    

c000f8a8 <malloc>:
c000f8a8:	83 ec 18             	sub    esp,0x18
c000f8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8af:	e8 57 18 ff ff       	call   c000110b <dlmalloc>
c000f8b4:	83 c4 1c             	add    esp,0x1c
c000f8b7:	c3                   	ret    

c000f8b8 <free>:
c000f8b8:	83 ec 18             	sub    esp,0x18
c000f8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8bf:	e8 ec 14 ff ff       	call   c0000db0 <dlfree>
c000f8c4:	83 c4 1c             	add    esp,0x1c
c000f8c7:	c3                   	ret    

c000f8c8 <rfree>:
c000f8c8:	83 ec 18             	sub    esp,0x18
c000f8cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8cf:	e8 dc 14 ff ff       	call   c0000db0 <dlfree>
c000f8d4:	83 c4 1c             	add    esp,0x1c
c000f8d7:	c3                   	ret    

c000f8d8 <calloc>:
c000f8d8:	56                   	push   esi
c000f8d9:	53                   	push   ebx
c000f8da:	83 ec 10             	sub    esp,0x10
c000f8dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8e1:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8e6:	53                   	push   ebx
c000f8e7:	e8 bc ff ff ff       	call   c000f8a8 <malloc>
c000f8ec:	89 c6                	mov    esi,eax
c000f8ee:	83 c4 0c             	add    esp,0xc
c000f8f1:	53                   	push   ebx
c000f8f2:	6a 00                	push   0x0
c000f8f4:	50                   	push   eax
c000f8f5:	e8 72 0e ff ff       	call   c000076c <memset>
c000f8fa:	89 f0                	mov    eax,esi
c000f8fc:	83 c4 14             	add    esp,0x14
c000f8ff:	5b                   	pop    ebx
c000f900:	5e                   	pop    esi
c000f901:	c3                   	ret    

c000f902 <hwTextMode_loadInData(VgaText*)>:
c000f902:	55                   	push   ebp
c000f903:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c000f908:	57                   	push   edi
c000f909:	56                   	push   esi
c000f90a:	53                   	push   ebx
c000f90b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f90f:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f912:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f915:	85 d2                	test   edx,edx
c000f917:	7e 29                	jle    c000f942 <hwTextMode_loadInData(VgaText*)+0x40>
c000f919:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f91f:	31 f6                	xor    esi,esi
c000f921:	29 cd                	sub    ebp,ecx
c000f923:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f926:	31 c0                	xor    eax,eax
c000f928:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f92c:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f930:	40                   	inc    eax
c000f931:	83 f8 50             	cmp    eax,0x50
c000f934:	75 f2                	jne    c000f928 <hwTextMode_loadInData(VgaText*)+0x26>
c000f936:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f93c:	46                   	inc    esi
c000f93d:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f940:	7f e1                	jg     c000f923 <hwTextMode_loadInData(VgaText*)+0x21>
c000f942:	5b                   	pop    ebx
c000f943:	5e                   	pop    esi
c000f944:	5f                   	pop    edi
c000f945:	5d                   	pop    ebp
c000f946:	c3                   	ret    

c000f947 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f947:	55                   	push   ebp
c000f948:	80 3d 00 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f000,0x0
c000f94f:	57                   	push   edi
c000f950:	56                   	push   esi
c000f951:	53                   	push   ebx
c000f952:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f956:	75 44                	jne    c000f99c <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f958:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f95b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f95e:	8b 15 a0 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dea0
c000f964:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f968:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f96e:	eb 08                	jmp    c000f978 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f970:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f973:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f976:	89 da                	mov    edx,ebx
c000f978:	83 e5 0f             	and    ebp,0xf
c000f97b:	c1 e0 04             	shl    eax,0x4
c000f97e:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f981:	0f b6 c0             	movzx  eax,al
c000f984:	41                   	inc    ecx
c000f985:	09 e8                	or     eax,ebp
c000f987:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f98b:	c1 e0 08             	shl    eax,0x8
c000f98e:	09 e8                	or     eax,ebp
c000f990:	39 fb                	cmp    ebx,edi
c000f992:	66 89 02             	mov    WORD PTR [edx],ax
c000f995:	75 d9                	jne    c000f970 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f997:	5b                   	pop    ebx
c000f998:	5e                   	pop    esi
c000f999:	5f                   	pop    edi
c000f99a:	5d                   	pop    ebp
c000f99b:	c3                   	ret    
c000f99c:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9a3:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9aa:	31 c0                	xor    eax,eax
c000f9ac:	bd 02 00 00 00       	mov    ebp,0x2
c000f9b1:	eb ab                	jmp    c000f95e <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9b3 <hwTextMode_showCursor(VgaText*, bool)>:
c000f9b3:	56                   	push   esi
c000f9b4:	80 3d 00 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f000,0x0
c000f9bb:	53                   	push   ebx
c000f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c0:	75 36                	jne    c000f9f8 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9c2:	84 c0                	test   al,al
c000f9c4:	74 35                	je     c000f9fb <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9c6:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9cb:	b0 0a                	mov    al,0xa
c000f9cd:	89 da                	mov    edx,ebx
c000f9cf:	ee                   	out    dx,al
c000f9d0:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9d5:	89 ca                	mov    edx,ecx
c000f9d7:	ec                   	in     al,dx
c000f9d8:	b2 0f                	mov    dl,0xf
c000f9da:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9de:	83 e0 c0             	and    eax,0xffffffc0
c000f9e1:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9e4:	09 d0                	or     eax,edx
c000f9e6:	89 ca                	mov    edx,ecx
c000f9e8:	ee                   	out    dx,al
c000f9e9:	b0 0b                	mov    al,0xb
c000f9eb:	89 da                	mov    edx,ebx
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 ca                	mov    edx,ecx
c000f9f0:	ec                   	in     al,dx
c000f9f1:	83 e0 e0             	and    eax,0xffffffe0
c000f9f4:	83 c8 0f             	or     eax,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	5b                   	pop    ebx
c000f9f9:	5e                   	pop    esi
c000f9fa:	c3                   	ret    
c000f9fb:	b0 0a                	mov    al,0xa
c000f9fd:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa02:	ee                   	out    dx,al
c000fa03:	b0 20                	mov    al,0x20
c000fa05:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa0a:	ee                   	out    dx,al
c000fa0b:	5b                   	pop    ebx
c000fa0c:	5e                   	pop    esi
c000fa0d:	c3                   	ret    

c000fa0e <hwTextMode_update(VgaText*)>:
c000fa0e:	c3                   	ret    

c000fa0f <hwTextMode_updateCursor(VgaText*)>:
c000fa0f:	56                   	push   esi
c000fa10:	80 3d 00 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f000,0x0
c000fa17:	53                   	push   ebx
c000fa18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa1c:	75 36                	jne    c000fa54 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa1e:	be d4 03 00 00       	mov    esi,0x3d4
c000fa23:	b9 19 00 00 00       	mov    ecx,0x19
c000fa28:	89 f2                	mov    edx,esi
c000fa2a:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa2d:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa30:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa33:	c1 e1 04             	shl    ecx,0x4
c000fa36:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa39:	b0 0f                	mov    al,0xf
c000fa3b:	ee                   	out    dx,al
c000fa3c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa41:	88 c8                	mov    al,cl
c000fa43:	89 da                	mov    edx,ebx
c000fa45:	ee                   	out    dx,al
c000fa46:	b0 0e                	mov    al,0xe
c000fa48:	89 f2                	mov    edx,esi
c000fa4a:	ee                   	out    dx,al
c000fa4b:	89 c8                	mov    eax,ecx
c000fa4d:	89 da                	mov    edx,ebx
c000fa4f:	66 c1 e8 08          	shr    ax,0x8
c000fa53:	ee                   	out    dx,al
c000fa54:	5b                   	pop    ebx
c000fa55:	5e                   	pop    esi
c000fa56:	c3                   	ret    

c000fa57 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa5b:	80 3d 00 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f000,0x0
c000fa62:	75 38                	jne    c000fa9c <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa64:	ba da 03 00 00       	mov    edx,0x3da
c000fa69:	84 c0                	test   al,al
c000fa6b:	75 18                	jne    c000fa85 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa6d:	ec                   	in     al,dx
c000fa6e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa73:	b0 30                	mov    al,0x30
c000fa75:	89 ca                	mov    edx,ecx
c000fa77:	ee                   	out    dx,al
c000fa78:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa7d:	ec                   	in     al,dx
c000fa7e:	83 c8 08             	or     eax,0x8
c000fa81:	89 ca                	mov    edx,ecx
c000fa83:	ee                   	out    dx,al
c000fa84:	c3                   	ret    
c000fa85:	ec                   	in     al,dx
c000fa86:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa8b:	b0 30                	mov    al,0x30
c000fa8d:	89 ca                	mov    edx,ecx
c000fa8f:	ee                   	out    dx,al
c000fa90:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa95:	ec                   	in     al,dx
c000fa96:	83 e0 f7             	and    eax,0xfffffff7
c000fa99:	89 ca                	mov    edx,ecx
c000fa9b:	ee                   	out    dx,al
c000fa9c:	c3                   	ret    

c000fa9d <hwTextMode_scrollScreen(VgaText*)>:
c000fa9d:	55                   	push   ebp
c000fa9e:	57                   	push   edi
c000fa9f:	56                   	push   esi
c000faa0:	53                   	push   ebx
c000faa1:	83 ec 1c             	sub    esp,0x1c
c000faa4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa8:	80 3d 00 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f000,0x0
c000faaf:	74 0e                	je     c000fabf <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fab1:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fab8:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fabf:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c000fac4:	bd 02 00 00 00       	mov    ebp,0x2
c000fac9:	05 a0 00 00 00       	add    eax,0xa0
c000face:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fad2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fad6:	31 c0                	xor    eax,eax
c000fad8:	eb 0b                	jmp    c000fae5 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fada:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fae0:	74 51                	je     c000fb33 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fae2:	43                   	inc    ebx
c000fae3:	89 f0                	mov    eax,esi
c000fae5:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faeb:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000faf1:	88 13                	mov    BYTE PTR [ebx],dl
c000faf3:	8d 70 01             	lea    esi,[eax+0x1]
c000faf6:	83 fd 18             	cmp    ebp,0x18
c000faf9:	75 df                	jne    c000fada <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fafb:	a8 01                	test   al,0x1
c000fafd:	75 13                	jne    c000fb12 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000faff:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb02:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb08:	75 d8                	jne    c000fae2 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb0a:	83 c4 1c             	add    esp,0x1c
c000fb0d:	5b                   	pop    ebx
c000fb0e:	5e                   	pop    esi
c000fb0f:	5f                   	pop    edi
c000fb10:	5d                   	pop    ebp
c000fb11:	c3                   	ret    
c000fb12:	83 ec 08             	sub    esp,0x8
c000fb15:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb19:	50                   	push   eax
c000fb1a:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb1e:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb22:	50                   	push   eax
c000fb23:	e8 fc 0b 00 00       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	88 07                	mov    BYTE PTR [edi],al
c000fb2d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb31:	eb cf                	jmp    c000fb02 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb33:	45                   	inc    ebp
c000fb34:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb3c:	eb 94                	jmp    c000fad2 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb3e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb3e:	57                   	push   edi
c000fb3f:	80 3d 00 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f000,0x0
c000fb46:	56                   	push   esi
c000fb47:	53                   	push   ebx
c000fb48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb4c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb50:	75 62                	jne    c000fbb4 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb52:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb57:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb5c:	83 ec 08             	sub    esp,0x8
c000fb5f:	52                   	push   edx
c000fb60:	50                   	push   eax
c000fb61:	e8 be 0b 00 00       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb66:	5a                   	pop    edx
c000fb67:	0f b6 c0             	movzx  eax,al
c000fb6a:	59                   	pop    ecx
c000fb6b:	50                   	push   eax
c000fb6c:	0f be c3             	movsx  eax,bl
c000fb6f:	50                   	push   eax
c000fb70:	e8 55 0c 00 00       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	8b 35 a0 de 02 c0    	mov    esi,DWORD PTR ds:0xc002dea0
c000fb7e:	80 3d 00 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f000,0x0
c000fb85:	74 07                	je     c000fb8e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb87:	66 0f be c3          	movsx  ax,bl
c000fb8b:	80 cc 02             	or     ah,0x2
c000fb8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb92:	ba 19 00 00 00       	mov    edx,0x19
c000fb97:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb9a:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb9d:	8d 14 92             	lea    edx,[edx+edx*4]
c000fba0:	c1 e1 04             	shl    ecx,0x4
c000fba3:	c1 e2 04             	shl    edx,0x4
c000fba6:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fbaa:	01 ca                	add    edx,ecx
c000fbac:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbb0:	5b                   	pop    ebx
c000fbb1:	5e                   	pop    esi
c000fbb2:	5f                   	pop    edi
c000fbb3:	c3                   	ret    
c000fbb4:	b8 02 00 00 00       	mov    eax,0x2
c000fbb9:	31 d2                	xor    edx,edx
c000fbbb:	eb 9f                	jmp    c000fb5c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fbbd <setupTextMode()>:
c000fbbd:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fbc2:	83 e0 30             	and    eax,0x30
c000fbc5:	66 83 f8 30          	cmp    ax,0x30
c000fbc9:	75 11                	jne    c000fbdc <setupTextMode()+0x1f>
c000fbcb:	81 2d a0 de 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dea0,0x8000
c000fbd5:	c6 05 00 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f000,0x1
c000fbdc:	c7 05 38 f0 02 c0 57 fa 00 c0 	mov    DWORD PTR ds:0xc002f038,0xc000fa57
c000fbe6:	c7 05 24 f0 02 c0 02 f9 00 c0 	mov    DWORD PTR ds:0xc002f024,0xc000f902
c000fbf0:	c7 05 20 f0 02 c0 47 f9 00 c0 	mov    DWORD PTR ds:0xc002f020,0xc000f947
c000fbfa:	c7 05 2c f0 02 c0 9d fa 00 c0 	mov    DWORD PTR ds:0xc002f02c,0xc000fa9d
c000fc04:	c7 05 34 f0 02 c0 b3 f9 00 c0 	mov    DWORD PTR ds:0xc002f034,0xc000f9b3
c000fc0e:	c7 05 28 f0 02 c0 0e fa 00 c0 	mov    DWORD PTR ds:0xc002f028,0xc000fa0e
c000fc18:	c7 05 30 f0 02 c0 0f fa 00 c0 	mov    DWORD PTR ds:0xc002f030,0xc000fa0f
c000fc22:	c7 05 3c f0 02 c0 3e fb 00 c0 	mov    DWORD PTR ds:0xc002f03c,0xc000fb3e
c000fc2c:	c3                   	ret    

c000fc2d <kernel_main>:
c000fc2d:	57                   	push   edi
c000fc2e:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc33:	56                   	push   esi
c000fc34:	89 fa                	mov    edx,edi
c000fc36:	53                   	push   ebx
c000fc37:	31 f6                	xor    esi,esi
c000fc39:	83 ec 2c             	sub    esp,0x2c
c000fc3c:	89 f0                	mov    eax,esi
c000fc3e:	ee                   	out    dx,al
c000fc3f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc44:	b0 80                	mov    al,0x80
c000fc46:	89 da                	mov    edx,ebx
c000fc48:	ee                   	out    dx,al
c000fc49:	b1 03                	mov    cl,0x3
c000fc4b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc50:	88 c8                	mov    al,cl
c000fc52:	ee                   	out    dx,al
c000fc53:	89 f0                	mov    eax,esi
c000fc55:	89 fa                	mov    edx,edi
c000fc57:	ee                   	out    dx,al
c000fc58:	88 c8                	mov    al,cl
c000fc5a:	89 da                	mov    edx,ebx
c000fc5c:	ee                   	out    dx,al
c000fc5d:	b0 c7                	mov    al,0xc7
c000fc5f:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc64:	ee                   	out    dx,al
c000fc65:	b0 0b                	mov    al,0xb
c000fc67:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc6c:	ee                   	out    dx,al
c000fc6d:	68 44 ac 02 c0       	push   0xc002ac44
c000fc72:	e8 cc 31 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000fc77:	e8 3a 09 00 00       	call   c00105b6 <installVgaTextImplementation()>
c000fc7c:	e8 3c ff ff ff       	call   c000fbbd <setupTextMode()>
c000fc81:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc86:	05 ff 0f 00 00       	add    eax,0xfff
c000fc8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc90:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc93:	e8 f5 03 00 00       	call   c001008d <Phys::physicalMemorySetup(unsigned int)>
c000fc98:	e8 5f 1f 00 00       	call   c0011bfc <Virt::virtualMemorySetup()>
c000fc9d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fca3:	83 c4 10             	add    esp,0x10
c000fca6:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcac:	75 0e                	jne    c000fcbc <kernel_main+0x8f>
c000fcae:	89 d8                	mov    eax,ebx
c000fcb0:	25 48 03 00 00       	and    eax,0x348
c000fcb5:	3d 00 03 00 00       	cmp    eax,0x300
c000fcba:	74 10                	je     c000fccc <kernel_main+0x9f>
c000fcbc:	83 ec 0c             	sub    esp,0xc
c000fcbf:	68 d5 c5 02 c0       	push   0xc002c5d5
c000fcc4:	e8 44 ab 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000fcc9:	83 c4 10             	add    esp,0x10
c000fccc:	83 ec 0c             	sub    esp,0xc
c000fccf:	89 1d 80 ef 02 c0    	mov    DWORD PTR ds:0xc002ef80,ebx
c000fcd5:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcd9:	53                   	push   ebx
c000fcda:	e8 69 21 00 00       	call   c0011e48 <VAS::VAS()>
c000fcdf:	89 1d f0 f0 02 c0    	mov    DWORD PTR ds:0xc002f0f0,ebx
c000fce5:	e8 36 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcea:	c7 04 24 5b ac 02 c0 	mov    DWORD PTR [esp],0xc002ac5b
c000fcf1:	e8 4d 31 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000fcf6:	e8 80 1f 00 00       	call   c0011c7b <Virt::swappingSetup()>
c000fcfb:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd02:	e8 a1 fb ff ff       	call   c000f8a8 <malloc>
c000fd07:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd0a:	89 c6                	mov    esi,eax
c000fd0c:	e8 8f ea ff ff       	call   c000e7a0 <Computer::Computer()>
c000fd11:	58                   	pop    eax
c000fd12:	89 35 68 ef 02 c0    	mov    DWORD PTR ds:0xc002ef68,esi
c000fd18:	5a                   	pop    edx
c000fd19:	56                   	push   esi
c000fd1a:	68 78 ac 02 c0       	push   0xc002ac78
c000fd1f:	e8 1f 31 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000fd24:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c000fd29:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd2b:	6a 00                	push   0x0
c000fd2d:	6a 00                	push   0x0
c000fd2f:	6a 00                	push   0x0
c000fd31:	50                   	push   eax
c000fd32:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd35:	83 c4 14             	add    esp,0x14
c000fd38:	53                   	push   ebx
c000fd39:	e8 ba 23 00 00       	call   c00120f8 <VAS::~VAS()>
c000fd3e:	c7 04 24 8b ac 02 c0 	mov    DWORD PTR [esp],0xc002ac8b
c000fd45:	e8 c3 aa 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000fd4a:	83 c4 30             	add    esp,0x30
c000fd4d:	5b                   	pop    ebx
c000fd4e:	5e                   	pop    esi
c000fd4f:	5f                   	pop    edi
c000fd50:	c3                   	ret    

c000fd51 <Phys::allocateDMA(unsigned long)>:
c000fd51:	55                   	push   ebp
c000fd52:	31 d2                	xor    edx,edx
c000fd54:	57                   	push   edi
c000fd55:	31 ed                	xor    ebp,ebp
c000fd57:	56                   	push   esi
c000fd58:	31 c9                	xor    ecx,ecx
c000fd5a:	53                   	push   ebx
c000fd5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd5f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd65:	31 c0                	xor    eax,eax
c000fd67:	c1 ee 0c             	shr    esi,0xc
c000fd6a:	eb 17                	jmp    c000fd83 <Phys::allocateDMA(unsigned long)+0x32>
c000fd6c:	85 c9                	test   ecx,ecx
c000fd6e:	75 04                	jne    c000fd74 <Phys::allocateDMA(unsigned long)+0x23>
c000fd70:	89 d5                	mov    ebp,edx
c000fd72:	89 d0                	mov    eax,edx
c000fd74:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd77:	39 de                	cmp    esi,ebx
c000fd79:	74 20                	je     c000fd9b <Phys::allocateDMA(unsigned long)+0x4a>
c000fd7b:	42                   	inc    edx
c000fd7c:	89 d9                	mov    ecx,ebx
c000fd7e:	83 fa 2f             	cmp    edx,0x2f
c000fd81:	7f 11                	jg     c000fd94 <Phys::allocateDMA(unsigned long)+0x43>
c000fd83:	80 ba c0 ef 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1040],0x0
c000fd8a:	74 e0                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x1b>
c000fd8c:	31 c9                	xor    ecx,ecx
c000fd8e:	42                   	inc    edx
c000fd8f:	83 fa 2f             	cmp    edx,0x2f
c000fd92:	7e ef                	jle    c000fd83 <Phys::allocateDMA(unsigned long)+0x32>
c000fd94:	5b                   	pop    ebx
c000fd95:	31 c0                	xor    eax,eax
c000fd97:	5e                   	pop    esi
c000fd98:	5f                   	pop    edi
c000fd99:	5d                   	pop    ebp
c000fd9a:	c3                   	ret    
c000fd9b:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd9e:	89 d7                	mov    edi,edx
c000fda0:	4f                   	dec    edi
c000fda1:	79 03                	jns    c000fda6 <Phys::allocateDMA(unsigned long)+0x55>
c000fda3:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fda6:	c1 ff 04             	sar    edi,0x4
c000fda9:	89 c2                	mov    edx,eax
c000fdab:	c1 fa 04             	sar    edx,0x4
c000fdae:	39 fa                	cmp    edx,edi
c000fdb0:	75 2f                	jne    c000fde1 <Phys::allocateDMA(unsigned long)+0x90>
c000fdb2:	85 db                	test   ebx,ebx
c000fdb4:	74 1a                	je     c000fdd0 <Phys::allocateDMA(unsigned long)+0x7f>
c000fdb6:	be c0 ef 02 c0       	mov    esi,0xc002efc0
c000fdbb:	8d 90 c0 ef 02 c0    	lea    edx,[eax-0x3ffd1040]
c000fdc1:	f7 d6                	not    esi
c000fdc3:	29 c6                	sub    esi,eax
c000fdc5:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdc8:	42                   	inc    edx
c000fdc9:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdcc:	39 d9                	cmp    ecx,ebx
c000fdce:	7f f5                	jg     c000fdc5 <Phys::allocateDMA(unsigned long)+0x74>
c000fdd0:	85 ff                	test   edi,edi
c000fdd2:	74 13                	je     c000fde7 <Phys::allocateDMA(unsigned long)+0x96>
c000fdd4:	5b                   	pop    ebx
c000fdd5:	05 50 20 0c 00       	add    eax,0xc2050
c000fdda:	5e                   	pop    esi
c000fddb:	c1 e0 0c             	shl    eax,0xc
c000fdde:	5f                   	pop    edi
c000fddf:	5d                   	pop    ebp
c000fde0:	c3                   	ret    
c000fde1:	89 ea                	mov    edx,ebp
c000fde3:	31 c9                	xor    ecx,ecx
c000fde5:	eb a7                	jmp    c000fd8e <Phys::allocateDMA(unsigned long)+0x3d>
c000fde7:	5b                   	pop    ebx
c000fde8:	c1 e0 0c             	shl    eax,0xc
c000fdeb:	5e                   	pop    esi
c000fdec:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdf1:	5f                   	pop    edi
c000fdf2:	5d                   	pop    ebp
c000fdf3:	c3                   	ret    

c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdfc:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe02:	c1 e9 0c             	shr    ecx,0xc
c000fe05:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe0a:	76 25                	jbe    c000fe31 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe0c:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe11:	c1 e8 0c             	shr    eax,0xc
c000fe14:	8d 50 10             	lea    edx,[eax+0x10]
c000fe17:	85 c9                	test   ecx,ecx
c000fe19:	74 15                	je     c000fe30 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe1b:	8d 82 c0 ef 02 c0    	lea    eax,[edx-0x3ffd1040]
c000fe21:	8d 94 11 c0 ef 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1040]
c000fe28:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe2b:	40                   	inc    eax
c000fe2c:	39 d0                	cmp    eax,edx
c000fe2e:	75 f8                	jne    c000fe28 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe30:	c3                   	ret    
c000fe31:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe37:	c1 ea 0c             	shr    edx,0xc
c000fe3a:	eb db                	jmp    c000fe17 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe3c <Phys::setPageState(unsigned long, bool)>:
c000fe3c:	56                   	push   esi
c000fe3d:	ba 01 00 00 00       	mov    edx,0x1
c000fe42:	53                   	push   ebx
c000fe43:	8b 35 98 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de98
c000fe49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe51:	89 c8                	mov    eax,ecx
c000fe53:	83 e1 07             	and    ecx,0x7
c000fe56:	c1 e8 03             	shr    eax,0x3
c000fe59:	d3 e3                	shl    ebx,cl
c000fe5b:	01 c6                	add    esi,eax
c000fe5d:	d3 e2                	shl    edx,cl
c000fe5f:	f7 d2                	not    edx
c000fe61:	20 16                	and    BYTE PTR [esi],dl
c000fe63:	03 05 98 de 02 c0    	add    eax,DWORD PTR ds:0xc002de98
c000fe69:	08 18                	or     BYTE PTR [eax],bl
c000fe6b:	5b                   	pop    ebx
c000fe6c:	5e                   	pop    esi
c000fe6d:	c3                   	ret    

c000fe6e <Phys::getPageState(unsigned long)>:
c000fe6e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe72:	8b 15 98 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de98
c000fe78:	89 c8                	mov    eax,ecx
c000fe7a:	83 e1 07             	and    ecx,0x7
c000fe7d:	c1 e8 03             	shr    eax,0x3
c000fe80:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe84:	d3 f8                	sar    eax,cl
c000fe86:	83 e0 01             	and    eax,0x1
c000fe89:	c3                   	ret    

c000fe8a <Phys::freePage(unsigned long)>:
c000fe8a:	53                   	push   ebx
c000fe8b:	83 ec 08             	sub    esp,0x8
c000fe8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe92:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe98:	76 57                	jbe    c000fef1 <Phys::freePage(unsigned long)+0x67>
c000fe9a:	c1 eb 0c             	shr    ebx,0xc
c000fe9d:	53                   	push   ebx
c000fe9e:	e8 cb ff ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000fea3:	5a                   	pop    edx
c000fea4:	84 c0                	test   al,al
c000fea6:	74 5b                	je     c000ff03 <Phys::freePage(unsigned long)+0x79>
c000fea8:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c000fead:	48                   	dec    eax
c000feae:	a3 b0 ef 02 c0       	mov    ds:0xc002efb0,eax
c000feb3:	8d 04 80             	lea    eax,[eax+eax*4]
c000feb6:	8d 04 80             	lea    eax,[eax+eax*4]
c000feb9:	c1 e0 02             	shl    eax,0x2
c000febc:	99                   	cdq    
c000febd:	f7 3d b4 ef 02 c0    	idiv   DWORD PTR ds:0xc002efb4
c000fec3:	39 05 ac ef 02 c0    	cmp    DWORD PTR ds:0xc002efac,eax
c000fec9:	75 13                	jne    c000fede <Phys::freePage(unsigned long)+0x54>
c000fecb:	83 ec 08             	sub    esp,0x8
c000fece:	6a 00                	push   0x0
c000fed0:	53                   	push   ebx
c000fed1:	e8 66 ff ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	c3                   	ret    
c000fede:	83 ec 0c             	sub    esp,0xc
c000fee1:	a3 ac ef 02 c0       	mov    ds:0xc002efac,eax
c000fee6:	50                   	push   eax
c000fee7:	e8 f8 09 00 00       	call   c00108e4 <VgaText::updateRAMUsageDisplay(int)>
c000feec:	83 c4 10             	add    esp,0x10
c000feef:	eb da                	jmp    c000fecb <Phys::freePage(unsigned long)+0x41>
c000fef1:	68 00 10 00 00       	push   0x1000
c000fef6:	53                   	push   ebx
c000fef7:	e8 f8 fe ff ff       	call   c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)>
c000fefc:	59                   	pop    ecx
c000fefd:	5b                   	pop    ebx
c000fefe:	83 c4 08             	add    esp,0x8
c000ff01:	5b                   	pop    ebx
c000ff02:	c3                   	ret    
c000ff03:	c7 44 24 10 a6 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aca6
c000ff0b:	83 c4 08             	add    esp,0x8
c000ff0e:	5b                   	pop    ebx
c000ff0f:	e9 f9 a8 00 00       	jmp    c001a80d <Krnl::panic(char const*)>

c000ff14 <Phys::allocatePage()>:
c000ff14:	56                   	push   esi
c000ff15:	53                   	push   ebx
c000ff16:	51                   	push   ecx
c000ff17:	8b 35 a4 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efa4
c000ff1d:	89 f3                	mov    ebx,esi
c000ff1f:	eb 0a                	jmp    c000ff2b <Phys::allocatePage()+0x17>
c000ff21:	89 1d a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,ebx
c000ff27:	39 de                	cmp    esi,ebx
c000ff29:	74 24                	je     c000ff4f <Phys::allocatePage()+0x3b>
c000ff2b:	53                   	push   ebx
c000ff2c:	e8 3d ff ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000ff31:	5a                   	pop    edx
c000ff32:	84 c0                	test   al,al
c000ff34:	74 77                	je     c000ffad <Phys::allocatePage()+0x99>
c000ff36:	43                   	inc    ebx
c000ff37:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff3d:	75 e2                	jne    c000ff21 <Phys::allocatePage()+0xd>
c000ff3f:	31 db                	xor    ebx,ebx
c000ff41:	c7 05 a4 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efa4,0x0
c000ff4b:	39 de                	cmp    esi,ebx
c000ff4d:	75 dc                	jne    c000ff2b <Phys::allocatePage()+0x17>
c000ff4f:	83 ec 0c             	sub    esp,0xc
c000ff52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff5a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff60:	e8 0b 2c 00 00       	call   c0012b70 <VAS::scanForEviction()>
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	85 c0                	test   eax,eax
c000ff6a:	75 76                	jne    c000ffe2 <Phys::allocatePage()+0xce>
c000ff6c:	83 ec 0c             	sub    esp,0xc
c000ff6f:	68 bc ac 02 c0       	push   0xc002acbc
c000ff74:	e8 ca 2e 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c000ff79:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff80:	e8 cc fd ff ff       	call   c000fd51 <Phys::allocateDMA(unsigned long)>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	85 c0                	test   eax,eax
c000ff8a:	75 56                	jne    c000ffe2 <Phys::allocatePage()+0xce>
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	68 cd ac 02 c0       	push   0xc002accd
c000ff94:	e8 74 a8 00 00       	call   c001a80d <Krnl::panic(char const*)>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	8b 1d a4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efa4
c000ffa2:	53                   	push   ebx
c000ffa3:	e8 c6 fe ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000ffa8:	5a                   	pop    edx
c000ffa9:	84 c0                	test   al,al
c000ffab:	75 89                	jne    c000ff36 <Phys::allocatePage()+0x22>
c000ffad:	6a 01                	push   0x1
c000ffaf:	53                   	push   ebx
c000ffb0:	e8 87 fe ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c000ffb5:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c000ffba:	59                   	pop    ecx
c000ffbb:	40                   	inc    eax
c000ffbc:	5b                   	pop    ebx
c000ffbd:	a3 b0 ef 02 c0       	mov    ds:0xc002efb0,eax
c000ffc2:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc5:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc8:	c1 e0 02             	shl    eax,0x2
c000ffcb:	99                   	cdq    
c000ffcc:	f7 3d b4 ef 02 c0    	idiv   DWORD PTR ds:0xc002efb4
c000ffd2:	39 05 ac ef 02 c0    	cmp    DWORD PTR ds:0xc002efac,eax
c000ffd8:	75 0c                	jne    c000ffe6 <Phys::allocatePage()+0xd2>
c000ffda:	a1 a4 ef 02 c0       	mov    eax,ds:0xc002efa4
c000ffdf:	c1 e0 0c             	shl    eax,0xc
c000ffe2:	5a                   	pop    edx
c000ffe3:	5b                   	pop    ebx
c000ffe4:	5e                   	pop    esi
c000ffe5:	c3                   	ret    
c000ffe6:	83 ec 0c             	sub    esp,0xc
c000ffe9:	a3 ac ef 02 c0       	mov    ds:0xc002efac,eax
c000ffee:	50                   	push   eax
c000ffef:	e8 f0 08 00 00       	call   c00108e4 <VgaText::updateRAMUsageDisplay(int)>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	eb e1                	jmp    c000ffda <Phys::allocatePage()+0xc6>

c000fff9 <Phys::allocateContiguousPages(int)>:
c000fff9:	57                   	push   edi
c000fffa:	56                   	push   esi
c000fffb:	53                   	push   ebx
c000fffc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010000:	fa                   	cli    
c0010001:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c0010007:	31 db                	xor    ebx,ebx
c0010009:	85 db                	test   ebx,ebx
c001000b:	75 11                	jne    c001001e <Phys::allocateContiguousPages(int)+0x25>
c001000d:	e8 02 ff ff ff       	call   c000ff14 <Phys::allocatePage()>
c0010012:	83 fe 01             	cmp    esi,0x1
c0010015:	89 c7                	mov    edi,eax
c0010017:	74 21                	je     c001003a <Phys::allocateContiguousPages(int)+0x41>
c0010019:	bb 01 00 00 00       	mov    ebx,0x1
c001001e:	e8 f1 fe ff ff       	call   c000ff14 <Phys::allocatePage()>
c0010023:	89 da                	mov    edx,ebx
c0010025:	c1 e2 0c             	shl    edx,0xc
c0010028:	01 fa                	add    edx,edi
c001002a:	39 c2                	cmp    edx,eax
c001002c:	74 20                	je     c001004e <Phys::allocateContiguousPages(int)+0x55>
c001002e:	bb 01 00 00 00       	mov    ebx,0x1
c0010033:	89 c7                	mov    edi,eax
c0010035:	83 fe 01             	cmp    esi,0x1
c0010038:	75 e4                	jne    c001001e <Phys::allocateContiguousPages(int)+0x25>
c001003a:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001003f:	48                   	dec    eax
c0010040:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0010045:	75 01                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x4f>
c0010047:	fb                   	sti    
c0010048:	89 f8                	mov    eax,edi
c001004a:	5b                   	pop    ebx
c001004b:	5e                   	pop    esi
c001004c:	5f                   	pop    edi
c001004d:	c3                   	ret    
c001004e:	43                   	inc    ebx
c001004f:	39 f3                	cmp    ebx,esi
c0010051:	75 b6                	jne    c0010009 <Phys::allocateContiguousPages(int)+0x10>
c0010053:	eb e5                	jmp    c001003a <Phys::allocateContiguousPages(int)+0x41>

c0010055 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010055:	56                   	push   esi
c0010056:	53                   	push   ebx
c0010057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001005b:	39 1d a8 ef 02 c0    	cmp    DWORD PTR ds:0xc002efa8,ebx
c0010061:	73 06                	jae    c0010069 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010063:	89 1d a8 ef 02 c0    	mov    DWORD PTR ds:0xc002efa8,ebx
c0010069:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001006d:	c1 eb 0c             	shr    ebx,0xc
c0010070:	c1 e8 0c             	shr    eax,0xc
c0010073:	39 d8                	cmp    eax,ebx
c0010075:	73 13                	jae    c001008a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010077:	6a 00                	push   0x0
c0010079:	8d 70 01             	lea    esi,[eax+0x1]
c001007c:	50                   	push   eax
c001007d:	e8 ba fd ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c0010082:	5a                   	pop    edx
c0010083:	89 f0                	mov    eax,esi
c0010085:	59                   	pop    ecx
c0010086:	39 f3                	cmp    ebx,esi
c0010088:	75 ed                	jne    c0010077 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001008a:	5b                   	pop    ebx
c001008b:	5e                   	pop    esi
c001008c:	c3                   	ret    

c001008d <Phys::physicalMemorySetup(unsigned int)>:
c001008d:	55                   	push   ebp
c001008e:	57                   	push   edi
c001008f:	56                   	push   esi
c0010090:	53                   	push   ebx
c0010091:	31 db                	xor    ebx,ebx
c0010093:	83 ec 40             	sub    esp,0x40
c0010096:	6a 30                	push   0x30
c0010098:	6a 00                	push   0x0
c001009a:	68 c0 ef 02 c0       	push   0xc002efc0
c001009f:	e8 c8 06 ff ff       	call   c000076c <memset>
c00100a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100ad:	05 00 10 00 00       	add    eax,0x1000
c00100b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100b6:	83 c4 10             	add    esp,0x10
c00100b9:	83 ec 08             	sub    esp,0x8
c00100bc:	6a 01                	push   0x1
c00100be:	53                   	push   ebx
c00100bf:	43                   	inc    ebx
c00100c0:	e8 77 fd ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c00100c5:	83 c4 10             	add    esp,0x10
c00100c8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100ce:	75 e9                	jne    c00100b9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100d0:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100d7:	66 85 c0             	test   ax,ax
c00100da:	0f 84 8e 01 00 00    	je     c001026e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100f9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010101:	eb 15                	jmp    c0010118 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010103:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010107:	83 c3 18             	add    ebx,0x18
c001010a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001010e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010112:	0f 84 66 01 00 00    	je     c001027e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010118:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001011b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001011e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010121:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010125:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010129:	8b 33                	mov    esi,DWORD PTR [ebx]
c001012b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001012e:	01 f0                	add    eax,esi
c0010130:	55                   	push   ebp
c0010131:	11 fa                	adc    edx,edi
c0010133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010137:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001013b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001013f:	56                   	push   esi
c0010140:	68 08 ad 02 c0       	push   0xc002ad08
c0010145:	e8 f9 2c 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001014a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014e:	83 c4 10             	add    esp,0x10
c0010151:	09 f8                	or     eax,edi
c0010153:	0f 85 25 01 00 00    	jne    c001027e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010159:	4d                   	dec    ebp
c001015a:	75 a7                	jne    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001015c:	ba 00 00 08 00       	mov    edx,0x80000
c0010161:	89 c1                	mov    ecx,eax
c0010163:	39 f2                	cmp    edx,esi
c0010165:	19 f9                	sbb    ecx,edi
c0010167:	0f 82 a7 00 00 00    	jb     c0010214 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001016d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010171:	89 c1                	mov    ecx,eax
c0010173:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010177:	0f 83 97 00 00 00    	jae    c0010214 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001017d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010182:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010186:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001018a:	39 fa                	cmp    edx,edi
c001018c:	19 e8                	sbb    eax,ebp
c001018e:	0f 82 14 01 00 00    	jb     c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010194:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010198:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001019c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101a7:	83 d5 ff             	adc    ebp,0xffffffff
c00101aa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101ae:	31 c0                	xor    eax,eax
c00101b0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101b4:	39 fa                	cmp    edx,edi
c00101b6:	89 c1                	mov    ecx,eax
c00101b8:	19 e9                	sbb    ecx,ebp
c00101ba:	0f 83 43 ff ff ff    	jae    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c0:	be 00 00 08 00       	mov    esi,0x80000
c00101c5:	50                   	push   eax
c00101c6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101ca:	57                   	push   edi
c00101cb:	56                   	push   esi
c00101cc:	68 2c ad 02 c0       	push   0xc002ad2c
c00101d1:	e8 6d 2c 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00101d6:	5a                   	pop    edx
c00101d7:	59                   	pop    ecx
c00101d8:	57                   	push   edi
c00101d9:	56                   	push   esi
c00101da:	e8 76 fe ff ff       	call   c0010055 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101e7:	83 c4 0c             	add    esp,0xc
c00101ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101ee:	03 05 b4 ef 02 c0    	add    eax,DWORD PTR ds:0xc002efb4
c00101f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101fb:	a3 b4 ef 02 c0       	mov    ds:0xc002efb4,eax
c0010200:	52                   	push   edx
c0010201:	50                   	push   eax
c0010202:	68 e9 ac 02 c0       	push   0xc002ace9
c0010207:	e8 37 2c 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	e9 ef fe ff ff       	jmp    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010214:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010220:	39 ea                	cmp    edx,ebp
c0010222:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010226:	0f 82 d7 fe ff ff    	jb     c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010231:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010235:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010239:	0f 83 c4 fe ff ff    	jae    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023f:	39 ee                	cmp    esi,ebp
c0010241:	89 f8                	mov    eax,edi
c0010243:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010247:	0f 83 78 ff ff ff    	jae    c00101c5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001024d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010251:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010255:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010259:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001025d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010261:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010265:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010269:	e9 57 ff ff ff       	jmp    c00101c5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	68 db ac 02 c0       	push   0xc002acdb
c0010276:	e8 92 a5 00 00       	call   c001a80d <Krnl::panic(char const*)>
c001027b:	83 c4 10             	add    esp,0x10
c001027e:	bb 40 01 00 00       	mov    ebx,0x140
c0010283:	83 ec 08             	sub    esp,0x8
c0010286:	6a 00                	push   0x0
c0010288:	53                   	push   ebx
c0010289:	43                   	inc    ebx
c001028a:	e8 ad fb ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c001028f:	ff 05 b4 ef 02 c0    	inc    DWORD PTR ds:0xc002efb4
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001029e:	75 e3                	jne    c0010283 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102a0:	83 c4 3c             	add    esp,0x3c
c00102a3:	5b                   	pop    ebx
c00102a4:	5e                   	pop    esi
c00102a5:	5f                   	pop    edi
c00102a6:	5d                   	pop    ebp
c00102a7:	c3                   	ret    
c00102a8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102b8:	e9 d7 fe ff ff       	jmp    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102bd:	90                   	nop

c00102be <Pipe::isAtty()>:
c00102be:	31 c0                	xor    eax,eax
c00102c0:	c3                   	ret    
c00102c1:	90                   	nop

c00102c2 <Pipe::~Pipe()>:
c00102c2:	83 ec 0c             	sub    esp,0xc
c00102c5:	ba 98 ad 02 c0       	mov    edx,0xc002ad98
c00102ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ce:	89 10                	mov    DWORD PTR [eax],edx
c00102d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d4:	83 ec 0c             	sub    esp,0xc
c00102d7:	50                   	push   eax
c00102d8:	e8 ff 14 00 00       	call   c00117dc <UnixFile::~UnixFile()>
c00102dd:	83 c4 10             	add    esp,0x10
c00102e0:	90                   	nop
c00102e1:	83 c4 0c             	add    esp,0xc
c00102e4:	c3                   	ret    
c00102e5:	90                   	nop

c00102e6 <Pipe::~Pipe()>:
c00102e6:	83 ec 0c             	sub    esp,0xc
c00102e9:	83 ec 0c             	sub    esp,0xc
c00102ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f0:	e8 cd ff ff ff       	call   c00102c2 <Pipe::~Pipe()>
c00102f5:	83 c4 10             	add    esp,0x10
c00102f8:	83 ec 08             	sub    esp,0x8
c00102fb:	6a 20                	push   0x20
c00102fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010301:	e8 5d 2a 00 00       	call   c0012d63 <operator delete(void*, unsigned long)>
c0010306:	83 c4 10             	add    esp,0x10
c0010309:	83 c4 0c             	add    esp,0xc
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <Pipe::read(unsigned long long, void*, int*)>:
c001030e:	55                   	push   ebp
c001030f:	57                   	push   edi
c0010310:	56                   	push   esi
c0010311:	53                   	push   ebx
c0010312:	83 ec 1c             	sub    esp,0x1c
c0010315:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010319:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001031d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010321:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010325:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010328:	89 c8                	mov    eax,ecx
c001032a:	99                   	cdq    
c001032b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001032f:	74 24                	je     c0010355 <Pipe::read(unsigned long long, void*, int*)+0x47>
c0010331:	39 f9                	cmp    ecx,edi
c0010333:	89 d1                	mov    ecx,edx
c0010335:	19 f1                	sbb    ecx,esi
c0010337:	73 1c                	jae    c0010355 <Pipe::read(unsigned long long, void*, int*)+0x47>
c0010339:	fa                   	cli    
c001033a:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c0010340:	e8 57 e2 00 00       	call   c001e59c <schedule()>
c0010345:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001034a:	48                   	dec    eax
c001034b:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0010350:	75 d3                	jne    c0010325 <Pipe::read(unsigned long long, void*, int*)+0x17>
c0010352:	fb                   	sti    
c0010353:	eb d0                	jmp    c0010325 <Pipe::read(unsigned long long, void*, int*)+0x17>
c0010355:	39 f8                	cmp    eax,edi
c0010357:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001035b:	89 d7                	mov    edi,edx
c001035d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010361:	19 f7                	sbb    edi,esi
c0010363:	73 08                	jae    c001036d <Pipe::read(unsigned long long, void*, int*)+0x5f>
c0010365:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010369:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001036d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010370:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0010373:	29 f1                	sub    ecx,esi
c0010375:	89 c8                	mov    eax,ecx
c0010377:	99                   	cdq    
c0010378:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001037c:	89 d0                	mov    eax,edx
c001037e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010382:	19 c2                	sbb    edx,eax
c0010384:	73 04                	jae    c001038a <Pipe::read(unsigned long long, void*, int*)+0x7c>
c0010386:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001038a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001038e:	89 d0                	mov    eax,edx
c0010390:	29 c8                	sub    eax,ecx
c0010392:	85 c9                	test   ecx,ecx
c0010394:	74 09                	je     c001039f <Pipe::read(unsigned long long, void*, int*)+0x91>
c0010396:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010399:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001039d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039f:	85 c0                	test   eax,eax
c00103a1:	74 0d                	je     c00103b0 <Pipe::read(unsigned long long, void*, int*)+0xa2>
c00103a3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00103a7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00103aa:	01 cf                	add    edi,ecx
c00103ac:	89 c1                	mov    ecx,eax
c00103ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103b0:	29 53 14             	sub    DWORD PTR [ebx+0x14],edx
c00103b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103b6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103b9:	99                   	cdq    
c00103ba:	89 f7                	mov    edi,esi
c00103bc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103c0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103c4:	c1 ff 1f             	sar    edi,0x1f
c00103c7:	57                   	push   edi
c00103c8:	56                   	push   esi
c00103c9:	52                   	push   edx
c00103ca:	50                   	push   eax
c00103cb:	e8 14 70 01 00       	call   c00273e4 <__umoddi3>
c00103d0:	83 c4 10             	add    esp,0x10
c00103d3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103d6:	85 ed                	test   ebp,ebp
c00103d8:	75 10                	jne    c00103ea <Pipe::read(unsigned long long, void*, int*)+0xdc>
c00103da:	83 ec 0c             	sub    esp,0xc
c00103dd:	68 55 ad 02 c0       	push   0xc002ad55
c00103e2:	e8 26 a4 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00103e7:	83 c4 10             	add    esp,0x10
c00103ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103ee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103f1:	83 c4 1c             	add    esp,0x1c
c00103f4:	31 c0                	xor    eax,eax
c00103f6:	5b                   	pop    ebx
c00103f7:	5e                   	pop    esi
c00103f8:	5f                   	pop    edi
c00103f9:	5d                   	pop    ebp
c00103fa:	c3                   	ret    
c00103fb:	90                   	nop

c00103fc <Pipe::write(unsigned long long, void*, int*)>:
c00103fc:	55                   	push   ebp
c00103fd:	57                   	push   edi
c00103fe:	56                   	push   esi
c00103ff:	53                   	push   ebx
c0010400:	83 ec 1c             	sub    esp,0x1c
c0010403:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010407:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001040b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c001040e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010412:	89 04 24             	mov    DWORD PTR [esp],eax
c0010415:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010419:	89 c8                	mov    eax,ecx
c001041b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001041e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010422:	89 d6                	mov    esi,edx
c0010424:	89 d7                	mov    edi,edx
c0010426:	c1 ff 1f             	sar    edi,0x1f
c0010429:	03 34 24             	add    esi,DWORD PTR [esp]
c001042c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010430:	c1 f8 1f             	sar    eax,0x1f
c0010433:	39 f1                	cmp    ecx,esi
c0010435:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001043d:	19 f8                	sbb    eax,edi
c001043f:	b8 01 00 00 00       	mov    eax,0x1
c0010444:	72 6c                	jb     c00104b2 <Pipe::write(unsigned long long, void*, int*)+0xb6>
c0010446:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010449:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001044c:	01 d0                	add    eax,edx
c001044e:	99                   	cdq    
c001044f:	f7 f9                	idiv   ecx
c0010451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010455:	29 d1                	sub    ecx,edx
c0010457:	89 cf                	mov    edi,ecx
c0010459:	c1 ff 1f             	sar    edi,0x1f
c001045c:	39 cd                	cmp    ebp,ecx
c001045e:	19 f8                	sbb    eax,edi
c0010460:	b8 00 00 00 00       	mov    eax,0x0
c0010465:	72 04                	jb     c001046b <Pipe::write(unsigned long long, void*, int*)+0x6f>
c0010467:	89 e8                	mov    eax,ebp
c0010469:	29 c8                	sub    eax,ecx
c001046b:	89 e9                	mov    ecx,ebp
c001046d:	29 c1                	sub    ecx,eax
c001046f:	74 0b                	je     c001047c <Pipe::write(unsigned long long, void*, int*)+0x80>
c0010471:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0010474:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010478:	01 d7                	add    edi,edx
c001047a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001047c:	85 c0                	test   eax,eax
c001047e:	74 0d                	je     c001048d <Pipe::write(unsigned long long, void*, int*)+0x91>
c0010480:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010484:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0010487:	01 ce                	add    esi,ecx
c0010489:	89 c1                	mov    ecx,eax
c001048b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001048d:	01 6b 14             	add    DWORD PTR [ebx+0x14],ebp
c0010490:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010495:	75 10                	jne    c00104a7 <Pipe::write(unsigned long long, void*, int*)+0xab>
c0010497:	83 ec 0c             	sub    esp,0xc
c001049a:	68 71 ad 02 c0       	push   0xc002ad71
c001049f:	e8 69 a3 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00104a4:	83 c4 10             	add    esp,0x10
c00104a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104ab:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00104ae:	89 18                	mov    DWORD PTR [eax],ebx
c00104b0:	31 c0                	xor    eax,eax
c00104b2:	83 c4 1c             	add    esp,0x1c
c00104b5:	5b                   	pop    ebx
c00104b6:	5e                   	pop    esi
c00104b7:	5f                   	pop    edi
c00104b8:	5d                   	pop    ebp
c00104b9:	c3                   	ret    

c00104ba <Pipe::Pipe(int)>:
c00104ba:	83 ec 0c             	sub    esp,0xc
c00104bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c1:	83 ec 08             	sub    esp,0x8
c00104c4:	6a 00                	push   0x0
c00104c6:	50                   	push   eax
c00104c7:	e8 2e 11 00 00       	call   c00115fa <UnixFile::UnixFile(int)>
c00104cc:	83 c4 10             	add    esp,0x10
c00104cf:	ba 98 ad 02 c0       	mov    edx,0xc002ad98
c00104d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d8:	89 10                	mov    DWORD PTR [eax],edx
c00104da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104e2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104ff:	83 ec 0c             	sub    esp,0xc
c0010502:	50                   	push   eax
c0010503:	e8 a0 f3 ff ff       	call   c000f8a8 <malloc>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	89 c2                	mov    edx,eax
c001050d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010511:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001051c:	90                   	nop
c001051d:	83 c4 0c             	add    esp,0xc
c0010520:	c3                   	ret    
c0010521:	90                   	nop

c0010522 <VgaText::isAtty()>:
c0010522:	b0 01                	mov    al,0x1
c0010524:	c3                   	ret    
c0010525:	90                   	nop

c0010526 <VgaText::~VgaText()>:
c0010526:	83 ec 0c             	sub    esp,0xc
c0010529:	ba 54 ae 02 c0       	mov    edx,0xc002ae54
c001052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010532:	89 10                	mov    DWORD PTR [eax],edx
c0010534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010538:	83 ec 0c             	sub    esp,0xc
c001053b:	50                   	push   eax
c001053c:	e8 9b 12 00 00       	call   c00117dc <UnixFile::~UnixFile()>
c0010541:	83 c4 10             	add    esp,0x10
c0010544:	90                   	nop
c0010545:	83 c4 0c             	add    esp,0xc
c0010548:	c3                   	ret    
c0010549:	90                   	nop

c001054a <VgaText::~VgaText()>:
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	83 ec 0c             	sub    esp,0xc
c0010550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010554:	e8 cd ff ff ff       	call   c0010526 <VgaText::~VgaText()>
c0010559:	83 c4 10             	add    esp,0x10
c001055c:	83 ec 08             	sub    esp,0x8
c001055f:	68 c4 02 00 00       	push   0x2c4
c0010564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010568:	e8 f6 27 00 00       	call   c0012d63 <operator delete(void*, unsigned long)>
c001056d:	83 c4 10             	add    esp,0x10
c0010570:	83 c4 0c             	add    esp,0xc
c0010573:	c3                   	ret    

c0010574 <VgaText::read(unsigned long long, void*, int*)>:
c0010574:	83 ec 10             	sub    esp,0x10
c0010577:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001057b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001057f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010583:	e8 6a 5d 00 00       	call   c00162f2 <readKeyboard(VgaText*, char*, unsigned long)>
c0010588:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001058c:	89 02                	mov    DWORD PTR [edx],eax
c001058e:	31 c0                	xor    eax,eax
c0010590:	83 c4 1c             	add    esp,0x1c
c0010593:	c3                   	ret    

c0010594 <setTerminalScrollLock(bool)>:
c0010594:	c3                   	ret    

c0010595 <addToTerminalCycle(VgaText*)>:
c0010595:	8b 15 40 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f040
c001059b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001059f:	85 d2                	test   edx,edx
c00105a1:	75 09                	jne    c00105ac <addToTerminalCycle(VgaText*)+0x17>
c00105a3:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105a6:	a3 40 f0 02 c0       	mov    ds:0xc002f040,eax
c00105ab:	c3                   	ret    
c00105ac:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105af:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105b2:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105b5:	c3                   	ret    

c00105b6 <installVgaTextImplementation()>:
c00105b6:	83 ec 10             	sub    esp,0x10
c00105b9:	6a 20                	push   0x20
c00105bb:	6a 00                	push   0x0
c00105bd:	68 20 f0 02 c0       	push   0xc002f020
c00105c2:	e8 a5 01 ff ff       	call   c000076c <memset>
c00105c7:	83 c4 1c             	add    esp,0x1c
c00105ca:	c3                   	ret    

c00105cb <scrollTerminalScrollLock(int)>:
c00105cb:	c3                   	ret    

c00105cc <VgaText::load()>:
c00105cc:	53                   	push   ebx
c00105cd:	31 c0                	xor    eax,eax
c00105cf:	83 ec 58             	sub    esp,0x58
c00105d2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105d6:	89 e2                	mov    edx,esp
c00105d8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105dc:	40                   	inc    eax
c00105dd:	83 f8 50             	cmp    eax,0x50
c00105e0:	75 f6                	jne    c00105d8 <VgaText::load()+0xc>
c00105e2:	31 c0                	xor    eax,eax
c00105e4:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00105eb:	84 c9                	test   cl,cl
c00105ed:	74 06                	je     c00105f5 <VgaText::load()+0x29>
c00105ef:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105f2:	40                   	inc    eax
c00105f3:	eb ef                	jmp    c00105e4 <VgaText::load()+0x18>
c00105f5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105f8:	85 c0                	test   eax,eax
c00105fa:	74 09                	je     c0010605 <VgaText::load()+0x39>
c00105fc:	51                   	push   ecx
c00105fd:	51                   	push   ecx
c00105fe:	52                   	push   edx
c00105ff:	53                   	push   ebx
c0010600:	ff d0                	call   eax
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010608:	85 c0                	test   eax,eax
c001060a:	74 09                	je     c0010615 <VgaText::load()+0x49>
c001060c:	83 ec 0c             	sub    esp,0xc
c001060f:	53                   	push   ebx
c0010610:	ff d0                	call   eax
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	83 c4 58             	add    esp,0x58
c0010618:	5b                   	pop    ebx
c0010619:	c3                   	ret    

c001061a <VgaText::updateCursor()>:
c001061a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061e:	39 05 44 f0 02 c0    	cmp    DWORD PTR ds:0xc002f044,eax
c0010624:	75 09                	jne    c001062f <VgaText::updateCursor()+0x15>
c0010626:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010629:	85 c0                	test   eax,eax
c001062b:	74 02                	je     c001062f <VgaText::updateCursor()+0x15>
c001062d:	ff e0                	jmp    eax
c001062f:	c3                   	ret    

c0010630 <VgaText::showCursor(bool)>:
c0010630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010634:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010638:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c001063b:	c3                   	ret    

c001063c <VgaText::disableBlink(bool)>:
c001063c:	56                   	push   esi
c001063d:	53                   	push   ebx
c001063e:	51                   	push   ecx
c001063f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010647:	39 1d 44 f0 02 c0    	cmp    DWORD PTR ds:0xc002f044,ebx
c001064d:	75 15                	jne    c0010664 <VgaText::disableBlink(bool)+0x28>
c001064f:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010652:	85 c0                	test   eax,eax
c0010654:	74 0e                	je     c0010664 <VgaText::disableBlink(bool)+0x28>
c0010656:	89 f1                	mov    ecx,esi
c0010658:	52                   	push   edx
c0010659:	52                   	push   edx
c001065a:	0f b6 d1             	movzx  edx,cl
c001065d:	52                   	push   edx
c001065e:	53                   	push   ebx
c001065f:	ff d0                	call   eax
c0010661:	83 c4 10             	add    esp,0x10
c0010664:	89 f0                	mov    eax,esi
c0010666:	83 f0 01             	xor    eax,0x1
c0010669:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001066c:	58                   	pop    eax
c001066d:	5b                   	pop    ebx
c001066e:	5e                   	pop    esi
c001066f:	c3                   	ret    

c0010670 <VgaText::doANSI_SGR(int)>:
c0010670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010678:	85 d2                	test   edx,edx
c001067a:	75 0b                	jne    c0010687 <VgaText::doANSI_SGR(int)+0x17>
c001067c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001067f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010682:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010685:	eb 59                	jmp    c00106e0 <VgaText::doANSI_SGR(int)+0x70>
c0010687:	83 fa 07             	cmp    edx,0x7
c001068a:	75 0b                	jne    c0010697 <VgaText::doANSI_SGR(int)+0x27>
c001068c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001068f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010692:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010695:	eb 49                	jmp    c00106e0 <VgaText::doANSI_SGR(int)+0x70>
c0010697:	83 fa 1b             	cmp    edx,0x1b
c001069a:	74 e0                	je     c001067c <VgaText::doANSI_SGR(int)+0xc>
c001069c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001069f:	83 f9 07             	cmp    ecx,0x7
c00106a2:	77 09                	ja     c00106ad <VgaText::doANSI_SGR(int)+0x3d>
c00106a4:	8b 14 8d c0 de 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2140]
c00106ab:	eb 20                	jmp    c00106cd <VgaText::doANSI_SGR(int)+0x5d>
c00106ad:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106b0:	83 f9 07             	cmp    ecx,0x7
c00106b3:	77 09                	ja     c00106be <VgaText::doANSI_SGR(int)+0x4e>
c00106b5:	8b 14 8d c0 de 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2140]
c00106bc:	eb 22                	jmp    c00106e0 <VgaText::doANSI_SGR(int)+0x70>
c00106be:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106c1:	83 f9 07             	cmp    ecx,0x7
c00106c4:	77 0b                	ja     c00106d1 <VgaText::doANSI_SGR(int)+0x61>
c00106c6:	8b 14 95 78 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2288]
c00106cd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106d0:	c3                   	ret    
c00106d1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106d4:	83 f9 07             	cmp    ecx,0x7
c00106d7:	77 0a                	ja     c00106e3 <VgaText::doANSI_SGR(int)+0x73>
c00106d9:	8b 14 95 50 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd22b0]
c00106e0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106e3:	c3                   	ret    

c00106e4 <VgaText::setDefaultBgColour(VgaColour)>:
c00106e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00106ef:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106f2:	c3                   	ret    
c00106f3:	90                   	nop

c00106f4 <VgaText::setDefaultFgColour(VgaColour)>:
c00106f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106ff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010704:	53                   	push   ebx
c0010705:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010709:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001070d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010711:	51                   	push   ecx
c0010712:	e8 cd ff ff ff       	call   c00106e4 <VgaText::setDefaultBgColour(VgaColour)>
c0010717:	58                   	pop    eax
c0010718:	5a                   	pop    edx
c0010719:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001071d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010721:	5b                   	pop    ebx
c0010722:	eb d0                	jmp    c00106f4 <VgaText::setDefaultFgColour(VgaColour)>

c0010724 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010724:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010728:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001072d:	83 e0 0f             	and    eax,0xf
c0010730:	c1 e2 04             	shl    edx,0x4
c0010733:	09 d0                	or     eax,edx
c0010735:	c3                   	ret    

c0010736 <VgaText::scrollScreen()>:
c0010736:	55                   	push   ebp
c0010737:	b9 01 00 00 00       	mov    ecx,0x1
c001073c:	57                   	push   edi
c001073d:	56                   	push   esi
c001073e:	53                   	push   ebx
c001073f:	83 ec 0c             	sub    esp,0xc
c0010742:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010746:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001074c:	31 ff                	xor    edi,edi
c001074e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010751:	83 f9 17             	cmp    ecx,0x17
c0010754:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010757:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001075e:	75 27                	jne    c0010787 <VgaText::scrollScreen()+0x51>
c0010760:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010763:	01 f5                	add    ebp,esi
c0010765:	f7 c7 01 00 00 00    	test   edi,0x1
c001076b:	74 16                	je     c0010783 <VgaText::scrollScreen()+0x4d>
c001076d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010771:	50                   	push   eax
c0010772:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010776:	50                   	push   eax
c0010777:	e8 a8 ff ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c001077c:	5a                   	pop    edx
c001077d:	5a                   	pop    edx
c001077e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010781:	eb 04                	jmp    c0010787 <VgaText::scrollScreen()+0x51>
c0010783:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010787:	47                   	inc    edi
c0010788:	46                   	inc    esi
c0010789:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001078f:	75 bd                	jne    c001074e <VgaText::scrollScreen()+0x18>
c0010791:	41                   	inc    ecx
c0010792:	83 f9 18             	cmp    ecx,0x18
c0010795:	75 af                	jne    c0010746 <VgaText::scrollScreen()+0x10>
c0010797:	39 1d 44 f0 02 c0    	cmp    DWORD PTR ds:0xc002f044,ebx
c001079d:	75 1b                	jne    c00107ba <VgaText::scrollScreen()+0x84>
c001079f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107a3:	74 05                	je     c00107aa <VgaText::scrollScreen()+0x74>
c00107a5:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107a8:	eb 10                	jmp    c00107ba <VgaText::scrollScreen()+0x84>
c00107aa:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107ad:	85 c0                	test   eax,eax
c00107af:	74 09                	je     c00107ba <VgaText::scrollScreen()+0x84>
c00107b1:	83 ec 0c             	sub    esp,0xc
c00107b4:	53                   	push   ebx
c00107b5:	ff d0                	call   eax
c00107b7:	83 c4 10             	add    esp,0x10
c00107ba:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107be:	83 c4 0c             	add    esp,0xc
c00107c1:	5b                   	pop    ebx
c00107c2:	5e                   	pop    esi
c00107c3:	5f                   	pop    edi
c00107c4:	5d                   	pop    ebp
c00107c5:	e9 50 fe ff ff       	jmp    c001061a <VgaText::updateCursor()>

c00107ca <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107cf:	c1 e0 08             	shl    eax,0x8
c00107d2:	89 c2                	mov    edx,eax
c00107d4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d9:	09 d0                	or     eax,edx
c00107db:	c3                   	ret    

c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107dc:	56                   	push   esi
c00107dd:	53                   	push   ebx
c00107de:	51                   	push   ecx
c00107df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e8:	50                   	push   eax
c00107e9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ee:	50                   	push   eax
c00107ef:	e8 30 ff ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f4:	5b                   	pop    ebx
c00107f5:	0f b6 c0             	movzx  eax,al
c00107f8:	5e                   	pop    esi
c00107f9:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107fe:	50                   	push   eax
c00107ff:	53                   	push   ebx
c0010800:	e8 c5 ff ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010805:	5a                   	pop    edx
c0010806:	5e                   	pop    esi
c0010807:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001080a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010810:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010814:	0f b7 d2             	movzx  edx,dx
c0010817:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001081b:	39 0d 44 f0 02 c0    	cmp    DWORD PTR ds:0xc002f044,ecx
c0010821:	75 10                	jne    c0010833 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010823:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010826:	85 c0                	test   eax,eax
c0010828:	74 09                	je     c0010833 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001082a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001082e:	5a                   	pop    edx
c001082f:	5b                   	pop    ebx
c0010830:	5e                   	pop    esi
c0010831:	ff e0                	jmp    eax
c0010833:	58                   	pop    eax
c0010834:	5b                   	pop    ebx
c0010835:	5e                   	pop    esi
c0010836:	c3                   	ret    
c0010837:	90                   	nop

c0010838 <VgaText::getCursorX()>:
c0010838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001083f:	c3                   	ret    

c0010840 <VgaText::getCursorY()>:
c0010840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010844:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010847:	c3                   	ret    

c0010848 <VgaText::setCursor(int, int)>:
c0010848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010850:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010853:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010857:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001085a:	e9 bb fd ff ff       	jmp    c001061a <VgaText::updateCursor()>
c001085f:	90                   	nop

c0010860 <VgaText::setCursorX(int)>:
c0010860:	83 ec 10             	sub    esp,0x10
c0010863:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010867:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001086a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001086e:	50                   	push   eax
c001086f:	e8 d4 ff ff ff       	call   c0010848 <VgaText::setCursor(int, int)>
c0010874:	83 c4 1c             	add    esp,0x1c
c0010877:	c3                   	ret    

c0010878 <VgaText::setCursorY(int)>:
c0010878:	83 ec 10             	sub    esp,0x10
c001087b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001087f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010883:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010886:	50                   	push   eax
c0010887:	e8 bc ff ff ff       	call   c0010848 <VgaText::setCursor(int, int)>
c001088c:	83 c4 1c             	add    esp,0x1c
c001088f:	c3                   	ret    

c0010890 <VgaText::incrementCursor(bool)>:
c0010890:	56                   	push   esi
c0010891:	53                   	push   ebx
c0010892:	51                   	push   ecx
c0010893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010897:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001089b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001089e:	40                   	inc    eax
c001089f:	83 f8 50             	cmp    eax,0x50
c00108a2:	74 05                	je     c00108a9 <VgaText::incrementCursor(bool)+0x19>
c00108a4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108a7:	eb 24                	jmp    c00108cd <VgaText::incrementCursor(bool)+0x3d>
c00108a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108b3:	8d 50 01             	lea    edx,[eax+0x1]
c00108b6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108b9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108bc:	75 0f                	jne    c00108cd <VgaText::incrementCursor(bool)+0x3d>
c00108be:	83 ec 0c             	sub    esp,0xc
c00108c1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108c4:	53                   	push   ebx
c00108c5:	e8 6c fe ff ff       	call   c0010736 <VgaText::scrollScreen()>
c00108ca:	83 c4 10             	add    esp,0x10
c00108cd:	89 f0                	mov    eax,esi
c00108cf:	84 c0                	test   al,al
c00108d1:	74 0c                	je     c00108df <VgaText::incrementCursor(bool)+0x4f>
c00108d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108d7:	5a                   	pop    edx
c00108d8:	5b                   	pop    ebx
c00108d9:	5e                   	pop    esi
c00108da:	e9 3b fd ff ff       	jmp    c001061a <VgaText::updateCursor()>
c00108df:	58                   	pop    eax
c00108e0:	5b                   	pop    ebx
c00108e1:	5e                   	pop    esi
c00108e2:	c3                   	ret    
c00108e3:	90                   	nop

c00108e4 <VgaText::updateRAMUsageDisplay(int)>:
c00108e4:	56                   	push   esi
c00108e5:	8b 35 a0 de 02 c0    	mov    esi,DWORD PTR ds:0xc002dea0
c00108eb:	53                   	push   ebx
c00108ec:	bb 0a 00 00 00       	mov    ebx,0xa
c00108f1:	6a 0f                	push   0xf
c00108f3:	6a 00                	push   0x0
c00108f5:	e8 2a fe ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c00108fa:	5a                   	pop    edx
c00108fb:	59                   	pop    ecx
c00108fc:	0f b6 c8             	movzx  ecx,al
c00108ff:	51                   	push   ecx
c0010900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010904:	99                   	cdq    
c0010905:	f7 fb                	idiv   ebx
c0010907:	89 d3                	mov    ebx,edx
c0010909:	83 c0 30             	add    eax,0x30
c001090c:	83 c3 30             	add    ebx,0x30
c001090f:	0f be c0             	movsx  eax,al
c0010912:	0f b6 db             	movzx  ebx,bl
c0010915:	50                   	push   eax
c0010916:	e8 af fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c001091b:	5a                   	pop    edx
c001091c:	5a                   	pop    edx
c001091d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010924:	51                   	push   ecx
c0010925:	53                   	push   ebx
c0010926:	e8 9f fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c001092b:	5b                   	pop    ebx
c001092c:	5a                   	pop    edx
c001092d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010934:	51                   	push   ecx
c0010935:	6a 25                	push   0x25
c0010937:	e8 8e fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c001093c:	59                   	pop    ecx
c001093d:	5b                   	pop    ebx
c001093e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010945:	5b                   	pop    ebx
c0010946:	5e                   	pop    esi
c0010947:	c3                   	ret    

c0010948 <VgaText::updateDiskUsage()>:
c0010948:	55                   	push   ebp
c0010949:	bd 10 27 00 00       	mov    ebp,0x2710
c001094e:	57                   	push   edi
c001094f:	8b 3d a0 de 02 c0    	mov    edi,DWORD PTR ds:0xc002dea0
c0010955:	56                   	push   esi
c0010956:	53                   	push   ebx
c0010957:	6a 0f                	push   0xf
c0010959:	6a 00                	push   0x0
c001095b:	e8 c4 fd ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c0010960:	5a                   	pop    edx
c0010961:	0f b6 d8             	movzx  ebx,al
c0010964:	59                   	pop    ecx
c0010965:	8b 35 c8 32 03 c0    	mov    esi,DWORD PTR ds:0xc00332c8
c001096b:	53                   	push   ebx
c001096c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010971:	89 f0                	mov    eax,esi
c0010973:	99                   	cdq    
c0010974:	f7 fd                	idiv   ebp
c0010976:	99                   	cdq    
c0010977:	f7 f9                	idiv   ecx
c0010979:	8d 42 30             	lea    eax,[edx+0x30]
c001097c:	0f b6 c0             	movzx  eax,al
c001097f:	50                   	push   eax
c0010980:	e8 45 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010985:	5d                   	pop    ebp
c0010986:	bd e8 03 00 00       	mov    ebp,0x3e8
c001098b:	5a                   	pop    edx
c001098c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010990:	53                   	push   ebx
c0010991:	89 f0                	mov    eax,esi
c0010993:	99                   	cdq    
c0010994:	f7 fd                	idiv   ebp
c0010996:	99                   	cdq    
c0010997:	f7 f9                	idiv   ecx
c0010999:	8d 42 30             	lea    eax,[edx+0x30]
c001099c:	0f b6 c0             	movzx  eax,al
c001099f:	50                   	push   eax
c00109a0:	e8 25 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109a5:	5d                   	pop    ebp
c00109a6:	bd 64 00 00 00       	mov    ebp,0x64
c00109ab:	5a                   	pop    edx
c00109ac:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109b3:	53                   	push   ebx
c00109b4:	89 f0                	mov    eax,esi
c00109b6:	99                   	cdq    
c00109b7:	f7 fd                	idiv   ebp
c00109b9:	99                   	cdq    
c00109ba:	f7 f9                	idiv   ecx
c00109bc:	8d 42 30             	lea    eax,[edx+0x30]
c00109bf:	0f b6 c0             	movzx  eax,al
c00109c2:	50                   	push   eax
c00109c3:	e8 02 fe ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109c8:	5d                   	pop    ebp
c00109c9:	5a                   	pop    edx
c00109ca:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109d1:	53                   	push   ebx
c00109d2:	89 f0                	mov    eax,esi
c00109d4:	99                   	cdq    
c00109d5:	f7 f9                	idiv   ecx
c00109d7:	89 d6                	mov    esi,edx
c00109d9:	99                   	cdq    
c00109da:	f7 f9                	idiv   ecx
c00109dc:	8d 42 30             	lea    eax,[edx+0x30]
c00109df:	0f b6 c0             	movzx  eax,al
c00109e2:	50                   	push   eax
c00109e3:	e8 e2 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109e8:	5d                   	pop    ebp
c00109e9:	5a                   	pop    edx
c00109ea:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109f1:	53                   	push   ebx
c00109f2:	8d 46 30             	lea    eax,[esi+0x30]
c00109f5:	0f b6 f0             	movzx  esi,al
c00109f8:	56                   	push   esi
c00109f9:	e8 cc fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c00109fe:	5e                   	pop    esi
c00109ff:	8b 35 c4 32 03 c0    	mov    esi,DWORD PTR ds:0xc00332c4
c0010a05:	5d                   	pop    ebp
c0010a06:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a0d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a12:	53                   	push   ebx
c0010a13:	89 f0                	mov    eax,esi
c0010a15:	99                   	cdq    
c0010a16:	f7 fd                	idiv   ebp
c0010a18:	99                   	cdq    
c0010a19:	f7 f9                	idiv   ecx
c0010a1b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a1e:	0f b6 c0             	movzx  eax,al
c0010a21:	50                   	push   eax
c0010a22:	e8 a3 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a27:	5a                   	pop    edx
c0010a28:	5d                   	pop    ebp
c0010a29:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a30:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a35:	53                   	push   ebx
c0010a36:	89 f0                	mov    eax,esi
c0010a38:	99                   	cdq    
c0010a39:	f7 fd                	idiv   ebp
c0010a3b:	99                   	cdq    
c0010a3c:	f7 f9                	idiv   ecx
c0010a3e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a41:	0f b6 c0             	movzx  eax,al
c0010a44:	50                   	push   eax
c0010a45:	e8 80 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4a:	5a                   	pop    edx
c0010a4b:	5d                   	pop    ebp
c0010a4c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a53:	bd 64 00 00 00       	mov    ebp,0x64
c0010a58:	53                   	push   ebx
c0010a59:	89 f0                	mov    eax,esi
c0010a5b:	99                   	cdq    
c0010a5c:	f7 fd                	idiv   ebp
c0010a5e:	99                   	cdq    
c0010a5f:	f7 f9                	idiv   ecx
c0010a61:	83 c2 30             	add    edx,0x30
c0010a64:	0f b6 d2             	movzx  edx,dl
c0010a67:	52                   	push   edx
c0010a68:	e8 5d fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6d:	5a                   	pop    edx
c0010a6e:	5d                   	pop    ebp
c0010a6f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a76:	53                   	push   ebx
c0010a77:	89 f0                	mov    eax,esi
c0010a79:	99                   	cdq    
c0010a7a:	f7 f9                	idiv   ecx
c0010a7c:	89 d6                	mov    esi,edx
c0010a7e:	99                   	cdq    
c0010a7f:	f7 f9                	idiv   ecx
c0010a81:	8d 42 30             	lea    eax,[edx+0x30]
c0010a84:	0f b6 c0             	movzx  eax,al
c0010a87:	50                   	push   eax
c0010a88:	e8 3d fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8d:	5a                   	pop    edx
c0010a8e:	59                   	pop    ecx
c0010a8f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a96:	53                   	push   ebx
c0010a97:	8d 46 30             	lea    eax,[esi+0x30]
c0010a9a:	0f b6 f0             	movzx  esi,al
c0010a9d:	56                   	push   esi
c0010a9e:	e8 27 fd ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa3:	5b                   	pop    ebx
c0010aa4:	5e                   	pop    esi
c0010aa5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010aac:	5b                   	pop    ebx
c0010aad:	5e                   	pop    esi
c0010aae:	5f                   	pop    edi
c0010aaf:	5d                   	pop    ebp
c0010ab0:	c3                   	ret    
c0010ab1:	90                   	nop

c0010ab2 <VgaText::updateTitle()>:
c0010ab2:	53                   	push   ebx
c0010ab3:	31 c0                	xor    eax,eax
c0010ab5:	83 ec 58             	sub    esp,0x58
c0010ab8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010abc:	89 e1                	mov    ecx,esp
c0010abe:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ac2:	40                   	inc    eax
c0010ac3:	83 f8 50             	cmp    eax,0x50
c0010ac6:	75 f6                	jne    c0010abe <VgaText::updateTitle()+0xc>
c0010ac8:	31 c0                	xor    eax,eax
c0010aca:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010ad1:	84 db                	test   bl,bl
c0010ad3:	74 06                	je     c0010adb <VgaText::updateTitle()+0x29>
c0010ad5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010ad8:	40                   	inc    eax
c0010ad9:	eb ef                	jmp    c0010aca <VgaText::updateTitle()+0x18>
c0010adb:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010ade:	85 c0                	test   eax,eax
c0010ae0:	74 09                	je     c0010aeb <VgaText::updateTitle()+0x39>
c0010ae2:	53                   	push   ebx
c0010ae3:	53                   	push   ebx
c0010ae4:	51                   	push   ecx
c0010ae5:	52                   	push   edx
c0010ae6:	ff d0                	call   eax
c0010ae8:	83 c4 10             	add    esp,0x10
c0010aeb:	e8 58 fe ff ff       	call   c0010948 <VgaText::updateDiskUsage()>
c0010af0:	83 c4 58             	add    esp,0x58
c0010af3:	5b                   	pop    ebx
c0010af4:	c3                   	ret    
c0010af5:	90                   	nop

c0010af6 <VgaText::setTitleTextColour(VgaColour)>:
c0010af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010afa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010afe:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b01:	eb af                	jmp    c0010ab2 <VgaText::updateTitle()>
c0010b03:	90                   	nop

c0010b04 <VgaText::setTitleColour(VgaColour)>:
c0010b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b0c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b0f:	eb a1                	jmp    c0010ab2 <VgaText::updateTitle()>
c0010b11:	90                   	nop

c0010b12 <VgaText::setTitle(char*)>:
c0010b12:	53                   	push   ebx
c0010b13:	83 ec 10             	sub    esp,0x10
c0010b16:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1e:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b24:	50                   	push   eax
c0010b25:	e8 fe fc fe ff       	call   c0000828 <strcpy>
c0010b2a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b2e:	83 c4 18             	add    esp,0x18
c0010b31:	5b                   	pop    ebx
c0010b32:	e9 7b ff ff ff       	jmp    c0010ab2 <VgaText::updateTitle()>
c0010b37:	90                   	nop

c0010b38 <VgaText::decrementCursor(bool)>:
c0010b38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b3c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b40:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b43:	85 c0                	test   eax,eax
c0010b45:	74 04                	je     c0010b4b <VgaText::decrementCursor(bool)+0x13>
c0010b47:	48                   	dec    eax
c0010b48:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b4b:	84 c9                	test   cl,cl
c0010b4d:	74 09                	je     c0010b58 <VgaText::decrementCursor(bool)+0x20>
c0010b4f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b53:	e9 c2 fa ff ff       	jmp    c001061a <VgaText::updateCursor()>
c0010b58:	c3                   	ret    
c0010b59:	90                   	nop

c0010b5a <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b5a:	53                   	push   ebx
c0010b5b:	83 ec 08             	sub    esp,0x8
c0010b5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b6a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b6e:	3c 07                	cmp    al,0x7
c0010b70:	75 2a                	jne    c0010b9c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b72:	a1 f8 f0 02 c0       	mov    eax,ds:0xc002f0f8
c0010b77:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b7f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b87:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b93:	83 c4 08             	add    esp,0x8
c0010b96:	5b                   	pop    ebx
c0010b97:	e9 b4 30 00 00       	jmp    c0013c50 <Buzzer::beep(int, int, bool)>
c0010b9c:	3c 0d                	cmp    al,0xd
c0010b9e:	75 09                	jne    c0010ba9 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010ba0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010ba7:	eb 2c                	jmp    c0010bd5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010ba9:	3c 0a                	cmp    al,0xa
c0010bab:	75 31                	jne    c0010bde <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010bad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010bb0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0010bba:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bbd:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bc0:	75 0f                	jne    c0010bd1 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bc2:	83 ec 0c             	sub    esp,0xc
c0010bc5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bc8:	53                   	push   ebx
c0010bc9:	e8 68 fb ff ff       	call   c0010736 <VgaText::scrollScreen()>
c0010bce:	83 c4 10             	add    esp,0x10
c0010bd1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010bd5:	83 c4 08             	add    esp,0x8
c0010bd8:	5b                   	pop    ebx
c0010bd9:	e9 3c fa ff ff       	jmp    c001061a <VgaText::updateCursor()>
c0010bde:	3c 08                	cmp    al,0x8
c0010be0:	75 25                	jne    c0010c07 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010be2:	50                   	push   eax
c0010be3:	50                   	push   eax
c0010be4:	6a 01                	push   0x1
c0010be6:	53                   	push   ebx
c0010be7:	e8 4c ff ff ff       	call   c0010b38 <VgaText::decrementCursor(bool)>
c0010bec:	5a                   	pop    edx
c0010bed:	59                   	pop    ecx
c0010bee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010bf1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bf4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010bf7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bfa:	6a 20                	push   0x20
c0010bfc:	53                   	push   ebx
c0010bfd:	e8 da fb ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c02:	83 c4 28             	add    esp,0x28
c0010c05:	5b                   	pop    ebx
c0010c06:	c3                   	ret    
c0010c07:	83 ec 08             	sub    esp,0x8
c0010c0a:	0f be c0             	movsx  eax,al
c0010c0d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c10:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c13:	51                   	push   ecx
c0010c14:	52                   	push   edx
c0010c15:	50                   	push   eax
c0010c16:	53                   	push   ebx
c0010c17:	e8 c0 fb ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c1c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c20:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c28:	83 c4 28             	add    esp,0x28
c0010c2b:	5b                   	pop    ebx
c0010c2c:	e9 5f fc ff ff       	jmp    c0010890 <VgaText::incrementCursor(bool)>
c0010c31:	90                   	nop

c0010c32 <VgaText::isShowingCursor()>:
c0010c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c36:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c39:	c3                   	ret    

c0010c3a <VgaText::isBlinkDisabled()>:
c0010c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3e:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c41:	83 f0 01             	xor    eax,0x1
c0010c44:	c3                   	ret    
c0010c45:	90                   	nop

c0010c46 <VgaText::setCursorHeight(int)>:
c0010c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c4e:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c51:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c59:	e9 d2 f9 ff ff       	jmp    c0010630 <VgaText::showCursor(bool)>

c0010c5e <VgaText::getCursorHeight()>:
c0010c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c62:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c65:	c3                   	ret    

c0010c66 <setActiveTerminal(VgaText*)>:
c0010c66:	53                   	push   ebx
c0010c67:	83 ec 08             	sub    esp,0x8
c0010c6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c6e:	85 db                	test   ebx,ebx
c0010c70:	75 11                	jne    c0010c83 <setActiveTerminal(VgaText*)+0x1d>
c0010c72:	c7 44 24 10 ac ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002adac
c0010c7a:	83 c4 08             	add    esp,0x8
c0010c7d:	5b                   	pop    ebx
c0010c7e:	e9 8a 9b 00 00       	jmp    c001a80d <Krnl::panic(char const*)>
c0010c83:	50                   	push   eax
c0010c84:	50                   	push   eax
c0010c85:	53                   	push   ebx
c0010c86:	68 ba ad 02 c0       	push   0xc002adba
c0010c8b:	e8 b3 21 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0010c90:	a1 44 f0 02 c0       	mov    eax,ds:0xc002f044
c0010c95:	83 c4 10             	add    esp,0x10
c0010c98:	85 c0                	test   eax,eax
c0010c9a:	74 0c                	je     c0010ca8 <setActiveTerminal(VgaText*)+0x42>
c0010c9c:	83 ec 0c             	sub    esp,0xc
c0010c9f:	50                   	push   eax
c0010ca0:	e8 75 f9 ff ff       	call   c001061a <VgaText::updateCursor()>
c0010ca5:	83 c4 10             	add    esp,0x10
c0010ca8:	89 1d 44 f0 02 c0    	mov    DWORD PTR ds:0xc002f044,ebx
c0010cae:	51                   	push   ecx
c0010caf:	51                   	push   ecx
c0010cb0:	53                   	push   ebx
c0010cb1:	68 d2 ad 02 c0       	push   0xc002add2
c0010cb6:	e8 88 21 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0010cbb:	83 c4 0c             	add    esp,0xc
c0010cbe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cc1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cc4:	53                   	push   ebx
c0010cc5:	e8 7e fb ff ff       	call   c0010848 <VgaText::setCursor(int, int)>
c0010cca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ccd:	e8 68 ff ff ff       	call   c0010c3a <VgaText::isBlinkDisabled()>
c0010cd2:	5a                   	pop    edx
c0010cd3:	0f b6 c0             	movzx  eax,al
c0010cd6:	59                   	pop    ecx
c0010cd7:	50                   	push   eax
c0010cd8:	53                   	push   ebx
c0010cd9:	e8 5e f9 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c0010cde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ce1:	e8 78 ff ff ff       	call   c0010c5e <VgaText::getCursorHeight()>
c0010ce6:	5a                   	pop    edx
c0010ce7:	59                   	pop    ecx
c0010ce8:	50                   	push   eax
c0010ce9:	53                   	push   ebx
c0010cea:	e8 57 ff ff ff       	call   c0010c46 <VgaText::setCursorHeight(int)>
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010cf6:	75 07                	jne    c0010cff <setActiveTerminal(VgaText*)+0x99>
c0010cf8:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010cff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d03:	83 c4 08             	add    esp,0x8
c0010d06:	5b                   	pop    ebx
c0010d07:	e9 c0 f8 ff ff       	jmp    c00105cc <VgaText::load()>

c0010d0c <doTerminalCycle()>:
c0010d0c:	83 ec 18             	sub    esp,0x18
c0010d0f:	a1 40 f0 02 c0       	mov    eax,ds:0xc002f040
c0010d14:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d17:	50                   	push   eax
c0010d18:	a3 40 f0 02 c0       	mov    ds:0xc002f040,eax
c0010d1d:	e8 44 ff ff ff       	call   c0010c66 <setActiveTerminal(VgaText*)>
c0010d22:	83 c4 1c             	add    esp,0x1c
c0010d25:	c3                   	ret    

c0010d26 <VgaText::doUpdate()>:
c0010d26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d2d:	85 c0                	test   eax,eax
c0010d2f:	74 02                	je     c0010d33 <VgaText::doUpdate()+0xd>
c0010d31:	ff e0                	jmp    eax
c0010d33:	c3                   	ret    

c0010d34 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d34:	55                   	push   ebp
c0010d35:	31 ed                	xor    ebp,ebp
c0010d37:	57                   	push   edi
c0010d38:	56                   	push   esi
c0010d39:	53                   	push   ebx
c0010d3a:	83 ec 1c             	sub    esp,0x1c
c0010d3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d41:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d46:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d4d:	50                   	push   eax
c0010d4e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d53:	50                   	push   eax
c0010d54:	e8 cb f9 ff ff       	call   c0010724 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d59:	59                   	pop    ecx
c0010d5a:	0f b6 c0             	movzx  eax,al
c0010d5d:	5e                   	pop    esi
c0010d5e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d63:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d67:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d6e:	0f b7 f6             	movzx  esi,si
c0010d71:	01 f6                	add    esi,esi
c0010d73:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d76:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d79:	84 c0                	test   al,al
c0010d7b:	0f 84 fd 00 00 00    	je     c0010e7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d81:	3c 0d                	cmp    al,0xd
c0010d83:	75 0c                	jne    c0010d91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d85:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d8c:	e9 e7 00 00 00       	jmp    c0010e78 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d91:	3c 0a                	cmp    al,0xa
c0010d93:	75 47                	jne    c0010ddc <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d95:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d98:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d9f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010da2:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010da5:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010da8:	75 0f                	jne    c0010db9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010daa:	83 ec 0c             	sub    esp,0xc
c0010dad:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010db0:	53                   	push   ebx
c0010db1:	e8 80 f9 ff ff       	call   c0010736 <VgaText::scrollScreen()>
c0010db6:	83 c4 10             	add    esp,0x10
c0010db9:	83 ec 0c             	sub    esp,0xc
c0010dbc:	31 ed                	xor    ebp,ebp
c0010dbe:	53                   	push   ebx
c0010dbf:	e8 56 f8 ff ff       	call   c001061a <VgaText::updateCursor()>
c0010dc4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dcf:	0f b7 f6             	movzx  esi,si
c0010dd2:	01 f6                	add    esi,esi
c0010dd4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dd7:	e9 9c 00 00 00       	jmp    c0010e78 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010ddc:	3c 08                	cmp    al,0x8
c0010dde:	75 35                	jne    c0010e15 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010de0:	56                   	push   esi
c0010de1:	56                   	push   esi
c0010de2:	6a 01                	push   0x1
c0010de4:	53                   	push   ebx
c0010de5:	e8 4e fd ff ff       	call   c0010b38 <VgaText::decrementCursor(bool)>
c0010dea:	58                   	pop    eax
c0010deb:	5a                   	pop    edx
c0010dec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010def:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010df2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010df5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010df8:	6a 20                	push   0x20
c0010dfa:	53                   	push   ebx
c0010dfb:	e8 dc f9 ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e00:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e05:	83 c4 20             	add    esp,0x20
c0010e08:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e0b:	0f b7 f6             	movzx  esi,si
c0010e0e:	01 f6                	add    esi,esi
c0010e10:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e13:	eb 63                	jmp    c0010e78 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e15:	51                   	push   ecx
c0010e16:	51                   	push   ecx
c0010e17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e1b:	50                   	push   eax
c0010e1c:	e8 a9 f9 ff ff       	call   c00107ca <VgaText::combineCharAndColour(char, unsigned char)>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	66 89 06             	mov    WORD PTR [esi],ax
c0010e27:	39 1d 44 f0 02 c0    	cmp    DWORD PTR ds:0xc002f044,ebx
c0010e2d:	75 21                	jne    c0010e50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e2f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e32:	85 c0                	test   eax,eax
c0010e34:	74 1a                	je     c0010e50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e36:	52                   	push   edx
c0010e37:	52                   	push   edx
c0010e38:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e3b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e46:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e49:	51                   	push   ecx
c0010e4a:	53                   	push   ebx
c0010e4b:	ff d0                	call   eax
c0010e4d:	83 c4 20             	add    esp,0x20
c0010e50:	83 c6 02             	add    esi,0x2
c0010e53:	50                   	push   eax
c0010e54:	50                   	push   eax
c0010e55:	6a 00                	push   0x0
c0010e57:	53                   	push   ebx
c0010e58:	e8 33 fa ff ff       	call   c0010890 <VgaText::incrementCursor(bool)>
c0010e5d:	83 c4 10             	add    esp,0x10
c0010e60:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e64:	75 0d                	jne    c0010e73 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e66:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e6b:	0f b7 f6             	movzx  esi,si
c0010e6e:	01 f6                	add    esi,esi
c0010e70:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e73:	bd 01 00 00 00       	mov    ebp,0x1
c0010e78:	47                   	inc    edi
c0010e79:	e9 f8 fe ff ff       	jmp    c0010d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e7e:	83 ec 0c             	sub    esp,0xc
c0010e81:	53                   	push   ebx
c0010e82:	e8 93 f7 ff ff       	call   c001061a <VgaText::updateCursor()>
c0010e87:	83 c4 10             	add    esp,0x10
c0010e8a:	89 e8                	mov    eax,ebp
c0010e8c:	84 c0                	test   al,al
c0010e8e:	74 0c                	je     c0010e9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e90:	83 ec 0c             	sub    esp,0xc
c0010e93:	53                   	push   ebx
c0010e94:	e8 8d fe ff ff       	call   c0010d26 <VgaText::doUpdate()>
c0010e99:	83 c4 10             	add    esp,0x10
c0010e9c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ea3:	83 c4 1c             	add    esp,0x1c
c0010ea6:	5b                   	pop    ebx
c0010ea7:	5e                   	pop    esi
c0010ea8:	5f                   	pop    edi
c0010ea9:	5d                   	pop    ebp
c0010eaa:	c3                   	ret    
c0010eab:	90                   	nop

c0010eac <VgaText::clearScreen()>:
c0010eac:	57                   	push   edi
c0010ead:	56                   	push   esi
c0010eae:	31 f6                	xor    esi,esi
c0010eb0:	53                   	push   ebx
c0010eb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010eb5:	52                   	push   edx
c0010eb6:	6a 00                	push   0x0
c0010eb8:	6a 00                	push   0x0
c0010eba:	53                   	push   ebx
c0010ebb:	e8 88 f9 ff ff       	call   c0010848 <VgaText::setCursor(int, int)>
c0010ec0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ec7:	83 c4 10             	add    esp,0x10
c0010eca:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ecd:	7e 20                	jle    c0010eef <VgaText::clearScreen()+0x43>
c0010ecf:	31 ff                	xor    edi,edi
c0010ed1:	50                   	push   eax
c0010ed2:	50                   	push   eax
c0010ed3:	56                   	push   esi
c0010ed4:	57                   	push   edi
c0010ed5:	47                   	inc    edi
c0010ed6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ed9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010edc:	6a 20                	push   0x20
c0010ede:	53                   	push   ebx
c0010edf:	e8 f8 f8 ff ff       	call   c00107dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ee4:	83 c4 20             	add    esp,0x20
c0010ee7:	83 ff 50             	cmp    edi,0x50
c0010eea:	75 e5                	jne    c0010ed1 <VgaText::clearScreen()+0x25>
c0010eec:	46                   	inc    esi
c0010eed:	eb db                	jmp    c0010eca <VgaText::clearScreen()+0x1e>
c0010eef:	83 ec 0c             	sub    esp,0xc
c0010ef2:	53                   	push   ebx
c0010ef3:	e8 2e fe ff ff       	call   c0010d26 <VgaText::doUpdate()>
c0010ef8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010eff:	83 c4 10             	add    esp,0x10
c0010f02:	5b                   	pop    ebx
c0010f03:	5e                   	pop    esi
c0010f04:	5f                   	pop    edi
c0010f05:	c3                   	ret    

c0010f06 <VgaText::putchar(char)>:
c0010f06:	56                   	push   esi
c0010f07:	53                   	push   ebx
c0010f08:	83 ec 14             	sub    esp,0x14
c0010f0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f0f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f13:	3c 5b                	cmp    al,0x5b
c0010f15:	75 18                	jne    c0010f2f <VgaText::putchar(char)+0x29>
c0010f17:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f1b:	74 1f                	je     c0010f3c <VgaText::putchar(char)+0x36>
c0010f1d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f23:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f2a:	e9 bd 00 00 00       	jmp    c0010fec <VgaText::putchar(char)+0xe6>
c0010f2f:	3c 1b                	cmp    al,0x1b
c0010f31:	75 09                	jne    c0010f3c <VgaText::putchar(char)+0x36>
c0010f33:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f37:	e9 b0 00 00 00       	jmp    c0010fec <VgaText::putchar(char)+0xe6>
c0010f3c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f3f:	84 c9                	test   cl,cl
c0010f41:	0f 84 92 00 00 00    	je     c0010fd9 <VgaText::putchar(char)+0xd3>
c0010f47:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f4a:	80 fa 3e             	cmp    dl,0x3e
c0010f4d:	77 76                	ja     c0010fc5 <VgaText::putchar(char)+0xbf>
c0010f4f:	3c 6d                	cmp    al,0x6d
c0010f51:	75 47                	jne    c0010f9a <VgaText::putchar(char)+0x94>
c0010f53:	31 f6                	xor    esi,esi
c0010f55:	31 d2                	xor    edx,edx
c0010f57:	31 c0                	xor    eax,eax
c0010f59:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f5c:	7e 2d                	jle    c0010f8b <VgaText::putchar(char)+0x85>
c0010f5e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f63:	80 fa 3b             	cmp    dl,0x3b
c0010f66:	75 17                	jne    c0010f7f <VgaText::putchar(char)+0x79>
c0010f68:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f6c:	50                   	push   eax
c0010f6d:	53                   	push   ebx
c0010f6e:	e8 fd f6 ff ff       	call   c0010670 <VgaText::doANSI_SGR(int)>
c0010f73:	59                   	pop    ecx
c0010f74:	31 d2                	xor    edx,edx
c0010f76:	58                   	pop    eax
c0010f77:	31 c0                	xor    eax,eax
c0010f79:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f7d:	eb 09                	jmp    c0010f88 <VgaText::putchar(char)+0x82>
c0010f7f:	6b c0 0a             	imul   eax,eax,0xa
c0010f82:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f86:	88 ca                	mov    dl,cl
c0010f88:	46                   	inc    esi
c0010f89:	eb ce                	jmp    c0010f59 <VgaText::putchar(char)+0x53>
c0010f8b:	84 d2                	test   dl,dl
c0010f8d:	74 2e                	je     c0010fbd <VgaText::putchar(char)+0xb7>
c0010f8f:	50                   	push   eax
c0010f90:	53                   	push   ebx
c0010f91:	e8 da f6 ff ff       	call   c0010670 <VgaText::doANSI_SGR(int)>
c0010f96:	58                   	pop    eax
c0010f97:	5a                   	pop    edx
c0010f98:	eb 23                	jmp    c0010fbd <VgaText::putchar(char)+0xb7>
c0010f9a:	3c 4a                	cmp    al,0x4a
c0010f9c:	75 1f                	jne    c0010fbd <VgaText::putchar(char)+0xb7>
c0010f9e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010fa2:	75 19                	jne    c0010fbd <VgaText::putchar(char)+0xb7>
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	53                   	push   ebx
c0010fa8:	e8 ff fe ff ff       	call   c0010eac <VgaText::clearScreen()>
c0010fad:	83 c4 0c             	add    esp,0xc
c0010fb0:	6a 00                	push   0x0
c0010fb2:	6a 00                	push   0x0
c0010fb4:	53                   	push   ebx
c0010fb5:	e8 8e f8 ff ff       	call   c0010848 <VgaText::setCursor(int, int)>
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fc3:	eb 27                	jmp    c0010fec <VgaText::putchar(char)+0xe6>
c0010fc5:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fc8:	83 fa 0e             	cmp    edx,0xe
c0010fcb:	7f 1f                	jg     c0010fec <VgaText::putchar(char)+0xe6>
c0010fcd:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fd0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fd3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010fd7:	eb 13                	jmp    c0010fec <VgaText::putchar(char)+0xe6>
c0010fd9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010fdc:	0f be c0             	movsx  eax,al
c0010fdf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fe2:	50                   	push   eax
c0010fe3:	53                   	push   ebx
c0010fe4:	e8 71 fb ff ff       	call   c0010b5a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010fe9:	83 c4 10             	add    esp,0x10
c0010fec:	83 c4 14             	add    esp,0x14
c0010fef:	5b                   	pop    ebx
c0010ff0:	5e                   	pop    esi
c0010ff1:	c3                   	ret    

c0010ff2 <VgaText::puts(char const*)>:
c0010ff2:	53                   	push   ebx
c0010ff3:	83 ec 08             	sub    esp,0x8
c0010ff6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ffa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ffd:	84 c0                	test   al,al
c0010fff:	74 12                	je     c0011013 <VgaText::puts(char const*)+0x21>
c0011001:	43                   	inc    ebx
c0011002:	51                   	push   ecx
c0011003:	51                   	push   ecx
c0011004:	50                   	push   eax
c0011005:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011009:	e8 f8 fe ff ff       	call   c0010f06 <VgaText::putchar(char)>
c001100e:	83 c4 10             	add    esp,0x10
c0011011:	eb e7                	jmp    c0010ffa <VgaText::puts(char const*)+0x8>
c0011013:	83 c4 08             	add    esp,0x8
c0011016:	5b                   	pop    ebx
c0011017:	c3                   	ret    

c0011018 <VgaText::putx(unsigned int)>:
c0011018:	57                   	push   edi
c0011019:	b9 11 00 00 00       	mov    ecx,0x11
c001101e:	56                   	push   esi
c001101f:	be ee ad 02 c0       	mov    esi,0xc002adee
c0011024:	53                   	push   ebx
c0011025:	83 ec 20             	sub    esp,0x20
c0011028:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001102c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011030:	fc                   	cld    
c0011031:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011033:	be 08 00 00 00       	mov    esi,0x8
c0011038:	50                   	push   eax
c0011039:	50                   	push   eax
c001103a:	89 d8                	mov    eax,ebx
c001103c:	c1 e3 04             	shl    ebx,0x4
c001103f:	c1 e8 1c             	shr    eax,0x1c
c0011042:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011047:	50                   	push   eax
c0011048:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001104c:	e8 b5 fe ff ff       	call   c0010f06 <VgaText::putchar(char)>
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	4e                   	dec    esi
c0011055:	75 e1                	jne    c0011038 <VgaText::putx(unsigned int)+0x20>
c0011057:	83 c4 20             	add    esp,0x20
c001105a:	5b                   	pop    ebx
c001105b:	5e                   	pop    esi
c001105c:	5f                   	pop    edi
c001105d:	c3                   	ret    

c001105e <VgaText::VgaText(char const*)>:
c001105e:	57                   	push   edi
c001105f:	56                   	push   esi
c0011060:	53                   	push   ebx
c0011061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011065:	83 ec 08             	sub    esp,0x8
c0011068:	6a 00                	push   0x0
c001106a:	50                   	push   eax
c001106b:	e8 8a 05 00 00       	call   c00115fa <UnixFile::UnixFile(int)>
c0011070:	83 c4 10             	add    esp,0x10
c0011073:	ba 54 ae 02 c0       	mov    edx,0xc002ae54
c0011078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107c:	89 10                	mov    DWORD PTR [eax],edx
c001107e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011082:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011098:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001109c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00110a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110be:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d4:	8d 50 60             	lea    edx,[eax+0x60]
c00110d7:	bb 20 f0 02 c0       	mov    ebx,0xc002f020
c00110dc:	b8 08 00 00 00       	mov    eax,0x8
c00110e1:	fc                   	cld    
c00110e2:	89 d7                	mov    edi,edx
c00110e4:	89 de                	mov    esi,ebx
c00110e6:	89 c1                	mov    ecx,eax
c00110e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ee:	05 82 00 00 00       	add    eax,0x82
c00110f3:	83 ec 08             	sub    esp,0x8
c00110f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110fa:	50                   	push   eax
c00110fb:	e8 28 f7 fe ff       	call   c0000828 <strcpy>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011107:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001110e:	83 ec 0c             	sub    esp,0xc
c0011111:	6a 01                	push   0x1
c0011113:	e8 25 09 00 00       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0011118:	83 c4 10             	add    esp,0x10
c001111b:	89 c2                	mov    edx,eax
c001111d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011121:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011124:	8b 1d f0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f0
c001112a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001112e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011131:	89 c6                	mov    esi,eax
c0011133:	e8 dc ed ff ff       	call   c000ff14 <Phys::allocatePage()>
c0011138:	6a 05                	push   0x5
c001113a:	56                   	push   esi
c001113b:	50                   	push   eax
c001113c:	53                   	push   ebx
c001113d:	e8 32 11 00 00       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011149:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001114c:	83 ec 04             	sub    esp,0x4
c001114f:	68 00 0f 00 00       	push   0xf00
c0011154:	6a 00                	push   0x0
c0011156:	50                   	push   eax
c0011157:	e8 10 f6 fe ff       	call   c000076c <memset>
c001115c:	83 c4 10             	add    esp,0x10
c001115f:	83 ec 04             	sub    esp,0x4
c0011162:	6a 00                	push   0x0
c0011164:	6a 07                	push   0x7
c0011166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001116a:	e8 95 f5 ff ff       	call   c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	83 ec 08             	sub    esp,0x8
c0011175:	6a 02                	push   0x2
c0011177:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001117b:	e8 c6 fa ff ff       	call   c0010c46 <VgaText::setCursorHeight(int)>
c0011180:	83 c4 10             	add    esp,0x10
c0011183:	83 ec 04             	sub    esp,0x4
c0011186:	6a 00                	push   0x0
c0011188:	6a 00                	push   0x0
c001118a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118e:	e8 b5 f6 ff ff       	call   c0010848 <VgaText::setCursor(int, int)>
c0011193:	83 c4 10             	add    esp,0x10
c0011196:	83 ec 08             	sub    esp,0x8
c0011199:	6a 01                	push   0x1
c001119b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001119f:	e8 8c f4 ff ff       	call   c0010630 <VgaText::showCursor(bool)>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	83 ec 08             	sub    esp,0x8
c00111aa:	6a 01                	push   0x1
c00111ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b0:	e8 87 f4 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	83 ec 0c             	sub    esp,0xc
c00111bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111bf:	e8 e8 fc ff ff       	call   c0010eac <VgaText::clearScreen()>
c00111c4:	83 c4 10             	add    esp,0x10
c00111c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cb:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d3:	05 02 01 00 00       	add    eax,0x102
c00111d8:	83 ec 04             	sub    esp,0x4
c00111db:	68 96 00 00 00       	push   0x96
c00111e0:	6a 00                	push   0x0
c00111e2:	50                   	push   eax
c00111e3:	e8 84 f5 fe ff       	call   c000076c <memset>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ef:	05 98 01 00 00       	add    eax,0x198
c00111f4:	83 ec 04             	sub    esp,0x4
c00111f7:	68 2c 01 00 00       	push   0x12c
c00111fc:	6a 00                	push   0x0
c00111fe:	50                   	push   eax
c00111ff:	e8 68 f5 fe ff       	call   c000076c <memset>
c0011204:	83 c4 10             	add    esp,0x10
c0011207:	90                   	nop
c0011208:	5b                   	pop    ebx
c0011209:	5e                   	pop    esi
c001120a:	5f                   	pop    edi
c001120b:	c3                   	ret    

c001120c <VgaText::receiveKey(unsigned char)>:
c001120c:	55                   	push   ebp
c001120d:	57                   	push   edi
c001120e:	56                   	push   esi
c001120f:	53                   	push   ebx
c0011210:	83 ec 1c             	sub    esp,0x1c
c0011213:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011217:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001121b:	84 db                	test   bl,bl
c001121d:	0f 84 c9 00 00 00    	je     c00112ec <VgaText::receiveKey(unsigned char)+0xe0>
c0011223:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0011229:	80 fb 08             	cmp    bl,0x8
c001122c:	75 2c                	jne    c001125a <VgaText::receiveKey(unsigned char)+0x4e>
c001122e:	83 ec 0c             	sub    esp,0xc
c0011231:	57                   	push   edi
c0011232:	e8 51 f5 fe ff       	call   c0000788 <strlen>
c0011237:	83 c4 10             	add    esp,0x10
c001123a:	85 c0                	test   eax,eax
c001123c:	74 41                	je     c001127f <VgaText::receiveKey(unsigned char)+0x73>
c001123e:	50                   	push   eax
c001123f:	50                   	push   eax
c0011240:	6a 08                	push   0x8
c0011242:	56                   	push   esi
c0011243:	e8 be fc ff ff       	call   c0010f06 <VgaText::putchar(char)>
c0011248:	89 3c 24             	mov    DWORD PTR [esp],edi
c001124b:	e8 38 f5 fe ff       	call   c0000788 <strlen>
c0011250:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0011258:	eb 22                	jmp    c001127c <VgaText::receiveKey(unsigned char)+0x70>
c001125a:	0f be c3             	movsx  eax,bl
c001125d:	52                   	push   edx
c001125e:	52                   	push   edx
c001125f:	50                   	push   eax
c0011260:	56                   	push   esi
c0011261:	e8 a0 fc ff ff       	call   c0010f06 <VgaText::putchar(char)>
c0011266:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001126a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001126f:	59                   	pop    ecx
c0011270:	5d                   	pop    ebp
c0011271:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011275:	50                   	push   eax
c0011276:	57                   	push   edi
c0011277:	e8 ec f6 fe ff       	call   c0000968 <strcat>
c001127c:	83 c4 10             	add    esp,0x10
c001127f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011286:	75 05                	jne    c001128d <VgaText::receiveKey(unsigned char)+0x81>
c0011288:	80 fb 0a             	cmp    bl,0xa
c001128b:	75 53                	jne    c00112e0 <VgaText::receiveKey(unsigned char)+0xd4>
c001128d:	83 ec 0c             	sub    esp,0xc
c0011290:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011296:	53                   	push   ebx
c0011297:	e8 ec f4 fe ff       	call   c0000788 <strlen>
c001129c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001129f:	89 c5                	mov    ebp,eax
c00112a1:	e8 e2 f4 fe ff       	call   c0000788 <strlen>
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112ad:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112b2:	76 10                	jbe    c00112c4 <VgaText::receiveKey(unsigned char)+0xb8>
c00112b4:	83 ec 0c             	sub    esp,0xc
c00112b7:	68 ff ad 02 c0       	push   0xc002adff
c00112bc:	e8 4c 95 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00112c1:	83 c4 10             	add    esp,0x10
c00112c4:	50                   	push   eax
c00112c5:	50                   	push   eax
c00112c6:	57                   	push   edi
c00112c7:	53                   	push   ebx
c00112c8:	e8 9b f6 fe ff       	call   c0000968 <strcat>
c00112cd:	83 c4 0c             	add    esp,0xc
c00112d0:	68 96 00 00 00       	push   0x96
c00112d5:	6a 00                	push   0x0
c00112d7:	57                   	push   edi
c00112d8:	e8 8f f4 fe ff       	call   c000076c <memset>
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	83 ec 0c             	sub    esp,0xc
c00112e3:	56                   	push   esi
c00112e4:	e8 3d fa ff ff       	call   c0010d26 <VgaText::doUpdate()>
c00112e9:	83 c4 10             	add    esp,0x10
c00112ec:	83 c4 1c             	add    esp,0x1c
c00112ef:	5b                   	pop    ebx
c00112f0:	5e                   	pop    esi
c00112f1:	5f                   	pop    edi
c00112f2:	5d                   	pop    ebp
c00112f3:	c3                   	ret    

c00112f4 <VgaText::write(unsigned long long, void*, int*)>:
c00112f4:	55                   	push   ebp
c00112f5:	57                   	push   edi
c00112f6:	56                   	push   esi
c00112f7:	53                   	push   ebx
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112ff:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011303:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011307:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001130e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011311:	39 eb                	cmp    ebx,ebp
c0011313:	74 13                	je     c0011328 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011315:	43                   	inc    ebx
c0011316:	50                   	push   eax
c0011317:	50                   	push   eax
c0011318:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001131c:	50                   	push   eax
c001131d:	56                   	push   esi
c001131e:	e8 e3 fb ff ff       	call   c0010f06 <VgaText::putchar(char)>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	eb e9                	jmp    c0011311 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011332:	56                   	push   esi
c0011333:	e8 ee f9 ff ff       	call   c0010d26 <VgaText::doUpdate()>
c0011338:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001133c:	89 38                	mov    DWORD PTR [eax],edi
c001133e:	83 c4 1c             	add    esp,0x1c
c0011341:	31 c0                	xor    eax,eax
c0011343:	5b                   	pop    ebx
c0011344:	5e                   	pop    esi
c0011345:	5f                   	pop    edi
c0011346:	5d                   	pop    ebp
c0011347:	c3                   	ret    

c0011348 <newTerminal(char*)>:
c0011348:	83 ec 28             	sub    esp,0x28
c001134b:	68 c4 02 00 00       	push   0x2c4
c0011350:	e8 53 e5 ff ff       	call   c000f8a8 <malloc>
c0011355:	5a                   	pop    edx
c0011356:	59                   	pop    ecx
c0011357:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001135b:	50                   	push   eax
c001135c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011360:	e8 f9 fc ff ff       	call   c001105e <VgaText::VgaText(char const*)>
c0011365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011369:	83 c4 2c             	add    esp,0x2c
c001136c:	c3                   	ret    
c001136d:	90                   	nop

c001136e <TSS::TSS()>:
c001136e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011372:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011379:	90                   	nop
c001137a:	c3                   	ret    
c001137b:	90                   	nop

c001137c <TSS::setESP(unsigned long)>:
c001137c:	55                   	push   ebp
c001137d:	89 e5                	mov    ebp,esp
c001137f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011382:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011385:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011388:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001138b:	90                   	nop
c001138c:	5d                   	pop    ebp
c001138d:	c3                   	ret    

c001138e <TSS::flush()>:
c001138e:	55                   	push   ebp
c001138f:	89 e5                	mov    ebp,esp
c0011391:	83 ec 10             	sub    esp,0x10
c0011394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011397:	8b 00                	mov    eax,DWORD PTR [eax]
c0011399:	83 c8 03             	or     eax,0x3
c001139c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00113a0:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113a4:	66 89 d0             	mov    ax,dx
c00113a7:	0f 00 d8             	ltr    ax
c00113aa:	90                   	nop
c00113ab:	c9                   	leave  
c00113ac:	c3                   	ret    
c00113ad:	90                   	nop

c00113ae <TSS::setup(unsigned long, unsigned long)>:
c00113ae:	55                   	push   ebp
c00113af:	89 e5                	mov    ebp,esp
c00113b1:	83 ec 18             	sub    esp,0x18
c00113b4:	83 ec 0c             	sub    esp,0xc
c00113b7:	6a 68                	push   0x68
c00113b9:	e8 ea e4 ff ff       	call   c000f8a8 <malloc>
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	89 c2                	mov    edx,eax
c00113c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113cf:	83 ec 04             	sub    esp,0x4
c00113d2:	6a 68                	push   0x68
c00113d4:	6a 00                	push   0x0
c00113d6:	50                   	push   eax
c00113d7:	e8 90 f3 fe ff       	call   c000076c <memset>
c00113dc:	83 c4 10             	add    esp,0x10
c00113df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e5:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00113eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f1:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011400:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011409:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001140f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011412:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011415:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001141b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001141e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011421:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011439:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001143f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011445:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001144b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011451:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011454:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001145d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011460:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011469:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011473:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011476:	0f 20 da             	mov    edx,cr3
c0011479:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001147c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001147f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011485:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011488:	83 ec 08             	sub    esp,0x8
c001148b:	50                   	push   eax
c001148c:	8d 45 ec             	lea    eax,[ebp-0x14]
c001148f:	50                   	push   eax
c0011490:	e8 ef db ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	83 ec 08             	sub    esp,0x8
c001149b:	6a 68                	push   0x68
c001149d:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114a0:	50                   	push   eax
c00114a1:	e8 fa db ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c00114a6:	83 c4 10             	add    esp,0x10
c00114a9:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114ad:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114b0:	83 e0 0f             	and    eax,0xf
c00114b3:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114b6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114b9:	83 c8 40             	or     eax,0x40
c00114bc:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114bf:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00114c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114ca:	05 78 01 00 00       	add    eax,0x178
c00114cf:	83 ec 04             	sub    esp,0x4
c00114d2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114d5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114d8:	50                   	push   eax
c00114d9:	e8 f6 db ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c00114de:	83 c4 10             	add    esp,0x10
c00114e1:	89 c2                	mov    edx,eax
c00114e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e6:	89 10                	mov    DWORD PTR [eax],edx
c00114e8:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00114ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114f3:	05 78 01 00 00       	add    eax,0x178
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	50                   	push   eax
c00114fc:	e8 17 dc ff ff       	call   c000f118 <GDT::flush()>
c0011501:	83 c4 10             	add    esp,0x10
c0011504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011507:	8b 00                	mov    eax,DWORD PTR [eax]
c0011509:	83 ec 08             	sub    esp,0x8
c001150c:	50                   	push   eax
c001150d:	68 68 ae 02 c0       	push   0xc002ae68
c0011512:	e8 2c 19 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0011517:	83 c4 10             	add    esp,0x10
c001151a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151d:	8b 00                	mov    eax,DWORD PTR [eax]
c001151f:	c9                   	leave  
c0011520:	c3                   	ret    
c0011521:	90                   	nop

c0011522 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011526:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001152a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011532:	75 08                	jne    c001153c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011534:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001153a:	eb 38                	jmp    c0011574 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001153c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011541:	75 17                	jne    c001155a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011543:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011548:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001154b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011551:	8b 10                	mov    edx,DWORD PTR [eax]
c0011553:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011557:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001155a:	89 c1                	mov    ecx,eax
c001155c:	83 e1 fd             	and    ecx,0xfffffffd
c001155f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011565:	74 cd                	je     c0011534 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011567:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001156c:	83 e0 ef             	and    eax,0xffffffef
c001156f:	83 f8 08             	cmp    eax,0x8
c0011572:	76 c0                	jbe    c0011534 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011574:	31 c0                	xor    eax,eax
c0011576:	c3                   	ret    
c0011577:	90                   	nop

c0011578 <ReservedFilename::isAtty()>:
c0011578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001157f:	31 c0                	xor    eax,eax
c0011581:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011587:	74 09                	je     c0011592 <ReservedFilename::isAtty()+0x1a>
c0011589:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001158f:	0f 94 c0             	sete   al
c0011592:	c3                   	ret    
c0011593:	90                   	nop

c0011594 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011598:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115a3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115a8:	75 08                	jne    c00115b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115aa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115b0:	eb 3d                	jmp    c00115ef <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115b2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115b7:	75 17                	jne    c00115d0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115c1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00115c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115cd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115d0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115d5:	75 04                	jne    c00115db <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00115d9:	eb 14                	jmp    c00115ef <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115db:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115e0:	74 c8                	je     c00115aa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115e2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115e7:	83 e0 ef             	and    eax,0xffffffef
c00115ea:	83 f8 08             	cmp    eax,0x8
c00115ed:	76 bb                	jbe    c00115aa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115ef:	31 c0                	xor    eax,eax
c00115f1:	c3                   	ret    

c00115f2 <UnixFile::getFileDescriptor()>:
c00115f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f9:	c3                   	ret    

c00115fa <UnixFile::UnixFile(int)>:
c00115fa:	53                   	push   ebx
c00115fb:	83 ec 28             	sub    esp,0x28
c00115fe:	ba 54 af 02 c0       	mov    edx,0xc002af54
c0011603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011607:	89 10                	mov    DWORD PTR [eax],edx
c0011609:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011611:	0f 8f 8c 01 00 00    	jg     c00117a3 <UnixFile::UnixFile(int)+0x1a9>
c0011617:	a1 00 df 02 c0       	mov    eax,ds:0xc002df00
c001161c:	8d 50 01             	lea    edx,[eax+0x1]
c001161f:	89 15 00 df 02 c0    	mov    DWORD PTR ds:0xc002df00,edx
c0011625:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011629:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001162c:	83 ec 08             	sub    esp,0x8
c001162f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011633:	68 d8 f0 02 c0       	push   0xc002f0d8
c0011638:	e8 2f 7a 01 00       	call   c002906c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	a0 d4 f0 02 c0       	mov    al,ds:0xc002f0d4
c0011645:	83 f0 01             	xor    eax,0x1
c0011648:	84 c0                	test   al,al
c001164a:	0f 84 54 01 00 00    	je     c00117a4 <UnixFile::UnixFile(int)+0x1aa>
c0011650:	c6 05 d4 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0d4,0x1
c0011657:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001165f:	83 ec 0c             	sub    esp,0xc
c0011662:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011666:	e8 3d e2 ff ff       	call   c000f8a8 <malloc>
c001166b:	83 c4 10             	add    esp,0x10
c001166e:	89 c3                	mov    ebx,eax
c0011670:	83 ec 08             	sub    esp,0x8
c0011673:	68 03 ff ff 0f       	push   0xfffff03
c0011678:	53                   	push   ebx
c0011679:	e8 2c 01 00 00       	call   c00117aa <ReservedFilename::ReservedFilename(int)>
c001167e:	83 c4 10             	add    esp,0x10
c0011681:	89 1d cc f0 02 c0    	mov    DWORD PTR ds:0xc002f0cc,ebx
c0011687:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001168f:	83 ec 0c             	sub    esp,0xc
c0011692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011696:	e8 0d e2 ff ff       	call   c000f8a8 <malloc>
c001169b:	83 c4 10             	add    esp,0x10
c001169e:	89 c3                	mov    ebx,eax
c00116a0:	83 ec 08             	sub    esp,0x8
c00116a3:	68 01 ff ff 0f       	push   0xfffff01
c00116a8:	53                   	push   ebx
c00116a9:	e8 fc 00 00 00       	call   c00117aa <ReservedFilename::ReservedFilename(int)>
c00116ae:	83 c4 10             	add    esp,0x10
c00116b1:	89 1d d0 f0 02 c0    	mov    DWORD PTR ds:0xc002f0d0,ebx
c00116b7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116bf:	83 ec 0c             	sub    esp,0xc
c00116c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116c6:	e8 dd e1 ff ff       	call   c000f8a8 <malloc>
c00116cb:	83 c4 10             	add    esp,0x10
c00116ce:	89 c3                	mov    ebx,eax
c00116d0:	83 ec 08             	sub    esp,0x8
c00116d3:	68 00 ff ff 0f       	push   0xfffff00
c00116d8:	53                   	push   ebx
c00116d9:	e8 cc 00 00 00       	call   c00117aa <ReservedFilename::ReservedFilename(int)>
c00116de:	83 c4 10             	add    esp,0x10
c00116e1:	89 1d c4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c4,ebx
c00116e7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116ef:	83 ec 0c             	sub    esp,0xc
c00116f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116f6:	e8 ad e1 ff ff       	call   c000f8a8 <malloc>
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	89 c3                	mov    ebx,eax
c0011700:	83 ec 08             	sub    esp,0x8
c0011703:	68 02 ff ff 0f       	push   0xfffff02
c0011708:	53                   	push   ebx
c0011709:	e8 9c 00 00 00       	call   c00117aa <ReservedFilename::ReservedFilename(int)>
c001170e:	83 c4 10             	add    esp,0x10
c0011711:	89 1d c8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c8,ebx
c0011717:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001171f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011724:	7f 7e                	jg     c00117a4 <UnixFile::UnixFile(int)+0x1aa>
c0011726:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001172e:	83 ec 0c             	sub    esp,0xc
c0011731:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011735:	e8 6e e1 ff ff       	call   c000f8a8 <malloc>
c001173a:	83 c4 10             	add    esp,0x10
c001173d:	89 c3                	mov    ebx,eax
c001173f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011743:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011748:	83 ec 08             	sub    esp,0x8
c001174b:	50                   	push   eax
c001174c:	53                   	push   ebx
c001174d:	e8 58 00 00 00       	call   c00117aa <ReservedFilename::ReservedFilename(int)>
c0011752:	83 c4 10             	add    esp,0x10
c0011755:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011759:	89 1c 85 a0 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f60],ebx
c0011760:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011768:	83 ec 0c             	sub    esp,0xc
c001176b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001176f:	e8 34 e1 ff ff       	call   c000f8a8 <malloc>
c0011774:	83 c4 10             	add    esp,0x10
c0011777:	89 c3                	mov    ebx,eax
c0011779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001177d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011782:	83 ec 08             	sub    esp,0x8
c0011785:	50                   	push   eax
c0011786:	53                   	push   ebx
c0011787:	e8 1e 00 00 00       	call   c00117aa <ReservedFilename::ReservedFilename(int)>
c001178c:	83 c4 10             	add    esp,0x10
c001178f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011793:	89 1c 85 60 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0fa0],ebx
c001179a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001179e:	e9 7c ff ff ff       	jmp    c001171f <UnixFile::UnixFile(int)+0x125>
c00117a3:	90                   	nop
c00117a4:	83 c4 28             	add    esp,0x28
c00117a7:	5b                   	pop    ebx
c00117a8:	c3                   	ret    
c00117a9:	90                   	nop

c00117aa <ReservedFilename::ReservedFilename(int)>:
c00117aa:	83 ec 0c             	sub    esp,0xc
c00117ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b1:	83 ec 08             	sub    esp,0x8
c00117b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117b8:	50                   	push   eax
c00117b9:	e8 3c fe ff ff       	call   c00115fa <UnixFile::UnixFile(int)>
c00117be:	83 c4 10             	add    esp,0x10
c00117c1:	ba 70 af 02 c0       	mov    edx,0xc002af70
c00117c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ca:	89 10                	mov    DWORD PTR [eax],edx
c00117cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117d7:	90                   	nop
c00117d8:	83 c4 0c             	add    esp,0xc
c00117db:	c3                   	ret    

c00117dc <UnixFile::~UnixFile()>:
c00117dc:	83 ec 1c             	sub    esp,0x1c
c00117df:	ba 54 af 02 c0       	mov    edx,0xc002af54
c00117e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117e8:	89 10                	mov    DWORD PTR [eax],edx
c00117ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117f1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117f6:	7f 73                	jg     c001186b <UnixFile::~UnixFile()+0x8f>
c00117f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011800:	83 ec 0c             	sub    esp,0xc
c0011803:	68 d8 f0 02 c0       	push   0xc002f0d8
c0011808:	e8 33 79 01 00       	call   c0029140 <LinkedList<UnixFile>::getFirstElement()>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011814:	83 ec 0c             	sub    esp,0xc
c0011817:	68 d8 f0 02 c0       	push   0xc002f0d8
c001181c:	e8 27 79 01 00       	call   c0029148 <LinkedList<UnixFile>::removeFirst()>
c0011821:	83 c4 10             	add    esp,0x10
c0011824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011828:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001182c:	74 40                	je     c001186e <UnixFile::~UnixFile()+0x92>
c001182e:	83 ec 08             	sub    esp,0x8
c0011831:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011835:	68 d8 f0 02 c0       	push   0xc002f0d8
c001183a:	e8 2d 78 01 00       	call   c002906c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001183f:	83 c4 10             	add    esp,0x10
c0011842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011846:	8d 50 01             	lea    edx,[eax+0x1]
c0011849:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001184d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011852:	0f 94 c0             	sete   al
c0011855:	84 c0                	test   al,al
c0011857:	74 a7                	je     c0011800 <UnixFile::~UnixFile()+0x24>
c0011859:	83 ec 0c             	sub    esp,0xc
c001185c:	68 2c af 02 c0       	push   0xc002af2c
c0011861:	e8 a7 8f 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0011866:	83 c4 10             	add    esp,0x10
c0011869:	eb 95                	jmp    c0011800 <UnixFile::~UnixFile()+0x24>
c001186b:	90                   	nop
c001186c:	eb 01                	jmp    c001186f <UnixFile::~UnixFile()+0x93>
c001186e:	90                   	nop
c001186f:	90                   	nop
c0011870:	83 c4 1c             	add    esp,0x1c
c0011873:	c3                   	ret    

c0011874 <UnixFile::~UnixFile()>:
c0011874:	83 ec 0c             	sub    esp,0xc
c0011877:	83 ec 0c             	sub    esp,0xc
c001187a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187e:	e8 59 ff ff ff       	call   c00117dc <UnixFile::~UnixFile()>
c0011883:	83 c4 10             	add    esp,0x10
c0011886:	83 ec 08             	sub    esp,0x8
c0011889:	6a 0c                	push   0xc
c001188b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188f:	e8 cf 14 00 00       	call   c0012d63 <operator delete(void*, unsigned long)>
c0011894:	83 c4 10             	add    esp,0x10
c0011897:	83 c4 0c             	add    esp,0xc
c001189a:	c3                   	ret    
c001189b:	90                   	nop

c001189c <ReservedFilename::~ReservedFilename()>:
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	ba 70 af 02 c0       	mov    edx,0xc002af70
c00118a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a8:	89 10                	mov    DWORD PTR [eax],edx
c00118aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ae:	83 ec 0c             	sub    esp,0xc
c00118b1:	50                   	push   eax
c00118b2:	e8 25 ff ff ff       	call   c00117dc <UnixFile::~UnixFile()>
c00118b7:	83 c4 10             	add    esp,0x10
c00118ba:	90                   	nop
c00118bb:	83 c4 0c             	add    esp,0xc
c00118be:	c3                   	ret    
c00118bf:	90                   	nop

c00118c0 <ReservedFilename::~ReservedFilename()>:
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	83 ec 0c             	sub    esp,0xc
c00118c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ca:	e8 cd ff ff ff       	call   c001189c <ReservedFilename::~ReservedFilename()>
c00118cf:	83 c4 10             	add    esp,0x10
c00118d2:	83 ec 08             	sub    esp,0x8
c00118d5:	6a 0c                	push   0xc
c00118d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118db:	e8 83 14 00 00       	call   c0012d63 <operator delete(void*, unsigned long)>
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	83 c4 0c             	add    esp,0xc
c00118e6:	c3                   	ret    

c00118e7 <getFromFileDescriptor(int)>:
c00118e7:	53                   	push   ebx
c00118e8:	83 ec 08             	sub    esp,0x8
c00118eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118ef:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118f5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118fb:	7f 2c                	jg     c0011929 <getFromFileDescriptor(int)+0x42>
c00118fd:	83 ec 0c             	sub    esp,0xc
c0011900:	68 d8 f0 02 c0       	push   0xc002f0d8
c0011905:	e8 36 78 01 00       	call   c0029140 <LinkedList<UnixFile>::getFirstElement()>
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	85 c0                	test   eax,eax
c001190f:	75 04                	jne    c0011915 <getFromFileDescriptor(int)+0x2e>
c0011911:	31 c0                	xor    eax,eax
c0011913:	eb 6e                	jmp    c0011983 <getFromFileDescriptor(int)+0x9c>
c0011915:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011918:	74 69                	je     c0011983 <getFromFileDescriptor(int)+0x9c>
c001191a:	52                   	push   edx
c001191b:	52                   	push   edx
c001191c:	50                   	push   eax
c001191d:	68 d8 f0 02 c0       	push   0xc002f0d8
c0011922:	e8 c3 78 01 00       	call   c00291ea <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011927:	eb e1                	jmp    c001190a <getFromFileDescriptor(int)+0x23>
c0011929:	a1 cc f0 02 c0       	mov    eax,ds:0xc002f0cc
c001192e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011934:	74 4d                	je     c0011983 <getFromFileDescriptor(int)+0x9c>
c0011936:	a1 d0 f0 02 c0       	mov    eax,ds:0xc002f0d0
c001193b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011941:	74 40                	je     c0011983 <getFromFileDescriptor(int)+0x9c>
c0011943:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0011948:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001194e:	74 33                	je     c0011983 <getFromFileDescriptor(int)+0x9c>
c0011950:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c0011955:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001195b:	74 26                	je     c0011983 <getFromFileDescriptor(int)+0x9c>
c001195d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011963:	83 f8 08             	cmp    eax,0x8
c0011966:	77 09                	ja     c0011971 <getFromFileDescriptor(int)+0x8a>
c0011968:	8b 04 85 a0 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f60]
c001196f:	eb 12                	jmp    c0011983 <getFromFileDescriptor(int)+0x9c>
c0011971:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011977:	83 fb 08             	cmp    ebx,0x8
c001197a:	77 95                	ja     c0011911 <getFromFileDescriptor(int)+0x2a>
c001197c:	8b 04 9d 60 f0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0fa0]
c0011983:	83 c4 08             	add    esp,0x8
c0011986:	5b                   	pop    ebx
c0011987:	c3                   	ret    

c0011988 <__static_initialization_and_destruction_0(int, int)>:
c0011988:	83 ec 0c             	sub    esp,0xc
c001198b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011990:	75 34                	jne    c00119c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011992:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001199a:	75 2a                	jne    c00119c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001199c:	83 ec 0c             	sub    esp,0xc
c001199f:	68 d8 f0 02 c0       	push   0xc002f0d8
c00119a4:	e8 6b 76 01 00       	call   c0029014 <LinkedList<UnixFile>::LinkedList()>
c00119a9:	83 c4 10             	add    esp,0x10
c00119ac:	83 ec 04             	sub    esp,0x4
c00119af:	68 90 de 02 c0       	push   0xc002de90
c00119b4:	68 d8 f0 02 c0       	push   0xc002f0d8
c00119b9:	68 12 90 02 c0       	push   0xc0029012
c00119be:	e8 1a 13 00 00       	call   c0012cdd <__cxa_atexit>
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	90                   	nop
c00119c7:	83 c4 0c             	add    esp,0xc
c00119ca:	c3                   	ret    

c00119cb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119cb:	83 ec 0c             	sub    esp,0xc
c00119ce:	83 ec 08             	sub    esp,0x8
c00119d1:	68 ff ff 00 00       	push   0xffff
c00119d6:	6a 01                	push   0x1
c00119d8:	e8 ab ff ff ff       	call   c0011988 <__static_initialization_and_destruction_0(int, int)>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	83 c4 0c             	add    esp,0xc
c00119e3:	c3                   	ret    

c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00119e4:	53                   	push   ebx
c00119e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119ed:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119f3:	89 c8                	mov    eax,ecx
c00119f5:	d1 e8                	shr    eax,1
c00119f7:	03 05 08 df 02 c0    	add    eax,DWORD PTR ds:0xc002df08
c00119fd:	83 e1 01             	and    ecx,0x1
c0011a00:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a02:	75 09                	jne    c0011a0d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a04:	83 e2 f0             	and    edx,0xfffffff0
c0011a07:	09 da                	or     edx,ebx
c0011a09:	88 10                	mov    BYTE PTR [eax],dl
c0011a0b:	5b                   	pop    ebx
c0011a0c:	c3                   	ret    
c0011a0d:	c1 e3 04             	shl    ebx,0x4
c0011a10:	83 e2 0f             	and    edx,0xf
c0011a13:	09 da                	or     edx,ebx
c0011a15:	88 10                	mov    BYTE PTR [eax],dl
c0011a17:	5b                   	pop    ebx
c0011a18:	c3                   	ret    

c0011a19 <Virt::getPageState(unsigned long)>:
c0011a19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a1d:	8b 0d 08 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df08
c0011a23:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a29:	89 d0                	mov    eax,edx
c0011a2b:	d1 e8                	shr    eax,1
c0011a2d:	83 e2 01             	and    edx,0x1
c0011a30:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a33:	75 04                	jne    c0011a39 <Virt::getPageState(unsigned long)+0x20>
c0011a35:	83 e0 0f             	and    eax,0xf
c0011a38:	c3                   	ret    
c0011a39:	c0 e8 04             	shr    al,0x4
c0011a3c:	c3                   	ret    

c0011a3d <Virt::allocateKernelVirtualPages(int)>:
c0011a3d:	55                   	push   ebp
c0011a3e:	31 ed                	xor    ebp,ebp
c0011a40:	57                   	push   edi
c0011a41:	56                   	push   esi
c0011a42:	53                   	push   ebx
c0011a43:	31 db                	xor    ebx,ebx
c0011a45:	83 ec 1c             	sub    esp,0x1c
c0011a48:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a4c:	8b 3d 04 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df04
c0011a52:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a57:	57                   	push   edi
c0011a58:	e8 bc ff ff ff       	call   c0011a19 <Virt::getPageState(unsigned long)>
c0011a5d:	5a                   	pop    edx
c0011a5e:	84 c0                	test   al,al
c0011a60:	75 3a                	jne    c0011a9c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a62:	85 db                	test   ebx,ebx
c0011a64:	75 02                	jne    c0011a68 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a66:	89 fd                	mov    ebp,edi
c0011a68:	43                   	inc    ebx
c0011a69:	39 f3                	cmp    ebx,esi
c0011a6b:	74 5a                	je     c0011ac7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a6d:	47                   	inc    edi
c0011a6e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a74:	76 31                	jbe    c0011aa7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a76:	c7 05 04 df 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002df04,0xc8000
c0011a80:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a85:	75 28                	jne    c0011aaf <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a87:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a8c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a91:	57                   	push   edi
c0011a92:	e8 82 ff ff ff       	call   c0011a19 <Virt::getPageState(unsigned long)>
c0011a97:	5a                   	pop    edx
c0011a98:	84 c0                	test   al,al
c0011a9a:	74 c6                	je     c0011a62 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a9c:	31 db                	xor    ebx,ebx
c0011a9e:	47                   	inc    edi
c0011a9f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011aa5:	77 cf                	ja     c0011a76 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011aa7:	89 3d 04 df 02 c0    	mov    DWORD PTR ds:0xc002df04,edi
c0011aad:	eb a8                	jmp    c0011a57 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	68 84 af 02 c0       	push   0xc002af84
c0011ab7:	e8 51 8d 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0011abc:	8b 3d 04 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df04
c0011ac2:	83 c4 10             	add    esp,0x10
c0011ac5:	eb 90                	jmp    c0011a57 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ac7:	89 2d 04 df 02 c0    	mov    DWORD PTR ds:0xc002df04,ebp
c0011acd:	4b                   	dec    ebx
c0011ace:	74 5f                	je     c0011b2f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011ad0:	85 f6                	test   esi,esi
c0011ad2:	74 3d                	je     c0011b11 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ad4:	89 e8                	mov    eax,ebp
c0011ad6:	31 db                	xor    ebx,ebx
c0011ad8:	8d 7e ff             	lea    edi,[esi-0x1]
c0011adb:	eb 14                	jmp    c0011af1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011add:	6a 01                	push   0x1
c0011adf:	43                   	inc    ebx
c0011ae0:	50                   	push   eax
c0011ae1:	e8 fe fe ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ae6:	58                   	pop    eax
c0011ae7:	39 f3                	cmp    ebx,esi
c0011ae9:	5a                   	pop    edx
c0011aea:	74 25                	je     c0011b11 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011aec:	a1 04 df 02 c0       	mov    eax,ds:0xc002df04
c0011af1:	8d 50 01             	lea    edx,[eax+0x1]
c0011af4:	85 db                	test   ebx,ebx
c0011af6:	89 15 04 df 02 c0    	mov    DWORD PTR ds:0xc002df04,edx
c0011afc:	74 20                	je     c0011b1e <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011afe:	39 df                	cmp    edi,ebx
c0011b00:	75 db                	jne    c0011add <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b02:	6a 03                	push   0x3
c0011b04:	43                   	inc    ebx
c0011b05:	50                   	push   eax
c0011b06:	e8 d9 fe ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b0b:	59                   	pop    ecx
c0011b0c:	39 f3                	cmp    ebx,esi
c0011b0e:	58                   	pop    eax
c0011b0f:	75 db                	jne    c0011aec <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b11:	83 c4 1c             	add    esp,0x1c
c0011b14:	89 e8                	mov    eax,ebp
c0011b16:	5b                   	pop    ebx
c0011b17:	c1 e0 0c             	shl    eax,0xc
c0011b1a:	5e                   	pop    esi
c0011b1b:	5f                   	pop    edi
c0011b1c:	5d                   	pop    ebp
c0011b1d:	c3                   	ret    
c0011b1e:	6a 02                	push   0x2
c0011b20:	bb 01 00 00 00       	mov    ebx,0x1
c0011b25:	50                   	push   eax
c0011b26:	e8 b9 fe ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b2b:	58                   	pop    eax
c0011b2c:	5a                   	pop    edx
c0011b2d:	eb bd                	jmp    c0011aec <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b2f:	6a 04                	push   0x4
c0011b31:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b34:	55                   	push   ebp
c0011b35:	a3 04 df 02 c0       	mov    ds:0xc002df04,eax
c0011b3a:	e8 a5 fe ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b3f:	59                   	pop    ecx
c0011b40:	89 e8                	mov    eax,ebp
c0011b42:	5b                   	pop    ebx
c0011b43:	c1 e0 0c             	shl    eax,0xc
c0011b46:	83 c4 1c             	add    esp,0x1c
c0011b49:	5b                   	pop    ebx
c0011b4a:	5e                   	pop    esi
c0011b4b:	5f                   	pop    edi
c0011b4c:	5d                   	pop    ebp
c0011b4d:	c3                   	ret    

c0011b4e <Virt::freeSwapfilePage(unsigned long)>:
c0011b4e:	53                   	push   ebx
c0011b4f:	8b 15 ec f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0ec
c0011b55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b59:	b8 01 00 00 00       	mov    eax,0x1
c0011b5e:	89 cb                	mov    ebx,ecx
c0011b60:	d3 e0                	shl    eax,cl
c0011b62:	c1 eb 05             	shr    ebx,0x5
c0011b65:	f7 d0                	not    eax
c0011b67:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b6a:	5b                   	pop    ebx
c0011b6b:	c3                   	ret    

c0011b6c <Virt::swapIDToSector(unsigned long)>:
c0011b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b70:	0f af 05 0c df 02 c0 	imul   eax,DWORD PTR ds:0xc002df0c
c0011b77:	03 05 14 df 02 c0    	add    eax,DWORD PTR ds:0xc002df14
c0011b7d:	c3                   	ret    

c0011b7e <Virt::allocateSwapfilePage()>:
c0011b7e:	55                   	push   ebp
c0011b7f:	31 d2                	xor    edx,edx
c0011b81:	57                   	push   edi
c0011b82:	56                   	push   esi
c0011b83:	53                   	push   ebx
c0011b84:	83 ec 0c             	sub    esp,0xc
c0011b87:	8b 0d 0c df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df0c
c0011b8d:	a1 10 df 02 c0       	mov    eax,ds:0xc002df10
c0011b92:	f7 f1                	div    ecx
c0011b94:	39 0d 10 df 02 c0    	cmp    DWORD PTR ds:0xc002df10,ecx
c0011b9a:	72 2d                	jb     c0011bc9 <Virt::allocateSwapfilePage()+0x4b>
c0011b9c:	8b 35 ec f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0ec
c0011ba2:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ba4:	f6 c2 01             	test   dl,0x1
c0011ba7:	74 3c                	je     c0011be5 <Virt::allocateSwapfilePage()+0x67>
c0011ba9:	31 c9                	xor    ecx,ecx
c0011bab:	bf 01 00 00 00       	mov    edi,0x1
c0011bb0:	eb 12                	jmp    c0011bc4 <Virt::allocateSwapfilePage()+0x46>
c0011bb2:	89 fd                	mov    ebp,edi
c0011bb4:	89 ca                	mov    edx,ecx
c0011bb6:	d3 e5                	shl    ebp,cl
c0011bb8:	c1 ea 05             	shr    edx,0x5
c0011bbb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bbe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bc0:	85 ea                	test   edx,ebp
c0011bc2:	74 2a                	je     c0011bee <Virt::allocateSwapfilePage()+0x70>
c0011bc4:	41                   	inc    ecx
c0011bc5:	39 c8                	cmp    eax,ecx
c0011bc7:	77 e9                	ja     c0011bb2 <Virt::allocateSwapfilePage()+0x34>
c0011bc9:	83 ec 0c             	sub    esp,0xc
c0011bcc:	68 0b b1 02 c0       	push   0xc002b10b
c0011bd1:	e8 37 8c 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	31 c9                	xor    ecx,ecx
c0011bdb:	83 c4 0c             	add    esp,0xc
c0011bde:	89 c8                	mov    eax,ecx
c0011be0:	5b                   	pop    ebx
c0011be1:	5e                   	pop    esi
c0011be2:	5f                   	pop    edi
c0011be3:	5d                   	pop    ebp
c0011be4:	c3                   	ret    
c0011be5:	89 f3                	mov    ebx,esi
c0011be7:	bd 01 00 00 00       	mov    ebp,0x1
c0011bec:	31 c9                	xor    ecx,ecx
c0011bee:	09 ea                	or     edx,ebp
c0011bf0:	89 c8                	mov    eax,ecx
c0011bf2:	89 13                	mov    DWORD PTR [ebx],edx
c0011bf4:	83 c4 0c             	add    esp,0xc
c0011bf7:	5b                   	pop    ebx
c0011bf8:	5e                   	pop    esi
c0011bf9:	5f                   	pop    edi
c0011bfa:	5d                   	pop    ebp
c0011bfb:	c3                   	ret    

c0011bfc <Virt::virtualMemorySetup()>:
c0011bfc:	53                   	push   ebx
c0011bfd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c02:	83 ec 08             	sub    esp,0x8
c0011c05:	6a 0f                	push   0xf
c0011c07:	53                   	push   ebx
c0011c08:	43                   	inc    ebx
c0011c09:	e8 d6 fd ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0e:	59                   	pop    ecx
c0011c0f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c15:	58                   	pop    eax
c0011c16:	75 ed                	jne    c0011c05 <Virt::virtualMemorySetup()+0x9>
c0011c18:	83 ec 08             	sub    esp,0x8
c0011c1b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c20:	68 00 00 00 c8       	push   0xc8000000
c0011c25:	68 22 b1 02 c0       	push   0xc002b122
c0011c2a:	e8 14 12 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0011c2f:	58                   	pop    eax
c0011c30:	5a                   	pop    edx
c0011c31:	68 00 f0 ff ef       	push   0xeffff000
c0011c36:	68 36 b1 02 c0       	push   0xc002b136
c0011c3b:	e8 03 12 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0011c40:	83 c4 10             	add    esp,0x10
c0011c43:	83 ec 08             	sub    esp,0x8
c0011c46:	6a 00                	push   0x0
c0011c48:	53                   	push   ebx
c0011c49:	43                   	inc    ebx
c0011c4a:	e8 95 fd ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4f:	83 c4 10             	add    esp,0x10
c0011c52:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c58:	75 e9                	jne    c0011c43 <Virt::virtualMemorySetup()+0x47>
c0011c5a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c5f:	83 ec 08             	sub    esp,0x8
c0011c62:	6a 0f                	push   0xf
c0011c64:	53                   	push   ebx
c0011c65:	43                   	inc    ebx
c0011c66:	e8 79 fd ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6b:	83 c4 10             	add    esp,0x10
c0011c6e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c74:	75 e9                	jne    c0011c5f <Virt::virtualMemorySetup()+0x63>
c0011c76:	83 c4 08             	add    esp,0x8
c0011c79:	5b                   	pop    ebx
c0011c7a:	c3                   	ret    

c0011c7b <Virt::swappingSetup()>:
c0011c7b:	c3                   	ret    

c0011c7c <Virt::setupPageSwapping(int)>:
c0011c7c:	57                   	push   edi
c0011c7d:	56                   	push   esi
c0011c7e:	53                   	push   ebx
c0011c7f:	83 ec 1c             	sub    esp,0x1c
c0011c82:	68 4a b1 02 c0       	push   0xc002b14a
c0011c87:	e8 b7 11 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0011c8c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c93:	e8 10 dc ff ff       	call   c000f8a8 <malloc>
c0011c98:	83 c4 0c             	add    esp,0xc
c0011c9b:	89 c6                	mov    esi,eax
c0011c9d:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c0011ca3:	68 5e b1 02 c0       	push   0xc002b15e
c0011ca8:	50                   	push   eax
c0011ca9:	e8 f4 16 00 00       	call   c00133a2 <File::File(char const*, Process*)>
c0011cae:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cb1:	e8 c8 18 00 00       	call   c001357e <File::unlink()>
c0011cb6:	59                   	pop    ecx
c0011cb7:	5b                   	pop    ebx
c0011cb8:	6a 12                	push   0x12
c0011cba:	56                   	push   esi
c0011cbb:	e8 46 17 00 00       	call   c0013406 <File::open(FileOpenMode)>
c0011cc0:	83 c4 10             	add    esp,0x10
c0011cc3:	85 c0                	test   eax,eax
c0011cc5:	0f 85 5b 01 00 00    	jne    c0011e26 <Virt::setupPageSwapping(int)+0x1aa>
c0011ccb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ccf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cd7:	c1 e3 08             	shl    ebx,0x8
c0011cda:	83 ec 0c             	sub    esp,0xc
c0011cdd:	68 00 00 01 00       	push   0x10000
c0011ce2:	e8 c1 db ff ff       	call   c000f8a8 <malloc>
c0011ce7:	83 c4 0c             	add    esp,0xc
c0011cea:	89 c7                	mov    edi,eax
c0011cec:	68 00 00 01 00       	push   0x10000
c0011cf1:	68 ee 00 00 00       	push   0xee
c0011cf6:	50                   	push   eax
c0011cf7:	e8 70 ea fe ff       	call   c000076c <memset>
c0011cfc:	83 c4 10             	add    esp,0x10
c0011cff:	85 db                	test   ebx,ebx
c0011d01:	79 03                	jns    c0011d06 <Virt::setupPageSwapping(int)+0x8a>
c0011d03:	83 c3 0f             	add    ebx,0xf
c0011d06:	c1 fb 04             	sar    ebx,0x4
c0011d09:	4b                   	dec    ebx
c0011d0a:	83 fb ff             	cmp    ebx,0xffffffff
c0011d0d:	74 4f                	je     c0011d5e <Virt::setupPageSwapping(int)+0xe2>
c0011d0f:	83 ec 0c             	sub    esp,0xc
c0011d12:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d14:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d18:	52                   	push   edx
c0011d19:	57                   	push   edi
c0011d1a:	6a 00                	push   0x0
c0011d1c:	68 00 00 01 00       	push   0x10000
c0011d21:	56                   	push   esi
c0011d22:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d25:	83 c4 20             	add    esp,0x20
c0011d28:	85 c0                	test   eax,eax
c0011d2a:	0f 85 e0 00 00 00    	jne    c0011e10 <Virt::setupPageSwapping(int)+0x194>
c0011d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d34:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d39:	74 ce                	je     c0011d09 <Virt::setupPageSwapping(int)+0x8d>
c0011d3b:	83 ec 08             	sub    esp,0x8
c0011d3e:	4b                   	dec    ebx
c0011d3f:	50                   	push   eax
c0011d40:	68 b1 b1 02 c0       	push   0xc002b1b1
c0011d45:	e8 f9 10 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0011d4a:	c7 04 24 ba b1 02 c0 	mov    DWORD PTR [esp],0xc002b1ba
c0011d51:	e8 b7 8a 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0011d56:	83 c4 10             	add    esp,0x10
c0011d59:	83 fb ff             	cmp    ebx,0xffffffff
c0011d5c:	75 b1                	jne    c0011d0f <Virt::setupPageSwapping(int)+0x93>
c0011d5e:	83 ec 0c             	sub    esp,0xc
c0011d61:	56                   	push   esi
c0011d62:	e8 fd 16 00 00       	call   c0013464 <File::close()>
c0011d67:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d6a:	e8 59 db ff ff       	call   c000f8c8 <rfree>
c0011d6f:	83 c4 10             	add    esp,0x10
c0011d72:	85 f6                	test   esi,esi
c0011d74:	74 0c                	je     c0011d82 <Virt::setupPageSwapping(int)+0x106>
c0011d76:	83 ec 0c             	sub    esp,0xc
c0011d79:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d7b:	56                   	push   esi
c0011d7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	83 ec 08             	sub    esp,0x8
c0011d85:	a1 88 f5 02 c0       	mov    eax,ds:0xc002f588
c0011d8a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d90:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d92:	68 5e b1 02 c0       	push   0xc002b15e
c0011d97:	50                   	push   eax
c0011d98:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d9b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d9f:	c6 05 18 df 02 c0 43 	mov    BYTE PTR ds:0xc002df18,0x43
c0011da6:	c1 e2 0b             	shl    edx,0xb
c0011da9:	a3 14 df 02 c0       	mov    ds:0xc002df14,eax
c0011dae:	89 15 10 df 02 c0    	mov    DWORD PTR ds:0xc002df10,edx
c0011db4:	c7 05 0c df 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002df0c,0x8
c0011dbe:	c1 ea 08             	shr    edx,0x8
c0011dc1:	89 14 24             	mov    DWORD PTR [esp],edx
c0011dc4:	e8 df da ff ff       	call   c000f8a8 <malloc>
c0011dc9:	83 c4 0c             	add    esp,0xc
c0011dcc:	89 c1                	mov    ecx,eax
c0011dce:	a3 ec f0 02 c0       	mov    ds:0xc002f0ec,eax
c0011dd3:	31 d2                	xor    edx,edx
c0011dd5:	a1 10 df 02 c0       	mov    eax,ds:0xc002df10
c0011dda:	f7 35 0c df 02 c0    	div    DWORD PTR ds:0xc002df0c
c0011de0:	c1 e8 05             	shr    eax,0x5
c0011de3:	50                   	push   eax
c0011de4:	6a 00                	push   0x0
c0011de6:	51                   	push   ecx
c0011de7:	e8 80 e9 fe ff       	call   c000076c <memset>
c0011dec:	58                   	pop    eax
c0011ded:	a1 10 df 02 c0       	mov    eax,ds:0xc002df10
c0011df2:	5a                   	pop    edx
c0011df3:	31 d2                	xor    edx,edx
c0011df5:	f7 35 0c df 02 c0    	div    DWORD PTR ds:0xc002df0c
c0011dfb:	c1 e8 05             	shr    eax,0x5
c0011dfe:	50                   	push   eax
c0011dff:	68 c0 b1 02 c0       	push   0xc002b1c0
c0011e04:	e8 3a 10 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0011e09:	83 c4 20             	add    esp,0x20
c0011e0c:	5b                   	pop    ebx
c0011e0d:	5e                   	pop    esi
c0011e0e:	5f                   	pop    edi
c0011e0f:	c3                   	ret    
c0011e10:	83 ec 08             	sub    esp,0x8
c0011e13:	50                   	push   eax
c0011e14:	68 99 b1 02 c0       	push   0xc002b199
c0011e19:	e8 25 10 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0011e1e:	83 c4 10             	add    esp,0x10
c0011e21:	e9 0a ff ff ff       	jmp    c0011d30 <Virt::setupPageSwapping(int)+0xb4>
c0011e26:	83 ec 08             	sub    esp,0x8
c0011e29:	50                   	push   eax
c0011e2a:	68 75 b1 02 c0       	push   0xc002b175
c0011e2f:	e8 0f 10 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0011e34:	c7 04 24 7e b1 02 c0 	mov    DWORD PTR [esp],0xc002b17e
c0011e3b:	e8 cd 89 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0011e40:	83 c4 10             	add    esp,0x10
c0011e43:	e9 83 fe ff ff       	jmp    c0011ccb <Virt::setupPageSwapping(int)+0x4f>

c0011e48 <VAS::VAS()>:
c0011e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e62:	a3 f0 f0 02 c0       	mov    ds:0xc002f0f0,eax
c0011e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e6b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e73:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e7a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e81:	90                   	nop
c0011e82:	c3                   	ret    
c0011e83:	90                   	nop

c0011e84 <VAS::VAS(VAS*)>:
c0011e84:	83 ec 0c             	sub    esp,0xc
c0011e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e96:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e9d:	83 ec 0c             	sub    esp,0xc
c0011ea0:	68 a4 af 02 c0       	push   0xc002afa4
c0011ea5:	e8 63 89 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0011eaa:	83 c4 10             	add    esp,0x10
c0011ead:	90                   	nop
c0011eae:	83 c4 0c             	add    esp,0xc
c0011eb1:	c3                   	ret    

c0011eb2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011eb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb6:	89 c2                	mov    edx,eax
c0011eb8:	c1 e8 0a             	shr    eax,0xa
c0011ebb:	c1 ea 16             	shr    edx,0x16
c0011ebe:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ec3:	19 c9                	sbb    ecx,ecx
c0011ec5:	c1 e2 0c             	shl    edx,0xc
c0011ec8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ece:	25 fc 0f 00 00       	and    eax,0xffc
c0011ed3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011eda:	01 d0                	add    eax,edx
c0011edc:	c3                   	ret    
c0011edd:	90                   	nop

c0011ede <VAS::getPageTableEntry(unsigned long)>:
c0011ede:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ee2:	89 ca                	mov    edx,ecx
c0011ee4:	c1 e9 0a             	shr    ecx,0xa
c0011ee7:	c1 ea 16             	shr    edx,0x16
c0011eea:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ef0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ef6:	c1 e0 0c             	shl    eax,0xc
c0011ef9:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011efc:	c3                   	ret    

c0011efd <Virt::freeKernelVirtualPages(unsigned long)>:
c0011efd:	57                   	push   edi
c0011efe:	56                   	push   esi
c0011eff:	be 01 00 00 00       	mov    esi,0x1
c0011f04:	53                   	push   ebx
c0011f05:	83 ec 10             	sub    esp,0x10
c0011f08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f0c:	c1 eb 0c             	shr    ebx,0xc
c0011f0f:	eb 3f                	jmp    c0011f50 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f11:	83 ec 08             	sub    esp,0x8
c0011f14:	57                   	push   edi
c0011f15:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c0011f1b:	e8 be ff ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f25:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f29:	f6 c4 04             	test   ah,0x4
c0011f2c:	75 5f                	jne    c0011f8d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f2e:	80 fa 04             	cmp    dl,0x4
c0011f31:	74 78                	je     c0011fab <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f33:	80 fa 02             	cmp    dl,0x2
c0011f36:	0f 84 88 00 00 00    	je     c0011fc4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f3c:	80 fa 03             	cmp    dl,0x3
c0011f3f:	0f 84 ad 00 00 00    	je     c0011ff2 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f45:	fe ca                	dec    dl
c0011f47:	0f 84 92 00 00 00    	je     c0011fdf <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f4d:	43                   	inc    ebx
c0011f4e:	31 f6                	xor    esi,esi
c0011f50:	53                   	push   ebx
c0011f51:	89 df                	mov    edi,ebx
c0011f53:	e8 c1 fa ff ff       	call   c0011a19 <Virt::getPageState(unsigned long)>
c0011f58:	c1 e7 0c             	shl    edi,0xc
c0011f5b:	59                   	pop    ecx
c0011f5c:	84 c0                	test   al,al
c0011f5e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f62:	75 ad                	jne    c0011f11 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f64:	83 ec 0c             	sub    esp,0xc
c0011f67:	68 db b1 02 c0       	push   0xc002b1db
c0011f6c:	e8 9c 88 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0011f71:	58                   	pop    eax
c0011f72:	5a                   	pop    edx
c0011f73:	57                   	push   edi
c0011f74:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c0011f7a:	e8 5f ff ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c0011f7f:	83 c4 10             	add    esp,0x10
c0011f82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f84:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f88:	f6 c4 04             	test   ah,0x4
c0011f8b:	74 c0                	je     c0011f4d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f8d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	50                   	push   eax
c0011f9a:	e8 eb de ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fa6:	80 fa 04             	cmp    dl,0x4
c0011fa9:	75 88                	jne    c0011f33 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011fab:	89 f0                	mov    eax,esi
c0011fad:	84 c0                	test   al,al
c0011faf:	75 47                	jne    c0011ff8 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fb1:	c7 44 24 20 c8 af 02 c0 	mov    DWORD PTR [esp+0x20],0xc002afc8
c0011fb9:	83 c4 10             	add    esp,0x10
c0011fbc:	5b                   	pop    ebx
c0011fbd:	5e                   	pop    esi
c0011fbe:	5f                   	pop    edi
c0011fbf:	e9 49 88 00 00       	jmp    c001a80d <Krnl::panic(char const*)>
c0011fc4:	89 f0                	mov    eax,esi
c0011fc6:	84 c0                	test   al,al
c0011fc8:	75 15                	jne    c0011fdf <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fca:	83 ec 0c             	sub    esp,0xc
c0011fcd:	68 f7 b1 02 c0       	push   0xc002b1f7
c0011fd2:	e8 36 88 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0011fd7:	83 c4 10             	add    esp,0x10
c0011fda:	e9 6e ff ff ff       	jmp    c0011f4d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fdf:	83 ec 08             	sub    esp,0x8
c0011fe2:	6a 00                	push   0x0
c0011fe4:	53                   	push   ebx
c0011fe5:	e8 fa f9 ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fea:	83 c4 10             	add    esp,0x10
c0011fed:	e9 5b ff ff ff       	jmp    c0011f4d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ff2:	89 f0                	mov    eax,esi
c0011ff4:	84 c0                	test   al,al
c0011ff6:	75 15                	jne    c001200d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011ff8:	83 ec 08             	sub    esp,0x8
c0011ffb:	6a 00                	push   0x0
c0011ffd:	53                   	push   ebx
c0011ffe:	e8 e1 f9 ff ff       	call   c00119e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012003:	83 c4 10             	add    esp,0x10
c0012006:	83 c4 10             	add    esp,0x10
c0012009:	5b                   	pop    ebx
c001200a:	5e                   	pop    esi
c001200b:	5f                   	pop    edi
c001200c:	c3                   	ret    
c001200d:	c7 44 24 20 13 b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b213
c0012015:	83 c4 10             	add    esp,0x10
c0012018:	5b                   	pop    ebx
c0012019:	5e                   	pop    esi
c001201a:	5f                   	pop    edi
c001201b:	e9 ed 87 00 00       	jmp    c001a80d <Krnl::panic(char const*)>

c0012020 <VAS::freeAllocatedPages(unsigned long)>:
c0012020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012028:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001202c:	74 09                	je     c0012037 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001202e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012032:	e9 c6 fe ff ff       	jmp    c0011efd <Virt::freeKernelVirtualPages(unsigned long)>
c0012037:	c7 44 24 04 ec af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002afec
c001203f:	e9 ff 0d 00 00       	jmp    c0012e43 <Dbg::kprintf(char const*, ...)>

c0012044 <VAS::virtualToPhysical(unsigned long)>:
c0012044:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012048:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001204c:	e8 8d fe ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c0012051:	5a                   	pop    edx
c0012052:	8b 00                	mov    eax,DWORD PTR [eax]
c0012054:	59                   	pop    ecx
c0012055:	25 00 f0 ff ff       	and    eax,0xfffff000
c001205a:	c3                   	ret    
c001205b:	90                   	nop

c001205c <VAS::reflagRange(unsigned long, int, int, int)>:
c001205c:	55                   	push   ebp
c001205d:	57                   	push   edi
c001205e:	56                   	push   esi
c001205f:	53                   	push   ebx
c0012060:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012064:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012068:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001206c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012070:	85 db                	test   ebx,ebx
c0012072:	7e 22                	jle    c0012096 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012074:	c1 e3 0c             	shl    ebx,0xc
c0012077:	01 f3                	add    ebx,esi
c0012079:	56                   	push   esi
c001207a:	81 c6 00 10 00 00    	add    esi,0x1000
c0012080:	55                   	push   ebp
c0012081:	e8 58 fe ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c0012086:	5a                   	pop    edx
c0012087:	59                   	pop    ecx
c0012088:	8b 08                	mov    ecx,DWORD PTR [eax]
c001208a:	21 f9                	and    ecx,edi
c001208c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012090:	39 f3                	cmp    ebx,esi
c0012092:	89 08                	mov    DWORD PTR [eax],ecx
c0012094:	75 e3                	jne    c0012079 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012096:	5b                   	pop    ebx
c0012097:	5e                   	pop    esi
c0012098:	5f                   	pop    edi
c0012099:	5d                   	pop    ebp
c001209a:	c3                   	ret    
c001209b:	90                   	nop

c001209c <VAS::setToWriteCombining(unsigned long, int)>:
c001209c:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00120a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120a7:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120ae:	75 01                	jne    c00120b1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120b0:	c3                   	ret    
c00120b1:	68 80 00 00 00       	push   0x80
c00120b6:	6a ff                	push   0xffffffff
c00120b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120c4:	e8 93 ff ff ff       	call   c001205c <VAS::reflagRange(unsigned long, int, int, int)>
c00120c9:	83 c4 14             	add    esp,0x14
c00120cc:	c3                   	ret    
c00120cd:	90                   	nop

c00120ce <VAS::mapOtherVASIn(bool, VAS*)>:
c00120ce:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120de:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120e1:	19 c0                	sbb    eax,eax
c00120e3:	83 ca 03             	or     edx,0x3
c00120e6:	83 e0 fc             	and    eax,0xfffffffc
c00120e9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120f0:	0f 20 d8             	mov    eax,cr3
c00120f3:	0f 22 d8             	mov    cr3,eax
c00120f6:	c3                   	ret    
c00120f7:	90                   	nop

c00120f8 <VAS::~VAS()>:
c00120f8:	83 ec 2c             	sub    esp,0x2c
c00120fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012103:	fa                   	cli    
c0012104:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0012109:	40                   	inc    eax
c001210a:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001210f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012114:	8b 00                	mov    eax,DWORD PTR [eax]
c0012116:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012119:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001211f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012123:	6a 01                	push   0x1
c0012125:	50                   	push   eax
c0012126:	e8 a3 ff ff ff       	call   c00120ce <VAS::mapOtherVASIn(bool, VAS*)>
c001212b:	83 c4 0c             	add    esp,0xc
c001212e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012136:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001213e:	0f 8f d4 00 00 00    	jg     c0012218 <VAS::~VAS()+0x120>
c0012144:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012148:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001214b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001214f:	c1 e2 02             	shl    edx,0x2
c0012152:	01 d0                	add    eax,edx
c0012154:	8b 00                	mov    eax,DWORD PTR [eax]
c0012156:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001215a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001215e:	83 e0 01             	and    eax,0x1
c0012161:	0f 84 a8 00 00 00    	je     c001220f <VAS::~VAS()+0x117>
c0012167:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001216f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012177:	7f 72                	jg     c00121eb <VAS::~VAS()+0xf3>
c0012179:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001217d:	c1 e0 0a             	shl    eax,0xa
c0012180:	89 c2                	mov    edx,eax
c0012182:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012186:	01 d0                	add    eax,edx
c0012188:	c1 e0 0c             	shl    eax,0xc
c001218b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001218f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012194:	8b 00                	mov    eax,DWORD PTR [eax]
c0012196:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012199:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001219f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121a3:	6a 01                	push   0x1
c00121a5:	50                   	push   eax
c00121a6:	e8 07 fd ff ff       	call   c0011eb2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121ab:	83 c4 0c             	add    esp,0xc
c00121ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00121b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121c0:	25 01 04 00 00       	and    eax,0x401
c00121c5:	3d 01 04 00 00       	cmp    eax,0x401
c00121ca:	75 19                	jne    c00121e5 <VAS::~VAS()+0xed>
c00121cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121d5:	83 ec 0c             	sub    esp,0xc
c00121d8:	50                   	push   eax
c00121d9:	e8 ac dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c00121de:	83 c4 10             	add    esp,0x10
c00121e1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121e5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121e9:	eb 84                	jmp    c001216f <VAS::~VAS()+0x77>
c00121eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ef:	25 00 04 00 00       	and    eax,0x400
c00121f4:	74 19                	je     c001220f <VAS::~VAS()+0x117>
c00121f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121ff:	83 ec 0c             	sub    esp,0xc
c0012202:	50                   	push   eax
c0012203:	e8 82 dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c0012208:	83 c4 10             	add    esp,0x10
c001220b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001220f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012213:	e9 1e ff ff ff       	jmp    c0012136 <VAS::~VAS()+0x3e>
c0012218:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001221c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001221f:	83 ec 0c             	sub    esp,0xc
c0012222:	50                   	push   eax
c0012223:	e8 d5 fc ff ff       	call   c0011efd <Virt::freeKernelVirtualPages(unsigned long)>
c0012228:	83 c4 10             	add    esp,0x10
c001222b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012232:	83 ec 0c             	sub    esp,0xc
c0012235:	50                   	push   eax
c0012236:	e8 4f dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c001223b:	83 c4 10             	add    esp,0x10
c001223e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012242:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012246:	c1 e0 02             	shl    eax,0x2
c0012249:	83 ec 08             	sub    esp,0x8
c001224c:	50                   	push   eax
c001224d:	68 10 b0 02 c0       	push   0xc002b010
c0012252:	e8 ec 0b 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012257:	83 c4 10             	add    esp,0x10
c001225a:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001225f:	48                   	dec    eax
c0012260:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0012265:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001226a:	85 c0                	test   eax,eax
c001226c:	75 01                	jne    c001226f <VAS::~VAS()+0x177>
c001226e:	fb                   	sti    
c001226f:	90                   	nop
c0012270:	83 c4 2c             	add    esp,0x2c
c0012273:	c3                   	ret    

c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012274:	55                   	push   ebp
c0012275:	57                   	push   edi
c0012276:	56                   	push   esi
c0012277:	53                   	push   ebx
c0012278:	83 ec 1c             	sub    esp,0x1c
c001227b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001227f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012283:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012289:	77 08                	ja     c0012293 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001228b:	0f 20 d8             	mov    eax,cr3
c001228e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012291:	75 47                	jne    c00122da <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012293:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012297:	09 d8                	or     eax,ebx
c0012299:	a9 ff 0f 00 00       	test   eax,0xfff
c001229e:	75 57                	jne    c00122f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122a0:	89 de                	mov    esi,ebx
c00122a2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122a5:	c1 ee 16             	shr    esi,0x16
c00122a8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122af:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122b3:	74 54                	je     c0012309 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122b9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122bf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122c3:	c1 e6 0c             	shl    esi,0xc
c00122c6:	c1 eb 0a             	shr    ebx,0xa
c00122c9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122cf:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122d2:	83 c4 1c             	add    esp,0x1c
c00122d5:	5b                   	pop    ebx
c00122d6:	5e                   	pop    esi
c00122d7:	5f                   	pop    edi
c00122d8:	5d                   	pop    ebp
c00122d9:	c3                   	ret    
c00122da:	83 ec 0c             	sub    esp,0xc
c00122dd:	68 30 b0 02 c0       	push   0xc002b030
c00122e2:	e8 5c 0b 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122ee:	09 d8                	or     eax,ebx
c00122f0:	a9 ff 0f 00 00       	test   eax,0xfff
c00122f5:	74 a9                	je     c00122a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122f7:	83 ec 0c             	sub    esp,0xc
c00122fa:	68 98 b0 02 c0       	push   0xc002b098
c00122ff:	e8 09 85 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0012304:	83 c4 10             	add    esp,0x10
c0012307:	eb 97                	jmp    c00122a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012309:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001230d:	e8 02 dc ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012312:	83 ec 0c             	sub    esp,0xc
c0012315:	89 c5                	mov    ebp,eax
c0012317:	8b 0d f0 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f0f0
c001231d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012321:	6a 01                	push   0x1
c0012323:	e8 15 f7 ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0012328:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001232f:	6a 01                	push   0x1
c0012331:	50                   	push   eax
c0012332:	55                   	push   ebp
c0012333:	81 cd 07 04 00 00    	or     ebp,0x407
c0012339:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001233d:	51                   	push   ecx
c001233e:	e8 27 02 00 00       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012343:	83 c4 1c             	add    esp,0x1c
c0012346:	68 00 10 00 00       	push   0x1000
c001234b:	6a 00                	push   0x0
c001234d:	50                   	push   eax
c001234e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012352:	e8 15 e4 fe ff       	call   c000076c <memset>
c0012357:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001235b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001235e:	e8 9a fb ff ff       	call   c0011efd <Virt::freeKernelVirtualPages(unsigned long)>
c0012363:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012367:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001236a:	83 c4 10             	add    esp,0x10
c001236d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012370:	e9 40 ff ff ff       	jmp    c00122b5 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012375:	90                   	nop

c0012376 <VAS::allocatePages(int, int)>:
c0012376:	55                   	push   ebp
c0012377:	57                   	push   edi
c0012378:	56                   	push   esi
c0012379:	53                   	push   ebx
c001237a:	83 ec 1c             	sub    esp,0x1c
c001237d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012381:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0012386:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001238c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012392:	83 e0 01             	and    eax,0x1
c0012395:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012399:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001239d:	0f 85 cc 00 00 00    	jne    c001246f <VAS::allocatePages(int, int)+0xf9>
c00123a3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123aa:	85 c0                	test   eax,eax
c00123ac:	0f 84 a1 00 00 00    	je     c0012453 <VAS::allocatePages(int, int)+0xdd>
c00123b2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ba:	c1 e6 0c             	shl    esi,0xc
c00123bd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123c1:	85 c0                	test   eax,eax
c00123c3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123c6:	7e 33                	jle    c00123fb <VAS::allocatePages(int, int)+0x85>
c00123c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d0:	81 cd 00 04 00 00    	or     ebp,0x400
c00123d6:	e8 39 db ff ff       	call   c000ff14 <Phys::allocatePage()>
c00123db:	55                   	push   ebp
c00123dc:	53                   	push   ebx
c00123dd:	50                   	push   eax
c00123de:	57                   	push   edi
c00123df:	e8 90 fe ff ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123e4:	83 c4 10             	add    esp,0x10
c00123e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123ec:	74 03                	je     c00123f1 <VAS::allocatePages(int, int)+0x7b>
c00123ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123f7:	39 de                	cmp    esi,ebx
c00123f9:	75 db                	jne    c00123d6 <VAS::allocatePages(int, int)+0x60>
c00123fb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012400:	75 12                	jne    c0012414 <VAS::allocatePages(int, int)+0x9e>
c0012402:	0f 20 d8             	mov    eax,cr3
c0012405:	0f 22 d8             	mov    cr3,eax
c0012408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001240c:	83 c4 1c             	add    esp,0x1c
c001240f:	5b                   	pop    ebx
c0012410:	5e                   	pop    esi
c0012411:	5f                   	pop    edi
c0012412:	5d                   	pop    ebp
c0012413:	c3                   	ret    
c0012414:	c1 ee 0a             	shr    esi,0xa
c0012417:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001241b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012421:	c1 eb 0a             	shr    ebx,0xa
c0012424:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001242a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012430:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012436:	39 c3                	cmp    ebx,eax
c0012438:	77 ce                	ja     c0012408 <VAS::allocatePages(int, int)+0x92>
c001243a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001243d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012443:	39 d8                	cmp    eax,ebx
c0012445:	73 f3                	jae    c001243a <VAS::allocatePages(int, int)+0xc4>
c0012447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001244b:	83 c4 1c             	add    esp,0x1c
c001244e:	5b                   	pop    ebx
c001244f:	5e                   	pop    esi
c0012450:	5f                   	pop    edi
c0012451:	5d                   	pop    ebp
c0012452:	c3                   	ret    
c0012453:	83 ec 0c             	sub    esp,0xc
c0012456:	68 bc b0 02 c0       	push   0xc002b0bc
c001245b:	e8 ad 83 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0012460:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012463:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012467:	83 c4 10             	add    esp,0x10
c001246a:	e9 43 ff ff ff       	jmp    c00123b2 <VAS::allocatePages(int, int)+0x3c>
c001246f:	83 ec 0c             	sub    esp,0xc
c0012472:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012476:	e8 c2 f5 ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c001247b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001247f:	83 c4 10             	add    esp,0x10
c0012482:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012487:	0f 87 9b 00 00 00    	ja     c0012528 <VAS::allocatePages(int, int)+0x1b2>
c001248d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012491:	85 d2                	test   edx,edx
c0012493:	7e 3c                	jle    c00124d1 <VAS::allocatePages(int, int)+0x15b>
c0012495:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012499:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001249d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124a1:	c1 e5 0c             	shl    ebp,0xc
c00124a4:	81 ce 00 04 00 00    	or     esi,0x400
c00124aa:	01 dd                	add    ebp,ebx
c00124ac:	e8 63 da ff ff       	call   c000ff14 <Phys::allocatePage()>
c00124b1:	56                   	push   esi
c00124b2:	53                   	push   ebx
c00124b3:	50                   	push   eax
c00124b4:	57                   	push   edi
c00124b5:	e8 ba fd ff ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ba:	83 c4 10             	add    esp,0x10
c00124bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124c2:	74 03                	je     c00124c7 <VAS::allocatePages(int, int)+0x151>
c00124c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124cd:	39 dd                	cmp    ebp,ebx
c00124cf:	75 db                	jne    c00124ac <VAS::allocatePages(int, int)+0x136>
c00124d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d6:	0f 84 26 ff ff ff    	je     c0012402 <VAS::allocatePages(int, int)+0x8c>
c00124dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124e4:	89 d3                	mov    ebx,edx
c00124e6:	c1 e0 0c             	shl    eax,0xc
c00124e9:	c1 eb 0a             	shr    ebx,0xa
c00124ec:	01 d0                	add    eax,edx
c00124ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124f4:	c1 e8 0a             	shr    eax,0xa
c00124f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012502:	2d 00 00 40 00       	sub    eax,0x400000
c0012507:	39 c3                	cmp    ebx,eax
c0012509:	0f 87 f9 fe ff ff    	ja     c0012408 <VAS::allocatePages(int, int)+0x92>
c001250f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012512:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012518:	39 d8                	cmp    eax,ebx
c001251a:	73 f3                	jae    c001250f <VAS::allocatePages(int, int)+0x199>
c001251c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012520:	83 c4 1c             	add    esp,0x1c
c0012523:	5b                   	pop    ebx
c0012524:	5e                   	pop    esi
c0012525:	5f                   	pop    edi
c0012526:	5d                   	pop    ebp
c0012527:	c3                   	ret    
c0012528:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001252d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012533:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001253a:	0f 84 4d ff ff ff    	je     c001248d <VAS::allocatePages(int, int)+0x117>
c0012540:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012548:	e9 40 ff ff ff       	jmp    c001248d <VAS::allocatePages(int, int)+0x117>
c001254d:	90                   	nop

c001254e <VAS::setCPUSpecific(unsigned long)>:
c001254e:	83 ec 0c             	sub    esp,0xc
c0012551:	6a 05                	push   0x5
c0012553:	68 00 00 40 c2       	push   0xc2400000
c0012558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001255c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012560:	e8 0f fd ff ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012565:	83 c4 1c             	add    esp,0x1c
c0012568:	c3                   	ret    
c0012569:	90                   	nop

c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001256a:	55                   	push   ebp
c001256b:	57                   	push   edi
c001256c:	56                   	push   esi
c001256d:	53                   	push   ebx
c001256e:	83 ec 1c             	sub    esp,0x1c
c0012571:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0012576:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001257a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012580:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012584:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001258a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001258e:	83 e0 01             	and    eax,0x1
c0012591:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012599:	85 c0                	test   eax,eax
c001259b:	7e 39                	jle    c00125d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001259d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125a1:	89 f3                	mov    ebx,esi
c00125a3:	c1 e0 0c             	shl    eax,0xc
c00125a6:	01 f0                	add    eax,esi
c00125a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125ac:	55                   	push   ebp
c00125ad:	53                   	push   ebx
c00125ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125b2:	29 f0                	sub    eax,esi
c00125b4:	01 d8                	add    eax,ebx
c00125b6:	50                   	push   eax
c00125b7:	57                   	push   edi
c00125b8:	e8 b7 fc ff ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125bd:	83 c4 10             	add    esp,0x10
c00125c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c5:	74 03                	je     c00125ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125c7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125d4:	75 d6                	jne    c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125db:	75 10                	jne    c00125ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125dd:	0f 20 d8             	mov    eax,cr3
c00125e0:	0f 22 d8             	mov    cr3,eax
c00125e3:	83 c4 1c             	add    esp,0x1c
c00125e6:	89 f0                	mov    eax,esi
c00125e8:	5b                   	pop    ebx
c00125e9:	5e                   	pop    esi
c00125ea:	5f                   	pop    edi
c00125eb:	5d                   	pop    ebp
c00125ec:	c3                   	ret    
c00125ed:	89 f3                	mov    ebx,esi
c00125ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125f3:	c1 eb 0a             	shr    ebx,0xa
c00125f6:	c1 e0 0c             	shl    eax,0xc
c00125f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ff:	01 f0                	add    eax,esi
c0012601:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012607:	c1 e8 0a             	shr    eax,0xa
c001260a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001260f:	2d 00 00 40 00       	sub    eax,0x400000
c0012614:	39 c3                	cmp    ebx,eax
c0012616:	77 cb                	ja     c00125e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012618:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001261b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012621:	39 d8                	cmp    eax,ebx
c0012623:	73 f3                	jae    c0012618 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012625:	83 c4 1c             	add    esp,0x1c
c0012628:	89 f0                	mov    eax,esi
c001262a:	5b                   	pop    ebx
c001262b:	5e                   	pop    esi
c001262c:	5f                   	pop    edi
c001262d:	5d                   	pop    ebp
c001262e:	c3                   	ret    
c001262f:	90                   	nop

c0012630 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012630:	55                   	push   ebp
c0012631:	57                   	push   edi
c0012632:	56                   	push   esi
c0012633:	53                   	push   ebx
c0012634:	83 ec 1c             	sub    esp,0x1c
c0012637:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001263b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001263f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012643:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012647:	a9 ff 0f 00 00       	test   eax,0xfff
c001264c:	75 4a                	jne    c0012698 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001264e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012652:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012655:	c1 eb 16             	shr    ebx,0x16
c0012658:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001265f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012663:	74 4d                	je     c00126b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012665:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012669:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001266d:	c1 e8 0a             	shr    eax,0xa
c0012670:	80 fa 01             	cmp    dl,0x1
c0012673:	19 d2                	sbb    edx,edx
c0012675:	c1 e3 0c             	shl    ebx,0xc
c0012678:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001267c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012682:	25 fc 0f 00 00       	and    eax,0xffc
c0012687:	01 d8                	add    eax,ebx
c0012689:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012690:	83 c4 1c             	add    esp,0x1c
c0012693:	5b                   	pop    ebx
c0012694:	5e                   	pop    esi
c0012695:	5f                   	pop    edi
c0012696:	5d                   	pop    ebp
c0012697:	c3                   	ret    
c0012698:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001269c:	83 ec 0c             	sub    esp,0xc
c001269f:	68 e8 b0 02 c0       	push   0xc002b0e8
c00126a4:	e8 64 81 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126b0:	eb 9c                	jmp    c001264e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126b6:	e8 59 d8 ff ff       	call   c000ff14 <Phys::allocatePage()>
c00126bb:	83 ec 0c             	sub    esp,0xc
c00126be:	89 c5                	mov    ebp,eax
c00126c0:	8b 0d f0 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f0f0
c00126c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126ca:	6a 01                	push   0x1
c00126cc:	e8 6c f3 ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c00126d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126d8:	6a 01                	push   0x1
c00126da:	50                   	push   eax
c00126db:	55                   	push   ebp
c00126dc:	81 cd 07 04 00 00    	or     ebp,0x407
c00126e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126e6:	51                   	push   ecx
c00126e7:	e8 7e fe ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126ec:	83 c4 1c             	add    esp,0x1c
c00126ef:	68 00 10 00 00       	push   0x1000
c00126f4:	6a 00                	push   0x0
c00126f6:	50                   	push   eax
c00126f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126fb:	e8 6c e0 fe ff       	call   c000076c <memset>
c0012700:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012704:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012707:	e8 f1 f7 ff ff       	call   c0011efd <Virt::freeKernelVirtualPages(unsigned long)>
c001270c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012715:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012719:	e9 47 ff ff ff       	jmp    c0012665 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c001271e <VAS::VAS(bool)>:
c001271e:	53                   	push   ebx
c001271f:	83 ec 28             	sub    esp,0x28
c0012722:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012726:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001272a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012739:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012740:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012744:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012748:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001274b:	e8 c4 d7 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012750:	89 c2                	mov    edx,eax
c0012752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012756:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012759:	8b 1d f0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f0
c001275f:	83 ec 0c             	sub    esp,0xc
c0012762:	6a 01                	push   0x1
c0012764:	e8 d4 f2 ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0012769:	83 c4 10             	add    esp,0x10
c001276c:	89 c2                	mov    edx,eax
c001276e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012772:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012775:	83 ec 0c             	sub    esp,0xc
c0012778:	6a 03                	push   0x3
c001277a:	6a 01                	push   0x1
c001277c:	52                   	push   edx
c001277d:	50                   	push   eax
c001277e:	53                   	push   ebx
c001277f:	e8 e6 fd ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012784:	83 c4 20             	add    esp,0x20
c0012787:	89 c2                	mov    edx,eax
c0012789:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012790:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012798:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127a0:	7f 1c                	jg     c00127be <VAS::VAS(bool)+0xa0>
c00127a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127ad:	c1 e2 02             	shl    edx,0x2
c00127b0:	01 d0                	add    eax,edx
c00127b2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127b8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127bc:	eb da                	jmp    c0012798 <VAS::VAS(bool)+0x7a>
c00127be:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127c6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127ce:	7f 7a                	jg     c001284a <VAS::VAS(bool)+0x12c>
c00127d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127d4:	2d 00 02 00 00       	sub    eax,0x200
c00127d9:	c1 e0 0c             	shl    eax,0xc
c00127dc:	83 c8 03             	or     eax,0x3
c00127df:	89 c2                	mov    edx,eax
c00127e1:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00127e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127ec:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127f2:	83 e0 10             	and    eax,0x10
c00127f5:	84 c0                	test   al,al
c00127f7:	74 07                	je     c0012800 <VAS::VAS(bool)+0xe2>
c00127f9:	b8 00 01 00 00       	mov    eax,0x100
c00127fe:	eb 05                	jmp    c0012805 <VAS::VAS(bool)+0xe7>
c0012800:	b8 00 00 00 00       	mov    eax,0x0
c0012805:	09 d0                	or     eax,edx
c0012807:	89 c1                	mov    ecx,eax
c0012809:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001280d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012810:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012814:	c1 e2 02             	shl    edx,0x2
c0012817:	01 d0                	add    eax,edx
c0012819:	89 ca                	mov    edx,ecx
c001281b:	89 10                	mov    DWORD PTR [eax],edx
c001281d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012821:	2d 40 03 00 00       	sub    eax,0x340
c0012826:	83 f8 7f             	cmp    eax,0x7f
c0012829:	77 16                	ja     c0012841 <VAS::VAS(bool)+0x123>
c001282b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012836:	c1 e2 02             	shl    edx,0x2
c0012839:	01 d0                	add    eax,edx
c001283b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012841:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012845:	e9 7c ff ff ff       	jmp    c00127c6 <VAS::VAS(bool)+0xa8>
c001284a:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001284f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012855:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001285b:	83 e0 10             	and    eax,0x10
c001285e:	84 c0                	test   al,al
c0012860:	74 07                	je     c0012869 <VAS::VAS(bool)+0x14b>
c0012862:	b8 03 41 00 00       	mov    eax,0x4103
c0012867:	eb 05                	jmp    c001286e <VAS::VAS(bool)+0x150>
c0012869:	b8 03 40 00 00       	mov    eax,0x4003
c001286e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012872:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012875:	81 c2 20 0c 00 00    	add    edx,0xc20
c001287b:	89 02                	mov    DWORD PTR [edx],eax
c001287d:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0012882:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012888:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001288e:	83 ec 08             	sub    esp,0x8
c0012891:	50                   	push   eax
c0012892:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012896:	e8 b3 fc ff ff       	call   c001254e <VAS::setCPUSpecific(unsigned long)>
c001289b:	83 c4 10             	add    esp,0x10
c001289e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128a5:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00128aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128b6:	83 e0 10             	and    eax,0x10
c00128b9:	84 c0                	test   al,al
c00128bb:	74 07                	je     c00128c4 <VAS::VAS(bool)+0x1a6>
c00128bd:	b8 00 01 00 00       	mov    eax,0x100
c00128c2:	eb 05                	jmp    c00128c9 <VAS::VAS(bool)+0x1ab>
c00128c4:	b8 00 00 00 00       	mov    eax,0x0
c00128c9:	09 c2                	or     edx,eax
c00128cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128d2:	05 fc 0f 00 00       	add    eax,0xffc
c00128d7:	83 ca 03             	or     edx,0x3
c00128da:	89 10                	mov    DWORD PTR [eax],edx
c00128dc:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00128e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e7:	83 ec 0c             	sub    esp,0xc
c00128ea:	50                   	push   eax
c00128eb:	e8 60 1c 00 00       	call   c0014550 <Device::getName()>
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	83 ec 08             	sub    esp,0x8
c00128f6:	68 2d b2 02 c0       	push   0xc002b22d
c00128fb:	50                   	push   eax
c00128fc:	e8 b3 df fe ff       	call   c00008b4 <strcmp>
c0012901:	83 c4 10             	add    esp,0x10
c0012904:	85 c0                	test   eax,eax
c0012906:	0f 94 c0             	sete   al
c0012909:	84 c0                	test   al,al
c001290b:	0f 84 87 00 00 00    	je     c0012998 <VAS::VAS(bool)+0x27a>
c0012911:	fa                   	cli    
c0012912:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0012917:	40                   	inc    eax
c0012918:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001291d:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0012922:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012928:	05 7c 09 00 00       	add    eax,0x97c
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	50                   	push   eax
c0012931:	e8 f4 c9 ff ff       	call   c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012936:	83 c4 10             	add    esp,0x10
c0012939:	25 00 f0 ff ff       	and    eax,0xfffff000
c001293e:	89 c3                	mov    ebx,eax
c0012940:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0012945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294b:	05 7c 09 00 00       	add    eax,0x97c
c0012950:	83 ec 0c             	sub    esp,0xc
c0012953:	50                   	push   eax
c0012954:	e8 d1 c9 ff ff       	call   c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	83 ec 08             	sub    esp,0x8
c001295f:	50                   	push   eax
c0012960:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012964:	e8 75 f5 ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	8b 00                	mov    eax,DWORD PTR [eax]
c001296e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012973:	6a 11                	push   0x11
c0012975:	53                   	push   ebx
c0012976:	50                   	push   eax
c0012977:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001297b:	e8 f4 f8 ff ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012980:	83 c4 10             	add    esp,0x10
c0012983:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0012988:	48                   	dec    eax
c0012989:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001298e:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0012993:	85 c0                	test   eax,eax
c0012995:	75 01                	jne    c0012998 <VAS::VAS(bool)+0x27a>
c0012997:	fb                   	sti    
c0012998:	90                   	nop
c0012999:	83 c4 28             	add    esp,0x28
c001299c:	5b                   	pop    ebx
c001299d:	c3                   	ret    

c001299e <VAS::evict(unsigned long)>:
c001299e:	55                   	push   ebp
c001299f:	57                   	push   edi
c00129a0:	56                   	push   esi
c00129a1:	53                   	push   ebx
c00129a2:	83 ec 1c             	sub    esp,0x1c
c00129a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129a9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129b1:	e8 c8 f1 ff ff       	call   c0011b7e <Virt::allocateSwapfilePage()>
c00129b6:	89 c7                	mov    edi,eax
c00129b8:	a1 0c df 02 c0       	mov    eax,ds:0xc002df0c
c00129bd:	85 c0                	test   eax,eax
c00129bf:	7e 3d                	jle    c00129fe <VAS::evict(unsigned long)+0x60>
c00129c1:	89 ee                	mov    esi,ebp
c00129c3:	31 db                	xor    ebx,ebx
c00129c5:	83 ec 0c             	sub    esp,0xc
c00129c8:	57                   	push   edi
c00129c9:	e8 9e f1 ff ff       	call   c0011b6c <Virt::swapIDToSector(unsigned long)>
c00129ce:	89 34 24             	mov    DWORD PTR [esp],esi
c00129d1:	01 d8                	add    eax,ebx
c00129d3:	6a 01                	push   0x1
c00129d5:	31 d2                	xor    edx,edx
c00129d7:	43                   	inc    ebx
c00129d8:	52                   	push   edx
c00129d9:	81 c6 00 02 00 00    	add    esi,0x200
c00129df:	50                   	push   eax
c00129e0:	0f be 05 18 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002df18
c00129e7:	ff 34 85 7c f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b84]
c00129ee:	e8 33 3e 00 00       	call   c0016826 <LogicalDisk::write(unsigned long long, int, void*)>
c00129f3:	83 c4 20             	add    esp,0x20
c00129f6:	39 1d 0c df 02 c0    	cmp    DWORD PTR ds:0xc002df0c,ebx
c00129fc:	7f c7                	jg     c00129c5 <VAS::evict(unsigned long)+0x27>
c00129fe:	83 ec 08             	sub    esp,0x8
c0012a01:	c1 e7 0b             	shl    edi,0xb
c0012a04:	55                   	push   ebp
c0012a05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a09:	e8 d0 f4 ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c0012a0e:	83 c4 0c             	add    esp,0xc
c0012a11:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a13:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a19:	09 d7                	or     edi,edx
c0012a1b:	89 38                	mov    DWORD PTR [eax],edi
c0012a1d:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0012a22:	40                   	inc    eax
c0012a23:	a3 e8 f0 02 c0       	mov    ds:0xc002f0e8,eax
c0012a28:	0f 20 da             	mov    edx,cr3
c0012a2b:	0f 22 da             	mov    cr3,edx
c0012a2e:	50                   	push   eax
c0012a2f:	55                   	push   ebp
c0012a30:	68 3b b2 02 c0       	push   0xc002b23b
c0012a35:	e8 09 04 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012a3a:	a1 e4 f0 02 c0       	mov    eax,ds:0xc002f0e4
c0012a3f:	c7 44 24 40 50 b2 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b250
c0012a47:	8d 50 01             	lea    edx,[eax+0x1]
c0012a4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a4e:	89 15 e4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e4,edx
c0012a54:	83 c4 2c             	add    esp,0x2c
c0012a57:	5b                   	pop    ebx
c0012a58:	5e                   	pop    esi
c0012a59:	5f                   	pop    edi
c0012a5a:	5d                   	pop    ebp
c0012a5b:	e9 e3 03 00 00       	jmp    c0012e43 <Dbg::kprintf(char const*, ...)>

c0012a60 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a60:	55                   	push   ebp
c0012a61:	57                   	push   edi
c0012a62:	56                   	push   esi
c0012a63:	53                   	push   ebx
c0012a64:	83 ec 0c             	sub    esp,0xc
c0012a67:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a6b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a71:	0f 84 dc 00 00 00    	je     c0012b53 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a77:	56                   	push   esi
c0012a78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a7c:	e8 5d f4 ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c0012a81:	5b                   	pop    ebx
c0012a82:	85 c0                	test   eax,eax
c0012a84:	5f                   	pop    edi
c0012a85:	89 c3                	mov    ebx,eax
c0012a87:	0f 84 c6 00 00 00    	je     c0012b53 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a8d:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a8f:	31 c0                	xor    eax,eax
c0012a91:	89 fa                	mov    edx,edi
c0012a93:	81 e2 01 04 00 00    	and    edx,0x401
c0012a99:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a9f:	0f 85 b0 00 00 00    	jne    c0012b55 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012aa5:	e8 6a d4 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012aaa:	c1 ef 0b             	shr    edi,0xb
c0012aad:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012aaf:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012ab5:	09 c2                	or     edx,eax
c0012ab7:	81 ca 01 08 00 00    	or     edx,0x801
c0012abd:	89 13                	mov    DWORD PTR [ebx],edx
c0012abf:	8b 0d 0c df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df0c
c0012ac5:	85 c9                	test   ecx,ecx
c0012ac7:	7e 3d                	jle    c0012b06 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012ac9:	89 f5                	mov    ebp,esi
c0012acb:	31 db                	xor    ebx,ebx
c0012acd:	83 ec 0c             	sub    esp,0xc
c0012ad0:	57                   	push   edi
c0012ad1:	e8 96 f0 ff ff       	call   c0011b6c <Virt::swapIDToSector(unsigned long)>
c0012ad6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ad9:	01 d8                	add    eax,ebx
c0012adb:	6a 01                	push   0x1
c0012add:	31 d2                	xor    edx,edx
c0012adf:	43                   	inc    ebx
c0012ae0:	52                   	push   edx
c0012ae1:	81 c5 00 02 00 00    	add    ebp,0x200
c0012ae7:	50                   	push   eax
c0012ae8:	0f be 05 18 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002df18
c0012aef:	ff 34 85 7c f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b84]
c0012af6:	e8 bf 3c 00 00       	call   c00167ba <LogicalDisk::read(unsigned long long, int, void*)>
c0012afb:	83 c4 20             	add    esp,0x20
c0012afe:	39 1d 0c df 02 c0    	cmp    DWORD PTR ds:0xc002df0c,ebx
c0012b04:	7f c7                	jg     c0012acd <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b06:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0012b0b:	48                   	dec    eax
c0012b0c:	52                   	push   edx
c0012b0d:	a3 e8 f0 02 c0       	mov    ds:0xc002f0e8,eax
c0012b12:	50                   	push   eax
c0012b13:	56                   	push   esi
c0012b14:	68 61 b2 02 c0       	push   0xc002b261
c0012b19:	e8 25 03 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012b1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b21:	e8 28 f0 ff ff       	call   c0011b4e <Virt::freeSwapfilePage(unsigned long)>
c0012b26:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	48                   	dec    eax
c0012b2f:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0012b34:	85 c0                	test   eax,eax
c0012b36:	75 01                	jne    c0012b39 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b38:	fb                   	sti    
c0012b39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b3d:	25 ff 0f 00 00       	and    eax,0xfff
c0012b42:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b47:	77 14                	ja     c0012b5d <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b49:	0f 20 d8             	mov    eax,cr3
c0012b4c:	0f 22 d8             	mov    cr3,eax
c0012b4f:	b0 01                	mov    al,0x1
c0012b51:	eb 02                	jmp    c0012b55 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b53:	31 c0                	xor    eax,eax
c0012b55:	83 c4 0c             	add    esp,0xc
c0012b58:	5b                   	pop    ebx
c0012b59:	5e                   	pop    esi
c0012b5a:	5f                   	pop    edi
c0012b5b:	5d                   	pop    ebp
c0012b5c:	c3                   	ret    
c0012b5d:	83 ec 0c             	sub    esp,0xc
c0012b60:	68 76 b2 02 c0       	push   0xc002b276
c0012b65:	e8 d9 02 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012b6a:	83 c4 10             	add    esp,0x10
c0012b6d:	eb da                	jmp    c0012b49 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b6f:	90                   	nop

c0012b70 <VAS::scanForEviction()>:
c0012b70:	57                   	push   edi
c0012b71:	56                   	push   esi
c0012b72:	53                   	push   ebx
c0012b73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b77:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b7a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b80:	75 0e                	jne    c0012b90 <VAS::scanForEviction()+0x20>
c0012b82:	89 da                	mov    edx,ebx
c0012b84:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b87:	c1 ea 16             	shr    edx,0x16
c0012b8a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b8e:	74 48                	je     c0012bd8 <VAS::scanForEviction()+0x68>
c0012b90:	53                   	push   ebx
c0012b91:	56                   	push   esi
c0012b92:	e8 47 f3 ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c0012b97:	5a                   	pop    edx
c0012b98:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b9a:	59                   	pop    ecx
c0012b9b:	89 fa                	mov    edx,edi
c0012b9d:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012ba3:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012ba9:	74 3d                	je     c0012be8 <VAS::scanForEviction()+0x78>
c0012bab:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012bb1:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bb7:	76 2a                	jbe    c0012be3 <VAS::scanForEviction()+0x73>
c0012bb9:	31 db                	xor    ebx,ebx
c0012bbb:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bc2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bc8:	75 c6                	jne    c0012b90 <VAS::scanForEviction()+0x20>
c0012bca:	89 da                	mov    edx,ebx
c0012bcc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bcf:	c1 ea 16             	shr    edx,0x16
c0012bd2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bd6:	75 b8                	jne    c0012b90 <VAS::scanForEviction()+0x20>
c0012bd8:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012bde:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012be1:	eb 97                	jmp    c0012b7a <VAS::scanForEviction()+0xa>
c0012be3:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012be6:	eb 92                	jmp    c0012b7a <VAS::scanForEviction()+0xa>
c0012be8:	f7 c7 01 00 00 00    	test   edi,0x1
c0012bee:	74 bb                	je     c0012bab <VAS::scanForEviction()+0x3b>
c0012bf0:	f7 c7 20 00 00 00    	test   edi,0x20
c0012bf6:	74 0a                	je     c0012c02 <VAS::scanForEviction()+0x92>
c0012bf8:	83 e7 df             	and    edi,0xffffffdf
c0012bfb:	89 38                	mov    DWORD PTR [eax],edi
c0012bfd:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c00:	eb a9                	jmp    c0012bab <VAS::scanForEviction()+0x3b>
c0012c02:	83 ec 08             	sub    esp,0x8
c0012c05:	53                   	push   ebx
c0012c06:	56                   	push   esi
c0012c07:	e8 92 fd ff ff       	call   c001299e <VAS::evict(unsigned long)>
c0012c0c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c13:	83 c4 10             	add    esp,0x10
c0012c16:	89 f8                	mov    eax,edi
c0012c18:	5b                   	pop    ebx
c0012c19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c1e:	5e                   	pop    esi
c0012c1f:	5f                   	pop    edi
c0012c20:	c3                   	ret    

c0012c21 <mapVASFirstTime>:
c0012c21:	55                   	push   ebp
c0012c22:	57                   	push   edi
c0012c23:	56                   	push   esi
c0012c24:	53                   	push   ebx
c0012c25:	83 ec 0c             	sub    esp,0xc
c0012c28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c2d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c30:	4a                   	dec    edx
c0012c31:	0f 84 8e 00 00 00    	je     c0012cc5 <mapVASFirstTime+0xa4>
c0012c37:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c3a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c3d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c42:	c1 e5 15             	shl    ebp,0x15
c0012c45:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c4a:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c50:	29 eb                	sub    ebx,ebp
c0012c52:	29 ee                	sub    esi,ebp
c0012c54:	e8 bb d2 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012c59:	83 ec 0c             	sub    esp,0xc
c0012c5c:	68 03 04 00 00       	push   0x403
c0012c61:	6a 01                	push   0x1
c0012c63:	53                   	push   ebx
c0012c64:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c6a:	50                   	push   eax
c0012c6b:	57                   	push   edi
c0012c6c:	e8 f9 f8 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c71:	83 c4 20             	add    esp,0x20
c0012c74:	39 f3                	cmp    ebx,esi
c0012c76:	75 dc                	jne    c0012c54 <mapVASFirstTime+0x33>
c0012c78:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c7d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c82:	29 ee                	sub    esi,ebp
c0012c84:	29 e8                	sub    eax,ebp
c0012c86:	89 c5                	mov    ebp,eax
c0012c88:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c8c:	19 db                	sbb    ebx,ebx
c0012c8e:	e8 81 d2 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012c93:	83 e3 04             	and    ebx,0x4
c0012c96:	83 ec 0c             	sub    esp,0xc
c0012c99:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c9f:	53                   	push   ebx
c0012ca0:	6a 01                	push   0x1
c0012ca2:	56                   	push   esi
c0012ca3:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012ca9:	50                   	push   eax
c0012caa:	57                   	push   edi
c0012cab:	e8 ba f8 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cb0:	83 c4 20             	add    esp,0x20
c0012cb3:	39 f5                	cmp    ebp,esi
c0012cb5:	75 d1                	jne    c0012c88 <mapVASFirstTime+0x67>
c0012cb7:	0f 20 d8             	mov    eax,cr3
c0012cba:	0f 22 d8             	mov    cr3,eax
c0012cbd:	83 c4 0c             	add    esp,0xc
c0012cc0:	5b                   	pop    ebx
c0012cc1:	5e                   	pop    esi
c0012cc2:	5f                   	pop    edi
c0012cc3:	5d                   	pop    ebp
c0012cc4:	c3                   	ret    
c0012cc5:	83 ec 0c             	sub    esp,0xc
c0012cc8:	68 86 b2 02 c0       	push   0xc002b286
c0012ccd:	e8 71 01 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	83 c4 0c             	add    esp,0xc
c0012cd8:	5b                   	pop    ebx
c0012cd9:	5e                   	pop    esi
c0012cda:	5f                   	pop    edi
c0012cdb:	5d                   	pop    ebp
c0012cdc:	c3                   	ret    

c0012cdd <__cxa_atexit>:
c0012cdd:	31 c0                	xor    eax,eax
c0012cdf:	c3                   	ret    

c0012ce0 <__cxa_finalize>:
c0012ce0:	c3                   	ret    

c0012ce1 <__stack_chk_fail>:
c0012ce1:	55                   	push   ebp
c0012ce2:	89 e5                	mov    ebp,esp
c0012ce4:	83 ec 14             	sub    esp,0x14
c0012ce7:	68 9f b2 02 c0       	push   0xc002b29f
c0012cec:	e8 52 01 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012cf1:	58                   	pop    eax
c0012cf2:	5a                   	pop    edx
c0012cf3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012cf6:	68 ef b2 02 c0       	push   0xc002b2ef
c0012cfb:	e8 43 01 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012d00:	59                   	pop    ecx
c0012d01:	58                   	pop    eax
c0012d02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d05:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d08:	68 ef b2 02 c0       	push   0xc002b2ef
c0012d0d:	e8 31 01 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012d12:	5a                   	pop    edx
c0012d13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d16:	59                   	pop    ecx
c0012d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d19:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d1c:	68 ef b2 02 c0       	push   0xc002b2ef
c0012d21:	e8 1d 01 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012d26:	5a                   	pop    edx
c0012d27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d2a:	59                   	pop    ecx
c0012d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d2f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d32:	68 ef b2 02 c0       	push   0xc002b2ef
c0012d37:	e8 07 01 00 00       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0012d3c:	c7 04 24 f7 b2 02 c0 	mov    DWORD PTR [esp],0xc002b2f7
c0012d43:	e8 c5 7a 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0012d48:	83 c4 10             	add    esp,0x10
c0012d4b:	c9                   	leave  
c0012d4c:	c3                   	ret    

c0012d4d <__cxa_pure_virtual>:
c0012d4d:	83 ec 18             	sub    esp,0x18
c0012d50:	68 0f b3 02 c0       	push   0xc002b30f
c0012d55:	e8 b3 7a 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0012d5a:	83 c4 1c             	add    esp,0x1c
c0012d5d:	c3                   	ret    

c0012d5e <operator new[](unsigned long)>:
c0012d5e:	e9 45 cb ff ff       	jmp    c000f8a8 <malloc>

c0012d63 <operator delete(void*, unsigned long)>:
c0012d63:	e9 60 cb ff ff       	jmp    c000f8c8 <rfree>

c0012d68 <operator delete[](void*)>:
c0012d68:	e9 5b cb ff ff       	jmp    c000f8c8 <rfree>

c0012d6d <operator delete[](void*, unsigned long)>:
c0012d6d:	e9 56 cb ff ff       	jmp    c000f8c8 <rfree>

c0012d72 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d72:	57                   	push   edi
c0012d73:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d78:	56                   	push   esi
c0012d79:	be 24 b3 02 c0       	mov    esi,0xc002b324
c0012d7e:	53                   	push   ebx
c0012d7f:	83 ec 40             	sub    esp,0x40
c0012d82:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d86:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d8a:	fc                   	cld    
c0012d8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d8d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d91:	83 f9 3e             	cmp    ecx,0x3e
c0012d94:	7e 05                	jle    c0012d9b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d96:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d9b:	89 df                	mov    edi,ebx
c0012d9d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012da1:	eb 02                	jmp    c0012da5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012da3:	89 c7                	mov    edi,eax
c0012da5:	31 d2                	xor    edx,edx
c0012da7:	46                   	inc    esi
c0012da8:	89 f8                	mov    eax,edi
c0012daa:	f7 f1                	div    ecx
c0012dac:	39 cf                	cmp    edi,ecx
c0012dae:	73 f3                	jae    c0012da3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012db0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012db3:	eb 02                	jmp    c0012db7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012db5:	89 c3                	mov    ebx,eax
c0012db7:	31 d2                	xor    edx,edx
c0012db9:	4e                   	dec    esi
c0012dba:	89 d8                	mov    eax,ebx
c0012dbc:	f7 f1                	div    ecx
c0012dbe:	39 cb                	cmp    ebx,ecx
c0012dc0:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012dc4:	88 16                	mov    BYTE PTR [esi],dl
c0012dc6:	73 ed                	jae    c0012db5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dc8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012dcc:	83 c4 40             	add    esp,0x40
c0012dcf:	5b                   	pop    ebx
c0012dd0:	5e                   	pop    esi
c0012dd1:	5f                   	pop    edi
c0012dd2:	c3                   	ret    

c0012dd3 <Dbg::logc(char)>:
c0012dd3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012dd7:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ddc:	ec                   	in     al,dx
c0012ddd:	a8 20                	test   al,0x20
c0012ddf:	74 fb                	je     c0012ddc <Dbg::logc(char)+0x9>
c0012de1:	ba f8 03 00 00       	mov    edx,0x3f8
c0012de6:	88 c8                	mov    al,cl
c0012de8:	ee                   	out    dx,al
c0012de9:	c3                   	ret    

c0012dea <Dbg::logs(char*)>:
c0012dea:	53                   	push   ebx
c0012deb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012def:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012df2:	84 c0                	test   al,al
c0012df4:	74 0f                	je     c0012e05 <Dbg::logs(char*)+0x1b>
c0012df6:	50                   	push   eax
c0012df7:	43                   	inc    ebx
c0012df8:	e8 d6 ff ff ff       	call   c0012dd3 <Dbg::logc(char)>
c0012dfd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e00:	5a                   	pop    edx
c0012e01:	84 c0                	test   al,al
c0012e03:	75 f1                	jne    c0012df6 <Dbg::logs(char*)+0xc>
c0012e05:	5b                   	pop    ebx
c0012e06:	c3                   	ret    

c0012e07 <Dbg::logWriteInt(unsigned int)>:
c0012e07:	83 ec 10             	sub    esp,0x10
c0012e0a:	6a 0a                	push   0xa
c0012e0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e10:	50                   	push   eax
c0012e11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e15:	e8 58 ff ff ff       	call   c0012d72 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e1a:	50                   	push   eax
c0012e1b:	e8 ca ff ff ff       	call   c0012dea <Dbg::logs(char*)>
c0012e20:	83 c4 20             	add    esp,0x20
c0012e23:	c3                   	ret    

c0012e24 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e24:	83 ec 10             	sub    esp,0x10
c0012e27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e2b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e2f:	50                   	push   eax
c0012e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e34:	e8 39 ff ff ff       	call   c0012d72 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e39:	50                   	push   eax
c0012e3a:	e8 ab ff ff ff       	call   c0012dea <Dbg::logs(char*)>
c0012e3f:	83 c4 20             	add    esp,0x20
c0012e42:	c3                   	ret    

c0012e43 <Dbg::kprintf(char const*, ...)>:
c0012e43:	55                   	push   ebp
c0012e44:	57                   	push   edi
c0012e45:	56                   	push   esi
c0012e46:	53                   	push   ebx
c0012e47:	83 ec 0c             	sub    esp,0xc
c0012e4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e4e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e56:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e59:	84 c0                	test   al,al
c0012e5b:	74 4a                	je     c0012ea7 <Dbg::kprintf(char const*, ...)+0x64>
c0012e5d:	31 db                	xor    ebx,ebx
c0012e5f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e62:	3c 25                	cmp    al,0x25
c0012e64:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e67:	0f 85 e4 00 00 00    	jne    c0012f51 <Dbg::kprintf(char const*, ...)+0x10e>
c0012e6d:	83 c3 02             	add    ebx,0x2
c0012e70:	8a 07                	mov    al,BYTE PTR [edi]
c0012e72:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e75:	83 e8 25             	sub    eax,0x25
c0012e78:	3c 53                	cmp    al,0x53
c0012e7a:	0f 87 ba 00 00 00    	ja     c0012f3a <Dbg::kprintf(char const*, ...)+0xf7>
c0012e80:	0f b6 c0             	movzx  eax,al
c0012e83:	ff 24 85 64 b3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4c9c]
c0012e8a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e8e:	89 c8                	mov    eax,ecx
c0012e90:	83 c1 04             	add    ecx,0x4
c0012e93:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e97:	ff 30                	push   DWORD PTR [eax]
c0012e99:	e8 4c ff ff ff       	call   c0012dea <Dbg::logs(char*)>
c0012e9e:	58                   	pop    eax
c0012e9f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ea3:	84 c0                	test   al,al
c0012ea5:	75 b8                	jne    c0012e5f <Dbg::kprintf(char const*, ...)+0x1c>
c0012ea7:	83 c4 0c             	add    esp,0xc
c0012eaa:	5b                   	pop    ebx
c0012eab:	5e                   	pop    esi
c0012eac:	5f                   	pop    edi
c0012ead:	5d                   	pop    ebp
c0012eae:	c3                   	ret    
c0012eaf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012eb3:	89 d0                	mov    eax,edx
c0012eb5:	83 c2 04             	add    edx,0x4
c0012eb8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ebc:	ff 30                	push   DWORD PTR [eax]
c0012ebe:	e8 44 ff ff ff       	call   c0012e07 <Dbg::logWriteInt(unsigned int)>
c0012ec3:	58                   	pop    eax
c0012ec4:	eb d9                	jmp    c0012e9f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ec6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012eca:	89 d0                	mov    eax,edx
c0012ecc:	83 c2 04             	add    edx,0x4
c0012ecf:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ed2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ed6:	50                   	push   eax
c0012ed7:	e8 f7 fe ff ff       	call   c0012dd3 <Dbg::logc(char)>
c0012edc:	58                   	pop    eax
c0012edd:	eb c0                	jmp    c0012e9f <Dbg::kprintf(char const*, ...)+0x5c>
c0012edf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee3:	89 c8                	mov    eax,ecx
c0012ee5:	83 c1 04             	add    ecx,0x4
c0012ee8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012eec:	ff 30                	push   DWORD PTR [eax]
c0012eee:	e8 14 ff ff ff       	call   c0012e07 <Dbg::logWriteInt(unsigned int)>
c0012ef3:	5f                   	pop    edi
c0012ef4:	eb a9                	jmp    c0012e9f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ef6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012efa:	89 c8                	mov    eax,ecx
c0012efc:	83 c1 04             	add    ecx,0x4
c0012eff:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f03:	6a 10                	push   0x10
c0012f05:	ff 30                	push   DWORD PTR [eax]
c0012f07:	e8 18 ff ff ff       	call   c0012e24 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f0c:	59                   	pop    ecx
c0012f0d:	5f                   	pop    edi
c0012f0e:	eb 8f                	jmp    c0012e9f <Dbg::kprintf(char const*, ...)+0x5c>
c0012f10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f14:	89 d0                	mov    eax,edx
c0012f16:	83 c2 08             	add    edx,0x8
c0012f19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f1d:	6a 10                	push   0x10
c0012f1f:	ff 30                	push   DWORD PTR [eax]
c0012f21:	e8 fe fe ff ff       	call   c0012e24 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f26:	58                   	pop    eax
c0012f27:	5a                   	pop    edx
c0012f28:	e9 72 ff ff ff       	jmp    c0012e9f <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2d:	6a 25                	push   0x25
c0012f2f:	e8 9f fe ff ff       	call   c0012dd3 <Dbg::logc(char)>
c0012f34:	58                   	pop    eax
c0012f35:	e9 65 ff ff ff       	jmp    c0012e9f <Dbg::kprintf(char const*, ...)+0x5c>
c0012f3a:	6a 25                	push   0x25
c0012f3c:	e8 92 fe ff ff       	call   c0012dd3 <Dbg::logc(char)>
c0012f41:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f44:	50                   	push   eax
c0012f45:	e8 89 fe ff ff       	call   c0012dd3 <Dbg::logc(char)>
c0012f4a:	5a                   	pop    edx
c0012f4b:	59                   	pop    ecx
c0012f4c:	e9 4e ff ff ff       	jmp    c0012e9f <Dbg::kprintf(char const*, ...)+0x5c>
c0012f51:	50                   	push   eax
c0012f52:	89 eb                	mov    ebx,ebp
c0012f54:	e8 7a fe ff ff       	call   c0012dd3 <Dbg::logc(char)>
c0012f59:	89 fd                	mov    ebp,edi
c0012f5b:	58                   	pop    eax
c0012f5c:	e9 3e ff ff ff       	jmp    c0012e9f <Dbg::kprintf(char const*, ...)+0x5c>
c0012f61:	90                   	nop

c0012f62 <File::read(unsigned long long, void*, int*)>:
c0012f62:	53                   	push   ebx
c0012f63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f67:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f6b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f72:	3c 19                	cmp    al,0x19
c0012f74:	77 35                	ja     c0012fab <File::read(unsigned long long, void*, int*)+0x49>
c0012f76:	8b 04 85 80 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a80]
c0012f7d:	85 c0                	test   eax,eax
c0012f7f:	74 2a                	je     c0012fab <File::read(unsigned long long, void*, int*)+0x49>
c0012f81:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f87:	85 c0                	test   eax,eax
c0012f89:	74 20                	je     c0012fab <File::read(unsigned long long, void*, int*)+0x49>
c0012f8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f8f:	74 21                	je     c0012fb2 <File::read(unsigned long long, void*, int*)+0x50>
c0012f91:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f97:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fa5:	5b                   	pop    ebx
c0012fa6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012fa9:	ff e0                	jmp    eax
c0012fab:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb0:	eb 05                	jmp    c0012fb7 <File::read(unsigned long long, void*, int*)+0x55>
c0012fb2:	b8 05 00 00 00       	mov    eax,0x5
c0012fb7:	5b                   	pop    ebx
c0012fb8:	c3                   	ret    
c0012fb9:	90                   	nop

c0012fba <File::write(unsigned long long, void*, int*)>:
c0012fba:	53                   	push   ebx
c0012fbb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fbf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fc3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fca:	3c 19                	cmp    al,0x19
c0012fcc:	77 35                	ja     c0013003 <File::write(unsigned long long, void*, int*)+0x49>
c0012fce:	8b 04 85 80 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a80]
c0012fd5:	85 c0                	test   eax,eax
c0012fd7:	74 2a                	je     c0013003 <File::write(unsigned long long, void*, int*)+0x49>
c0012fd9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fdf:	85 c0                	test   eax,eax
c0012fe1:	74 20                	je     c0013003 <File::write(unsigned long long, void*, int*)+0x49>
c0012fe3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fe7:	74 21                	je     c001300a <File::write(unsigned long long, void*, int*)+0x50>
c0012fe9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012feb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ff9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ffd:	5b                   	pop    ebx
c0012ffe:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013001:	ff e0                	jmp    eax
c0013003:	b8 0b 00 00 00       	mov    eax,0xb
c0013008:	eb 05                	jmp    c001300f <File::write(unsigned long long, void*, int*)+0x55>
c001300a:	b8 05 00 00 00       	mov    eax,0x5
c001300f:	5b                   	pop    ebx
c0013010:	c3                   	ret    
c0013011:	90                   	nop

c0013012 <Directory::read(unsigned long long, void*, int*)>:
c0013012:	53                   	push   ebx
c0013013:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013017:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001301b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013022:	3c 19                	cmp    al,0x19
c0013024:	77 35                	ja     c001305b <Directory::read(unsigned long long, void*, int*)+0x49>
c0013026:	8b 04 85 80 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a80]
c001302d:	85 c0                	test   eax,eax
c001302f:	74 2a                	je     c001305b <Directory::read(unsigned long long, void*, int*)+0x49>
c0013031:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013037:	85 c0                	test   eax,eax
c0013039:	74 20                	je     c001305b <Directory::read(unsigned long long, void*, int*)+0x49>
c001303b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001303f:	74 21                	je     c0013062 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013041:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013043:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013047:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001304d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013051:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013055:	5b                   	pop    ebx
c0013056:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013059:	ff e0                	jmp    eax
c001305b:	b8 0b 00 00 00       	mov    eax,0xb
c0013060:	eb 05                	jmp    c0013067 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013062:	b8 05 00 00 00       	mov    eax,0x5
c0013067:	5b                   	pop    ebx
c0013068:	c3                   	ret    
c0013069:	90                   	nop

c001306a <Directory::write(unsigned long long, void*, int*)>:
c001306a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001306e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013075:	b8 0b 00 00 00       	mov    eax,0xb
c001307a:	80 fa 19             	cmp    dl,0x19
c001307d:	77 18                	ja     c0013097 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001307f:	8b 14 95 80 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a80]
c0013086:	85 d2                	test   edx,edx
c0013088:	74 0d                	je     c0013097 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001308a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013091:	19 c0                	sbb    eax,eax
c0013093:	83 e0 0a             	and    eax,0xa
c0013096:	40                   	inc    eax
c0013097:	c3                   	ret    

c0013098 <File::isAtty()>:
c0013098:	31 c0                	xor    eax,eax
c001309a:	c3                   	ret    
c001309b:	90                   	nop

c001309c <Directory::isAtty()>:
c001309c:	31 c0                	xor    eax,eax
c001309e:	c3                   	ret    
c001309f:	90                   	nop

c00130a0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130a0:	b8 0a 00 00 00       	mov    eax,0xa
c00130a5:	c3                   	ret    

c00130a6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130a6:	b8 0a 00 00 00       	mov    eax,0xa
c00130ab:	c3                   	ret    

c00130ac <Filesystem::getFileFirstSector(char const*)>:
c00130ac:	31 c0                	xor    eax,eax
c00130ae:	31 d2                	xor    edx,edx
c00130b0:	c3                   	ret    
c00130b1:	90                   	nop

c00130b2 <File::~File()>:
c00130b2:	83 ec 0c             	sub    esp,0xc
c00130b5:	ba 24 b5 02 c0       	mov    edx,0xc002b524
c00130ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130be:	89 10                	mov    DWORD PTR [eax],edx
c00130c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	50                   	push   eax
c00130c8:	e8 0f e7 ff ff       	call   c00117dc <UnixFile::~UnixFile()>
c00130cd:	83 c4 10             	add    esp,0x10
c00130d0:	90                   	nop
c00130d1:	83 c4 0c             	add    esp,0xc
c00130d4:	c3                   	ret    
c00130d5:	90                   	nop

c00130d6 <File::~File()>:
c00130d6:	83 ec 0c             	sub    esp,0xc
c00130d9:	83 ec 0c             	sub    esp,0xc
c00130dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e0:	e8 cd ff ff ff       	call   c00130b2 <File::~File()>
c00130e5:	83 c4 10             	add    esp,0x10
c00130e8:	83 ec 08             	sub    esp,0x8
c00130eb:	68 14 01 00 00       	push   0x114
c00130f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f4:	e8 6a fc ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c00130f9:	83 c4 10             	add    esp,0x10
c00130fc:	83 c4 0c             	add    esp,0xc
c00130ff:	c3                   	ret    

c0013100 <Directory::~Directory()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	89 10                	mov    DWORD PTR [eax],edx
c001310e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	50                   	push   eax
c0013116:	e8 c1 e6 ff ff       	call   c00117dc <UnixFile::~UnixFile()>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	90                   	nop
c001311f:	83 c4 0c             	add    esp,0xc
c0013122:	c3                   	ret    
c0013123:	90                   	nop

c0013124 <Directory::~Directory()>:
c0013124:	83 ec 0c             	sub    esp,0xc
c0013127:	83 ec 0c             	sub    esp,0xc
c001312a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312e:	e8 cd ff ff ff       	call   c0013100 <Directory::~Directory()>
c0013133:	83 c4 10             	add    esp,0x10
c0013136:	83 ec 08             	sub    esp,0x8
c0013139:	68 14 01 00 00       	push   0x114
c001313e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013142:	e8 1c fc ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	83 c4 0c             	add    esp,0xc
c001314d:	c3                   	ret    

c001314e <Filesystem::Filesystem()>:
c001314e:	ba bc b4 02 c0       	mov    edx,0xc002b4bc
c0013153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013157:	89 10                	mov    DWORD PTR [eax],edx
c0013159:	8b 15 f4 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0f4
c001315f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013163:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001316a:	a3 f4 f0 02 c0       	mov    ds:0xc002f0f4,eax
c001316f:	90                   	nop
c0013170:	c3                   	ret    
c0013171:	90                   	nop

c0013172 <Filesystem::~Filesystem()>:
c0013172:	ba bc b4 02 c0       	mov    edx,0xc002b4bc
c0013177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001317b:	89 10                	mov    DWORD PTR [eax],edx
c001317d:	90                   	nop
c001317e:	c3                   	ret    
c001317f:	90                   	nop

c0013180 <Filesystem::~Filesystem()>:
c0013180:	83 ec 0c             	sub    esp,0xc
c0013183:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013187:	e8 e6 ff ff ff       	call   c0013172 <Filesystem::~Filesystem()>
c001318c:	83 c4 04             	add    esp,0x4
c001318f:	83 ec 08             	sub    esp,0x8
c0013192:	6a 08                	push   0x8
c0013194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013198:	e8 c6 fb ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c001319d:	83 c4 10             	add    esp,0x10
c00131a0:	83 c4 0c             	add    esp,0xc
c00131a3:	c3                   	ret    

c00131a4 <Fs::getcwd(Process*, char*, int)>:
c00131a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131a8:	31 c0                	xor    eax,eax
c00131aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131ad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131b1:	7d 15                	jge    c00131c8 <Fs::getcwd(Process*, char*, int)+0x24>
c00131b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131b7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131be:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131c1:	84 c9                	test   cl,cl
c00131c3:	74 06                	je     c00131cb <Fs::getcwd(Process*, char*, int)+0x27>
c00131c5:	40                   	inc    eax
c00131c6:	eb e2                	jmp    c00131aa <Fs::getcwd(Process*, char*, int)+0x6>
c00131c8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131cb:	31 c0                	xor    eax,eax
c00131cd:	c3                   	ret    

c00131ce <Fs::initVFS()>:
c00131ce:	83 ec 18             	sub    esp,0x18
c00131d1:	6a 08                	push   0x8
c00131d3:	e8 d0 c6 ff ff       	call   c000f8a8 <malloc>
c00131d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00131db:	e8 e8 e5 00 00       	call   c00217c8 <FAT::FAT()>
c00131e0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00131e7:	e8 bc c6 ff ff       	call   c000f8a8 <malloc>
c00131ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00131ef:	e8 10 f8 00 00       	call   c0022a04 <ISO9660::ISO9660()>
c00131f4:	83 c4 1c             	add    esp,0x1c
c00131f7:	c3                   	ret    

c00131f8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00131f8:	55                   	push   ebp
c00131f9:	57                   	push   edi
c00131fa:	56                   	push   esi
c00131fb:	53                   	push   ebx
c00131fc:	81 ec 10 04 00 00    	sub    esp,0x410
c0013202:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013209:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013210:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013217:	68 00 04 00 00       	push   0x400
c001321c:	6a 00                	push   0x0
c001321e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013222:	56                   	push   esi
c0013223:	e8 44 d5 fe ff       	call   c000076c <memset>
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001322f:	75 0b                	jne    c001323c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013231:	50                   	push   eax
c0013232:	50                   	push   eax
c0013233:	57                   	push   edi
c0013234:	56                   	push   esi
c0013235:	e8 ee d5 fe ff       	call   c0000828 <strcpy>
c001323a:	eb 41                	jmp    c001327d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001323c:	8a 07                	mov    al,BYTE PTR [edi]
c001323e:	3c 5c                	cmp    al,0x5c
c0013240:	74 04                	je     c0013246 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013242:	3c 2f                	cmp    al,0x2f
c0013244:	75 18                	jne    c001325e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013246:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013249:	3c 60                	cmp    al,0x60
c001324b:	7e 03                	jle    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001324d:	83 e8 20             	sub    eax,0x20
c0013250:	88 04 24             	mov    BYTE PTR [esp],al
c0013253:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001325a:	50                   	push   eax
c001325b:	50                   	push   eax
c001325c:	eb 18                	jmp    c0013276 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001325e:	50                   	push   eax
c001325f:	50                   	push   eax
c0013260:	55                   	push   ebp
c0013261:	56                   	push   esi
c0013262:	e8 c1 d5 fe ff       	call   c0000828 <strcpy>
c0013267:	5a                   	pop    edx
c0013268:	59                   	pop    ecx
c0013269:	68 d1 cc 02 c0       	push   0xc002ccd1
c001326e:	56                   	push   esi
c001326f:	e8 f4 d6 fe ff       	call   c0000968 <strcat>
c0013274:	5d                   	pop    ebp
c0013275:	58                   	pop    eax
c0013276:	57                   	push   edi
c0013277:	56                   	push   esi
c0013278:	e8 eb d6 fe ff       	call   c0000968 <strcat>
c001327d:	83 c4 10             	add    esp,0x10
c0013280:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013283:	3c 60                	cmp    al,0x60
c0013285:	7e 03                	jle    c001328a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013287:	83 e8 20             	sub    eax,0x20
c001328a:	88 04 24             	mov    BYTE PTR [esp],al
c001328d:	88 03                	mov    BYTE PTR [ebx],al
c001328f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013296:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001329c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132a0:	bf 03 00 00 00       	mov    edi,0x3
c00132a5:	b8 03 00 00 00       	mov    eax,0x3
c00132aa:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132ad:	84 d2                	test   dl,dl
c00132af:	0f 84 91 00 00 00    	je     c0013346 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132b5:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132b8:	80 fa 5c             	cmp    dl,0x5c
c00132bb:	74 05                	je     c00132c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132bd:	80 fa 2f             	cmp    dl,0x2f
c00132c0:	75 12                	jne    c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132c2:	89 c5                	mov    ebp,eax
c00132c4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132c9:	74 09                	je     c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132cb:	40                   	inc    eax
c00132cc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132d0:	89 cf                	mov    edi,ecx
c00132d2:	eb d6                	jmp    c00132aa <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132d4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132d9:	75 5b                	jne    c0013336 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132db:	80 fa 2e             	cmp    dl,0x2e
c00132de:	75 56                	jne    c0013336 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132e0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00132e4:	74 19                	je     c00132ff <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00132e6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132eb:	74 53                	je     c0013340 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132ed:	89 f9                	mov    ecx,edi
c00132ef:	41                   	inc    ecx
c00132f0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00132f3:	80 fa 2f             	cmp    dl,0x2f
c00132f6:	74 f7                	je     c00132ef <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132f8:	80 fa 5c             	cmp    dl,0x5c
c00132fb:	74 f2                	je     c00132ef <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132fd:	eb d1                	jmp    c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132ff:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013304:	74 3a                	je     c0013340 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013306:	83 f8 03             	cmp    eax,0x3
c0013309:	74 c5                	je     c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001330b:	41                   	inc    ecx
c001330c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001330f:	80 fa 2f             	cmp    dl,0x2f
c0013312:	74 f7                	je     c001330b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013314:	80 fa 5c             	cmp    dl,0x5c
c0013317:	74 f2                	je     c001330b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013319:	48                   	dec    eax
c001331a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001331e:	75 06                	jne    c0013326 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013320:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013324:	eb f3                	jmp    c0013319 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013326:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001332a:	74 07                	je     c0013333 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001332c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013330:	48                   	dec    eax
c0013331:	eb f3                	jmp    c0013326 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013333:	40                   	inc    eax
c0013334:	eb 9a                	jmp    c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013336:	80 fa 2f             	cmp    dl,0x2f
c0013339:	74 95                	je     c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333b:	80 fa 5c             	cmp    dl,0x5c
c001333e:	74 90                	je     c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013340:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013343:	40                   	inc    eax
c0013344:	eb 8a                	jmp    c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013346:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001334a:	83 ec 0c             	sub    esp,0xc
c001334d:	53                   	push   ebx
c001334e:	e8 35 d4 fe ff       	call   c0000788 <strlen>
c0013353:	83 c4 10             	add    esp,0x10
c0013356:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001335b:	75 26                	jne    c0013383 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001335d:	83 ec 0c             	sub    esp,0xc
c0013360:	53                   	push   ebx
c0013361:	e8 22 d4 fe ff       	call   c0000788 <strlen>
c0013366:	83 c4 10             	add    esp,0x10
c0013369:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001336e:	74 26                	je     c0013396 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013370:	83 ec 0c             	sub    esp,0xc
c0013373:	53                   	push   ebx
c0013374:	e8 0f d4 fe ff       	call   c0000788 <strlen>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013381:	eb c7                	jmp    c001334a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013383:	83 ec 0c             	sub    esp,0xc
c0013386:	53                   	push   ebx
c0013387:	e8 fc d3 fe ff       	call   c0000788 <strlen>
c001338c:	83 c4 10             	add    esp,0x10
c001338f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013394:	74 c7                	je     c001335d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013396:	81 c4 0c 04 00 00    	add    esp,0x40c
c001339c:	5b                   	pop    ebx
c001339d:	5e                   	pop    esi
c001339e:	5f                   	pop    edi
c001339f:	5d                   	pop    ebp
c00133a0:	c3                   	ret    
c00133a1:	90                   	nop

c00133a2 <File::File(char const*, Process*)>:
c00133a2:	83 ec 0c             	sub    esp,0xc
c00133a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a9:	83 ec 08             	sub    esp,0x8
c00133ac:	6a 00                	push   0x0
c00133ae:	50                   	push   eax
c00133af:	e8 46 e2 ff ff       	call   c00115fa <UnixFile::UnixFile(int)>
c00133b4:	83 c4 10             	add    esp,0x10
c00133b7:	ba 24 b5 02 c0       	mov    edx,0xc002b524
c00133bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c0:	89 10                	mov    DWORD PTR [eax],edx
c00133c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d0:	83 c0 0d             	add    eax,0xd
c00133d3:	83 ec 04             	sub    esp,0x4
c00133d6:	52                   	push   edx
c00133d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133db:	50                   	push   eax
c00133dc:	e8 17 fe ff ff       	call   c00131f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00133e1:	83 c4 10             	add    esp,0x10
c00133e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133eb:	8d 50 bf             	lea    edx,[eax-0x41]
c00133ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00133f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013400:	90                   	nop
c0013401:	83 c4 0c             	add    esp,0xc
c0013404:	c3                   	ret    
c0013405:	90                   	nop

c0013406 <File::open(FileOpenMode)>:
c0013406:	53                   	push   ebx
c0013407:	b8 0b 00 00 00       	mov    eax,0xb
c001340c:	83 ec 08             	sub    esp,0x8
c001340f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013413:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001341a:	80 fa 19             	cmp    dl,0x19
c001341d:	77 40                	ja     c001345f <File::open(FileOpenMode)+0x59>
c001341f:	8b 14 95 80 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a80]
c0013426:	85 d2                	test   edx,edx
c0013428:	74 35                	je     c001345f <File::open(FileOpenMode)+0x59>
c001342a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013430:	85 d2                	test   edx,edx
c0013432:	74 2b                	je     c001345f <File::open(FileOpenMode)+0x59>
c0013434:	b8 06 00 00 00       	mov    eax,0x6
c0013439:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001343d:	75 20                	jne    c001345f <File::open(FileOpenMode)+0x59>
c001343f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013441:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013447:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001344b:	51                   	push   ecx
c001344c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001344f:	51                   	push   ecx
c0013450:	52                   	push   edx
c0013451:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013454:	83 c4 10             	add    esp,0x10
c0013457:	85 c0                	test   eax,eax
c0013459:	75 04                	jne    c001345f <File::open(FileOpenMode)+0x59>
c001345b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001345f:	83 c4 08             	add    esp,0x8
c0013462:	5b                   	pop    ebx
c0013463:	c3                   	ret    

c0013464 <File::close()>:
c0013464:	53                   	push   ebx
c0013465:	b8 0b 00 00 00       	mov    eax,0xb
c001346a:	83 ec 08             	sub    esp,0x8
c001346d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013471:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013478:	80 fa 19             	cmp    dl,0x19
c001347b:	77 41                	ja     c00134be <File::close()+0x5a>
c001347d:	8b 1c 95 80 f5 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0a80]
c0013484:	85 db                	test   ebx,ebx
c0013486:	74 36                	je     c00134be <File::close()+0x5a>
c0013488:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001348f:	74 2d                	je     c00134be <File::close()+0x5a>
c0013491:	b8 05 00 00 00       	mov    eax,0x5
c0013496:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001349a:	74 22                	je     c00134be <File::close()+0x5a>
c001349c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134a0:	8b 04 95 80 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0a80]
c00134a7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134ad:	53                   	push   ebx
c00134ae:	53                   	push   ebx
c00134af:	8b 10                	mov    edx,DWORD PTR [eax]
c00134b1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134b7:	50                   	push   eax
c00134b8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	83 c4 08             	add    esp,0x8
c00134c1:	5b                   	pop    ebx
c00134c2:	c3                   	ret    
c00134c3:	90                   	nop

c00134c4 <File::seek(unsigned long long)>:
c00134c4:	56                   	push   esi
c00134c5:	53                   	push   ebx
c00134c6:	b8 0b 00 00 00       	mov    eax,0xb
c00134cb:	51                   	push   ecx
c00134cc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134d4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134df:	80 fa 19             	cmp    dl,0x19
c00134e2:	77 31                	ja     c0013515 <File::seek(unsigned long long)+0x51>
c00134e4:	8b 14 95 80 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a80]
c00134eb:	85 d2                	test   edx,edx
c00134ed:	74 26                	je     c0013515 <File::seek(unsigned long long)+0x51>
c00134ef:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134f5:	85 d2                	test   edx,edx
c00134f7:	74 1c                	je     c0013515 <File::seek(unsigned long long)+0x51>
c00134f9:	b8 05 00 00 00       	mov    eax,0x5
c00134fe:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013502:	74 11                	je     c0013515 <File::seek(unsigned long long)+0x51>
c0013504:	8b 02                	mov    eax,DWORD PTR [edx]
c0013506:	53                   	push   ebx
c0013507:	51                   	push   ecx
c0013508:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001350e:	52                   	push   edx
c001350f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	5a                   	pop    edx
c0013516:	5b                   	pop    ebx
c0013517:	5e                   	pop    esi
c0013518:	c3                   	ret    
c0013519:	90                   	nop

c001351a <File::tell(unsigned long long*)>:
c001351a:	83 ec 0c             	sub    esp,0xc
c001351d:	b8 0b 00 00 00       	mov    eax,0xb
c0013522:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013526:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001352d:	80 fa 19             	cmp    dl,0x19
c0013530:	77 34                	ja     c0013566 <File::tell(unsigned long long*)+0x4c>
c0013532:	8b 14 95 80 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a80]
c0013539:	85 d2                	test   edx,edx
c001353b:	74 29                	je     c0013566 <File::tell(unsigned long long*)+0x4c>
c001353d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013543:	85 d2                	test   edx,edx
c0013545:	74 1f                	je     c0013566 <File::tell(unsigned long long*)+0x4c>
c0013547:	b8 05 00 00 00       	mov    eax,0x5
c001354c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013550:	74 14                	je     c0013566 <File::tell(unsigned long long*)+0x4c>
c0013552:	50                   	push   eax
c0013553:	8b 02                	mov    eax,DWORD PTR [edx]
c0013555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013559:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001355f:	52                   	push   edx
c0013560:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013563:	83 c4 10             	add    esp,0x10
c0013566:	83 c4 0c             	add    esp,0xc
c0013569:	c3                   	ret    

c001356a <File::rewind()>:
c001356a:	83 ec 10             	sub    esp,0x10
c001356d:	6a 00                	push   0x0
c001356f:	6a 00                	push   0x0
c0013571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013575:	e8 4a ff ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001357a:	83 c4 1c             	add    esp,0x1c
c001357d:	c3                   	ret    

c001357e <File::unlink()>:
c001357e:	83 ec 0c             	sub    esp,0xc
c0013581:	b8 0b 00 00 00       	mov    eax,0xb
c0013586:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001358a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013591:	80 f9 19             	cmp    cl,0x19
c0013594:	77 2f                	ja     c00135c5 <File::unlink()+0x47>
c0013596:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c001359d:	85 c9                	test   ecx,ecx
c001359f:	74 24                	je     c00135c5 <File::unlink()+0x47>
c00135a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135a7:	85 c9                	test   ecx,ecx
c00135a9:	74 1a                	je     c00135c5 <File::unlink()+0x47>
c00135ab:	b8 06 00 00 00       	mov    eax,0x6
c00135b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135b4:	75 0f                	jne    c00135c5 <File::unlink()+0x47>
c00135b6:	83 c2 0d             	add    edx,0xd
c00135b9:	50                   	push   eax
c00135ba:	50                   	push   eax
c00135bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135bd:	52                   	push   edx
c00135be:	51                   	push   ecx
c00135bf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	83 c4 0c             	add    esp,0xc
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <File::rename(char const*)>:
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	b8 0b 00 00 00       	mov    eax,0xb
c00135d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135dd:	80 f9 19             	cmp    cl,0x19
c00135e0:	77 32                	ja     c0013614 <File::rename(char const*)+0x4a>
c00135e2:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c00135e9:	85 c9                	test   ecx,ecx
c00135eb:	74 27                	je     c0013614 <File::rename(char const*)+0x4a>
c00135ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135f3:	85 c9                	test   ecx,ecx
c00135f5:	74 1d                	je     c0013614 <File::rename(char const*)+0x4a>
c00135f7:	b8 06 00 00 00       	mov    eax,0x6
c00135fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013600:	75 12                	jne    c0013614 <File::rename(char const*)+0x4a>
c0013602:	83 c2 0d             	add    edx,0xd
c0013605:	50                   	push   eax
c0013606:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013608:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001360c:	52                   	push   edx
c001360d:	51                   	push   ecx
c001360e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013611:	83 c4 10             	add    esp,0x10
c0013614:	83 c4 0c             	add    esp,0xc
c0013617:	c3                   	ret    

c0013618 <File::chfatattr(unsigned char, unsigned char)>:
c0013618:	57                   	push   edi
c0013619:	b8 0b 00 00 00       	mov    eax,0xb
c001361e:	56                   	push   esi
c001361f:	53                   	push   ebx
c0013620:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013624:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013628:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001362f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013633:	80 f9 19             	cmp    cl,0x19
c0013636:	77 37                	ja     c001366f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013638:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c001363f:	85 c9                	test   ecx,ecx
c0013641:	74 2c                	je     c001366f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013643:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013649:	85 c9                	test   ecx,ecx
c001364b:	74 22                	je     c001366f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001364d:	b8 06 00 00 00       	mov    eax,0x6
c0013652:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013656:	75 17                	jne    c001366f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013658:	8b 39                	mov    edi,DWORD PTR [ecx]
c001365a:	89 f0                	mov    eax,esi
c001365c:	83 c2 0d             	add    edx,0xd
c001365f:	0f b6 f0             	movzx  esi,al
c0013662:	0f b6 db             	movzx  ebx,bl
c0013665:	56                   	push   esi
c0013666:	53                   	push   ebx
c0013667:	52                   	push   edx
c0013668:	51                   	push   ecx
c0013669:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001366c:	83 c4 10             	add    esp,0x10
c001366f:	5b                   	pop    ebx
c0013670:	5e                   	pop    esi
c0013671:	5f                   	pop    edi
c0013672:	c3                   	ret    
c0013673:	90                   	nop

c0013674 <File::exists()>:
c0013674:	83 ec 0c             	sub    esp,0xc
c0013677:	31 c0                	xor    eax,eax
c0013679:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001367d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013684:	80 f9 19             	cmp    cl,0x19
c0013687:	77 24                	ja     c00136ad <File::exists()+0x39>
c0013689:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c0013690:	85 c9                	test   ecx,ecx
c0013692:	74 19                	je     c00136ad <File::exists()+0x39>
c0013694:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001369a:	85 c9                	test   ecx,ecx
c001369c:	74 0f                	je     c00136ad <File::exists()+0x39>
c001369e:	83 c2 0d             	add    edx,0xd
c00136a1:	50                   	push   eax
c00136a2:	50                   	push   eax
c00136a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136a5:	52                   	push   edx
c00136a6:	51                   	push   ecx
c00136a7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136aa:	83 c4 10             	add    esp,0x10
c00136ad:	83 c4 0c             	add    esp,0xc
c00136b0:	c3                   	ret    
c00136b1:	90                   	nop

c00136b2 <File::stat(unsigned long long*, bool*)>:
c00136b2:	56                   	push   esi
c00136b3:	53                   	push   ebx
c00136b4:	50                   	push   eax
c00136b5:	b8 0b 00 00 00       	mov    eax,0xb
c00136ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136cd:	80 f9 19             	cmp    cl,0x19
c00136d0:	77 3d                	ja     c001370f <File::stat(unsigned long long*, bool*)+0x5d>
c00136d2:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c00136d9:	85 c9                	test   ecx,ecx
c00136db:	74 32                	je     c001370f <File::stat(unsigned long long*, bool*)+0x5d>
c00136dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136e3:	85 c9                	test   ecx,ecx
c00136e5:	74 28                	je     c001370f <File::stat(unsigned long long*, bool*)+0x5d>
c00136e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136ed:	74 13                	je     c0013702 <File::stat(unsigned long long*, bool*)+0x50>
c00136ef:	83 ec 04             	sub    esp,0x4
c00136f2:	56                   	push   esi
c00136f3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00136f9:	51                   	push   ecx
c00136fa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00136fd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013700:	eb 0a                	jmp    c001370c <File::stat(unsigned long long*, bool*)+0x5a>
c0013702:	53                   	push   ebx
c0013703:	83 c2 0d             	add    edx,0xd
c0013706:	56                   	push   esi
c0013707:	52                   	push   edx
c0013708:	51                   	push   ecx
c0013709:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001370c:	83 c4 10             	add    esp,0x10
c001370f:	5a                   	pop    edx
c0013710:	5b                   	pop    ebx
c0013711:	5e                   	pop    esi
c0013712:	c3                   	ret    

c0013713 <Fs::setcwd(Process*, char*)>:
c0013713:	55                   	push   ebp
c0013714:	57                   	push   edi
c0013715:	56                   	push   esi
c0013716:	53                   	push   ebx
c0013717:	81 ec 20 02 00 00    	sub    esp,0x220
c001371d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013724:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001372a:	57                   	push   edi
c001372b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013732:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013736:	56                   	push   esi
c0013737:	e8 bc fa ff ff       	call   c00131f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001373c:	89 34 24             	mov    DWORD PTR [esp],esi
c001373f:	e8 44 d0 fe ff       	call   c0000788 <strlen>
c0013744:	83 c4 10             	add    esp,0x10
c0013747:	83 f8 02             	cmp    eax,0x2
c001374a:	77 17                	ja     c0013763 <Fs::setcwd(Process*, char*)+0x50>
c001374c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013751:	83 e8 41             	sub    eax,0x41
c0013754:	83 f8 19             	cmp    eax,0x19
c0013757:	76 24                	jbe    c001377d <Fs::setcwd(Process*, char*)+0x6a>
c0013759:	b8 03 00 00 00       	mov    eax,0x3
c001375e:	e9 e0 00 00 00       	jmp    c0013843 <Fs::setcwd(Process*, char*)+0x130>
c0013763:	83 ec 0c             	sub    esp,0xc
c0013766:	56                   	push   esi
c0013767:	e8 1c d0 fe ff       	call   c0000788 <strlen>
c001376c:	83 c4 10             	add    esp,0x10
c001376f:	83 f8 03             	cmp    eax,0x3
c0013772:	75 34                	jne    c00137a8 <Fs::setcwd(Process*, char*)+0x95>
c0013774:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013779:	75 2d                	jne    c00137a8 <Fs::setcwd(Process*, char*)+0x95>
c001377b:	eb cf                	jmp    c001374c <Fs::setcwd(Process*, char*)+0x39>
c001377d:	8b 14 85 80 f5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0a80]
c0013784:	b8 05 00 00 00       	mov    eax,0x5
c0013789:	85 d2                	test   edx,edx
c001378b:	0f 84 b2 00 00 00    	je     c0013843 <Fs::setcwd(Process*, char*)+0x130>
c0013791:	b8 06 00 00 00       	mov    eax,0x6
c0013796:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001379d:	0f 85 92 00 00 00    	jne    c0013835 <Fs::setcwd(Process*, char*)+0x122>
c00137a3:	e9 9b 00 00 00       	jmp    c0013843 <Fs::setcwd(Process*, char*)+0x130>
c00137a8:	83 ec 0c             	sub    esp,0xc
c00137ab:	68 14 01 00 00       	push   0x114
c00137b0:	e8 f3 c0 ff ff       	call   c000f8a8 <malloc>
c00137b5:	83 c4 0c             	add    esp,0xc
c00137b8:	89 c3                	mov    ebx,eax
c00137ba:	55                   	push   ebp
c00137bb:	56                   	push   esi
c00137bc:	50                   	push   eax
c00137bd:	e8 e0 fb ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c00137c2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137c7:	83 c4 0c             	add    esp,0xc
c00137ca:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137ce:	50                   	push   eax
c00137cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137d3:	50                   	push   eax
c00137d4:	53                   	push   ebx
c00137d5:	e8 d8 fe ff ff       	call   c00136b2 <File::stat(unsigned long long*, bool*)>
c00137da:	83 c4 10             	add    esp,0x10
c00137dd:	83 f8 02             	cmp    eax,0x2
c00137e0:	74 04                	je     c00137e6 <Fs::setcwd(Process*, char*)+0xd3>
c00137e2:	85 c0                	test   eax,eax
c00137e4:	74 1c                	je     c0013802 <Fs::setcwd(Process*, char*)+0xef>
c00137e6:	b8 01 00 00 00       	mov    eax,0x1
c00137eb:	85 db                	test   ebx,ebx
c00137ed:	74 54                	je     c0013843 <Fs::setcwd(Process*, char*)+0x130>
c00137ef:	83 ec 0c             	sub    esp,0xc
c00137f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137f4:	53                   	push   ebx
c00137f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137f8:	83 c4 10             	add    esp,0x10
c00137fb:	b8 01 00 00 00       	mov    eax,0x1
c0013800:	eb 41                	jmp    c0013843 <Fs::setcwd(Process*, char*)+0x130>
c0013802:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013807:	75 1c                	jne    c0013825 <Fs::setcwd(Process*, char*)+0x112>
c0013809:	b8 02 00 00 00       	mov    eax,0x2
c001380e:	85 db                	test   ebx,ebx
c0013810:	74 31                	je     c0013843 <Fs::setcwd(Process*, char*)+0x130>
c0013812:	83 ec 0c             	sub    esp,0xc
c0013815:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013817:	53                   	push   ebx
c0013818:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001381b:	83 c4 10             	add    esp,0x10
c001381e:	b8 02 00 00 00       	mov    eax,0x2
c0013823:	eb 1e                	jmp    c0013843 <Fs::setcwd(Process*, char*)+0x130>
c0013825:	85 db                	test   ebx,ebx
c0013827:	74 0c                	je     c0013835 <Fs::setcwd(Process*, char*)+0x122>
c0013829:	83 ec 0c             	sub    esp,0xc
c001382c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001382e:	53                   	push   ebx
c001382f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013832:	83 c4 10             	add    esp,0x10
c0013835:	50                   	push   eax
c0013836:	50                   	push   eax
c0013837:	56                   	push   esi
c0013838:	57                   	push   edi
c0013839:	e8 ea cf fe ff       	call   c0000828 <strcpy>
c001383e:	83 c4 10             	add    esp,0x10
c0013841:	31 c0                	xor    eax,eax
c0013843:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013849:	5b                   	pop    ebx
c001384a:	5e                   	pop    esi
c001384b:	5f                   	pop    edi
c001384c:	5d                   	pop    ebp
c001384d:	c3                   	ret    

c001384e <Directory::Directory(char const*, Process*)>:
c001384e:	83 ec 0c             	sub    esp,0xc
c0013851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013855:	83 ec 08             	sub    esp,0x8
c0013858:	6a 00                	push   0x0
c001385a:	50                   	push   eax
c001385b:	e8 9a dd ff ff       	call   c00115fa <UnixFile::UnixFile(int)>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	ba 40 b5 02 c0       	mov    edx,0xc002b540
c0013868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386c:	89 10                	mov    DWORD PTR [eax],edx
c001386e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013872:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387c:	83 c0 0d             	add    eax,0xd
c001387f:	83 ec 04             	sub    esp,0x4
c0013882:	52                   	push   edx
c0013883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013887:	50                   	push   eax
c0013888:	e8 6b f9 ff ff       	call   c00131f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001388d:	83 c4 10             	add    esp,0x10
c0013890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013894:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013897:	8d 50 bf             	lea    edx,[eax-0x41]
c001389a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138ac:	90                   	nop
c00138ad:	83 c4 0c             	add    esp,0xc
c00138b0:	c3                   	ret    
c00138b1:	90                   	nop

c00138b2 <Directory::open()>:
c00138b2:	53                   	push   ebx
c00138b3:	b8 0b 00 00 00       	mov    eax,0xb
c00138b8:	83 ec 08             	sub    esp,0x8
c00138bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138c6:	80 fa 19             	cmp    dl,0x19
c00138c9:	77 3d                	ja     c0013908 <Directory::open()+0x56>
c00138cb:	8b 14 95 80 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a80]
c00138d2:	85 d2                	test   edx,edx
c00138d4:	74 32                	je     c0013908 <Directory::open()+0x56>
c00138d6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138dc:	85 d2                	test   edx,edx
c00138de:	74 28                	je     c0013908 <Directory::open()+0x56>
c00138e0:	b8 06 00 00 00       	mov    eax,0x6
c00138e5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00138e9:	75 1d                	jne    c0013908 <Directory::open()+0x56>
c00138eb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00138f1:	50                   	push   eax
c00138f2:	8b 02                	mov    eax,DWORD PTR [edx]
c00138f4:	51                   	push   ecx
c00138f5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00138f8:	51                   	push   ecx
c00138f9:	52                   	push   edx
c00138fa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00138fd:	83 c4 10             	add    esp,0x10
c0013900:	85 c0                	test   eax,eax
c0013902:	75 04                	jne    c0013908 <Directory::open()+0x56>
c0013904:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013908:	83 c4 08             	add    esp,0x8
c001390b:	5b                   	pop    ebx
c001390c:	c3                   	ret    
c001390d:	90                   	nop

c001390e <Directory::close()>:
c001390e:	53                   	push   ebx
c001390f:	b8 0b 00 00 00       	mov    eax,0xb
c0013914:	83 ec 08             	sub    esp,0x8
c0013917:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001391b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013922:	80 fa 19             	cmp    dl,0x19
c0013925:	77 41                	ja     c0013968 <Directory::close()+0x5a>
c0013927:	8b 1c 95 80 f5 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0a80]
c001392e:	85 db                	test   ebx,ebx
c0013930:	74 36                	je     c0013968 <Directory::close()+0x5a>
c0013932:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013939:	74 2d                	je     c0013968 <Directory::close()+0x5a>
c001393b:	b8 05 00 00 00       	mov    eax,0x5
c0013940:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013944:	74 22                	je     c0013968 <Directory::close()+0x5a>
c0013946:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001394a:	8b 04 95 80 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0a80]
c0013951:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013957:	53                   	push   ebx
c0013958:	53                   	push   ebx
c0013959:	8b 10                	mov    edx,DWORD PTR [eax]
c001395b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013961:	50                   	push   eax
c0013962:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013965:	83 c4 10             	add    esp,0x10
c0013968:	83 c4 08             	add    esp,0x8
c001396b:	5b                   	pop    ebx
c001396c:	c3                   	ret    
c001396d:	90                   	nop

c001396e <Directory::unlink()>:
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	b8 0b 00 00 00       	mov    eax,0xb
c0013976:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001397a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013981:	80 f9 19             	cmp    cl,0x19
c0013984:	77 2f                	ja     c00139b5 <Directory::unlink()+0x47>
c0013986:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c001398d:	85 c9                	test   ecx,ecx
c001398f:	74 24                	je     c00139b5 <Directory::unlink()+0x47>
c0013991:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013997:	85 c9                	test   ecx,ecx
c0013999:	74 1a                	je     c00139b5 <Directory::unlink()+0x47>
c001399b:	b8 06 00 00 00       	mov    eax,0x6
c00139a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139a4:	75 0f                	jne    c00139b5 <Directory::unlink()+0x47>
c00139a6:	83 c2 0d             	add    edx,0xd
c00139a9:	50                   	push   eax
c00139aa:	50                   	push   eax
c00139ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139ad:	52                   	push   edx
c00139ae:	51                   	push   ecx
c00139af:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139b2:	83 c4 10             	add    esp,0x10
c00139b5:	83 c4 0c             	add    esp,0xc
c00139b8:	c3                   	ret    
c00139b9:	90                   	nop

c00139ba <Directory::rename(char const*)>:
c00139ba:	83 ec 0c             	sub    esp,0xc
c00139bd:	b8 0b 00 00 00       	mov    eax,0xb
c00139c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139cd:	80 f9 19             	cmp    cl,0x19
c00139d0:	77 32                	ja     c0013a04 <Directory::rename(char const*)+0x4a>
c00139d2:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c00139d9:	85 c9                	test   ecx,ecx
c00139db:	74 27                	je     c0013a04 <Directory::rename(char const*)+0x4a>
c00139dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139e3:	85 c9                	test   ecx,ecx
c00139e5:	74 1d                	je     c0013a04 <Directory::rename(char const*)+0x4a>
c00139e7:	b8 06 00 00 00       	mov    eax,0x6
c00139ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139f0:	75 12                	jne    c0013a04 <Directory::rename(char const*)+0x4a>
c00139f2:	83 c2 0d             	add    edx,0xd
c00139f5:	50                   	push   eax
c00139f6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139fc:	52                   	push   edx
c00139fd:	51                   	push   ecx
c00139fe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a01:	83 c4 10             	add    esp,0x10
c0013a04:	83 c4 0c             	add    esp,0xc
c0013a07:	c3                   	ret    

c0013a08 <Directory::exists()>:
c0013a08:	83 ec 0c             	sub    esp,0xc
c0013a0b:	31 c0                	xor    eax,eax
c0013a0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a11:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a18:	80 f9 19             	cmp    cl,0x19
c0013a1b:	77 24                	ja     c0013a41 <Directory::exists()+0x39>
c0013a1d:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c0013a24:	85 c9                	test   ecx,ecx
c0013a26:	74 19                	je     c0013a41 <Directory::exists()+0x39>
c0013a28:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a2e:	85 c9                	test   ecx,ecx
c0013a30:	74 0f                	je     c0013a41 <Directory::exists()+0x39>
c0013a32:	83 c2 0d             	add    edx,0xd
c0013a35:	50                   	push   eax
c0013a36:	50                   	push   eax
c0013a37:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a39:	52                   	push   edx
c0013a3a:	51                   	push   ecx
c0013a3b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a3e:	83 c4 10             	add    esp,0x10
c0013a41:	83 c4 0c             	add    esp,0xc
c0013a44:	c3                   	ret    
c0013a45:	90                   	nop

c0013a46 <Directory::read(dirent*)>:
c0013a46:	83 ec 1c             	sub    esp,0x1c
c0013a49:	b8 0b 00 00 00       	mov    eax,0xb
c0013a4e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a52:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a59:	80 fa 19             	cmp    dl,0x19
c0013a5c:	77 30                	ja     c0013a8e <Directory::read(dirent*)+0x48>
c0013a5e:	8b 14 95 80 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a80]
c0013a65:	85 d2                	test   edx,edx
c0013a67:	74 25                	je     c0013a8e <Directory::read(dirent*)+0x48>
c0013a69:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a70:	74 1c                	je     c0013a8e <Directory::read(dirent*)+0x48>
c0013a72:	83 ec 0c             	sub    esp,0xc
c0013a75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a77:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a7b:	52                   	push   edx
c0013a7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a80:	6a 00                	push   0x0
c0013a82:	68 10 01 00 00       	push   0x110
c0013a87:	51                   	push   ecx
c0013a88:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a8b:	83 c4 20             	add    esp,0x20
c0013a8e:	83 c4 1c             	add    esp,0x1c
c0013a91:	c3                   	ret    

c0013a92 <Directory::create()>:
c0013a92:	83 ec 0c             	sub    esp,0xc
c0013a95:	b8 0b 00 00 00       	mov    eax,0xb
c0013a9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa5:	80 f9 19             	cmp    cl,0x19
c0013aa8:	77 2f                	ja     c0013ad9 <Directory::create()+0x47>
c0013aaa:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c0013ab1:	85 c9                	test   ecx,ecx
c0013ab3:	74 24                	je     c0013ad9 <Directory::create()+0x47>
c0013ab5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013abb:	85 c9                	test   ecx,ecx
c0013abd:	74 1a                	je     c0013ad9 <Directory::create()+0x47>
c0013abf:	b8 06 00 00 00       	mov    eax,0x6
c0013ac4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ac8:	75 0f                	jne    c0013ad9 <Directory::create()+0x47>
c0013aca:	83 c2 0d             	add    edx,0xd
c0013acd:	50                   	push   eax
c0013ace:	50                   	push   eax
c0013acf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad1:	52                   	push   edx
c0013ad2:	51                   	push   ecx
c0013ad3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013ad6:	83 c4 10             	add    esp,0x10
c0013ad9:	83 c4 0c             	add    esp,0xc
c0013adc:	c3                   	ret    
c0013add:	90                   	nop

c0013ade <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ade:	b8 0a 00 00 00       	mov    eax,0xa
c0013ae3:	c3                   	ret    

c0013ae4 <Bus::Bus(char const*)>:
c0013ae4:	83 ec 0c             	sub    esp,0xc
c0013ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aeb:	83 ec 08             	sub    esp,0x8
c0013aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af2:	50                   	push   eax
c0013af3:	e8 5c 09 00 00       	call   c0014454 <Device::Device(char const*)>
c0013af8:	83 c4 10             	add    esp,0x10
c0013afb:	ba 5c b5 02 c0       	mov    edx,0xc002b55c
c0013b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b04:	89 10                	mov    DWORD PTR [eax],edx
c0013b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b14:	90                   	nop
c0013b15:	83 c4 0c             	add    esp,0xc
c0013b18:	c3                   	ret    
c0013b19:	90                   	nop

c0013b1a <Bus::~Bus()>:
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	ba 5c b5 02 c0       	mov    edx,0xc002b55c
c0013b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b26:	89 10                	mov    DWORD PTR [eax],edx
c0013b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	50                   	push   eax
c0013b30:	e8 15 06 00 00       	call   c001414a <Device::~Device()>
c0013b35:	83 c4 10             	add    esp,0x10
c0013b38:	90                   	nop
c0013b39:	83 c4 0c             	add    esp,0xc
c0013b3c:	c3                   	ret    
c0013b3d:	90                   	nop

c0013b3e <Bus::~Bus()>:
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	83 ec 0c             	sub    esp,0xc
c0013b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b48:	e8 cd ff ff ff       	call   c0013b1a <Bus::~Bus()>
c0013b4d:	83 c4 10             	add    esp,0x10
c0013b50:	83 ec 08             	sub    esp,0x8
c0013b53:	68 58 01 00 00       	push   0x158
c0013b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b5c:	e8 02 f2 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0013b61:	83 c4 10             	add    esp,0x10
c0013b64:	83 c4 0c             	add    esp,0xc
c0013b67:	c3                   	ret    

c0013b68 <Buzzer::Buzzer(char const*)>:
c0013b68:	83 ec 0c             	sub    esp,0xc
c0013b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6f:	83 ec 08             	sub    esp,0x8
c0013b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b76:	50                   	push   eax
c0013b77:	e8 d8 08 00 00       	call   c0014454 <Device::Device(char const*)>
c0013b7c:	83 c4 10             	add    esp,0x10
c0013b7f:	ba 88 b5 02 c0       	mov    edx,0xc002b588
c0013b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b88:	89 10                	mov    DWORD PTR [eax],edx
c0013b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013ba6:	90                   	nop
c0013ba7:	83 c4 0c             	add    esp,0xc
c0013baa:	c3                   	ret    
c0013bab:	90                   	nop

c0013bac <Buzzer::~Buzzer()>:
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	ba 88 b5 02 c0       	mov    edx,0xc002b588
c0013bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb8:	89 10                	mov    DWORD PTR [eax],edx
c0013bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbe:	83 ec 0c             	sub    esp,0xc
c0013bc1:	50                   	push   eax
c0013bc2:	e8 83 05 00 00       	call   c001414a <Device::~Device()>
c0013bc7:	83 c4 10             	add    esp,0x10
c0013bca:	90                   	nop
c0013bcb:	83 c4 0c             	add    esp,0xc
c0013bce:	c3                   	ret    
c0013bcf:	90                   	nop

c0013bd0 <Buzzer::~Buzzer()>:
c0013bd0:	83 ec 0c             	sub    esp,0xc
c0013bd3:	83 ec 0c             	sub    esp,0xc
c0013bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bda:	e8 cd ff ff ff       	call   c0013bac <Buzzer::~Buzzer()>
c0013bdf:	83 c4 10             	add    esp,0x10
c0013be2:	83 ec 08             	sub    esp,0x8
c0013be5:	68 5c 01 00 00       	push   0x15c
c0013bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bee:	e8 70 f1 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0013bf3:	83 c4 10             	add    esp,0x10
c0013bf6:	83 c4 0c             	add    esp,0xc
c0013bf9:	c3                   	ret    

c0013bfa <Buzzer::stop()>:
c0013bfa:	83 ec 14             	sub    esp,0x14
c0013bfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c01:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c03:	6a 00                	push   0x0
c0013c05:	50                   	push   eax
c0013c06:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c09:	83 c4 1c             	add    esp,0x1c
c0013c0c:	c3                   	ret    

c0013c0d <beepThread(void*)>:
c0013c0d:	53                   	push   ebx
c0013c0e:	83 ec 08             	sub    esp,0x8
c0013c11:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0013c16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c1a:	48                   	dec    eax
c0013c1b:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0013c20:	75 01                	jne    c0013c23 <beepThread(void*)+0x16>
c0013c22:	fb                   	sti    
c0013c23:	50                   	push   eax
c0013c24:	50                   	push   eax
c0013c25:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c2a:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c30:	52                   	push   edx
c0013c31:	50                   	push   eax
c0013c32:	e8 68 ac 00 00       	call   c001e89f <nanoSleep(unsigned long long)>
c0013c37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c3a:	e8 bb ff ff ff       	call   c0013bfa <Buzzer::stop()>
c0013c3f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c47:	83 c4 18             	add    esp,0x18
c0013c4a:	5b                   	pop    ebx
c0013c4b:	e9 4b ab 00 00       	jmp    c001e79b <blockTask(TaskState)>

c0013c50 <Buzzer::beep(int, int, bool)>:
c0013c50:	57                   	push   edi
c0013c51:	56                   	push   esi
c0013c52:	53                   	push   ebx
c0013c53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c5f:	52                   	push   edx
c0013c60:	52                   	push   edx
c0013c61:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c67:	56                   	push   esi
c0013c68:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c6b:	83 c4 10             	add    esp,0x10
c0013c6e:	89 f8                	mov    eax,edi
c0013c70:	84 c0                	test   al,al
c0013c72:	74 1f                	je     c0013c93 <Buzzer::beep(int, int, bool)+0x43>
c0013c74:	50                   	push   eax
c0013c75:	50                   	push   eax
c0013c76:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c7c:	99                   	cdq    
c0013c7d:	52                   	push   edx
c0013c7e:	50                   	push   eax
c0013c7f:	e8 1b ac 00 00       	call   c001e89f <nanoSleep(unsigned long long)>
c0013c84:	83 c4 10             	add    esp,0x10
c0013c87:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c8b:	5b                   	pop    ebx
c0013c8c:	5e                   	pop    esi
c0013c8d:	5f                   	pop    edi
c0013c8e:	e9 67 ff ff ff       	jmp    c0013bfa <Buzzer::stop()>
c0013c93:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c99:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0013c9e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013ca6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013caa:	c7 44 24 14 0d 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c0d
c0013cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cb6:	5b                   	pop    ebx
c0013cb7:	5e                   	pop    esi
c0013cb8:	5f                   	pop    edi
c0013cb9:	e9 9a a6 00 00       	jmp    c001e358 <Process::createThread(void (*)(void*), void*, int)>

c0013cbe <User::loadClockSettings(int)>:
c0013cbe:	53                   	push   ebx
c0013cbf:	83 ec 14             	sub    esp,0x14
c0013cc2:	68 14 01 00 00       	push   0x114
c0013cc7:	e8 dc bb ff ff       	call   c000f8a8 <malloc>
c0013ccc:	83 c4 0c             	add    esp,0xc
c0013ccf:	89 c3                	mov    ebx,eax
c0013cd1:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c0013cd7:	68 b0 b5 02 c0       	push   0xc002b5b0
c0013cdc:	50                   	push   eax
c0013cdd:	e8 c0 f6 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c0013ce2:	58                   	pop    eax
c0013ce3:	5a                   	pop    edx
c0013ce4:	6a 01                	push   0x1
c0013ce6:	53                   	push   ebx
c0013ce7:	e8 1a f7 ff ff       	call   c0013406 <File::open(FileOpenMode)>
c0013cec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cef:	e8 70 f7 ff ff       	call   c0013464 <File::close()>
c0013cf4:	83 c4 10             	add    esp,0x10
c0013cf7:	85 db                	test   ebx,ebx
c0013cf9:	74 0f                	je     c0013d0a <User::loadClockSettings(int)+0x4c>
c0013cfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cfd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d04:	83 c4 08             	add    esp,0x8
c0013d07:	5b                   	pop    ebx
c0013d08:	ff e0                	jmp    eax
c0013d0a:	83 c4 08             	add    esp,0x8
c0013d0d:	5b                   	pop    ebx
c0013d0e:	c3                   	ret    
c0013d0f:	90                   	nop

c0013d10 <Clock::Clock(char const*)>:
c0013d10:	83 ec 0c             	sub    esp,0xc
c0013d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d17:	83 ec 08             	sub    esp,0x8
c0013d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d1e:	50                   	push   eax
c0013d1f:	e8 30 07 00 00       	call   c0014454 <Device::Device(char const*)>
c0013d24:	83 c4 10             	add    esp,0x10
c0013d27:	ba d8 b5 02 c0       	mov    edx,0xc002b5d8
c0013d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d30:	89 10                	mov    DWORD PTR [eax],edx
c0013d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d36:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d40:	90                   	nop
c0013d41:	83 c4 0c             	add    esp,0xc
c0013d44:	c3                   	ret    
c0013d45:	90                   	nop

c0013d46 <Clock::~Clock()>:
c0013d46:	83 ec 0c             	sub    esp,0xc
c0013d49:	ba d8 b5 02 c0       	mov    edx,0xc002b5d8
c0013d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d52:	89 10                	mov    DWORD PTR [eax],edx
c0013d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d58:	83 ec 0c             	sub    esp,0xc
c0013d5b:	50                   	push   eax
c0013d5c:	e8 e9 03 00 00       	call   c001414a <Device::~Device()>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	90                   	nop
c0013d65:	83 c4 0c             	add    esp,0xc
c0013d68:	c3                   	ret    
c0013d69:	90                   	nop

c0013d6a <Clock::~Clock()>:
c0013d6a:	83 ec 0c             	sub    esp,0xc
c0013d6d:	83 ec 0c             	sub    esp,0xc
c0013d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d74:	e8 cd ff ff ff       	call   c0013d46 <Clock::~Clock()>
c0013d79:	83 c4 10             	add    esp,0x10
c0013d7c:	83 ec 08             	sub    esp,0x8
c0013d7f:	68 58 01 00 00       	push   0x158
c0013d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d88:	e8 d6 ef ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	83 c4 0c             	add    esp,0xc
c0013d93:	c3                   	ret    

c0013d94 <Clock::timeInSecondsLocal()>:
c0013d94:	53                   	push   ebx
c0013d95:	83 ec 14             	sub    esp,0x14
c0013d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d9e:	50                   	push   eax
c0013d9f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013da2:	0f b6 0d fc f0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f0fc
c0013da9:	03 0d 00 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f100
c0013daf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013db5:	89 cb                	mov    ebx,ecx
c0013db7:	c1 fb 1f             	sar    ebx,0x1f
c0013dba:	01 c8                	add    eax,ecx
c0013dbc:	11 da                	adc    edx,ebx
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	31 c9                	xor    ecx,ecx
c0013dc3:	80 3d fd f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0fd,0x0
c0013dca:	74 05                	je     c0013dd1 <Clock::timeInSecondsLocal()+0x3d>
c0013dcc:	b9 08 07 00 00       	mov    ecx,0x708
c0013dd1:	31 db                	xor    ebx,ebx
c0013dd3:	01 c8                	add    eax,ecx
c0013dd5:	11 da                	adc    edx,ebx
c0013dd7:	83 c4 08             	add    esp,0x8
c0013dda:	5b                   	pop    ebx
c0013ddb:	c3                   	ret    

c0013ddc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ddc:	57                   	push   edi
c0013ddd:	56                   	push   esi
c0013dde:	53                   	push   ebx
c0013ddf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013de3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013de7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013de9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ded:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013df0:	0f b6 05 fc f0 02 c0 	movzx  eax,BYTE PTR ds:0xc002f0fc
c0013df7:	03 05 00 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f100
c0013dfd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e03:	99                   	cdq    
c0013e04:	29 c6                	sub    esi,eax
c0013e06:	19 d7                	sbb    edi,edx
c0013e08:	89 f0                	mov    eax,esi
c0013e0a:	89 fa                	mov    edx,edi
c0013e0c:	31 f6                	xor    esi,esi
c0013e0e:	80 3d fd f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0fd,0x0
c0013e15:	74 05                	je     c0013e1c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e17:	be 08 07 00 00       	mov    esi,0x708
c0013e1c:	31 ff                	xor    edi,edi
c0013e1e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e22:	29 f0                	sub    eax,esi
c0013e24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e28:	19 fa                	sbb    edx,edi
c0013e2a:	89 d8                	mov    eax,ebx
c0013e2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e30:	5b                   	pop    ebx
c0013e31:	5e                   	pop    esi
c0013e32:	5f                   	pop    edi
c0013e33:	ff e0                	jmp    eax

c0013e35 <datetimeToSeconds(datetime_t)>:
c0013e35:	55                   	push   ebp
c0013e36:	57                   	push   edi
c0013e37:	56                   	push   esi
c0013e38:	53                   	push   ebx
c0013e39:	83 ec 14             	sub    esp,0x14
c0013e3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e40:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e44:	89 d3                	mov    ebx,edx
c0013e46:	0f b6 c6             	movzx  eax,dh
c0013e49:	c1 eb 10             	shr    ebx,0x10
c0013e4c:	48                   	dec    eax
c0013e4d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e52:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e56:	0f b6 f5             	movzx  esi,ch
c0013e59:	89 cf                	mov    edi,ecx
c0013e5b:	6b f6 3c             	imul   esi,esi,0x3c
c0013e5e:	c1 ef 10             	shr    edi,0x10
c0013e61:	0f b6 c9             	movzx  ecx,cl
c0013e64:	89 f8                	mov    eax,edi
c0013e66:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e6c:	0f b6 f8             	movzx  edi,al
c0013e6f:	0f b6 d2             	movzx  edx,dl
c0013e72:	01 fe                	add    esi,edi
c0013e74:	01 f1                	add    ecx,esi
c0013e76:	0f b7 f3             	movzx  esi,bx
c0013e79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e7d:	c1 f9 1f             	sar    ecx,0x1f
c0013e80:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e85:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e89:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e8e:	8b 0c 8d 20 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd49e0]
c0013e95:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e99:	76 29                	jbe    c0013ec4 <datetimeToSeconds(datetime_t)+0x8f>
c0013e9b:	f6 c3 03             	test   bl,0x3
c0013e9e:	75 24                	jne    c0013ec4 <datetimeToSeconds(datetime_t)+0x8f>
c0013ea0:	31 d2                	xor    edx,edx
c0013ea2:	bf 64 00 00 00       	mov    edi,0x64
c0013ea7:	89 d8                	mov    eax,ebx
c0013ea9:	66 f7 f7             	div    di
c0013eac:	66 85 d2             	test   dx,dx
c0013eaf:	75 12                	jne    c0013ec3 <datetimeToSeconds(datetime_t)+0x8e>
c0013eb1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013eb7:	bf 90 01 00 00       	mov    edi,0x190
c0013ebc:	99                   	cdq    
c0013ebd:	f7 ff                	idiv   edi
c0013ebf:	85 d2                	test   edx,edx
c0013ec1:	75 01                	jne    c0013ec4 <datetimeToSeconds(datetime_t)+0x8f>
c0013ec3:	41                   	inc    ecx
c0013ec4:	66 83 fb 46          	cmp    bx,0x46
c0013ec8:	76 45                	jbe    c0013f0f <datetimeToSeconds(datetime_t)+0xda>
c0013eca:	bb 46 00 00 00       	mov    ebx,0x46
c0013ecf:	bf 64 00 00 00       	mov    edi,0x64
c0013ed4:	bd 90 01 00 00       	mov    ebp,0x190
c0013ed9:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ede:	f6 c3 03             	test   bl,0x3
c0013ee1:	75 23                	jne    c0013f06 <datetimeToSeconds(datetime_t)+0xd1>
c0013ee3:	89 d8                	mov    eax,ebx
c0013ee5:	99                   	cdq    
c0013ee6:	f7 ff                	idiv   edi
c0013ee8:	b8 6e 01 00 00       	mov    eax,0x16e
c0013eed:	85 d2                	test   edx,edx
c0013eef:	75 15                	jne    c0013f06 <datetimeToSeconds(datetime_t)+0xd1>
c0013ef1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013ef7:	99                   	cdq    
c0013ef8:	f7 fd                	idiv   ebp
c0013efa:	83 fa 01             	cmp    edx,0x1
c0013efd:	19 c0                	sbb    eax,eax
c0013eff:	f7 d0                	not    eax
c0013f01:	05 6e 01 00 00       	add    eax,0x16e
c0013f06:	01 c1                	add    ecx,eax
c0013f08:	43                   	inc    ebx
c0013f09:	39 f3                	cmp    ebx,esi
c0013f0b:	7c cc                	jl     c0013ed9 <datetimeToSeconds(datetime_t)+0xa4>
c0013f0d:	eb 35                	jmp    c0013f44 <datetimeToSeconds(datetime_t)+0x10f>
c0013f0f:	74 33                	je     c0013f44 <datetimeToSeconds(datetime_t)+0x10f>
c0013f11:	b8 45 00 00 00       	mov    eax,0x45
c0013f16:	89 c2                	mov    edx,eax
c0013f18:	83 e2 03             	and    edx,0x3
c0013f1b:	39 f0                	cmp    eax,esi
c0013f1d:	7e 0f                	jle    c0013f2e <datetimeToSeconds(datetime_t)+0xf9>
c0013f1f:	83 fa 01             	cmp    edx,0x1
c0013f22:	19 d2                	sbb    edx,edx
c0013f24:	48                   	dec    eax
c0013f25:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f2c:	eb e8                	jmp    c0013f16 <datetimeToSeconds(datetime_t)+0xe1>
c0013f2e:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f33:	85 d2                	test   edx,edx
c0013f35:	75 0b                	jne    c0013f42 <datetimeToSeconds(datetime_t)+0x10d>
c0013f37:	66 83 fb 01          	cmp    bx,0x1
c0013f3b:	19 c0                	sbb    eax,eax
c0013f3d:	05 6e 01 00 00       	add    eax,0x16e
c0013f42:	29 c1                	sub    ecx,eax
c0013f44:	b8 80 51 01 00       	mov    eax,0x15180
c0013f49:	f7 e9                	imul   ecx
c0013f4b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f4f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f53:	83 c4 14             	add    esp,0x14
c0013f56:	5b                   	pop    ebx
c0013f57:	5e                   	pop    esi
c0013f58:	5f                   	pop    edi
c0013f59:	5d                   	pop    ebp
c0013f5a:	c3                   	ret    
c0013f5b:	90                   	nop

c0013f5c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f5c:	57                   	push   edi
c0013f5d:	56                   	push   esi
c0013f5e:	53                   	push   ebx
c0013f5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f63:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f65:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f70:	e8 c0 fe ff ff       	call   c0013e35 <datetimeToSeconds(datetime_t)>
c0013f75:	59                   	pop    ecx
c0013f76:	0f b6 0d fc f0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f0fc
c0013f7d:	5b                   	pop    ebx
c0013f7e:	03 0d 00 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f100
c0013f84:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f8a:	89 cb                	mov    ebx,ecx
c0013f8c:	c1 fb 1f             	sar    ebx,0x1f
c0013f8f:	29 c8                	sub    eax,ecx
c0013f91:	19 da                	sbb    edx,ebx
c0013f93:	31 c9                	xor    ecx,ecx
c0013f95:	80 3d fd f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0fd,0x0
c0013f9c:	74 05                	je     c0013fa3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f9e:	b9 08 07 00 00       	mov    ecx,0x708
c0013fa3:	31 db                	xor    ebx,ebx
c0013fa5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fa9:	29 c8                	sub    eax,ecx
c0013fab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013faf:	19 da                	sbb    edx,ebx
c0013fb1:	89 f8                	mov    eax,edi
c0013fb3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fb7:	5b                   	pop    ebx
c0013fb8:	5e                   	pop    esi
c0013fb9:	5f                   	pop    edi
c0013fba:	ff e0                	jmp    eax

c0013fbc <secondsToDatetime(unsigned long long)>:
c0013fbc:	55                   	push   ebp
c0013fbd:	57                   	push   edi
c0013fbe:	56                   	push   esi
c0013fbf:	53                   	push   ebx
c0013fc0:	83 ec 1c             	sub    esp,0x1c
c0013fc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fc7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fcb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013fcf:	6a 00                	push   0x0
c0013fd1:	68 80 51 01 00       	push   0x15180
c0013fd6:	55                   	push   ebp
c0013fd7:	57                   	push   edi
c0013fd8:	e8 07 33 01 00       	call   c00272e4 <__udivdi3>
c0013fdd:	83 c4 10             	add    esp,0x10
c0013fe0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013fe6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fea:	6a 00                	push   0x0
c0013fec:	68 80 51 01 00       	push   0x15180
c0013ff1:	55                   	push   ebp
c0013ff2:	57                   	push   edi
c0013ff3:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ff8:	e8 e7 33 01 00       	call   c00273e4 <__umoddi3>
c0013ffd:	83 c4 10             	add    esp,0x10
c0014000:	99                   	cdq    
c0014001:	f7 ff                	idiv   edi
c0014003:	bf 3c 00 00 00       	mov    edi,0x3c
c0014008:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001400b:	89 d0                	mov    eax,edx
c001400d:	99                   	cdq    
c001400e:	f7 ff                	idiv   edi
c0014010:	85 db                	test   ebx,ebx
c0014012:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014015:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014018:	79 11                	jns    c001402b <secondsToDatetime(unsigned long long)+0x6f>
c001401a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001401e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014024:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014029:	eb 07                	jmp    c0014032 <secondsToDatetime(unsigned long long)+0x76>
c001402b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014030:	89 d8                	mov    eax,ebx
c0014032:	bf b4 05 00 00       	mov    edi,0x5b4
c0014037:	99                   	cdq    
c0014038:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001403d:	f7 f9                	idiv   ecx
c001403f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014044:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014048:	31 d2                	xor    edx,edx
c001404a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014052:	01 c3                	add    ebx,eax
c0014054:	89 d8                	mov    eax,ebx
c0014056:	f7 f1                	div    ecx
c0014058:	31 d2                	xor    edx,edx
c001405a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001405d:	89 d8                	mov    eax,ebx
c001405f:	f7 f7                	div    edi
c0014061:	31 d2                	xor    edx,edx
c0014063:	29 c1                	sub    ecx,eax
c0014065:	89 d8                	mov    eax,ebx
c0014067:	f7 f5                	div    ebp
c0014069:	bd 6d 01 00 00       	mov    ebp,0x16d
c001406e:	29 c1                	sub    ecx,eax
c0014070:	31 d2                	xor    edx,edx
c0014072:	89 c8                	mov    eax,ecx
c0014074:	f7 f5                	div    ebp
c0014076:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001407b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001407f:	31 d2                	xor    edx,edx
c0014081:	89 c8                	mov    eax,ecx
c0014083:	f7 f5                	div    ebp
c0014085:	31 d2                	xor    edx,edx
c0014087:	01 c3                	add    ebx,eax
c0014089:	89 c8                	mov    eax,ecx
c001408b:	f7 f7                	div    edi
c001408d:	bf 99 00 00 00       	mov    edi,0x99
c0014092:	29 c3                	sub    ebx,eax
c0014094:	31 d2                	xor    edx,edx
c0014096:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001409e:	29 c3                	sub    ebx,eax
c00140a0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140a3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140a6:	bb 05 00 00 00       	mov    ebx,0x5
c00140ab:	83 c1 02             	add    ecx,0x2
c00140ae:	89 c8                	mov    eax,ecx
c00140b0:	f7 f7                	div    edi
c00140b2:	31 d2                	xor    edx,edx
c00140b4:	89 c7                	mov    edi,eax
c00140b6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140bc:	83 c0 02             	add    eax,0x2
c00140bf:	f7 f3                	div    ebx
c00140c1:	89 eb                	mov    ebx,ebp
c00140c3:	29 c3                	sub    ebx,eax
c00140c5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140cb:	88 1e                	mov    BYTE PTR [esi],bl
c00140cd:	19 c0                	sbb    eax,eax
c00140cf:	31 d2                	xor    edx,edx
c00140d1:	83 e0 0c             	and    eax,0xc
c00140d4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140d8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00140e4:	83 f9 01             	cmp    ecx,0x1
c00140e7:	0f 96 c2             	setbe  dl
c00140ea:	41                   	inc    ecx
c00140eb:	01 d0                	add    eax,edx
c00140ed:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00140f0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00140f4:	83 c4 1c             	add    esp,0x1c
c00140f7:	89 f0                	mov    eax,esi
c00140f9:	5b                   	pop    ebx
c00140fa:	5e                   	pop    esi
c00140fb:	5f                   	pop    edi
c00140fc:	5d                   	pop    ebp
c00140fd:	c2 04 00             	ret    0x4

c0014100 <Clock::timeInDatetimeLocal()>:
c0014100:	53                   	push   ebx
c0014101:	83 ec 14             	sub    esp,0x14
c0014104:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014108:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001410c:	e8 83 fc ff ff       	call   c0013d94 <Clock::timeInSecondsLocal()>
c0014111:	83 c4 0c             	add    esp,0xc
c0014114:	52                   	push   edx
c0014115:	50                   	push   eax
c0014116:	53                   	push   ebx
c0014117:	e8 a0 fe ff ff       	call   c0013fbc <secondsToDatetime(unsigned long long)>
c001411c:	89 d8                	mov    eax,ebx
c001411e:	83 c4 14             	add    esp,0x14
c0014121:	5b                   	pop    ebx
c0014122:	c2 04 00             	ret    0x4
c0014125:	90                   	nop

c0014126 <Device::hibernate()>:
c0014126:	c3                   	ret    
c0014127:	90                   	nop

c0014128 <Device::wake()>:
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <Device::detect()>:
c001412a:	c3                   	ret    
c001412b:	90                   	nop

c001412c <Device::disableLegacy()>:
c001412c:	c3                   	ret    
c001412d:	90                   	nop

c001412e <Device::powerSaving(PowerSavingLevel)>:
c001412e:	c3                   	ret    
c001412f:	90                   	nop

c0014130 <DriverlessDevice::close(int, int, void*)>:
c0014130:	31 c0                	xor    eax,eax
c0014132:	c3                   	ret    
c0014133:	90                   	nop

c0014134 <DriverlessDevice::detect()>:
c0014134:	c3                   	ret    
c0014135:	90                   	nop

c0014136 <DriverlessDevice::open(int, int, void*)>:
c0014136:	83 ec 18             	sub    esp,0x18
c0014139:	68 50 b6 02 c0       	push   0xc002b650
c001413e:	e8 ca 66 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0014143:	83 c8 ff             	or     eax,0xffffffff
c0014146:	83 c4 1c             	add    esp,0x1c
c0014149:	c3                   	ret    

c001414a <Device::~Device()>:
c001414a:	ba 78 b6 02 c0       	mov    edx,0xc002b678
c001414f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014153:	89 10                	mov    DWORD PTR [eax],edx
c0014155:	90                   	nop
c0014156:	c3                   	ret    
c0014157:	90                   	nop

c0014158 <Device::~Device()>:
c0014158:	83 ec 0c             	sub    esp,0xc
c001415b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001415f:	e8 e6 ff ff ff       	call   c001414a <Device::~Device()>
c0014164:	83 c4 04             	add    esp,0x4
c0014167:	83 ec 08             	sub    esp,0x8
c001416a:	68 58 01 00 00       	push   0x158
c001416f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014173:	e8 eb eb ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0014178:	83 c4 10             	add    esp,0x10
c001417b:	83 c4 0c             	add    esp,0xc
c001417e:	c3                   	ret    
c001417f:	90                   	nop

c0014180 <Device::findAndLoadDriver()>:
c0014180:	c3                   	ret    
c0014181:	90                   	nop

c0014182 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014182:	57                   	push   edi
c0014183:	b9 09 00 00 00       	mov    ecx,0x9
c0014188:	56                   	push   esi
c0014189:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001418d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014191:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001419b:	81 c7 18 01 00 00    	add    edi,0x118
c00141a1:	fc                   	cld    
c00141a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141a4:	5e                   	pop    esi
c00141a5:	5f                   	pop    edi
c00141a6:	c3                   	ret    
c00141a7:	90                   	nop

c00141a8 <Device::preOpenACPI(void*, char*, char*)>:
c00141a8:	57                   	push   edi
c00141a9:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141ae:	56                   	push   esi
c00141af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141b7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00141c1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00141c7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00141cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141d3:	b9 0e 00 00 00       	mov    ecx,0xe
c00141d8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00141de:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141e4:	5e                   	pop    esi
c00141e5:	5f                   	pop    edi
c00141e6:	c3                   	ret    
c00141e7:	90                   	nop

c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141ec:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141f1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141f8:	75 0b                	jne    c0014205 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00141fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00141fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014200:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014203:	eb 1e                	jmp    c0014223 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014205:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001420a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014210:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014216:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014218:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001421c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014220:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014223:	ff e0                	jmp    eax
c0014225:	90                   	nop

c0014226 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001422a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001422f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014236:	75 0b                	jne    c0014243 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014238:	8b 00                	mov    eax,DWORD PTR [eax]
c001423a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001423e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014241:	eb 1e                	jmp    c0014261 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014243:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0014248:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001424e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014254:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014256:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001425a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001425e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014261:	ff e0                	jmp    eax
c0014263:	90                   	nop

c0014264 <Device::addChild(Device*)>:
c0014264:	53                   	push   ebx
c0014265:	83 ec 08             	sub    esp,0x8
c0014268:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001426c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014270:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014276:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001427c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001427e:	85 d2                	test   edx,edx
c0014280:	74 04                	je     c0014286 <Device::addChild(Device*)+0x22>
c0014282:	89 d3                	mov    ebx,edx
c0014284:	eb f6                	jmp    c001427c <Device::addChild(Device*)+0x18>
c0014286:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014289:	83 ec 0c             	sub    esp,0xc
c001428c:	6a 08                	push   0x8
c001428e:	e8 15 b6 ff ff       	call   c000f8a8 <malloc>
c0014293:	89 03                	mov    DWORD PTR [ebx],eax
c0014295:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001429b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142a2:	83 c4 18             	add    esp,0x18
c00142a5:	5b                   	pop    ebx
c00142a6:	c3                   	ret    
c00142a7:	90                   	nop

c00142a8 <Device::removeAllChildren()>:
c00142a8:	56                   	push   esi
c00142a9:	53                   	push   ebx
c00142aa:	52                   	push   edx
c00142ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142af:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142b5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142b8:	74 17                	je     c00142d1 <Device::removeAllChildren()+0x29>
c00142ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142bd:	85 c0                	test   eax,eax
c00142bf:	74 0c                	je     c00142cd <Device::removeAllChildren()+0x25>
c00142c1:	83 ec 0c             	sub    esp,0xc
c00142c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00142c6:	50                   	push   eax
c00142c7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142ca:	83 c4 10             	add    esp,0x10
c00142cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142cf:	eb e4                	jmp    c00142b5 <Device::removeAllChildren()+0xd>
c00142d1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142dd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142ea:	58                   	pop    eax
c00142eb:	5b                   	pop    ebx
c00142ec:	5e                   	pop    esi
c00142ed:	c3                   	ret    

c00142ee <Device::hibernateAll()>:
c00142ee:	53                   	push   ebx
c00142ef:	83 ec 14             	sub    esp,0x14
c00142f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142f8:	53                   	push   ebx
c00142f9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00142fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014302:	83 c4 10             	add    esp,0x10
c0014305:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014308:	74 0f                	je     c0014319 <Device::hibernateAll()+0x2b>
c001430a:	83 ec 0c             	sub    esp,0xc
c001430d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014310:	e8 d9 ff ff ff       	call   c00142ee <Device::hibernateAll()>
c0014315:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014317:	eb e9                	jmp    c0014302 <Device::hibernateAll()+0x14>
c0014319:	83 c4 08             	add    esp,0x8
c001431c:	5b                   	pop    ebx
c001431d:	c3                   	ret    

c001431e <Device::wakeAll()>:
c001431e:	53                   	push   ebx
c001431f:	83 ec 14             	sub    esp,0x14
c0014322:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014326:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014328:	53                   	push   ebx
c0014329:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001432c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014332:	83 c4 10             	add    esp,0x10
c0014335:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014338:	74 0f                	je     c0014349 <Device::wakeAll()+0x2b>
c001433a:	83 ec 0c             	sub    esp,0xc
c001433d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014340:	e8 d9 ff ff ff       	call   c001431e <Device::wakeAll()>
c0014345:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014347:	eb e9                	jmp    c0014332 <Device::wakeAll()+0x14>
c0014349:	83 c4 08             	add    esp,0x8
c001434c:	5b                   	pop    ebx
c001434d:	c3                   	ret    

c001434e <Device::detectAll()>:
c001434e:	53                   	push   ebx
c001434f:	83 ec 14             	sub    esp,0x14
c0014352:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014356:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014358:	53                   	push   ebx
c0014359:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001435c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014362:	83 c4 10             	add    esp,0x10
c0014365:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014368:	74 0f                	je     c0014379 <Device::detectAll()+0x2b>
c001436a:	83 ec 0c             	sub    esp,0xc
c001436d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014370:	e8 d9 ff ff ff       	call   c001434e <Device::detectAll()>
c0014375:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014377:	eb e9                	jmp    c0014362 <Device::detectAll()+0x14>
c0014379:	83 c4 08             	add    esp,0x8
c001437c:	5b                   	pop    ebx
c001437d:	c3                   	ret    

c001437e <Device::disableLegacyAll()>:
c001437e:	53                   	push   ebx
c001437f:	83 ec 14             	sub    esp,0x14
c0014382:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014386:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014388:	53                   	push   ebx
c0014389:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001438c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014392:	83 c4 10             	add    esp,0x10
c0014395:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014398:	74 0f                	je     c00143a9 <Device::disableLegacyAll()+0x2b>
c001439a:	83 ec 0c             	sub    esp,0xc
c001439d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143a0:	e8 d9 ff ff ff       	call   c001437e <Device::disableLegacyAll()>
c00143a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143a7:	eb e9                	jmp    c0014392 <Device::disableLegacyAll()+0x14>
c00143a9:	83 c4 08             	add    esp,0x8
c00143ac:	5b                   	pop    ebx
c00143ad:	c3                   	ret    

c00143ae <Device::loadDriversForAll()>:
c00143ae:	53                   	push   ebx
c00143af:	83 ec 08             	sub    esp,0x8
c00143b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00143bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00143be:	85 db                	test   ebx,ebx
c00143c0:	74 12                	je     c00143d4 <Device::loadDriversForAll()+0x26>
c00143c2:	83 ec 0c             	sub    esp,0xc
c00143c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00143c8:	e8 e1 ff ff ff       	call   c00143ae <Device::loadDriversForAll()>
c00143cd:	83 c4 10             	add    esp,0x10
c00143d0:	89 d8                	mov    eax,ebx
c00143d2:	eb e8                	jmp    c00143bc <Device::loadDriversForAll()+0xe>
c00143d4:	83 c4 08             	add    esp,0x8
c00143d7:	5b                   	pop    ebx
c00143d8:	c3                   	ret    
c00143d9:	90                   	nop

c00143da <Device::closeAll()>:
c00143da:	53                   	push   ebx
c00143db:	83 ec 08             	sub    esp,0x8
c00143de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e4:	6a 00                	push   0x0
c00143e6:	6a 00                	push   0x0
c00143e8:	6a 00                	push   0x0
c00143ea:	53                   	push   ebx
c00143eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f4:	83 c4 10             	add    esp,0x10
c00143f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143fa:	74 0f                	je     c001440b <Device::closeAll()+0x31>
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014402:	e8 d3 ff ff ff       	call   c00143da <Device::closeAll()>
c0014407:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014409:	eb e9                	jmp    c00143f4 <Device::closeAll()+0x1a>
c001440b:	83 c4 08             	add    esp,0x8
c001440e:	5b                   	pop    ebx
c001440f:	c3                   	ret    

c0014410 <Device::powerSavingAll(PowerSavingLevel)>:
c0014410:	56                   	push   esi
c0014411:	53                   	push   ebx
c0014412:	83 ec 0c             	sub    esp,0xc
c0014415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014419:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001441d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001441f:	56                   	push   esi
c0014420:	53                   	push   ebx
c0014421:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014424:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001442a:	83 c4 10             	add    esp,0x10
c001442d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014430:	74 0f                	je     c0014441 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014432:	52                   	push   edx
c0014433:	52                   	push   edx
c0014434:	56                   	push   esi
c0014435:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014438:	e8 d3 ff ff ff       	call   c0014410 <Device::powerSavingAll(PowerSavingLevel)>
c001443d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001443f:	eb e9                	jmp    c001442a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014441:	58                   	pop    eax
c0014442:	5b                   	pop    ebx
c0014443:	5e                   	pop    esi
c0014444:	c3                   	ret    
c0014445:	90                   	nop

c0014446 <Device::setName(char const*)>:
c0014446:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001444e:	e9 d5 c3 fe ff       	jmp    c0000828 <strcpy>
c0014453:	90                   	nop

c0014454 <Device::Device(char const*)>:
c0014454:	83 ec 1c             	sub    esp,0x1c
c0014457:	ba 78 b6 02 c0       	mov    edx,0xc002b678
c001445c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014460:	89 10                	mov    DWORD PTR [eax],edx
c0014462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014466:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014474:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001447e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014482:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001448c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014490:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001449a:	83 ec 08             	sub    esp,0x8
c001449d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144a5:	e8 9c ff ff ff       	call   c0014446 <Device::setName(char const*)>
c00144aa:	83 c4 10             	add    esp,0x10
c00144ad:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144b5:	83 ec 0c             	sub    esp,0xc
c00144b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144bc:	e8 e7 b3 ff ff       	call   c000f8a8 <malloc>
c00144c1:	83 c4 10             	add    esp,0x10
c00144c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144d1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144d5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144df:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014500:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014516:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014524:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001452e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014532:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001453c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014540:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001454a:	90                   	nop
c001454b:	83 c4 1c             	add    esp,0x1c
c001454e:	c3                   	ret    
c001454f:	90                   	nop

c0014550 <Device::getName()>:
c0014550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014554:	05 d0 00 00 00       	add    eax,0xd0
c0014559:	c3                   	ret    

c001455a <DriverlessDevice::DriverlessDevice(char const*)>:
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014561:	83 ec 08             	sub    esp,0x8
c0014564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014568:	50                   	push   eax
c0014569:	e8 e6 fe ff ff       	call   c0014454 <Device::Device(char const*)>
c001456e:	83 c4 10             	add    esp,0x10
c0014571:	ba a4 b6 02 c0       	mov    edx,0xc002b6a4
c0014576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001457a:	89 10                	mov    DWORD PTR [eax],edx
c001457c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014580:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001458a:	90                   	nop
c001458b:	83 c4 0c             	add    esp,0xc
c001458e:	c3                   	ret    
c001458f:	90                   	nop

c0014590 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014590:	57                   	push   edi
c0014591:	56                   	push   esi
c0014592:	53                   	push   ebx
c0014593:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014597:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001459b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001459f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145a5:	75 0c                	jne    c00145b3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145a7:	52                   	push   edx
c00145a8:	52                   	push   edx
c00145a9:	53                   	push   ebx
c00145aa:	56                   	push   esi
c00145ab:	e8 86 4c 01 00       	call   c0029236 <LinkedList<Device>::addElement(Device*)>
c00145b0:	83 c4 10             	add    esp,0x10
c00145b3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145bc:	74 12                	je     c00145d0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145be:	50                   	push   eax
c00145bf:	57                   	push   edi
c00145c0:	56                   	push   esi
c00145c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145c4:	e8 c7 ff ff ff       	call   c0014590 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	eb e9                	jmp    c00145b9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145d0:	5b                   	pop    ebx
c00145d1:	5e                   	pop    esi
c00145d2:	5f                   	pop    edi
c00145d3:	c3                   	ret    

c00145d4 <getDevicesOfType(DeviceType)>:
c00145d4:	53                   	push   ebx
c00145d5:	83 ec 14             	sub    esp,0x14
c00145d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145dc:	53                   	push   ebx
c00145dd:	e8 30 4d 01 00       	call   c0029312 <LinkedList<Device>::LinkedList()>
c00145e2:	83 c4 0c             	add    esp,0xc
c00145e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145e9:	53                   	push   ebx
c00145ea:	ff 35 68 ef 02 c0    	push   DWORD PTR ds:0xc002ef68
c00145f0:	e8 9b ff ff ff       	call   c0014590 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145f5:	89 d8                	mov    eax,ebx
c00145f7:	83 c4 18             	add    esp,0x18
c00145fa:	5b                   	pop    ebx
c00145fb:	c2 04 00             	ret    0x4

c00145fe <HardDiskController::HardDiskController(char const*)>:
c00145fe:	83 ec 0c             	sub    esp,0xc
c0014601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014605:	83 ec 08             	sub    esp,0x8
c0014608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001460c:	50                   	push   eax
c001460d:	e8 42 fe ff ff       	call   c0014454 <Device::Device(char const*)>
c0014612:	83 c4 10             	add    esp,0x10
c0014615:	ba d0 b6 02 c0       	mov    edx,0xc002b6d0
c001461a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461e:	89 10                	mov    DWORD PTR [eax],edx
c0014620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014624:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001462e:	90                   	nop
c001462f:	83 c4 0c             	add    esp,0xc
c0014632:	c3                   	ret    
c0014633:	90                   	nop

c0014634 <HardDiskController::~HardDiskController()>:
c0014634:	83 ec 0c             	sub    esp,0xc
c0014637:	ba d0 b6 02 c0       	mov    edx,0xc002b6d0
c001463c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014640:	89 10                	mov    DWORD PTR [eax],edx
c0014642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014646:	83 ec 0c             	sub    esp,0xc
c0014649:	50                   	push   eax
c001464a:	e8 fb fa ff ff       	call   c001414a <Device::~Device()>
c001464f:	83 c4 10             	add    esp,0x10
c0014652:	90                   	nop
c0014653:	83 c4 0c             	add    esp,0xc
c0014656:	c3                   	ret    
c0014657:	90                   	nop

c0014658 <HardDiskController::~HardDiskController()>:
c0014658:	83 ec 0c             	sub    esp,0xc
c001465b:	83 ec 0c             	sub    esp,0xc
c001465e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014662:	e8 cd ff ff ff       	call   c0014634 <HardDiskController::~HardDiskController()>
c0014667:	83 c4 10             	add    esp,0x10
c001466a:	83 ec 08             	sub    esp,0x8
c001466d:	68 58 01 00 00       	push   0x158
c0014672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014676:	e8 e8 e6 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	83 c4 0c             	add    esp,0xc
c0014681:	c3                   	ret    

c0014682 <PhysicalDisk::eject()>:
c0014682:	83 ec 18             	sub    esp,0x18
c0014685:	68 f4 b6 02 c0       	push   0xc002b6f4
c001468a:	e8 b4 e7 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001468f:	83 c8 ff             	or     eax,0xffffffff
c0014692:	83 c4 1c             	add    esp,0x1c
c0014695:	c3                   	ret    

c0014696 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014696:	83 ec 0c             	sub    esp,0xc
c0014699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001469d:	83 ec 08             	sub    esp,0x8
c00146a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a4:	50                   	push   eax
c00146a5:	e8 aa fd ff ff       	call   c0014454 <Device::Device(char const*)>
c00146aa:	83 c4 10             	add    esp,0x10
c00146ad:	ba 24 b7 02 c0       	mov    edx,0xc002b724
c00146b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b6:	89 10                	mov    DWORD PTR [eax],edx
c00146b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146bc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00146ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146e4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00146ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146f8:	90                   	nop
c00146f9:	83 c4 0c             	add    esp,0xc
c00146fc:	c3                   	ret    
c00146fd:	90                   	nop

c00146fe <PhysicalDisk::startCache()>:
c00146fe:	56                   	push   esi
c00146ff:	53                   	push   ebx
c0014700:	83 ec 10             	sub    esp,0x10
c0014703:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014707:	6a 44                	push   0x44
c0014709:	e8 9a b1 ff ff       	call   c000f8a8 <malloc>
c001470e:	89 c6                	mov    esi,eax
c0014710:	58                   	pop    eax
c0014711:	5a                   	pop    edx
c0014712:	53                   	push   ebx
c0014713:	56                   	push   esi
c0014714:	e8 cf 28 00 00       	call   c0016fe8 <VCache::VCache(PhysicalDisk*)>
c0014719:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001471f:	83 c4 14             	add    esp,0x14
c0014722:	5b                   	pop    ebx
c0014723:	5e                   	pop    esi
c0014724:	c3                   	ret    
c0014725:	90                   	nop

c0014726 <PhysicalDisk::~PhysicalDisk()>:
c0014726:	83 ec 0c             	sub    esp,0xc
c0014729:	ba 24 b7 02 c0       	mov    edx,0xc002b724
c001472e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014732:	89 10                	mov    DWORD PTR [eax],edx
c0014734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014738:	83 ec 0c             	sub    esp,0xc
c001473b:	50                   	push   eax
c001473c:	e8 09 fa ff ff       	call   c001414a <Device::~Device()>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	90                   	nop
c0014745:	83 c4 0c             	add    esp,0xc
c0014748:	c3                   	ret    
c0014749:	90                   	nop

c001474a <PhysicalDisk::~PhysicalDisk()>:
c001474a:	83 ec 0c             	sub    esp,0xc
c001474d:	83 ec 0c             	sub    esp,0xc
c0014750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014754:	e8 cd ff ff ff       	call   c0014726 <PhysicalDisk::~PhysicalDisk()>
c0014759:	83 c4 10             	add    esp,0x10
c001475c:	83 ec 08             	sub    esp,0x8
c001475f:	68 6c 01 00 00       	push   0x16c
c0014764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014768:	e8 f6 e5 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	83 c4 0c             	add    esp,0xc
c0014773:	c3                   	ret    

c0014774 <FPU::FPU(char const*)>:
c0014774:	83 ec 0c             	sub    esp,0xc
c0014777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477b:	83 ec 08             	sub    esp,0x8
c001477e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014782:	50                   	push   eax
c0014783:	e8 cc fc ff ff       	call   c0014454 <Device::Device(char const*)>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	ba 68 b7 02 c0       	mov    edx,0xc002b768
c0014790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014794:	89 10                	mov    DWORD PTR [eax],edx
c0014796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147a4:	90                   	nop
c00147a5:	83 c4 0c             	add    esp,0xc
c00147a8:	c3                   	ret    
c00147a9:	90                   	nop

c00147aa <FPU::~FPU()>:
c00147aa:	83 ec 0c             	sub    esp,0xc
c00147ad:	ba 68 b7 02 c0       	mov    edx,0xc002b768
c00147b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b6:	89 10                	mov    DWORD PTR [eax],edx
c00147b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bc:	83 ec 0c             	sub    esp,0xc
c00147bf:	50                   	push   eax
c00147c0:	e8 85 f9 ff ff       	call   c001414a <Device::~Device()>
c00147c5:	83 c4 10             	add    esp,0x10
c00147c8:	90                   	nop
c00147c9:	83 c4 0c             	add    esp,0xc
c00147cc:	c3                   	ret    
c00147cd:	90                   	nop

c00147ce <FPU::~FPU()>:
c00147ce:	83 ec 0c             	sub    esp,0xc
c00147d1:	83 ec 0c             	sub    esp,0xc
c00147d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147d8:	e8 cd ff ff ff       	call   c00147aa <FPU::~FPU()>
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	83 ec 08             	sub    esp,0x8
c00147e3:	68 58 01 00 00       	push   0x158
c00147e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ec:	e8 72 e5 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c00147f1:	83 c4 10             	add    esp,0x10
c00147f4:	83 c4 0c             	add    esp,0xc
c00147f7:	c3                   	ret    

c00147f8 <setupFPU()>:
c00147f8:	53                   	push   ebx
c00147f9:	83 ec 08             	sub    esp,0x8
c00147fc:	8b 15 68 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef68
c0014802:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014809:	74 19                	je     c0014824 <setupFPU()+0x2c>
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	68 58 01 00 00       	push   0x158
c0014813:	e8 90 b0 ff ff       	call   c000f8a8 <malloc>
c0014818:	89 c3                	mov    ebx,eax
c001481a:	89 04 24             	mov    DWORD PTR [esp],eax
c001481d:	e8 48 16 01 00       	call   c0025e6a <AVX::AVX()>
c0014822:	eb 5b                	jmp    c001487f <setupFPU()+0x87>
c0014824:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001482a:	84 c0                	test   al,al
c001482c:	79 19                	jns    c0014847 <setupFPU()+0x4f>
c001482e:	83 ec 0c             	sub    esp,0xc
c0014831:	68 58 01 00 00       	push   0x158
c0014836:	e8 6d b0 ff ff       	call   c000f8a8 <malloc>
c001483b:	89 c3                	mov    ebx,eax
c001483d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014840:	e8 4b 17 01 00       	call   c0025f90 <SSE::SSE()>
c0014845:	eb 38                	jmp    c001487f <setupFPU()+0x87>
c0014847:	a8 20                	test   al,0x20
c0014849:	74 19                	je     c0014864 <setupFPU()+0x6c>
c001484b:	83 ec 0c             	sub    esp,0xc
c001484e:	68 58 01 00 00       	push   0x158
c0014853:	e8 50 b0 ff ff       	call   c000f8a8 <malloc>
c0014858:	89 c3                	mov    ebx,eax
c001485a:	89 04 24             	mov    DWORD PTR [esp],eax
c001485d:	e8 98 16 01 00       	call   c0025efa <MMX::MMX()>
c0014862:	eb 1b                	jmp    c001487f <setupFPU()+0x87>
c0014864:	a8 10                	test   al,0x10
c0014866:	74 1c                	je     c0014884 <setupFPU()+0x8c>
c0014868:	83 ec 0c             	sub    esp,0xc
c001486b:	68 58 01 00 00       	push   0x158
c0014870:	e8 33 b0 ff ff       	call   c000f8a8 <malloc>
c0014875:	89 c3                	mov    ebx,eax
c0014877:	89 04 24             	mov    DWORD PTR [esp],eax
c001487a:	e8 9f 17 01 00       	call   c002601e <x87::x87()>
c001487f:	83 c4 10             	add    esp,0x10
c0014882:	eb 24                	jmp    c00148a8 <setupFPU()+0xb0>
c0014884:	83 e0 ef             	and    eax,0xffffffef
c0014887:	83 ec 0c             	sub    esp,0xc
c001488a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014890:	68 54 b7 02 c0       	push   0xc002b754
c0014895:	e8 a9 e5 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001489a:	0f 20 c0             	mov    eax,cr0
c001489d:	83 c8 04             	or     eax,0x4
c00148a0:	0f 22 c0             	mov    cr0,eax
c00148a3:	31 db                	xor    ebx,ebx
c00148a5:	83 c4 10             	add    esp,0x10
c00148a8:	89 d8                	mov    eax,ebx
c00148aa:	83 c4 08             	add    esp,0x8
c00148ad:	5b                   	pop    ebx
c00148ae:	c3                   	ret    
c00148af:	90                   	nop

c00148b0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148b8:	c1 e0 04             	shl    eax,0x4
c00148bb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148bf:	8d 50 10             	lea    edx,[eax+0x10]
c00148c2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00148c8:	74 08                	je     c00148d2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00148ca:	83 c0 04             	add    eax,0x4
c00148cd:	39 d0                	cmp    eax,edx
c00148cf:	75 f1                	jne    c00148c2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148d1:	c3                   	ret    
c00148d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148dc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00148e6:	eb e2                	jmp    c00148ca <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00148e8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00148e8:	57                   	push   edi
c00148e9:	31 c0                	xor    eax,eax
c00148eb:	56                   	push   esi
c00148ec:	53                   	push   ebx
c00148ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00148f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00148f9:	89 da                	mov    edx,ebx
c00148fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00148ff:	c1 e2 04             	shl    edx,0x4
c0014902:	01 ca                	add    edx,ecx
c0014904:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001490c:	74 16                	je     c0014924 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001490e:	40                   	inc    eax
c001490f:	83 f8 04             	cmp    eax,0x4
c0014912:	75 f0                	jne    c0014904 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014914:	c7 44 24 10 98 b7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b798
c001491c:	5b                   	pop    ebx
c001491d:	5e                   	pop    esi
c001491e:	5f                   	pop    edi
c001491f:	e9 e9 5e 00 00       	jmp    c001a80d <Krnl::panic(char const*)>
c0014924:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014927:	8d 04 81             	lea    eax,[ecx+eax*4]
c001492a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014930:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014936:	5b                   	pop    ebx
c0014937:	5e                   	pop    esi
c0014938:	5f                   	pop    edi
c0014939:	c3                   	ret    

c001493a <doubleFault(regs*, void*)>:
c001493a:	55                   	push   ebp
c001493b:	89 e5                	mov    ebp,esp
c001493d:	83 ec 08             	sub    esp,0x8
c0014940:	83 ec 0c             	sub    esp,0xc
c0014943:	68 d3 b7 02 c0       	push   0xc002b7d3
c0014948:	e8 c0 5e 00 00       	call   c001a80d <Krnl::panic(char const*)>
c001494d:	83 c4 10             	add    esp,0x10
c0014950:	90                   	nop
c0014951:	c9                   	leave  
c0014952:	c3                   	ret    
c0014953:	90                   	nop

c0014954 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014954:	56                   	push   esi
c0014955:	53                   	push   ebx
c0014956:	50                   	push   eax
c0014957:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001495b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001495f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014964:	75 35                	jne    c001499b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014966:	8d 43 20             	lea    eax,[ebx+0x20]
c0014969:	31 d2                	xor    edx,edx
c001496b:	89 c1                	mov    ecx,eax
c001496d:	c1 e1 04             	shl    ecx,0x4
c0014970:	01 f1                	add    ecx,esi
c0014972:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001497a:	74 3e                	je     c00149ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001497c:	42                   	inc    edx
c001497d:	83 fa 04             	cmp    edx,0x4
c0014980:	75 f0                	jne    c0014972 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014982:	83 ec 0c             	sub    esp,0xc
c0014985:	68 18 b8 02 c0       	push   0xc002b818
c001498a:	e8 7e 5e 00 00       	call   c001a80d <Krnl::panic(char const*)>
c001498f:	83 c4 10             	add    esp,0x10
c0014992:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014997:	5a                   	pop    edx
c0014998:	5b                   	pop    ebx
c0014999:	5e                   	pop    esi
c001499a:	c3                   	ret    
c001499b:	83 ec 0c             	sub    esp,0xc
c001499e:	56                   	push   esi
c001499f:	e8 ac fb ff ff       	call   c0014550 <Device::getName()>
c00149a4:	83 c4 10             	add    esp,0x10
c00149a7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149aa:	75 ba                	jne    c0014966 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149ac:	83 fb 0f             	cmp    ebx,0xf
c00149af:	7f 29                	jg     c00149da <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149b1:	0f b6 9b c0 e1 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1e40]
c00149b8:	eb ac                	jmp    c0014966 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149ba:	8d 04 82             	lea    eax,[edx+eax*4]
c00149bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149c1:	8d 04 86             	lea    eax,[esi+eax*4]
c00149c4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00149ca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149ce:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149d4:	89 d8                	mov    eax,ebx
c00149d6:	5a                   	pop    edx
c00149d7:	5b                   	pop    ebx
c00149d8:	5e                   	pop    esi
c00149d9:	c3                   	ret    
c00149da:	83 ec 0c             	sub    esp,0xc
c00149dd:	68 e0 b7 02 c0       	push   0xc002b7e0
c00149e2:	e8 26 5e 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00149e7:	83 c4 10             	add    esp,0x10
c00149ea:	e9 77 ff ff ff       	jmp    c0014966 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149ef:	90                   	nop

c00149f0 <InterruptController::clearAllHandlers(int, bool)>:
c00149f0:	56                   	push   esi
c00149f1:	53                   	push   ebx
c00149f2:	52                   	push   edx
c00149f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00149fb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a00:	75 61                	jne    c0014a63 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a02:	8d 46 20             	lea    eax,[esi+0x20]
c0014a05:	c1 e6 04             	shl    esi,0x4
c0014a08:	c1 e0 04             	shl    eax,0x4
c0014a0b:	01 de                	add    esi,ebx
c0014a0d:	01 d8                	add    eax,ebx
c0014a0f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a19:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a23:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a2d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a37:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a41:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a4b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a55:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a5f:	58                   	pop    eax
c0014a60:	5b                   	pop    ebx
c0014a61:	5e                   	pop    esi
c0014a62:	c3                   	ret    
c0014a63:	83 ec 0c             	sub    esp,0xc
c0014a66:	53                   	push   ebx
c0014a67:	e8 e4 fa ff ff       	call   c0014550 <Device::getName()>
c0014a6c:	83 c4 10             	add    esp,0x10
c0014a6f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a72:	75 8e                	jne    c0014a02 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a74:	83 fe 0f             	cmp    esi,0xf
c0014a77:	7f 09                	jg     c0014a82 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a79:	0f b6 b6 c0 e1 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1e40]
c0014a80:	eb 80                	jmp    c0014a02 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	68 54 b8 02 c0       	push   0xc002b854
c0014a8a:	e8 7e 5d 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0014a8f:	83 c4 10             	add    esp,0x10
c0014a92:	e9 6b ff ff ff       	jmp    c0014a02 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a97:	90                   	nop

c0014a98 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a98:	56                   	push   esi
c0014a99:	53                   	push   ebx
c0014a9a:	52                   	push   edx
c0014a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014aa3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014aa8:	75 3a                	jne    c0014ae4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014aaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014aae:	8d 50 20             	lea    edx,[eax+0x20]
c0014ab1:	c1 e2 04             	shl    edx,0x4
c0014ab4:	8d 04 16             	lea    eax,[esi+edx*1]
c0014ab7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014abb:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ac1:	74 0b                	je     c0014ace <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ac3:	83 c0 04             	add    eax,0x4
c0014ac6:	39 d0                	cmp    eax,edx
c0014ac8:	75 f1                	jne    c0014abb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014aca:	58                   	pop    eax
c0014acb:	5b                   	pop    ebx
c0014acc:	5e                   	pop    esi
c0014acd:	c3                   	ret    
c0014ace:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ad8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ae2:	eb df                	jmp    c0014ac3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014ae4:	83 ec 0c             	sub    esp,0xc
c0014ae7:	56                   	push   esi
c0014ae8:	e8 63 fa ff ff       	call   c0014550 <Device::getName()>
c0014aed:	83 c4 10             	add    esp,0x10
c0014af0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014af3:	75 b5                	jne    c0014aaa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014af5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014afa:	7f 11                	jg     c0014b0d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014afc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b00:	0f b6 80 c0 e1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1e40]
c0014b07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b0b:	eb 9d                	jmp    c0014aaa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b0d:	83 ec 0c             	sub    esp,0xc
c0014b10:	68 54 b8 02 c0       	push   0xc002b854
c0014b15:	e8 f3 5c 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	eb 8b                	jmp    c0014aaa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b1f <nmiHandler(regs*, void*)>:
c0014b1f:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0014b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b28:	e9 c5 a4 ff ff       	jmp    c000eff2 <Computer::handleNMI()>

c0014b2d <int_handler>:
c0014b2d:	55                   	push   ebp
c0014b2e:	57                   	push   edi
c0014b2f:	56                   	push   esi
c0014b30:	53                   	push   ebx
c0014b31:	83 ec 0c             	sub    esp,0xc
c0014b34:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b38:	80 3d c4 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031ac4,0x0
c0014b3f:	74 0b                	je     c0014b4c <int_handler+0x1f>
c0014b41:	fa                   	cli    
c0014b42:	f4                   	hlt    
c0014b43:	80 3d c4 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031ac4,0x0
c0014b4a:	75 f5                	jne    c0014b41 <int_handler+0x14>
c0014b4c:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0014b51:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b5a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b60:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b63:	83 f8 17             	cmp    eax,0x17
c0014b66:	77 13                	ja     c0014b7b <int_handler+0x4e>
c0014b68:	83 ec 08             	sub    esp,0x8
c0014b6b:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b6d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b70:	0f b6 c0             	movzx  eax,al
c0014b73:	50                   	push   eax
c0014b74:	57                   	push   edi
c0014b75:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b78:	83 c4 10             	add    esp,0x10
c0014b7b:	83 c3 15             	add    ebx,0x15
c0014b7e:	c1 e3 04             	shl    ebx,0x4
c0014b81:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b85:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b8c:	31 db                	xor    ebx,ebx
c0014b8e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b92:	85 c0                	test   eax,eax
c0014b94:	74 13                	je     c0014ba9 <int_handler+0x7c>
c0014b96:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b99:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b9d:	74 1c                	je     c0014bbb <int_handler+0x8e>
c0014b9f:	83 ec 08             	sub    esp,0x8
c0014ba2:	52                   	push   edx
c0014ba3:	56                   	push   esi
c0014ba4:	ff d0                	call   eax
c0014ba6:	83 c4 10             	add    esp,0x10
c0014ba9:	43                   	inc    ebx
c0014baa:	83 fb 04             	cmp    ebx,0x4
c0014bad:	75 df                	jne    c0014b8e <int_handler+0x61>
c0014baf:	83 c4 0c             	add    esp,0xc
c0014bb2:	31 c0                	xor    eax,eax
c0014bb4:	5b                   	pop    ebx
c0014bb5:	31 d2                	xor    edx,edx
c0014bb7:	5e                   	pop    esi
c0014bb8:	5f                   	pop    edi
c0014bb9:	5d                   	pop    ebp
c0014bba:	c3                   	ret    
c0014bbb:	83 ec 08             	sub    esp,0x8
c0014bbe:	52                   	push   edx
c0014bbf:	56                   	push   esi
c0014bc0:	ff d0                	call   eax
c0014bc2:	83 c4 10             	add    esp,0x10
c0014bc5:	83 c4 0c             	add    esp,0xc
c0014bc8:	5b                   	pop    ebx
c0014bc9:	5e                   	pop    esi
c0014bca:	5f                   	pop    edi
c0014bcb:	5d                   	pop    ebp
c0014bcc:	c3                   	ret    
c0014bcd:	90                   	nop

c0014bce <InterruptController::InterruptController(char const*)>:
c0014bce:	83 ec 1c             	sub    esp,0x1c
c0014bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bd5:	83 ec 08             	sub    esp,0x8
c0014bd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bdc:	50                   	push   eax
c0014bdd:	e8 72 f8 ff ff       	call   c0014454 <Device::Device(char const*)>
c0014be2:	83 c4 10             	add    esp,0x10
c0014be5:	ba 14 bb 02 c0       	mov    edx,0xc002bb14
c0014bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bee:	89 10                	mov    DWORD PTR [eax],edx
c0014bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bf4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014bfe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c06:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c0e:	7f 5e                	jg     c0014c6e <InterruptController::InterruptController(char const*)+0xa0>
c0014c10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c18:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c1d:	7f 49                	jg     c0014c68 <InterruptController::InterruptController(char const*)+0x9a>
c0014c1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c27:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c32:	01 ca                	add    edx,ecx
c0014c34:	83 c2 54             	add    edx,0x54
c0014c37:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c47:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c52:	01 ca                	add    edx,ecx
c0014c54:	81 c2 54 04 00 00    	add    edx,0x454
c0014c5a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c62:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c66:	eb b0                	jmp    c0014c18 <InterruptController::InterruptController(char const*)+0x4a>
c0014c68:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c6c:	eb 98                	jmp    c0014c06 <InterruptController::InterruptController(char const*)+0x38>
c0014c6e:	90                   	nop
c0014c6f:	83 c4 1c             	add    esp,0x1c
c0014c72:	c3                   	ret    
c0014c73:	90                   	nop

c0014c74 <InterruptController::~InterruptController()>:
c0014c74:	83 ec 0c             	sub    esp,0xc
c0014c77:	ba 14 bb 02 c0       	mov    edx,0xc002bb14
c0014c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c80:	89 10                	mov    DWORD PTR [eax],edx
c0014c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c86:	83 ec 0c             	sub    esp,0xc
c0014c89:	50                   	push   eax
c0014c8a:	e8 bb f4 ff ff       	call   c001414a <Device::~Device()>
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	90                   	nop
c0014c93:	83 c4 0c             	add    esp,0xc
c0014c96:	c3                   	ret    
c0014c97:	90                   	nop

c0014c98 <InterruptController::~InterruptController()>:
c0014c98:	83 ec 0c             	sub    esp,0xc
c0014c9b:	83 ec 0c             	sub    esp,0xc
c0014c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ca2:	e8 cd ff ff ff       	call   c0014c74 <InterruptController::~InterruptController()>
c0014ca7:	83 c4 10             	add    esp,0x10
c0014caa:	83 ec 08             	sub    esp,0x8
c0014cad:	68 58 21 00 00       	push   0x2158
c0014cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cb6:	e8 a8 e0 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0014cbb:	83 c4 10             	add    esp,0x10
c0014cbe:	83 c4 0c             	add    esp,0xc
c0014cc1:	c3                   	ret    

c0014cc2 <displayDebugInfo(regs*)>:
c0014cc2:	55                   	push   ebp
c0014cc3:	57                   	push   edi
c0014cc4:	56                   	push   esi
c0014cc5:	53                   	push   ebx
c0014cc6:	83 ec 24             	sub    esp,0x24
c0014cc9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ccd:	0f 20 c2             	mov    edx,cr0
c0014cd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014cd4:	0f 20 d7             	mov    edi,cr2
c0014cd7:	0f 20 de             	mov    esi,cr3
c0014cda:	0f 20 e5             	mov    ebp,cr4
c0014cdd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014ce0:	68 8e b8 02 c0       	push   0xc002b88e
c0014ce5:	e8 59 e1 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014cea:	59                   	pop    ecx
c0014ceb:	58                   	pop    eax
c0014cec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cef:	68 99 b8 02 c0       	push   0xc002b899
c0014cf4:	e8 4a e1 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014cf9:	58                   	pop    eax
c0014cfa:	5a                   	pop    edx
c0014cfb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014cfe:	68 a4 b8 02 c0       	push   0xc002b8a4
c0014d03:	e8 3b e1 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d08:	59                   	pop    ecx
c0014d09:	58                   	pop    eax
c0014d0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d0d:	68 af b8 02 c0       	push   0xc002b8af
c0014d12:	e8 2c e1 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d17:	58                   	pop    eax
c0014d18:	5a                   	pop    edx
c0014d19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d1c:	68 ba b8 02 c0       	push   0xc002b8ba
c0014d21:	e8 1d e1 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d26:	59                   	pop    ecx
c0014d27:	58                   	pop    eax
c0014d28:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d2b:	68 c5 b8 02 c0       	push   0xc002b8c5
c0014d30:	e8 0e e1 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d35:	58                   	pop    eax
c0014d36:	5a                   	pop    edx
c0014d37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d3a:	68 d0 b8 02 c0       	push   0xc002b8d0
c0014d3f:	e8 ff e0 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d44:	59                   	pop    ecx
c0014d45:	58                   	pop    eax
c0014d46:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d49:	68 db b8 02 c0       	push   0xc002b8db
c0014d4e:	e8 f0 e0 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d53:	58                   	pop    eax
c0014d54:	5a                   	pop    edx
c0014d55:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d58:	68 e6 b8 02 c0       	push   0xc002b8e6
c0014d5d:	e8 e1 e0 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d62:	59                   	pop    ecx
c0014d63:	58                   	pop    eax
c0014d64:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d67:	68 f5 b8 02 c0       	push   0xc002b8f5
c0014d6c:	e8 d2 e0 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d71:	58                   	pop    eax
c0014d72:	5a                   	pop    edx
c0014d73:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d76:	68 00 b9 02 c0       	push   0xc002b900
c0014d7b:	e8 c3 e0 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d80:	59                   	pop    ecx
c0014d81:	58                   	pop    eax
c0014d82:	57                   	push   edi
c0014d83:	68 0b b9 02 c0       	push   0xc002b90b
c0014d88:	e8 b6 e0 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d8d:	58                   	pop    eax
c0014d8e:	5a                   	pop    edx
c0014d8f:	56                   	push   esi
c0014d90:	68 16 b9 02 c0       	push   0xc002b916
c0014d95:	e8 a9 e0 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0014d9a:	59                   	pop    ecx
c0014d9b:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014da0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da6:	e8 bb be ff ff       	call   c0010c66 <setActiveTerminal(VgaText*)>
c0014dab:	58                   	pop    eax
c0014dac:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014daf:	5a                   	pop    edx
c0014db0:	c1 e0 05             	shl    eax,0x5
c0014db3:	05 20 df 02 c0       	add    eax,0xc002df20
c0014db8:	50                   	push   eax
c0014db9:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014dbe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc4:	e8 29 c2 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014dc9:	59                   	pop    ecx
c0014dca:	58                   	pop    eax
c0014dcb:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014dd0:	68 21 b9 02 c0       	push   0xc002b921
c0014dd5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ddb:	e8 12 c2 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014de0:	58                   	pop    eax
c0014de1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014de6:	5a                   	pop    edx
c0014de7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dea:	83 c0 0c             	add    eax,0xc
c0014ded:	50                   	push   eax
c0014dee:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014df3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df9:	e8 f4 c1 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014dfe:	59                   	pop    ecx
c0014dff:	58                   	pop    eax
c0014e00:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014e05:	68 2a b9 02 c0       	push   0xc002b92a
c0014e0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e10:	e8 dd c1 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014e15:	58                   	pop    eax
c0014e16:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014e1b:	5a                   	pop    edx
c0014e1c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e25:	e8 ee c1 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014e2a:	59                   	pop    ecx
c0014e2b:	58                   	pop    eax
c0014e2c:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014e31:	68 32 b9 02 c0       	push   0xc002b932
c0014e36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3c:	e8 b1 c1 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014e41:	58                   	pop    eax
c0014e42:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014e47:	5a                   	pop    edx
c0014e48:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e51:	e8 c2 c1 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014e56:	59                   	pop    ecx
c0014e57:	58                   	pop    eax
c0014e58:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014e5d:	68 3a b9 02 c0       	push   0xc002b93a
c0014e62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e68:	e8 85 c1 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014e6d:	58                   	pop    eax
c0014e6e:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014e73:	5a                   	pop    edx
c0014e74:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7d:	e8 96 c1 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014e82:	59                   	pop    ecx
c0014e83:	58                   	pop    eax
c0014e84:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014e89:	68 42 b9 02 c0       	push   0xc002b942
c0014e8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e94:	e8 59 c1 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014e99:	58                   	pop    eax
c0014e9a:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014e9f:	5a                   	pop    edx
c0014ea0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ea3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea9:	e8 6a c1 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014eae:	59                   	pop    ecx
c0014eaf:	58                   	pop    eax
c0014eb0:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014eb5:	68 4a b9 02 c0       	push   0xc002b94a
c0014eba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec0:	e8 2d c1 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014ec5:	58                   	pop    eax
c0014ec6:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014ecb:	5a                   	pop    edx
c0014ecc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ecf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed5:	e8 3e c1 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014eda:	59                   	pop    ecx
c0014edb:	58                   	pop    eax
c0014edc:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014ee1:	68 52 b9 02 c0       	push   0xc002b952
c0014ee6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eec:	e8 01 c1 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014ef1:	58                   	pop    eax
c0014ef2:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014ef7:	5a                   	pop    edx
c0014ef8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014efb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f01:	e8 12 c1 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014f06:	59                   	pop    ecx
c0014f07:	58                   	pop    eax
c0014f08:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014f0d:	68 5a b9 02 c0       	push   0xc002b95a
c0014f12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f18:	e8 d5 c0 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014f1d:	58                   	pop    eax
c0014f1e:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014f23:	5a                   	pop    edx
c0014f24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f28:	52                   	push   edx
c0014f29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2f:	e8 e4 c0 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014f34:	59                   	pop    ecx
c0014f35:	58                   	pop    eax
c0014f36:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014f3b:	68 63 b9 02 c0       	push   0xc002b963
c0014f40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f46:	e8 a7 c0 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014f4b:	58                   	pop    eax
c0014f4c:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014f51:	5a                   	pop    edx
c0014f52:	57                   	push   edi
c0014f53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f59:	e8 ba c0 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014f5e:	59                   	pop    ecx
c0014f5f:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014f64:	5f                   	pop    edi
c0014f65:	68 6b b9 02 c0       	push   0xc002b96b
c0014f6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f70:	e8 7d c0 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014f75:	58                   	pop    eax
c0014f76:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014f7b:	5a                   	pop    edx
c0014f7c:	56                   	push   esi
c0014f7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f83:	e8 90 c0 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014f88:	59                   	pop    ecx
c0014f89:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014f8e:	5e                   	pop    esi
c0014f8f:	68 73 b9 02 c0       	push   0xc002b973
c0014f94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9a:	e8 53 c0 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014f9f:	5f                   	pop    edi
c0014fa0:	58                   	pop    eax
c0014fa1:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014fa6:	55                   	push   ebp
c0014fa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fad:	e8 66 c0 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014fb2:	58                   	pop    eax
c0014fb3:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014fb8:	5a                   	pop    edx
c0014fb9:	68 7b b9 02 c0       	push   0xc002b97b
c0014fbe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc4:	e8 29 c0 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014fc9:	0f 21 c0             	mov    eax,db0
c0014fcc:	59                   	pop    ecx
c0014fcd:	5e                   	pop    esi
c0014fce:	50                   	push   eax
c0014fcf:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014fd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fda:	e8 39 c0 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0014fdf:	5f                   	pop    edi
c0014fe0:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0014fe5:	5d                   	pop    ebp
c0014fe6:	68 84 b9 02 c0       	push   0xc002b984
c0014feb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff1:	e8 fc bf ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0014ff6:	0f 21 c8             	mov    eax,db1
c0014ff9:	5a                   	pop    edx
c0014ffa:	59                   	pop    ecx
c0014ffb:	50                   	push   eax
c0014ffc:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0015001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015007:	e8 0c c0 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001500c:	5e                   	pop    esi
c001500d:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0015012:	5f                   	pop    edi
c0015013:	68 8c b9 02 c0       	push   0xc002b98c
c0015018:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501e:	e8 cf bf ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0015023:	0f 21 d0             	mov    eax,db2
c0015026:	5d                   	pop    ebp
c0015027:	5a                   	pop    edx
c0015028:	50                   	push   eax
c0015029:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001502e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015034:	e8 df bf ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0015039:	59                   	pop    ecx
c001503a:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001503f:	5e                   	pop    esi
c0015040:	68 94 b9 02 c0       	push   0xc002b994
c0015045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504b:	e8 a2 bf ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0015050:	0f 21 d8             	mov    eax,db3
c0015053:	5f                   	pop    edi
c0015054:	5d                   	pop    ebp
c0015055:	50                   	push   eax
c0015056:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001505b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015061:	e8 b2 bf ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0015066:	58                   	pop    eax
c0015067:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001506c:	5a                   	pop    edx
c001506d:	68 9c b9 02 c0       	push   0xc002b99c
c0015072:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015078:	e8 75 bf ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001507d:	0f 21 f0             	mov    eax,db6
c0015080:	59                   	pop    ecx
c0015081:	5e                   	pop    esi
c0015082:	50                   	push   eax
c0015083:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0015088:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508e:	e8 85 bf ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c0015093:	5f                   	pop    edi
c0015094:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0015099:	5d                   	pop    ebp
c001509a:	68 a4 b9 02 c0       	push   0xc002b9a4
c001509f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a5:	e8 48 bf ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c00150aa:	0f 21 f8             	mov    eax,db7
c00150ad:	5a                   	pop    edx
c00150ae:	59                   	pop    ecx
c00150af:	50                   	push   eax
c00150b0:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c00150b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bb:	e8 58 bf ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c00150c0:	5e                   	pop    esi
c00150c1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150c4:	e8 a3 8a 00 00       	call   c001db6c <Thr::getDriverNameFromAddress(unsigned long)>
c00150c9:	83 c4 10             	add    esp,0x10
c00150cc:	85 c0                	test   eax,eax
c00150ce:	74 7d                	je     c001514d <displayDebugInfo(regs*)+0x48b>
c00150d0:	89 c6                	mov    esi,eax
c00150d2:	50                   	push   eax
c00150d3:	50                   	push   eax
c00150d4:	56                   	push   esi
c00150d5:	68 ac b9 02 c0       	push   0xc002b9ac
c00150da:	e8 64 dd ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00150df:	5a                   	pop    edx
c00150e0:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c00150e5:	59                   	pop    ecx
c00150e6:	68 ba b9 02 c0       	push   0xc002b9ba
c00150eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f1:	e8 fc be ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c00150f6:	5f                   	pop    edi
c00150f7:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c00150fc:	5d                   	pop    ebp
c00150fd:	56                   	push   esi
c00150fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015104:	e8 e9 be ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0015109:	58                   	pop    eax
c001510a:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001510f:	5a                   	pop    edx
c0015110:	68 c6 b9 02 c0       	push   0xc002b9c6
c0015115:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511b:	e8 d2 be ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c0015120:	59                   	pop    ecx
c0015121:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0015126:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001512c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001512f:	e8 6f 8a 00 00       	call   c001dba3 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015134:	5b                   	pop    ebx
c0015135:	5d                   	pop    ebp
c0015136:	50                   	push   eax
c0015137:	57                   	push   edi
c0015138:	e8 db be ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001513d:	58                   	pop    eax
c001513e:	5a                   	pop    edx
c001513f:	56                   	push   esi
c0015140:	68 d2 b9 02 c0       	push   0xc002b9d2
c0015145:	e8 f9 dc ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001514a:	83 c4 10             	add    esp,0x10
c001514d:	fa                   	cli    
c001514e:	f4                   	hlt    
c001514f:	eb fe                	jmp    c001514f <displayDebugInfo(regs*)+0x48d>

c0015151 <x87EmulHandler(regs*, void*)>:
c0015151:	83 ec 0c             	sub    esp,0xc
c0015154:	0f 20 c2             	mov    edx,cr0
c0015157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001515c:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015160:	75 4b                	jne    c00151ad <x87EmulHandler(regs*, void*)+0x5c>
c0015162:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0015167:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001516d:	85 c0                	test   eax,eax
c001516f:	74 05                	je     c0015176 <x87EmulHandler(regs*, void*)+0x25>
c0015171:	83 e2 08             	and    edx,0x8
c0015174:	75 17                	jne    c001518d <x87EmulHandler(regs*, void*)+0x3c>
c0015176:	83 ec 0c             	sub    esp,0xc
c0015179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001517d:	e8 5a b0 00 00       	call   c00201dc <Vm::x87Handler(regs*)>
c0015182:	83 c4 10             	add    esp,0x10
c0015185:	84 c0                	test   al,al
c0015187:	74 24                	je     c00151ad <x87EmulHandler(regs*, void*)+0x5c>
c0015189:	83 c4 0c             	add    esp,0xc
c001518c:	c3                   	ret    
c001518d:	83 ec 0c             	sub    esp,0xc
c0015190:	68 f8 b9 02 c0       	push   0xc002b9f8
c0015195:	e8 a9 dc ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001519a:	0f 06                	clts   
c001519c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151a1:	83 c4 10             	add    esp,0x10
c00151a4:	a3 08 f1 02 c0       	mov    ds:0xc002f108,eax
c00151a9:	83 c4 0c             	add    esp,0xc
c00151ac:	c3                   	ret    
c00151ad:	83 ec 0c             	sub    esp,0xc
c00151b0:	68 e2 b9 02 c0       	push   0xc002b9e2
c00151b5:	e8 89 dc ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00151ba:	5a                   	pop    edx
c00151bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151bf:	e8 fe fa ff ff       	call   c0014cc2 <displayDebugInfo(regs*)>

c00151c4 <gpFault(regs*, void*)>:
c00151c4:	53                   	push   ebx
c00151c5:	83 ec 14             	sub    esp,0x14
c00151c8:	c7 05 04 f1 02 c0 59 f5 01 c0 	mov    DWORD PTR ds:0xc002f104,0xc001f559
c00151d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151d6:	53                   	push   ebx
c00151d7:	e8 7d a3 00 00       	call   c001f559 <Vm::faultHandler(regs*)>
c00151dc:	83 c4 10             	add    esp,0x10
c00151df:	84 c0                	test   al,al
c00151e1:	74 05                	je     c00151e8 <gpFault(regs*, void*)+0x24>
c00151e3:	83 c4 08             	add    esp,0x8
c00151e6:	5b                   	pop    ebx
c00151e7:	c3                   	ret    
c00151e8:	83 ec 0c             	sub    esp,0xc
c00151eb:	68 05 ba 02 c0       	push   0xc002ba05
c00151f0:	e8 4e dc ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00151f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151f8:	e8 c5 fa ff ff       	call   c0014cc2 <displayDebugInfo(regs*)>

c00151fd <pgFault(regs*, void*)>:
c00151fd:	83 ec 14             	sub    esp,0x14
c0015200:	0f 20 d0             	mov    eax,cr2
c0015203:	50                   	push   eax
c0015204:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015209:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001520c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015212:	e8 49 d8 ff ff       	call   c0012a60 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015217:	83 c4 10             	add    esp,0x10
c001521a:	84 c0                	test   al,al
c001521c:	74 04                	je     c0015222 <pgFault(regs*, void*)+0x25>
c001521e:	83 c4 0c             	add    esp,0xc
c0015221:	c3                   	ret    
c0015222:	83 ec 0c             	sub    esp,0xc
c0015225:	68 20 ba 02 c0       	push   0xc002ba20
c001522a:	e8 14 dc ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001522f:	58                   	pop    eax
c0015230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015234:	e8 89 fa ff ff       	call   c0014cc2 <displayDebugInfo(regs*)>

c0015239 <otherISRHandler(regs*, void*)>:
c0015239:	53                   	push   ebx
c001523a:	83 ec 0c             	sub    esp,0xc
c001523d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015241:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015244:	50                   	push   eax
c0015245:	50                   	push   eax
c0015246:	68 2d ba 02 c0       	push   0xc002ba2d
c001524b:	e8 f3 db ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0015250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015253:	e8 6a fa ff ff       	call   c0014cc2 <displayDebugInfo(regs*)>

c0015258 <opcodeFault(regs*, void*)>:
c0015258:	55                   	push   ebp
c0015259:	89 e5                	mov    ebp,esp
c001525b:	56                   	push   esi
c001525c:	53                   	push   ebx
c001525d:	83 ec 40             	sub    esp,0x40
c0015260:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0015265:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001526b:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015271:	84 c0                	test   al,al
c0015273:	74 24                	je     c0015299 <opcodeFault(regs*, void*)+0x41>
c0015275:	83 ec 0c             	sub    esp,0xc
c0015278:	68 4c ba 02 c0       	push   0xc002ba4c
c001527d:	e8 c1 db ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0015282:	83 c4 10             	add    esp,0x10
c0015285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015288:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001528b:	8d 50 19             	lea    edx,[eax+0x19]
c001528e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015291:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015294:	e9 d5 05 00 00       	jmp    c001586e <opcodeFault(regs*, void*)+0x616>
c0015299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001529f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152a2:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152a6:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b6:	8a 00                	mov    al,BYTE PTR [eax]
c00152b8:	3c f0                	cmp    al,0xf0
c00152ba:	75 17                	jne    c00152d3 <opcodeFault(regs*, void*)+0x7b>
c00152bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c5:	8d 50 01             	lea    edx,[eax+0x1]
c00152c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ce:	e9 da 00 00 00       	jmp    c00153ad <opcodeFault(regs*, void*)+0x155>
c00152d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d6:	8a 00                	mov    al,BYTE PTR [eax]
c00152d8:	3c f2                	cmp    al,0xf2
c00152da:	74 09                	je     c00152e5 <opcodeFault(regs*, void*)+0x8d>
c00152dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152df:	8a 00                	mov    al,BYTE PTR [eax]
c00152e1:	3c f3                	cmp    al,0xf3
c00152e3:	75 1b                	jne    c0015300 <opcodeFault(regs*, void*)+0xa8>
c00152e5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152e9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f2:	8d 50 01             	lea    edx,[eax+0x1]
c00152f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152fb:	e9 ad 00 00 00       	jmp    c00153ad <opcodeFault(regs*, void*)+0x155>
c0015300:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015303:	8a 00                	mov    al,BYTE PTR [eax]
c0015305:	3c 66                	cmp    al,0x66
c0015307:	75 1f                	jne    c0015328 <opcodeFault(regs*, void*)+0xd0>
c0015309:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001530d:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015311:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015317:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001531a:	8d 50 01             	lea    edx,[eax+0x1]
c001531d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015320:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015323:	e9 85 00 00 00       	jmp    c00153ad <opcodeFault(regs*, void*)+0x155>
c0015328:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532b:	8a 00                	mov    al,BYTE PTR [eax]
c001532d:	3c 67                	cmp    al,0x67
c001532f:	75 18                	jne    c0015349 <opcodeFault(regs*, void*)+0xf1>
c0015331:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015335:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533e:	8d 50 01             	lea    edx,[eax+0x1]
c0015341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015344:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015347:	eb 64                	jmp    c00153ad <opcodeFault(regs*, void*)+0x155>
c0015349:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534c:	8a 00                	mov    al,BYTE PTR [eax]
c001534e:	3c 2e                	cmp    al,0x2e
c0015350:	74 09                	je     c001535b <opcodeFault(regs*, void*)+0x103>
c0015352:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015355:	8a 00                	mov    al,BYTE PTR [eax]
c0015357:	3c 3e                	cmp    al,0x3e
c0015359:	75 18                	jne    c0015373 <opcodeFault(regs*, void*)+0x11b>
c001535b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001535f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015365:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015368:	8d 50 01             	lea    edx,[eax+0x1]
c001536b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015371:	eb 3a                	jmp    c00153ad <opcodeFault(regs*, void*)+0x155>
c0015373:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015376:	8a 00                	mov    al,BYTE PTR [eax]
c0015378:	3c 36                	cmp    al,0x36
c001537a:	74 1b                	je     c0015397 <opcodeFault(regs*, void*)+0x13f>
c001537c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537f:	8a 00                	mov    al,BYTE PTR [eax]
c0015381:	3c 26                	cmp    al,0x26
c0015383:	74 12                	je     c0015397 <opcodeFault(regs*, void*)+0x13f>
c0015385:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015388:	8a 00                	mov    al,BYTE PTR [eax]
c001538a:	3c 64                	cmp    al,0x64
c001538c:	74 09                	je     c0015397 <opcodeFault(regs*, void*)+0x13f>
c001538e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015391:	8a 00                	mov    al,BYTE PTR [eax]
c0015393:	3c 65                	cmp    al,0x65
c0015395:	75 16                	jne    c00153ad <opcodeFault(regs*, void*)+0x155>
c0015397:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001539b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001539e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a4:	8d 50 01             	lea    edx,[eax+0x1]
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b0:	8a 00                	mov    al,BYTE PTR [eax]
c00153b2:	3c 0f                	cmp    al,0xf
c00153b4:	0f 85 ad 00 00 00    	jne    c0015467 <opcodeFault(regs*, void*)+0x20f>
c00153ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bd:	40                   	inc    eax
c00153be:	8a 00                	mov    al,BYTE PTR [eax]
c00153c0:	3c c2                	cmp    al,0xc2
c00153c2:	74 0e                	je     c00153d2 <opcodeFault(regs*, void*)+0x17a>
c00153c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c7:	40                   	inc    eax
c00153c8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ca:	3c c3                	cmp    al,0xc3
c00153cc:	0f 85 95 00 00 00    	jne    c0015467 <opcodeFault(regs*, void*)+0x20f>
c00153d2:	83 ec 0c             	sub    esp,0xc
c00153d5:	68 6f ba 02 c0       	push   0xc002ba6f
c00153da:	e8 64 da ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00153df:	83 c4 10             	add    esp,0x10
c00153e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e8:	8d 50 01             	lea    edx,[eax+0x1]
c00153eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f7:	8a 00                	mov    al,BYTE PTR [eax]
c00153f9:	8d 50 fe             	lea    edx,[eax-0x2]
c00153fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ff:	88 10                	mov    BYTE PTR [eax],dl
c0015401:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015404:	50                   	push   eax
c0015405:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015408:	50                   	push   eax
c0015409:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001540c:	50                   	push   eax
c001540d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015410:	e8 c9 4a 00 00       	call   c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015415:	83 c4 10             	add    esp,0x10
c0015418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015421:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015424:	01 d0                	add    eax,edx
c0015426:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015432:	48                   	dec    eax
c0015433:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015439:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001543c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	83 ec 04             	sub    esp,0x4
c0015445:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015448:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001544b:	50                   	push   eax
c001544c:	e8 63 ad fe ff       	call   c00001b4 <voodooXADD>
c0015451:	83 c4 10             	add    esp,0x10
c0015454:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015457:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001545a:	01 c2                	add    edx,eax
c001545c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015462:	e9 07 04 00 00       	jmp    c001586e <opcodeFault(regs*, void*)+0x616>
c0015467:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546a:	8a 00                	mov    al,BYTE PTR [eax]
c001546c:	3c 0f                	cmp    al,0xf
c001546e:	0f 85 8b 01 00 00    	jne    c00155ff <opcodeFault(regs*, void*)+0x3a7>
c0015474:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015477:	40                   	inc    eax
c0015478:	8a 00                	mov    al,BYTE PTR [eax]
c001547a:	3c c7                	cmp    al,0xc7
c001547c:	0f 86 7d 01 00 00    	jbe    c00155ff <opcodeFault(regs*, void*)+0x3a7>
c0015482:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015485:	40                   	inc    eax
c0015486:	8a 00                	mov    al,BYTE PTR [eax]
c0015488:	3c cf                	cmp    al,0xcf
c001548a:	0f 87 6f 01 00 00    	ja     c00155ff <opcodeFault(regs*, void*)+0x3a7>
c0015490:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015493:	40                   	inc    eax
c0015494:	8a 00                	mov    al,BYTE PTR [eax]
c0015496:	83 c0 38             	add    eax,0x38
c0015499:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001549c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154a0:	75 0b                	jne    c00154ad <opcodeFault(regs*, void*)+0x255>
c00154a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ab:	eb 75                	jmp    c0015522 <opcodeFault(regs*, void*)+0x2ca>
c00154ad:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154b1:	75 0b                	jne    c00154be <opcodeFault(regs*, void*)+0x266>
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154bc:	eb 64                	jmp    c0015522 <opcodeFault(regs*, void*)+0x2ca>
c00154be:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154c2:	75 0b                	jne    c00154cf <opcodeFault(regs*, void*)+0x277>
c00154c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154cd:	eb 53                	jmp    c0015522 <opcodeFault(regs*, void*)+0x2ca>
c00154cf:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154d3:	75 0b                	jne    c00154e0 <opcodeFault(regs*, void*)+0x288>
c00154d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154de:	eb 42                	jmp    c0015522 <opcodeFault(regs*, void*)+0x2ca>
c00154e0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154e4:	75 0b                	jne    c00154f1 <opcodeFault(regs*, void*)+0x299>
c00154e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00154ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ef:	eb 31                	jmp    c0015522 <opcodeFault(regs*, void*)+0x2ca>
c00154f1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154f5:	75 0b                	jne    c0015502 <opcodeFault(regs*, void*)+0x2aa>
c00154f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fa:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00154fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015500:	eb 20                	jmp    c0015522 <opcodeFault(regs*, void*)+0x2ca>
c0015502:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015506:	75 0b                	jne    c0015513 <opcodeFault(regs*, void*)+0x2bb>
c0015508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001550e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015511:	eb 0f                	jmp    c0015522 <opcodeFault(regs*, void*)+0x2ca>
c0015513:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015517:	75 09                	jne    c0015522 <opcodeFault(regs*, void*)+0x2ca>
c0015519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001551f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015522:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015526:	74 10                	je     c0015538 <opcodeFault(regs*, void*)+0x2e0>
c0015528:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001552f:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015536:	eb 2d                	jmp    c0015565 <opcodeFault(regs*, void*)+0x30d>
c0015538:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001553b:	c1 e0 18             	shl    eax,0x18
c001553e:	89 c2                	mov    edx,eax
c0015540:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015543:	c1 e0 08             	shl    eax,0x8
c0015546:	25 00 00 ff 00       	and    eax,0xff0000
c001554b:	09 c2                	or     edx,eax
c001554d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015550:	c1 e8 08             	shr    eax,0x8
c0015553:	25 00 ff 00 00       	and    eax,0xff00
c0015558:	09 c2                	or     edx,eax
c001555a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001555d:	c1 e8 18             	shr    eax,0x18
c0015560:	09 d0                	or     eax,edx
c0015562:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015565:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015569:	75 0b                	jne    c0015576 <opcodeFault(regs*, void*)+0x31e>
c001556b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015571:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015574:	eb 75                	jmp    c00155eb <opcodeFault(regs*, void*)+0x393>
c0015576:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001557a:	75 0b                	jne    c0015587 <opcodeFault(regs*, void*)+0x32f>
c001557c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015582:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015585:	eb 64                	jmp    c00155eb <opcodeFault(regs*, void*)+0x393>
c0015587:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001558b:	75 0b                	jne    c0015598 <opcodeFault(regs*, void*)+0x340>
c001558d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015590:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015593:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015596:	eb 53                	jmp    c00155eb <opcodeFault(regs*, void*)+0x393>
c0015598:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001559c:	75 0b                	jne    c00155a9 <opcodeFault(regs*, void*)+0x351>
c001559e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155a7:	eb 42                	jmp    c00155eb <opcodeFault(regs*, void*)+0x393>
c00155a9:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155ad:	75 0b                	jne    c00155ba <opcodeFault(regs*, void*)+0x362>
c00155af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b5:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155b8:	eb 31                	jmp    c00155eb <opcodeFault(regs*, void*)+0x393>
c00155ba:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155be:	75 0b                	jne    c00155cb <opcodeFault(regs*, void*)+0x373>
c00155c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155c9:	eb 20                	jmp    c00155eb <opcodeFault(regs*, void*)+0x393>
c00155cb:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155cf:	75 0b                	jne    c00155dc <opcodeFault(regs*, void*)+0x384>
c00155d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155da:	eb 0f                	jmp    c00155eb <opcodeFault(regs*, void*)+0x393>
c00155dc:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155e0:	75 09                	jne    c00155eb <opcodeFault(regs*, void*)+0x393>
c00155e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00155eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155f1:	8d 50 02             	lea    edx,[eax+0x2]
c00155f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155fa:	e9 6f 02 00 00       	jmp    c001586e <opcodeFault(regs*, void*)+0x616>
c00155ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015602:	8a 00                	mov    al,BYTE PTR [eax]
c0015604:	3c 0f                	cmp    al,0xf
c0015606:	0f 85 8d 01 00 00    	jne    c0015799 <opcodeFault(regs*, void*)+0x541>
c001560c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560f:	40                   	inc    eax
c0015610:	8a 00                	mov    al,BYTE PTR [eax]
c0015612:	3c c7                	cmp    al,0xc7
c0015614:	0f 85 7f 01 00 00    	jne    c0015799 <opcodeFault(regs*, void*)+0x541>
c001561a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001561d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015620:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015623:	8d 50 01             	lea    edx,[eax+0x1]
c0015626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015629:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001562c:	8d 45 ba             	lea    eax,[ebp-0x46]
c001562f:	50                   	push   eax
c0015630:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015633:	50                   	push   eax
c0015634:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015637:	50                   	push   eax
c0015638:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001563b:	e8 9e 48 00 00       	call   c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015640:	83 c4 10             	add    esp,0x10
c0015643:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015646:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015649:	83 f0 01             	xor    eax,0x1
c001564c:	84 c0                	test   al,al
c001564e:	0f 84 45 01 00 00    	je     c0015799 <opcodeFault(regs*, void*)+0x541>
c0015654:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015657:	3c 01                	cmp    al,0x1
c0015659:	0f 85 3a 01 00 00    	jne    c0015799 <opcodeFault(regs*, void*)+0x541>
c001565f:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015662:	83 f0 01             	xor    eax,0x1
c0015665:	84 c0                	test   al,al
c0015667:	0f 84 2c 01 00 00    	je     c0015799 <opcodeFault(regs*, void*)+0x541>
c001566d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015670:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015673:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015676:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001567d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015680:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015683:	89 c2                	mov    edx,eax
c0015685:	b8 00 00 00 00       	mov    eax,0x0
c001568a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001568d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015696:	ba 00 00 00 00       	mov    edx,0x0
c001569b:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001569e:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156a7:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156aa:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156b1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156b7:	89 c2                	mov    edx,eax
c00156b9:	b8 00 00 00 00       	mov    eax,0x0
c00156be:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156c1:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156ca:	ba 00 00 00 00       	mov    edx,0x0
c00156cf:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156d2:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156d5:	fa                   	cli    
c00156d6:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c00156db:	40                   	inc    eax
c00156dc:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c00156e1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e9:	89 c1                	mov    ecx,eax
c00156eb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00156ee:	89 cb                	mov    ebx,ecx
c00156f0:	89 d0                	mov    eax,edx
c00156f2:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00156f5:	89 c6                	mov    esi,eax
c00156f7:	89 f0                	mov    eax,esi
c00156f9:	09 d8                	or     eax,ebx
c00156fb:	85 c0                	test   eax,eax
c00156fd:	75 21                	jne    c0015720 <opcodeFault(regs*, void*)+0x4c8>
c00156ff:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015702:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015705:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015708:	89 01                	mov    DWORD PTR [ecx],eax
c001570a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001570d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015710:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015713:	83 c8 40             	or     eax,0x40
c0015716:	89 c2                	mov    edx,eax
c0015718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001571e:	eb 3e                	jmp    c001575e <opcodeFault(regs*, void*)+0x506>
c0015720:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015723:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015726:	8b 00                	mov    eax,DWORD PTR [eax]
c0015728:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001572b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001572e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015734:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015737:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001573a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001573d:	89 d0                	mov    eax,edx
c001573f:	31 d2                	xor    edx,edx
c0015741:	89 c3                	mov    ebx,eax
c0015743:	89 d6                	mov    esi,edx
c0015745:	89 da                	mov    edx,ebx
c0015747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001574d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015750:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015753:	83 e0 bf             	and    eax,0xffffffbf
c0015756:	89 c2                	mov    edx,eax
c0015758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001575e:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0015763:	48                   	dec    eax
c0015764:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0015769:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001576e:	85 c0                	test   eax,eax
c0015770:	75 01                	jne    c0015773 <opcodeFault(regs*, void*)+0x51b>
c0015772:	fb                   	sti    
c0015773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015776:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015779:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001577c:	01 c2                	add    edx,eax
c001577e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015781:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015784:	83 ec 0c             	sub    esp,0xc
c0015787:	68 7e ba 02 c0       	push   0xc002ba7e
c001578c:	e8 b2 d6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	e9 d5 00 00 00       	jmp    c001586e <opcodeFault(regs*, void*)+0x616>
c0015799:	83 ec 0c             	sub    esp,0xc
c001579c:	68 91 ba 02 c0       	push   0xc002ba91
c00157a1:	e8 9d d6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00157a6:	83 c4 10             	add    esp,0x10
c00157a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157b5:	c1 e0 04             	shl    eax,0x4
c00157b8:	01 d0                	add    eax,edx
c00157ba:	83 c0 03             	add    eax,0x3
c00157bd:	8a 00                	mov    al,BYTE PTR [eax]
c00157bf:	0f b6 d8             	movzx  ebx,al
c00157c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157ce:	c1 e0 04             	shl    eax,0x4
c00157d1:	01 d0                	add    eax,edx
c00157d3:	83 c0 02             	add    eax,0x2
c00157d6:	8a 00                	mov    al,BYTE PTR [eax]
c00157d8:	0f b6 c8             	movzx  ecx,al
c00157db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157de:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e7:	c1 e0 04             	shl    eax,0x4
c00157ea:	01 d0                	add    eax,edx
c00157ec:	40                   	inc    eax
c00157ed:	8a 00                	mov    al,BYTE PTR [eax]
c00157ef:	0f b6 d0             	movzx  edx,al
c00157f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00157f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157fe:	c1 e0 04             	shl    eax,0x4
c0015801:	01 f0                	add    eax,esi
c0015803:	8a 00                	mov    al,BYTE PTR [eax]
c0015805:	0f b6 c0             	movzx  eax,al
c0015808:	83 ec 0c             	sub    esp,0xc
c001580b:	53                   	push   ebx
c001580c:	51                   	push   ecx
c001580d:	52                   	push   edx
c001580e:	50                   	push   eax
c001580f:	68 a4 ba 02 c0       	push   0xc002baa4
c0015814:	e8 2a d6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0015819:	83 c4 20             	add    esp,0x20
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015822:	83 c0 03             	add    eax,0x3
c0015825:	8a 00                	mov    al,BYTE PTR [eax]
c0015827:	0f b6 d8             	movzx  ebx,al
c001582a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015830:	83 c0 02             	add    eax,0x2
c0015833:	8a 00                	mov    al,BYTE PTR [eax]
c0015835:	0f b6 c8             	movzx  ecx,al
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001583e:	40                   	inc    eax
c001583f:	8a 00                	mov    al,BYTE PTR [eax]
c0015841:	0f b6 d0             	movzx  edx,al
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001584a:	8a 00                	mov    al,BYTE PTR [eax]
c001584c:	0f b6 c0             	movzx  eax,al
c001584f:	83 ec 0c             	sub    esp,0xc
c0015852:	53                   	push   ebx
c0015853:	51                   	push   ecx
c0015854:	52                   	push   edx
c0015855:	50                   	push   eax
c0015856:	68 cc ba 02 c0       	push   0xc002bacc
c001585b:	e8 e3 d5 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0015860:	83 c4 20             	add    esp,0x20
c0015863:	83 ec 0c             	sub    esp,0xc
c0015866:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015869:	e8 54 f4 ff ff       	call   c0014cc2 <displayDebugInfo(regs*)>
c001586e:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015871:	5b                   	pop    ebx
c0015872:	5e                   	pop    esi
c0015873:	5d                   	pop    ebp
c0015874:	c3                   	ret    

c0015875 <displayProgramFault(char const*)>:
c0015875:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001587a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001587d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015883:	85 c0                	test   eax,eax
c0015885:	74 15                	je     c001589c <displayProgramFault(char const*)+0x27>
c0015887:	83 ec 0c             	sub    esp,0xc
c001588a:	6a 04                	push   0x4
c001588c:	6a 0f                	push   0xf
c001588e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015892:	50                   	push   eax
c0015893:	e8 9c b4 ff ff       	call   c0010d34 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015898:	83 c4 1c             	add    esp,0x1c
c001589b:	c3                   	ret    
c001589c:	c3                   	ret    

c001589d <setupInterruptController()>:
c001589d:	55                   	push   ebp
c001589e:	89 e5                	mov    ebp,esp
c00158a0:	53                   	push   ebx
c00158a1:	83 ec 24             	sub    esp,0x24
c00158a4:	b8 00 00 00 00       	mov    eax,0x0
c00158a9:	85 c0                	test   eax,eax
c00158ab:	0f 95 c0             	setne  al
c00158ae:	84 c0                	test   al,al
c00158b0:	74 5b                	je     c001590d <setupInterruptController()+0x70>
c00158b2:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158b9:	83 ec 0c             	sub    esp,0xc
c00158bc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158bf:	e8 e4 9f ff ff       	call   c000f8a8 <malloc>
c00158c4:	83 c4 10             	add    esp,0x10
c00158c7:	89 c3                	mov    ebx,eax
c00158c9:	83 ec 0c             	sub    esp,0xc
c00158cc:	53                   	push   ebx
c00158cd:	e8 8a 09 01 00       	call   c002625c <APIC::APIC()>
c00158d2:	83 c4 10             	add    esp,0x10
c00158d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158d8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158de:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e0:	83 c0 08             	add    eax,0x8
c00158e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e5:	6a 00                	push   0x0
c00158e7:	6a 00                	push   0x0
c00158e9:	6a 00                	push   0x0
c00158eb:	52                   	push   edx
c00158ec:	ff d0                	call   eax
c00158ee:	83 c4 10             	add    esp,0x10
c00158f1:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00158f6:	83 ec 08             	sub    esp,0x8
c00158f9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158fc:	50                   	push   eax
c00158fd:	e8 62 e9 ff ff       	call   c0014264 <Device::addChild(Device*)>
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015908:	e9 89 03 00 00       	jmp    c0015c96 <setupInterruptController()+0x3f9>
c001590d:	a0 00 19 03 c0       	mov    al,ds:0xc0031900
c0015912:	84 c0                	test   al,al
c0015914:	75 24                	jne    c001593a <setupInterruptController()+0x9d>
c0015916:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001591b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015921:	83 e2 fe             	and    edx,0xfffffffe
c0015924:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001592a:	83 ec 0c             	sub    esp,0xc
c001592d:	68 f1 ba 02 c0       	push   0xc002baf1
c0015932:	e8 0c d5 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0015937:	83 c4 10             	add    esp,0x10
c001593a:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001593f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015945:	83 e0 01             	and    eax,0x1
c0015948:	84 c0                	test   al,al
c001594a:	0f 95 c0             	setne  al
c001594d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015950:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015957:	83 ec 0c             	sub    esp,0xc
c001595a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001595d:	e8 46 9f ff ff       	call   c000f8a8 <malloc>
c0015962:	83 c4 10             	add    esp,0x10
c0015965:	89 c3                	mov    ebx,eax
c0015967:	83 ec 0c             	sub    esp,0xc
c001596a:	53                   	push   ebx
c001596b:	e8 44 0e 01 00       	call   c00267b4 <PIC::PIC()>
c0015970:	83 c4 10             	add    esp,0x10
c0015973:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015976:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015979:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001597c:	8b 00                	mov    eax,DWORD PTR [eax]
c001597e:	83 c0 08             	add    eax,0x8
c0015981:	8b 00                	mov    eax,DWORD PTR [eax]
c0015983:	6a 00                	push   0x0
c0015985:	6a 00                	push   0x0
c0015987:	6a 00                	push   0x0
c0015989:	52                   	push   edx
c001598a:	ff d0                	call   eax
c001598c:	83 c4 10             	add    esp,0x10
c001598f:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015993:	74 73                	je     c0015a08 <setupInterruptController()+0x16b>
c0015995:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015998:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001599b:	8b 00                	mov    eax,DWORD PTR [eax]
c001599d:	83 c0 0c             	add    eax,0xc
c00159a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a2:	6a 00                	push   0x0
c00159a4:	6a 00                	push   0x0
c00159a6:	6a 00                	push   0x0
c00159a8:	52                   	push   edx
c00159a9:	ff d0                	call   eax
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159b2:	74 15                	je     c00159c9 <setupInterruptController()+0x12c>
c00159b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b9:	83 c0 04             	add    eax,0x4
c00159bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159be:	83 ec 0c             	sub    esp,0xc
c00159c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159c4:	ff d0                	call   eax
c00159c6:	83 c4 10             	add    esp,0x10
c00159c9:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159d0:	83 ec 0c             	sub    esp,0xc
c00159d3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159d6:	e8 cd 9e ff ff       	call   c000f8a8 <malloc>
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	89 c3                	mov    ebx,eax
c00159e0:	83 ec 0c             	sub    esp,0xc
c00159e3:	53                   	push   ebx
c00159e4:	e8 73 08 01 00       	call   c002625c <APIC::APIC()>
c00159e9:	83 c4 10             	add    esp,0x10
c00159ec:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159ef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f7:	83 c0 08             	add    eax,0x8
c00159fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fc:	6a 00                	push   0x0
c00159fe:	6a 00                	push   0x0
c0015a00:	6a 00                	push   0x0
c0015a02:	52                   	push   edx
c0015a03:	ff d0                	call   eax
c0015a05:	83 c4 10             	add    esp,0x10
c0015a08:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0015a0d:	83 ec 08             	sub    esp,0x8
c0015a10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a13:	50                   	push   eax
c0015a14:	e8 4b e8 ff ff       	call   c0014264 <Device::addChild(Device*)>
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	c7 05 08 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f108,0x0
c0015a26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2b:	83 c0 24             	add    eax,0x24
c0015a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a30:	6a 00                	push   0x0
c0015a32:	68 39 52 01 c0       	push   0xc0015239
c0015a37:	6a 00                	push   0x0
c0015a39:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a3c:	ff d0                	call   eax
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a46:	83 c0 24             	add    eax,0x24
c0015a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4b:	6a 00                	push   0x0
c0015a4d:	68 39 52 01 c0       	push   0xc0015239
c0015a52:	6a 01                	push   0x1
c0015a54:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a57:	ff d0                	call   eax
c0015a59:	83 c4 10             	add    esp,0x10
c0015a5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a61:	83 c0 24             	add    eax,0x24
c0015a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a66:	6a 00                	push   0x0
c0015a68:	68 1f 4b 01 c0       	push   0xc0014b1f
c0015a6d:	6a 02                	push   0x2
c0015a6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a72:	ff d0                	call   eax
c0015a74:	83 c4 10             	add    esp,0x10
c0015a77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7c:	83 c0 24             	add    eax,0x24
c0015a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a81:	6a 00                	push   0x0
c0015a83:	68 39 52 01 c0       	push   0xc0015239
c0015a88:	6a 03                	push   0x3
c0015a8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8d:	ff d0                	call   eax
c0015a8f:	83 c4 10             	add    esp,0x10
c0015a92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a97:	83 c0 24             	add    eax,0x24
c0015a9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9c:	6a 00                	push   0x0
c0015a9e:	68 39 52 01 c0       	push   0xc0015239
c0015aa3:	6a 04                	push   0x4
c0015aa5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa8:	ff d0                	call   eax
c0015aaa:	83 c4 10             	add    esp,0x10
c0015aad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab2:	83 c0 24             	add    eax,0x24
c0015ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab7:	6a 00                	push   0x0
c0015ab9:	68 39 52 01 c0       	push   0xc0015239
c0015abe:	6a 05                	push   0x5
c0015ac0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac3:	ff d0                	call   eax
c0015ac5:	83 c4 10             	add    esp,0x10
c0015ac8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acd:	83 c0 24             	add    eax,0x24
c0015ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad2:	6a 00                	push   0x0
c0015ad4:	68 58 52 01 c0       	push   0xc0015258
c0015ad9:	6a 06                	push   0x6
c0015adb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ade:	ff d0                	call   eax
c0015ae0:	83 c4 10             	add    esp,0x10
c0015ae3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae8:	83 c0 24             	add    eax,0x24
c0015aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aed:	6a 00                	push   0x0
c0015aef:	68 51 51 01 c0       	push   0xc0015151
c0015af4:	6a 07                	push   0x7
c0015af6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af9:	ff d0                	call   eax
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b03:	83 c0 24             	add    eax,0x24
c0015b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b08:	6a 00                	push   0x0
c0015b0a:	68 3a 49 01 c0       	push   0xc001493a
c0015b0f:	6a 08                	push   0x8
c0015b11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b14:	ff d0                	call   eax
c0015b16:	83 c4 10             	add    esp,0x10
c0015b19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1e:	83 c0 24             	add    eax,0x24
c0015b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b23:	6a 00                	push   0x0
c0015b25:	68 39 52 01 c0       	push   0xc0015239
c0015b2a:	6a 09                	push   0x9
c0015b2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2f:	ff d0                	call   eax
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b39:	83 c0 24             	add    eax,0x24
c0015b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3e:	6a 00                	push   0x0
c0015b40:	68 39 52 01 c0       	push   0xc0015239
c0015b45:	6a 0a                	push   0xa
c0015b47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4a:	ff d0                	call   eax
c0015b4c:	83 c4 10             	add    esp,0x10
c0015b4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b54:	83 c0 24             	add    eax,0x24
c0015b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b59:	6a 00                	push   0x0
c0015b5b:	68 39 52 01 c0       	push   0xc0015239
c0015b60:	6a 0b                	push   0xb
c0015b62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b65:	ff d0                	call   eax
c0015b67:	83 c4 10             	add    esp,0x10
c0015b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6f:	83 c0 24             	add    eax,0x24
c0015b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b74:	6a 00                	push   0x0
c0015b76:	68 39 52 01 c0       	push   0xc0015239
c0015b7b:	6a 0c                	push   0xc
c0015b7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b80:	ff d0                	call   eax
c0015b82:	83 c4 10             	add    esp,0x10
c0015b85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8a:	83 c0 24             	add    eax,0x24
c0015b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8f:	6a 00                	push   0x0
c0015b91:	68 c4 51 01 c0       	push   0xc00151c4
c0015b96:	6a 0d                	push   0xd
c0015b98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9b:	ff d0                	call   eax
c0015b9d:	83 c4 10             	add    esp,0x10
c0015ba0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba5:	83 c0 24             	add    eax,0x24
c0015ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baa:	6a 00                	push   0x0
c0015bac:	68 fd 51 01 c0       	push   0xc00151fd
c0015bb1:	6a 0e                	push   0xe
c0015bb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb6:	ff d0                	call   eax
c0015bb8:	83 c4 10             	add    esp,0x10
c0015bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc0:	83 c0 24             	add    eax,0x24
c0015bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc5:	6a 00                	push   0x0
c0015bc7:	68 39 52 01 c0       	push   0xc0015239
c0015bcc:	6a 0f                	push   0xf
c0015bce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd1:	ff d0                	call   eax
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdb:	83 c0 24             	add    eax,0x24
c0015bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be0:	6a 00                	push   0x0
c0015be2:	68 39 52 01 c0       	push   0xc0015239
c0015be7:	6a 10                	push   0x10
c0015be9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bec:	ff d0                	call   eax
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf6:	83 c0 24             	add    eax,0x24
c0015bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfb:	6a 00                	push   0x0
c0015bfd:	68 39 52 01 c0       	push   0xc0015239
c0015c02:	6a 11                	push   0x11
c0015c04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c07:	ff d0                	call   eax
c0015c09:	83 c4 10             	add    esp,0x10
c0015c0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c11:	83 c0 24             	add    eax,0x24
c0015c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c16:	6a 00                	push   0x0
c0015c18:	68 39 52 01 c0       	push   0xc0015239
c0015c1d:	6a 12                	push   0x12
c0015c1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c22:	ff d0                	call   eax
c0015c24:	83 c4 10             	add    esp,0x10
c0015c27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2c:	83 c0 24             	add    eax,0x24
c0015c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c31:	6a 00                	push   0x0
c0015c33:	68 39 52 01 c0       	push   0xc0015239
c0015c38:	6a 13                	push   0x13
c0015c3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3d:	ff d0                	call   eax
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c47:	83 c0 24             	add    eax,0x24
c0015c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4c:	6a 00                	push   0x0
c0015c4e:	68 39 52 01 c0       	push   0xc0015239
c0015c53:	6a 14                	push   0x14
c0015c55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c58:	ff d0                	call   eax
c0015c5a:	83 c4 10             	add    esp,0x10
c0015c5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c62:	83 c0 24             	add    eax,0x24
c0015c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c67:	6a 00                	push   0x0
c0015c69:	68 39 52 01 c0       	push   0xc0015239
c0015c6e:	6a 1e                	push   0x1e
c0015c70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c73:	ff d0                	call   eax
c0015c75:	83 c4 10             	add    esp,0x10
c0015c78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7d:	83 c0 24             	add    eax,0x24
c0015c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c82:	6a 00                	push   0x0
c0015c84:	68 e0 cb 01 c0       	push   0xc001cbe0
c0015c89:	6a 60                	push   0x60
c0015c8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8e:	ff d0                	call   eax
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c96:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c99:	c9                   	leave  
c0015c9a:	c3                   	ret    
c0015c9b:	90                   	nop

c0015c9c <InterruptController::convertLegacyIRQNumber(int)>:
c0015c9c:	55                   	push   ebp
c0015c9d:	89 e5                	mov    ebp,esp
c0015c9f:	83 ec 08             	sub    esp,0x8
c0015ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca5:	83 ec 0c             	sub    esp,0xc
c0015ca8:	50                   	push   eax
c0015ca9:	e8 a2 e8 ff ff       	call   c0014550 <Device::getName()>
c0015cae:	83 c4 10             	add    esp,0x10
c0015cb1:	8a 00                	mov    al,BYTE PTR [eax]
c0015cb3:	3c 41                	cmp    al,0x41
c0015cb5:	0f 94 c0             	sete   al
c0015cb8:	84 c0                	test   al,al
c0015cba:	74 28                	je     c0015ce4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cbc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cc0:	7f 12                	jg     c0015cd4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cc5:	05 c0 e1 02 c0       	add    eax,0xc002e1c0
c0015cca:	8a 00                	mov    al,BYTE PTR [eax]
c0015ccc:	0f b6 c0             	movzx  eax,al
c0015ccf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cd2:	eb 10                	jmp    c0015ce4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	68 e0 b7 02 c0       	push   0xc002b7e0
c0015cdc:	e8 2c 4b 00 00       	call   c001a80d <Krnl::panic(char const*)>
c0015ce1:	83 c4 10             	add    esp,0x10
c0015ce4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ce7:	c9                   	leave  
c0015ce8:	c3                   	ret    
c0015ce9:	90                   	nop

c0015cea <startGUI(void*)>:
c0015cea:	55                   	push   ebp
c0015ceb:	89 e5                	mov    ebp,esp
c0015ced:	53                   	push   ebx
c0015cee:	83 ec 04             	sub    esp,0x4
c0015cf1:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0015cf6:	48                   	dec    eax
c0015cf7:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0015cfc:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0015d01:	85 c0                	test   eax,eax
c0015d03:	75 01                	jne    c0015d06 <startGUI(void*)+0x1c>
c0015d05:	fb                   	sti    
c0015d06:	8b 1d 68 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef68
c0015d0c:	83 ec 08             	sub    esp,0x8
c0015d0f:	6a 01                	push   0x1
c0015d11:	68 54 bb 02 c0       	push   0xc002bb54
c0015d16:	e8 a2 7e 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c0015d1b:	83 c4 10             	add    esp,0x10
c0015d1e:	83 ec 08             	sub    esp,0x8
c0015d21:	53                   	push   ebx
c0015d22:	50                   	push   eax
c0015d23:	e8 c0 80 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c0015d28:	83 c4 10             	add    esp,0x10
c0015d2b:	8b 1d 68 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef68
c0015d31:	83 ec 08             	sub    esp,0x8
c0015d34:	6a 01                	push   0x1
c0015d36:	68 6e bb 02 c0       	push   0xc002bb6e
c0015d3b:	e8 7d 7e 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	83 ec 08             	sub    esp,0x8
c0015d46:	53                   	push   ebx
c0015d47:	50                   	push   eax
c0015d48:	e8 9b 80 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c0015d4d:	83 c4 10             	add    esp,0x10
c0015d50:	90                   	nop
c0015d51:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d54:	c9                   	leave  
c0015d55:	c3                   	ret    

c0015d56 <startGUIVESA(void*)>:
c0015d56:	55                   	push   ebp
c0015d57:	89 e5                	mov    ebp,esp
c0015d59:	53                   	push   ebx
c0015d5a:	83 ec 04             	sub    esp,0x4
c0015d5d:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0015d62:	48                   	dec    eax
c0015d63:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0015d68:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0015d6d:	85 c0                	test   eax,eax
c0015d6f:	75 01                	jne    c0015d72 <startGUIVESA(void*)+0x1c>
c0015d71:	fb                   	sti    
c0015d72:	8b 1d 68 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef68
c0015d78:	83 ec 08             	sub    esp,0x8
c0015d7b:	6a 01                	push   0x1
c0015d7d:	68 88 bb 02 c0       	push   0xc002bb88
c0015d82:	e8 36 7e 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	83 ec 08             	sub    esp,0x8
c0015d8d:	53                   	push   ebx
c0015d8e:	50                   	push   eax
c0015d8f:	e8 54 80 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	8b 1d 68 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef68
c0015d9d:	83 ec 08             	sub    esp,0x8
c0015da0:	6a 01                	push   0x1
c0015da2:	68 6e bb 02 c0       	push   0xc002bb6e
c0015da7:	e8 11 7e 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	83 ec 08             	sub    esp,0x8
c0015db2:	53                   	push   ebx
c0015db3:	50                   	push   eax
c0015db4:	e8 2f 80 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	90                   	nop
c0015dbd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dc0:	c9                   	leave  
c0015dc1:	c3                   	ret    

c0015dc2 <sendKeyToTerminal(unsigned char)>:
c0015dc2:	55                   	push   ebp
c0015dc3:	89 e5                	mov    ebp,esp
c0015dc5:	83 ec 28             	sub    esp,0x28
c0015dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dcb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dce:	a1 44 f0 02 c0       	mov    eax,ds:0xc002f044
c0015dd3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015dd7:	83 ec 08             	sub    esp,0x8
c0015dda:	52                   	push   edx
c0015ddb:	50                   	push   eax
c0015ddc:	e8 2b b4 ff ff       	call   c001120c <VgaText::receiveKey(unsigned char)>
c0015de1:	83 c4 10             	add    esp,0x10
c0015de4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015de8:	0f 85 8f 00 00 00    	jne    c0015e7d <sendKeyToTerminal(unsigned char)+0xbb>
c0015dee:	fa                   	cli    
c0015def:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0015df4:	40                   	inc    eax
c0015df5:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0015dfa:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c0015dff:	40                   	inc    eax
c0015e00:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c0015e05:	a1 20 f1 02 c0       	mov    eax,ds:0xc002f120
c0015e0a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e0d:	c7 05 20 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f120,0x0
c0015e17:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e1b:	74 1f                	je     c0015e3c <sendKeyToTerminal(unsigned char)+0x7a>
c0015e1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e20:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e29:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e32:	e8 29 8c 00 00       	call   c001ea60 <unblockTask(ThreadControlBlock*)>
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	eb db                	jmp    c0015e17 <sendKeyToTerminal(unsigned char)+0x55>
c0015e3c:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c0015e41:	48                   	dec    eax
c0015e42:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c0015e47:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c0015e4c:	85 c0                	test   eax,eax
c0015e4e:	75 18                	jne    c0015e68 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e50:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0015e55:	85 c0                	test   eax,eax
c0015e57:	74 0f                	je     c0015e68 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e59:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c0015e63:	e8 34 87 00 00       	call   c001e59c <schedule()>
c0015e68:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0015e6d:	48                   	dec    eax
c0015e6e:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0015e73:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0015e78:	85 c0                	test   eax,eax
c0015e7a:	75 01                	jne    c0015e7d <sendKeyToTerminal(unsigned char)+0xbb>
c0015e7c:	fb                   	sti    
c0015e7d:	90                   	nop
c0015e7e:	c9                   	leave  
c0015e7f:	c3                   	ret    

c0015e80 <sendKeyboardToken(KeyboardToken)>:
c0015e80:	55                   	push   ebp
c0015e81:	89 e5                	mov    ebp,esp
c0015e83:	83 ec 18             	sub    esp,0x18
c0015e86:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8c:	0f b7 c0             	movzx  eax,ax
c0015e8f:	83 f2 01             	xor    edx,0x1
c0015e92:	88 90 40 f1 02 c0    	mov    BYTE PTR [eax-0x3ffd0ec0],dl
c0015e98:	a1 28 f1 02 c0       	mov    eax,ds:0xc002f128
c0015e9d:	85 c0                	test   eax,eax
c0015e9f:	74 24                	je     c0015ec5 <sendKeyboardToken(KeyboardToken)+0x45>
c0015ea1:	8b 0d 28 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f128
c0015ea7:	83 ec 04             	sub    esp,0x4
c0015eaa:	68 40 f1 02 c0       	push   0xc002f140
c0015eaf:	83 ec 08             	sub    esp,0x8
c0015eb2:	89 e2                	mov    edx,esp
c0015eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb7:	89 02                	mov    DWORD PTR [edx],eax
c0015eb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ebc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ec0:	ff d1                	call   ecx
c0015ec2:	83 c4 10             	add    esp,0x10
c0015ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec8:	66 3d 03 02          	cmp    ax,0x203
c0015ecc:	75 07                	jne    c0015ed5 <sendKeyboardToken(KeyboardToken)+0x55>
c0015ece:	a0 40 f2 02 c0       	mov    al,ds:0xc002f240
c0015ed3:	84 c0                	test   al,al
c0015ed5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ed9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015edc:	a0 48 f5 02 c0       	mov    al,ds:0xc002f548
c0015ee1:	38 c2                	cmp    dl,al
c0015ee3:	74 1c                	je     c0015f01 <sendKeyboardToken(KeyboardToken)+0x81>
c0015ee5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ee8:	a2 48 f5 02 c0       	mov    ds:0xc002f548,al
c0015eed:	a0 48 f5 02 c0       	mov    al,ds:0xc002f548
c0015ef2:	0f b6 c0             	movzx  eax,al
c0015ef5:	83 ec 0c             	sub    esp,0xc
c0015ef8:	50                   	push   eax
c0015ef9:	e8 96 a6 ff ff       	call   c0010594 <setTerminalScrollLock(bool)>
c0015efe:	83 c4 10             	add    esp,0x10
c0015f01:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f04:	84 c0                	test   al,al
c0015f06:	0f 84 ae 00 00 00    	je     c0015fba <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0f:	66 3d 10 03          	cmp    ax,0x310
c0015f13:	75 06                	jne    c0015f1b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f15:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1e:	66 3d 11 03          	cmp    ax,0x311
c0015f22:	75 06                	jne    c0015f2a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f24:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2d:	66 3d 12 03          	cmp    ax,0x312
c0015f31:	75 06                	jne    c0015f39 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f33:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3c:	66 3d 13 03          	cmp    ax,0x313
c0015f40:	75 06                	jne    c0015f48 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f42:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4b:	66 3d 14 03          	cmp    ax,0x314
c0015f4f:	75 06                	jne    c0015f57 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f51:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5a:	66 3d 15 03          	cmp    ax,0x315
c0015f5e:	75 06                	jne    c0015f66 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f60:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f69:	66 3d 16 03          	cmp    ax,0x316
c0015f6d:	75 06                	jne    c0015f75 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f6f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f78:	66 3d 17 03          	cmp    ax,0x317
c0015f7c:	75 06                	jne    c0015f84 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f7e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f87:	66 3d 18 03          	cmp    ax,0x318
c0015f8b:	75 06                	jne    c0015f93 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f8d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f96:	66 3d 19 03          	cmp    ax,0x319
c0015f9a:	75 06                	jne    c0015fa2 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f9c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa5:	66 3d 1a 03          	cmp    ax,0x31a
c0015fa9:	0f 85 c9 00 00 00    	jne    c0016078 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015faf:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fb5:	e9 be 00 00 00       	jmp    c0016078 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbd:	66 3d 10 03          	cmp    ax,0x310
c0015fc1:	75 0a                	jne    c0015fcd <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fc3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fc9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd0:	66 3d 11 03          	cmp    ax,0x311
c0015fd4:	75 0a                	jne    c0015fe0 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fd6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fdc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe3:	66 3d 12 03          	cmp    ax,0x312
c0015fe7:	75 0a                	jne    c0015ff3 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fe9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff6:	66 3d 13 03          	cmp    ax,0x313
c0015ffa:	75 0a                	jne    c0016006 <sendKeyboardToken(KeyboardToken)+0x186>
c0015ffc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016002:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016009:	66 3d 14 03          	cmp    ax,0x314
c001600d:	75 0a                	jne    c0016019 <sendKeyboardToken(KeyboardToken)+0x199>
c001600f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016015:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601c:	66 3d 15 03          	cmp    ax,0x315
c0016020:	75 0a                	jne    c001602c <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016022:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016028:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602f:	66 3d 16 03          	cmp    ax,0x316
c0016033:	75 0a                	jne    c001603f <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016035:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001603b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016042:	66 3d 17 03          	cmp    ax,0x317
c0016046:	75 0a                	jne    c0016052 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016048:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001604e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016055:	66 3d 18 03          	cmp    ax,0x318
c0016059:	75 0a                	jne    c0016065 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001605b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016061:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016068:	66 3d 19 03          	cmp    ax,0x319
c001606c:	75 0a                	jne    c0016078 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001606e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016074:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607b:	66 3d 00 02          	cmp    ax,0x200
c001607f:	75 2c                	jne    c00160ad <sendKeyboardToken(KeyboardToken)+0x22d>
c0016081:	a0 40 f5 02 c0       	mov    al,ds:0xc002f540
c0016086:	83 f0 01             	xor    eax,0x1
c0016089:	84 c0                	test   al,al
c001608b:	74 20                	je     c00160ad <sendKeyboardToken(KeyboardToken)+0x22d>
c001608d:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0016092:	6a 01                	push   0x1
c0016094:	6a 00                	push   0x0
c0016096:	68 ea 5c 01 c0       	push   0xc0015cea
c001609b:	50                   	push   eax
c001609c:	e8 b7 82 00 00       	call   c001e358 <Process::createThread(void (*)(void*), void*, int)>
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	c6 05 40 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f540,0x1
c00160ab:	eb 33                	jmp    c00160e0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b0:	66 3d 01 02          	cmp    ax,0x201
c00160b4:	75 2a                	jne    c00160e0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160b6:	a0 40 f5 02 c0       	mov    al,ds:0xc002f540
c00160bb:	83 f0 01             	xor    eax,0x1
c00160be:	84 c0                	test   al,al
c00160c0:	74 1e                	je     c00160e0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160c2:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c00160c7:	6a 01                	push   0x1
c00160c9:	6a 00                	push   0x0
c00160cb:	68 56 5d 01 c0       	push   0xc0015d56
c00160d0:	50                   	push   eax
c00160d1:	e8 82 82 00 00       	call   c001e358 <Process::createThread(void (*)(void*), void*, int)>
c00160d6:	83 c4 10             	add    esp,0x10
c00160d9:	c6 05 40 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f540,0x1
c00160e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e3:	66 3d 1d 03          	cmp    ax,0x31d
c00160e7:	75 06                	jne    c00160ef <sendKeyboardToken(KeyboardToken)+0x26f>
c00160e9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f2:	66 3d 1c 03          	cmp    ax,0x31c
c00160f6:	75 06                	jne    c00160fe <sendKeyboardToken(KeyboardToken)+0x27e>
c00160f8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016101:	66 3d 1b 03          	cmp    ax,0x31b
c0016105:	75 06                	jne    c001610d <sendKeyboardToken(KeyboardToken)+0x28d>
c0016107:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001610d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016110:	66 3d 1e 03          	cmp    ax,0x31e
c0016114:	75 06                	jne    c001611c <sendKeyboardToken(KeyboardToken)+0x29c>
c0016116:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001611c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611f:	66 3d 1f 03          	cmp    ax,0x31f
c0016123:	75 06                	jne    c001612b <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016125:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001612b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612e:	66 3d 1a 03          	cmp    ax,0x31a
c0016132:	75 06                	jne    c001613a <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016134:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001613a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001613e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016141:	83 f0 01             	xor    eax,0x1
c0016144:	84 c0                	test   al,al
c0016146:	74 77                	je     c00161bf <sendKeyboardToken(KeyboardToken)+0x33f>
c0016148:	a0 41 f2 02 c0       	mov    al,ds:0xc002f241
c001614d:	84 c0                	test   al,al
c001614f:	74 41                	je     c0016192 <sendKeyboardToken(KeyboardToken)+0x312>
c0016151:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016155:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016159:	74 2b                	je     c0016186 <sendKeyboardToken(KeyboardToken)+0x306>
c001615b:	8b 15 44 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f544
c0016161:	89 d0                	mov    eax,edx
c0016163:	c1 e0 02             	shl    eax,0x2
c0016166:	01 d0                	add    eax,edx
c0016168:	01 c0                	add    eax,eax
c001616a:	a3 44 f5 02 c0       	mov    ds:0xc002f544,eax
c001616f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016172:	0f b7 c0             	movzx  eax,ax
c0016175:	8d 50 d0             	lea    edx,[eax-0x30]
c0016178:	a1 44 f5 02 c0       	mov    eax,ds:0xc002f544
c001617d:	01 d0                	add    eax,edx
c001617f:	a3 44 f5 02 c0       	mov    ds:0xc002f544,eax
c0016184:	eb 6d                	jmp    c00161f3 <sendKeyboardToken(KeyboardToken)+0x373>
c0016186:	c7 05 44 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f544,0x0
c0016190:	eb 61                	jmp    c00161f3 <sendKeyboardToken(KeyboardToken)+0x373>
c0016192:	a1 44 f5 02 c0       	mov    eax,ds:0xc002f544
c0016197:	85 c0                	test   eax,eax
c0016199:	74 18                	je     c00161b3 <sendKeyboardToken(KeyboardToken)+0x333>
c001619b:	a1 44 f5 02 c0       	mov    eax,ds:0xc002f544
c00161a0:	0f b6 c0             	movzx  eax,al
c00161a3:	83 ec 0c             	sub    esp,0xc
c00161a6:	50                   	push   eax
c00161a7:	e8 16 fc ff ff       	call   c0015dc2 <sendKeyToTerminal(unsigned char)>
c00161ac:	83 c4 10             	add    esp,0x10
c00161af:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161b3:	c7 05 44 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f544,0x0
c00161bd:	eb 34                	jmp    c00161f3 <sendKeyboardToken(KeyboardToken)+0x373>
c00161bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c2:	66 3d 01 01          	cmp    ax,0x101
c00161c6:	75 2b                	jne    c00161f3 <sendKeyboardToken(KeyboardToken)+0x373>
c00161c8:	a1 44 f5 02 c0       	mov    eax,ds:0xc002f544
c00161cd:	85 c0                	test   eax,eax
c00161cf:	74 18                	je     c00161e9 <sendKeyboardToken(KeyboardToken)+0x369>
c00161d1:	a1 44 f5 02 c0       	mov    eax,ds:0xc002f544
c00161d6:	0f b6 c0             	movzx  eax,al
c00161d9:	83 ec 0c             	sub    esp,0xc
c00161dc:	50                   	push   eax
c00161dd:	e8 e0 fb ff ff       	call   c0015dc2 <sendKeyToTerminal(unsigned char)>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161e9:	c7 05 44 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f544,0x0
c00161f3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161f6:	83 f0 01             	xor    eax,0x1
c00161f9:	84 c0                	test   al,al
c00161fb:	74 4c                	je     c0016249 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016200:	83 f0 01             	xor    eax,0x1
c0016203:	84 c0                	test   al,al
c0016205:	74 42                	je     c0016249 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016207:	a0 40 f2 02 c0       	mov    al,ds:0xc002f240
c001620c:	83 f0 01             	xor    eax,0x1
c001620f:	84 c0                	test   al,al
c0016211:	74 36                	je     c0016249 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016216:	66 83 f8 1f          	cmp    ax,0x1f
c001621a:	76 09                	jbe    c0016225 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001621c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621f:	66 83 f8 7e          	cmp    ax,0x7e
c0016223:	76 12                	jbe    c0016237 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016228:	66 83 f8 0a          	cmp    ax,0xa
c001622c:	74 09                	je     c0016237 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001622e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016231:	66 83 f8 08          	cmp    ax,0x8
c0016235:	75 12                	jne    c0016249 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623a:	0f b6 c0             	movzx  eax,al
c001623d:	83 ec 0c             	sub    esp,0xc
c0016240:	50                   	push   eax
c0016241:	e8 7c fb ff ff       	call   c0015dc2 <sendKeyToTerminal(unsigned char)>
c0016246:	83 c4 10             	add    esp,0x10
c0016249:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001624c:	83 f0 01             	xor    eax,0x1
c001624f:	84 c0                	test   al,al
c0016251:	74 4f                	je     c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016253:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016256:	83 f0 01             	xor    eax,0x1
c0016259:	84 c0                	test   al,al
c001625b:	74 45                	je     c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c001625d:	a0 40 f2 02 c0       	mov    al,ds:0xc002f240
c0016262:	84 c0                	test   al,al
c0016264:	74 3c                	je     c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016269:	66 83 f8 3f          	cmp    ax,0x3f
c001626d:	76 33                	jbe    c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c001626f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016272:	66 83 f8 7f          	cmp    ax,0x7f
c0016276:	77 2a                	ja     c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627b:	88 c2                	mov    dl,al
c001627d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016280:	66 83 f8 5f          	cmp    ax,0x5f
c0016284:	76 04                	jbe    c001628a <sendKeyboardToken(KeyboardToken)+0x40a>
c0016286:	b0 20                	mov    al,0x20
c0016288:	eb 02                	jmp    c001628c <sendKeyboardToken(KeyboardToken)+0x40c>
c001628a:	b0 00                	mov    al,0x0
c001628c:	29 c2                	sub    edx,eax
c001628e:	88 d0                	mov    al,dl
c0016290:	83 e8 40             	sub    eax,0x40
c0016293:	0f b6 c0             	movzx  eax,al
c0016296:	83 ec 0c             	sub    esp,0xc
c0016299:	50                   	push   eax
c001629a:	e8 23 fb ff ff       	call   c0015dc2 <sendKeyToTerminal(unsigned char)>
c001629f:	83 c4 10             	add    esp,0x10
c00162a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a5:	66 3d 00 03          	cmp    ax,0x300
c00162a9:	75 0f                	jne    c00162ba <sendKeyboardToken(KeyboardToken)+0x43a>
c00162ab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ae:	83 f0 01             	xor    eax,0x1
c00162b1:	84 c0                	test   al,al
c00162b3:	74 05                	je     c00162ba <sendKeyboardToken(KeyboardToken)+0x43a>
c00162b5:	e8 52 aa ff ff       	call   c0010d0c <doTerminalCycle()>
c00162ba:	90                   	nop
c00162bb:	c9                   	leave  
c00162bc:	c3                   	ret    

c00162bd <clearInternalKeybuffer(VgaText*)>:
c00162bd:	55                   	push   ebp
c00162be:	89 e5                	mov    ebp,esp
c00162c0:	83 ec 08             	sub    esp,0x8
c00162c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c6:	05 98 01 00 00       	add    eax,0x198
c00162cb:	83 ec 0c             	sub    esp,0xc
c00162ce:	50                   	push   eax
c00162cf:	e8 b4 a4 fe ff       	call   c0000788 <strlen>
c00162d4:	83 c4 10             	add    esp,0x10
c00162d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162da:	81 c2 98 01 00 00    	add    edx,0x198
c00162e0:	83 ec 04             	sub    esp,0x4
c00162e3:	50                   	push   eax
c00162e4:	6a 00                	push   0x0
c00162e6:	52                   	push   edx
c00162e7:	e8 80 a4 fe ff       	call   c000076c <memset>
c00162ec:	83 c4 10             	add    esp,0x10
c00162ef:	90                   	nop
c00162f0:	c9                   	leave  
c00162f1:	c3                   	ret    

c00162f2 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162f2:	55                   	push   ebp
c00162f3:	89 e5                	mov    ebp,esp
c00162f5:	83 ec 18             	sub    esp,0x18
c00162f8:	a1 28 f1 02 c0       	mov    eax,ds:0xc002f128
c00162fd:	85 c0                	test   eax,eax
c00162ff:	74 2a                	je     c001632b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016301:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016307:	8b 0d 28 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f128
c001630d:	83 ec 04             	sub    esp,0x4
c0016310:	68 40 f1 02 c0       	push   0xc002f140
c0016315:	83 ec 08             	sub    esp,0x8
c0016318:	89 e2                	mov    edx,esp
c001631a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001631d:	89 02                	mov    DWORD PTR [edx],eax
c001631f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016322:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016326:	ff d1                	call   ecx
c0016328:	83 c4 10             	add    esp,0x10
c001632b:	83 ec 0c             	sub    esp,0xc
c001632e:	68 a3 bb 02 c0       	push   0xc002bba3
c0016333:	e8 0b cb ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0016338:	83 c4 10             	add    esp,0x10
c001633b:	fb                   	sti    
c001633c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016343:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016347:	0f 84 a1 00 00 00    	je     c00163ee <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c001634d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016350:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016356:	84 c0                	test   al,al
c0016358:	75 28                	jne    c0016382 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001635a:	fa                   	cli    
c001635b:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0016360:	40                   	inc    eax
c0016361:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0016366:	e8 31 82 00 00       	call   c001e59c <schedule()>
c001636b:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0016370:	48                   	dec    eax
c0016371:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0016376:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001637b:	85 c0                	test   eax,eax
c001637d:	75 ce                	jne    c001634d <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001637f:	fb                   	sti    
c0016380:	eb cb                	jmp    c001634d <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016382:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016385:	8d 50 01             	lea    edx,[eax+0x1]
c0016388:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001638b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001638e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016394:	88 10                	mov    BYTE PTR [eax],dl
c0016396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016399:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001639f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163a5:	05 98 01 00 00       	add    eax,0x198
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	50                   	push   eax
c00163ae:	e8 d5 a3 fe ff       	call   c0000788 <strlen>
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163b9:	81 c2 98 01 00 00    	add    edx,0x198
c00163bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163c2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163c5:	81 c2 98 01 00 00    	add    edx,0x198
c00163cb:	83 ec 04             	sub    esp,0x4
c00163ce:	50                   	push   eax
c00163cf:	51                   	push   ecx
c00163d0:	52                   	push   edx
c00163d1:	e8 ce a2 fe ff       	call   c00006a4 <memmove>
c00163d6:	83 c4 10             	add    esp,0x10
c00163d9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163dc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163df:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163e3:	0f 85 5a ff ff ff    	jne    c0016343 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00163e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163ec:	eb 03                	jmp    c00163f1 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00163ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163f1:	c9                   	leave  
c00163f2:	c3                   	ret    
c00163f3:	90                   	nop

c00163f4 <Keyboard::Keyboard(char const*)>:
c00163f4:	83 ec 0c             	sub    esp,0xc
c00163f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fb:	83 ec 08             	sub    esp,0x8
c00163fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016402:	50                   	push   eax
c0016403:	e8 4c e0 ff ff       	call   c0014454 <Device::Device(char const*)>
c0016408:	83 c4 10             	add    esp,0x10
c001640b:	ba c4 bb 02 c0       	mov    edx,0xc002bbc4
c0016410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016414:	89 10                	mov    DWORD PTR [eax],edx
c0016416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016424:	c6 05 24 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f124,0x1
c001642b:	90                   	nop
c001642c:	83 c4 0c             	add    esp,0xc
c001642f:	c3                   	ret    

c0016430 <Keyboard::~Keyboard()>:
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	ba c4 bb 02 c0       	mov    edx,0xc002bbc4
c0016438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643c:	89 10                	mov    DWORD PTR [eax],edx
c001643e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016442:	83 ec 0c             	sub    esp,0xc
c0016445:	50                   	push   eax
c0016446:	e8 ff dc ff ff       	call   c001414a <Device::~Device()>
c001644b:	83 c4 10             	add    esp,0x10
c001644e:	90                   	nop
c001644f:	83 c4 0c             	add    esp,0xc
c0016452:	c3                   	ret    
c0016453:	90                   	nop

c0016454 <Keyboard::~Keyboard()>:
c0016454:	83 ec 0c             	sub    esp,0xc
c0016457:	83 ec 0c             	sub    esp,0xc
c001645a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001645e:	e8 cd ff ff ff       	call   c0016430 <Keyboard::~Keyboard()>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	83 ec 08             	sub    esp,0x8
c0016469:	68 5c 01 00 00       	push   0x15c
c001646e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016472:	e8 ec c8 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0016477:	83 c4 10             	add    esp,0x10
c001647a:	83 c4 0c             	add    esp,0xc
c001647d:	c3                   	ret    

c001647e <LogicalDisk::close(int, int, void*)>:
c001647e:	83 c8 ff             	or     eax,0xffffffff
c0016481:	c3                   	ret    

c0016482 <LogicalDisk::~LogicalDisk()>:
c0016482:	83 ec 0c             	sub    esp,0xc
c0016485:	ba 74 bc 02 c0       	mov    edx,0xc002bc74
c001648a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648e:	89 10                	mov    DWORD PTR [eax],edx
c0016490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016494:	83 ec 0c             	sub    esp,0xc
c0016497:	50                   	push   eax
c0016498:	e8 ad dc ff ff       	call   c001414a <Device::~Device()>
c001649d:	83 c4 10             	add    esp,0x10
c00164a0:	90                   	nop
c00164a1:	83 c4 0c             	add    esp,0xc
c00164a4:	c3                   	ret    
c00164a5:	90                   	nop

c00164a6 <LogicalDisk::~LogicalDisk()>:
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	83 ec 0c             	sub    esp,0xc
c00164ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b0:	e8 cd ff ff ff       	call   c0016482 <LogicalDisk::~LogicalDisk()>
c00164b5:	83 c4 10             	add    esp,0x10
c00164b8:	83 ec 08             	sub    esp,0x8
c00164bb:	68 74 01 00 00       	push   0x174
c00164c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c4:	e8 9a c8 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c00164c9:	83 c4 10             	add    esp,0x10
c00164cc:	83 c4 0c             	add    esp,0xc
c00164cf:	c3                   	ret    

c00164d0 <LogicalDisk::open(int, int, void*)>:
c00164d0:	83 ec 18             	sub    esp,0x18
c00164d3:	68 f0 bb 02 c0       	push   0xc002bbf0
c00164d8:	e8 30 43 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00164dd:	83 c8 ff             	or     eax,0xffffffff
c00164e0:	83 c4 1c             	add    esp,0x1c
c00164e3:	c3                   	ret    

c00164e4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164e4:	53                   	push   ebx
c00164e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164f1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164f7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164fd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016503:	77 10                	ja     c0016515 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016505:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001650b:	89 d3                	mov    ebx,edx
c001650d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016513:	72 05                	jb     c001651a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016515:	83 c8 ff             	or     eax,0xffffffff
c0016518:	89 c2                	mov    edx,eax
c001651a:	5b                   	pop    ebx
c001651b:	c3                   	ret    

c001651c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001651c:	56                   	push   esi
c001651d:	83 c8 ff             	or     eax,0xffffffff
c0016520:	53                   	push   ebx
c0016521:	89 c2                	mov    edx,eax
c0016523:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016527:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001652b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001652f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016535:	77 27                	ja     c001655e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016537:	89 d8                	mov    eax,ebx
c0016539:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001653f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016545:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001654a:	89 c2                	mov    edx,eax
c001654c:	73 10                	jae    c001655e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001654e:	89 c8                	mov    eax,ecx
c0016550:	89 da                	mov    edx,ebx
c0016552:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016558:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001655e:	5b                   	pop    ebx
c001655f:	5e                   	pop    esi
c0016560:	c3                   	ret    
c0016561:	90                   	nop

c0016562 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016562:	83 ec 1c             	sub    esp,0x1c
c0016565:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001656d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016571:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016575:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016579:	89 04 24             	mov    DWORD PTR [esp],eax
c001657c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016588:	83 ec 08             	sub    esp,0x8
c001658b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001658f:	50                   	push   eax
c0016590:	e8 bf de ff ff       	call   c0014454 <Device::Device(char const*)>
c0016595:	83 c4 10             	add    esp,0x10
c0016598:	ba 74 bc 02 c0       	mov    edx,0xc002bc74
c001659d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a1:	89 10                	mov    DWORD PTR [eax],edx
c00165a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165c7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165d3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165d9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165ea:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165f0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165fe:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016608:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016612:	90                   	nop
c0016613:	83 c4 1c             	add    esp,0x1c
c0016616:	c3                   	ret    
c0016617:	90                   	nop

c0016618 <LogicalDisk::assignDriveLetter()>:
c0016618:	55                   	push   ebp
c0016619:	57                   	push   edi
c001661a:	56                   	push   esi
c001661b:	53                   	push   ebx
c001661c:	83 ec 14             	sub    esp,0x14
c001661f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016623:	8b 3d 60 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f560
c0016629:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001662f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016633:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016639:	8b 3d 64 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f564
c001663f:	3c 01                	cmp    al,0x1
c0016641:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016645:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016649:	19 c0                	sbb    eax,eax
c001664b:	83 e0 02             	and    eax,0x2
c001664e:	83 c0 41             	add    eax,0x41
c0016651:	0f be e8             	movsx  ebp,al
c0016654:	3c 43                	cmp    al,0x43
c0016656:	75 10                	jne    c0016668 <LogicalDisk::assignDriveLetter()+0x50>
c0016658:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001665f:	75 5d                	jne    c00166be <LogicalDisk::assignDriveLetter()+0xa6>
c0016661:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016666:	75 56                	jne    c00166be <LogicalDisk::assignDriveLetter()+0xa6>
c0016668:	8d 75 bf             	lea    esi,[ebp-0x41]
c001666b:	ba 01 00 00 00       	mov    edx,0x1
c0016670:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016674:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016678:	d3 e2                	shl    edx,cl
c001667a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001667e:	89 d7                	mov    edi,edx
c0016680:	89 d6                	mov    esi,edx
c0016682:	c1 ff 1f             	sar    edi,0x1f
c0016685:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016689:	21 f9                	and    ecx,edi
c001668b:	09 d1                	or     ecx,edx
c001668d:	75 2f                	jne    c00166be <LogicalDisk::assignDriveLetter()+0xa6>
c001668f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016693:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016697:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001669d:	09 f2                	or     edx,esi
c001669f:	89 15 60 f5 02 c0    	mov    DWORD PTR ds:0xc002f560,edx
c00166a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166a9:	09 fa                	or     edx,edi
c00166ab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166af:	89 15 64 f5 02 c0    	mov    DWORD PTR ds:0xc002f564,edx
c00166b5:	89 1c bd 80 f5 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0a80],ebx
c00166bc:	eb 08                	jmp    c00166c6 <LogicalDisk::assignDriveLetter()+0xae>
c00166be:	45                   	inc    ebp
c00166bf:	40                   	inc    eax
c00166c0:	3c 5b                	cmp    al,0x5b
c00166c2:	75 90                	jne    c0016654 <LogicalDisk::assignDriveLetter()+0x3c>
c00166c4:	31 c0                	xor    eax,eax
c00166c6:	83 c4 14             	add    esp,0x14
c00166c9:	5b                   	pop    ebx
c00166ca:	5e                   	pop    esi
c00166cb:	5f                   	pop    edi
c00166cc:	5d                   	pop    ebp
c00166cd:	c3                   	ret    

c00166ce <LogicalDisk::mount()>:
c00166ce:	56                   	push   esi
c00166cf:	53                   	push   ebx
c00166d0:	50                   	push   eax
c00166d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166d5:	8b 1d f4 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f4
c00166db:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166e5:	85 db                	test   ebx,ebx
c00166e7:	74 50                	je     c0016739 <LogicalDisk::mount()+0x6b>
c00166e9:	50                   	push   eax
c00166ea:	50                   	push   eax
c00166eb:	ff 35 a8 24 03 c0    	push   DWORD PTR ds:0xc00324a8
c00166f1:	68 14 bc 02 c0       	push   0xc002bc14
c00166f6:	e8 48 c7 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00166fb:	83 c4 0c             	add    esp,0xc
c00166fe:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016705:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016707:	83 e8 41             	sub    eax,0x41
c001670a:	50                   	push   eax
c001670b:	56                   	push   esi
c001670c:	53                   	push   ebx
c001670d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016710:	83 c4 10             	add    esp,0x10
c0016713:	84 c0                	test   al,al
c0016715:	74 08                	je     c001671f <LogicalDisk::mount()+0x51>
c0016717:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001671d:	eb 1c                	jmp    c001673b <LogicalDisk::mount()+0x6d>
c001671f:	51                   	push   ecx
c0016720:	51                   	push   ecx
c0016721:	ff 35 a8 24 03 c0    	push   DWORD PTR ds:0xc00324a8
c0016727:	68 2f bc 02 c0       	push   0xc002bc2f
c001672c:	e8 12 c7 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0016731:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016734:	83 c4 10             	add    esp,0x10
c0016737:	eb ac                	jmp    c00166e5 <LogicalDisk::mount()+0x17>
c0016739:	31 c0                	xor    eax,eax
c001673b:	5a                   	pop    edx
c001673c:	5b                   	pop    ebx
c001673d:	5e                   	pop    esi
c001673e:	c3                   	ret    
c001673f:	90                   	nop

c0016740 <LogicalDisk::unmount()>:
c0016740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016744:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001674e:	c3                   	ret    
c001674f:	90                   	nop

c0016750 <LogicalDisk::eject()>:
c0016750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016754:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001675a:	8b 10                	mov    edx,DWORD PTR [eax]
c001675c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016760:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016763:	90                   	nop

c0016764 <LogicalDisk::unassignDriveLetter()>:
c0016764:	57                   	push   edi
c0016765:	56                   	push   esi
c0016766:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001676a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016771:	84 c9                	test   cl,cl
c0016773:	75 0f                	jne    c0016784 <LogicalDisk::unassignDriveLetter()+0x20>
c0016775:	c7 44 24 0c 4a bc 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bc4a
c001677d:	5e                   	pop    esi
c001677e:	5f                   	pop    edi
c001677f:	e9 89 40 00 00       	jmp    c001a80d <Krnl::panic(char const*)>
c0016784:	83 e9 41             	sub    ecx,0x41
c0016787:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001678e:	b8 01 00 00 00       	mov    eax,0x1
c0016793:	c7 04 8d 80 f5 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0a80],0x0
c001679e:	d3 e0                	shl    eax,cl
c00167a0:	89 c7                	mov    edi,eax
c00167a2:	f7 d0                	not    eax
c00167a4:	c1 ff 1f             	sar    edi,0x1f
c00167a7:	21 05 60 f5 02 c0    	and    DWORD PTR ds:0xc002f560,eax
c00167ad:	89 fe                	mov    esi,edi
c00167af:	f7 d6                	not    esi
c00167b1:	21 35 64 f5 02 c0    	and    DWORD PTR ds:0xc002f564,esi
c00167b7:	5e                   	pop    esi
c00167b8:	5f                   	pop    edi
c00167b9:	c3                   	ret    

c00167ba <LogicalDisk::read(unsigned long long, int, void*)>:
c00167ba:	57                   	push   edi
c00167bb:	56                   	push   esi
c00167bc:	53                   	push   ebx
c00167bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167c5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167cd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167d3:	77 41                	ja     c0016816 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167d5:	99                   	cdq    
c00167d6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167dc:	01 c8                	add    eax,ecx
c00167de:	11 da                	adc    edx,ebx
c00167e0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167e6:	19 d7                	sbb    edi,edx
c00167e8:	72 33                	jb     c001681d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167ea:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167f0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167fa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167fe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016804:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001680a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001680e:	5b                   	pop    ebx
c001680f:	5e                   	pop    esi
c0016810:	5f                   	pop    edi
c0016811:	e9 ec 0a 00 00       	jmp    c0017302 <VCache::read(unsigned long long, int, void*)>
c0016816:	b8 05 00 00 00       	mov    eax,0x5
c001681b:	eb 05                	jmp    c0016822 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001681d:	b8 07 00 00 00       	mov    eax,0x7
c0016822:	5b                   	pop    ebx
c0016823:	5e                   	pop    esi
c0016824:	5f                   	pop    edi
c0016825:	c3                   	ret    

c0016826 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016826:	57                   	push   edi
c0016827:	56                   	push   esi
c0016828:	53                   	push   ebx
c0016829:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001682d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016831:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016839:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001683f:	77 41                	ja     c0016882 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016841:	99                   	cdq    
c0016842:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016848:	01 c8                	add    eax,ecx
c001684a:	11 da                	adc    edx,ebx
c001684c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016852:	19 d7                	sbb    edi,edx
c0016854:	72 33                	jb     c0016889 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016856:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001685c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016862:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016866:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001686a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016870:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016876:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001687a:	5b                   	pop    ebx
c001687b:	5e                   	pop    esi
c001687c:	5f                   	pop    edi
c001687d:	e9 96 09 00 00       	jmp    c0017218 <VCache::write(unsigned long long, int, void*)>
c0016882:	b8 05 00 00 00       	mov    eax,0x5
c0016887:	eb 05                	jmp    c001688e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016889:	b8 07 00 00 00       	mov    eax,0x7
c001688e:	5b                   	pop    ebx
c001688f:	5e                   	pop    esi
c0016890:	5f                   	pop    edi
c0016891:	c3                   	ret    

c0016892 <Mouse::Mouse(char const*)>:
c0016892:	83 ec 0c             	sub    esp,0xc
c0016895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016899:	83 ec 08             	sub    esp,0x8
c001689c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a0:	50                   	push   eax
c00168a1:	e8 ae db ff ff       	call   c0014454 <Device::Device(char const*)>
c00168a6:	83 c4 10             	add    esp,0x10
c00168a9:	ba a0 bc 02 c0       	mov    edx,0xc002bca0
c00168ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b2:	89 10                	mov    DWORD PTR [eax],edx
c00168b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b8:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168c2:	90                   	nop
c00168c3:	83 c4 0c             	add    esp,0xc
c00168c6:	c3                   	ret    
c00168c7:	90                   	nop

c00168c8 <Mouse::~Mouse()>:
c00168c8:	83 ec 0c             	sub    esp,0xc
c00168cb:	ba a0 bc 02 c0       	mov    edx,0xc002bca0
c00168d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d4:	89 10                	mov    DWORD PTR [eax],edx
c00168d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168da:	83 ec 0c             	sub    esp,0xc
c00168dd:	50                   	push   eax
c00168de:	e8 67 d8 ff ff       	call   c001414a <Device::~Device()>
c00168e3:	83 c4 10             	add    esp,0x10
c00168e6:	90                   	nop
c00168e7:	83 c4 0c             	add    esp,0xc
c00168ea:	c3                   	ret    
c00168eb:	90                   	nop

c00168ec <Mouse::~Mouse()>:
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	83 ec 0c             	sub    esp,0xc
c00168f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f6:	e8 cd ff ff ff       	call   c00168c8 <Mouse::~Mouse()>
c00168fb:	83 c4 10             	add    esp,0x10
c00168fe:	83 ec 08             	sub    esp,0x8
c0016901:	68 58 01 00 00       	push   0x158
c0016906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001690a:	e8 54 c4 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c001690f:	83 c4 10             	add    esp,0x10
c0016912:	83 c4 0c             	add    esp,0xc
c0016915:	c3                   	ret    

c0016916 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016916:	55                   	push   ebp
c0016917:	57                   	push   edi
c0016918:	56                   	push   esi
c0016919:	53                   	push   ebx
c001691a:	81 ec 20 01 00 00    	sub    esp,0x120
c0016920:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016927:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001692e:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016935:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001693c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016940:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016948:	56                   	push   esi
c0016949:	68 c4 bc 02 c0       	push   0xc002bcc4
c001694e:	e8 f0 c4 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0016953:	58                   	pop    eax
c0016954:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001695b:	e8 f0 db ff ff       	call   c0014550 <Device::getName()>
c0016960:	5a                   	pop    edx
c0016961:	59                   	pop    ecx
c0016962:	50                   	push   eax
c0016963:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016967:	53                   	push   ebx
c0016968:	e8 bb 9e fe ff       	call   c0000828 <strcpy>
c001696d:	5d                   	pop    ebp
c001696e:	58                   	pop    eax
c001696f:	68 f5 bc 02 c0       	push   0xc002bcf5
c0016974:	53                   	push   ebx
c0016975:	e8 ee 9f fe ff       	call   c0000968 <strcat>
c001697a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016981:	e8 22 8f ff ff       	call   c000f8a8 <malloc>
c0016986:	83 c4 0c             	add    esp,0xc
c0016989:	89 c5                	mov    ebp,eax
c001698b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001698f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016993:	57                   	push   edi
c0016994:	56                   	push   esi
c0016995:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001699c:	53                   	push   ebx
c001699d:	50                   	push   eax
c001699e:	e8 bf fb ff ff       	call   c0016562 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169a3:	83 c4 14             	add    esp,0x14
c00169a6:	55                   	push   ebp
c00169a7:	e8 6c fc ff ff       	call   c0016618 <LogicalDisk::assignDriveLetter()>
c00169ac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169af:	0f be d8             	movsx  ebx,al
c00169b2:	e8 17 fd ff ff       	call   c00166ce <LogicalDisk::mount()>
c00169b7:	58                   	pop    eax
c00169b8:	5a                   	pop    edx
c00169b9:	55                   	push   ebp
c00169ba:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169c1:	e8 9e d8 ff ff       	call   c0014264 <Device::addChild(Device*)>
c00169c6:	59                   	pop    ecx
c00169c7:	5e                   	pop    esi
c00169c8:	53                   	push   ebx
c00169c9:	68 00 bd 02 c0       	push   0xc002bd00
c00169ce:	e8 70 c4 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00169d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169d9:	5b                   	pop    ebx
c00169da:	5e                   	pop    esi
c00169db:	5f                   	pop    edi
c00169dc:	5d                   	pop    ebp
c00169dd:	c3                   	ret    

c00169de <createPartitionsForDisk(PhysicalDisk*)>:
c00169de:	55                   	push   ebp
c00169df:	57                   	push   edi
c00169e0:	56                   	push   esi
c00169e1:	53                   	push   ebx
c00169e2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169e8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169f5:	3d 00 02 00 00       	cmp    eax,0x200
c00169fa:	74 27                	je     c0016a23 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169fc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a02:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a08:	83 ec 10             	sub    esp,0x10
c0016a0b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a0f:	99                   	cdq    
c0016a10:	c1 e6 0a             	shl    esi,0xa
c0016a13:	52                   	push   edx
c0016a14:	89 fd                	mov    ebp,edi
c0016a16:	50                   	push   eax
c0016a17:	55                   	push   ebp
c0016a18:	56                   	push   esi
c0016a19:	e8 c6 08 01 00       	call   c00272e4 <__udivdi3>
c0016a1e:	e9 b1 00 00 00       	jmp    c0016ad4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a23:	83 ec 0c             	sub    esp,0xc
c0016a26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a28:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a2c:	56                   	push   esi
c0016a2d:	6a 01                	push   0x1
c0016a2f:	6a 00                	push   0x0
c0016a31:	6a 00                	push   0x0
c0016a33:	53                   	push   ebx
c0016a34:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a37:	83 c4 20             	add    esp,0x20
c0016a3a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a42:	75 0a                	jne    c0016a4e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a44:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a4c:	74 2c                	je     c0016a7a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a4e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a54:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a60:	83 ec 10             	sub    esp,0x10
c0016a63:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a67:	89 f7                	mov    edi,esi
c0016a69:	c1 e0 0a             	shl    eax,0xa
c0016a6c:	c1 ff 1f             	sar    edi,0x1f
c0016a6f:	57                   	push   edi
c0016a70:	56                   	push   esi
c0016a71:	52                   	push   edx
c0016a72:	50                   	push   eax
c0016a73:	e8 6c 08 01 00       	call   c00272e4 <__udivdi3>
c0016a78:	eb 5a                	jmp    c0016ad4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a7a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a81:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a88:	83 e1 7f             	and    ecx,0x7f
c0016a8b:	83 e0 7f             	and    eax,0x7f
c0016a8e:	01 c1                	add    ecx,eax
c0016a90:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a97:	83 e0 7f             	and    eax,0x7f
c0016a9a:	01 c1                	add    ecx,eax
c0016a9c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016aa3:	83 e0 7f             	and    eax,0x7f
c0016aa6:	00 c1                	add    cl,al
c0016aa8:	74 41                	je     c0016aeb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016aaa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ab0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ab6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016abc:	83 ec 10             	sub    esp,0x10
c0016abf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ac3:	89 f7                	mov    edi,esi
c0016ac5:	c1 e0 0a             	shl    eax,0xa
c0016ac8:	c1 ff 1f             	sar    edi,0x1f
c0016acb:	57                   	push   edi
c0016acc:	56                   	push   esi
c0016acd:	52                   	push   edx
c0016ace:	50                   	push   eax
c0016acf:	e8 10 08 01 00       	call   c00272e4 <__udivdi3>
c0016ad4:	83 c4 14             	add    esp,0x14
c0016ad7:	52                   	push   edx
c0016ad8:	50                   	push   eax
c0016ad9:	6a 00                	push   0x0
c0016adb:	6a 00                	push   0x0
c0016add:	53                   	push   ebx
c0016ade:	e8 33 fe ff ff       	call   c0016916 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ae3:	83 c4 20             	add    esp,0x20
c0016ae6:	e9 79 01 00 00       	jmp    c0016c64 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016aeb:	89 f0                	mov    eax,esi
c0016aed:	31 f6                	xor    esi,esi
c0016aef:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016af6:	75 02                	jne    c0016afa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016af8:	89 f1                	mov    ecx,esi
c0016afa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b01:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b08:	c1 e2 08             	shl    edx,0x8
c0016b0b:	c1 e7 10             	shl    edi,0x10
c0016b0e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b16:	09 fa                	or     edx,edi
c0016b18:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b20:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b27:	83 c0 10             	add    eax,0x10
c0016b2a:	09 fa                	or     edx,edi
c0016b2c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b33:	c1 e7 18             	shl    edi,0x18
c0016b36:	09 fa                	or     edx,edi
c0016b38:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b3f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b43:	c1 e7 10             	shl    edi,0x10
c0016b46:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b4d:	c1 e2 08             	shl    edx,0x8
c0016b50:	09 fa                	or     edx,edi
c0016b52:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b59:	09 fa                	or     edx,edi
c0016b5b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b62:	c1 e7 18             	shl    edi,0x18
c0016b65:	09 fa                	or     edx,edi
c0016b67:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b6b:	46                   	inc    esi
c0016b6c:	83 fe 04             	cmp    esi,0x4
c0016b6f:	0f 85 7a ff ff ff    	jne    c0016aef <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b79:	83 f0 01             	xor    eax,0x1
c0016b7c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b80:	75 57                	jne    c0016bd9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b86:	83 f0 01             	xor    eax,0x1
c0016b89:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b8d:	75 4a                	jne    c0016bd9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b8f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b93:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b9b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ba3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ba9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016baf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bb5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bb9:	89 f7                	mov    edi,esi
c0016bbb:	c1 e0 0a             	shl    eax,0xa
c0016bbe:	c1 ff 1f             	sar    edi,0x1f
c0016bc1:	57                   	push   edi
c0016bc2:	56                   	push   esi
c0016bc3:	52                   	push   edx
c0016bc4:	50                   	push   eax
c0016bc5:	e8 1a 07 01 00       	call   c00272e4 <__udivdi3>
c0016bca:	83 c4 10             	add    esp,0x10
c0016bcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bd5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bd9:	84 c9                	test   cl,cl
c0016bdb:	74 53                	je     c0016c30 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bdd:	0f b6 c9             	movzx  ecx,cl
c0016be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016be8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bec:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bf4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bf8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bfc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c04:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c10:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c14:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c18:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c1c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c28:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c2c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c30:	31 ed                	xor    ebp,ebp
c0016c32:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c36:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c3a:	89 f8                	mov    eax,edi
c0016c3c:	09 f0                	or     eax,esi
c0016c3e:	74 1e                	je     c0016c5e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c40:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c44:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c48:	89 d1                	mov    ecx,edx
c0016c4a:	09 c1                	or     ecx,eax
c0016c4c:	74 10                	je     c0016c5e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c4e:	83 ec 0c             	sub    esp,0xc
c0016c51:	57                   	push   edi
c0016c52:	56                   	push   esi
c0016c53:	52                   	push   edx
c0016c54:	50                   	push   eax
c0016c55:	53                   	push   ebx
c0016c56:	e8 bb fc ff ff       	call   c0016916 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c5b:	83 c4 20             	add    esp,0x20
c0016c5e:	45                   	inc    ebp
c0016c5f:	83 fd 04             	cmp    ebp,0x4
c0016c62:	75 ce                	jne    c0016c32 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c64:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c6a:	5b                   	pop    ebx
c0016c6b:	5e                   	pop    esi
c0016c6c:	5f                   	pop    edi
c0016c6d:	5d                   	pop    ebp
c0016c6e:	c3                   	ret    
c0016c6f:	90                   	nop

c0016c70 <Serial::Serial(char const*)>:
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c77:	83 ec 08             	sub    esp,0x8
c0016c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7e:	50                   	push   eax
c0016c7f:	e8 d0 d7 ff ff       	call   c0014454 <Device::Device(char const*)>
c0016c84:	83 c4 10             	add    esp,0x10
c0016c87:	ba 2c bd 02 c0       	mov    edx,0xc002bd2c
c0016c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c90:	89 10                	mov    DWORD PTR [eax],edx
c0016c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c96:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ca0:	90                   	nop
c0016ca1:	83 c4 0c             	add    esp,0xc
c0016ca4:	c3                   	ret    
c0016ca5:	90                   	nop

c0016ca6 <Serial::~Serial()>:
c0016ca6:	83 ec 0c             	sub    esp,0xc
c0016ca9:	ba 2c bd 02 c0       	mov    edx,0xc002bd2c
c0016cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb2:	89 10                	mov    DWORD PTR [eax],edx
c0016cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb8:	83 ec 0c             	sub    esp,0xc
c0016cbb:	50                   	push   eax
c0016cbc:	e8 89 d4 ff ff       	call   c001414a <Device::~Device()>
c0016cc1:	83 c4 10             	add    esp,0x10
c0016cc4:	90                   	nop
c0016cc5:	83 c4 0c             	add    esp,0xc
c0016cc8:	c3                   	ret    
c0016cc9:	90                   	nop

c0016cca <Serial::~Serial()>:
c0016cca:	83 ec 0c             	sub    esp,0xc
c0016ccd:	83 ec 0c             	sub    esp,0xc
c0016cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd4:	e8 cd ff ff ff       	call   c0016ca6 <Serial::~Serial()>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	83 ec 08             	sub    esp,0x8
c0016cdf:	68 58 01 00 00       	push   0x158
c0016ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce8:	e8 76 c0 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	83 c4 0c             	add    esp,0xc
c0016cf3:	c3                   	ret    

c0016cf4 <Timer::Timer(char const*)>:
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cfb:	83 ec 08             	sub    esp,0x8
c0016cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d02:	50                   	push   eax
c0016d03:	e8 4c d7 ff ff       	call   c0014454 <Device::Device(char const*)>
c0016d08:	83 c4 10             	add    esp,0x10
c0016d0b:	ba 70 bd 02 c0       	mov    edx,0xc002bd70
c0016d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d14:	89 10                	mov    DWORD PTR [eax],edx
c0016d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d24:	90                   	nop
c0016d25:	83 c4 0c             	add    esp,0xc
c0016d28:	c3                   	ret    
c0016d29:	90                   	nop

c0016d2a <Timer::~Timer()>:
c0016d2a:	83 ec 0c             	sub    esp,0xc
c0016d2d:	ba 70 bd 02 c0       	mov    edx,0xc002bd70
c0016d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d36:	89 10                	mov    DWORD PTR [eax],edx
c0016d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	50                   	push   eax
c0016d40:	e8 05 d4 ff ff       	call   c001414a <Device::~Device()>
c0016d45:	83 c4 10             	add    esp,0x10
c0016d48:	90                   	nop
c0016d49:	83 c4 0c             	add    esp,0xc
c0016d4c:	c3                   	ret    
c0016d4d:	90                   	nop

c0016d4e <Timer::~Timer()>:
c0016d4e:	83 ec 0c             	sub    esp,0xc
c0016d51:	83 ec 0c             	sub    esp,0xc
c0016d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d58:	e8 cd ff ff ff       	call   c0016d2a <Timer::~Timer()>
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	83 ec 08             	sub    esp,0x8
c0016d63:	68 5c 01 00 00       	push   0x15c
c0016d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d6c:	e8 f2 bf ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0016d71:	83 c4 10             	add    esp,0x10
c0016d74:	83 c4 0c             	add    esp,0xc
c0016d77:	c3                   	ret    

c0016d78 <Timer::read()>:
c0016d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d7c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d82:	c3                   	ret    

c0016d83 <timerHandler(unsigned long long)>:
c0016d83:	55                   	push   ebp
c0016d84:	57                   	push   edi
c0016d85:	56                   	push   esi
c0016d86:	53                   	push   ebx
c0016d87:	83 ec 0c             	sub    esp,0xc
c0016d8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d8e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d92:	01 35 f0 f5 02 c0    	add    DWORD PTR ds:0xc002f5f0,esi
c0016d98:	11 3d f4 f5 02 c0    	adc    DWORD PTR ds:0xc002f5f4,edi
c0016d9e:	80 3d 6d ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef6d,0x0
c0016da5:	0f 84 42 01 00 00    	je     c0016eed <timerHandler(unsigned long long)+0x16a>
c0016dab:	fa                   	cli    
c0016dac:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	ff 05 a4 24 03 c0    	inc    DWORD PTR ds:0xc00324a4
c0016dbb:	68 b8 24 03 c0       	push   0xc00324b8
c0016dc0:	e8 a5 25 01 00       	call   c002936a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dc5:	83 c4 10             	add    esp,0x10
c0016dc8:	84 c0                	test   al,al
c0016dca:	0f 85 a2 00 00 00    	jne    c0016e72 <timerHandler(unsigned long long)+0xef>
c0016dd0:	83 ec 0c             	sub    esp,0xc
c0016dd3:	68 b8 24 03 c0       	push   0xc00324b8
c0016dd8:	e8 a9 25 01 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ddd:	83 c4 10             	add    esp,0x10
c0016de0:	89 c3                	mov    ebx,eax
c0016de2:	83 ec 0c             	sub    esp,0xc
c0016de5:	68 b8 24 03 c0       	push   0xc00324b8
c0016dea:	e8 97 25 01 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016def:	c7 04 24 b8 24 03 c0 	mov    DWORD PTR [esp],0xc00324b8
c0016df6:	89 c5                	mov    ebp,eax
c0016df8:	e8 91 25 01 00       	call   c002938e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016dfd:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e00:	83 c4 10             	add    esp,0x10
c0016e03:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e06:	39 15 f0 f5 02 c0    	cmp    DWORD PTR ds:0xc002f5f0,edx
c0016e0c:	a1 f4 f5 02 c0       	mov    eax,ds:0xc002f5f4
c0016e11:	19 c8                	sbb    eax,ecx
c0016e13:	72 21                	jb     c0016e36 <timerHandler(unsigned long long)+0xb3>
c0016e15:	83 ec 0c             	sub    esp,0xc
c0016e18:	55                   	push   ebp
c0016e19:	e8 42 7c 00 00       	call   c001ea60 <unblockTask(ThreadControlBlock*)>
c0016e1e:	83 c4 10             	add    esp,0x10
c0016e21:	39 eb                	cmp    ebx,ebp
c0016e23:	75 21                	jne    c0016e46 <timerHandler(unsigned long long)+0xc3>
c0016e25:	83 ec 0c             	sub    esp,0xc
c0016e28:	68 b8 24 03 c0       	push   0xc00324b8
c0016e2d:	e8 54 25 01 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e32:	89 c3                	mov    ebx,eax
c0016e34:	eb 0d                	jmp    c0016e43 <timerHandler(unsigned long long)+0xc0>
c0016e36:	50                   	push   eax
c0016e37:	50                   	push   eax
c0016e38:	55                   	push   ebp
c0016e39:	68 b8 24 03 c0       	push   0xc00324b8
c0016e3e:	e8 f9 25 01 00       	call   c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e43:	83 c4 10             	add    esp,0x10
c0016e46:	83 ec 0c             	sub    esp,0xc
c0016e49:	68 b8 24 03 c0       	push   0xc00324b8
c0016e4e:	e8 17 25 01 00       	call   c002936a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e53:	83 c4 10             	add    esp,0x10
c0016e56:	84 c0                	test   al,al
c0016e58:	75 18                	jne    c0016e72 <timerHandler(unsigned long long)+0xef>
c0016e5a:	83 ec 0c             	sub    esp,0xc
c0016e5d:	68 b8 24 03 c0       	push   0xc00324b8
c0016e62:	e8 1f 25 01 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e67:	83 c4 10             	add    esp,0x10
c0016e6a:	39 d8                	cmp    eax,ebx
c0016e6c:	0f 85 70 ff ff ff    	jne    c0016de2 <timerHandler(unsigned long long)+0x5f>
c0016e72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e77:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e7b:	74 3d                	je     c0016eba <timerHandler(unsigned long long)+0x137>
c0016e7d:	80 3d 6c ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef6c,0x0
c0016e84:	74 34                	je     c0016eba <timerHandler(unsigned long long)+0x137>
c0016e86:	fa                   	cli    
c0016e87:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c0016e8d:	31 d2                	xor    edx,edx
c0016e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e94:	89 f9                	mov    ecx,edi
c0016e96:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ea1:	39 c6                	cmp    esi,eax
c0016ea3:	19 d1                	sbb    ecx,edx
c0016ea5:	72 05                	jb     c0016eac <timerHandler(unsigned long long)+0x129>
c0016ea7:	e8 f0 76 00 00       	call   c001e59c <schedule()>
c0016eac:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0016eb1:	48                   	dec    eax
c0016eb2:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0016eb7:	75 01                	jne    c0016eba <timerHandler(unsigned long long)+0x137>
c0016eb9:	fb                   	sti    
c0016eba:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c0016ebf:	48                   	dec    eax
c0016ec0:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c0016ec5:	75 18                	jne    c0016edf <timerHandler(unsigned long long)+0x15c>
c0016ec7:	83 3d a0 24 03 c0 00 	cmp    DWORD PTR ds:0xc00324a0,0x0
c0016ece:	74 0f                	je     c0016edf <timerHandler(unsigned long long)+0x15c>
c0016ed0:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c0016eda:	e8 bd 76 00 00       	call   c001e59c <schedule()>
c0016edf:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0016ee4:	48                   	dec    eax
c0016ee5:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c0016eea:	75 01                	jne    c0016eed <timerHandler(unsigned long long)+0x16a>
c0016eec:	fb                   	sti    
c0016eed:	83 c4 0c             	add    esp,0xc
c0016ef0:	5b                   	pop    ebx
c0016ef1:	5e                   	pop    esi
c0016ef2:	5f                   	pop    edi
c0016ef3:	5d                   	pop    ebp
c0016ef4:	c3                   	ret    

c0016ef5 <setupTimer(int)>:
c0016ef5:	57                   	push   edi
c0016ef6:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0016efb:	56                   	push   esi
c0016efc:	53                   	push   ebx
c0016efd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f07:	83 ec 0c             	sub    esp,0xc
c0016f0a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f10:	e8 3b d6 ff ff       	call   c0014550 <Device::getName()>
c0016f15:	83 c4 10             	add    esp,0x10
c0016f18:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f1b:	0f 85 8d 00 00 00    	jne    c0016fae <setupTimer(int)+0xb9>
c0016f21:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0016f26:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f2d:	74 7f                	je     c0016fae <setupTimer(int)+0xb9>
c0016f2f:	83 ec 0c             	sub    esp,0xc
c0016f32:	68 5c 01 00 00       	push   0x15c
c0016f37:	e8 6c 89 ff ff       	call   c000f8a8 <malloc>
c0016f3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f3f:	89 c3                	mov    ebx,eax
c0016f41:	e8 78 ff 00 00       	call   c0026ebe <PIT::PIT()>
c0016f46:	59                   	pop    ecx
c0016f47:	5f                   	pop    edi
c0016f48:	53                   	push   ebx
c0016f49:	ff 35 68 ef 02 c0    	push   DWORD PTR ds:0xc002ef68
c0016f4f:	e8 10 d3 ff ff       	call   c0014264 <Device::addChild(Device*)>
c0016f54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f56:	6a 00                	push   0x0
c0016f58:	6a 00                	push   0x0
c0016f5a:	56                   	push   esi
c0016f5b:	53                   	push   ebx
c0016f5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f5f:	83 c4 14             	add    esp,0x14
c0016f62:	68 60 01 00 00       	push   0x160
c0016f67:	e8 3c 89 ff ff       	call   c000f8a8 <malloc>
c0016f6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f6f:	89 c7                	mov    edi,eax
c0016f71:	e8 f8 fd 00 00       	call   c0026d6e <APICTimer::APICTimer()>
c0016f76:	6a 00                	push   0x0
c0016f78:	6a 00                	push   0x0
c0016f7a:	56                   	push   esi
c0016f7b:	57                   	push   edi
c0016f7c:	e8 ef fc 00 00       	call   c0026c70 <APICTimer::open(int, int, void*)>
c0016f81:	83 c4 20             	add    esp,0x20
c0016f84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f86:	6a 00                	push   0x0
c0016f88:	6a 00                	push   0x0
c0016f8a:	6a 00                	push   0x0
c0016f8c:	53                   	push   ebx
c0016f8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f90:	58                   	pop    eax
c0016f91:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0016f96:	5a                   	pop    edx
c0016f97:	57                   	push   edi
c0016f98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f9e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fa4:	e8 bb d2 ff ff       	call   c0014264 <Device::addChild(Device*)>
c0016fa9:	83 c4 10             	add    esp,0x10
c0016fac:	eb 33                	jmp    c0016fe1 <setupTimer(int)+0xec>
c0016fae:	83 ec 0c             	sub    esp,0xc
c0016fb1:	68 5c 01 00 00       	push   0x15c
c0016fb6:	e8 ed 88 ff ff       	call   c000f8a8 <malloc>
c0016fbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fbe:	89 c3                	mov    ebx,eax
c0016fc0:	e8 f9 fe 00 00       	call   c0026ebe <PIT::PIT()>
c0016fc5:	58                   	pop    eax
c0016fc6:	5a                   	pop    edx
c0016fc7:	53                   	push   ebx
c0016fc8:	ff 35 68 ef 02 c0    	push   DWORD PTR ds:0xc002ef68
c0016fce:	e8 91 d2 ff ff       	call   c0014264 <Device::addChild(Device*)>
c0016fd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fd5:	6a 00                	push   0x0
c0016fd7:	6a 00                	push   0x0
c0016fd9:	56                   	push   esi
c0016fda:	53                   	push   ebx
c0016fdb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fde:	83 c4 20             	add    esp,0x20
c0016fe1:	89 d8                	mov    eax,ebx
c0016fe3:	5b                   	pop    ebx
c0016fe4:	5e                   	pop    esi
c0016fe5:	5f                   	pop    edi
c0016fe6:	c3                   	ret    
c0016fe7:	90                   	nop

c0016fe8 <VCache::VCache(PhysicalDisk*)>:
c0016fe8:	53                   	push   ebx
c0016fe9:	83 ec 18             	sub    esp,0x18
c0016fec:	ba a0 bd 02 c0       	mov    edx,0xc002bda0
c0016ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff5:	89 10                	mov    DWORD PTR [eax],edx
c0016ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017006:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017018:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001701f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017023:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001702a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017035:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001703c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017040:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017048:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001704f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001705e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017062:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017072:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017079:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017081:	83 ec 0c             	sub    esp,0xc
c0017084:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017088:	e8 1b 88 ff ff       	call   c000f8a8 <malloc>
c001708d:	83 c4 10             	add    esp,0x10
c0017090:	89 c3                	mov    ebx,eax
c0017092:	83 ec 0c             	sub    esp,0xc
c0017095:	53                   	push   ebx
c0017096:	e8 ab 72 00 00       	call   c001e346 <Mutex::Mutex()>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170ad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170e0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170e3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170f8:	05 00 01 00 00       	add    eax,0x100
c00170fd:	c1 e0 04             	shl    eax,0x4
c0017100:	83 ec 0c             	sub    esp,0xc
c0017103:	50                   	push   eax
c0017104:	e8 9f 87 ff ff       	call   c000f8a8 <malloc>
c0017109:	83 c4 10             	add    esp,0x10
c001710c:	89 c2                	mov    edx,eax
c001710e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017112:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017119:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017124:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017128:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001712c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017132:	c1 e0 07             	shl    eax,0x7
c0017135:	83 ec 0c             	sub    esp,0xc
c0017138:	50                   	push   eax
c0017139:	e8 6a 87 ff ff       	call   c000f8a8 <malloc>
c001713e:	83 c4 10             	add    esp,0x10
c0017141:	89 c2                	mov    edx,eax
c0017143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017147:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001714a:	90                   	nop
c001714b:	83 c4 18             	add    esp,0x18
c001714e:	5b                   	pop    ebx
c001714f:	c3                   	ret    

c0017150 <VCache::invalidateReadBuffer()>:
c0017150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017154:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001715a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001715e:	c3                   	ret    
c001715f:	90                   	nop

c0017160 <VCache::writeWriteBuffer()>:
c0017160:	53                   	push   ebx
c0017161:	83 ec 14             	sub    esp,0x14
c0017164:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017168:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001716b:	8b 10                	mov    edx,DWORD PTR [eax]
c001716d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017170:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017173:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017176:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017179:	50                   	push   eax
c001717a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001717d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017184:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001718b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001718f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017196:	83 c4 28             	add    esp,0x28
c0017199:	5b                   	pop    ebx
c001719a:	c3                   	ret    
c001719b:	90                   	nop

c001719c <VCache::~VCache()>:
c001719c:	83 ec 0c             	sub    esp,0xc
c001719f:	ba a0 bd 02 c0       	mov    edx,0xc002bda0
c00171a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a8:	89 10                	mov    DWORD PTR [eax],edx
c00171aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ae:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171b1:	84 c0                	test   al,al
c00171b3:	74 0f                	je     c00171c4 <VCache::~VCache()+0x28>
c00171b5:	83 ec 0c             	sub    esp,0xc
c00171b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171bc:	e8 9f ff ff ff       	call   c0017160 <VCache::writeWriteBuffer()>
c00171c1:	83 c4 10             	add    esp,0x10
c00171c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	50                   	push   eax
c00171cf:	e8 e4 86 ff ff       	call   c000f8b8 <free>
c00171d4:	83 c4 10             	add    esp,0x10
c00171d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	50                   	push   eax
c00171e2:	e8 d1 86 ff ff       	call   c000f8b8 <free>
c00171e7:	83 c4 10             	add    esp,0x10
c00171ea:	90                   	nop
c00171eb:	83 c4 0c             	add    esp,0xc
c00171ee:	c3                   	ret    
c00171ef:	90                   	nop

c00171f0 <VCache::~VCache()>:
c00171f0:	83 ec 0c             	sub    esp,0xc
c00171f3:	83 ec 0c             	sub    esp,0xc
c00171f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171fa:	e8 9d ff ff ff       	call   c001719c <VCache::~VCache()>
c00171ff:	83 c4 10             	add    esp,0x10
c0017202:	83 ec 08             	sub    esp,0x8
c0017205:	6a 44                	push   0x44
c0017207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001720b:	e8 53 bb ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0017210:	83 c4 10             	add    esp,0x10
c0017213:	83 c4 0c             	add    esp,0xc
c0017216:	c3                   	ret    
c0017217:	90                   	nop

c0017218 <VCache::write(unsigned long long, int, void*)>:
c0017218:	55                   	push   ebp
c0017219:	57                   	push   edi
c001721a:	56                   	push   esi
c001721b:	53                   	push   ebx
c001721c:	83 ec 18             	sub    esp,0x18
c001721f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017223:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017227:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001722b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001722e:	e8 a1 76 00 00       	call   c001e8d4 <Semaphore::acquire()>
c0017233:	83 c4 10             	add    esp,0x10
c0017236:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001723a:	74 0c                	je     c0017248 <VCache::write(unsigned long long, int, void*)+0x30>
c001723c:	83 ec 0c             	sub    esp,0xc
c001723f:	53                   	push   ebx
c0017240:	e8 0b ff ff ff       	call   c0017150 <VCache::invalidateReadBuffer()>
c0017245:	83 c4 10             	add    esp,0x10
c0017248:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001724c:	74 5c                	je     c00172aa <VCache::write(unsigned long long, int, void*)+0x92>
c001724e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0017251:	89 e8                	mov    eax,ebp
c0017253:	99                   	cdq    
c0017254:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017257:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001725a:	89 c1                	mov    ecx,eax
c001725c:	89 d0                	mov    eax,edx
c001725e:	31 f1                	xor    ecx,esi
c0017260:	31 f8                	xor    eax,edi
c0017262:	09 c1                	or     ecx,eax
c0017264:	75 38                	jne    c001729e <VCache::write(unsigned long long, int, void*)+0x86>
c0017266:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001726b:	75 31                	jne    c001729e <VCache::write(unsigned long long, int, void*)+0x86>
c001726d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017270:	89 ef                	mov    edi,ebp
c0017272:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017278:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001727c:	0f af f9             	imul   edi,ecx
c001727f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0017282:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017284:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017287:	40                   	inc    eax
c0017288:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001728b:	83 c0 80             	add    eax,0xffffff80
c001728e:	75 5c                	jne    c00172ec <VCache::write(unsigned long long, int, void*)+0xd4>
c0017290:	83 ec 0c             	sub    esp,0xc
c0017293:	53                   	push   ebx
c0017294:	e8 c7 fe ff ff       	call   c0017160 <VCache::writeWriteBuffer()>
c0017299:	83 c4 10             	add    esp,0x10
c001729c:	eb 4e                	jmp    c00172ec <VCache::write(unsigned long long, int, void*)+0xd4>
c001729e:	83 ec 0c             	sub    esp,0xc
c00172a1:	53                   	push   ebx
c00172a2:	e8 b9 fe ff ff       	call   c0017160 <VCache::writeWriteBuffer()>
c00172a7:	83 c4 10             	add    esp,0x10
c00172aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ad:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172b2:	7f 22                	jg     c00172d6 <VCache::write(unsigned long long, int, void*)+0xbe>
c00172b4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172b7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172be:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172c2:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00172c5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00172c8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172ce:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172d4:	eb 16                	jmp    c00172ec <VCache::write(unsigned long long, int, void*)+0xd4>
c00172d6:	83 ec 0c             	sub    esp,0xc
c00172d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00172db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172e3:	57                   	push   edi
c00172e4:	56                   	push   esi
c00172e5:	50                   	push   eax
c00172e6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172e9:	83 c4 20             	add    esp,0x20
c00172ec:	83 ec 0c             	sub    esp,0xc
c00172ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172f2:	e8 17 7d 00 00       	call   c001f00e <Semaphore::release()>
c00172f7:	83 c4 1c             	add    esp,0x1c
c00172fa:	31 c0                	xor    eax,eax
c00172fc:	5b                   	pop    ebx
c00172fd:	5e                   	pop    esi
c00172fe:	5f                   	pop    edi
c00172ff:	5d                   	pop    ebp
c0017300:	c3                   	ret    
c0017301:	90                   	nop

c0017302 <VCache::read(unsigned long long, int, void*)>:
c0017302:	55                   	push   ebp
c0017303:	57                   	push   edi
c0017304:	56                   	push   esi
c0017305:	53                   	push   ebx
c0017306:	83 ec 28             	sub    esp,0x28
c0017309:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001730d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017311:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017315:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017319:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001731c:	e8 b3 75 00 00       	call   c001e8d4 <Semaphore::acquire()>
c0017321:	83 c4 10             	add    esp,0x10
c0017324:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017328:	74 0c                	je     c0017336 <VCache::read(unsigned long long, int, void*)+0x34>
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	53                   	push   ebx
c001732e:	e8 2d fe ff ff       	call   c0017160 <VCache::writeWriteBuffer()>
c0017333:	83 c4 10             	add    esp,0x10
c0017336:	83 fd 01             	cmp    ebp,0x1
c0017339:	0f 85 80 00 00 00    	jne    c00173bf <VCache::read(unsigned long long, int, void*)+0xbd>
c001733f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017342:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017346:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001734d:	75 70                	jne    c00173bf <VCache::read(unsigned long long, int, void*)+0xbd>
c001734f:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0017352:	89 e9                	mov    ecx,ebp
c0017354:	f7 d9                	neg    ecx
c0017356:	89 c8                	mov    eax,ecx
c0017358:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001735c:	c1 f8 1f             	sar    eax,0x1f
c001735f:	21 f1                	and    ecx,esi
c0017361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017365:	89 c8                	mov    eax,ecx
c0017367:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001736b:	21 f9                	and    ecx,edi
c001736d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017371:	89 ca                	mov    edx,ecx
c0017373:	74 0a                	je     c001737f <VCache::read(unsigned long long, int, void*)+0x7d>
c0017375:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017378:	75 05                	jne    c001737f <VCache::read(unsigned long long, int, void*)+0x7d>
c001737a:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001737d:	74 23                	je     c00173a2 <VCache::read(unsigned long long, int, void*)+0xa0>
c001737f:	83 ec 0c             	sub    esp,0xc
c0017382:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017386:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001738a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001738d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0017390:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017395:	55                   	push   ebp
c0017396:	52                   	push   edx
c0017397:	50                   	push   eax
c0017398:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001739c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001739f:	83 c4 20             	add    esp,0x20
c00173a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173a5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173a9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173af:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173b2:	48                   	dec    eax
c00173b3:	21 c6                	and    esi,eax
c00173b5:	0f af f1             	imul   esi,ecx
c00173b8:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173bd:	eb 1d                	jmp    c00173dc <VCache::read(unsigned long long, int, void*)+0xda>
c00173bf:	83 ec 0c             	sub    esp,0xc
c00173c2:	53                   	push   ebx
c00173c3:	e8 88 fd ff ff       	call   c0017150 <VCache::invalidateReadBuffer()>
c00173c8:	5a                   	pop    edx
c00173c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00173ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173d2:	55                   	push   ebp
c00173d3:	57                   	push   edi
c00173d4:	56                   	push   esi
c00173d5:	50                   	push   eax
c00173d6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173d9:	83 c4 20             	add    esp,0x20
c00173dc:	83 ec 0c             	sub    esp,0xc
c00173df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173e2:	e8 27 7c 00 00       	call   c001f00e <Semaphore::release()>
c00173e7:	83 c4 2c             	add    esp,0x2c
c00173ea:	31 c0                	xor    eax,eax
c00173ec:	5b                   	pop    ebx
c00173ed:	5e                   	pop    esi
c00173ee:	5f                   	pop    edi
c00173ef:	5d                   	pop    ebp
c00173f0:	c3                   	ret    
c00173f1:	90                   	nop

c00173f2 <Video::putrect(int, int, int, int, unsigned int)>:
c00173f2:	55                   	push   ebp
c00173f3:	57                   	push   edi
c00173f4:	56                   	push   esi
c00173f5:	53                   	push   ebx
c00173f6:	83 ec 1c             	sub    esp,0x1c
c00173f9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017401:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017405:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017409:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001740d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017411:	01 df                	add    edi,ebx
c0017413:	39 fb                	cmp    ebx,edi
c0017415:	7d 1f                	jge    c0017436 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017417:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001741b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001741f:	7d 12                	jge    c0017433 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017421:	8b 16                	mov    edx,DWORD PTR [esi]
c0017423:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017427:	53                   	push   ebx
c0017428:	55                   	push   ebp
c0017429:	45                   	inc    ebp
c001742a:	56                   	push   esi
c001742b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	eb e8                	jmp    c001741b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017433:	43                   	inc    ebx
c0017434:	eb dd                	jmp    c0017413 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017436:	83 c4 1c             	add    esp,0x1c
c0017439:	5b                   	pop    ebx
c001743a:	5e                   	pop    esi
c001743b:	5f                   	pop    edi
c001743c:	5d                   	pop    ebp
c001743d:	c3                   	ret    

c001743e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001743e:	55                   	push   ebp
c001743f:	57                   	push   edi
c0017440:	31 ff                	xor    edi,edi
c0017442:	56                   	push   esi
c0017443:	53                   	push   ebx
c0017444:	83 ec 1c             	sub    esp,0x1c
c0017447:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001744b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001744f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017456:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001745b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001745f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017463:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017467:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001746a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001746e:	01 f9                	add    ecx,edi
c0017470:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017474:	7d 2f                	jge    c00174a5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017476:	31 f6                	xor    esi,esi
c0017478:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001747c:	01 f2                	add    edx,esi
c001747e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017482:	7d 1a                	jge    c001749e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017484:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017487:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001748a:	46                   	inc    esi
c001748b:	51                   	push   ecx
c001748c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017490:	52                   	push   edx
c0017491:	55                   	push   ebp
c0017492:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001749c:	eb da                	jmp    c0017478 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001749e:	47                   	inc    edi
c001749f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174a3:	eb c5                	jmp    c001746a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174a5:	83 c4 1c             	add    esp,0x1c
c00174a8:	5b                   	pop    ebx
c00174a9:	5e                   	pop    esi
c00174aa:	5f                   	pop    edi
c00174ab:	5d                   	pop    ebp
c00174ac:	c3                   	ret    
c00174ad:	90                   	nop

c00174ae <Video::blit(unsigned int*, int, int, int, int)>:
c00174ae:	55                   	push   ebp
c00174af:	57                   	push   edi
c00174b0:	56                   	push   esi
c00174b1:	53                   	push   ebx
c00174b2:	83 ec 1c             	sub    esp,0x1c
c00174b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174bd:	85 c0                	test   eax,eax
c00174bf:	79 02                	jns    c00174c3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174c1:	31 c0                	xor    eax,eax
c00174c3:	c1 e0 02             	shl    eax,0x2
c00174c6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174d2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174d6:	39 d8                	cmp    eax,ebx
c00174d8:	7e 49                	jle    c0017523 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174da:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174e0:	7c 41                	jl     c0017523 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174e2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174e6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174ea:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174ee:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174f2:	39 f9                	cmp    ecx,edi
c00174f4:	7e 22                	jle    c0017518 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174f6:	83 c5 04             	add    ebp,0x4
c00174f9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174ff:	7c 14                	jl     c0017515 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017501:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017503:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017506:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001750a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001750e:	56                   	push   esi
c001750f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017512:	83 c4 10             	add    esp,0x10
c0017515:	47                   	inc    edi
c0017516:	eb d2                	jmp    c00174ea <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001751c:	43                   	inc    ebx
c001751d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017521:	eb ab                	jmp    c00174ce <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017523:	83 c4 1c             	add    esp,0x1c
c0017526:	5b                   	pop    ebx
c0017527:	5e                   	pop    esi
c0017528:	5f                   	pop    edi
c0017529:	5d                   	pop    ebp
c001752a:	c3                   	ret    
c001752b:	90                   	nop

c001752c <Video::clearScreen(unsigned int)>:
c001752c:	57                   	push   edi
c001752d:	56                   	push   esi
c001752e:	53                   	push   ebx
c001752f:	31 db                	xor    ebx,ebx
c0017531:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017535:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001753b:	7e 1f                	jle    c001755c <Video::clearScreen(unsigned int)+0x30>
c001753d:	31 ff                	xor    edi,edi
c001753f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017545:	7e 12                	jle    c0017559 <Video::clearScreen(unsigned int)+0x2d>
c0017547:	8b 06                	mov    eax,DWORD PTR [esi]
c0017549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001754d:	53                   	push   ebx
c001754e:	57                   	push   edi
c001754f:	47                   	inc    edi
c0017550:	56                   	push   esi
c0017551:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017554:	83 c4 10             	add    esp,0x10
c0017557:	eb e6                	jmp    c001753f <Video::clearScreen(unsigned int)+0x13>
c0017559:	43                   	inc    ebx
c001755a:	eb d9                	jmp    c0017535 <Video::clearScreen(unsigned int)+0x9>
c001755c:	5b                   	pop    ebx
c001755d:	5e                   	pop    esi
c001755e:	5f                   	pop    edi
c001755f:	c3                   	ret    

c0017560 <Video::putpixel(int, int, unsigned int)>:
c0017560:	c7 44 24 04 a8 bd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bda8
c0017568:	e9 a0 32 00 00       	jmp    c001a80d <Krnl::panic(char const*)>
c001756d:	90                   	nop

c001756e <Video::Video(char const*)>:
c001756e:	83 ec 0c             	sub    esp,0xc
c0017571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017575:	83 ec 08             	sub    esp,0x8
c0017578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001757c:	50                   	push   eax
c001757d:	e8 d2 ce ff ff       	call   c0014454 <Device::Device(char const*)>
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	ba 2c be 02 c0       	mov    edx,0xc002be2c
c001758a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758e:	89 10                	mov    DWORD PTR [eax],edx
c0017590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017594:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001759e:	90                   	nop
c001759f:	83 c4 0c             	add    esp,0xc
c00175a2:	c3                   	ret    
c00175a3:	90                   	nop

c00175a4 <Video::~Video()>:
c00175a4:	83 ec 0c             	sub    esp,0xc
c00175a7:	ba 2c be 02 c0       	mov    edx,0xc002be2c
c00175ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b0:	89 10                	mov    DWORD PTR [eax],edx
c00175b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b6:	83 ec 0c             	sub    esp,0xc
c00175b9:	50                   	push   eax
c00175ba:	e8 8b cb ff ff       	call   c001414a <Device::~Device()>
c00175bf:	83 c4 10             	add    esp,0x10
c00175c2:	90                   	nop
c00175c3:	83 c4 0c             	add    esp,0xc
c00175c6:	c3                   	ret    
c00175c7:	90                   	nop

c00175c8 <Video::~Video()>:
c00175c8:	83 ec 0c             	sub    esp,0xc
c00175cb:	83 ec 0c             	sub    esp,0xc
c00175ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175d2:	e8 cd ff ff ff       	call   c00175a4 <Video::~Video()>
c00175d7:	83 c4 10             	add    esp,0x10
c00175da:	83 ec 08             	sub    esp,0x8
c00175dd:	68 64 01 00 00       	push   0x164
c00175e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175e6:	e8 78 b7 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	83 c4 0c             	add    esp,0xc
c00175f1:	c3                   	ret    

c00175f2 <Video::isMonochrome()>:
c00175f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175f6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175fc:	c3                   	ret    
c00175fd:	90                   	nop

c00175fe <Video::getWidth()>:
c00175fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017602:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017608:	c3                   	ret    
c0017609:	90                   	nop

c001760a <Video::getHeight()>:
c001760a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001760e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017614:	c3                   	ret    
c0017615:	90                   	nop

c0017616 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017616:	55                   	push   ebp
c0017617:	57                   	push   edi
c0017618:	56                   	push   esi
c0017619:	53                   	push   ebx
c001761a:	83 ec 2c             	sub    esp,0x2c
c001761d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017621:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017625:	83 f8 01             	cmp    eax,0x1
c0017628:	19 c9                	sbb    ecx,ecx
c001762a:	31 db                	xor    ebx,ebx
c001762c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017630:	89 cd                	mov    ebp,ecx
c0017632:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001763a:	f7 d5                	not    ebp
c001763c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017642:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017646:	01 d8                	add    eax,ebx
c0017648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001764c:	56                   	push   esi
c001764d:	e8 b8 ff ff ff       	call   c001760a <Video::getHeight()>
c0017652:	59                   	pop    ecx
c0017653:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017657:	7e 70                	jle    c00176c9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017659:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001765d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017661:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017664:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017668:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001766c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017673:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017677:	89 f8                	mov    eax,edi
c0017679:	83 c0 20             	add    eax,0x20
c001767c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017680:	56                   	push   esi
c0017681:	e8 78 ff ff ff       	call   c00175fe <Video::getWidth()>
c0017686:	5a                   	pop    edx
c0017687:	39 c7                	cmp    edi,eax
c0017689:	7d 34                	jge    c00176bf <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001768b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017690:	74 05                	je     c0017697 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017692:	8b 06                	mov    eax,DWORD PTR [esi]
c0017694:	55                   	push   ebp
c0017695:	eb 0d                	jmp    c00176a4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017697:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001769c:	74 12                	je     c00176b0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001769e:	8b 06                	mov    eax,DWORD PTR [esi]
c00176a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176a8:	57                   	push   edi
c00176a9:	56                   	push   esi
c00176aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176b4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176b8:	47                   	inc    edi
c00176b9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176bd:	75 c1                	jne    c0017680 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176bf:	43                   	inc    ebx
c00176c0:	83 fb 20             	cmp    ebx,0x20
c00176c3:	0f 85 79 ff ff ff    	jne    c0017642 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176c9:	83 c4 2c             	add    esp,0x2c
c00176cc:	5b                   	pop    ebx
c00176cd:	5e                   	pop    esi
c00176ce:	5f                   	pop    edi
c00176cf:	5d                   	pop    ebp
c00176d0:	c3                   	ret    
c00176d1:	90                   	nop

c00176d2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176d2:	55                   	push   ebp
c00176d3:	57                   	push   edi
c00176d4:	56                   	push   esi
c00176d5:	53                   	push   ebx
c00176d6:	83 ec 28             	sub    esp,0x28
c00176d9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176dd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176e1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176e5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176e9:	c1 e7 08             	shl    edi,0x8
c00176ec:	01 c7                	add    edi,eax
c00176ee:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176f2:	c1 e0 08             	shl    eax,0x8
c00176f5:	01 d0                	add    eax,edx
c00176f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176ff:	0f af c7             	imul   eax,edi
c0017702:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017709:	50                   	push   eax
c001770a:	e8 99 81 ff ff       	call   c000f8a8 <malloc>
c001770f:	83 c4 10             	add    esp,0x10
c0017712:	89 c5                	mov    ebp,eax
c0017714:	85 c0                	test   eax,eax
c0017716:	75 15                	jne    c001772d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017718:	83 ec 0c             	sub    esp,0xc
c001771b:	68 c9 bd 02 c0       	push   0xc002bdc9
c0017720:	e8 1e b7 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	e9 1c 01 00 00       	jmp    c0017849 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001772d:	be 12 00 00 00       	mov    esi,0x12
c0017732:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017736:	74 11                	je     c0017749 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017738:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001773c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017740:	c1 fe 03             	sar    esi,0x3
c0017743:	0f af f0             	imul   esi,eax
c0017746:	83 c6 12             	add    esi,0x12
c0017749:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001774d:	74 04                	je     c0017753 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001774f:	85 ff                	test   edi,edi
c0017751:	75 12                	jne    c0017765 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017753:	83 ec 0c             	sub    esp,0xc
c0017756:	68 e0 bd 02 c0       	push   0xc002bde0
c001775b:	e8 e3 b6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0017760:	e9 ce 00 00 00       	jmp    c0017833 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017765:	52                   	push   edx
c0017766:	52                   	push   edx
c0017767:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001776b:	50                   	push   eax
c001776c:	68 f5 bd 02 c0       	push   0xc002bdf5
c0017771:	e8 cd b6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0017776:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001777a:	83 c4 10             	add    esp,0x10
c001777d:	80 fa 02             	cmp    dl,0x2
c0017780:	0f 85 98 00 00 00    	jne    c001781e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017786:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001778b:	75 10                	jne    c001779d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001778d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017791:	75 0a                	jne    c001779d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017793:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017796:	83 e8 18             	sub    eax,0x18
c0017799:	a8 f7                	test   al,0xf7
c001779b:	74 0a                	je     c00177a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001779d:	83 ec 0c             	sub    esp,0xc
c00177a0:	68 02 be 02 c0       	push   0xc002be02
c00177a5:	eb 7f                	jmp    c0017826 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177c3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177c7:	75 0c                	jne    c00177d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177c9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177ce:	c1 e0 18             	shl    eax,0x18
c00177d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177d5:	41                   	inc    ecx
c00177d6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177db:	c1 e2 10             	shl    edx,0x10
c00177de:	89 d0                	mov    eax,edx
c00177e0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177e5:	c1 e2 08             	shl    edx,0x8
c00177e8:	09 c2                	or     edx,eax
c00177ea:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177ee:	09 c2                	or     edx,eax
c00177f0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177f4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177f8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177fc:	c1 f8 03             	sar    eax,0x3
c00177ff:	01 c6                	add    esi,eax
c0017801:	89 c8                	mov    eax,ecx
c0017803:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017807:	39 c7                	cmp    edi,eax
c0017809:	7f b0                	jg     c00177bb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001780b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001780f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017813:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017816:	7e 22                	jle    c001783a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017818:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001781c:	eb 99                	jmp    c00177b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001781e:	50                   	push   eax
c001781f:	50                   	push   eax
c0017820:	52                   	push   edx
c0017821:	68 10 be 02 c0       	push   0xc002be10
c0017826:	e8 18 b6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001782b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001782e:	e8 85 80 ff ff       	call   c000f8b8 <free>
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	31 ed                	xor    ebp,ebp
c0017838:	eb 0f                	jmp    c0017849 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001783a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001783e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017841:	89 38                	mov    DWORD PTR [eax],edi
c0017843:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017847:	89 08                	mov    DWORD PTR [eax],ecx
c0017849:	83 c4 1c             	add    esp,0x1c
c001784c:	89 e8                	mov    eax,ebp
c001784e:	5b                   	pop    ebx
c001784f:	5e                   	pop    esi
c0017850:	5f                   	pop    edi
c0017851:	5d                   	pop    ebp
c0017852:	c3                   	ret    
c0017853:	90                   	nop

c0017854 <Video::putTGA(int, int, unsigned char*, int)>:
c0017854:	55                   	push   ebp
c0017855:	57                   	push   edi
c0017856:	56                   	push   esi
c0017857:	53                   	push   ebx
c0017858:	83 ec 28             	sub    esp,0x28
c001785b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001785f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017863:	50                   	push   eax
c0017864:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017868:	50                   	push   eax
c0017869:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001786d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017871:	56                   	push   esi
c0017872:	e8 5b fe ff ff       	call   c00176d2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017877:	83 c4 20             	add    esp,0x20
c001787a:	85 c0                	test   eax,eax
c001787c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017880:	74 35                	je     c00178b7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017882:	89 c7                	mov    edi,eax
c0017884:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017888:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001788c:	39 d8                	cmp    eax,ebx
c001788e:	7e 27                	jle    c00178b7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017890:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017894:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017898:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001789c:	39 e8                	cmp    eax,ebp
c001789e:	7e 14                	jle    c00178b4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00178a2:	83 c7 04             	add    edi,0x4
c00178a5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178a8:	53                   	push   ebx
c00178a9:	55                   	push   ebp
c00178aa:	45                   	inc    ebp
c00178ab:	56                   	push   esi
c00178ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178af:	83 c4 10             	add    esp,0x10
c00178b2:	eb e0                	jmp    c0017894 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178b4:	43                   	inc    ebx
c00178b5:	eb cd                	jmp    c0017884 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178b7:	83 c4 1c             	add    esp,0x1c
c00178ba:	5b                   	pop    ebx
c00178bb:	5e                   	pop    esi
c00178bc:	5f                   	pop    edi
c00178bd:	5d                   	pop    ebp
c00178be:	c3                   	ret    
c00178bf:	90                   	nop

c00178c0 <ACPI::close(int, int, void*)>:
c00178c0:	83 ec 1c             	sub    esp,0x1c
c00178c3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178cb:	74 0a                	je     c00178d7 <ACPI::close(int, int, void*)+0x17>
c00178cd:	b8 00 00 00 00       	mov    eax,0x0
c00178d2:	e9 9a 00 00 00       	jmp    c0017971 <ACPI::close(int, int, void*)+0xb1>
c00178d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178dc:	75 37                	jne    c0017915 <ACPI::close(int, int, void*)+0x55>
c00178de:	83 ec 0c             	sub    esp,0xc
c00178e1:	68 6c be 02 c0       	push   0xc002be6c
c00178e6:	e8 58 b5 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	a1 28 16 03 c0       	mov    eax,ds:0xc0031628
c00178f3:	85 c0                	test   eax,eax
c00178f5:	74 07                	je     c00178fe <ACPI::close(int, int, void*)+0x3e>
c00178f7:	a1 28 16 03 c0       	mov    eax,ds:0xc0031628
c00178fc:	ff d0                	call   eax
c00178fe:	83 ec 0c             	sub    esp,0xc
c0017901:	68 e0 bf 02 c0       	push   0xc002bfe0
c0017906:	e8 02 2f 00 00       	call   c001a80d <Krnl::panic(char const*)>
c001790b:	83 c4 10             	add    esp,0x10
c001790e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017913:	eb 5c                	jmp    c0017971 <ACPI::close(int, int, void*)+0xb1>
c0017915:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001791a:	75 50                	jne    c001796c <ACPI::close(int, int, void*)+0xac>
c001791c:	a1 24 16 03 c0       	mov    eax,ds:0xc0031624
c0017921:	85 c0                	test   eax,eax
c0017923:	74 07                	je     c001792c <ACPI::close(int, int, void*)+0x6c>
c0017925:	a1 24 16 03 c0       	mov    eax,ds:0xc0031624
c001792a:	ff d0                	call   eax
c001792c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017931:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017936:	83 e0 02             	and    eax,0x2
c0017939:	74 1c                	je     c0017957 <ACPI::close(int, int, void*)+0x97>
c001793b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017946:	89 c2                	mov    edx,eax
c0017948:	ec                   	in     al,dx
c0017949:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001794d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017951:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017955:	eb da                	jmp    c0017931 <ACPI::close(int, int, void*)+0x71>
c0017957:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001795e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017963:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017967:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001796b:	ee                   	out    dx,al
c001796c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017971:	83 c4 1c             	add    esp,0x1c
c0017974:	c3                   	ret    

c0017975 <findRSDP()>:
c0017975:	83 ec 1c             	sub    esp,0x1c
c0017978:	83 ec 0c             	sub    esp,0xc
c001797b:	68 79 be 02 c0       	push   0xc002be79
c0017980:	e8 be b4 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0017985:	83 c4 10             	add    esp,0x10
c0017988:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001798d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017993:	83 e0 04             	and    eax,0x4
c0017996:	84 c0                	test   al,al
c0017998:	75 07                	jne    c00179a1 <findRSDP()+0x2c>
c001799a:	b8 00 00 00 00       	mov    eax,0x0
c001799f:	eb 6a                	jmp    c0017a0b <findRSDP()+0x96>
c00179a1:	a1 b4 ef 02 c0       	mov    eax,ds:0xc002efb4
c00179a6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179ab:	7f 1b                	jg     c00179c8 <findRSDP()+0x53>
c00179ad:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00179b2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179b8:	83 e2 fb             	and    edx,0xfffffffb
c00179bb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179c1:	b8 00 00 00 00       	mov    eax,0x0
c00179c6:	eb 43                	jmp    c0017a0b <findRSDP()+0x96>
c00179c8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179d0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179d8:	77 2c                	ja     c0017a06 <findRSDP()+0x91>
c00179da:	83 ec 04             	sub    esp,0x4
c00179dd:	6a 08                	push   0x8
c00179df:	68 87 be 02 c0       	push   0xc002be87
c00179e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179e8:	e8 7b 8c fe ff       	call   c0000668 <memcmp>
c00179ed:	83 c4 10             	add    esp,0x10
c00179f0:	85 c0                	test   eax,eax
c00179f2:	0f 94 c0             	sete   al
c00179f5:	84 c0                	test   al,al
c00179f7:	74 06                	je     c00179ff <findRSDP()+0x8a>
c00179f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179fd:	eb 0c                	jmp    c0017a0b <findRSDP()+0x96>
c00179ff:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a04:	eb ca                	jmp    c00179d0 <findRSDP()+0x5b>
c0017a06:	b8 00 00 00 00       	mov    eax,0x0
c0017a0b:	83 c4 1c             	add    esp,0x1c
c0017a0e:	c3                   	ret    

c0017a0f <loadACPITables(unsigned char*)>:
c0017a0f:	57                   	push   edi
c0017a10:	56                   	push   esi
c0017a11:	53                   	push   ebx
c0017a12:	83 ec 60             	sub    esp,0x60
c0017a15:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0017a1a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a20:	83 e0 04             	and    eax,0x4
c0017a23:	84 c0                	test   al,al
c0017a25:	0f 84 2d 02 00 00    	je     c0017c58 <loadACPITables(unsigned char*)+0x249>
c0017a2b:	a0 40 18 03 c0       	mov    al,ds:0xc0031840
c0017a30:	84 c0                	test   al,al
c0017a32:	74 75                	je     c0017aa9 <loadACPITables(unsigned char*)+0x9a>
c0017a34:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a3c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a43:	83 e8 24             	sub    eax,0x24
c0017a46:	c1 e8 03             	shr    eax,0x3
c0017a49:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a4d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017a55:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a59:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a5d:	0f 8d b2 00 00 00    	jge    c0017b15 <loadACPITables(unsigned char*)+0x106>
c0017a63:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a67:	83 c0 24             	add    eax,0x24
c0017a6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017a6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017a72:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a76:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a7a:	c1 e0 03             	shl    eax,0x3
c0017a7d:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017a81:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a85:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a8a:	89 c1                	mov    ecx,eax
c0017a8c:	a1 2c 16 03 c0       	mov    eax,ds:0xc003162c
c0017a91:	8d 50 01             	lea    edx,[eax+0x1]
c0017a94:	89 15 2c 16 03 c0    	mov    DWORD PTR ds:0xc003162c,edx
c0017a9a:	89 ca                	mov    edx,ecx
c0017a9c:	89 14 c5 44 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce9bc],edx
c0017aa3:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017aa7:	eb ac                	jmp    c0017a55 <loadACPITables(unsigned char*)+0x46>
c0017aa9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017aad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017ab1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ab8:	83 e8 24             	sub    eax,0x24
c0017abb:	c1 e8 02             	shr    eax,0x2
c0017abe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ac2:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017aca:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017ace:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017ad2:	7d 41                	jge    c0017b15 <loadACPITables(unsigned char*)+0x106>
c0017ad4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017ad8:	83 c0 24             	add    eax,0x24
c0017adb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017adf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ae3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ae7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017aeb:	c1 e0 02             	shl    eax,0x2
c0017aee:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017af2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017af6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017af8:	a1 2c 16 03 c0       	mov    eax,ds:0xc003162c
c0017afd:	8d 50 01             	lea    edx,[eax+0x1]
c0017b00:	89 15 2c 16 03 c0    	mov    DWORD PTR ds:0xc003162c,edx
c0017b06:	89 ca                	mov    edx,ecx
c0017b08:	89 14 c5 44 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce9bc],edx
c0017b0f:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b13:	eb b5                	jmp    c0017aca <loadACPITables(unsigned char*)+0xbb>
c0017b15:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b1d:	a1 2c 16 03 c0       	mov    eax,ds:0xc003162c
c0017b22:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b26:	0f 8d 2d 01 00 00    	jge    c0017c59 <loadACPITables(unsigned char*)+0x24a>
c0017b2c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b30:	8b 04 c5 44 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce9bc]
c0017b37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b3f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b47:	25 ff 0f 00 00       	and    eax,0xfff
c0017b4c:	89 c6                	mov    esi,eax
c0017b4e:	8b 1d f0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f0
c0017b54:	83 ec 0c             	sub    esp,0xc
c0017b57:	6a 01                	push   0x1
c0017b59:	e8 df 9e ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b65:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b6b:	83 ec 0c             	sub    esp,0xc
c0017b6e:	6a 01                	push   0x1
c0017b70:	6a 01                	push   0x1
c0017b72:	50                   	push   eax
c0017b73:	52                   	push   edx
c0017b74:	53                   	push   ebx
c0017b75:	e8 f0 a9 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b7a:	83 c4 20             	add    esp,0x20
c0017b7d:	09 f0                	or     eax,esi
c0017b7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b83:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b87:	c1 e0 03             	shl    eax,0x3
c0017b8a:	05 40 16 03 c0       	add    eax,0xc0031640
c0017b8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b9b:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017ba3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ba7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017baf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bb7:	89 c6                	mov    esi,eax
c0017bb9:	89 d7                	mov    edi,edx
c0017bbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bbd:	89 f8                	mov    eax,edi
c0017bbf:	89 f2                	mov    edx,esi
c0017bc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017bc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bcd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bd0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd8:	05 00 10 00 00       	add    eax,0x1000
c0017bdd:	c1 e8 0c             	shr    eax,0xc
c0017be0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017bec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf0:	25 ff 0f 00 00       	and    eax,0xfff
c0017bf5:	89 c6                	mov    esi,eax
c0017bf7:	8b 1d f0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f0
c0017bfd:	83 ec 0c             	sub    esp,0xc
c0017c00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c04:	e8 34 9e ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c10:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c16:	83 ec 0c             	sub    esp,0xc
c0017c19:	6a 01                	push   0x1
c0017c1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c1f:	50                   	push   eax
c0017c20:	52                   	push   edx
c0017c21:	53                   	push   ebx
c0017c22:	e8 43 a9 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c27:	83 c4 20             	add    esp,0x20
c0017c2a:	09 f0                	or     eax,esi
c0017c2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c34:	83 ec 0c             	sub    esp,0xc
c0017c37:	50                   	push   eax
c0017c38:	e8 c0 a2 ff ff       	call   c0011efd <Virt::freeKernelVirtualPages(unsigned long)>
c0017c3d:	83 c4 10             	add    esp,0x10
c0017c40:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c44:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c48:	89 14 c5 44 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce9bc],edx
c0017c4f:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c53:	e9 c5 fe ff ff       	jmp    c0017b1d <loadACPITables(unsigned char*)+0x10e>
c0017c58:	90                   	nop
c0017c59:	83 c4 60             	add    esp,0x60
c0017c5c:	5b                   	pop    ebx
c0017c5d:	5e                   	pop    esi
c0017c5e:	5f                   	pop    edi
c0017c5f:	c3                   	ret    

c0017c60 <findRSDT(unsigned char*)>:
c0017c60:	57                   	push   edi
c0017c61:	56                   	push   esi
c0017c62:	53                   	push   ebx
c0017c63:	83 ec 50             	sub    esp,0x50
c0017c66:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0017c6b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c71:	83 e0 04             	and    eax,0x4
c0017c74:	84 c0                	test   al,al
c0017c76:	75 0a                	jne    c0017c82 <findRSDT(unsigned char*)+0x22>
c0017c78:	b8 00 00 00 00       	mov    eax,0x0
c0017c7d:	e9 1d 01 00 00       	jmp    c0017d9f <findRSDT(unsigned char*)+0x13f>
c0017c82:	8d 44 24 04          	lea    eax,[esp+0x4]
c0017c86:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c8a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017c8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017c92:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017c9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ca2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ca6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017caa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017cae:	89 c6                	mov    esi,eax
c0017cb0:	89 d7                	mov    edi,edx
c0017cb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017cb4:	89 f8                	mov    eax,edi
c0017cb6:	89 f2                	mov    edx,esi
c0017cb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cbc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017cc0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017cc4:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017cc8:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cd8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017cdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ce0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017ce4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017ce8:	25 ff 0f 00 00       	and    eax,0xfff
c0017ced:	89 c6                	mov    esi,eax
c0017cef:	8b 1d f0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f0
c0017cf5:	83 ec 0c             	sub    esp,0xc
c0017cf8:	6a 02                	push   0x2
c0017cfa:	e8 3e 9d ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0017cff:	83 c4 10             	add    esp,0x10
c0017d02:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d06:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d0c:	83 ec 0c             	sub    esp,0xc
c0017d0f:	6a 01                	push   0x1
c0017d11:	6a 02                	push   0x2
c0017d13:	50                   	push   eax
c0017d14:	52                   	push   edx
c0017d15:	53                   	push   ebx
c0017d16:	e8 4f a8 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d1b:	83 c4 20             	add    esp,0x20
c0017d1e:	09 f0                	or     eax,esi
c0017d20:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d28:	25 ff 0f 00 00       	and    eax,0xfff
c0017d2d:	89 c6                	mov    esi,eax
c0017d2f:	8b 1d f0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f0
c0017d35:	83 ec 0c             	sub    esp,0xc
c0017d38:	6a 02                	push   0x2
c0017d3a:	e8 fe 9c ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0017d3f:	83 c4 10             	add    esp,0x10
c0017d42:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d46:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d4c:	83 ec 0c             	sub    esp,0xc
c0017d4f:	6a 01                	push   0x1
c0017d51:	6a 02                	push   0x2
c0017d53:	50                   	push   eax
c0017d54:	52                   	push   edx
c0017d55:	53                   	push   ebx
c0017d56:	e8 0f a8 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d5b:	83 c4 20             	add    esp,0x20
c0017d5e:	09 f0                	or     eax,esi
c0017d60:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d64:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d69:	75 11                	jne    c0017d7c <findRSDT(unsigned char*)+0x11c>
c0017d6b:	c6 05 40 18 03 c0 00 	mov    BYTE PTR ds:0xc0031840,0x0
c0017d72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d76:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d7a:	eb 1f                	jmp    c0017d9b <findRSDT(unsigned char*)+0x13b>
c0017d7c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017d81:	75 11                	jne    c0017d94 <findRSDT(unsigned char*)+0x134>
c0017d83:	c6 05 40 18 03 c0 01 	mov    BYTE PTR ds:0xc0031840,0x1
c0017d8a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d8e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d92:	eb 07                	jmp    c0017d9b <findRSDT(unsigned char*)+0x13b>
c0017d94:	b8 00 00 00 00       	mov    eax,0x0
c0017d99:	eb 04                	jmp    c0017d9f <findRSDT(unsigned char*)+0x13f>
c0017d9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017d9f:	83 c4 50             	add    esp,0x50
c0017da2:	5b                   	pop    ebx
c0017da3:	5e                   	pop    esi
c0017da4:	5f                   	pop    edi
c0017da5:	c3                   	ret    

c0017da6 <findDataTable(unsigned char*, char*)>:
c0017da6:	83 ec 1c             	sub    esp,0x1c
c0017da9:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0017dae:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017db4:	83 e0 04             	and    eax,0x4
c0017db7:	84 c0                	test   al,al
c0017db9:	75 07                	jne    c0017dc2 <findDataTable(unsigned char*, char*)+0x1c>
c0017dbb:	b8 00 00 00 00       	mov    eax,0x0
c0017dc0:	eb 7c                	jmp    c0017e3e <findDataTable(unsigned char*, char*)+0x98>
c0017dc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017dca:	a1 2c 16 03 c0       	mov    eax,ds:0xc003162c
c0017dcf:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017dd3:	7d 3a                	jge    c0017e0f <findDataTable(unsigned char*, char*)+0x69>
c0017dd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dd9:	c1 e0 03             	shl    eax,0x3
c0017ddc:	05 40 16 03 c0       	add    eax,0xc0031640
c0017de1:	83 ec 04             	sub    esp,0x4
c0017de4:	6a 04                	push   0x4
c0017de6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dea:	50                   	push   eax
c0017deb:	e8 78 88 fe ff       	call   c0000668 <memcmp>
c0017df0:	83 c4 10             	add    esp,0x10
c0017df3:	85 c0                	test   eax,eax
c0017df5:	0f 94 c0             	sete   al
c0017df8:	84 c0                	test   al,al
c0017dfa:	74 0d                	je     c0017e09 <findDataTable(unsigned char*, char*)+0x63>
c0017dfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e00:	8b 04 c5 44 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce9bc]
c0017e07:	eb 35                	jmp    c0017e3e <findDataTable(unsigned char*, char*)+0x98>
c0017e09:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e0d:	eb bb                	jmp    c0017dca <findDataTable(unsigned char*, char*)+0x24>
c0017e0f:	a0 40 18 03 c0       	mov    al,ds:0xc0031840
c0017e14:	84 c0                	test   al,al
c0017e16:	74 07                	je     c0017e1f <findDataTable(unsigned char*, char*)+0x79>
c0017e18:	b8 58 00 00 00       	mov    eax,0x58
c0017e1d:	eb 05                	jmp    c0017e24 <findDataTable(unsigned char*, char*)+0x7e>
c0017e1f:	b8 52 00 00 00       	mov    eax,0x52
c0017e24:	83 ec 04             	sub    esp,0x4
c0017e27:	50                   	push   eax
c0017e28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e2c:	68 04 c0 02 c0       	push   0xc002c004
c0017e31:	e8 0d b0 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0017e36:	83 c4 10             	add    esp,0x10
c0017e39:	b8 00 00 00 00       	mov    eax,0x0
c0017e3e:	83 c4 1c             	add    esp,0x1c
c0017e41:	c3                   	ret    

c0017e42 <scanMADT()>:
c0017e42:	53                   	push   ebx
c0017e43:	83 ec 38             	sub    esp,0x38
c0017e46:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0017e4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e51:	83 e0 04             	and    eax,0x4
c0017e54:	84 c0                	test   al,al
c0017e56:	0f 84 63 04 00 00    	je     c00182bf <scanMADT()+0x47d>
c0017e5c:	e8 14 fb ff ff       	call   c0017975 <findRSDP()>
c0017e61:	a3 4c 18 03 c0       	mov    ds:0xc003184c,eax
c0017e66:	a1 4c 18 03 c0       	mov    eax,ds:0xc003184c
c0017e6b:	85 c0                	test   eax,eax
c0017e6d:	75 19                	jne    c0017e88 <scanMADT()+0x46>
c0017e6f:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0017e74:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e7a:	83 e2 fb             	and    edx,0xfffffffb
c0017e7d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e83:	e9 3b 04 00 00       	jmp    c00182c3 <scanMADT()+0x481>
c0017e88:	a1 4c 18 03 c0       	mov    eax,ds:0xc003184c
c0017e8d:	83 ec 0c             	sub    esp,0xc
c0017e90:	50                   	push   eax
c0017e91:	e8 ca fd ff ff       	call   c0017c60 <findRSDT(unsigned char*)>
c0017e96:	83 c4 10             	add    esp,0x10
c0017e99:	a3 48 18 03 c0       	mov    ds:0xc0031848,eax
c0017e9e:	a1 48 18 03 c0       	mov    eax,ds:0xc0031848
c0017ea3:	85 c0                	test   eax,eax
c0017ea5:	75 19                	jne    c0017ec0 <scanMADT()+0x7e>
c0017ea7:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0017eac:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017eb2:	83 e2 fb             	and    edx,0xfffffffb
c0017eb5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ebb:	e9 03 04 00 00       	jmp    c00182c3 <scanMADT()+0x481>
c0017ec0:	a1 48 18 03 c0       	mov    eax,ds:0xc0031848
c0017ec5:	83 ec 0c             	sub    esp,0xc
c0017ec8:	50                   	push   eax
c0017ec9:	e8 41 fb ff ff       	call   c0017a0f <loadACPITables(unsigned char*)>
c0017ece:	83 c4 10             	add    esp,0x10
c0017ed1:	a1 48 18 03 c0       	mov    eax,ds:0xc0031848
c0017ed6:	83 ec 08             	sub    esp,0x8
c0017ed9:	68 90 be 02 c0       	push   0xc002be90
c0017ede:	50                   	push   eax
c0017edf:	e8 c2 fe ff ff       	call   c0017da6 <findDataTable(unsigned char*, char*)>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017eeb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ef0:	75 19                	jne    c0017f0b <scanMADT()+0xc9>
c0017ef2:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0017ef7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017efd:	83 e2 fe             	and    edx,0xfffffffe
c0017f00:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f06:	e9 b8 03 00 00       	jmp    c00182c3 <scanMADT()+0x481>
c0017f0b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f1a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f1e:	0f 87 9f 03 00 00    	ja     c00182c3 <scanMADT()+0x481>
c0017f24:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f2c:	0f 87 91 03 00 00    	ja     c00182c3 <scanMADT()+0x481>
c0017f32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f36:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f49:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f4d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f55:	8d 50 01             	lea    edx,[eax+0x1]
c0017f58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f60:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f64:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f68:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f6d:	0f 86 4f 03 00 00    	jbe    c00182c2 <scanMADT()+0x480>
c0017f73:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f78:	75 57                	jne    c0017fd1 <scanMADT()+0x18f>
c0017f7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f85:	8a 15 40 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a40
c0017f8b:	0f b6 d2             	movzx  edx,dl
c0017f8e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f92:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f96:	88 82 80 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce580],al
c0017f9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa7:	8a 15 40 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a40
c0017fad:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fb0:	88 0d 40 1a 03 c0    	mov    BYTE PTR ds:0xc0031a40,cl
c0017fb6:	0f b6 d2             	movzx  edx,dl
c0017fb9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fbd:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fc1:	88 82 60 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5a0],al
c0017fc7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fcc:	e9 da 02 00 00       	jmp    c00182ab <scanMADT()+0x469>
c0017fd1:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fd6:	0f 85 14 01 00 00    	jne    c00180f0 <scanMADT()+0x2ae>
c0017fdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fe7:	8a 15 00 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031900
c0017fed:	0f b6 d2             	movzx  edx,dl
c0017ff0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ff4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ff8:	88 82 20 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6e0],al
c0017ffe:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018002:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018006:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800a:	01 d0                	add    eax,edx
c001800c:	83 c0 2c             	add    eax,0x2c
c001800f:	8a 00                	mov    al,BYTE PTR [eax]
c0018011:	0f b6 d0             	movzx  edx,al
c0018014:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018018:	8d 48 01             	lea    ecx,[eax+0x1]
c001801b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001801f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018023:	0f b6 c0             	movzx  eax,al
c0018026:	c1 e0 08             	shl    eax,0x8
c0018029:	89 d1                	mov    ecx,edx
c001802b:	09 c1                	or     ecx,eax
c001802d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018031:	8d 50 02             	lea    edx,[eax+0x2]
c0018034:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018038:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001803c:	0f b6 c0             	movzx  eax,al
c001803f:	c1 e0 10             	shl    eax,0x10
c0018042:	09 c1                	or     ecx,eax
c0018044:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018048:	8d 50 03             	lea    edx,[eax+0x3]
c001804b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001804f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018053:	0f b6 c0             	movzx  eax,al
c0018056:	c1 e0 18             	shl    eax,0x18
c0018059:	09 c1                	or     ecx,eax
c001805b:	89 ca                	mov    edx,ecx
c001805d:	a0 00 19 03 c0       	mov    al,ds:0xc0031900
c0018062:	0f b6 c0             	movzx  eax,al
c0018065:	89 14 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],edx
c001806c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018071:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018075:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018079:	01 d0                	add    eax,edx
c001807b:	83 c0 2c             	add    eax,0x2c
c001807e:	8a 00                	mov    al,BYTE PTR [eax]
c0018080:	0f b6 d0             	movzx  edx,al
c0018083:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018087:	8d 48 01             	lea    ecx,[eax+0x1]
c001808a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001808e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018092:	0f b6 c0             	movzx  eax,al
c0018095:	c1 e0 08             	shl    eax,0x8
c0018098:	89 d1                	mov    ecx,edx
c001809a:	09 c1                	or     ecx,eax
c001809c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a0:	8d 50 02             	lea    edx,[eax+0x2]
c00180a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ab:	0f b6 c0             	movzx  eax,al
c00180ae:	c1 e0 10             	shl    eax,0x10
c00180b1:	09 c1                	or     ecx,eax
c00180b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b7:	8d 50 03             	lea    edx,[eax+0x3]
c00180ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c2:	0f b6 c0             	movzx  eax,al
c00180c5:	c1 e0 18             	shl    eax,0x18
c00180c8:	09 c1                	or     ecx,eax
c00180ca:	89 ca                	mov    edx,ecx
c00180cc:	a0 00 19 03 c0       	mov    al,ds:0xc0031900
c00180d1:	0f b6 c0             	movzx  eax,al
c00180d4:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c00180db:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180e0:	a0 00 19 03 c0       	mov    al,ds:0xc0031900
c00180e5:	40                   	inc    eax
c00180e6:	a2 00 19 03 c0       	mov    ds:0xc0031900,al
c00180eb:	e9 bb 01 00 00       	jmp    c00182ab <scanMADT()+0x469>
c00180f0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180f5:	0f 85 e9 00 00 00    	jne    c00181e4 <scanMADT()+0x3a2>
c00180fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ff:	8d 50 01             	lea    edx,[eax+0x1]
c0018102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018106:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001810a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001810e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018116:	8d 50 01             	lea    edx,[eax+0x1]
c0018119:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001811d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018121:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018125:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018129:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001812d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018131:	01 d0                	add    eax,edx
c0018133:	83 c0 2c             	add    eax,0x2c
c0018136:	8a 00                	mov    al,BYTE PTR [eax]
c0018138:	0f b6 d0             	movzx  edx,al
c001813b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018146:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001814a:	0f b6 c0             	movzx  eax,al
c001814d:	c1 e0 08             	shl    eax,0x8
c0018150:	89 d1                	mov    ecx,edx
c0018152:	09 c1                	or     ecx,eax
c0018154:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018158:	8d 50 02             	lea    edx,[eax+0x2]
c001815b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001815f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018163:	0f b6 c0             	movzx  eax,al
c0018166:	c1 e0 10             	shl    eax,0x10
c0018169:	09 c1                	or     ecx,eax
c001816b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001816f:	8d 50 03             	lea    edx,[eax+0x3]
c0018172:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018176:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001817a:	0f b6 c0             	movzx  eax,al
c001817d:	c1 e0 18             	shl    eax,0x18
c0018180:	09 c8                	or     eax,ecx
c0018182:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018186:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001818b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001818f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018193:	01 d0                	add    eax,edx
c0018195:	83 c0 2c             	add    eax,0x2c
c0018198:	8a 00                	mov    al,BYTE PTR [eax]
c001819a:	0f b6 c0             	movzx  eax,al
c001819d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181a1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181ac:	0f b6 d2             	movzx  edx,dl
c00181af:	c1 e2 08             	shl    edx,0x8
c00181b2:	09 d0                	or     eax,edx
c00181b4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181b9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181be:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181c7:	88 90 c0 e1 02 c0    	mov    BYTE PTR [eax-0x3ffd1e40],dl
c00181cd:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181d2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181d7:	66 89 84 12 e0 18 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce720],ax
c00181df:	e9 c7 00 00 00       	jmp    c00182ab <scanMADT()+0x469>
c00181e4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181e9:	0f 85 b0 00 00 00    	jne    c001829f <scanMADT()+0x45d>
c00181ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f3:	8d 50 01             	lea    edx,[eax+0x1]
c00181f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018202:	0f b6 c0             	movzx  eax,al
c0018205:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018209:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001820d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018211:	01 d0                	add    eax,edx
c0018213:	83 c0 2c             	add    eax,0x2c
c0018216:	8a 00                	mov    al,BYTE PTR [eax]
c0018218:	0f b6 d0             	movzx  edx,al
c001821b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001821f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018222:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018226:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001822a:	0f b6 c0             	movzx  eax,al
c001822d:	c1 e0 08             	shl    eax,0x8
c0018230:	09 d0                	or     eax,edx
c0018232:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018236:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001823b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001823f:	8d 50 01             	lea    edx,[eax+0x1]
c0018242:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018246:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001824a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001824e:	0f b6 c0             	movzx  eax,al
c0018251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018259:	c1 e0 08             	shl    eax,0x8
c001825c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018260:	89 c1                	mov    ecx,eax
c0018262:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018266:	c1 e0 18             	shl    eax,0x18
c0018269:	89 c3                	mov    ebx,eax
c001826b:	a1 50 18 03 c0       	mov    eax,ds:0xc0031850
c0018270:	8d 50 01             	lea    edx,[eax+0x1]
c0018273:	89 15 50 18 03 c0    	mov    DWORD PTR ds:0xc0031850,edx
c0018279:	09 d9                	or     ecx,ebx
c001827b:	89 ca                	mov    edx,ecx
c001827d:	89 14 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],edx
c0018284:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018288:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001828c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018290:	68 34 c0 02 c0       	push   0xc002c034
c0018295:	e8 a9 ab ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001829a:	83 c4 10             	add    esp,0x10
c001829d:	eb 0c                	jmp    c00182ab <scanMADT()+0x469>
c001829f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182a4:	75 05                	jne    c00182ab <scanMADT()+0x469>
c00182a6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182ab:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182b4:	01 d0                	add    eax,edx
c00182b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182ba:	e9 54 fc ff ff       	jmp    c0017f13 <scanMADT()+0xd1>
c00182bf:	90                   	nop
c00182c0:	eb 01                	jmp    c00182c3 <scanMADT()+0x481>
c00182c2:	90                   	nop
c00182c3:	83 c4 38             	add    esp,0x38
c00182c6:	5b                   	pop    ebx
c00182c7:	c3                   	ret    

c00182c8 <ACPI::ACPI()>:
c00182c8:	83 ec 0c             	sub    esp,0xc
c00182cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182cf:	83 ec 08             	sub    esp,0x8
c00182d2:	68 95 be 02 c0       	push   0xc002be95
c00182d7:	50                   	push   eax
c00182d8:	e8 77 c1 ff ff       	call   c0014454 <Device::Device(char const*)>
c00182dd:	83 c4 10             	add    esp,0x10
c00182e0:	ba d0 c0 02 c0       	mov    edx,0xc002c0d0
c00182e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e9:	89 10                	mov    DWORD PTR [eax],edx
c00182eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182fa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018308:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018316:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001831d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018321:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018328:	e8 15 fb ff ff       	call   c0017e42 <scanMADT()>
c001832d:	90                   	nop
c001832e:	83 c4 0c             	add    esp,0xc
c0018331:	c3                   	ret    

c0018332 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018332:	83 ec 2c             	sub    esp,0x2c
c0018335:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018339:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001833d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018341:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018345:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001834a:	88 d0                	mov    al,dl
c001834c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018350:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018355:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001835d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018361:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018367:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001836b:	0f 8d 97 00 00 00    	jge    c0018408 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018371:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018375:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018379:	83 c2 2a             	add    edx,0x2a
c001837c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018380:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018385:	75 78                	jne    c00183ff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018387:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001838b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001838f:	83 c2 2a             	add    edx,0x2a
c0018392:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018396:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001839a:	75 63                	jne    c00183ff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001839c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183a1:	74 3a                	je     c00183dd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183ab:	83 c2 2a             	add    edx,0x2a
c00183ae:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183b9:	39 c2                	cmp    edx,eax
c00183bb:	74 10                	je     c00183cd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183bd:	83 ec 0c             	sub    esp,0xc
c00183c0:	68 70 c0 02 c0       	push   0xc002c070
c00183c5:	e8 43 24 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00183ca:	83 c4 10             	add    esp,0x10
c00183cd:	83 ec 0c             	sub    esp,0xc
c00183d0:	68 9a be 02 c0       	push   0xc002be9a
c00183d5:	e8 33 24 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00183da:	83 c4 10             	add    esp,0x10
c00183dd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183e9:	83 c2 2a             	add    edx,0x2a
c00183ec:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183f0:	8b 02                	mov    eax,DWORD PTR [edx]
c00183f2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183f5:	89 01                	mov    DWORD PTR [ecx],eax
c00183f7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183ff:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018403:	e9 55 ff ff ff       	jmp    c001835d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018408:	90                   	nop
c0018409:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001840d:	83 c4 2c             	add    esp,0x2c
c0018410:	c2 04 00             	ret    0x4
c0018413:	90                   	nop

c0018414 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018414:	83 ec 1c             	sub    esp,0x1c
c0018417:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001841b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001841f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018423:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018428:	88 c8                	mov    al,cl
c001842a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001842e:	88 d0                	mov    al,dl
c0018430:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018438:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001843e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018442:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018445:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018449:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001844d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018451:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018457:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001845b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001845e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018462:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018471:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018475:	8d 48 01             	lea    ecx,[eax+0x1]
c0018478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001847c:	83 c2 2a             	add    edx,0x2a
c001847f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018487:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001848d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018491:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018494:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018498:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001849c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184a6:	8d 50 01             	lea    edx,[eax+0x1]
c00184a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ad:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184bd:	3d 00 02 00 00       	cmp    eax,0x200
c00184c2:	75 10                	jne    c00184d4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184c4:	83 ec 0c             	sub    esp,0xc
c00184c7:	68 a9 be 02 c0       	push   0xc002bea9
c00184cc:	e8 3c 23 00 00       	call   c001a80d <Krnl::panic(char const*)>
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	90                   	nop
c00184d5:	83 c4 1c             	add    esp,0x1c
c00184d8:	c3                   	ret    
c00184d9:	90                   	nop

c00184da <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184da:	b8 00 00 00 00       	mov    eax,0x0
c00184df:	c3                   	ret    

c00184e0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184e0:	83 ec 1c             	sub    esp,0x1c
c00184e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184e7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184ea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184ee:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00184f3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184f8:	83 ec 08             	sub    esp,0x8
c00184fb:	52                   	push   edx
c00184fc:	50                   	push   eax
c00184fd:	e8 bc 69 ff ff       	call   c000eebe <Computer::readCMOS(unsigned char)>
c0018502:	83 c4 10             	add    esp,0x10
c0018505:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018509:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001850e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018513:	83 ec 04             	sub    esp,0x4
c0018516:	6a 01                	push   0x1
c0018518:	52                   	push   edx
c0018519:	50                   	push   eax
c001851a:	e8 b5 6a ff ff       	call   c000efd4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	90                   	nop
c0018523:	83 c4 1c             	add    esp,0x1c
c0018526:	c3                   	ret    
c0018527:	90                   	nop

c0018528 <ACPI::sleep()>:
c0018528:	83 ec 0c             	sub    esp,0xc
c001852b:	a1 20 16 03 c0       	mov    eax,ds:0xc0031620
c0018530:	85 c0                	test   eax,eax
c0018532:	74 07                	je     c001853b <ACPI::sleep()+0x13>
c0018534:	a1 20 16 03 c0       	mov    eax,ds:0xc0031620
c0018539:	ff d0                	call   eax
c001853b:	90                   	nop
c001853c:	83 c4 0c             	add    esp,0xc
c001853f:	c3                   	ret    

c0018540 <ACPI::open(int, int, void*)>:
c0018540:	57                   	push   edi
c0018541:	56                   	push   esi
c0018542:	53                   	push   ebx
c0018543:	83 ec 60             	sub    esp,0x60
c0018546:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001854a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018551:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018555:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001855c:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0018561:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018567:	83 e0 04             	and    eax,0x4
c001856a:	84 c0                	test   al,al
c001856c:	74 47                	je     c00185b5 <ACPI::open(int, int, void*)+0x75>
c001856e:	a1 48 18 03 c0       	mov    eax,ds:0xc0031848
c0018573:	83 ec 08             	sub    esp,0x8
c0018576:	68 c6 be 02 c0       	push   0xc002bec6
c001857b:	50                   	push   eax
c001857c:	e8 25 f8 ff ff       	call   c0017da6 <findDataTable(unsigned char*, char*)>
c0018581:	83 c4 10             	add    esp,0x10
c0018584:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0018588:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c001858d:	74 26                	je     c00185b5 <ACPI::open(int, int, void*)+0x75>
c001858f:	83 ec 0c             	sub    esp,0xc
c0018592:	68 cb be 02 c0       	push   0xc002becb
c0018597:	e8 a7 a8 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001859c:	83 c4 10             	add    esp,0x10
c001859f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185a3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185ae:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185b5:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c00185bd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00185c1:	8a 00                	mov    al,BYTE PTR [eax]
c00185c3:	3c 01                	cmp    al,0x1
c00185c5:	75 28                	jne    c00185ef <ACPI::open(int, int, void*)+0xaf>
c00185c7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185cb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185d2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185d6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185dd:	83 ec 0c             	sub    esp,0xc
c00185e0:	68 dc be 02 c0       	push   0xc002bedc
c00185e5:	e8 59 a8 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00185ea:	83 c4 10             	add    esp,0x10
c00185ed:	eb 25                	jmp    c0018614 <ACPI::open(int, int, void*)+0xd4>
c00185ef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00185f3:	8a 00                	mov    al,BYTE PTR [eax]
c00185f5:	3c 02                	cmp    al,0x2
c00185f7:	75 1b                	jne    c0018614 <ACPI::open(int, int, void*)+0xd4>
c00185f9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185fd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018604:	83 ec 0c             	sub    esp,0xc
c0018607:	68 e4 be 02 c0       	push   0xc002bee4
c001860c:	e8 32 a8 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0018611:	83 c4 10             	add    esp,0x10
c0018614:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018618:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001861e:	83 f0 01             	xor    eax,0x1
c0018621:	84 c0                	test   al,al
c0018623:	74 6a                	je     c001868f <ACPI::open(int, int, void*)+0x14f>
c0018625:	83 ec 0c             	sub    esp,0xc
c0018628:	68 ec be 02 c0       	push   0xc002beec
c001862d:	e8 11 a8 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0018632:	83 c4 10             	add    esp,0x10
c0018635:	e8 16 7b fe ff       	call   c0000150 <manualPCIProbe>
c001863a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001863e:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c0018643:	75 28                	jne    c001866d <ACPI::open(int, int, void*)+0x12d>
c0018645:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018649:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018650:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018654:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001865b:	83 ec 0c             	sub    esp,0xc
c001865e:	68 fa be 02 c0       	push   0xc002befa
c0018663:	e8 db a7 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	eb 22                	jmp    c001868f <ACPI::open(int, int, void*)+0x14f>
c001866d:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c0018672:	75 1b                	jne    c001868f <ACPI::open(int, int, void*)+0x14f>
c0018674:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018678:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001867f:	83 ec 0c             	sub    esp,0xc
c0018682:	68 04 bf 02 c0       	push   0xc002bf04
c0018687:	e8 b7 a7 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001868c:	83 c4 10             	add    esp,0x10
c001868f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018693:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018699:	84 c0                	test   al,al
c001869b:	74 13                	je     c00186b0 <ACPI::open(int, int, void*)+0x170>
c001869d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186a1:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00186a7:	83 f0 01             	xor    eax,0x1
c00186aa:	0f b6 c0             	movzx  eax,al
c00186ad:	40                   	inc    eax
c00186ae:	eb 05                	jmp    c00186b5 <ACPI::open(int, int, void*)+0x175>
c00186b0:	b8 00 00 00 00       	mov    eax,0x0
c00186b5:	83 ec 08             	sub    esp,0x8
c00186b8:	50                   	push   eax
c00186b9:	68 0e bf 02 c0       	push   0xc002bf0e
c00186be:	e8 80 a7 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186ca:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186d0:	84 c0                	test   al,al
c00186d2:	74 67                	je     c001873b <ACPI::open(int, int, void*)+0x1fb>
c00186d4:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c00186dc:	83 ec 0c             	sub    esp,0xc
c00186df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00186e3:	e8 c0 71 ff ff       	call   c000f8a8 <malloc>
c00186e8:	83 c4 10             	add    esp,0x10
c00186eb:	89 c3                	mov    ebx,eax
c00186ed:	83 ec 0c             	sub    esp,0xc
c00186f0:	53                   	push   ebx
c00186f1:	e8 46 aa 00 00       	call   c002313c <PCI::PCI()>
c00186f6:	83 c4 10             	add    esp,0x10
c00186f9:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c00186fd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018701:	83 ec 08             	sub    esp,0x8
c0018704:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0018708:	50                   	push   eax
c0018709:	e8 56 bb ff ff       	call   c0014264 <Device::addChild(Device*)>
c001870e:	83 c4 10             	add    esp,0x10
c0018711:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018715:	8b 00                	mov    eax,DWORD PTR [eax]
c0018717:	83 c0 08             	add    eax,0x8
c001871a:	8b 00                	mov    eax,DWORD PTR [eax]
c001871c:	6a 00                	push   0x0
c001871e:	6a 00                	push   0x0
c0018720:	6a 00                	push   0x0
c0018722:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018726:	ff d0                	call   eax
c0018728:	83 c4 10             	add    esp,0x10
c001872b:	83 ec 0c             	sub    esp,0xc
c001872e:	68 17 bf 02 c0       	push   0xc002bf17
c0018733:	e8 0b a7 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0018738:	83 c4 10             	add    esp,0x10
c001873b:	83 ec 0c             	sub    esp,0xc
c001873e:	68 22 bf 02 c0       	push   0xc002bf22
c0018743:	e8 fe 49 00 00       	call   c001d146 <Thr::loadKernelSymbolTable(char const*)>
c0018748:	83 c4 10             	add    esp,0x10
c001874b:	83 ec 0c             	sub    esp,0xc
c001874e:	6a 0c                	push   0xc
c0018750:	e8 27 95 ff ff       	call   c0011c7c <Virt::setupPageSwapping(int)>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	8d 44 24 28          	lea    eax,[esp+0x28]
c001875c:	83 ec 08             	sub    esp,0x8
c001875f:	6a 12                	push   0x12
c0018761:	50                   	push   eax
c0018762:	e8 6d be ff ff       	call   c00145d4 <getDevicesOfType(DeviceType)>
c0018767:	83 c4 0c             	add    esp,0xc
c001876a:	83 ec 0c             	sub    esp,0xc
c001876d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018771:	50                   	push   eax
c0018772:	e8 e9 0d 01 00       	call   c0029560 <LinkedList<Device>::isEmpty()>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	83 f0 01             	xor    eax,0x1
c001877d:	84 c0                	test   al,al
c001877f:	0f 84 fd 00 00 00    	je     c0018882 <ACPI::open(int, int, void*)+0x342>
c0018785:	83 ec 0c             	sub    esp,0xc
c0018788:	8d 44 24 34          	lea    eax,[esp+0x34]
c001878c:	50                   	push   eax
c001878d:	e8 ea 0d 01 00       	call   c002957c <LinkedList<Device>::getFirstElement()>
c0018792:	83 c4 10             	add    esp,0x10
c0018795:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018799:	83 ec 0c             	sub    esp,0xc
c001879c:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187a0:	50                   	push   eax
c00187a1:	e8 de 0d 01 00       	call   c0029584 <LinkedList<Device>::removeFirst()>
c00187a6:	83 c4 10             	add    esp,0x10
c00187a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00187ad:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00187b1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00187b5:	83 ec 0c             	sub    esp,0xc
c00187b8:	50                   	push   eax
c00187b9:	e8 92 bd ff ff       	call   c0014550 <Device::getName()>
c00187be:	83 c4 10             	add    esp,0x10
c00187c1:	83 ec 08             	sub    esp,0x8
c00187c4:	50                   	push   eax
c00187c5:	68 a0 c0 02 c0       	push   0xc002c0a0
c00187ca:	e8 74 a6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00187cf:	83 c4 10             	add    esp,0x10
c00187d2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00187d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00187da:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00187e0:	ba 09 00 00 00       	mov    edx,0x9
c00187e5:	fc                   	cld    
c00187e6:	89 c7                	mov    edi,eax
c00187e8:	89 de                	mov    esi,ebx
c00187ea:	89 d1                	mov    ecx,edx
c00187ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00187ee:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00187f2:	0f b6 c0             	movzx  eax,al
c00187f5:	83 ec 08             	sub    esp,0x8
c00187f8:	50                   	push   eax
c00187f9:	68 40 bf 02 c0       	push   0xc002bf40
c00187fe:	e8 40 a6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0018803:	83 c4 10             	add    esp,0x10
c0018806:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001880a:	0f b6 c0             	movzx  eax,al
c001880d:	83 ec 08             	sub    esp,0x8
c0018810:	50                   	push   eax
c0018811:	68 52 bf 02 c0       	push   0xc002bf52
c0018816:	e8 28 a6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0018823:	0f b7 c0             	movzx  eax,ax
c0018826:	83 ec 08             	sub    esp,0x8
c0018829:	50                   	push   eax
c001882a:	68 64 bf 02 c0       	push   0xc002bf64
c001882f:	e8 0f a6 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0018834:	83 c4 10             	add    esp,0x10
c0018837:	83 ec 0c             	sub    esp,0xc
c001883a:	83 ec 24             	sub    esp,0x24
c001883d:	89 e0                	mov    eax,esp
c001883f:	89 c3                	mov    ebx,eax
c0018841:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018845:	ba 09 00 00 00       	mov    edx,0x9
c001884a:	89 df                	mov    edi,ebx
c001884c:	89 c6                	mov    esi,eax
c001884e:	89 d1                	mov    ecx,edx
c0018850:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018852:	e8 47 ac 00 00       	call   c002349e <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c0018857:	83 c4 30             	add    esp,0x30
c001885a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001885e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018863:	0f 84 01 ff ff ff    	je     c001876a <ACPI::open(int, int, void*)+0x22a>
c0018869:	83 ec 08             	sub    esp,0x8
c001886c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018870:	68 76 bf 02 c0       	push   0xc002bf76
c0018875:	e8 c9 a5 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001887a:	83 c4 10             	add    esp,0x10
c001887d:	e9 e8 fe ff ff       	jmp    c001876a <ACPI::open(int, int, void*)+0x22a>
c0018882:	83 ec 0c             	sub    esp,0xc
c0018885:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018889:	50                   	push   eax
c001888a:	e8 cf 0c 01 00       	call   c002955e <LinkedList<Device>::~LinkedList()>
c001888f:	83 c4 10             	add    esp,0x10
c0018892:	8b 1d 68 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef68
c0018898:	83 ec 08             	sub    esp,0x8
c001889b:	6a 01                	push   0x1
c001889d:	68 82 bf 02 c0       	push   0xc002bf82
c00188a2:	e8 16 53 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	83 ec 08             	sub    esp,0x8
c00188ad:	53                   	push   ebx
c00188ae:	50                   	push   eax
c00188af:	e8 34 55 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c00188b4:	83 c4 10             	add    esp,0x10
c00188b7:	8b 1d 68 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef68
c00188bd:	83 ec 08             	sub    esp,0x8
c00188c0:	6a 01                	push   0x1
c00188c2:	68 9f bf 02 c0       	push   0xc002bf9f
c00188c7:	e8 f1 52 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c00188cc:	83 c4 10             	add    esp,0x10
c00188cf:	83 ec 08             	sub    esp,0x8
c00188d2:	53                   	push   ebx
c00188d3:	50                   	push   eax
c00188d4:	e8 0f 55 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c00188d9:	83 c4 10             	add    esp,0x10
c00188dc:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00188e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00188e7:	83 e0 04             	and    eax,0x4
c00188ea:	84 c0                	test   al,al
c00188ec:	0f 84 d3 00 00 00    	je     c00189c5 <ACPI::open(int, int, void*)+0x485>
c00188f2:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c00188fa:	83 ec 0c             	sub    esp,0xc
c00188fd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018901:	e8 a2 6f ff ff       	call   c000f8a8 <malloc>
c0018906:	83 c4 10             	add    esp,0x10
c0018909:	89 c3                	mov    ebx,eax
c001890b:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c0018910:	83 ec 04             	sub    esp,0x4
c0018913:	50                   	push   eax
c0018914:	68 bc bf 02 c0       	push   0xc002bfbc
c0018919:	53                   	push   ebx
c001891a:	e8 83 aa ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0018926:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001892b:	74 17                	je     c0018944 <ACPI::open(int, int, void*)+0x404>
c001892d:	83 ec 0c             	sub    esp,0xc
c0018930:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018934:	e8 3b ad ff ff       	call   c0013674 <File::exists()>
c0018939:	83 c4 10             	add    esp,0x10
c001893c:	84 c0                	test   al,al
c001893e:	74 04                	je     c0018944 <ACPI::open(int, int, void*)+0x404>
c0018940:	b0 01                	mov    al,0x1
c0018942:	eb 02                	jmp    c0018946 <ACPI::open(int, int, void*)+0x406>
c0018944:	b0 00                	mov    al,0x0
c0018946:	84 c0                	test   al,al
c0018948:	74 22                	je     c001896c <ACPI::open(int, int, void*)+0x42c>
c001894a:	83 ec 08             	sub    esp,0x8
c001894d:	6a 01                	push   0x1
c001894f:	68 bc bf 02 c0       	push   0xc002bfbc
c0018954:	e8 64 52 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c0018959:	83 c4 10             	add    esp,0x10
c001895c:	83 ec 08             	sub    esp,0x8
c001895f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0018963:	50                   	push   eax
c0018964:	e8 7f 54 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c0018969:	83 c4 10             	add    esp,0x10
c001896c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018971:	74 1e                	je     c0018991 <ACPI::open(int, int, void*)+0x451>
c0018973:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018978:	74 17                	je     c0018991 <ACPI::open(int, int, void*)+0x451>
c001897a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001897e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018980:	83 c0 08             	add    eax,0x8
c0018983:	8b 00                	mov    eax,DWORD PTR [eax]
c0018985:	83 ec 0c             	sub    esp,0xc
c0018988:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001898c:	ff d0                	call   eax
c001898e:	83 c4 10             	add    esp,0x10
c0018991:	a1 48 18 03 c0       	mov    eax,ds:0xc0031848
c0018996:	83 ec 08             	sub    esp,0x8
c0018999:	68 d9 bf 02 c0       	push   0xc002bfd9
c001899e:	50                   	push   eax
c001899f:	e8 02 f4 ff ff       	call   c0017da6 <findDataTable(unsigned char*, char*)>
c00189a4:	83 c4 10             	add    esp,0x10
c00189a7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00189ab:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00189b0:	74 13                	je     c00189c5 <ACPI::open(int, int, void*)+0x485>
c00189b2:	83 ec 08             	sub    esp,0x8
c00189b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00189b9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00189bd:	e8 1e fb ff ff       	call   c00184e0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00189c2:	83 c4 10             	add    esp,0x10
c00189c5:	b8 00 00 00 00       	mov    eax,0x0
c00189ca:	83 c4 60             	add    esp,0x60
c00189cd:	5b                   	pop    ebx
c00189ce:	5e                   	pop    esi
c00189cf:	5f                   	pop    edi
c00189d0:	c3                   	ret    
c00189d1:	90                   	nop

c00189d2 <CPU::close(int, int, void*)>:
c00189d2:	31 c0                	xor    eax,eax
c00189d4:	c3                   	ret    
c00189d5:	90                   	nop

c00189d6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00189d6:	55                   	push   ebp
c00189d7:	57                   	push   edi
c00189d8:	56                   	push   esi
c00189d9:	53                   	push   ebx
c00189da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00189de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189e2:	89 ce                	mov    esi,ecx
c00189e4:	89 d5                	mov    ebp,edx
c00189e6:	80 f9 04             	cmp    cl,0x4
c00189e9:	75 28                	jne    c0018a13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00189eb:	8d 42 f9             	lea    eax,[edx-0x7]
c00189ee:	3c 03                	cmp    al,0x3
c00189f0:	0f 86 63 01 00 00    	jbe    c0018b59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00189f6:	80 fa 03             	cmp    dl,0x3
c00189f9:	0f 84 5a 01 00 00    	je     c0018b59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00189ff:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a02:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018a07:	89 fb                	mov    ebx,edi
c0018a09:	80 fb 01             	cmp    bl,0x1
c0018a0c:	77 4e                	ja     c0018a5c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a0e:	e9 52 01 00 00       	jmp    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a13:	80 f9 05             	cmp    cl,0x5
c0018a16:	75 4d                	jne    c0018a65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a18:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018a1d:	80 fa 03             	cmp    dl,0x3
c0018a20:	0f 86 3f 01 00 00    	jbe    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a26:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a29:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018a2e:	89 fb                	mov    ebx,edi
c0018a30:	80 fb 01             	cmp    bl,0x1
c0018a33:	0f 86 2c 01 00 00    	jbe    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a39:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018a3e:	80 fa 08             	cmp    dl,0x8
c0018a41:	0f 84 1e 01 00 00    	je     c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a47:	89 d7                	mov    edi,edx
c0018a49:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018a4e:	83 e7 fb             	and    edi,0xfffffffb
c0018a51:	89 fb                	mov    ebx,edi
c0018a53:	80 fb 09             	cmp    bl,0x9
c0018a56:	0f 84 09 01 00 00    	je     c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a5c:	31 c0                	xor    eax,eax
c0018a5e:	89 eb                	mov    ebx,ebp
c0018a60:	0f b6 fb             	movzx  edi,bl
c0018a63:	eb 30                	jmp    c0018a95 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018a65:	31 c0                	xor    eax,eax
c0018a67:	80 f9 06             	cmp    cl,0x6
c0018a6a:	75 f2                	jne    c0018a5e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a6c:	80 fa 0a             	cmp    dl,0xa
c0018a6f:	77 ed                	ja     c0018a5e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a71:	bf de 05 00 00       	mov    edi,0x5de
c0018a76:	0f a3 d7             	bt     edi,edx
c0018a79:	73 e3                	jae    c0018a5e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a7b:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018a80:	e9 e0 00 00 00       	jmp    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a85:	39 c7                	cmp    edi,eax
c0018a87:	0f 84 d3 00 00 00    	je     c0018b60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018a8d:	40                   	inc    eax
c0018a8e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018a93:	74 09                	je     c0018a9e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018a95:	89 f3                	mov    ebx,esi
c0018a97:	80 fb 0f             	cmp    bl,0xf
c0018a9a:	75 f1                	jne    c0018a8d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018a9c:	eb e7                	jmp    c0018a85 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018a9e:	80 f9 10             	cmp    cl,0x10
c0018aa1:	75 14                	jne    c0018ab7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018aa3:	8d 42 fc             	lea    eax,[edx-0x4]
c0018aa6:	83 e0 fb             	and    eax,0xfffffffb
c0018aa9:	3c 02                	cmp    al,0x2
c0018aab:	76 34                	jbe    c0018ae1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018aad:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018ab2:	80 fa 02             	cmp    dl,0x2
c0018ab5:	eb 24                	jmp    c0018adb <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018ab7:	80 f9 11             	cmp    cl,0x11
c0018aba:	75 13                	jne    c0018acf <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018abc:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018ac1:	80 fa 03             	cmp    dl,0x3
c0018ac4:	0f 85 9b 00 00 00    	jne    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aca:	e9 91 00 00 00       	jmp    c0018b60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018acf:	80 f9 12             	cmp    cl,0x12
c0018ad2:	75 14                	jne    c0018ae8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018ad4:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018ad9:	fe ca                	dec    dl
c0018adb:	0f 85 84 00 00 00    	jne    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ae1:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018ae6:	eb 7d                	jmp    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ae8:	80 f9 14             	cmp    cl,0x14
c0018aeb:	75 12                	jne    c0018aff <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018aed:	4a                   	dec    edx
c0018aee:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018af3:	80 fa 01             	cmp    dl,0x1
c0018af6:	77 6d                	ja     c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018af8:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018afd:	eb 66                	jmp    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aff:	80 f9 15             	cmp    cl,0x15
c0018b02:	75 31                	jne    c0018b35 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b04:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018b09:	80 fa 01             	cmp    dl,0x1
c0018b0c:	74 57                	je     c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b0e:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018b13:	80 fa 13             	cmp    dl,0x13
c0018b16:	76 0c                	jbe    c0018b24 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b18:	80 fa 30             	cmp    dl,0x30
c0018b1b:	75 48                	jne    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b1d:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018b22:	eb 41                	jmp    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b24:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b29:	0f a3 d1             	bt     ecx,edx
c0018b2c:	73 37                	jae    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b2e:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018b33:	eb 30                	jmp    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b35:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018b3a:	80 f9 16             	cmp    cl,0x16
c0018b3d:	75 26                	jne    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b3f:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018b44:	84 d2                	test   dl,dl
c0018b46:	74 1d                	je     c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b48:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018b4d:	80 fa 30             	cmp    dl,0x30
c0018b50:	75 13                	jne    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b52:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018b57:	eb 0c                	jmp    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b59:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018b5e:	eb 05                	jmp    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b60:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018b65:	5b                   	pop    ebx
c0018b66:	5e                   	pop    esi
c0018b67:	5f                   	pop    edi
c0018b68:	5d                   	pop    ebp
c0018b69:	c3                   	ret    

c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018b6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b72:	80 f9 04             	cmp    cl,0x4
c0018b75:	75 6b                	jne    c0018be2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018b77:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018b7c:	80 fa 01             	cmp    dl,0x1
c0018b7f:	0f 86 92 02 00 00    	jbe    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b85:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018b8a:	80 fa 02             	cmp    dl,0x2
c0018b8d:	0f 84 84 02 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b93:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018b98:	80 fa 03             	cmp    dl,0x3
c0018b9b:	0f 84 76 02 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba1:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018ba6:	80 fa 04             	cmp    dl,0x4
c0018ba9:	0f 84 68 02 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018baf:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018bb4:	80 fa 05             	cmp    dl,0x5
c0018bb7:	0f 84 5a 02 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbd:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018bc2:	80 fa 07             	cmp    dl,0x7
c0018bc5:	0f 84 4c 02 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcb:	83 ea 08             	sub    edx,0x8
c0018bce:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018bd3:	80 fa 01             	cmp    dl,0x1
c0018bd6:	0f 87 3b 02 00 00    	ja     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdc:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018be1:	c3                   	ret    
c0018be2:	80 f9 05             	cmp    cl,0x5
c0018be5:	75 45                	jne    c0018c2c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018be7:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018bea:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018bef:	80 f9 02             	cmp    cl,0x2
c0018bf2:	0f 86 1f 02 00 00    	jbe    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf8:	80 fa 04             	cmp    dl,0x4
c0018bfb:	0f 84 f3 01 00 00    	je     c0018df4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c01:	80 fa 07             	cmp    dl,0x7
c0018c04:	0f 84 0d 02 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0a:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018c0f:	80 fa 08             	cmp    dl,0x8
c0018c12:	0f 84 ff 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c18:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018c1d:	80 fa 09             	cmp    dl,0x9
c0018c20:	0f 85 f1 01 00 00    	jne    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c26:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018c2b:	c3                   	ret    
c0018c2c:	80 f9 06             	cmp    cl,0x6
c0018c2f:	0f 85 85 01 00 00    	jne    c0018dba <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c35:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018c3a:	80 fa 01             	cmp    dl,0x1
c0018c3d:	0f 84 d4 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c43:	8d 42 fb             	lea    eax,[edx-0x5]
c0018c46:	3c 01                	cmp    al,0x1
c0018c48:	0f 86 ac 01 00 00    	jbe    c0018dfa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c4e:	80 fa 03             	cmp    dl,0x3
c0018c51:	0f 84 a3 01 00 00    	je     c0018dfa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c57:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018c5a:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018c5f:	80 f9 01             	cmp    cl,0x1
c0018c62:	0f 86 af 01 00 00    	jbe    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c68:	80 fa 09             	cmp    dl,0x9
c0018c6b:	0f 84 8f 01 00 00    	je     c0018e00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018c71:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018c74:	80 f9 01             	cmp    cl,0x1
c0018c77:	0f 86 9a 01 00 00    	jbe    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c7d:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018c82:	80 fa 0d             	cmp    dl,0xd
c0018c85:	0f 84 8c 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c8b:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018c90:	80 fa 0e             	cmp    dl,0xe
c0018c93:	0f 84 7e 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c99:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018c9e:	80 fa 0f             	cmp    dl,0xf
c0018ca1:	0f 84 70 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca7:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018cac:	80 fa 15             	cmp    dl,0x15
c0018caf:	0f 84 62 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cb5:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018cb8:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018cbd:	80 f9 01             	cmp    cl,0x1
c0018cc0:	0f 86 51 01 00 00    	jbe    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cc6:	80 fa 1a             	cmp    dl,0x1a
c0018cc9:	0f 84 37 01 00 00    	je     c0018e06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018ccf:	80 fa 1c             	cmp    dl,0x1c
c0018cd2:	0f 84 34 01 00 00    	je     c0018e0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018cd8:	80 fa 1d             	cmp    dl,0x1d
c0018cdb:	0f 84 36 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce1:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018ce6:	80 fa 25             	cmp    dl,0x25
c0018ce9:	0f 84 28 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cef:	8d 4a da             	lea    ecx,[edx-0x26]
c0018cf2:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018cf7:	80 f9 01             	cmp    cl,0x1
c0018cfa:	0f 86 17 01 00 00    	jbe    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d00:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018d05:	80 fa 2a             	cmp    dl,0x2a
c0018d08:	0f 84 09 01 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d0e:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018d13:	80 fa 2c             	cmp    dl,0x2c
c0018d16:	0f 84 fb 00 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d1c:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018d21:	80 fa 2d             	cmp    dl,0x2d
c0018d24:	0f 84 ed 00 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d2a:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018d2f:	80 fa 2e             	cmp    dl,0x2e
c0018d32:	0f 84 df 00 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d38:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018d3d:	80 fa 2f             	cmp    dl,0x2f
c0018d40:	0f 84 d1 00 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d46:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018d49:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018d4e:	80 f9 01             	cmp    cl,0x1
c0018d51:	0f 86 c0 00 00 00    	jbe    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d57:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018d5c:	80 fa 37             	cmp    dl,0x37
c0018d5f:	0f 84 b2 00 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d65:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018d6a:	80 fa 3a             	cmp    dl,0x3a
c0018d6d:	0f 84 a4 00 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d73:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018d78:	80 fa 3c             	cmp    dl,0x3c
c0018d7b:	0f 84 96 00 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d81:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018d86:	80 fa 3d             	cmp    dl,0x3d
c0018d89:	0f 84 88 00 00 00    	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d8f:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018d94:	80 fa 3e             	cmp    dl,0x3e
c0018d97:	74 7e                	je     c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d99:	8d 42 bb             	lea    eax,[edx-0x45]
c0018d9c:	3c 01                	cmp    al,0x1
c0018d9e:	76 72                	jbe    c0018e12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018da0:	80 fa 3f             	cmp    dl,0x3f
c0018da3:	74 6d                	je     c0018e12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018da5:	80 fa 4a             	cmp    dl,0x4a
c0018da8:	74 0a                	je     c0018db4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018daa:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018daf:	80 fa 4d             	cmp    dl,0x4d
c0018db2:	75 63                	jne    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db4:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018db9:	c3                   	ret    
c0018dba:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018dbf:	80 f9 0b             	cmp    cl,0xb
c0018dc2:	75 0a                	jne    c0018dce <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018dc4:	fe ca                	dec    dl
c0018dc6:	75 4f                	jne    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc8:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018dcd:	c3                   	ret    
c0018dce:	80 f9 0f             	cmp    cl,0xf
c0018dd1:	75 44                	jne    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dd3:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018dd8:	80 fa 02             	cmp    dl,0x2
c0018ddb:	76 3a                	jbe    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ddd:	8d 42 fd             	lea    eax,[edx-0x3]
c0018de0:	3c 01                	cmp    al,0x1
c0018de2:	76 0a                	jbe    c0018dee <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018de4:	b8 e6 c3 02 c0       	mov    eax,0xc002c3e6
c0018de9:	80 fa 06             	cmp    dl,0x6
c0018dec:	75 29                	jne    c0018e17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dee:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018df3:	c3                   	ret    
c0018df4:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018df9:	c3                   	ret    
c0018dfa:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018dff:	c3                   	ret    
c0018e00:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018e05:	c3                   	ret    
c0018e06:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018e0b:	c3                   	ret    
c0018e0c:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018e11:	c3                   	ret    
c0018e12:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018e17:	c3                   	ret    

c0018e18 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e18:	60                   	pusha  
c0018e19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e25:	9c                   	pushf  
c0018e26:	fa                   	cli    
c0018e27:	0f 09                	wbinvd 
c0018e29:	0f 30                	wrmsr  
c0018e2b:	9d                   	popf   
c0018e2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e30:	89 02                	mov    DWORD PTR [edx],eax
c0018e32:	61                   	popa   
c0018e33:	c3                   	ret    

c0018e34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e34:	60                   	pusha  
c0018e35:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e39:	9c                   	pushf  
c0018e3a:	fa                   	cli    
c0018e3b:	0f 09                	wbinvd 
c0018e3d:	31 c0                	xor    eax,eax
c0018e3f:	31 d2                	xor    edx,edx
c0018e41:	0f 32                	rdmsr  
c0018e43:	9d                   	popf   
c0018e44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018e48:	89 02                	mov    DWORD PTR [edx],eax
c0018e4a:	61                   	popa   
c0018e4b:	c3                   	ret    

c0018e4c <CPU::AMD_K6_writeback(int, int, int)>:
c0018e4c:	56                   	push   esi
c0018e4d:	53                   	push   ebx
c0018e4e:	83 ec 10             	sub    esp,0x10
c0018e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e55:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018e5a:	75 5d                	jne    c0018eb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e5c:	83 f8 08             	cmp    eax,0x8
c0018e5f:	75 09                	jne    c0018e6a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018e61:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018e66:	7e 13                	jle    c0018e7b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018e68:	eb 30                	jmp    c0018e9a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018e6a:	83 f8 06             	cmp    eax,0x6
c0018e6d:	7c 4a                	jl     c0018eb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e6f:	83 f8 07             	cmp    eax,0x7
c0018e72:	7e 07                	jle    c0018e7b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018e74:	83 f8 09             	cmp    eax,0x9
c0018e77:	74 21                	je     c0018e9a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018e79:	eb 3e                	jmp    c0018eb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e7b:	89 e6                	mov    esi,esp
c0018e7d:	8b 1d a8 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efa8
c0018e83:	56                   	push   esi
c0018e84:	c1 eb 15             	shr    ebx,0x15
c0018e87:	68 82 00 00 c0       	push   0xc0000082
c0018e8c:	83 e3 7e             	and    ebx,0x7e
c0018e8f:	e8 a0 ff ff ff       	call   c0018e34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018e94:	56                   	push   esi
c0018e95:	6a 00                	push   0x0
c0018e97:	53                   	push   ebx
c0018e98:	eb 12                	jmp    c0018eac <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018e9a:	89 e3                	mov    ebx,esp
c0018e9c:	53                   	push   ebx
c0018e9d:	68 82 00 00 c0       	push   0xc0000082
c0018ea2:	e8 8d ff ff ff       	call   c0018e34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ea7:	53                   	push   ebx
c0018ea8:	6a 00                	push   0x0
c0018eaa:	6a 00                	push   0x0
c0018eac:	68 82 00 00 c0       	push   0xc0000082
c0018eb1:	e8 62 ff ff ff       	call   c0018e18 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018eb6:	83 c4 18             	add    esp,0x18
c0018eb9:	83 c4 10             	add    esp,0x10
c0018ebc:	5b                   	pop    ebx
c0018ebd:	5e                   	pop    esi
c0018ebe:	c3                   	ret    
c0018ebf:	90                   	nop

c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ec0:	55                   	push   ebp
c0018ec1:	57                   	push   edi
c0018ec2:	56                   	push   esi
c0018ec3:	53                   	push   ebx
c0018ec4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ec8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ecc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ed0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ed4:	39 05 80 e4 02 c0    	cmp    DWORD PTR ds:0xc002e480,eax
c0018eda:	75 23                	jne    c0018eff <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018edc:	a1 ac 1a 03 c0       	mov    eax,ds:0xc0031aac
c0018ee1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ee5:	89 06                	mov    DWORD PTR [esi],eax
c0018ee7:	a1 a8 1a 03 c0       	mov    eax,ds:0xc0031aa8
c0018eec:	89 07                	mov    DWORD PTR [edi],eax
c0018eee:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c0018ef3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ef6:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0018efb:	89 02                	mov    DWORD PTR [edx],eax
c0018efd:	eb 3f                	jmp    c0018f3e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018eff:	31 c9                	xor    ecx,ecx
c0018f01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f05:	0f a2                	cpuid  
c0018f07:	89 06                	mov    DWORD PTR [esi],eax
c0018f09:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f0f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f12:	89 10                	mov    DWORD PTR [eax],edx
c0018f14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f18:	a3 80 e4 02 c0       	mov    ds:0xc002e480,eax
c0018f1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f1f:	a3 ac 1a 03 c0       	mov    ds:0xc0031aac,eax
c0018f24:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f26:	a3 a8 1a 03 c0       	mov    ds:0xc0031aa8,eax
c0018f2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f2e:	a3 a4 1a 03 c0       	mov    ds:0xc0031aa4,eax
c0018f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f37:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f39:	a3 a0 1a 03 c0       	mov    ds:0xc0031aa0,eax
c0018f3e:	5b                   	pop    ebx
c0018f3f:	5e                   	pop    esi
c0018f40:	5f                   	pop    edi
c0018f41:	5d                   	pop    ebp
c0018f42:	c3                   	ret    
c0018f43:	90                   	nop

c0018f44 <CPU::cpuidCheckEDX(unsigned int)>:
c0018f44:	83 ec 10             	sub    esp,0x10
c0018f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f4b:	50                   	push   eax
c0018f4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f50:	50                   	push   eax
c0018f51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f55:	50                   	push   eax
c0018f56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f5a:	50                   	push   eax
c0018f5b:	6a 01                	push   0x1
c0018f5d:	e8 5e ff ff ff       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f66:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018f6a:	0f 95 c0             	setne  al
c0018f6d:	83 c4 24             	add    esp,0x24
c0018f70:	c3                   	ret    
c0018f71:	90                   	nop

c0018f72 <CPU::cpuidCheckECX(unsigned int)>:
c0018f72:	83 ec 10             	sub    esp,0x10
c0018f75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f79:	50                   	push   eax
c0018f7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f7e:	50                   	push   eax
c0018f7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f83:	50                   	push   eax
c0018f84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f88:	50                   	push   eax
c0018f89:	6a 01                	push   0x1
c0018f8b:	e8 30 ff ff ff       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f94:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018f98:	0f 95 c0             	setne  al
c0018f9b:	83 c4 24             	add    esp,0x24
c0018f9e:	c3                   	ret    
c0018f9f:	90                   	nop

c0018fa0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018fa0:	83 ec 10             	sub    esp,0x10
c0018fa3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fa7:	50                   	push   eax
c0018fa8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fac:	50                   	push   eax
c0018fad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb1:	50                   	push   eax
c0018fb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb6:	50                   	push   eax
c0018fb7:	6a 07                	push   0x7
c0018fb9:	e8 02 ff ff ff       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fc2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018fc6:	0f 95 c0             	setne  al
c0018fc9:	83 c4 24             	add    esp,0x24
c0018fcc:	c3                   	ret    
c0018fcd:	90                   	nop

c0018fce <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018fce:	83 ec 10             	sub    esp,0x10
c0018fd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fd5:	50                   	push   eax
c0018fd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fda:	50                   	push   eax
c0018fdb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fdf:	50                   	push   eax
c0018fe0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe4:	50                   	push   eax
c0018fe5:	6a 07                	push   0x7
c0018fe7:	e8 d4 fe ff ff       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ff0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ff4:	0f 95 c0             	setne  al
c0018ff7:	83 c4 24             	add    esp,0x24
c0018ffa:	c3                   	ret    
c0018ffb:	90                   	nop

c0018ffc <CPU::CPU()>:
c0018ffc:	83 ec 0c             	sub    esp,0xc
c0018fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019003:	83 ec 08             	sub    esp,0x8
c0019006:	68 e6 c3 02 c0       	push   0xc002c3e6
c001900b:	50                   	push   eax
c001900c:	e8 43 b4 ff ff       	call   c0014454 <Device::Device(char const*)>
c0019011:	83 c4 10             	add    esp,0x10
c0019014:	ba c0 c4 02 c0       	mov    edx,0xc002c4c0
c0019019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001901d:	89 10                	mov    DWORD PTR [eax],edx
c001901f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019023:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001902d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019031:	05 78 01 00 00       	add    eax,0x178
c0019036:	83 ec 0c             	sub    esp,0xc
c0019039:	50                   	push   eax
c001903a:	e8 7f 60 ff ff       	call   c000f0be <GDT::GDT()>
c001903f:	83 c4 10             	add    esp,0x10
c0019042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019046:	05 7c 09 00 00       	add    eax,0x97c
c001904b:	83 ec 0c             	sub    esp,0xc
c001904e:	50                   	push   eax
c001904f:	e8 d4 62 ff ff       	call   c000f328 <IDT::IDT()>
c0019054:	83 c4 10             	add    esp,0x10
c0019057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001905b:	05 7c 11 00 00       	add    eax,0x117c
c0019060:	83 ec 0c             	sub    esp,0xc
c0019063:	50                   	push   eax
c0019064:	e8 05 83 ff ff       	call   c001136e <TSS::TSS()>
c0019069:	83 c4 10             	add    esp,0x10
c001906c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019070:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019085:	90                   	nop
c0019086:	83 c4 0c             	add    esp,0xc
c0019089:	c3                   	ret    

c001908a <CPU::displayFeatures()>:
c001908a:	53                   	push   ebx
c001908b:	83 ec 10             	sub    esp,0x10
c001908e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019092:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019098:	68 f4 c0 02 c0       	push   0xc002c0f4
c001909d:	e8 a1 9d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00190a2:	59                   	pop    ecx
c00190a3:	58                   	pop    eax
c00190a4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00190aa:	50                   	push   eax
c00190ab:	68 05 c1 02 c0       	push   0xc002c105
c00190b0:	e8 8e 9d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00190b5:	58                   	pop    eax
c00190b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190bc:	5a                   	pop    edx
c00190bd:	c1 e8 0e             	shr    eax,0xe
c00190c0:	0f b6 c0             	movzx  eax,al
c00190c3:	50                   	push   eax
c00190c4:	68 16 c1 02 c0       	push   0xc002c116
c00190c9:	e8 75 9d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00190ce:	59                   	pop    ecx
c00190cf:	58                   	pop    eax
c00190d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190d6:	66 c1 e8 06          	shr    ax,0x6
c00190da:	0f b6 c0             	movzx  eax,al
c00190dd:	50                   	push   eax
c00190de:	68 27 c1 02 c0       	push   0xc002c127
c00190e3:	e8 5b 9d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00190e8:	c7 04 24 d4 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5d4
c00190ef:	e8 4f 9d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00190f4:	83 c4 10             	add    esp,0x10
c00190f7:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c00190fc:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0019103:	74 05                	je     c001910a <CPU::displayFeatures()+0x80>
c0019105:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c001910a:	52                   	push   edx
c001910b:	52                   	push   edx
c001910c:	50                   	push   eax
c001910d:	68 38 c1 02 c0       	push   0xc002c138
c0019112:	e8 2c 9d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c001911f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019126:	78 05                	js     c001912d <CPU::displayFeatures()+0xa3>
c0019128:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c001912d:	51                   	push   ecx
c001912e:	51                   	push   ecx
c001912f:	50                   	push   eax
c0019130:	68 4f c1 02 c0       	push   0xc002c14f
c0019135:	e8 09 9d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001913a:	83 c4 10             	add    esp,0x10
c001913d:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c0019142:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019149:	75 05                	jne    c0019150 <CPU::displayFeatures()+0xc6>
c001914b:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c0019150:	52                   	push   edx
c0019151:	52                   	push   edx
c0019152:	50                   	push   eax
c0019153:	68 66 c1 02 c0       	push   0xc002c166
c0019158:	e8 e6 9c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001915d:	83 c4 10             	add    esp,0x10
c0019160:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c0019165:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001916c:	75 05                	jne    c0019173 <CPU::displayFeatures()+0xe9>
c001916e:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c0019173:	51                   	push   ecx
c0019174:	51                   	push   ecx
c0019175:	50                   	push   eax
c0019176:	68 7d c1 02 c0       	push   0xc002c17d
c001917b:	e8 c3 9c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0019180:	83 c4 10             	add    esp,0x10
c0019183:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c0019188:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001918f:	75 05                	jne    c0019196 <CPU::displayFeatures()+0x10c>
c0019191:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c0019196:	52                   	push   edx
c0019197:	52                   	push   edx
c0019198:	50                   	push   eax
c0019199:	68 94 c1 02 c0       	push   0xc002c194
c001919e:	e8 a0 9c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00191a3:	83 c4 10             	add    esp,0x10
c00191a6:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c00191ab:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00191b2:	75 05                	jne    c00191b9 <CPU::displayFeatures()+0x12f>
c00191b4:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c00191b9:	51                   	push   ecx
c00191ba:	51                   	push   ecx
c00191bb:	50                   	push   eax
c00191bc:	68 ab c1 02 c0       	push   0xc002c1ab
c00191c1:	e8 7d 9c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c00191ce:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00191d5:	75 05                	jne    c00191dc <CPU::displayFeatures()+0x152>
c00191d7:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c00191dc:	52                   	push   edx
c00191dd:	52                   	push   edx
c00191de:	50                   	push   eax
c00191df:	68 c2 c1 02 c0       	push   0xc002c1c2
c00191e4:	e8 5a 9c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00191e9:	83 c4 10             	add    esp,0x10
c00191ec:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c00191f1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00191f8:	75 05                	jne    c00191ff <CPU::displayFeatures()+0x175>
c00191fa:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c00191ff:	51                   	push   ecx
c0019200:	51                   	push   ecx
c0019201:	50                   	push   eax
c0019202:	68 d9 c1 02 c0       	push   0xc002c1d9
c0019207:	e8 37 9c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c0019214:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001921b:	75 05                	jne    c0019222 <CPU::displayFeatures()+0x198>
c001921d:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c0019222:	52                   	push   edx
c0019223:	52                   	push   edx
c0019224:	50                   	push   eax
c0019225:	68 f0 c1 02 c0       	push   0xc002c1f0
c001922a:	e8 14 9c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001922f:	83 c4 10             	add    esp,0x10
c0019232:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c0019237:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001923e:	75 05                	jne    c0019245 <CPU::displayFeatures()+0x1bb>
c0019240:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c0019245:	51                   	push   ecx
c0019246:	51                   	push   ecx
c0019247:	50                   	push   eax
c0019248:	68 07 c2 02 c0       	push   0xc002c207
c001924d:	e8 f1 9b ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c001925a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019261:	75 05                	jne    c0019268 <CPU::displayFeatures()+0x1de>
c0019263:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c0019268:	52                   	push   edx
c0019269:	52                   	push   edx
c001926a:	50                   	push   eax
c001926b:	68 1e c2 02 c0       	push   0xc002c21e
c0019270:	e8 ce 9b ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0019275:	83 c4 10             	add    esp,0x10
c0019278:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c001927d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019284:	75 05                	jne    c001928b <CPU::displayFeatures()+0x201>
c0019286:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c001928b:	51                   	push   ecx
c001928c:	51                   	push   ecx
c001928d:	50                   	push   eax
c001928e:	68 35 c2 02 c0       	push   0xc002c235
c0019293:	e8 ab 9b ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0019298:	83 c4 10             	add    esp,0x10
c001929b:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c00192a0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00192a7:	75 05                	jne    c00192ae <CPU::displayFeatures()+0x224>
c00192a9:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c00192ae:	52                   	push   edx
c00192af:	52                   	push   edx
c00192b0:	50                   	push   eax
c00192b1:	68 4c c2 02 c0       	push   0xc002c24c
c00192b6:	e8 88 9b ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00192bb:	83 c4 10             	add    esp,0x10
c00192be:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c00192c3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00192ca:	78 05                	js     c00192d1 <CPU::displayFeatures()+0x247>
c00192cc:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c00192d1:	51                   	push   ecx
c00192d2:	51                   	push   ecx
c00192d3:	50                   	push   eax
c00192d4:	68 63 c2 02 c0       	push   0xc002c263
c00192d9:	e8 65 9b ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00192de:	83 c4 10             	add    esp,0x10
c00192e1:	b8 32 aa 02 c0       	mov    eax,0xc002aa32
c00192e6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00192ed:	75 05                	jne    c00192f4 <CPU::displayFeatures()+0x26a>
c00192ef:	b8 36 aa 02 c0       	mov    eax,0xc002aa36
c00192f4:	52                   	push   edx
c00192f5:	52                   	push   edx
c00192f6:	50                   	push   eax
c00192f7:	68 7a c2 02 c0       	push   0xc002c27a
c00192fc:	e8 42 9b ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0019301:	83 c4 18             	add    esp,0x18
c0019304:	5b                   	pop    ebx
c0019305:	c3                   	ret    

c0019306 <CPU::detectFeatures()>:
c0019306:	55                   	push   ebp
c0019307:	57                   	push   edi
c0019308:	56                   	push   esi
c0019309:	53                   	push   ebx
c001930a:	83 ec 40             	sub    esp,0x40
c001930d:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0019311:	81 a5 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebp+0x1190],0xfff80700
c001931b:	c6 85 94 11 00 00 01 	mov    BYTE PTR [ebp+0x1194],0x1
c0019322:	8d 9d 5f 01 00 00    	lea    ebx,[ebp+0x15f]
c0019328:	6a 0d                	push   0xd
c001932a:	6a 00                	push   0x0
c001932c:	53                   	push   ebx
c001932d:	e8 3a 74 fe ff       	call   c000076c <memset>
c0019332:	83 c4 10             	add    esp,0x10
c0019335:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001933a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019341:	0f 84 11 09 00 00    	je     c0019c58 <CPU::detectFeatures()+0x952>
c0019347:	83 ec 0c             	sub    esp,0xc
c001934a:	89 df                	mov    edi,ebx
c001934c:	6a 10                	push   0x10
c001934e:	e8 f1 fb ff ff       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c0019353:	83 e0 01             	and    eax,0x1
c0019356:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019359:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c001935f:	83 e0 fd             	and    eax,0xfffffffd
c0019362:	09 c8                	or     eax,ecx
c0019364:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c001936a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019371:	e8 ce fb ff ff       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c0019376:	83 e0 01             	and    eax,0x1
c0019379:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019380:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c0019386:	83 e0 fb             	and    eax,0xfffffffb
c0019389:	09 c8                	or     eax,ecx
c001938b:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019391:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019398:	e8 a7 fb ff ff       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c001939d:	83 e0 01             	and    eax,0x1
c00193a0:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00193a7:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193ad:	83 e0 f7             	and    eax,0xfffffff7
c00193b0:	09 c8                	or     eax,ecx
c00193b2:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193b8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00193bf:	e8 80 fb ff ff       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c00193c4:	83 e0 01             	and    eax,0x1
c00193c7:	c1 e0 04             	shl    eax,0x4
c00193ca:	88 c1                	mov    cl,al
c00193cc:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193d2:	83 e0 ef             	and    eax,0xffffffef
c00193d5:	09 c8                	or     eax,ecx
c00193d7:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193dd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00193e4:	e8 5b fb ff ff       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c00193e9:	83 e0 01             	and    eax,0x1
c00193ec:	c1 e0 05             	shl    eax,0x5
c00193ef:	88 c1                	mov    cl,al
c00193f1:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193f7:	83 e0 df             	and    eax,0xffffffdf
c00193fa:	09 c8                	or     eax,ecx
c00193fc:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019402:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019409:	e8 36 fb ff ff       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c001940e:	83 e0 01             	and    eax,0x1
c0019411:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019414:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c001941a:	83 e0 fd             	and    eax,0xfffffffd
c001941d:	09 c8                	or     eax,ecx
c001941f:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019425:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001942c:	e8 13 fb ff ff       	call   c0018f44 <CPU::cpuidCheckEDX(unsigned int)>
c0019431:	83 e0 01             	and    eax,0x1
c0019434:	c1 e0 06             	shl    eax,0x6
c0019437:	88 c1                	mov    cl,al
c0019439:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c001943f:	83 e0 bf             	and    eax,0xffffffbf
c0019442:	09 c8                	or     eax,ecx
c0019444:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c001944a:	58                   	pop    eax
c001944b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001944f:	50                   	push   eax
c0019450:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019454:	50                   	push   eax
c0019455:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019459:	56                   	push   esi
c001945a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001945e:	50                   	push   eax
c001945f:	6a 00                	push   0x0
c0019461:	e8 5a fa ff ff       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019466:	b9 04 00 00 00       	mov    ecx,0x4
c001946b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001946d:	8d bd 63 01 00 00    	lea    edi,[ebp+0x163]
c0019473:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019477:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019479:	8d bd 67 01 00 00    	lea    edi,[ebp+0x167]
c001947f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019483:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019485:	83 c4 18             	add    esp,0x18
c0019488:	68 91 c2 02 c0       	push   0xc002c291
c001948d:	53                   	push   ebx
c001948e:	e8 21 74 fe ff       	call   c00008b4 <strcmp>
c0019493:	83 c4 10             	add    esp,0x10
c0019496:	85 c0                	test   eax,eax
c0019498:	75 0f                	jne    c00194a9 <CPU::detectFeatures()+0x1a3>
c001949a:	c7 85 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebp+0x158],0x2
c00194a4:	e9 22 02 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c00194a9:	50                   	push   eax
c00194aa:	50                   	push   eax
c00194ab:	68 9e c2 02 c0       	push   0xc002c29e
c00194b0:	53                   	push   ebx
c00194b1:	e8 fe 73 fe ff       	call   c00008b4 <strcmp>
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	85 c0                	test   eax,eax
c00194bb:	74 dd                	je     c001949a <CPU::detectFeatures()+0x194>
c00194bd:	50                   	push   eax
c00194be:	50                   	push   eax
c00194bf:	68 ab c2 02 c0       	push   0xc002c2ab
c00194c4:	53                   	push   ebx
c00194c5:	e8 ea 73 fe ff       	call   c00008b4 <strcmp>
c00194ca:	83 c4 10             	add    esp,0x10
c00194cd:	85 c0                	test   eax,eax
c00194cf:	74 2a                	je     c00194fb <CPU::detectFeatures()+0x1f5>
c00194d1:	50                   	push   eax
c00194d2:	50                   	push   eax
c00194d3:	68 b8 c2 02 c0       	push   0xc002c2b8
c00194d8:	53                   	push   ebx
c00194d9:	e8 d6 73 fe ff       	call   c00008b4 <strcmp>
c00194de:	83 c4 10             	add    esp,0x10
c00194e1:	85 c0                	test   eax,eax
c00194e3:	74 16                	je     c00194fb <CPU::detectFeatures()+0x1f5>
c00194e5:	50                   	push   eax
c00194e6:	50                   	push   eax
c00194e7:	68 c5 c2 02 c0       	push   0xc002c2c5
c00194ec:	53                   	push   ebx
c00194ed:	e8 c2 73 fe ff       	call   c00008b4 <strcmp>
c00194f2:	83 c4 10             	add    esp,0x10
c00194f5:	85 c0                	test   eax,eax
c00194f7:	74 48                	je     c0019541 <CPU::detectFeatures()+0x23b>
c00194f9:	eb 0f                	jmp    c001950a <CPU::detectFeatures()+0x204>
c00194fb:	c7 85 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebp+0x158],0x4
c0019505:	e9 c1 01 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c001950a:	50                   	push   eax
c001950b:	50                   	push   eax
c001950c:	68 d2 c2 02 c0       	push   0xc002c2d2
c0019511:	53                   	push   ebx
c0019512:	e8 9d 73 fe ff       	call   c00008b4 <strcmp>
c0019517:	83 c4 10             	add    esp,0x10
c001951a:	85 c0                	test   eax,eax
c001951c:	74 23                	je     c0019541 <CPU::detectFeatures()+0x23b>
c001951e:	57                   	push   edi
c001951f:	57                   	push   edi
c0019520:	68 df c2 02 c0       	push   0xc002c2df
c0019525:	53                   	push   ebx
c0019526:	e8 89 73 fe ff       	call   c00008b4 <strcmp>
c001952b:	83 c4 10             	add    esp,0x10
c001952e:	85 c0                	test   eax,eax
c0019530:	75 1e                	jne    c0019550 <CPU::detectFeatures()+0x24a>
c0019532:	c7 85 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebp+0x158],0x1
c001953c:	e9 8a 01 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c0019541:	c7 85 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebp+0x158],0x5
c001954b:	e9 7b 01 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c0019550:	56                   	push   esi
c0019551:	56                   	push   esi
c0019552:	68 ec c2 02 c0       	push   0xc002c2ec
c0019557:	53                   	push   ebx
c0019558:	e8 57 73 fe ff       	call   c00008b4 <strcmp>
c001955d:	83 c4 10             	add    esp,0x10
c0019560:	85 c0                	test   eax,eax
c0019562:	75 0f                	jne    c0019573 <CPU::detectFeatures()+0x26d>
c0019564:	c7 85 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebp+0x158],0x3
c001956e:	e9 58 01 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c0019573:	51                   	push   ecx
c0019574:	51                   	push   ecx
c0019575:	68 ab c2 02 c0       	push   0xc002c2ab
c001957a:	53                   	push   ebx
c001957b:	e8 34 73 fe ff       	call   c00008b4 <strcmp>
c0019580:	83 c4 10             	add    esp,0x10
c0019583:	85 c0                	test   eax,eax
c0019585:	75 0f                	jne    c0019596 <CPU::detectFeatures()+0x290>
c0019587:	c7 85 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebp+0x158],0x6
c0019591:	e9 35 01 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c0019596:	52                   	push   edx
c0019597:	52                   	push   edx
c0019598:	68 f9 c2 02 c0       	push   0xc002c2f9
c001959d:	53                   	push   ebx
c001959e:	e8 11 73 fe ff       	call   c00008b4 <strcmp>
c00195a3:	83 c4 10             	add    esp,0x10
c00195a6:	85 c0                	test   eax,eax
c00195a8:	75 0f                	jne    c00195b9 <CPU::detectFeatures()+0x2b3>
c00195aa:	c7 85 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebp+0x158],0x7
c00195b4:	e9 12 01 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c00195b9:	50                   	push   eax
c00195ba:	50                   	push   eax
c00195bb:	68 06 c3 02 c0       	push   0xc002c306
c00195c0:	53                   	push   ebx
c00195c1:	e8 ee 72 fe ff       	call   c00008b4 <strcmp>
c00195c6:	83 c4 10             	add    esp,0x10
c00195c9:	85 c0                	test   eax,eax
c00195cb:	75 0f                	jne    c00195dc <CPU::detectFeatures()+0x2d6>
c00195cd:	c7 85 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebp+0x158],0x8
c00195d7:	e9 ef 00 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c00195dc:	50                   	push   eax
c00195dd:	50                   	push   eax
c00195de:	68 13 c3 02 c0       	push   0xc002c313
c00195e3:	53                   	push   ebx
c00195e4:	e8 cb 72 fe ff       	call   c00008b4 <strcmp>
c00195e9:	83 c4 10             	add    esp,0x10
c00195ec:	85 c0                	test   eax,eax
c00195ee:	75 0f                	jne    c00195ff <CPU::detectFeatures()+0x2f9>
c00195f0:	c7 85 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebp+0x158],0x9
c00195fa:	e9 cc 00 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c00195ff:	50                   	push   eax
c0019600:	50                   	push   eax
c0019601:	68 20 c3 02 c0       	push   0xc002c320
c0019606:	53                   	push   ebx
c0019607:	e8 a8 72 fe ff       	call   c00008b4 <strcmp>
c001960c:	83 c4 10             	add    esp,0x10
c001960f:	85 c0                	test   eax,eax
c0019611:	75 0f                	jne    c0019622 <CPU::detectFeatures()+0x31c>
c0019613:	c7 85 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebp+0x158],0xa
c001961d:	e9 a9 00 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c0019622:	50                   	push   eax
c0019623:	50                   	push   eax
c0019624:	68 2d c3 02 c0       	push   0xc002c32d
c0019629:	53                   	push   ebx
c001962a:	e8 85 72 fe ff       	call   c00008b4 <strcmp>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	85 c0                	test   eax,eax
c0019634:	75 0f                	jne    c0019645 <CPU::detectFeatures()+0x33f>
c0019636:	c7 85 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebp+0x158],0xb
c0019640:	e9 86 00 00 00       	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c0019645:	50                   	push   eax
c0019646:	50                   	push   eax
c0019647:	68 3a c3 02 c0       	push   0xc002c33a
c001964c:	53                   	push   ebx
c001964d:	e8 62 72 fe ff       	call   c00008b4 <strcmp>
c0019652:	83 c4 10             	add    esp,0x10
c0019655:	85 c0                	test   eax,eax
c0019657:	75 0c                	jne    c0019665 <CPU::detectFeatures()+0x35f>
c0019659:	c7 85 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebp+0x158],0xc
c0019663:	eb 66                	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c0019665:	50                   	push   eax
c0019666:	50                   	push   eax
c0019667:	68 47 c3 02 c0       	push   0xc002c347
c001966c:	53                   	push   ebx
c001966d:	e8 42 72 fe ff       	call   c00008b4 <strcmp>
c0019672:	83 c4 10             	add    esp,0x10
c0019675:	85 c0                	test   eax,eax
c0019677:	75 0c                	jne    c0019685 <CPU::detectFeatures()+0x37f>
c0019679:	c7 85 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebp+0x158],0xd
c0019683:	eb 46                	jmp    c00196cb <CPU::detectFeatures()+0x3c5>
c0019685:	57                   	push   edi
c0019686:	57                   	push   edi
c0019687:	68 54 c3 02 c0       	push   0xc002c354
c001968c:	53                   	push   ebx
c001968d:	e8 22 72 fe ff       	call   c00008b4 <strcmp>
c0019692:	83 c4 10             	add    esp,0x10
c0019695:	85 c0                	test   eax,eax
c0019697:	74 e0                	je     c0019679 <CPU::detectFeatures()+0x373>
c0019699:	56                   	push   esi
c001969a:	56                   	push   esi
c001969b:	68 61 c3 02 c0       	push   0xc002c361
c00196a0:	53                   	push   ebx
c00196a1:	e8 0e 72 fe ff       	call   c00008b4 <strcmp>
c00196a6:	83 c4 10             	add    esp,0x10
c00196a9:	85 c0                	test   eax,eax
c00196ab:	74 cc                	je     c0019679 <CPU::detectFeatures()+0x373>
c00196ad:	51                   	push   ecx
c00196ae:	51                   	push   ecx
c00196af:	68 6e c3 02 c0       	push   0xc002c36e
c00196b4:	53                   	push   ebx
c00196b5:	e8 fa 71 fe ff       	call   c00008b4 <strcmp>
c00196ba:	83 c4 10             	add    esp,0x10
c00196bd:	85 c0                	test   eax,eax
c00196bf:	74 b8                	je     c0019679 <CPU::detectFeatures()+0x373>
c00196c1:	c7 85 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x158],0x0
c00196cb:	83 3c 24 06          	cmp    DWORD PTR [esp],0x6
c00196cf:	0f 86 be 00 00 00    	jbe    c0019793 <CPU::detectFeatures()+0x48d>
c00196d5:	83 ec 0c             	sub    esp,0xc
c00196d8:	68 80 00 00 00       	push   0x80
c00196dd:	e8 be f8 ff ff       	call   c0018fa0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00196e2:	83 e0 01             	and    eax,0x1
c00196e5:	c1 e0 06             	shl    eax,0x6
c00196e8:	88 c1                	mov    cl,al
c00196ea:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00196f0:	83 e0 bf             	and    eax,0xffffffbf
c00196f3:	09 c8                	or     eax,ecx
c00196f5:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00196fb:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019702:	e8 99 f8 ff ff       	call   c0018fa0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019707:	83 e0 01             	and    eax,0x1
c001970a:	c1 e0 04             	shl    eax,0x4
c001970d:	88 c1                	mov    cl,al
c001970f:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c0019715:	83 e0 ef             	and    eax,0xffffffef
c0019718:	09 c8                	or     eax,ecx
c001971a:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c0019720:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019727:	e8 74 f8 ff ff       	call   c0018fa0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001972c:	c1 e0 07             	shl    eax,0x7
c001972f:	88 c1                	mov    cl,al
c0019731:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c0019737:	83 e0 7f             	and    eax,0x7f
c001973a:	09 c8                	or     eax,ecx
c001973c:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019742:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019749:	e8 80 f8 ff ff       	call   c0018fce <CPU::cpuidCheckExtendedECX(unsigned int)>
c001974e:	83 e0 01             	and    eax,0x1
c0019751:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019758:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c001975e:	83 e0 f7             	and    eax,0xfffffff7
c0019761:	09 c8                	or     eax,ecx
c0019763:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c0019769:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019770:	e8 59 f8 ff ff       	call   c0018fce <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019775:	83 c4 10             	add    esp,0x10
c0019778:	83 e0 01             	and    eax,0x1
c001977b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019782:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019788:	83 e0 fb             	and    eax,0xfffffffb
c001978b:	09 c8                	or     eax,ecx
c001978d:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019793:	83 ec 0c             	sub    esp,0xc
c0019796:	8d 44 24 18          	lea    eax,[esp+0x18]
c001979a:	50                   	push   eax
c001979b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001979f:	50                   	push   eax
c00197a0:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00197a4:	57                   	push   edi
c00197a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00197a9:	50                   	push   eax
c00197aa:	6a 01                	push   0x1
c00197ac:	e8 0f f7 ff ff       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197b5:	8a 85 5c 01 00 00    	mov    al,BYTE PTR [ebp+0x15c]
c00197bb:	88 d9                	mov    cl,bl
c00197bd:	83 e0 f0             	and    eax,0xfffffff0
c00197c0:	83 e1 0f             	and    ecx,0xf
c00197c3:	83 c4 20             	add    esp,0x20
c00197c6:	09 c8                	or     eax,ecx
c00197c8:	88 d9                	mov    cl,bl
c00197ca:	88 85 5c 01 00 00    	mov    BYTE PTR [ebp+0x15c],al
c00197d0:	c0 e9 04             	shr    cl,0x4
c00197d3:	0f b6 c1             	movzx  eax,cl
c00197d6:	c1 e0 06             	shl    eax,0x6
c00197d9:	89 c6                	mov    esi,eax
c00197db:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c00197e1:	66 25 3f c0          	and    ax,0xc03f
c00197e5:	09 f0                	or     eax,esi
c00197e7:	66 89 85 5c 01 00 00 	mov    WORD PTR [ebp+0x15c],ax
c00197ee:	89 d8                	mov    eax,ebx
c00197f0:	8a 95 5d 01 00 00    	mov    dl,BYTE PTR [ebp+0x15d]
c00197f6:	c1 e8 08             	shr    eax,0x8
c00197f9:	83 e2 3f             	and    edx,0x3f
c00197fc:	83 e0 0f             	and    eax,0xf
c00197ff:	89 c6                	mov    esi,eax
c0019801:	c1 e6 06             	shl    esi,0x6
c0019804:	09 d6                	or     esi,edx
c0019806:	89 f2                	mov    edx,esi
c0019808:	88 95 5d 01 00 00    	mov    BYTE PTR [ebp+0x15d],dl
c001980e:	88 c2                	mov    dl,al
c0019810:	c0 ea 02             	shr    dl,0x2
c0019813:	89 d6                	mov    esi,edx
c0019815:	8a 95 5e 01 00 00    	mov    dl,BYTE PTR [ebp+0x15e]
c001981b:	83 e2 c0             	and    edx,0xffffffc0
c001981e:	09 d6                	or     esi,edx
c0019820:	89 f2                	mov    edx,esi
c0019822:	89 de                	mov    esi,ebx
c0019824:	88 95 5e 01 00 00    	mov    BYTE PTR [ebp+0x15e],dl
c001982a:	c1 ee 0c             	shr    esi,0xc
c001982d:	8a 95 5c 01 00 00    	mov    dl,BYTE PTR [ebp+0x15c]
c0019833:	83 e6 03             	and    esi,0x3
c0019836:	83 e2 cf             	and    edx,0xffffffcf
c0019839:	c1 e6 04             	shl    esi,0x4
c001983c:	09 d6                	or     esi,edx
c001983e:	3c 06                	cmp    al,0x6
c0019840:	89 f2                	mov    edx,esi
c0019842:	88 95 5c 01 00 00    	mov    BYTE PTR [ebp+0x15c],dl
c0019848:	74 04                	je     c001984e <CPU::detectFeatures()+0x548>
c001984a:	3c 0f                	cmp    al,0xf
c001984c:	75 58                	jne    c00198a6 <CPU::detectFeatures()+0x5a0>
c001984e:	89 de                	mov    esi,ebx
c0019850:	c1 ee 10             	shr    esi,0x10
c0019853:	c1 e6 04             	shl    esi,0x4
c0019856:	09 f1                	or     ecx,esi
c0019858:	8b b5 5c 01 00 00    	mov    esi,DWORD PTR [ebp+0x15c]
c001985e:	0f b6 c9             	movzx  ecx,cl
c0019861:	66 81 e6 3f c0       	and    si,0xc03f
c0019866:	c1 e1 06             	shl    ecx,0x6
c0019869:	09 f1                	or     ecx,esi
c001986b:	3c 0f                	cmp    al,0xf
c001986d:	66 89 8d 5c 01 00 00 	mov    WORD PTR [ebp+0x15c],cx
c0019874:	75 30                	jne    c00198a6 <CPU::detectFeatures()+0x5a0>
c0019876:	8a 85 5d 01 00 00    	mov    al,BYTE PTR [ebp+0x15d]
c001987c:	c1 eb 14             	shr    ebx,0x14
c001987f:	83 e0 3f             	and    eax,0x3f
c0019882:	83 c3 0f             	add    ebx,0xf
c0019885:	88 d9                	mov    cl,bl
c0019887:	c0 eb 02             	shr    bl,0x2
c001988a:	c1 e1 06             	shl    ecx,0x6
c001988d:	09 c8                	or     eax,ecx
c001988f:	88 85 5d 01 00 00    	mov    BYTE PTR [ebp+0x15d],al
c0019895:	8a 85 5e 01 00 00    	mov    al,BYTE PTR [ebp+0x15e]
c001989b:	83 e0 c0             	and    eax,0xffffffc0
c001989e:	09 c3                	or     ebx,eax
c00198a0:	88 9d 5e 01 00 00    	mov    BYTE PTR [ebp+0x15e],bl
c00198a6:	83 ec 0c             	sub    esp,0xc
c00198a9:	80 8d 91 11 00 00 07 	or     BYTE PTR [ebp+0x1191],0x7
c00198b0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198b4:	50                   	push   eax
c00198b5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00198b9:	56                   	push   esi
c00198ba:	57                   	push   edi
c00198bb:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00198bf:	53                   	push   ebx
c00198c0:	68 00 00 00 80       	push   0x80000000
c00198c5:	e8 f6 f5 ff ff       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198ca:	83 c4 20             	add    esp,0x20
c00198cd:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00198d4:	76 22                	jbe    c00198f8 <CPU::detectFeatures()+0x5f2>
c00198d6:	83 ec 0c             	sub    esp,0xc
c00198d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198dd:	50                   	push   eax
c00198de:	56                   	push   esi
c00198df:	57                   	push   edi
c00198e0:	53                   	push   ebx
c00198e1:	68 01 00 00 80       	push   0x80000001
c00198e6:	e8 d5 f5 ff ff       	call   c0018ec0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198eb:	81 a5 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebp+0x1190],0xfffe5fff
c00198f5:	83 c4 20             	add    esp,0x20
c00198f8:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c00198fe:	83 f8 01             	cmp    eax,0x1
c0019901:	75 6f                	jne    c0019972 <CPU::detectFeatures()+0x66c>
c0019903:	51                   	push   ecx
c0019904:	51                   	push   ecx
c0019905:	68 7a c3 02 c0       	push   0xc002c37a
c001990a:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001990e:	53                   	push   ebx
c001990f:	e8 14 6f fe ff       	call   c0000828 <strcpy>
c0019914:	5e                   	pop    esi
c0019915:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c001991b:	5f                   	pop    edi
c001991c:	66 c1 e8 06          	shr    ax,0x6
c0019920:	0f b6 c0             	movzx  eax,al
c0019923:	50                   	push   eax
c0019924:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c001992a:	c1 e8 0e             	shr    eax,0xe
c001992d:	0f b6 c0             	movzx  eax,al
c0019930:	50                   	push   eax
c0019931:	e8 34 f2 ff ff       	call   c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019936:	5a                   	pop    edx
c0019937:	59                   	pop    ecx
c0019938:	50                   	push   eax
c0019939:	53                   	push   ebx
c001993a:	e8 29 70 fe ff       	call   c0000968 <strcat>
c001993f:	5e                   	pop    esi
c0019940:	5f                   	pop    edi
c0019941:	53                   	push   ebx
c0019942:	55                   	push   ebp
c0019943:	e8 fe aa ff ff       	call   c0014446 <Device::setName(char const*)>
c0019948:	58                   	pop    eax
c0019949:	8d 85 d0 00 00 00    	lea    eax,[ebp+0xd0]
c001994f:	5a                   	pop    edx
c0019950:	68 81 c3 02 c0       	push   0xc002c381
c0019955:	50                   	push   eax
c0019956:	e8 59 6f fe ff       	call   c00008b4 <strcmp>
c001995b:	83 c4 10             	add    esp,0x10
c001995e:	85 c0                	test   eax,eax
c0019960:	0f 85 72 03 00 00    	jne    c0019cd8 <CPU::detectFeatures()+0x9d2>
c0019966:	80 a5 91 11 00 00 3f 	and    BYTE PTR [ebp+0x1191],0x3f
c001996d:	e9 66 03 00 00       	jmp    c0019cd8 <CPU::detectFeatures()+0x9d2>
c0019972:	83 f8 02             	cmp    eax,0x2
c0019975:	0f 85 b5 00 00 00    	jne    c0019a30 <CPU::detectFeatures()+0x72a>
c001997b:	56                   	push   esi
c001997c:	56                   	push   esi
c001997d:	68 93 c3 02 c0       	push   0xc002c393
c0019982:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0019986:	53                   	push   ebx
c0019987:	e8 9c 6e fe ff       	call   c0000828 <strcpy>
c001998c:	5f                   	pop    edi
c001998d:	58                   	pop    eax
c001998e:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019994:	66 c1 e8 06          	shr    ax,0x6
c0019998:	0f b6 c0             	movzx  eax,al
c001999b:	50                   	push   eax
c001999c:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c00199a2:	c1 e8 0e             	shr    eax,0xe
c00199a5:	0f b6 c0             	movzx  eax,al
c00199a8:	50                   	push   eax
c00199a9:	e8 28 f0 ff ff       	call   c00189d6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00199ae:	5a                   	pop    edx
c00199af:	59                   	pop    ecx
c00199b0:	50                   	push   eax
c00199b1:	53                   	push   ebx
c00199b2:	e8 b1 6f fe ff       	call   c0000968 <strcat>
c00199b7:	5e                   	pop    esi
c00199b8:	5f                   	pop    edi
c00199b9:	53                   	push   ebx
c00199ba:	55                   	push   ebp
c00199bb:	e8 86 aa ff ff       	call   c0014446 <Device::setName(char const*)>
c00199c0:	58                   	pop    eax
c00199c1:	8d 85 d0 00 00 00    	lea    eax,[ebp+0xd0]
c00199c7:	5a                   	pop    edx
c00199c8:	68 98 c3 02 c0       	push   0xc002c398
c00199cd:	50                   	push   eax
c00199ce:	e8 e1 6e fe ff       	call   c00008b4 <strcmp>
c00199d3:	83 c4 10             	add    esp,0x10
c00199d6:	85 c0                	test   eax,eax
c00199d8:	75 20                	jne    c00199fa <CPU::detectFeatures()+0x6f4>
c00199da:	8b 0d 68 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002ef68
c00199e0:	8a 81 e8 01 00 00    	mov    al,BYTE PTR [ecx+0x1e8]
c00199e6:	a8 01                	test   al,0x1
c00199e8:	74 10                	je     c00199fa <CPU::detectFeatures()+0x6f4>
c00199ea:	83 e0 fe             	and    eax,0xfffffffe
c00199ed:	88 81 e8 01 00 00    	mov    BYTE PTR [ecx+0x1e8],al
c00199f3:	80 8d 90 11 00 00 10 	or     BYTE PTR [ebp+0x1190],0x10
c00199fa:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019a00:	c1 e8 0e             	shr    eax,0xe
c0019a03:	3c 05                	cmp    al,0x5
c0019a05:	0f 85 cd 02 00 00    	jne    c0019cd8 <CPU::detectFeatures()+0x9d2>
c0019a0b:	53                   	push   ebx
c0019a0c:	8a 85 5c 01 00 00    	mov    al,BYTE PTR [ebp+0x15c]
c0019a12:	83 e0 0f             	and    eax,0xf
c0019a15:	50                   	push   eax
c0019a16:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019a1c:	66 c1 e8 06          	shr    ax,0x6
c0019a20:	0f b6 c0             	movzx  eax,al
c0019a23:	50                   	push   eax
c0019a24:	6a 05                	push   0x5
c0019a26:	e8 21 f4 ff ff       	call   c0018e4c <CPU::AMD_K6_writeback(int, int, int)>
c0019a2b:	e9 20 02 00 00       	jmp    c0019c50 <CPU::detectFeatures()+0x94a>
c0019a30:	8d 48 fd             	lea    ecx,[eax-0x3]
c0019a33:	83 f9 01             	cmp    ecx,0x1
c0019a36:	76 09                	jbe    c0019a41 <CPU::detectFeatures()+0x73b>
c0019a38:	83 f8 06             	cmp    eax,0x6
c0019a3b:	0f 85 92 01 00 00    	jne    c0019bd3 <CPU::detectFeatures()+0x8cd>
c0019a41:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019a47:	c1 e9 0e             	shr    ecx,0xe
c0019a4a:	80 f9 05             	cmp    cl,0x5
c0019a4d:	75 7b                	jne    c0019aca <CPU::detectFeatures()+0x7c4>
c0019a4f:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019a55:	66 81 e1 c0 3f       	and    cx,0x3fc0
c0019a5a:	66 81 f9 00 01       	cmp    cx,0x100
c0019a5f:	75 0c                	jne    c0019a6d <CPU::detectFeatures()+0x767>
c0019a61:	51                   	push   ecx
c0019a62:	51                   	push   ecx
c0019a63:	68 9f c3 02 c0       	push   0xc002c39f
c0019a68:	e9 dd 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019a6d:	66 81 f9 00 02       	cmp    cx,0x200
c0019a72:	75 0c                	jne    c0019a80 <CPU::detectFeatures()+0x77a>
c0019a74:	52                   	push   edx
c0019a75:	52                   	push   edx
c0019a76:	68 b2 c3 02 c0       	push   0xc002c3b2
c0019a7b:	e9 ca 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019a80:	66 81 f9 40 02       	cmp    cx,0x240
c0019a85:	75 0c                	jne    c0019a93 <CPU::detectFeatures()+0x78d>
c0019a87:	50                   	push   eax
c0019a88:	50                   	push   eax
c0019a89:	68 c4 c3 02 c0       	push   0xc002c3c4
c0019a8e:	e9 b7 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019a93:	83 f8 06             	cmp    eax,0x6
c0019a96:	75 0c                	jne    c0019aa4 <CPU::detectFeatures()+0x79e>
c0019a98:	50                   	push   eax
c0019a99:	50                   	push   eax
c0019a9a:	68 d6 c3 02 c0       	push   0xc002c3d6
c0019a9f:	e9 a6 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019aa4:	83 f8 04             	cmp    eax,0x4
c0019aa7:	75 0c                	jne    c0019ab5 <CPU::detectFeatures()+0x7af>
c0019aa9:	50                   	push   eax
c0019aaa:	50                   	push   eax
c0019aab:	68 e2 c3 02 c0       	push   0xc002c3e2
c0019ab0:	e9 95 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019ab5:	83 f8 03             	cmp    eax,0x3
c0019ab8:	0f 85 1a 02 00 00    	jne    c0019cd8 <CPU::detectFeatures()+0x9d2>
c0019abe:	50                   	push   eax
c0019abf:	50                   	push   eax
c0019ac0:	68 ea c3 02 c0       	push   0xc002c3ea
c0019ac5:	e9 80 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019aca:	80 f9 06             	cmp    cl,0x6
c0019acd:	0f 85 dc 00 00 00    	jne    c0019baf <CPU::detectFeatures()+0x8a9>
c0019ad3:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019ad9:	66 81 e1 c0 3f       	and    cx,0x3fc0
c0019ade:	66 81 f9 80 01       	cmp    cx,0x180
c0019ae3:	75 0c                	jne    c0019af1 <CPU::detectFeatures()+0x7eb>
c0019ae5:	50                   	push   eax
c0019ae6:	50                   	push   eax
c0019ae7:	68 f5 c3 02 c0       	push   0xc002c3f5
c0019aec:	e9 59 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019af1:	8d 99 40 fe ff ff    	lea    ebx,[ecx-0x1c0]
c0019af7:	66 f7 c3 80 ff       	test   bx,0xff80
c0019afc:	75 0c                	jne    c0019b0a <CPU::detectFeatures()+0x804>
c0019afe:	50                   	push   eax
c0019aff:	50                   	push   eax
c0019b00:	68 05 c4 02 c0       	push   0xc002c405
c0019b05:	e9 40 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019b0a:	66 81 f9 40 02       	cmp    cx,0x240
c0019b0f:	75 0c                	jne    c0019b1d <CPU::detectFeatures()+0x817>
c0019b11:	57                   	push   edi
c0019b12:	57                   	push   edi
c0019b13:	68 0c c4 02 c0       	push   0xc002c40c
c0019b18:	e9 2d 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019b1d:	66 81 f9 80 02       	cmp    cx,0x280
c0019b22:	75 0c                	jne    c0019b30 <CPU::detectFeatures()+0x82a>
c0019b24:	56                   	push   esi
c0019b25:	56                   	push   esi
c0019b26:	68 15 c4 02 c0       	push   0xc002c415
c0019b2b:	e9 1a 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019b30:	66 81 f9 40 03       	cmp    cx,0x340
c0019b35:	74 ed                	je     c0019b24 <CPU::detectFeatures()+0x81e>
c0019b37:	66 81 f9 c0 03       	cmp    cx,0x3c0
c0019b3c:	75 0c                	jne    c0019b4a <CPU::detectFeatures()+0x844>
c0019b3e:	53                   	push   ebx
c0019b3f:	53                   	push   ebx
c0019b40:	68 1c c4 02 c0       	push   0xc002c41c
c0019b45:	e9 00 01 00 00       	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019b4a:	83 f8 06             	cmp    eax,0x6
c0019b4d:	0f 84 45 ff ff ff    	je     c0019a98 <CPU::detectFeatures()+0x792>
c0019b53:	83 f8 04             	cmp    eax,0x4
c0019b56:	0f 84 4d ff ff ff    	je     c0019aa9 <CPU::detectFeatures()+0x7a3>
c0019b5c:	83 f8 03             	cmp    eax,0x3
c0019b5f:	0f 85 73 01 00 00    	jne    c0019cd8 <CPU::detectFeatures()+0x9d2>
c0019b65:	b3 c1                	mov    bl,0xc1
c0019b67:	51                   	push   ecx
c0019b68:	51                   	push   ecx
c0019b69:	68 25 c4 02 c0       	push   0xc002c425
c0019b6e:	55                   	push   ebp
c0019b6f:	e8 d2 a8 ff ff       	call   c0014446 <Device::setName(char const*)>
c0019b74:	88 d8                	mov    al,bl
c0019b76:	e6 22                	out    0x22,al
c0019b78:	e4 23                	in     al,0x23
c0019b7a:	88 c1                	mov    cl,al
c0019b7c:	88 d8                	mov    al,bl
c0019b7e:	e6 22                	out    0x22,al
c0019b80:	88 c8                	mov    al,cl
c0019b82:	83 c8 10             	or     eax,0x10
c0019b85:	e6 23                	out    0x23,al
c0019b87:	0f b6 8d c4 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc4]
c0019b8e:	8d 5c 8d 00          	lea    ebx,[ebp+ecx*4+0x0]
c0019b92:	89 c8                	mov    eax,ecx
c0019b94:	66 c7 43 04 22 00    	mov    WORD PTR [ebx+0x4],0x22
c0019b9a:	c6 43 06 02          	mov    BYTE PTR [ebx+0x6],0x2
c0019b9e:	40                   	inc    eax
c0019b9f:	88 85 c4 00 00 00    	mov    BYTE PTR [ebp+0xc4],al
c0019ba5:	80 64 8d 07 3f       	and    BYTE PTR [ebp+ecx*4+0x7],0x3f
c0019baa:	e9 a1 00 00 00       	jmp    c0019c50 <CPU::detectFeatures()+0x94a>
c0019baf:	83 f8 06             	cmp    eax,0x6
c0019bb2:	0f 84 e0 fe ff ff    	je     c0019a98 <CPU::detectFeatures()+0x792>
c0019bb8:	83 f8 04             	cmp    eax,0x4
c0019bbb:	0f 84 e8 fe ff ff    	je     c0019aa9 <CPU::detectFeatures()+0x7a3>
c0019bc1:	83 f8 03             	cmp    eax,0x3
c0019bc4:	0f 85 0e 01 00 00    	jne    c0019cd8 <CPU::detectFeatures()+0x9d2>
c0019bca:	52                   	push   edx
c0019bcb:	52                   	push   edx
c0019bcc:	68 30 c4 02 c0       	push   0xc002c430
c0019bd1:	eb 77                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019bd3:	83 f8 07             	cmp    eax,0x7
c0019bd6:	75 09                	jne    c0019be1 <CPU::detectFeatures()+0x8db>
c0019bd8:	50                   	push   eax
c0019bd9:	50                   	push   eax
c0019bda:	68 3a c4 02 c0       	push   0xc002c43a
c0019bdf:	eb 69                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019be1:	83 f8 0a             	cmp    eax,0xa
c0019be4:	75 09                	jne    c0019bef <CPU::detectFeatures()+0x8e9>
c0019be6:	50                   	push   eax
c0019be7:	50                   	push   eax
c0019be8:	68 45 c4 02 c0       	push   0xc002c445
c0019bed:	eb 5b                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019bef:	83 f8 0b             	cmp    eax,0xb
c0019bf2:	75 09                	jne    c0019bfd <CPU::detectFeatures()+0x8f7>
c0019bf4:	50                   	push   eax
c0019bf5:	50                   	push   eax
c0019bf6:	68 4d c4 02 c0       	push   0xc002c44d
c0019bfb:	eb 4d                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019bfd:	83 f8 08             	cmp    eax,0x8
c0019c00:	75 09                	jne    c0019c0b <CPU::detectFeatures()+0x905>
c0019c02:	50                   	push   eax
c0019c03:	50                   	push   eax
c0019c04:	68 56 c4 02 c0       	push   0xc002c456
c0019c09:	eb 3f                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019c0b:	83 f8 09             	cmp    eax,0x9
c0019c0e:	75 09                	jne    c0019c19 <CPU::detectFeatures()+0x913>
c0019c10:	50                   	push   eax
c0019c11:	50                   	push   eax
c0019c12:	68 5e c4 02 c0       	push   0xc002c45e
c0019c17:	eb 31                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019c19:	83 f8 05             	cmp    eax,0x5
c0019c1c:	75 09                	jne    c0019c27 <CPU::detectFeatures()+0x921>
c0019c1e:	50                   	push   eax
c0019c1f:	50                   	push   eax
c0019c20:	68 66 c4 02 c0       	push   0xc002c466
c0019c25:	eb 23                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019c27:	83 f8 0c             	cmp    eax,0xc
c0019c2a:	75 09                	jne    c0019c35 <CPU::detectFeatures()+0x92f>
c0019c2c:	57                   	push   edi
c0019c2d:	57                   	push   edi
c0019c2e:	68 74 c4 02 c0       	push   0xc002c474
c0019c33:	eb 15                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019c35:	83 f8 0d             	cmp    eax,0xd
c0019c38:	75 09                	jne    c0019c43 <CPU::detectFeatures()+0x93d>
c0019c3a:	56                   	push   esi
c0019c3b:	56                   	push   esi
c0019c3c:	68 7f c4 02 c0       	push   0xc002c47f
c0019c41:	eb 07                	jmp    c0019c4a <CPU::detectFeatures()+0x944>
c0019c43:	53                   	push   ebx
c0019c44:	53                   	push   ebx
c0019c45:	68 93 c4 02 c0       	push   0xc002c493
c0019c4a:	55                   	push   ebp
c0019c4b:	e8 f6 a7 ff ff       	call   c0014446 <Device::setName(char const*)>
c0019c50:	83 c4 10             	add    esp,0x10
c0019c53:	e9 80 00 00 00       	jmp    c0019cd8 <CPU::detectFeatures()+0x9d2>
c0019c58:	51                   	push   ecx
c0019c59:	51                   	push   ecx
c0019c5a:	68 df c2 02 c0       	push   0xc002c2df
c0019c5f:	53                   	push   ebx
c0019c60:	e8 c3 6b fe ff       	call   c0000828 <strcpy>
c0019c65:	c7 85 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebp+0x158],0x1
c0019c6f:	e8 3a 66 fe ff       	call   c00002ae <is486>
c0019c74:	83 c4 10             	add    esp,0x10
c0019c77:	85 c0                	test   eax,eax
c0019c79:	74 2b                	je     c0019ca6 <CPU::detectFeatures()+0x9a0>
c0019c7b:	52                   	push   edx
c0019c7c:	52                   	push   edx
c0019c7d:	68 9f c4 02 c0       	push   0xc002c49f
c0019c82:	55                   	push   ebp
c0019c83:	e8 be a7 ff ff       	call   c0014446 <Device::setName(char const*)>
c0019c88:	80 8d 91 11 00 00 07 	or     BYTE PTR [ebp+0x1191],0x7
c0019c8f:	0f 20 c0             	mov    eax,cr0
c0019c92:	83 e0 14             	and    eax,0x14
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	83 f8 04             	cmp    eax,0x4
c0019c9b:	75 1f                	jne    c0019cbc <CPU::detectFeatures()+0x9b6>
c0019c9d:	80 a5 92 11 00 00 fd 	and    BYTE PTR [ebp+0x1192],0xfd
c0019ca4:	eb 32                	jmp    c0019cd8 <CPU::detectFeatures()+0x9d2>
c0019ca6:	50                   	push   eax
c0019ca7:	50                   	push   eax
c0019ca8:	68 aa c4 02 c0       	push   0xc002c4aa
c0019cad:	55                   	push   ebp
c0019cae:	e8 93 a7 ff ff       	call   c0014446 <Device::setName(char const*)>
c0019cb3:	80 a5 91 11 00 00 f8 	and    BYTE PTR [ebp+0x1191],0xf8
c0019cba:	eb d3                	jmp    c0019c8f <CPU::detectFeatures()+0x989>
c0019cbc:	e8 c8 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019cc1:	83 e0 01             	and    eax,0x1
c0019cc4:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019cc7:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019ccd:	83 e0 fd             	and    eax,0xfffffffd
c0019cd0:	09 c8                	or     eax,ecx
c0019cd2:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019cd8:	c6 85 94 11 00 00 00 	mov    BYTE PTR [ebp+0x1194],0x0
c0019cdf:	83 c4 3c             	add    esp,0x3c
c0019ce2:	5b                   	pop    ebx
c0019ce3:	5e                   	pop    esi
c0019ce4:	5f                   	pop    edi
c0019ce5:	5d                   	pop    ebp
c0019ce6:	c3                   	ret    
c0019ce7:	90                   	nop

c0019ce8 <CPU::setupSMEP()>:
c0019ce8:	0f 20 e0             	mov    eax,cr4
c0019ceb:	0d 00 00 10 00       	or     eax,0x100000
c0019cf0:	0f 22 e0             	mov    cr4,eax
c0019cf3:	c3                   	ret    

c0019cf4 <CPU::setupUMIP()>:
c0019cf4:	0f 20 e0             	mov    eax,cr4
c0019cf7:	80 cc 08             	or     ah,0x8
c0019cfa:	0f 22 e0             	mov    cr4,eax
c0019cfd:	c3                   	ret    

c0019cfe <CPU::setupTSC()>:
c0019cfe:	0f 20 e0             	mov    eax,cr4
c0019d01:	83 c8 04             	or     eax,0x4
c0019d04:	0f 22 e0             	mov    cr4,eax
c0019d07:	c3                   	ret    

c0019d08 <CPU::setupLargePages()>:
c0019d08:	0f 20 e0             	mov    eax,cr4
c0019d0b:	83 c8 10             	or     eax,0x10
c0019d0e:	0f 22 e0             	mov    cr4,eax
c0019d11:	c3                   	ret    

c0019d12 <CPU::setupPAT()>:
c0019d12:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0019d17:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d1e:	74 2c                	je     c0019d4c <CPU::setupPAT()+0x3a>
c0019d20:	53                   	push   ebx
c0019d21:	83 ec 10             	sub    esp,0x10
c0019d24:	68 77 02 00 00       	push   0x277
c0019d29:	50                   	push   eax
c0019d2a:	e8 1f 51 ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c0019d2f:	83 e2 f8             	and    edx,0xfffffff8
c0019d32:	83 ca 01             	or     edx,0x1
c0019d35:	52                   	push   edx
c0019d36:	50                   	push   eax
c0019d37:	68 77 02 00 00       	push   0x277
c0019d3c:	ff 35 68 ef 02 c0    	push   DWORD PTR ds:0xc002ef68
c0019d42:	e8 33 51 ff ff       	call   c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>
c0019d47:	83 c4 28             	add    esp,0x28
c0019d4a:	5b                   	pop    ebx
c0019d4b:	c3                   	ret    
c0019d4c:	c3                   	ret    
c0019d4d:	90                   	nop

c0019d4e <CPU::setupMTRR()>:
c0019d4e:	c3                   	ret    
c0019d4f:	90                   	nop

c0019d50 <CPU::setupGlobalPages()>:
c0019d50:	0f 20 e0             	mov    eax,cr4
c0019d53:	0c 80                	or     al,0x80
c0019d55:	0f 22 e0             	mov    cr4,eax
c0019d58:	c3                   	ret    
c0019d59:	90                   	nop

c0019d5a <CPU::allowUsermodeDataAccess()>:
c0019d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d5e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019d65:	74 03                	je     c0019d6a <CPU::allowUsermodeDataAccess()+0x10>
c0019d67:	0f 01 cb             	stac   
c0019d6a:	c3                   	ret    
c0019d6b:	90                   	nop

c0019d6c <CPU::prohibitUsermodeDataAccess()>:
c0019d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d70:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019d77:	74 03                	je     c0019d7c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019d79:	0f 01 ca             	clac   
c0019d7c:	c3                   	ret    
c0019d7d:	90                   	nop

c0019d7e <CPU::setupSMAP()>:
c0019d7e:	0f 20 e0             	mov    eax,cr4
c0019d81:	0d 00 00 20 00       	or     eax,0x200000
c0019d86:	0f 22 e0             	mov    cr4,eax
c0019d89:	eb e1                	jmp    c0019d6c <CPU::prohibitUsermodeDataAccess()>
c0019d8b:	90                   	nop

c0019d8c <CPU::setupFeatures()>:
c0019d8c:	83 ec 0c             	sub    esp,0xc
c0019d8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d93:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019d9a:	74 07                	je     c0019da3 <CPU::setupFeatures()+0x17>
c0019d9c:	52                   	push   edx
c0019d9d:	e8 46 ff ff ff       	call   c0019ce8 <CPU::setupSMEP()>
c0019da2:	58                   	pop    eax
c0019da3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019daa:	74 07                	je     c0019db3 <CPU::setupFeatures()+0x27>
c0019dac:	52                   	push   edx
c0019dad:	e8 cc ff ff ff       	call   c0019d7e <CPU::setupSMAP()>
c0019db2:	58                   	pop    eax
c0019db3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019dba:	74 07                	je     c0019dc3 <CPU::setupFeatures()+0x37>
c0019dbc:	52                   	push   edx
c0019dbd:	e8 32 ff ff ff       	call   c0019cf4 <CPU::setupUMIP()>
c0019dc2:	58                   	pop    eax
c0019dc3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019dca:	74 07                	je     c0019dd3 <CPU::setupFeatures()+0x47>
c0019dcc:	52                   	push   edx
c0019dcd:	e8 2c ff ff ff       	call   c0019cfe <CPU::setupTSC()>
c0019dd2:	58                   	pop    eax
c0019dd3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019dda:	74 07                	je     c0019de3 <CPU::setupFeatures()+0x57>
c0019ddc:	52                   	push   edx
c0019ddd:	e8 26 ff ff ff       	call   c0019d08 <CPU::setupLargePages()>
c0019de2:	59                   	pop    ecx
c0019de3:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019dea:	74 07                	je     c0019df3 <CPU::setupFeatures()+0x67>
c0019dec:	52                   	push   edx
c0019ded:	e8 5e ff ff ff       	call   c0019d50 <CPU::setupGlobalPages()>
c0019df2:	58                   	pop    eax
c0019df3:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019dfa:	74 0c                	je     c0019e08 <CPU::setupFeatures()+0x7c>
c0019dfc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e00:	83 c4 0c             	add    esp,0xc
c0019e03:	e9 0a ff ff ff       	jmp    c0019d12 <CPU::setupPAT()>
c0019e08:	83 c4 0c             	add    esp,0xc
c0019e0b:	c3                   	ret    

c0019e0c <CPU::open(int, int, void*)>:
c0019e0c:	57                   	push   edi
c0019e0d:	56                   	push   esi
c0019e0e:	53                   	push   ebx
c0019e0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e17:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e1d:	83 ec 0c             	sub    esp,0xc
c0019e20:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e26:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019e2c:	50                   	push   eax
c0019e2d:	e8 08 53 ff ff       	call   c000f13a <GDT::setup()>
c0019e32:	83 c4 0c             	add    esp,0xc
c0019e35:	6a 00                	push   0x0
c0019e37:	68 ef be ad de       	push   0xdeadbeef
c0019e3c:	57                   	push   edi
c0019e3d:	e8 6c 75 ff ff       	call   c00113ae <TSS::setup(unsigned long, unsigned long)>
c0019e42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019e45:	e8 44 75 ff ff       	call   c001138e <TSS::flush()>
c0019e4a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e53:	e8 46 55 ff ff       	call   c000f39e <IDT::setup()>
c0019e58:	b8 00 04 00 00       	mov    eax,0x400
c0019e5d:	0f 23 f8             	mov    db7,eax
c0019e60:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019e6a:	e8 a5 60 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0019e6f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019e75:	89 30                	mov    DWORD PTR [eax],esi
c0019e77:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019e7d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019e80:	58                   	pop    eax
c0019e81:	5a                   	pop    edx
c0019e82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e8c:	e8 bd 86 ff ff       	call   c001254e <VAS::setCPUSpecific(unsigned long)>
c0019e91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e94:	e8 6d f4 ff ff       	call   c0019306 <CPU::detectFeatures()>
c0019e99:	e8 ff b9 ff ff       	call   c001589d <setupInterruptController()>
c0019e9e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019ea4:	a1 80 ef 02 c0       	mov    eax,ds:0xc002ef80
c0019ea9:	83 e0 10             	and    eax,0x10
c0019eac:	83 f8 01             	cmp    eax,0x1
c0019eaf:	19 c0                	sbb    eax,eax
c0019eb1:	83 e0 46             	and    eax,0x46
c0019eb4:	83 c0 1e             	add    eax,0x1e
c0019eb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eba:	e8 36 d0 ff ff       	call   c0016ef5 <setupTimer(int)>
c0019ebf:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019ec5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ec8:	e8 bf fe ff ff       	call   c0019d8c <CPU::setupFeatures()>
c0019ecd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ed0:	e8 b5 f1 ff ff       	call   c001908a <CPU::displayFeatures()>
c0019ed5:	83 c4 10             	add    esp,0x10
c0019ed8:	31 c0                	xor    eax,eax
c0019eda:	5b                   	pop    ebx
c0019edb:	5e                   	pop    esi
c0019edc:	5f                   	pop    edi
c0019edd:	c3                   	ret    

c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ede:	57                   	push   edi
c0019edf:	56                   	push   esi
c0019ee0:	53                   	push   ebx
c0019ee1:	51                   	push   ecx
c0019ee2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ee6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019ee9:	0f 02 c0             	lar    eax,ax
c0019eec:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019eef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ef3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019ef6:	88 ca                	mov    dl,cl
c0019ef8:	c0 ea 06             	shr    dl,0x6
c0019efb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019eff:	89 ca                	mov    edx,ecx
c0019f01:	66 c1 ea 03          	shr    dx,0x3
c0019f05:	83 e2 07             	and    edx,0x7
c0019f08:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f0d:	88 17                	mov    BYTE PTR [edi],dl
c0019f0f:	0f 84 a6 01 00 00    	je     c001a0bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f15:	83 e1 07             	and    ecx,0x7
c0019f18:	80 f9 04             	cmp    cl,0x4
c0019f1b:	0f 84 98 00 00 00    	je     c0019fb9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f21:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f26:	0f 95 c0             	setne  al
c0019f29:	80 f9 05             	cmp    cl,0x5
c0019f2c:	0f 95 c2             	setne  dl
c0019f2f:	08 c2                	or     dl,al
c0019f31:	74 79                	je     c0019fac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019f33:	84 c9                	test   cl,cl
c0019f35:	75 05                	jne    c0019f3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019f37:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019f3a:	eb 3c                	jmp    c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f3c:	80 f9 01             	cmp    cl,0x1
c0019f3f:	75 05                	jne    c0019f46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019f41:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f44:	eb 32                	jmp    c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f46:	80 f9 02             	cmp    cl,0x2
c0019f49:	75 05                	jne    c0019f50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019f4b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019f4e:	eb 28                	jmp    c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f50:	31 c0                	xor    eax,eax
c0019f52:	80 f9 03             	cmp    cl,0x3
c0019f55:	75 05                	jne    c0019f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019f57:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019f5a:	eb 1c                	jmp    c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f5c:	80 f9 05             	cmp    cl,0x5
c0019f5f:	75 05                	jne    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019f61:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019f64:	eb 12                	jmp    c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f66:	80 f9 06             	cmp    cl,0x6
c0019f69:	75 05                	jne    c0019f70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019f6b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019f6e:	eb 08                	jmp    c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f70:	80 f9 07             	cmp    cl,0x7
c0019f73:	75 03                	jne    c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f75:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f78:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f7d:	75 10                	jne    c0019f8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019f7f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019f83:	b9 03 00 00 00       	mov    ecx,0x3
c0019f88:	01 d0                	add    eax,edx
c0019f8a:	e9 37 01 00 00       	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f8f:	b9 02 00 00 00       	mov    ecx,0x2
c0019f94:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019f99:	0f 85 27 01 00 00    	jne    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f9f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019fa2:	b9 06 00 00 00       	mov    ecx,0x6
c0019fa7:	e9 1a 01 00 00       	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019fac:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019faf:	b9 06 00 00 00       	mov    ecx,0x6
c0019fb4:	e9 0f 01 00 00       	jmp    c001a0c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019fb9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019fbc:	88 ca                	mov    dl,cl
c0019fbe:	c0 ea 06             	shr    dl,0x6
c0019fc1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019fc5:	89 ca                	mov    edx,ecx
c0019fc7:	66 c1 ea 03          	shr    dx,0x3
c0019fcb:	83 e2 07             	and    edx,0x7
c0019fce:	80 e1 07             	and    cl,0x7
c0019fd1:	75 05                	jne    c0019fd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019fd3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019fd6:	eb 4c                	jmp    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fd8:	80 f9 01             	cmp    cl,0x1
c0019fdb:	75 05                	jne    c0019fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019fdd:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019fe0:	eb 42                	jmp    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fe2:	80 f9 02             	cmp    cl,0x2
c0019fe5:	75 05                	jne    c0019fec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019fe7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019fea:	eb 38                	jmp    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fec:	80 f9 03             	cmp    cl,0x3
c0019fef:	75 05                	jne    c0019ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019ff1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019ff4:	eb 2e                	jmp    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ff6:	80 f9 04             	cmp    cl,0x4
c0019ff9:	75 12                	jne    c001a00d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019ffb:	f6 c4 60             	test   ah,0x60
c0019ffe:	75 08                	jne    c001a008 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a000:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a003:	8d 78 14             	lea    edi,[eax+0x14]
c001a006:	eb 1c                	jmp    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a008:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a00b:	eb 17                	jmp    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a00d:	80 f9 05             	cmp    cl,0x5
c001a010:	75 05                	jne    c001a017 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a012:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a015:	eb 0d                	jmp    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a017:	80 f9 06             	cmp    cl,0x6
c001a01a:	75 05                	jne    c001a021 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a01c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a01f:	eb 03                	jmp    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a021:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a024:	84 d2                	test   dl,dl
c001a026:	75 05                	jne    c001a02d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a028:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a02b:	eb 3c                	jmp    c001a069 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a02d:	80 fa 01             	cmp    dl,0x1
c001a030:	75 05                	jne    c001a037 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a032:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a035:	eb 32                	jmp    c001a069 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a037:	80 fa 02             	cmp    dl,0x2
c001a03a:	75 05                	jne    c001a041 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a03c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a03f:	eb 28                	jmp    c001a069 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a041:	80 fa 03             	cmp    dl,0x3
c001a044:	75 05                	jne    c001a04b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a046:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a049:	eb 1e                	jmp    c001a069 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a04b:	31 c0                	xor    eax,eax
c001a04d:	80 fa 04             	cmp    dl,0x4
c001a050:	74 17                	je     c001a069 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a052:	80 fa 05             	cmp    dl,0x5
c001a055:	75 05                	jne    c001a05c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a057:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a05a:	eb 0d                	jmp    c001a069 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a05c:	80 fa 06             	cmp    dl,0x6
c001a05f:	75 05                	jne    c001a066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a061:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a064:	eb 03                	jmp    c001a069 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a066:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a069:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a06e:	0f 94 c2             	sete   dl
c001a071:	80 f9 05             	cmp    cl,0x5
c001a074:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a078:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a07d:	d3 e0                	shl    eax,cl
c001a07f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a083:	74 0a                	je     c001a08f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a085:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a088:	b9 07 00 00 00       	mov    ecx,0x7
c001a08d:	eb 37                	jmp    c001a0c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a08f:	01 f8                	add    eax,edi
c001a091:	b9 03 00 00 00       	mov    ecx,0x3
c001a096:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a09b:	74 2b                	je     c001a0c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a09d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a0a2:	75 0d                	jne    c001a0b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a0a4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a0a8:	01 c8                	add    eax,ecx
c001a0aa:	b9 04 00 00 00       	mov    ecx,0x4
c001a0af:	eb 17                	jmp    c001a0c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0b1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a0b4:	b9 07 00 00 00       	mov    ecx,0x7
c001a0b9:	eb 0d                	jmp    c001a0c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0bb:	b9 02 00 00 00       	mov    ecx,0x2
c001a0c0:	b2 01                	mov    dl,0x1
c001a0c2:	31 c0                	xor    eax,eax
c001a0c4:	eb 02                	jmp    c001a0c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0c6:	31 d2                	xor    edx,edx
c001a0c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0cc:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a0ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a0d2:	88 11                	mov    BYTE PTR [ecx],dl
c001a0d4:	5a                   	pop    edx
c001a0d5:	5b                   	pop    ebx
c001a0d6:	5e                   	pop    esi
c001a0d7:	5f                   	pop    edi
c001a0d8:	c3                   	ret    

c001a0d9 <Krnl::smpEntry()>:
c001a0d9:	eb fe                	jmp    c001a0d9 <Krnl::smpEntry()>

c001a0db <Krnl::startCPU(int)>:
c001a0db:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001a0e0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a0e7:	0f 84 36 01 00 00    	je     c001a223 <Krnl::startCPU(int)+0x148>
c001a0ed:	53                   	push   ebx
c001a0ee:	83 ec 10             	sub    esp,0x10
c001a0f1:	fa                   	cli    
c001a0f2:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001a0f8:	6a 1b                	push   0x1b
c001a0fa:	ff 35 68 ef 02 c0    	push   DWORD PTR ds:0xc002ef68
c001a100:	e8 49 4d ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c001a105:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a10a:	89 c3                	mov    ebx,eax
c001a10c:	58                   	pop    eax
c001a10d:	5a                   	pop    edx
c001a10e:	53                   	push   ebx
c001a10f:	68 e4 c4 02 c0       	push   0xc002c4e4
c001a114:	e8 2a 8d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001a119:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a127:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a131:	c1 e0 18             	shl    eax,0x18
c001a134:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a13a:	83 c4 10             	add    esp,0x10
c001a13d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a143:	09 c2                	or     edx,eax
c001a145:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a14b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a151:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a157:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a15d:	80 cd c5             	or     ch,0xc5
c001a160:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a166:	f3 90                	pause  
c001a168:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a16a:	0f ba e1 0c          	bt     ecx,0xc
c001a16e:	72 f6                	jb     c001a166 <Krnl::startCPU(int)+0x8b>
c001a170:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a176:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a17c:	09 c1                	or     ecx,eax
c001a17e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a184:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a18a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a190:	80 cd 85             	or     ch,0x85
c001a193:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a199:	f3 90                	pause  
c001a19b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a19d:	0f ba e1 0c          	bt     ecx,0xc
c001a1a1:	72 f6                	jb     c001a199 <Krnl::startCPU(int)+0xbe>
c001a1a3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1ad:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1b3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1b9:	09 c1                	or     ecx,eax
c001a1bb:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1c1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1c7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a1cd:	81 c9 02 06 00 00    	or     ecx,0x602
c001a1d3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1d9:	f3 90                	pause  
c001a1db:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1dd:	0f ba e1 0c          	bt     ecx,0xc
c001a1e1:	72 f6                	jb     c001a1d9 <Krnl::startCPU(int)+0xfe>
c001a1e3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1ed:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1f3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1f9:	09 c8                	or     eax,ecx
c001a1fb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a201:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a207:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a20c:	0d 02 06 00 00       	or     eax,0x602
c001a211:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a217:	f3 90                	pause  
c001a219:	8b 02                	mov    eax,DWORD PTR [edx]
c001a21b:	0f ba e0 0c          	bt     eax,0xc
c001a21f:	72 f6                	jb     c001a217 <Krnl::startCPU(int)+0x13c>
c001a221:	eb fe                	jmp    c001a221 <Krnl::startCPU(int)+0x146>
c001a223:	c3                   	ret    

c001a224 <Krnl::startCPUs()>:
c001a224:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001a229:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a22f:	88 c2                	mov    dl,al
c001a231:	83 e2 0a             	and    edx,0xa
c001a234:	80 fa 0a             	cmp    dl,0xa
c001a237:	75 09                	jne    c001a242 <Krnl::startCPUs()+0x1e>
c001a239:	a8 01                	test   al,0x1
c001a23b:	74 05                	je     c001a242 <Krnl::startCPUs()+0x1e>
c001a23d:	e9 59 5f fe ff       	jmp    c000019b <prepareTramp>
c001a242:	c3                   	ret    
c001a243:	90                   	nop

c001a244 <EnvVarContainer::getEnv(char const*)>:
c001a244:	57                   	push   edi
c001a245:	56                   	push   esi
c001a246:	53                   	push   ebx
c001a247:	31 db                	xor    ebx,ebx
c001a249:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a24d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a24f:	7e 2b                	jle    c001a27c <EnvVarContainer::getEnv(char const*)+0x38>
c001a251:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a258:	50                   	push   eax
c001a259:	50                   	push   eax
c001a25a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a25d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a260:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a264:	e8 4b 66 fe ff       	call   c00008b4 <strcmp>
c001a269:	83 c4 10             	add    esp,0x10
c001a26c:	85 c0                	test   eax,eax
c001a26e:	75 09                	jne    c001a279 <EnvVarContainer::getEnv(char const*)+0x35>
c001a270:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a273:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a277:	eb 05                	jmp    c001a27e <EnvVarContainer::getEnv(char const*)+0x3a>
c001a279:	43                   	inc    ebx
c001a27a:	eb d1                	jmp    c001a24d <EnvVarContainer::getEnv(char const*)+0x9>
c001a27c:	31 c0                	xor    eax,eax
c001a27e:	5b                   	pop    ebx
c001a27f:	5e                   	pop    esi
c001a280:	5f                   	pop    edi
c001a281:	c3                   	ret    

c001a282 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a282:	55                   	push   ebp
c001a283:	57                   	push   edi
c001a284:	56                   	push   esi
c001a285:	53                   	push   ebx
c001a286:	83 ec 28             	sub    esp,0x28
c001a289:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a28d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a291:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a295:	56                   	push   esi
c001a296:	e8 ed 64 fe ff       	call   c0000788 <strlen>
c001a29b:	40                   	inc    eax
c001a29c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a29f:	e8 04 56 ff ff       	call   c000f8a8 <malloc>
c001a2a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2ab:	e8 d8 64 fe ff       	call   c0000788 <strlen>
c001a2b0:	40                   	inc    eax
c001a2b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2b4:	e8 ef 55 ff ff       	call   c000f8a8 <malloc>
c001a2b9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2c0:	e8 c3 64 fe ff       	call   c0000788 <strlen>
c001a2c5:	83 c4 0c             	add    esp,0xc
c001a2c8:	40                   	inc    eax
c001a2c9:	50                   	push   eax
c001a2ca:	6a 00                	push   0x0
c001a2cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a2d0:	e8 97 64 fe ff       	call   c000076c <memset>
c001a2d5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2d8:	e8 ab 64 fe ff       	call   c0000788 <strlen>
c001a2dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a2e1:	8d 48 01             	lea    ecx,[eax+0x1]
c001a2e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2e6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2e9:	89 ee                	mov    esi,ebp
c001a2eb:	e8 98 64 fe ff       	call   c0000788 <strlen>
c001a2f0:	83 c4 0c             	add    esp,0xc
c001a2f3:	40                   	inc    eax
c001a2f4:	50                   	push   eax
c001a2f5:	6a 00                	push   0x0
c001a2f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2fb:	e8 6c 64 fe ff       	call   c000076c <memset>
c001a300:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a303:	e8 80 64 fe ff       	call   c0000788 <strlen>
c001a308:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a30c:	8d 48 01             	lea    ecx,[eax+0x1]
c001a30f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a311:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a313:	40                   	inc    eax
c001a314:	89 03                	mov    DWORD PTR [ebx],eax
c001a316:	c1 e0 03             	shl    eax,0x3
c001a319:	5a                   	pop    edx
c001a31a:	59                   	pop    ecx
c001a31b:	50                   	push   eax
c001a31c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a31f:	e8 70 55 ff ff       	call   c000f894 <realloc>
c001a324:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a328:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a32a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a32d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a331:	b9 08 00 00 00       	mov    ecx,0x8
c001a336:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a338:	83 c4 2c             	add    esp,0x2c
c001a33b:	5b                   	pop    ebx
c001a33c:	5e                   	pop    esi
c001a33d:	5f                   	pop    edi
c001a33e:	5d                   	pop    ebp
c001a33f:	c3                   	ret    

c001a340 <EnvVarContainer::deleteEnv(char const*)>:
c001a340:	c3                   	ret    
c001a341:	90                   	nop

c001a342 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a342:	55                   	push   ebp
c001a343:	57                   	push   edi
c001a344:	56                   	push   esi
c001a345:	53                   	push   ebx
c001a346:	81 ec 38 01 00 00    	sub    esp,0x138
c001a34c:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a353:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a35a:	68 14 01 00 00       	push   0x114
c001a35f:	e8 44 55 ff ff       	call   c000f8a8 <malloc>
c001a364:	83 c4 0c             	add    esp,0xc
c001a367:	89 c5                	mov    ebp,eax
c001a369:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a36c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a373:	50                   	push   eax
c001a374:	e8 29 90 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001a379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a37c:	e8 f3 92 ff ff       	call   c0013674 <File::exists()>
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	84 c0                	test   al,al
c001a386:	75 32                	jne    c001a3ba <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a388:	51                   	push   ecx
c001a389:	51                   	push   ecx
c001a38a:	6a 12                	push   0x12
c001a38c:	55                   	push   ebp
c001a38d:	e8 74 90 ff ff       	call   c0013406 <File::open(FileOpenMode)>
c001a392:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a395:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a398:	89 34 24             	mov    DWORD PTR [esp],esi
c001a39b:	e8 e8 63 fe ff       	call   c0000788 <strlen>
c001a3a0:	5a                   	pop    edx
c001a3a1:	31 d2                	xor    edx,edx
c001a3a3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a3a7:	51                   	push   ecx
c001a3a8:	56                   	push   esi
c001a3a9:	52                   	push   edx
c001a3aa:	50                   	push   eax
c001a3ab:	55                   	push   ebp
c001a3ac:	ff d7                	call   edi
c001a3ae:	83 c4 14             	add    esp,0x14
c001a3b1:	55                   	push   ebp
c001a3b2:	e8 ad 90 ff ff       	call   c0013464 <File::close()>
c001a3b7:	83 c4 10             	add    esp,0x10
c001a3ba:	31 f6                	xor    esi,esi
c001a3bc:	50                   	push   eax
c001a3bd:	68 00 01 00 00       	push   0x100
c001a3c2:	6a 00                	push   0x0
c001a3c4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a3c8:	50                   	push   eax
c001a3c9:	e8 9e 63 fe ff       	call   c000076c <memset>
c001a3ce:	58                   	pop    eax
c001a3cf:	5a                   	pop    edx
c001a3d0:	6a 01                	push   0x1
c001a3d2:	55                   	push   ebp
c001a3d3:	e8 2e 90 ff ff       	call   c0013406 <File::open(FileOpenMode)>
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a3e3:	83 ec 0c             	sub    esp,0xc
c001a3e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3e9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a3ed:	51                   	push   ecx
c001a3ee:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a3f2:	52                   	push   edx
c001a3f3:	6a 00                	push   0x0
c001a3f5:	6a 01                	push   0x1
c001a3f7:	55                   	push   ebp
c001a3f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a3fb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a3ff:	83 c4 20             	add    esp,0x20
c001a402:	3c 0d                	cmp    al,0xd
c001a404:	0f 84 16 01 00 00    	je     c001a520 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a40a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a40f:	0f 84 fc 00 00 00    	je     c001a511 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a415:	3c 0a                	cmp    al,0xa
c001a417:	74 13                	je     c001a42c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a419:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a41e:	74 0c                	je     c001a42c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a420:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a426:	0f 8e e5 00 00 00    	jle    c001a511 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a42c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a430:	83 ec 0c             	sub    esp,0xc
c001a433:	8d 78 01             	lea    edi,[eax+0x1]
c001a436:	57                   	push   edi
c001a437:	e8 6c 54 ff ff       	call   c000f8a8 <malloc>
c001a43c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a440:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a444:	8d 56 04             	lea    edx,[esi+0x4]
c001a447:	89 14 24             	mov    DWORD PTR [esp],edx
c001a44a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a44e:	e8 55 54 ff ff       	call   c000f8a8 <malloc>
c001a453:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a457:	83 c4 0c             	add    esp,0xc
c001a45a:	57                   	push   edi
c001a45b:	6a 00                	push   0x0
c001a45d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a461:	e8 06 63 fe ff       	call   c000076c <memset>
c001a466:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a46a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a46e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a472:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a474:	83 c4 0c             	add    esp,0xc
c001a477:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a47b:	52                   	push   edx
c001a47c:	6a 00                	push   0x0
c001a47e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a482:	e8 e5 62 fe ff       	call   c000076c <memset>
c001a487:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a48b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a48f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a492:	e8 f1 62 fe ff       	call   c0000788 <strlen>
c001a497:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a49b:	89 c1                	mov    ecx,eax
c001a49d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a49f:	5e                   	pop    esi
c001a4a0:	5f                   	pop    edi
c001a4a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4a5:	68 f5 c4 02 c0       	push   0xc002c4f5
c001a4aa:	e8 94 89 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001a4af:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4b1:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a4b4:	40                   	inc    eax
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	89 03                	mov    DWORD PTR [ebx],eax
c001a4ba:	85 d2                	test   edx,edx
c001a4bc:	75 0c                	jne    c001a4ca <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a4be:	83 ec 0c             	sub    esp,0xc
c001a4c1:	6a 08                	push   0x8
c001a4c3:	e8 e0 53 ff ff       	call   c000f8a8 <malloc>
c001a4c8:	eb 0c                	jmp    c001a4d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a4ca:	c1 e0 03             	shl    eax,0x3
c001a4cd:	51                   	push   ecx
c001a4ce:	51                   	push   ecx
c001a4cf:	50                   	push   eax
c001a4d0:	52                   	push   edx
c001a4d1:	e8 be 53 ff ff       	call   c000f894 <realloc>
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4dc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a4de:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a4e1:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a4e5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a4e9:	b9 08 00 00 00       	mov    ecx,0x8
c001a4ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4f0:	31 f6                	xor    esi,esi
c001a4f2:	52                   	push   edx
c001a4f3:	68 00 01 00 00       	push   0x100
c001a4f8:	6a 00                	push   0x0
c001a4fa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a4fe:	50                   	push   eax
c001a4ff:	e8 68 62 fe ff       	call   c000076c <memset>
c001a504:	83 c4 10             	add    esp,0x10
c001a507:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a50f:	eb 0f                	jmp    c001a520 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a511:	3c 3d                	cmp    al,0x3d
c001a513:	74 07                	je     c001a51c <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a515:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a519:	46                   	inc    esi
c001a51a:	eb 04                	jmp    c001a520 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a51c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a520:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a525:	0f 85 b8 fe ff ff    	jne    c001a3e3 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a52b:	50                   	push   eax
c001a52c:	50                   	push   eax
c001a52d:	ff 33                	push   DWORD PTR [ebx]
c001a52f:	68 03 c5 02 c0       	push   0xc002c503
c001a534:	e8 0a 89 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001a539:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a53f:	5b                   	pop    ebx
c001a540:	5e                   	pop    esi
c001a541:	5f                   	pop    edi
c001a542:	5d                   	pop    ebp
c001a543:	c3                   	ret    

c001a544 <EnvVarContainer::__loadSystem()>:
c001a544:	83 ec 10             	sub    esp,0x10
c001a547:	68 a0 e4 02 c0       	push   0xc002e4a0
c001a54c:	68 2e c5 02 c0       	push   0xc002c52e
c001a551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a555:	e8 e8 fd ff ff       	call   c001a342 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a55a:	83 c4 1c             	add    esp,0x1c
c001a55d:	c3                   	ret    

c001a55e <EnvVarContainer::__loadUser()>:
c001a55e:	c3                   	ret    
c001a55f:	90                   	nop

c001a560 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a564:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a56a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a56e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a572:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a579:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a580:	90                   	nop
c001a581:	c3                   	ret    

c001a582 <EnvVarContainer::~EnvVarContainer()>:
c001a582:	83 ec 0c             	sub    esp,0xc
c001a585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a589:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a58c:	85 c0                	test   eax,eax
c001a58e:	74 1d                	je     c001a5ad <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a594:	8b 00                	mov    eax,DWORD PTR [eax]
c001a596:	85 c0                	test   eax,eax
c001a598:	74 13                	je     c001a5ad <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5a1:	83 ec 0c             	sub    esp,0xc
c001a5a4:	50                   	push   eax
c001a5a5:	e8 0e 53 ff ff       	call   c000f8b8 <free>
c001a5aa:	83 c4 10             	add    esp,0x10
c001a5ad:	90                   	nop
c001a5ae:	83 c4 0c             	add    esp,0xc
c001a5b1:	c3                   	ret    

c001a5b2 <Krnl::getEnv(Process*, char const*)>:
c001a5b2:	53                   	push   ebx
c001a5b3:	83 ec 08             	sub    esp,0x8
c001a5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5be:	39 05 d0 24 03 c0    	cmp    DWORD PTR ds:0xc00324d0,eax
c001a5c4:	74 04                	je     c001a5ca <Krnl::getEnv(Process*, char const*)+0x18>
c001a5c6:	85 c0                	test   eax,eax
c001a5c8:	75 0b                	jne    c001a5d5 <Krnl::getEnv(Process*, char const*)+0x23>
c001a5ca:	a1 b4 1a 03 c0       	mov    eax,ds:0xc0031ab4
c001a5cf:	85 c0                	test   eax,eax
c001a5d1:	75 19                	jne    c001a5ec <Krnl::getEnv(Process*, char const*)+0x3a>
c001a5d3:	eb 27                	jmp    c001a5fc <Krnl::getEnv(Process*, char const*)+0x4a>
c001a5d5:	52                   	push   edx
c001a5d6:	52                   	push   edx
c001a5d7:	53                   	push   ebx
c001a5d8:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a5de:	e8 61 fc ff ff       	call   c001a244 <EnvVarContainer::getEnv(char const*)>
c001a5e3:	83 c4 10             	add    esp,0x10
c001a5e6:	85 c0                	test   eax,eax
c001a5e8:	75 28                	jne    c001a612 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5ea:	eb de                	jmp    c001a5ca <Krnl::getEnv(Process*, char const*)+0x18>
c001a5ec:	52                   	push   edx
c001a5ed:	52                   	push   edx
c001a5ee:	53                   	push   ebx
c001a5ef:	50                   	push   eax
c001a5f0:	e8 4f fc ff ff       	call   c001a244 <EnvVarContainer::getEnv(char const*)>
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	85 c0                	test   eax,eax
c001a5fa:	75 16                	jne    c001a612 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5fc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a600:	a1 b8 1a 03 c0       	mov    eax,ds:0xc0031ab8
c001a605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a609:	83 c4 08             	add    esp,0x8
c001a60c:	5b                   	pop    ebx
c001a60d:	e9 32 fc ff ff       	jmp    c001a244 <EnvVarContainer::getEnv(char const*)>
c001a612:	83 c4 08             	add    esp,0x8
c001a615:	5b                   	pop    ebx
c001a616:	c3                   	ret    

c001a617 <Krnl::setEnvSystem(char const*, char const*)>:
c001a617:	83 ec 10             	sub    esp,0x10
c001a61a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a61e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a622:	ff 35 b8 1a 03 c0    	push   DWORD PTR ds:0xc0031ab8
c001a628:	e8 55 fc ff ff       	call   c001a282 <EnvVarContainer::setEnv(char const*, char const*)>
c001a62d:	83 c4 1c             	add    esp,0x1c
c001a630:	c3                   	ret    

c001a631 <Krnl::setEnvUser(char const*, char const*)>:
c001a631:	a1 b4 1a 03 c0       	mov    eax,ds:0xc0031ab4
c001a636:	85 c0                	test   eax,eax
c001a638:	74 15                	je     c001a64f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a63a:	83 ec 10             	sub    esp,0x10
c001a63d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a641:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a645:	50                   	push   eax
c001a646:	e8 37 fc ff ff       	call   c001a282 <EnvVarContainer::setEnv(char const*, char const*)>
c001a64b:	83 c4 1c             	add    esp,0x1c
c001a64e:	c3                   	ret    
c001a64f:	c3                   	ret    

c001a650 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a654:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a65a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a65e:	e9 1f fc ff ff       	jmp    c001a282 <EnvVarContainer::setEnv(char const*, char const*)>

c001a663 <Krnl::deleteEnvSystem(char const*)>:
c001a663:	c3                   	ret    

c001a664 <Krnl::deleteEnvUser(char const*)>:
c001a664:	c3                   	ret    

c001a665 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a665:	c3                   	ret    

c001a666 <Krnl::newProcessEnv(Process*)>:
c001a666:	83 ec 28             	sub    esp,0x28
c001a669:	6a 0c                	push   0xc
c001a66b:	e8 38 52 ff ff       	call   c000f8a8 <malloc>
c001a670:	5a                   	pop    edx
c001a671:	59                   	pop    ecx
c001a672:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a676:	50                   	push   eax
c001a677:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a67b:	e8 e0 fe ff ff       	call   c001a560 <EnvVarContainer::EnvVarContainer(Process*)>
c001a680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a684:	83 c4 2c             	add    esp,0x2c
c001a687:	c3                   	ret    

c001a688 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a688:	57                   	push   edi
c001a689:	56                   	push   esi
c001a68a:	53                   	push   ebx
c001a68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a68f:	83 ec 0c             	sub    esp,0xc
c001a692:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a698:	6a 0c                	push   0xc
c001a69a:	e8 09 52 ff ff       	call   c000f8a8 <malloc>
c001a69f:	89 c3                	mov    ebx,eax
c001a6a1:	58                   	pop    eax
c001a6a2:	5a                   	pop    edx
c001a6a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6a7:	53                   	push   ebx
c001a6a8:	e8 b3 fe ff ff       	call   c001a560 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6ad:	8b 07                	mov    eax,DWORD PTR [edi]
c001a6af:	89 03                	mov    DWORD PTR [ebx],eax
c001a6b1:	c1 e0 03             	shl    eax,0x3
c001a6b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6b7:	e8 ec 51 ff ff       	call   c000f8a8 <malloc>
c001a6bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a6bf:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a6c1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a6c4:	c1 e1 03             	shl    ecx,0x3
c001a6c7:	89 c7                	mov    edi,eax
c001a6c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6cb:	83 c4 10             	add    esp,0x10
c001a6ce:	89 d8                	mov    eax,ebx
c001a6d0:	5b                   	pop    ebx
c001a6d1:	5e                   	pop    esi
c001a6d2:	5f                   	pop    edi
c001a6d3:	c3                   	ret    

c001a6d4 <Krnl::loadSystemEnv()>:
c001a6d4:	53                   	push   ebx
c001a6d5:	83 ec 14             	sub    esp,0x14
c001a6d8:	6a 0c                	push   0xc
c001a6da:	e8 c9 51 ff ff       	call   c000f8a8 <malloc>
c001a6df:	89 c3                	mov    ebx,eax
c001a6e1:	58                   	pop    eax
c001a6e2:	5a                   	pop    edx
c001a6e3:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c001a6e9:	53                   	push   ebx
c001a6ea:	e8 71 fe ff ff       	call   c001a560 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6f2:	89 1d b8 1a 03 c0    	mov    DWORD PTR ds:0xc0031ab8,ebx
c001a6f8:	e8 47 fe ff ff       	call   c001a544 <EnvVarContainer::__loadSystem()>
c001a6fd:	83 c4 18             	add    esp,0x18
c001a700:	5b                   	pop    ebx
c001a701:	c3                   	ret    

c001a702 <Krnl::loadUserEnv()>:
c001a702:	53                   	push   ebx
c001a703:	83 ec 14             	sub    esp,0x14
c001a706:	6a 0c                	push   0xc
c001a708:	e8 9b 51 ff ff       	call   c000f8a8 <malloc>
c001a70d:	89 c3                	mov    ebx,eax
c001a70f:	58                   	pop    eax
c001a710:	5a                   	pop    edx
c001a711:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c001a717:	53                   	push   ebx
c001a718:	e8 43 fe ff ff       	call   c001a560 <EnvVarContainer::EnvVarContainer(Process*)>
c001a71d:	89 1d b4 1a 03 c0    	mov    DWORD PTR ds:0xc0031ab4,ebx
c001a723:	83 c4 18             	add    esp,0x18
c001a726:	5b                   	pop    ebx
c001a727:	c3                   	ret    

c001a728 <Krnl::flushEnv()>:
c001a728:	c3                   	ret    

c001a729 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a729:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a72d:	8b 15 b4 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ab4
c001a733:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a739:	a1 b8 1a 03 c0       	mov    eax,ds:0xc0031ab8
c001a73e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a740:	03 01                	add    eax,DWORD PTR [ecx]
c001a742:	85 d2                	test   edx,edx
c001a744:	74 02                	je     c001a748 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a746:	03 02                	add    eax,DWORD PTR [edx]
c001a748:	c3                   	ret    

c001a749 <Krnl::getProcessEnvPair(Process*, int)>:
c001a749:	57                   	push   edi
c001a74a:	8b 0d b4 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031ab4
c001a750:	56                   	push   esi
c001a751:	85 c9                	test   ecx,ecx
c001a753:	53                   	push   ebx
c001a754:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a758:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a75c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a762:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a766:	8b 02                	mov    eax,DWORD PTR [edx]
c001a768:	75 47                	jne    c001a7b1 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a76a:	39 c3                	cmp    ebx,eax
c001a76c:	7c 47                	jl     c001a7b5 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a76e:	8b 15 b8 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ab8
c001a774:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a776:	01 c1                	add    ecx,eax
c001a778:	39 d9                	cmp    ecx,ebx
c001a77a:	7e 6c                	jle    c001a7e8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a77c:	51                   	push   ecx
c001a77d:	89 d9                	mov    ecx,ebx
c001a77f:	29 c1                	sub    ecx,eax
c001a781:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a784:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a788:	53                   	push   ebx
c001a789:	68 50 c5 02 c0       	push   0xc002c550
c001a78e:	e8 b0 86 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001a793:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a799:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a79b:	a1 b8 1a 03 c0       	mov    eax,ds:0xc0031ab8
c001a7a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a7a3:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a7a7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a7aa:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a7ad:	89 06                	mov    DWORD PTR [esi],eax
c001a7af:	eb 51                	jmp    c001a802 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a7b1:	39 c3                	cmp    ebx,eax
c001a7b3:	7d 05                	jge    c001a7ba <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a7b5:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7b8:	eb 20                	jmp    c001a7da <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a7ba:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a7bc:	8d 14 07             	lea    edx,[edi+eax*1]
c001a7bf:	39 da                	cmp    edx,ebx
c001a7c1:	7e 04                	jle    c001a7c7 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a7c3:	29 c3                	sub    ebx,eax
c001a7c5:	eb 10                	jmp    c001a7d7 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a7c7:	8b 0d b8 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031ab8
c001a7cd:	03 11                	add    edx,DWORD PTR [ecx]
c001a7cf:	39 da                	cmp    edx,ebx
c001a7d1:	7e 15                	jle    c001a7e8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7d3:	29 c3                	sub    ebx,eax
c001a7d5:	29 fb                	sub    ebx,edi
c001a7d7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a7da:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a7de:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a7e1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a7e4:	89 06                	mov    DWORD PTR [esi],eax
c001a7e6:	eb 1d                	jmp    c001a805 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a7e8:	83 ec 0c             	sub    esp,0xc
c001a7eb:	68 64 c5 02 c0       	push   0xc002c564
c001a7f0:	e8 18 00 00 00       	call   c001a80d <Krnl::panic(char const*)>
c001a7f5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a7fb:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a802:	83 c4 10             	add    esp,0x10
c001a805:	89 f0                	mov    eax,esi
c001a807:	5b                   	pop    ebx
c001a808:	5e                   	pop    esi
c001a809:	5f                   	pop    edi
c001a80a:	c2 04 00             	ret    0x4

c001a80d <Krnl::panic(char const*)>:
c001a80d:	55                   	push   ebp
c001a80e:	89 e5                	mov    ebp,esp
c001a810:	53                   	push   ebx
c001a811:	83 ec 0c             	sub    esp,0xc
c001a814:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a817:	fa                   	cli    
c001a818:	c6 05 c4 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ac4,0x1
c001a81f:	53                   	push   ebx
c001a820:	c6 05 a4 de 02 c0 00 	mov    BYTE PTR ds:0xc002dea4,0x0
c001a827:	68 7e c5 02 c0       	push   0xc002c57e
c001a82c:	e8 12 86 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001a831:	58                   	pop    eax
c001a832:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a837:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a83d:	e8 24 64 ff ff       	call   c0010c66 <setActiveTerminal(VgaText*)>
c001a842:	83 c4 0c             	add    esp,0xc
c001a845:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a84a:	6a 01                	push   0x1
c001a84c:	6a 0f                	push   0xf
c001a84e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a854:	e8 ab 5e ff ff       	call   c0010704 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a859:	58                   	pop    eax
c001a85a:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a85f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a865:	e8 42 66 ff ff       	call   c0010eac <VgaText::clearScreen()>
c001a86a:	58                   	pop    eax
c001a86b:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a870:	5a                   	pop    edx
c001a871:	68 97 c5 02 c0       	push   0xc002c597
c001a876:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87c:	e8 71 67 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a881:	59                   	pop    ecx
c001a882:	58                   	pop    eax
c001a883:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a888:	68 3c c6 02 c0       	push   0xc002c63c
c001a88d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a893:	e8 5a 67 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a898:	58                   	pop    eax
c001a899:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a89e:	5a                   	pop    edx
c001a89f:	68 b3 c5 02 c0       	push   0xc002c5b3
c001a8a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8aa:	e8 43 67 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a8af:	59                   	pop    ecx
c001a8b0:	58                   	pop    eax
c001a8b1:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a8b6:	53                   	push   ebx
c001a8b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8bd:	e8 30 67 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a8c2:	58                   	pop    eax
c001a8c3:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a8c8:	5a                   	pop    edx
c001a8c9:	68 d3 c5 02 c0       	push   0xc002c5d3
c001a8ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d4:	e8 19 67 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a8d9:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c001a8de:	83 c4 10             	add    esp,0x10
c001a8e1:	85 c0                	test   eax,eax
c001a8e3:	74 02                	je     c001a8e7 <Krnl::panic(char const*)+0xda>
c001a8e5:	ff d0                	call   eax
c001a8e7:	83 ec 0c             	sub    esp,0xc
c001a8ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8ed:	e8 7a 32 00 00       	call   c001db6c <Thr::getDriverNameFromAddress(unsigned long)>
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	89 c3                	mov    ebx,eax
c001a8f7:	85 c0                	test   eax,eax
c001a8f9:	0f 84 50 02 00 00    	je     c001ab4f <Krnl::panic(char const*)+0x342>
c001a8ff:	83 ec 08             	sub    esp,0x8
c001a902:	8b 15 d0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324d0
c001a908:	68 78 c6 02 c0       	push   0xc002c678
c001a90d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a913:	e8 da 66 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a918:	58                   	pop    eax
c001a919:	5a                   	pop    edx
c001a91a:	8b 15 d0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324d0
c001a920:	68 b3 c5 02 c0       	push   0xc002c5b3
c001a925:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a92b:	e8 c2 66 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a930:	59                   	pop    ecx
c001a931:	58                   	pop    eax
c001a932:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a937:	53                   	push   ebx
c001a938:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93e:	e8 af 66 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a943:	83 c4 10             	add    esp,0x10
c001a946:	83 ec 08             	sub    esp,0x8
c001a949:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a94e:	68 d2 c5 02 c0       	push   0xc002c5d2
c001a953:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a959:	e8 94 66 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a95e:	58                   	pop    eax
c001a95f:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a964:	5a                   	pop    edx
c001a965:	68 d0 c6 02 c0       	push   0xc002c6d0
c001a96a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a970:	e8 7d 66 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a975:	59                   	pop    ecx
c001a976:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a97b:	5b                   	pop    ebx
c001a97c:	68 10 c7 02 c0       	push   0xc002c710
c001a981:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a987:	e8 66 66 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a98c:	58                   	pop    eax
c001a98d:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a992:	5a                   	pop    edx
c001a993:	68 be c5 02 c0       	push   0xc002c5be
c001a998:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99e:	e8 4f 66 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a9a3:	59                   	pop    ecx
c001a9a4:	5b                   	pop    ebx
c001a9a5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a9a8:	68 d6 c5 02 c0       	push   0xc002c5d6
c001a9ad:	e8 91 84 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001a9b2:	58                   	pop    eax
c001a9b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9b6:	5a                   	pop    edx
c001a9b7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9ba:	68 df c5 02 c0       	push   0xc002c5df
c001a9bf:	e8 7f 84 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001a9c4:	59                   	pop    ecx
c001a9c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9c8:	5b                   	pop    ebx
c001a9c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9cb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9ce:	68 e8 c5 02 c0       	push   0xc002c5e8
c001a9d3:	e8 6b 84 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001a9d8:	58                   	pop    eax
c001a9d9:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a9de:	5a                   	pop    edx
c001a9df:	68 54 c7 02 c0       	push   0xc002c754
c001a9e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ea:	e8 03 66 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001a9ef:	59                   	pop    ecx
c001a9f0:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001a9f5:	5b                   	pop    ebx
c001a9f6:	68 f1 c5 02 c0       	push   0xc002c5f1
c001a9fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa01:	e8 ec 65 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001aa06:	0f 20 c0             	mov    eax,cr0
c001aa09:	5a                   	pop    edx
c001aa0a:	59                   	pop    ecx
c001aa0b:	50                   	push   eax
c001aa0c:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aa11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa17:	e8 fc 65 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001aa1c:	5b                   	pop    ebx
c001aa1d:	58                   	pop    eax
c001aa1e:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aa23:	68 fb c5 02 c0       	push   0xc002c5fb
c001aa28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa2e:	e8 bf 65 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001aa33:	0f 20 d0             	mov    eax,cr2
c001aa36:	5a                   	pop    edx
c001aa37:	59                   	pop    ecx
c001aa38:	50                   	push   eax
c001aa39:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aa3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa44:	e8 cf 65 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001aa49:	5b                   	pop    ebx
c001aa4a:	58                   	pop    eax
c001aa4b:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aa50:	68 05 c6 02 c0       	push   0xc002c605
c001aa55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa5b:	e8 92 65 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001aa60:	0f 20 d8             	mov    eax,cr3
c001aa63:	5a                   	pop    edx
c001aa64:	59                   	pop    ecx
c001aa65:	50                   	push   eax
c001aa66:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aa6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa71:	e8 a2 65 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001aa76:	5b                   	pop    ebx
c001aa77:	58                   	pop    eax
c001aa78:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aa7d:	68 18 c6 02 c0       	push   0xc002c618
c001aa82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa88:	e8 65 65 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001aa8d:	0f 20 e0             	mov    eax,cr4
c001aa90:	5a                   	pop    edx
c001aa91:	59                   	pop    ecx
c001aa92:	50                   	push   eax
c001aa93:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aa98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa9e:	e8 75 65 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001aaa3:	5b                   	pop    ebx
c001aaa4:	58                   	pop    eax
c001aaa5:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aaaa:	68 22 c6 02 c0       	push   0xc002c622
c001aaaf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aab5:	e8 38 65 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001aaba:	5a                   	pop    edx
c001aabb:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aac0:	59                   	pop    ecx
c001aac1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aac7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aaca:	50                   	push   eax
c001aacb:	e8 48 65 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001aad0:	5b                   	pop    ebx
c001aad1:	58                   	pop    eax
c001aad2:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aad7:	68 39 c6 02 c0       	push   0xc002c639
c001aadc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aae2:	e8 0b 65 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001aae7:	5a                   	pop    edx
c001aae8:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001aaed:	59                   	pop    ecx
c001aaee:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aaf4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001aaf7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aafa:	50                   	push   eax
c001aafb:	e8 18 65 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001ab00:	5b                   	pop    ebx
c001ab01:	58                   	pop    eax
c001ab02:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001ab07:	68 39 c6 02 c0       	push   0xc002c639
c001ab0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab12:	e8 db 64 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001ab17:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001ab1c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab1f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab25:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab27:	59                   	pop    ecx
c001ab28:	5b                   	pop    ebx
c001ab29:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab2c:	50                   	push   eax
c001ab2d:	e8 e6 64 ff ff       	call   c0011018 <VgaText::putx(unsigned int)>
c001ab32:	83 c4 10             	add    esp,0x10
c001ab35:	b2 fe                	mov    dl,0xfe
c001ab37:	e4 60                	in     al,0x60
c001ab39:	3c 1c                	cmp    al,0x1c
c001ab3b:	74 04                	je     c001ab41 <Krnl::panic(char const*)+0x334>
c001ab3d:	3c 5a                	cmp    al,0x5a
c001ab3f:	75 f6                	jne    c001ab37 <Krnl::panic(char const*)+0x32a>
c001ab41:	e4 64                	in     al,0x64
c001ab43:	a8 02                	test   al,0x2
c001ab45:	75 fa                	jne    c001ab41 <Krnl::panic(char const*)+0x334>
c001ab47:	88 d0                	mov    al,dl
c001ab49:	e6 64                	out    0x64,al
c001ab4b:	fa                   	cli    
c001ab4c:	f4                   	hlt    
c001ab4d:	eb e8                	jmp    c001ab37 <Krnl::panic(char const*)+0x32a>
c001ab4f:	50                   	push   eax
c001ab50:	50                   	push   eax
c001ab51:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001ab56:	68 a4 c6 02 c0       	push   0xc002c6a4
c001ab5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab61:	e8 8c 64 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001ab66:	58                   	pop    eax
c001ab67:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001ab6c:	5a                   	pop    edx
c001ab6d:	68 b3 c5 02 c0       	push   0xc002c5b3
c001ab72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab78:	e8 75 64 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001ab7d:	59                   	pop    ecx
c001ab7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab83:	5b                   	pop    ebx
c001ab84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab87:	83 c0 0c             	add    eax,0xc
c001ab8a:	50                   	push   eax
c001ab8b:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001ab90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab96:	e8 57 64 ff ff       	call   c0010ff2 <VgaText::puts(char const*)>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	e9 a3 fd ff ff       	jmp    c001a946 <Krnl::panic(char const*)+0x139>

c001aba3 <Net::switchEndian16(unsigned short)>:
c001aba3:	83 ec 04             	sub    esp,0x4
c001aba6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abaa:	66 89 04 24          	mov    WORD PTR [esp],ax
c001abae:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001abb2:	c1 f8 08             	sar    eax,0x8
c001abb5:	89 c2                	mov    edx,eax
c001abb7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001abbb:	c1 e0 08             	shl    eax,0x8
c001abbe:	09 d0                	or     eax,edx
c001abc0:	83 c4 04             	add    esp,0x4
c001abc3:	c3                   	ret    

c001abc4 <Net::switchEndian32(unsigned int)>:
c001abc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc8:	c1 e8 18             	shr    eax,0x18
c001abcb:	89 c2                	mov    edx,eax
c001abcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abd1:	c1 e0 08             	shl    eax,0x8
c001abd4:	25 00 00 ff 00       	and    eax,0xff0000
c001abd9:	09 c2                	or     edx,eax
c001abdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abdf:	c1 e8 08             	shr    eax,0x8
c001abe2:	25 00 ff 00 00       	and    eax,0xff00
c001abe7:	09 c2                	or     edx,eax
c001abe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abed:	c1 e0 18             	shl    eax,0x18
c001abf0:	09 d0                	or     eax,edx
c001abf2:	c3                   	ret    

c001abf3 <Net::crc32Calc(unsigned char*, int)>:
c001abf3:	83 ec 10             	sub    esp,0x10
c001abf6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001abfb:	75 07                	jne    c001ac04 <Net::crc32Calc(unsigned char*, int)+0x11>
c001abfd:	b8 00 00 00 00       	mov    eax,0x0
c001ac02:	eb 7c                	jmp    c001ac80 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac04:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac09:	7f 07                	jg     c001ac12 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac0b:	b8 00 00 00 00       	mov    eax,0x0
c001ac10:	eb 6e                	jmp    c001ac80 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac12:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac1a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac26:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac2a:	7d 4e                	jge    c001ac7a <Net::crc32Calc(unsigned char*, int)+0x87>
c001ac2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac34:	01 d0                	add    eax,edx
c001ac36:	8a 00                	mov    al,BYTE PTR [eax]
c001ac38:	0f b6 c0             	movzx  eax,al
c001ac3b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ac3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac47:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ac4c:	7f 26                	jg     c001ac74 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ac4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac52:	83 e0 01             	and    eax,0x1
c001ac55:	74 0d                	je     c001ac64 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ac57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac5b:	d1 e8                	shr    eax,1
c001ac5d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ac62:	eb 06                	jmp    c001ac6a <Net::crc32Calc(unsigned char*, int)+0x77>
c001ac64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac68:	d1 e8                	shr    eax,1
c001ac6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac6e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac72:	eb d3                	jmp    c001ac47 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ac74:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ac78:	eb a8                	jmp    c001ac22 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ac7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac7e:	f7 d0                	not    eax
c001ac80:	83 c4 10             	add    esp,0x10
c001ac83:	c3                   	ret    

c001ac84 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ac84:	57                   	push   edi
c001ac85:	56                   	push   esi
c001ac86:	83 ec 60             	sub    esp,0x60
c001ac89:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac90:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ac94:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ac9c:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001aca1:	7f 1a                	jg     c001acbd <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x39>
c001aca3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001acaa:	8d 50 01             	lea    edx,[eax+0x1]
c001acad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001acb4:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001acb7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001acbb:	eb df                	jmp    c001ac9c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x18>
c001acbd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001acc4:	8d 50 01             	lea    edx,[eax+0x1]
c001acc7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001acce:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001acd1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001acd8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001acdc:	8d 44 24 7a          	lea    eax,[esp+0x7a]
c001ace0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ace4:	c7 44 24 18 06 00 00 00 	mov    DWORD PTR [esp+0x18],0x6
c001acec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001acfc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ad00:	89 c6                	mov    esi,eax
c001ad02:	89 d7                	mov    edi,edx
c001ad04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad06:	89 f8                	mov    eax,edi
c001ad08:	89 f2                	mov    edx,esi
c001ad0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ad0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad12:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ad1a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad21:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad25:	8d 44 24 74          	lea    eax,[esp+0x74]
c001ad29:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ad2d:	c7 44 24 30 06 00 00 00 	mov    DWORD PTR [esp+0x30],0x6
c001ad35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ad3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad41:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad45:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ad49:	89 c6                	mov    esi,eax
c001ad4b:	89 d7                	mov    edi,edx
c001ad4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad4f:	89 f8                	mov    eax,edi
c001ad51:	89 f2                	mov    edx,esi
c001ad53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ad57:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ad5b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ad63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad6a:	0f b7 c0             	movzx  eax,ax
c001ad6d:	c1 f8 08             	sar    eax,0x8
c001ad70:	89 c1                	mov    ecx,eax
c001ad72:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad79:	8d 50 01             	lea    edx,[eax+0x1]
c001ad7c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ad83:	88 ca                	mov    dl,cl
c001ad85:	88 10                	mov    BYTE PTR [eax],dl
c001ad87:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ad8e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad95:	8d 48 01             	lea    ecx,[eax+0x1]
c001ad98:	89 8c 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],ecx
c001ad9f:	88 10                	mov    BYTE PTR [eax],dl
c001ada1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001ada5:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c001ada9:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001adb0:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001adb4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001adb8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001adbc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001adc0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001adc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001adc8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001adcc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001add0:	89 c6                	mov    esi,eax
c001add2:	89 d7                	mov    edi,edx
c001add4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001add6:	89 f8                	mov    eax,edi
c001add8:	89 f2                	mov    edx,esi
c001adda:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c001adde:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ade2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001ade6:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001aded:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001adf4:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001adf8:	50                   	push   eax
c001adf9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001adfd:	e8 f1 fd ff ff       	call   c001abf3 <Net::crc32Calc(unsigned char*, int)>
c001ae02:	83 c4 08             	add    esp,0x8
c001ae05:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ae09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae0d:	c1 e8 18             	shr    eax,0x18
c001ae10:	89 c1                	mov    ecx,eax
c001ae12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae19:	8d 50 01             	lea    edx,[eax+0x1]
c001ae1c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ae23:	88 ca                	mov    dl,cl
c001ae25:	88 10                	mov    BYTE PTR [eax],dl
c001ae27:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae2b:	c1 e8 10             	shr    eax,0x10
c001ae2e:	89 c1                	mov    ecx,eax
c001ae30:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae37:	8d 50 01             	lea    edx,[eax+0x1]
c001ae3a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ae41:	88 ca                	mov    dl,cl
c001ae43:	88 10                	mov    BYTE PTR [eax],dl
c001ae45:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae49:	c1 e8 08             	shr    eax,0x8
c001ae4c:	89 c1                	mov    ecx,eax
c001ae4e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae55:	8d 50 01             	lea    edx,[eax+0x1]
c001ae58:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ae5f:	88 ca                	mov    dl,cl
c001ae61:	88 10                	mov    BYTE PTR [eax],dl
c001ae63:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae6a:	8d 50 01             	lea    edx,[eax+0x1]
c001ae6d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ae74:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ae78:	88 10                	mov    BYTE PTR [eax],dl
c001ae7a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001ae7e:	83 c4 60             	add    esp,0x60
c001ae81:	5e                   	pop    esi
c001ae82:	5f                   	pop    edi
c001ae83:	c3                   	ret    

c001ae84 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae84:	57                   	push   edi
c001ae85:	56                   	push   esi
c001ae86:	83 ec 74             	sub    esp,0x74
c001ae89:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae90:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001ae94:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001ae9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aea3:	83 c0 0e             	add    eax,0xe
c001aea6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aeaa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aeb1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aeb5:	c7 44 24 30 06 00 00 00 	mov    DWORD PTR [esp+0x30],0x6
c001aebd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aec1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001aec5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aec9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aecd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001aed1:	89 c6                	mov    esi,eax
c001aed3:	89 d7                	mov    edi,edx
c001aed5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aed7:	89 f8                	mov    eax,edi
c001aed9:	89 f2                	mov    edx,esi
c001aedb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aedf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aee3:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aeeb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aef2:	83 c0 08             	add    eax,0x8
c001aef5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aef9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af00:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af04:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001af0c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001af10:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001af14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af18:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001af1c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001af20:	89 c6                	mov    esi,eax
c001af22:	89 d7                	mov    edi,edx
c001af24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af26:	89 f8                	mov    eax,edi
c001af28:	89 f2                	mov    edx,esi
c001af2a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c001af2e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af32:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001af3a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af41:	8d 50 01             	lea    edx,[eax+0x1]
c001af44:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001af4b:	8a 00                	mov    al,BYTE PTR [eax]
c001af4d:	0f b6 c0             	movzx  eax,al
c001af50:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001af55:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af5c:	8d 50 01             	lea    edx,[eax+0x1]
c001af5f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001af66:	8a 00                	mov    al,BYTE PTR [eax]
c001af68:	0f b6 c0             	movzx  eax,al
c001af6b:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001af70:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001af75:	c1 e0 08             	shl    eax,0x8
c001af78:	89 c2                	mov    edx,eax
c001af7a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af7e:	09 d0                	or     eax,edx
c001af80:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001af87:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001af8b:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001af93:	75 46                	jne    c001afdb <Net::unwrapEthernetFrame(unsigned char*, int)+0x157>
c001af95:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af9f:	66 3d dc 05          	cmp    ax,0x5dc
c001afa3:	77 16                	ja     c001afbb <Net::unwrapEthernetFrame(unsigned char*, int)+0x137>
c001afa5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001afac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001afaf:	0f b7 c0             	movzx  eax,ax
c001afb2:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001afb9:	eb 20                	jmp    c001afdb <Net::unwrapEthernetFrame(unsigned char*, int)+0x157>
c001afbb:	83 ec 0c             	sub    esp,0xc
c001afbe:	68 7c c7 02 c0       	push   0xc002c77c
c001afc3:	e8 7b 7e ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001afd2:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001afd6:	e9 12 01 00 00       	jmp    c001b0ed <Net::unwrapEthernetFrame(unsigned char*, int)+0x269>
c001afdb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001afe2:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001afe9:	8b 12                	mov    edx,DWORD PTR [edx]
c001afeb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001afef:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001aff6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001affa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001affe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b002:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b00a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b00e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b012:	89 c6                	mov    esi,eax
c001b014:	89 d7                	mov    edi,edx
c001b016:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b018:	89 f8                	mov    eax,edi
c001b01a:	89 f2                	mov    edx,esi
c001b01c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b020:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b024:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b02b:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b032:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b039:	8d 50 01             	lea    edx,[eax+0x1]
c001b03c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b043:	8a 00                	mov    al,BYTE PTR [eax]
c001b045:	0f b6 c0             	movzx  eax,al
c001b048:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b04c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b053:	8d 50 01             	lea    edx,[eax+0x1]
c001b056:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b05d:	8a 00                	mov    al,BYTE PTR [eax]
c001b05f:	0f b6 c0             	movzx  eax,al
c001b062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b066:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b06d:	8d 50 01             	lea    edx,[eax+0x1]
c001b070:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b077:	8a 00                	mov    al,BYTE PTR [eax]
c001b079:	0f b6 c0             	movzx  eax,al
c001b07c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b080:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b087:	8d 50 01             	lea    edx,[eax+0x1]
c001b08a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b091:	8a 00                	mov    al,BYTE PTR [eax]
c001b093:	0f b6 c0             	movzx  eax,al
c001b096:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b09a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b09e:	c1 e0 18             	shl    eax,0x18
c001b0a1:	89 c2                	mov    edx,eax
c001b0a3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b0a7:	c1 e0 10             	shl    eax,0x10
c001b0aa:	09 c2                	or     edx,eax
c001b0ac:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b0b0:	c1 e0 08             	shl    eax,0x8
c001b0b3:	09 d0                	or     eax,edx
c001b0b5:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b0b9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b0bd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0c4:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b0c8:	83 e8 04             	sub    eax,0x4
c001b0cb:	83 ec 08             	sub    esp,0x8
c001b0ce:	50                   	push   eax
c001b0cf:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b0d3:	e8 1b fb ff ff       	call   c001abf3 <Net::crc32Calc(unsigned char*, int)>
c001b0d8:	83 c4 10             	add    esp,0x10
c001b0db:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b0df:	0f 94 c2             	sete   dl
c001b0e2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0e9:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b0ec:	90                   	nop
c001b0ed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0f4:	83 c4 74             	add    esp,0x74
c001b0f7:	5e                   	pop    esi
c001b0f8:	5f                   	pop    edi
c001b0f9:	c2 04 00             	ret    0x4

c001b0fc <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b0fc:	55                   	push   ebp
c001b0fd:	57                   	push   edi
c001b0fe:	56                   	push   esi
c001b0ff:	53                   	push   ebx
c001b100:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b106:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b10d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b10f:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b112:	80 fb 40             	cmp    bl,0x40
c001b115:	75 1b                	jne    c001b132 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b117:	8a 16                	mov    dl,BYTE PTR [esi]
c001b119:	84 d2                	test   dl,dl
c001b11b:	0f 84 f1 00 00 00    	je     c001b212 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b121:	8d 46 01             	lea    eax,[esi+0x1]
c001b124:	80 fa 3a             	cmp    dl,0x3a
c001b127:	74 04                	je     c001b12d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b129:	89 c6                	mov    esi,eax
c001b12b:	eb ea                	jmp    c001b117 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b12d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b130:	89 c6                	mov    esi,eax
c001b132:	50                   	push   eax
c001b133:	6a 40                	push   0x40
c001b135:	6a 00                	push   0x0
c001b137:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b13b:	50                   	push   eax
c001b13c:	e8 2b 56 fe ff       	call   c000076c <memset>
c001b141:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b148:	31 c0                	xor    eax,eax
c001b14a:	83 c4 10             	add    esp,0x10
c001b14d:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b14f:	84 c9                	test   cl,cl
c001b151:	0f 84 bb 00 00 00    	je     c001b212 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b157:	3d c7 00 00 00       	cmp    eax,0xc7
c001b15c:	0f 8f b0 00 00 00    	jg     c001b212 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b162:	80 f9 0a             	cmp    cl,0xa
c001b165:	0f 85 98 00 00 00    	jne    c001b203 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b16b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b170:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b174:	a8 df                	test   al,0xdf
c001b176:	0f 94 c1             	sete   cl
c001b179:	3c 23                	cmp    al,0x23
c001b17b:	0f 94 c2             	sete   dl
c001b17e:	08 d1                	or     cl,dl
c001b180:	75 4a                	jne    c001b1cc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b182:	8d 50 f7             	lea    edx,[eax-0x9]
c001b185:	80 fa 01             	cmp    dl,0x1
c001b188:	76 42                	jbe    c001b1cc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b18a:	3c 5b                	cmp    al,0x5b
c001b18c:	75 42                	jne    c001b1d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b18e:	80 fb 40             	cmp    bl,0x40
c001b191:	75 39                	jne    c001b1cc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b193:	83 ec 0c             	sub    esp,0xc
c001b196:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b19a:	52                   	push   edx
c001b19b:	e8 e8 55 fe ff       	call   c0000788 <strlen>
c001b1a0:	83 c4 10             	add    esp,0x10
c001b1a3:	83 f8 3f             	cmp    eax,0x3f
c001b1a6:	77 6a                	ja     c001b212 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b1a8:	50                   	push   eax
c001b1a9:	50                   	push   eax
c001b1aa:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b1ae:	52                   	push   edx
c001b1af:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b1b3:	52                   	push   edx
c001b1b4:	e8 6f 56 fe ff       	call   c0000828 <strcpy>
c001b1b9:	58                   	pop    eax
c001b1ba:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b1be:	52                   	push   edx
c001b1bf:	e8 c4 55 fe ff       	call   c0000788 <strlen>
c001b1c4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b1c9:	83 c4 10             	add    esp,0x10
c001b1cc:	31 d2                	xor    edx,edx
c001b1ce:	eb 3a                	jmp    c001b20a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b1d0:	80 fb 40             	cmp    bl,0x40
c001b1d3:	74 06                	je     c001b1db <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b1d5:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b1d9:	eb 20                	jmp    c001b1fb <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b1db:	50                   	push   eax
c001b1dc:	50                   	push   eax
c001b1dd:	55                   	push   ebp
c001b1de:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b1e2:	50                   	push   eax
c001b1e3:	e8 cc 56 fe ff       	call   c00008b4 <strcmp>
c001b1e8:	83 c4 10             	add    esp,0x10
c001b1eb:	85 c0                	test   eax,eax
c001b1ed:	75 dd                	jne    c001b1cc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b1ef:	eb e4                	jmp    c001b1d5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b1f1:	8d 50 01             	lea    edx,[eax+0x1]
c001b1f4:	80 f9 3d             	cmp    cl,0x3d
c001b1f7:	74 1d                	je     c001b216 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b1f9:	89 d0                	mov    eax,edx
c001b1fb:	8a 08                	mov    cl,BYTE PTR [eax]
c001b1fd:	84 c9                	test   cl,cl
c001b1ff:	75 f0                	jne    c001b1f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b201:	eb 0f                	jmp    c001b212 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b203:	8d 50 01             	lea    edx,[eax+0x1]
c001b206:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b20a:	47                   	inc    edi
c001b20b:	89 d0                	mov    eax,edx
c001b20d:	e9 3b ff ff ff       	jmp    c001b14d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b212:	31 c0                	xor    eax,eax
c001b214:	eb 33                	jmp    c001b249 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b216:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b21a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b21d:	50                   	push   eax
c001b21e:	50                   	push   eax
c001b21f:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b223:	50                   	push   eax
c001b224:	56                   	push   esi
c001b225:	e8 8a 56 fe ff       	call   c00008b4 <strcmp>
c001b22a:	83 c4 10             	add    esp,0x10
c001b22d:	85 c0                	test   eax,eax
c001b22f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b233:	75 97                	jne    c001b1cc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b235:	51                   	push   ecx
c001b236:	51                   	push   ecx
c001b237:	52                   	push   edx
c001b238:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b23f:	e8 e4 55 fe ff       	call   c0000828 <strcpy>
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	b0 01                	mov    al,0x1
c001b249:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b24f:	5b                   	pop    ebx
c001b250:	5e                   	pop    esi
c001b251:	5f                   	pop    edi
c001b252:	5d                   	pop    ebp
c001b253:	c3                   	ret    

c001b254 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b254:	57                   	push   edi
c001b255:	56                   	push   esi
c001b256:	53                   	push   ebx
c001b257:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b25d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b264:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b26b:	53                   	push   ebx
c001b26c:	e8 17 55 fe ff       	call   c0000788 <strlen>
c001b271:	89 34 24             	mov    DWORD PTR [esp],esi
c001b274:	89 c7                	mov    edi,eax
c001b276:	e8 0d 55 fe ff       	call   c0000788 <strlen>
c001b27b:	83 c4 10             	add    esp,0x10
c001b27e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b282:	3d ff 00 00 00       	cmp    eax,0xff
c001b287:	0f 87 d3 00 00 00    	ja     c001b360 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b28d:	57                   	push   edi
c001b28e:	57                   	push   edi
c001b28f:	56                   	push   esi
c001b290:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b294:	56                   	push   esi
c001b295:	e8 8e 55 fe ff       	call   c0000828 <strcpy>
c001b29a:	58                   	pop    eax
c001b29b:	5a                   	pop    edx
c001b29c:	68 d1 cc 02 c0       	push   0xc002ccd1
c001b2a1:	56                   	push   esi
c001b2a2:	e8 c1 56 fe ff       	call   c0000968 <strcat>
c001b2a7:	59                   	pop    ecx
c001b2a8:	5f                   	pop    edi
c001b2a9:	53                   	push   ebx
c001b2aa:	56                   	push   esi
c001b2ab:	e8 b8 56 fe ff       	call   c0000968 <strcat>
c001b2b0:	58                   	pop    eax
c001b2b1:	5a                   	pop    edx
c001b2b2:	68 c8 c7 02 c0       	push   0xc002c7c8
c001b2b7:	56                   	push   esi
c001b2b8:	e8 ab 56 fe ff       	call   c0000968 <strcat>
c001b2bd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b2c4:	e8 df 45 ff ff       	call   c000f8a8 <malloc>
c001b2c9:	83 c4 0c             	add    esp,0xc
c001b2cc:	89 c3                	mov    ebx,eax
c001b2ce:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c001b2d4:	56                   	push   esi
c001b2d5:	50                   	push   eax
c001b2d6:	e8 c7 80 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	85 db                	test   ebx,ebx
c001b2e0:	74 7e                	je     c001b360 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b2e2:	51                   	push   ecx
c001b2e3:	51                   	push   ecx
c001b2e4:	6a 01                	push   0x1
c001b2e6:	53                   	push   ebx
c001b2e7:	e8 1a 81 ff ff       	call   c0013406 <File::open(FileOpenMode)>
c001b2ec:	83 c4 10             	add    esp,0x10
c001b2ef:	85 c0                	test   eax,eax
c001b2f1:	74 08                	je     c001b2fb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b2f3:	83 ec 0c             	sub    esp,0xc
c001b2f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2f8:	53                   	push   ebx
c001b2f9:	eb 5f                	jmp    c001b35a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b2fb:	52                   	push   edx
c001b2fc:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b300:	50                   	push   eax
c001b301:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b305:	50                   	push   eax
c001b306:	53                   	push   ebx
c001b307:	e8 a6 83 ff ff       	call   c00136b2 <File::stat(unsigned long long*, bool*)>
c001b30c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b310:	83 c4 10             	add    esp,0x10
c001b313:	89 c1                	mov    ecx,eax
c001b315:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b319:	74 31                	je     c001b34c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b31b:	83 ec 0c             	sub    esp,0xc
c001b31e:	50                   	push   eax
c001b31f:	e8 84 45 ff ff       	call   c000f8a8 <malloc>
c001b324:	89 c6                	mov    esi,eax
c001b326:	58                   	pop    eax
c001b327:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b329:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b32d:	52                   	push   edx
c001b32e:	56                   	push   esi
c001b32f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b333:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b337:	53                   	push   ebx
c001b338:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b33b:	83 c4 20             	add    esp,0x20
c001b33e:	85 c0                	test   eax,eax
c001b340:	75 0a                	jne    c001b34c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b342:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b346:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b34a:	74 18                	je     c001b364 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b34c:	83 ec 0c             	sub    esp,0xc
c001b34f:	53                   	push   ebx
c001b350:	e8 0f 81 ff ff       	call   c0013464 <File::close()>
c001b355:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b357:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b35a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b35d:	83 c4 10             	add    esp,0x10
c001b360:	31 c0                	xor    eax,eax
c001b362:	eb 3b                	jmp    c001b39f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b364:	83 ec 0c             	sub    esp,0xc
c001b367:	53                   	push   ebx
c001b368:	e8 f7 80 ff ff       	call   c0013464 <File::close()>
c001b36d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b36f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b372:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b375:	83 c4 0c             	add    esp,0xc
c001b378:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b37f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b386:	56                   	push   esi
c001b387:	e8 70 fd ff ff       	call   c001b0fc <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b38c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b38f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b393:	e8 20 45 ff ff       	call   c000f8b8 <free>
c001b398:	83 c4 10             	add    esp,0x10
c001b39b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b39f:	81 c4 20 01 00 00    	add    esp,0x120
c001b3a5:	5b                   	pop    ebx
c001b3a6:	5e                   	pop    esi
c001b3a7:	5f                   	pop    edi
c001b3a8:	c3                   	ret    

c001b3a9 <Reg::getLine(char*, char*, char*)>:
c001b3a9:	57                   	push   edi
c001b3aa:	56                   	push   esi
c001b3ab:	53                   	push   ebx
c001b3ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3b0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b3b4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b3b8:	57                   	push   edi
c001b3b9:	56                   	push   esi
c001b3ba:	53                   	push   ebx
c001b3bb:	68 cd c7 02 c0       	push   0xc002c7cd
c001b3c0:	e8 8f fe ff ff       	call   c001b254 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	84 c0                	test   al,al
c001b3ca:	75 10                	jne    c001b3dc <Reg::getLine(char*, char*, char*)+0x33>
c001b3cc:	57                   	push   edi
c001b3cd:	56                   	push   esi
c001b3ce:	53                   	push   ebx
c001b3cf:	68 f2 c7 02 c0       	push   0xc002c7f2
c001b3d4:	e8 7b fe ff ff       	call   c001b254 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b3d9:	83 c4 10             	add    esp,0x10
c001b3dc:	5b                   	pop    ebx
c001b3dd:	5e                   	pop    esi
c001b3de:	5f                   	pop    edi
c001b3df:	c3                   	ret    

c001b3e0 <Reg::readInt(char*, char*, int*)>:
c001b3e0:	55                   	push   ebp
c001b3e1:	57                   	push   edi
c001b3e2:	56                   	push   esi
c001b3e3:	53                   	push   ebx
c001b3e4:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b3ea:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b3ee:	57                   	push   edi
c001b3ef:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b3f6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b3fd:	e8 a7 ff ff ff       	call   c001b3a9 <Reg::getLine(char*, char*, char*)>
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	84 c0                	test   al,al
c001b407:	0f 84 b3 00 00 00    	je     c001b4c0 <Reg::readInt(char*, char*, int*)+0xe0>
c001b40d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b411:	80 fa 2b             	cmp    dl,0x2b
c001b414:	74 0c                	je     c001b422 <Reg::readInt(char*, char*, int*)+0x42>
c001b416:	80 fa 2d             	cmp    dl,0x2d
c001b419:	75 0e                	jne    c001b429 <Reg::readInt(char*, char*, int*)+0x49>
c001b41b:	ba 01 00 00 00       	mov    edx,0x1
c001b420:	eb 0b                	jmp    c001b42d <Reg::readInt(char*, char*, int*)+0x4d>
c001b422:	ba 01 00 00 00       	mov    edx,0x1
c001b427:	eb 02                	jmp    c001b42b <Reg::readInt(char*, char*, int*)+0x4b>
c001b429:	31 d2                	xor    edx,edx
c001b42b:	31 c0                	xor    eax,eax
c001b42d:	be 0a 00 00 00       	mov    esi,0xa
c001b432:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b437:	75 20                	jne    c001b459 <Reg::readInt(char*, char*, int*)+0x79>
c001b439:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b43d:	80 f9 78             	cmp    cl,0x78
c001b440:	75 0a                	jne    c001b44c <Reg::readInt(char*, char*, int*)+0x6c>
c001b442:	83 c2 02             	add    edx,0x2
c001b445:	be 10 00 00 00       	mov    esi,0x10
c001b44a:	eb 0d                	jmp    c001b459 <Reg::readInt(char*, char*, int*)+0x79>
c001b44c:	80 f9 62             	cmp    cl,0x62
c001b44f:	75 08                	jne    c001b459 <Reg::readInt(char*, char*, int*)+0x79>
c001b451:	83 c2 02             	add    edx,0x2
c001b454:	be 02 00 00 00       	mov    esi,0x2
c001b459:	01 d7                	add    edi,edx
c001b45b:	31 d2                	xor    edx,edx
c001b45d:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b45f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b463:	80 fb 0d             	cmp    bl,0xd
c001b466:	0f 94 c3             	sete   bl
c001b469:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b46e:	0f 94 c1             	sete   cl
c001b471:	08 cb                	or     bl,cl
c001b473:	75 3a                	jne    c001b4af <Reg::readInt(char*, char*, int*)+0xcf>
c001b475:	0f af d6             	imul   edx,esi
c001b478:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b47d:	83 fe 10             	cmp    esi,0x10
c001b480:	75 26                	jne    c001b4a8 <Reg::readInt(char*, char*, int*)+0xc8>
c001b482:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b486:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b489:	89 e9                	mov    ecx,ebp
c001b48b:	80 f9 05             	cmp    cl,0x5
c001b48e:	77 06                	ja     c001b496 <Reg::readInt(char*, char*, int*)+0xb6>
c001b490:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b494:	eb 16                	jmp    c001b4ac <Reg::readInt(char*, char*, int*)+0xcc>
c001b496:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b49a:	83 e9 61             	sub    ecx,0x61
c001b49d:	80 f9 05             	cmp    cl,0x5
c001b4a0:	77 06                	ja     c001b4a8 <Reg::readInt(char*, char*, int*)+0xc8>
c001b4a2:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b4a6:	eb 04                	jmp    c001b4ac <Reg::readInt(char*, char*, int*)+0xcc>
c001b4a8:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b4ac:	47                   	inc    edi
c001b4ad:	eb ae                	jmp    c001b45d <Reg::readInt(char*, char*, int*)+0x7d>
c001b4af:	84 c0                	test   al,al
c001b4b1:	74 02                	je     c001b4b5 <Reg::readInt(char*, char*, int*)+0xd5>
c001b4b3:	f7 da                	neg    edx
c001b4b5:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b4bc:	89 10                	mov    DWORD PTR [eax],edx
c001b4be:	88 d8                	mov    al,bl
c001b4c0:	81 c4 ec 00 00 00    	add    esp,0xec
c001b4c6:	5b                   	pop    ebx
c001b4c7:	5e                   	pop    esi
c001b4c8:	5f                   	pop    edi
c001b4c9:	5d                   	pop    ebp
c001b4ca:	c3                   	ret    

c001b4cb <Reg::readString(char*, char*, char*, int)>:
c001b4cb:	57                   	push   edi
c001b4cc:	56                   	push   esi
c001b4cd:	53                   	push   ebx
c001b4ce:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b4d4:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b4db:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b4df:	57                   	push   edi
c001b4e0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b4e7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b4ee:	e8 b6 fe ff ff       	call   c001b3a9 <Reg::getLine(char*, char*, char*)>
c001b4f3:	83 c4 10             	add    esp,0x10
c001b4f6:	89 c6                	mov    esi,eax
c001b4f8:	84 c0                	test   al,al
c001b4fa:	74 44                	je     c001b540 <Reg::readString(char*, char*, char*, int)+0x75>
c001b4fc:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b503:	31 c0                	xor    eax,eax
c001b505:	4a                   	dec    edx
c001b506:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b509:	84 c9                	test   cl,cl
c001b50b:	74 0f                	je     c001b51c <Reg::readString(char*, char*, char*, int)+0x51>
c001b50d:	39 c2                	cmp    edx,eax
c001b50f:	7e 0b                	jle    c001b51c <Reg::readString(char*, char*, char*, int)+0x51>
c001b511:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b514:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b519:	40                   	inc    eax
c001b51a:	eb ea                	jmp    c001b506 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b51c:	83 ec 0c             	sub    esp,0xc
c001b51f:	53                   	push   ebx
c001b520:	e8 63 52 fe ff       	call   c0000788 <strlen>
c001b525:	83 c4 10             	add    esp,0x10
c001b528:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b52d:	75 11                	jne    c001b540 <Reg::readString(char*, char*, char*, int)+0x75>
c001b52f:	83 ec 0c             	sub    esp,0xc
c001b532:	53                   	push   ebx
c001b533:	e8 50 52 fe ff       	call   c0000788 <strlen>
c001b538:	83 c4 10             	add    esp,0x10
c001b53b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b540:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b546:	89 f0                	mov    eax,esi
c001b548:	5b                   	pop    ebx
c001b549:	5e                   	pop    esi
c001b54a:	5f                   	pop    edi
c001b54b:	c3                   	ret    

c001b54c <Reg::readBool(char*, char*, bool*)>:
c001b54c:	83 ec 20             	sub    esp,0x20
c001b54f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b553:	50                   	push   eax
c001b554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b558:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b55c:	e8 7f fe ff ff       	call   c001b3e0 <Reg::readInt(char*, char*, int*)>
c001b561:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b566:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b56a:	0f 95 02             	setne  BYTE PTR [edx]
c001b56d:	83 c4 2c             	add    esp,0x2c
c001b570:	c3                   	ret    

c001b571 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b571:	53                   	push   ebx
c001b572:	83 ec 1c             	sub    esp,0x1c
c001b575:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b579:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b57d:	50                   	push   eax
c001b57e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b586:	e8 c1 ff ff ff       	call   c001b54c <Reg::readBool(char*, char*, bool*)>
c001b58b:	83 c4 10             	add    esp,0x10
c001b58e:	84 c0                	test   al,al
c001b590:	74 04                	je     c001b596 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b592:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b596:	88 d8                	mov    al,bl
c001b598:	83 c4 18             	add    esp,0x18
c001b59b:	5b                   	pop    ebx
c001b59c:	c3                   	ret    

c001b59d <Reg::readIntWithDefault(char*, char*, int)>:
c001b59d:	53                   	push   ebx
c001b59e:	83 ec 1c             	sub    esp,0x1c
c001b5a1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b5a5:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b5a9:	50                   	push   eax
c001b5aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5b2:	e8 29 fe ff ff       	call   c001b3e0 <Reg::readInt(char*, char*, int*)>
c001b5b7:	83 c4 10             	add    esp,0x10
c001b5ba:	84 c0                	test   al,al
c001b5bc:	74 04                	je     c001b5c2 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b5be:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b5c2:	89 d8                	mov    eax,ebx
c001b5c4:	83 c4 18             	add    esp,0x18
c001b5c7:	5b                   	pop    ebx
c001b5c8:	c3                   	ret    

c001b5c9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b5c9:	57                   	push   edi
c001b5ca:	56                   	push   esi
c001b5cb:	56                   	push   esi
c001b5cc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b5d0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b5d4:	56                   	push   esi
c001b5d5:	57                   	push   edi
c001b5d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5de:	e8 e8 fe ff ff       	call   c001b4cb <Reg::readString(char*, char*, char*, int)>
c001b5e3:	83 c4 10             	add    esp,0x10
c001b5e6:	84 c0                	test   al,al
c001b5e8:	75 1a                	jne    c001b604 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b5ea:	51                   	push   ecx
c001b5eb:	56                   	push   esi
c001b5ec:	6a 00                	push   0x0
c001b5ee:	57                   	push   edi
c001b5ef:	e8 78 51 fe ff       	call   c000076c <memset>
c001b5f4:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b5f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b5fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5fd:	83 c4 10             	add    esp,0x10
c001b600:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b604:	89 f8                	mov    eax,edi
c001b606:	5a                   	pop    edx
c001b607:	5e                   	pop    esi
c001b608:	5f                   	pop    edi
c001b609:	c3                   	ret    

c001b60a <Sys::eject(regs*)>:
c001b60a:	83 ec 0c             	sub    esp,0xc
c001b60d:	83 ca ff             	or     edx,0xffffffff
c001b610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b614:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b617:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b61c:	83 e9 41             	sub    ecx,0x41
c001b61f:	83 f9 19             	cmp    ecx,0x19
c001b622:	77 18                	ja     c001b63c <Sys::eject(regs*)+0x32>
c001b624:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c001b62b:	85 c9                	test   ecx,ecx
c001b62d:	74 0d                	je     c001b63c <Sys::eject(regs*)+0x32>
c001b62f:	83 ec 0c             	sub    esp,0xc
c001b632:	51                   	push   ecx
c001b633:	e8 18 b1 ff ff       	call   c0016750 <LogicalDisk::eject()>
c001b638:	83 c4 10             	add    esp,0x10
c001b63b:	99                   	cdq    
c001b63c:	83 c4 0c             	add    esp,0xc
c001b63f:	c3                   	ret    

c001b640 <Sys::exit(regs*)>:
c001b640:	83 ec 18             	sub    esp,0x18
c001b643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b647:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b64a:	e8 80 38 00 00       	call   c001eecf <terminateTask(int)>
c001b64f:	83 c8 ff             	or     eax,0xffffffff
c001b652:	83 c4 1c             	add    esp,0x1c
c001b655:	89 c2                	mov    edx,eax
c001b657:	c3                   	ret    

c001b658 <Sys::getCwd(regs*)>:
c001b658:	83 ec 10             	sub    esp,0x10
c001b65b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b65f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b662:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b665:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b66a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b66d:	e8 32 7b ff ff       	call   c00131a4 <Fs::getcwd(Process*, char*, int)>
c001b672:	83 c4 1c             	add    esp,0x1c
c001b675:	99                   	cdq    
c001b676:	c3                   	ret    

c001b677 <Sys::getPID(regs*)>:
c001b677:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b67c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b67f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b681:	99                   	cdq    
c001b682:	c3                   	ret    

c001b683 <Sys::getRAMData(regs*)>:
c001b683:	8b 0d b4 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efb4
c001b689:	6b 05 b0 ef 02 c0 64 	imul   eax,DWORD PTR ds:0xc002efb0,0x64
c001b690:	99                   	cdq    
c001b691:	f7 f9                	idiv   ecx
c001b693:	c1 e0 18             	shl    eax,0x18
c001b696:	09 c8                	or     eax,ecx
c001b698:	99                   	cdq    
c001b699:	c3                   	ret    

c001b69a <Sys::getVGAPtr(regs*)>:
c001b69a:	55                   	push   ebp
c001b69b:	57                   	push   edi
c001b69c:	56                   	push   esi
c001b69d:	53                   	push   ebx
c001b69e:	83 ec 18             	sub    esp,0x18
c001b6a1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b6a5:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b6a8:	e8 04 33 00 00       	call   c001e9b1 <Thr::processFromPID(int)>
c001b6ad:	83 c4 10             	add    esp,0x10
c001b6b0:	89 c1                	mov    ecx,eax
c001b6b2:	b8 01 00 00 00       	mov    eax,0x1
c001b6b7:	85 c9                	test   ecx,ecx
c001b6b9:	74 59                	je     c001b714 <Sys::getVGAPtr(regs*)+0x7a>
c001b6bb:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b6c1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b6c5:	74 0c                	je     c001b6d3 <Sys::getVGAPtr(regs*)+0x39>
c001b6c7:	83 ec 0c             	sub    esp,0xc
c001b6ca:	53                   	push   ebx
c001b6cb:	e8 96 55 ff ff       	call   c0010c66 <setActiveTerminal(VgaText*)>
c001b6d0:	83 c4 10             	add    esp,0x10
c001b6d3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b6d6:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b6d9:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b6de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b6e0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b6e3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b6e6:	81 c3 82 00 00 00    	add    ebx,0x82
c001b6ec:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b6f2:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b6f5:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b6f8:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b6fe:	50                   	push   eax
c001b6ff:	50                   	push   eax
c001b700:	53                   	push   ebx
c001b701:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b704:	05 a8 0f 00 00       	add    eax,0xfa8
c001b709:	50                   	push   eax
c001b70a:	e8 19 51 fe ff       	call   c0000828 <strcpy>
c001b70f:	83 c4 10             	add    esp,0x10
c001b712:	31 c0                	xor    eax,eax
c001b714:	83 c4 0c             	add    esp,0xc
c001b717:	31 d2                	xor    edx,edx
c001b719:	5b                   	pop    ebx
c001b71a:	5e                   	pop    esi
c001b71b:	5f                   	pop    edi
c001b71c:	5d                   	pop    ebp
c001b71d:	c3                   	ret    

c001b71e <Sys::loadDLL(regs*)>:
c001b71e:	56                   	push   esi
c001b71f:	53                   	push   ebx
c001b720:	31 d2                	xor    edx,edx
c001b722:	51                   	push   ecx
c001b723:	b8 01 00 00 00       	mov    eax,0x1
c001b728:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b72c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b730:	0f 84 8c 00 00 00    	je     c001b7c2 <Sys::loadDLL(regs*)+0xa4>
c001b736:	83 ec 0c             	sub    esp,0xc
c001b739:	68 14 01 00 00       	push   0x114
c001b73e:	e8 65 41 ff ff       	call   c000f8a8 <malloc>
c001b743:	83 c4 0c             	add    esp,0xc
c001b746:	89 c3                	mov    ebx,eax
c001b748:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b74d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b750:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b753:	53                   	push   ebx
c001b754:	e8 49 7c ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001b759:	83 c4 10             	add    esp,0x10
c001b75c:	31 d2                	xor    edx,edx
c001b75e:	b8 02 00 00 00       	mov    eax,0x2
c001b763:	85 db                	test   ebx,ebx
c001b765:	74 5b                	je     c001b7c2 <Sys::loadDLL(regs*)+0xa4>
c001b767:	83 ec 0c             	sub    esp,0xc
c001b76a:	53                   	push   ebx
c001b76b:	e8 04 7f ff ff       	call   c0013674 <File::exists()>
c001b770:	83 c4 10             	add    esp,0x10
c001b773:	84 c0                	test   al,al
c001b775:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b777:	75 11                	jne    c001b78a <Sys::loadDLL(regs*)+0x6c>
c001b779:	83 ec 0c             	sub    esp,0xc
c001b77c:	53                   	push   ebx
c001b77d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	b8 03 00 00 00       	mov    eax,0x3
c001b788:	eb 36                	jmp    c001b7c0 <Sys::loadDLL(regs*)+0xa2>
c001b78a:	83 ec 0c             	sub    esp,0xc
c001b78d:	53                   	push   ebx
c001b78e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b791:	58                   	pop    eax
c001b792:	5a                   	pop    edx
c001b793:	6a 00                	push   0x0
c001b795:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b798:	e8 20 24 00 00       	call   c001dbbd <Thr::loadDLL(char const*, bool)>
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	89 c1                	mov    ecx,eax
c001b7a2:	31 d2                	xor    edx,edx
c001b7a4:	b8 04 00 00 00       	mov    eax,0x4
c001b7a9:	85 c9                	test   ecx,ecx
c001b7ab:	74 15                	je     c001b7c2 <Sys::loadDLL(regs*)+0xa4>
c001b7ad:	53                   	push   ebx
c001b7ae:	53                   	push   ebx
c001b7af:	ff 35 68 ef 02 c0    	push   DWORD PTR ds:0xc002ef68
c001b7b5:	51                   	push   ecx
c001b7b6:	e8 2d 26 00 00       	call   c001dde8 <Thr::executeDLL(unsigned long, void*)>
c001b7bb:	83 c4 10             	add    esp,0x10
c001b7be:	31 c0                	xor    eax,eax
c001b7c0:	31 d2                	xor    edx,edx
c001b7c2:	59                   	pop    ecx
c001b7c3:	5b                   	pop    ebx
c001b7c4:	5e                   	pop    esi
c001b7c5:	c3                   	ret    

c001b7c6 <Sys::read(regs*)>:
c001b7c6:	57                   	push   edi
c001b7c7:	56                   	push   esi
c001b7c8:	53                   	push   ebx
c001b7c9:	83 ec 10             	sub    esp,0x10
c001b7cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b7d3:	83 f8 02             	cmp    eax,0x2
c001b7d6:	77 10                	ja     c001b7e8 <Sys::read(regs*)+0x22>
c001b7d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7e0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b7e6:	eb 0e                	jmp    c001b7f6 <Sys::read(regs*)+0x30>
c001b7e8:	83 ec 0c             	sub    esp,0xc
c001b7eb:	50                   	push   eax
c001b7ec:	e8 f6 60 ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001b7f1:	83 c4 10             	add    esp,0x10
c001b7f4:	89 c1                	mov    ecx,eax
c001b7f6:	83 c8 ff             	or     eax,0xffffffff
c001b7f9:	85 c9                	test   ecx,ecx
c001b7fb:	89 c2                	mov    edx,eax
c001b7fd:	74 28                	je     c001b827 <Sys::read(regs*)+0x61>
c001b7ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b807:	31 ff                	xor    edi,edi
c001b809:	83 ec 0c             	sub    esp,0xc
c001b80c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b80e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b812:	52                   	push   edx
c001b813:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b816:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b819:	57                   	push   edi
c001b81a:	56                   	push   esi
c001b81b:	51                   	push   ecx
c001b81c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b81f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b823:	83 c4 20             	add    esp,0x20
c001b826:	99                   	cdq    
c001b827:	83 c4 10             	add    esp,0x10
c001b82a:	5b                   	pop    ebx
c001b82b:	5e                   	pop    esi
c001b82c:	5f                   	pop    edi
c001b82d:	c3                   	ret    

c001b82e <Sys::sbrk(regs*)>:
c001b82e:	56                   	push   esi
c001b82f:	53                   	push   ebx
c001b830:	50                   	push   eax
c001b831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b836:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b83a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b83d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b840:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b846:	85 db                	test   ebx,ebx
c001b848:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b84b:	74 02                	je     c001b84f <Sys::sbrk(regs*)+0x21>
c001b84d:	79 06                	jns    c001b855 <Sys::sbrk(regs*)+0x27>
c001b84f:	89 f0                	mov    eax,esi
c001b851:	31 d2                	xor    edx,edx
c001b853:	eb 2a                	jmp    c001b87f <Sys::sbrk(regs*)+0x51>
c001b855:	83 c8 ff             	or     eax,0xffffffff
c001b858:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b85e:	89 c2                	mov    edx,eax
c001b860:	77 1d                	ja     c001b87f <Sys::sbrk(regs*)+0x51>
c001b862:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b868:	50                   	push   eax
c001b869:	c1 ea 0c             	shr    edx,0xc
c001b86c:	68 07 0c 00 00       	push   0xc07
c001b871:	52                   	push   edx
c001b872:	51                   	push   ecx
c001b873:	e8 fe 6a ff ff       	call   c0012376 <VAS::allocatePages(int, int)>
c001b878:	89 f0                	mov    eax,esi
c001b87a:	31 d2                	xor    edx,edx
c001b87c:	83 c4 10             	add    esp,0x10
c001b87f:	59                   	pop    ecx
c001b880:	5b                   	pop    ebx
c001b881:	5e                   	pop    esi
c001b882:	c3                   	ret    

c001b883 <Sys::setCwd(regs*)>:
c001b883:	83 ec 14             	sub    esp,0x14
c001b886:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b88a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b88d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b892:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b895:	e8 79 7e ff ff       	call   c0013713 <Fs::setcwd(Process*, char*)>
c001b89a:	83 c4 1c             	add    esp,0x1c
c001b89d:	99                   	cdq    
c001b89e:	c3                   	ret    

c001b89f <Sys::setTime(regs*)>:
c001b89f:	55                   	push   ebp
c001b8a0:	31 d2                	xor    edx,edx
c001b8a2:	57                   	push   edi
c001b8a3:	bf 18 00 00 00       	mov    edi,0x18
c001b8a8:	56                   	push   esi
c001b8a9:	53                   	push   ebx
c001b8aa:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b8af:	83 ec 30             	sub    esp,0x30
c001b8b2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b8b6:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b8b9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b8bc:	f7 f3                	div    ebx
c001b8be:	89 d6                	mov    esi,edx
c001b8c0:	31 d2                	xor    edx,edx
c001b8c2:	f7 f3                	div    ebx
c001b8c4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b8c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b8cb:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b8d0:	31 d2                	xor    edx,edx
c001b8d2:	f7 f3                	div    ebx
c001b8d4:	31 d2                	xor    edx,edx
c001b8d6:	bb 0c 00 00 00       	mov    ebx,0xc
c001b8db:	f7 f7                	div    edi
c001b8dd:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b8e0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b8e4:	0f b7 cd             	movzx  ecx,bp
c001b8e7:	56                   	push   esi
c001b8e8:	89 c7                	mov    edi,eax
c001b8ea:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b8ee:	c1 e6 10             	shl    esi,0x10
c001b8f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b8f5:	83 e7 1f             	and    edi,0x1f
c001b8f8:	51                   	push   ecx
c001b8f9:	47                   	inc    edi
c001b8fa:	c1 e8 05             	shr    eax,0x5
c001b8fd:	31 d2                	xor    edx,edx
c001b8ff:	f7 f3                	div    ebx
c001b901:	31 db                	xor    ebx,ebx
c001b903:	52                   	push   edx
c001b904:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b908:	57                   	push   edi
c001b909:	68 0d c8 02 c0       	push   0xc002c80d
c001b90e:	e8 30 75 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001b913:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b917:	89 f8                	mov    eax,edi
c001b919:	31 c9                	xor    ecx,ecx
c001b91b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b91f:	88 c1                	mov    cl,al
c001b921:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b927:	88 d5                	mov    ch,dl
c001b929:	c1 e0 10             	shl    eax,0x10
c001b92c:	0f b7 d1             	movzx  edx,cx
c001b92f:	09 c2                	or     edx,eax
c001b931:	89 d8                	mov    eax,ebx
c001b933:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b938:	09 f0                	or     eax,esi
c001b93a:	89 c3                	mov    ebx,eax
c001b93c:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b940:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b944:	83 c4 18             	add    esp,0x18
c001b947:	53                   	push   ebx
c001b948:	52                   	push   edx
c001b949:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b94d:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b951:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b955:	e8 db 84 ff ff       	call   c0013e35 <datetimeToSeconds(datetime_t)>
c001b95a:	83 c4 0c             	add    esp,0xc
c001b95d:	52                   	push   edx
c001b95e:	50                   	push   eax
c001b95f:	56                   	push   esi
c001b960:	e8 57 86 ff ff       	call   c0013fbc <secondsToDatetime(unsigned long long)>
c001b965:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b969:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b96d:	51                   	push   ecx
c001b96e:	89 d6                	mov    esi,edx
c001b970:	51                   	push   ecx
c001b971:	c1 ee 10             	shr    esi,0x10
c001b974:	89 f3                	mov    ebx,esi
c001b976:	0f b6 f3             	movzx  esi,bl
c001b979:	56                   	push   esi
c001b97a:	0f b6 f6             	movzx  esi,dh
c001b97d:	0f b6 d2             	movzx  edx,dl
c001b980:	56                   	push   esi
c001b981:	52                   	push   edx
c001b982:	89 c2                	mov    edx,eax
c001b984:	c1 ea 10             	shr    edx,0x10
c001b987:	52                   	push   edx
c001b988:	0f b6 d4             	movzx  edx,ah
c001b98b:	0f b6 c0             	movzx  eax,al
c001b98e:	52                   	push   edx
c001b98f:	50                   	push   eax
c001b990:	68 29 c8 02 c0       	push   0xc002c829
c001b995:	e8 a9 74 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001b99a:	83 c4 2c             	add    esp,0x2c
c001b99d:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001b9a2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b9a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b9aa:	53                   	push   ebx
c001b9ab:	51                   	push   ecx
c001b9ac:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b9b2:	e8 a5 85 ff ff       	call   c0013f5c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b9b7:	83 f0 01             	xor    eax,0x1
c001b9ba:	31 d2                	xor    edx,edx
c001b9bc:	0f b6 c0             	movzx  eax,al
c001b9bf:	83 c4 3c             	add    esp,0x3c
c001b9c2:	5b                   	pop    ebx
c001b9c3:	5e                   	pop    esi
c001b9c4:	5f                   	pop    edi
c001b9c5:	5d                   	pop    ebp
c001b9c6:	c3                   	ret    

c001b9c7 <Sys::timezone(regs*)>:
c001b9c7:	53                   	push   ebx
c001b9c8:	83 ec 08             	sub    esp,0x8
c001b9cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9cf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b9d3:	75 17                	jne    c001b9ec <Sys::timezone(regs*)+0x25>
c001b9d5:	83 ec 0c             	sub    esp,0xc
c001b9d8:	68 45 c8 02 c0       	push   0xc002c845
c001b9dd:	e8 61 74 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001b9e2:	83 c8 ff             	or     eax,0xffffffff
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	89 c2                	mov    edx,eax
c001b9ea:	eb 20                	jmp    c001ba0c <Sys::timezone(regs*)+0x45>
c001b9ec:	83 ec 0c             	sub    esp,0xc
c001b9ef:	68 7d c8 02 c0       	push   0xc002c87d
c001b9f4:	e8 4a 74 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001b9f9:	58                   	pop    eax
c001b9fa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b9fd:	e8 bc 82 ff ff       	call   c0013cbe <User::loadClockSettings(int)>
c001ba02:	83 c4 10             	add    esp,0x10
c001ba05:	b8 01 00 00 00       	mov    eax,0x1
c001ba0a:	31 d2                	xor    edx,edx
c001ba0c:	83 c4 08             	add    esp,0x8
c001ba0f:	5b                   	pop    ebx
c001ba10:	c3                   	ret    

c001ba11 <Sys::write(regs*)>:
c001ba11:	57                   	push   edi
c001ba12:	56                   	push   esi
c001ba13:	53                   	push   ebx
c001ba14:	83 ec 10             	sub    esp,0x10
c001ba17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba1e:	83 f8 02             	cmp    eax,0x2
c001ba21:	77 10                	ja     c001ba33 <Sys::write(regs*)+0x22>
c001ba23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba2b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ba31:	eb 0e                	jmp    c001ba41 <Sys::write(regs*)+0x30>
c001ba33:	83 ec 0c             	sub    esp,0xc
c001ba36:	50                   	push   eax
c001ba37:	e8 ab 5e ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001ba3c:	83 c4 10             	add    esp,0x10
c001ba3f:	89 c1                	mov    ecx,eax
c001ba41:	83 c8 ff             	or     eax,0xffffffff
c001ba44:	85 c9                	test   ecx,ecx
c001ba46:	89 c2                	mov    edx,eax
c001ba48:	74 28                	je     c001ba72 <Sys::write(regs*)+0x61>
c001ba4a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ba52:	31 ff                	xor    edi,edi
c001ba54:	83 ec 0c             	sub    esp,0xc
c001ba57:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ba59:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ba5d:	52                   	push   edx
c001ba5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ba61:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ba64:	57                   	push   edi
c001ba65:	56                   	push   esi
c001ba66:	51                   	push   ecx
c001ba67:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ba6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba6e:	83 c4 20             	add    esp,0x20
c001ba71:	99                   	cdq    
c001ba72:	83 c4 10             	add    esp,0x10
c001ba75:	5b                   	pop    ebx
c001ba76:	5e                   	pop    esi
c001ba77:	5f                   	pop    edi
c001ba78:	c3                   	ret    

c001ba79 <Sys::wsbe(regs*)>:
c001ba79:	57                   	push   edi
c001ba7a:	b9 0b 00 00 00       	mov    ecx,0xb
c001ba7f:	56                   	push   esi
c001ba80:	be bc c8 02 c0       	mov    esi,0xc002c8bc
c001ba85:	53                   	push   ebx
c001ba86:	83 ec 30             	sub    esp,0x30
c001ba89:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ba8d:	fc                   	cld    
c001ba8e:	83 ec 0c             	sub    esp,0xc
c001ba91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba93:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ba97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba9f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001baa5:	8b 06                	mov    eax,DWORD PTR [esi]
c001baa7:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001baaa:	57                   	push   edi
c001baab:	e8 d8 4c fe ff       	call   c0000788 <strlen>
c001bab0:	5a                   	pop    edx
c001bab1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bab5:	52                   	push   edx
c001bab6:	31 d2                	xor    edx,edx
c001bab8:	57                   	push   edi
c001bab9:	52                   	push   edx
c001baba:	50                   	push   eax
c001babb:	56                   	push   esi
c001babc:	ff d3                	call   ebx
c001babe:	83 c4 14             	add    esp,0x14
c001bac1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bac5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bac8:	e8 02 34 00 00       	call   c001eecf <terminateTask(int)>
c001bacd:	83 c4 40             	add    esp,0x40
c001bad0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bad5:	5b                   	pop    ebx
c001bad6:	31 d2                	xor    edx,edx
c001bad8:	5e                   	pop    esi
c001bad9:	5f                   	pop    edi
c001bada:	c3                   	ret    

c001badb <Sys::yield(regs*)>:
c001badb:	57                   	push   edi
c001badc:	56                   	push   esi
c001badd:	53                   	push   ebx
c001bade:	fa                   	cli    
c001badf:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001bae5:	e8 b2 2a 00 00       	call   c001e59c <schedule()>
c001baea:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001baef:	48                   	dec    eax
c001baf0:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001baf5:	75 01                	jne    c001baf8 <Sys::yield(regs*)+0x1d>
c001baf7:	fb                   	sti    
c001baf8:	8b 35 f0 f5 02 c0    	mov    esi,DWORD PTR ds:0xc002f5f0
c001bafe:	8b 3d f4 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f5f4
c001bb04:	89 f0                	mov    eax,esi
c001bb06:	89 fb                	mov    ebx,edi
c001bb08:	89 f1                	mov    ecx,esi
c001bb0a:	c1 e0 07             	shl    eax,0x7
c001bb0d:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bb11:	25 80 30 0f 00       	and    eax,0xf3080
c001bb16:	c1 eb 17             	shr    ebx,0x17
c001bb19:	31 c8                	xor    eax,ecx
c001bb1b:	89 da                	mov    edx,ebx
c001bb1d:	5b                   	pop    ebx
c001bb1e:	5e                   	pop    esi
c001bb1f:	5f                   	pop    edi
c001bb20:	c3                   	ret    

c001bb21 <sysCallSeekDir(regs*)>:
c001bb21:	31 c0                	xor    eax,eax
c001bb23:	31 d2                	xor    edx,edx
c001bb25:	c3                   	ret    

c001bb26 <sysCallTellDir(regs*)>:
c001bb26:	31 c0                	xor    eax,eax
c001bb28:	31 d2                	xor    edx,edx
c001bb2a:	c3                   	ret    

c001bb2b <sysCallVerify(regs*)>:
c001bb2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb2f:	31 d2                	xor    edx,edx
c001bb31:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb34:	c3                   	ret    

c001bb35 <sysFormatDisk(regs*)>:
c001bb35:	56                   	push   esi
c001bb36:	53                   	push   ebx
c001bb37:	53                   	push   ebx
c001bb38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb3c:	8b 1d f4 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0f4
c001bb42:	eb 25                	jmp    c001bb69 <sysFormatDisk(regs*)+0x34>
c001bb44:	83 ec 0c             	sub    esp,0xc
c001bb47:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bb4a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb4c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bb4f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bb52:	50                   	push   eax
c001bb53:	ff 34 85 80 f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a80]
c001bb5a:	53                   	push   ebx
c001bb5b:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bb5e:	83 c4 20             	add    esp,0x20
c001bb61:	83 f8 08             	cmp    eax,0x8
c001bb64:	75 12                	jne    c001bb78 <sysFormatDisk(regs*)+0x43>
c001bb66:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bb69:	85 db                	test   ebx,ebx
c001bb6b:	75 d7                	jne    c001bb44 <sysFormatDisk(regs*)+0xf>
c001bb6d:	59                   	pop    ecx
c001bb6e:	b8 03 00 00 00       	mov    eax,0x3
c001bb73:	31 d2                	xor    edx,edx
c001bb75:	5b                   	pop    ebx
c001bb76:	5e                   	pop    esi
c001bb77:	c3                   	ret    
c001bb78:	85 c0                	test   eax,eax
c001bb7a:	74 1b                	je     c001bb97 <sysFormatDisk(regs*)+0x62>
c001bb7c:	83 f8 09             	cmp    eax,0x9
c001bb7f:	74 0b                	je     c001bb8c <sysFormatDisk(regs*)+0x57>
c001bb81:	59                   	pop    ecx
c001bb82:	b8 02 00 00 00       	mov    eax,0x2
c001bb87:	31 d2                	xor    edx,edx
c001bb89:	5b                   	pop    ebx
c001bb8a:	5e                   	pop    esi
c001bb8b:	c3                   	ret    
c001bb8c:	59                   	pop    ecx
c001bb8d:	b8 01 00 00 00       	mov    eax,0x1
c001bb92:	31 d2                	xor    edx,edx
c001bb94:	5b                   	pop    ebx
c001bb95:	5e                   	pop    esi
c001bb96:	c3                   	ret    
c001bb97:	59                   	pop    ecx
c001bb98:	31 c0                	xor    eax,eax
c001bb9a:	31 d2                	xor    edx,edx
c001bb9c:	5b                   	pop    ebx
c001bb9d:	5e                   	pop    esi
c001bb9e:	c3                   	ret    

c001bb9f <sysSetDiskVolumeLabel(regs*)>:
c001bb9f:	56                   	push   esi
c001bba0:	53                   	push   ebx
c001bba1:	53                   	push   ebx
c001bba2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bba6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bba9:	83 f8 19             	cmp    eax,0x19
c001bbac:	77 29                	ja     c001bbd7 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bbae:	8b 0c 85 80 f5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0a80]
c001bbb5:	85 c9                	test   ecx,ecx
c001bbb7:	74 1e                	je     c001bbd7 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bbb9:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bbbc:	85 d2                	test   edx,edx
c001bbbe:	74 17                	je     c001bbd7 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bbc0:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bbc6:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bbc8:	52                   	push   edx
c001bbc9:	50                   	push   eax
c001bbca:	51                   	push   ecx
c001bbcb:	53                   	push   ebx
c001bbcc:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bbcf:	83 c4 10             	add    esp,0x10
c001bbd2:	99                   	cdq    
c001bbd3:	59                   	pop    ecx
c001bbd4:	5b                   	pop    ebx
c001bbd5:	5e                   	pop    esi
c001bbd6:	c3                   	ret    
c001bbd7:	59                   	pop    ecx
c001bbd8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bbdd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe2:	5b                   	pop    ebx
c001bbe3:	5e                   	pop    esi
c001bbe4:	c3                   	ret    

c001bbe5 <sysGetDiskVolumeLabel(regs*)>:
c001bbe5:	57                   	push   edi
c001bbe6:	56                   	push   esi
c001bbe7:	53                   	push   ebx
c001bbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbec:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bbef:	83 fa 19             	cmp    edx,0x19
c001bbf2:	77 34                	ja     c001bc28 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bbf4:	8b 0c 95 80 f5 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0a80]
c001bbfb:	85 c9                	test   ecx,ecx
c001bbfd:	74 29                	je     c001bc28 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bbff:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bc02:	85 db                	test   ebx,ebx
c001bc04:	74 22                	je     c001bc28 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bc06:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bc09:	85 c0                	test   eax,eax
c001bc0b:	74 1b                	je     c001bc28 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bc0d:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bc13:	83 ec 0c             	sub    esp,0xc
c001bc16:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bc18:	50                   	push   eax
c001bc19:	53                   	push   ebx
c001bc1a:	52                   	push   edx
c001bc1b:	51                   	push   ecx
c001bc1c:	56                   	push   esi
c001bc1d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bc20:	83 c4 20             	add    esp,0x20
c001bc23:	99                   	cdq    
c001bc24:	5b                   	pop    ebx
c001bc25:	5e                   	pop    esi
c001bc26:	5f                   	pop    edi
c001bc27:	c3                   	ret    
c001bc28:	5b                   	pop    ebx
c001bc29:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bc2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc33:	5e                   	pop    esi
c001bc34:	5f                   	pop    edi
c001bc35:	c3                   	ret    

c001bc36 <sysShutdown(regs*)>:
c001bc36:	83 ec 0c             	sub    esp,0xc
c001bc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc40:	85 c0                	test   eax,eax
c001bc42:	74 18                	je     c001bc5c <sysShutdown(regs*)+0x26>
c001bc44:	83 f8 01             	cmp    eax,0x1
c001bc47:	74 38                	je     c001bc81 <sysShutdown(regs*)+0x4b>
c001bc49:	83 f8 02             	cmp    eax,0x2
c001bc4c:	74 24                	je     c001bc72 <sysShutdown(regs*)+0x3c>
c001bc4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc53:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc58:	83 c4 0c             	add    esp,0xc
c001bc5b:	c3                   	ret    
c001bc5c:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001bc61:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc63:	6a 00                	push   0x0
c001bc65:	6a 00                	push   0x0
c001bc67:	6a 00                	push   0x0
c001bc69:	50                   	push   eax
c001bc6a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	eb dc                	jmp    c001bc4e <sysShutdown(regs*)+0x18>
c001bc72:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001bc77:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc79:	6a 00                	push   0x0
c001bc7b:	6a 00                	push   0x0
c001bc7d:	6a 01                	push   0x1
c001bc7f:	eb e8                	jmp    c001bc69 <sysShutdown(regs*)+0x33>
c001bc81:	a1 20 16 03 c0       	mov    eax,ds:0xc0031620
c001bc86:	85 c0                	test   eax,eax
c001bc88:	74 02                	je     c001bc8c <sysShutdown(regs*)+0x56>
c001bc8a:	ff d0                	call   eax
c001bc8c:	31 c0                	xor    eax,eax
c001bc8e:	31 d2                	xor    edx,edx
c001bc90:	83 c4 0c             	add    esp,0xc
c001bc93:	c3                   	ret    

c001bc94 <sysCallRealpath(regs*)>:
c001bc94:	83 ec 0c             	sub    esp,0xc
c001bc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc9b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bc9e:	85 d2                	test   edx,edx
c001bca0:	74 07                	je     c001bca9 <sysCallRealpath(regs*)+0x15>
c001bca2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bca5:	85 c0                	test   eax,eax
c001bca7:	75 0b                	jne    c001bcb4 <sysCallRealpath(regs*)+0x20>
c001bca9:	b8 01 00 00 00       	mov    eax,0x1
c001bcae:	31 d2                	xor    edx,edx
c001bcb0:	83 c4 0c             	add    esp,0xc
c001bcb3:	c3                   	ret    
c001bcb4:	51                   	push   ecx
c001bcb5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bcbb:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bcbe:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bcc4:	51                   	push   ecx
c001bcc5:	52                   	push   edx
c001bcc6:	50                   	push   eax
c001bcc7:	e8 2c 75 ff ff       	call   c00131f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bccc:	83 c4 10             	add    esp,0x10
c001bccf:	31 c0                	xor    eax,eax
c001bcd1:	31 d2                	xor    edx,edx
c001bcd3:	83 c4 0c             	add    esp,0xc
c001bcd6:	c3                   	ret    

c001bcd7 <sysCallGetArgc(regs*)>:
c001bcd7:	83 ec 14             	sub    esp,0x14
c001bcda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcdf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bce2:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bce8:	68 e8 c8 02 c0       	push   0xc002c8e8
c001bced:	e8 51 71 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001bcf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcf7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcfa:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bd00:	83 c4 1c             	add    esp,0x1c
c001bd03:	99                   	cdq    
c001bd04:	c3                   	ret    

c001bd05 <sysCallReadDir(regs*)>:
c001bd05:	53                   	push   ebx
c001bd06:	83 ec 18             	sub    esp,0x18
c001bd09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd0d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd10:	83 f8 02             	cmp    eax,0x2
c001bd13:	76 53                	jbe    c001bd68 <sysCallReadDir(regs*)+0x63>
c001bd15:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd18:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bd1e:	77 4f                	ja     c001bd6f <sysCallReadDir(regs*)+0x6a>
c001bd20:	83 ec 0c             	sub    esp,0xc
c001bd23:	50                   	push   eax
c001bd24:	e8 be 5b ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001bd29:	83 c4 10             	add    esp,0x10
c001bd2c:	85 c0                	test   eax,eax
c001bd2e:	74 50                	je     c001bd80 <sysCallReadDir(regs*)+0x7b>
c001bd30:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd38:	83 ec 0c             	sub    esp,0xc
c001bd3b:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd3d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bd41:	51                   	push   ecx
c001bd42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd45:	6a 00                	push   0x0
c001bd47:	68 10 01 00 00       	push   0x110
c001bd4c:	50                   	push   eax
c001bd4d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bd50:	83 c4 20             	add    esp,0x20
c001bd53:	85 c0                	test   eax,eax
c001bd55:	74 38                	je     c001bd8f <sysCallReadDir(regs*)+0x8a>
c001bd57:	83 f8 07             	cmp    eax,0x7
c001bd5a:	74 0c                	je     c001bd68 <sysCallReadDir(regs*)+0x63>
c001bd5c:	b8 02 00 00 00       	mov    eax,0x2
c001bd61:	31 d2                	xor    edx,edx
c001bd63:	83 c4 18             	add    esp,0x18
c001bd66:	5b                   	pop    ebx
c001bd67:	c3                   	ret    
c001bd68:	b8 01 00 00 00       	mov    eax,0x1
c001bd6d:	eb f2                	jmp    c001bd61 <sysCallReadDir(regs*)+0x5c>
c001bd6f:	83 ec 08             	sub    esp,0x8
c001bd72:	52                   	push   edx
c001bd73:	68 0c ca 02 c0       	push   0xc002ca0c
c001bd78:	e8 c6 70 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001bd7d:	83 c4 10             	add    esp,0x10
c001bd80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd85:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd8a:	83 c4 18             	add    esp,0x18
c001bd8d:	5b                   	pop    ebx
c001bd8e:	c3                   	ret    
c001bd8f:	31 c0                	xor    eax,eax
c001bd91:	eb ce                	jmp    c001bd61 <sysCallReadDir(regs*)+0x5c>

c001bd93 <sysCallIsATTY(regs*)>:
c001bd93:	83 ec 0c             	sub    esp,0xc
c001bd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd9d:	83 f8 02             	cmp    eax,0x2
c001bda0:	76 07                	jbe    c001bda9 <sysCallIsATTY(regs*)+0x16>
c001bda2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bda7:	75 26                	jne    c001bdcf <sysCallIsATTY(regs*)+0x3c>
c001bda9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdb1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bdb7:	85 c0                	test   eax,eax
c001bdb9:	74 24                	je     c001bddf <sysCallIsATTY(regs*)+0x4c>
c001bdbb:	83 ec 0c             	sub    esp,0xc
c001bdbe:	8b 10                	mov    edx,DWORD PTR [eax]
c001bdc0:	50                   	push   eax
c001bdc1:	ff 12                	call   DWORD PTR [edx]
c001bdc3:	31 d2                	xor    edx,edx
c001bdc5:	0f b6 c0             	movzx  eax,al
c001bdc8:	83 c4 10             	add    esp,0x10
c001bdcb:	83 c4 0c             	add    esp,0xc
c001bdce:	c3                   	ret    
c001bdcf:	83 ec 0c             	sub    esp,0xc
c001bdd2:	50                   	push   eax
c001bdd3:	e8 0f 5b ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001bdd8:	83 c4 10             	add    esp,0x10
c001bddb:	85 c0                	test   eax,eax
c001bddd:	75 dc                	jne    c001bdbb <sysCallIsATTY(regs*)+0x28>
c001bddf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bde4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bde9:	83 c4 0c             	add    esp,0xc
c001bdec:	c3                   	ret    

c001bded <sysCallSeek(regs*)>:
c001bded:	53                   	push   ebx
c001bdee:	83 ec 08             	sub    esp,0x8
c001bdf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdf5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bdf8:	83 f8 02             	cmp    eax,0x2
c001bdfb:	76 4a                	jbe    c001be47 <sysCallSeek(regs*)+0x5a>
c001bdfd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001be02:	77 32                	ja     c001be36 <sysCallSeek(regs*)+0x49>
c001be04:	83 ec 0c             	sub    esp,0xc
c001be07:	50                   	push   eax
c001be08:	e8 da 5a ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001be0d:	83 c4 0c             	add    esp,0xc
c001be10:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001be13:	31 db                	xor    ebx,ebx
c001be15:	53                   	push   ebx
c001be16:	51                   	push   ecx
c001be17:	50                   	push   eax
c001be18:	e8 a7 76 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001be1d:	83 c4 10             	add    esp,0x10
c001be20:	85 c0                	test   eax,eax
c001be22:	0f 95 c0             	setne  al
c001be25:	31 d2                	xor    edx,edx
c001be27:	0f b6 c0             	movzx  eax,al
c001be2a:	f7 d8                	neg    eax
c001be2c:	83 d2 00             	adc    edx,0x0
c001be2f:	83 c4 08             	add    esp,0x8
c001be32:	f7 da                	neg    edx
c001be34:	5b                   	pop    ebx
c001be35:	c3                   	ret    
c001be36:	83 ec 08             	sub    esp,0x8
c001be39:	50                   	push   eax
c001be3a:	68 f3 c8 02 c0       	push   0xc002c8f3
c001be3f:	e8 ff 6f ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001be44:	83 c4 10             	add    esp,0x10
c001be47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be51:	83 c4 08             	add    esp,0x8
c001be54:	5b                   	pop    ebx
c001be55:	c3                   	ret    

c001be56 <sysCallTell(regs*)>:
c001be56:	53                   	push   ebx
c001be57:	83 ec 08             	sub    esp,0x8
c001be5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be61:	83 f8 02             	cmp    eax,0x2
c001be64:	76 5e                	jbe    c001bec4 <sysCallTell(regs*)+0x6e>
c001be66:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001be6b:	77 2d                	ja     c001be9a <sysCallTell(regs*)+0x44>
c001be6d:	83 ec 0c             	sub    esp,0xc
c001be70:	50                   	push   eax
c001be71:	e8 71 5a ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001be76:	5a                   	pop    edx
c001be77:	59                   	pop    ecx
c001be78:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be7b:	50                   	push   eax
c001be7c:	e8 99 76 ff ff       	call   c001351a <File::tell(unsigned long long*)>
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	85 c0                	test   eax,eax
c001be86:	0f 95 c0             	setne  al
c001be89:	31 d2                	xor    edx,edx
c001be8b:	0f b6 c0             	movzx  eax,al
c001be8e:	f7 d8                	neg    eax
c001be90:	83 d2 00             	adc    edx,0x0
c001be93:	83 c4 08             	add    esp,0x8
c001be96:	f7 da                	neg    edx
c001be98:	5b                   	pop    ebx
c001be99:	c3                   	ret    
c001be9a:	83 ec 08             	sub    esp,0x8
c001be9d:	50                   	push   eax
c001be9e:	68 0d c9 02 c0       	push   0xc002c90d
c001bea3:	e8 9b 6f ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001bea8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001beab:	83 c4 10             	add    esp,0x10
c001beae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001beb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bebb:	31 d2                	xor    edx,edx
c001bebd:	31 c0                	xor    eax,eax
c001bebf:	83 c4 08             	add    esp,0x8
c001bec2:	5b                   	pop    ebx
c001bec3:	c3                   	ret    
c001bec4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bec9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bece:	83 c4 08             	add    esp,0x8
c001bed1:	5b                   	pop    ebx
c001bed2:	c3                   	ret    

c001bed3 <sysCallSize(regs*)>:
c001bed3:	53                   	push   ebx
c001bed4:	83 ec 18             	sub    esp,0x18
c001bed7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bedb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bede:	83 f8 02             	cmp    eax,0x2
c001bee1:	76 64                	jbe    c001bf47 <sysCallSize(regs*)+0x74>
c001bee3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bee8:	77 33                	ja     c001bf1d <sysCallSize(regs*)+0x4a>
c001beea:	83 ec 0c             	sub    esp,0xc
c001beed:	50                   	push   eax
c001beee:	e8 f4 59 ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001bef3:	83 c4 0c             	add    esp,0xc
c001bef6:	8d 54 24 13          	lea    edx,[esp+0x13]
c001befa:	52                   	push   edx
c001befb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001befe:	50                   	push   eax
c001beff:	e8 ae 77 ff ff       	call   c00136b2 <File::stat(unsigned long long*, bool*)>
c001bf04:	83 c4 10             	add    esp,0x10
c001bf07:	85 c0                	test   eax,eax
c001bf09:	0f 95 c0             	setne  al
c001bf0c:	31 d2                	xor    edx,edx
c001bf0e:	0f b6 c0             	movzx  eax,al
c001bf11:	f7 d8                	neg    eax
c001bf13:	83 d2 00             	adc    edx,0x0
c001bf16:	83 c4 18             	add    esp,0x18
c001bf19:	f7 da                	neg    edx
c001bf1b:	5b                   	pop    ebx
c001bf1c:	c3                   	ret    
c001bf1d:	83 ec 08             	sub    esp,0x8
c001bf20:	50                   	push   eax
c001bf21:	68 27 c9 02 c0       	push   0xc002c927
c001bf26:	e8 18 6f ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001bf2b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bf2e:	83 c4 10             	add    esp,0x10
c001bf31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf3e:	31 d2                	xor    edx,edx
c001bf40:	31 c0                	xor    eax,eax
c001bf42:	83 c4 18             	add    esp,0x18
c001bf45:	5b                   	pop    ebx
c001bf46:	c3                   	ret    
c001bf47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf51:	83 c4 18             	add    esp,0x18
c001bf54:	5b                   	pop    ebx
c001bf55:	c3                   	ret    

c001bf56 <sysCallSizeFromFilename(regs*)>:
c001bf56:	57                   	push   edi
c001bf57:	56                   	push   esi
c001bf58:	53                   	push   ebx
c001bf59:	83 ec 20             	sub    esp,0x20
c001bf5c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bf60:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bf63:	83 fb 02             	cmp    ebx,0x2
c001bf66:	0f 86 99 00 00 00    	jbe    c001c005 <sysCallSizeFromFilename(regs*)+0xaf>
c001bf6c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bf72:	77 65                	ja     c001bfd9 <sysCallSizeFromFilename(regs*)+0x83>
c001bf74:	83 ec 0c             	sub    esp,0xc
c001bf77:	68 14 01 00 00       	push   0x114
c001bf7c:	e8 27 39 ff ff       	call   c000f8a8 <malloc>
c001bf81:	83 c4 0c             	add    esp,0xc
c001bf84:	89 c6                	mov    esi,eax
c001bf86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf8b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf8e:	53                   	push   ebx
c001bf8f:	56                   	push   esi
c001bf90:	e8 0d 74 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001bf95:	83 c4 0c             	add    esp,0xc
c001bf98:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bf9c:	50                   	push   eax
c001bf9d:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bfa0:	56                   	push   esi
c001bfa1:	e8 0c 77 ff ff       	call   c00136b2 <File::stat(unsigned long long*, bool*)>
c001bfa6:	83 c4 10             	add    esp,0x10
c001bfa9:	85 f6                	test   esi,esi
c001bfab:	74 14                	je     c001bfc1 <sysCallSizeFromFilename(regs*)+0x6b>
c001bfad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfb1:	8b 16                	mov    edx,DWORD PTR [esi]
c001bfb3:	83 ec 0c             	sub    esp,0xc
c001bfb6:	56                   	push   esi
c001bfb7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bfba:	83 c4 10             	add    esp,0x10
c001bfbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfc1:	85 c0                	test   eax,eax
c001bfc3:	0f 95 c0             	setne  al
c001bfc6:	31 d2                	xor    edx,edx
c001bfc8:	0f b6 c0             	movzx  eax,al
c001bfcb:	f7 d8                	neg    eax
c001bfcd:	83 d2 00             	adc    edx,0x0
c001bfd0:	83 c4 20             	add    esp,0x20
c001bfd3:	f7 da                	neg    edx
c001bfd5:	5b                   	pop    ebx
c001bfd6:	5e                   	pop    esi
c001bfd7:	5f                   	pop    edi
c001bfd8:	c3                   	ret    
c001bfd9:	83 ec 08             	sub    esp,0x8
c001bfdc:	53                   	push   ebx
c001bfdd:	68 27 c9 02 c0       	push   0xc002c927
c001bfe2:	e8 5c 6e ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001bfe7:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bfea:	83 c4 10             	add    esp,0x10
c001bfed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bff3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bffa:	31 d2                	xor    edx,edx
c001bffc:	83 c4 20             	add    esp,0x20
c001bfff:	31 c0                	xor    eax,eax
c001c001:	5b                   	pop    ebx
c001c002:	5e                   	pop    esi
c001c003:	5f                   	pop    edi
c001c004:	c3                   	ret    
c001c005:	83 c4 20             	add    esp,0x20
c001c008:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c00d:	5b                   	pop    ebx
c001c00e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c013:	5e                   	pop    esi
c001c014:	5f                   	pop    edi
c001c015:	c3                   	ret    

c001c016 <sysCallClose(regs*)>:
c001c016:	53                   	push   ebx
c001c017:	83 ec 08             	sub    esp,0x8
c001c01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c01e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c021:	83 f8 02             	cmp    eax,0x2
c001c024:	76 50                	jbe    c001c076 <sysCallClose(regs*)+0x60>
c001c026:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c02b:	74 58                	je     c001c085 <sysCallClose(regs*)+0x6f>
c001c02d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c032:	74 60                	je     c001c094 <sysCallClose(regs*)+0x7e>
c001c034:	77 2f                	ja     c001c065 <sysCallClose(regs*)+0x4f>
c001c036:	83 ec 0c             	sub    esp,0xc
c001c039:	50                   	push   eax
c001c03a:	e8 a8 58 ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001c03f:	89 c3                	mov    ebx,eax
c001c041:	89 04 24             	mov    DWORD PTR [esp],eax
c001c044:	e8 1b 74 ff ff       	call   c0013464 <File::close()>
c001c049:	83 c4 10             	add    esp,0x10
c001c04c:	85 db                	test   ebx,ebx
c001c04e:	74 0c                	je     c001c05c <sysCallClose(regs*)+0x46>
c001c050:	83 ec 0c             	sub    esp,0xc
c001c053:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c055:	53                   	push   ebx
c001c056:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c059:	83 c4 10             	add    esp,0x10
c001c05c:	31 c0                	xor    eax,eax
c001c05e:	31 d2                	xor    edx,edx
c001c060:	83 c4 08             	add    esp,0x8
c001c063:	5b                   	pop    ebx
c001c064:	c3                   	ret    
c001c065:	83 ec 08             	sub    esp,0x8
c001c068:	50                   	push   eax
c001c069:	68 30 ca 02 c0       	push   0xc002ca30
c001c06e:	e8 d0 6d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c07b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c080:	83 c4 08             	add    esp,0x8
c001c083:	5b                   	pop    ebx
c001c084:	c3                   	ret    
c001c085:	83 ec 0c             	sub    esp,0xc
c001c088:	68 42 c9 02 c0       	push   0xc002c942
c001c08d:	e8 b1 6d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c092:	eb c5                	jmp    c001c059 <sysCallClose(regs*)+0x43>
c001c094:	83 ec 0c             	sub    esp,0xc
c001c097:	68 50 c9 02 c0       	push   0xc002c950
c001c09c:	eb ef                	jmp    c001c08d <sysCallClose(regs*)+0x77>

c001c09e <sysCallOpenDir(regs*)>:
c001c09e:	56                   	push   esi
c001c09f:	53                   	push   ebx
c001c0a0:	53                   	push   ebx
c001c0a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0a5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c0a8:	85 f6                	test   esi,esi
c001c0aa:	74 59                	je     c001c105 <sysCallOpenDir(regs*)+0x67>
c001c0ac:	83 ec 0c             	sub    esp,0xc
c001c0af:	68 14 01 00 00       	push   0x114
c001c0b4:	e8 ef 37 ff ff       	call   c000f8a8 <malloc>
c001c0b9:	83 c4 0c             	add    esp,0xc
c001c0bc:	89 c6                	mov    esi,eax
c001c0be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0c9:	56                   	push   esi
c001c0ca:	e8 7f 77 ff ff       	call   c001384e <Directory::Directory(char const*, Process*)>
c001c0cf:	83 c4 10             	add    esp,0x10
c001c0d2:	85 f6                	test   esi,esi
c001c0d4:	74 2f                	je     c001c105 <sysCallOpenDir(regs*)+0x67>
c001c0d6:	83 ec 0c             	sub    esp,0xc
c001c0d9:	56                   	push   esi
c001c0da:	e8 d3 77 ff ff       	call   c00138b2 <Directory::open()>
c001c0df:	83 c4 10             	add    esp,0x10
c001c0e2:	85 c0                	test   eax,eax
c001c0e4:	75 1f                	jne    c001c105 <sysCallOpenDir(regs*)+0x67>
c001c0e6:	83 ec 0c             	sub    esp,0xc
c001c0e9:	56                   	push   esi
c001c0ea:	e8 03 55 ff ff       	call   c00115f2 <UnixFile::getFileDescriptor()>
c001c0ef:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c0f2:	83 c4 10             	add    esp,0x10
c001c0f5:	89 02                	mov    DWORD PTR [edx],eax
c001c0f7:	c1 f8 1f             	sar    eax,0x1f
c001c0fa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c0fd:	31 c0                	xor    eax,eax
c001c0ff:	59                   	pop    ecx
c001c100:	31 d2                	xor    edx,edx
c001c102:	5b                   	pop    ebx
c001c103:	5e                   	pop    esi
c001c104:	c3                   	ret    
c001c105:	59                   	pop    ecx
c001c106:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c10b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c110:	5b                   	pop    ebx
c001c111:	5e                   	pop    esi
c001c112:	c3                   	ret    

c001c113 <sysCallCloseDir(regs*)>:
c001c113:	53                   	push   ebx
c001c114:	83 ec 08             	sub    esp,0x8
c001c117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c11e:	83 f8 02             	cmp    eax,0x2
c001c121:	76 47                	jbe    c001c16a <sysCallCloseDir(regs*)+0x57>
c001c123:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c128:	77 2f                	ja     c001c159 <sysCallCloseDir(regs*)+0x46>
c001c12a:	83 ec 0c             	sub    esp,0xc
c001c12d:	50                   	push   eax
c001c12e:	e8 b4 57 ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001c133:	89 c3                	mov    ebx,eax
c001c135:	89 04 24             	mov    DWORD PTR [esp],eax
c001c138:	e8 d1 77 ff ff       	call   c001390e <Directory::close()>
c001c13d:	83 c4 10             	add    esp,0x10
c001c140:	85 db                	test   ebx,ebx
c001c142:	74 0c                	je     c001c150 <sysCallCloseDir(regs*)+0x3d>
c001c144:	83 ec 0c             	sub    esp,0xc
c001c147:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c149:	53                   	push   ebx
c001c14a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c14d:	83 c4 10             	add    esp,0x10
c001c150:	31 c0                	xor    eax,eax
c001c152:	31 d2                	xor    edx,edx
c001c154:	83 c4 08             	add    esp,0x8
c001c157:	5b                   	pop    ebx
c001c158:	c3                   	ret    
c001c159:	83 ec 08             	sub    esp,0x8
c001c15c:	50                   	push   eax
c001c15d:	68 58 ca 02 c0       	push   0xc002ca58
c001c162:	e8 dc 6c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c167:	83 c4 10             	add    esp,0x10
c001c16a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c16f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c174:	83 c4 08             	add    esp,0x8
c001c177:	5b                   	pop    ebx
c001c178:	c3                   	ret    

c001c179 <sysCallMakeDir(regs*)>:
c001c179:	56                   	push   esi
c001c17a:	53                   	push   ebx
c001c17b:	83 ec 10             	sub    esp,0x10
c001c17e:	68 14 01 00 00       	push   0x114
c001c183:	e8 20 37 ff ff       	call   c000f8a8 <malloc>
c001c188:	83 c4 0c             	add    esp,0xc
c001c18b:	89 c3                	mov    ebx,eax
c001c18d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c192:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c195:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c199:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c19c:	53                   	push   ebx
c001c19d:	e8 ac 76 ff ff       	call   c001384e <Directory::Directory(char const*, Process*)>
c001c1a2:	83 c4 10             	add    esp,0x10
c001c1a5:	85 db                	test   ebx,ebx
c001c1a7:	74 32                	je     c001c1db <sysCallMakeDir(regs*)+0x62>
c001c1a9:	83 ec 0c             	sub    esp,0xc
c001c1ac:	53                   	push   ebx
c001c1ad:	e8 e0 78 ff ff       	call   c0013a92 <Directory::create()>
c001c1b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1b5:	89 c6                	mov    esi,eax
c001c1b7:	e8 52 77 ff ff       	call   c001390e <Directory::close()>
c001c1bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1c4:	83 c4 10             	add    esp,0x10
c001c1c7:	31 c0                	xor    eax,eax
c001c1c9:	59                   	pop    ecx
c001c1ca:	85 f6                	test   esi,esi
c001c1cc:	5b                   	pop    ebx
c001c1cd:	0f 95 c0             	setne  al
c001c1d0:	5e                   	pop    esi
c001c1d1:	31 d2                	xor    edx,edx
c001c1d3:	f7 d8                	neg    eax
c001c1d5:	83 d2 00             	adc    edx,0x0
c001c1d8:	f7 da                	neg    edx
c001c1da:	c3                   	ret    
c001c1db:	59                   	pop    ecx
c001c1dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1e6:	5b                   	pop    ebx
c001c1e7:	5e                   	pop    esi
c001c1e8:	c3                   	ret    

c001c1e9 <sysCallWait(regs*)>:
c001c1e9:	83 ec 10             	sub    esp,0x10
c001c1ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c1f0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c1f3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c1f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c1f9:	e8 ca 25 00 00       	call   c001e7c8 <waitTask(int, int*, int)>
c001c1fe:	83 c4 1c             	add    esp,0x1c
c001c201:	99                   	cdq    
c001c202:	c3                   	ret    

c001c203 <sysCallNotImpl(regs*)>:
c001c203:	83 ec 18             	sub    esp,0x18
c001c206:	68 5e c9 02 c0       	push   0xc002c95e
c001c20b:	e8 fd e5 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001c210:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c215:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c21a:	83 c4 1c             	add    esp,0x1c
c001c21d:	c3                   	ret    

c001c21e <sysPanic(regs*)>:
c001c21e:	83 ec 18             	sub    esp,0x18
c001c221:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c225:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c228:	e8 e0 e5 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001c22d:	c7 04 24 78 c9 02 c0 	mov    DWORD PTR [esp],0xc002c978
c001c234:	e8 d4 e5 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001c239:	b8 01 00 00 00       	mov    eax,0x1
c001c23e:	31 d2                	xor    edx,edx
c001c240:	83 c4 1c             	add    esp,0x1c
c001c243:	c3                   	ret    

c001c244 <sysCallRmdir(regs*)>:
c001c244:	56                   	push   esi
c001c245:	53                   	push   ebx
c001c246:	83 ec 20             	sub    esp,0x20
c001c249:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c24d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c250:	68 14 01 00 00       	push   0x114
c001c255:	e8 4e 36 ff ff       	call   c000f8a8 <malloc>
c001c25a:	83 c4 0c             	add    esp,0xc
c001c25d:	89 c3                	mov    ebx,eax
c001c25f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c264:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c267:	56                   	push   esi
c001c268:	53                   	push   ebx
c001c269:	e8 34 71 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001c26e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c271:	e8 08 73 ff ff       	call   c001357e <File::unlink()>
c001c276:	83 c4 10             	add    esp,0x10
c001c279:	85 db                	test   ebx,ebx
c001c27b:	74 14                	je     c001c291 <sysCallRmdir(regs*)+0x4d>
c001c27d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c281:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c283:	83 ec 0c             	sub    esp,0xc
c001c286:	53                   	push   ebx
c001c287:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c28a:	83 c4 10             	add    esp,0x10
c001c28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c291:	85 c0                	test   eax,eax
c001c293:	0f 95 c0             	setne  al
c001c296:	31 d2                	xor    edx,edx
c001c298:	0f b6 c0             	movzx  eax,al
c001c29b:	f7 d8                	neg    eax
c001c29d:	83 d2 00             	adc    edx,0x0
c001c2a0:	83 c4 14             	add    esp,0x14
c001c2a3:	f7 da                	neg    edx
c001c2a5:	5b                   	pop    ebx
c001c2a6:	5e                   	pop    esi
c001c2a7:	c3                   	ret    

c001c2a8 <sysCallUnlink(regs*)>:
c001c2a8:	56                   	push   esi
c001c2a9:	53                   	push   ebx
c001c2aa:	83 ec 20             	sub    esp,0x20
c001c2ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c2b1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c2b4:	68 14 01 00 00       	push   0x114
c001c2b9:	e8 ea 35 ff ff       	call   c000f8a8 <malloc>
c001c2be:	83 c4 0c             	add    esp,0xc
c001c2c1:	89 c3                	mov    ebx,eax
c001c2c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2cb:	56                   	push   esi
c001c2cc:	53                   	push   ebx
c001c2cd:	e8 d0 70 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001c2d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2d5:	e8 a4 72 ff ff       	call   c001357e <File::unlink()>
c001c2da:	83 c4 10             	add    esp,0x10
c001c2dd:	85 db                	test   ebx,ebx
c001c2df:	74 14                	je     c001c2f5 <sysCallUnlink(regs*)+0x4d>
c001c2e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2e7:	83 ec 0c             	sub    esp,0xc
c001c2ea:	53                   	push   ebx
c001c2eb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2ee:	83 c4 10             	add    esp,0x10
c001c2f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2f5:	85 c0                	test   eax,eax
c001c2f7:	0f 95 c0             	setne  al
c001c2fa:	31 d2                	xor    edx,edx
c001c2fc:	0f b6 c0             	movzx  eax,al
c001c2ff:	f7 d8                	neg    eax
c001c301:	83 d2 00             	adc    edx,0x0
c001c304:	83 c4 14             	add    esp,0x14
c001c307:	f7 da                	neg    edx
c001c309:	5b                   	pop    ebx
c001c30a:	5e                   	pop    esi
c001c30b:	c3                   	ret    

c001c30c <sysCallGetArgv(regs*)>:
c001c30c:	83 ec 0c             	sub    esp,0xc
c001c30f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c313:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c316:	85 c0                	test   eax,eax
c001c318:	78 2b                	js     c001c345 <sysCallGetArgv(regs*)+0x39>
c001c31a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c320:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c323:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c329:	7d 1a                	jge    c001c345 <sysCallGetArgv(regs*)+0x39>
c001c32b:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c332:	85 c0                	test   eax,eax
c001c334:	74 17                	je     c001c34d <sysCallGetArgv(regs*)+0x41>
c001c336:	83 ec 08             	sub    esp,0x8
c001c339:	50                   	push   eax
c001c33a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c33d:	e8 e6 44 fe ff       	call   c0000828 <strcpy>
c001c342:	83 c4 10             	add    esp,0x10
c001c345:	31 c0                	xor    eax,eax
c001c347:	31 d2                	xor    edx,edx
c001c349:	83 c4 0c             	add    esp,0xc
c001c34c:	c3                   	ret    
c001c34d:	b8 01 00 00 00       	mov    eax,0x1
c001c352:	31 d2                	xor    edx,edx
c001c354:	83 c4 0c             	add    esp,0xc
c001c357:	c3                   	ret    

c001c358 <sysCallTTYName(regs*)>:
c001c358:	56                   	push   esi
c001c359:	53                   	push   ebx
c001c35a:	53                   	push   ebx
c001c35b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c35f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c362:	85 c0                	test   eax,eax
c001c364:	74 5f                	je     c001c3c5 <sysCallTTYName(regs*)+0x6d>
c001c366:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c369:	83 f8 02             	cmp    eax,0x2
c001c36c:	77 3e                	ja     c001c3ac <sysCallTTYName(regs*)+0x54>
c001c36e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c373:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c376:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c37c:	85 db                	test   ebx,ebx
c001c37e:	74 45                	je     c001c3c5 <sysCallTTYName(regs*)+0x6d>
c001c380:	83 ec 0c             	sub    esp,0xc
c001c383:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c385:	53                   	push   ebx
c001c386:	ff 10                	call   DWORD PTR [eax]
c001c388:	83 c4 10             	add    esp,0x10
c001c38b:	84 c0                	test   al,al
c001c38d:	74 41                	je     c001c3d0 <sysCallTTYName(regs*)+0x78>
c001c38f:	83 ec 08             	sub    esp,0x8
c001c392:	81 c3 82 00 00 00    	add    ebx,0x82
c001c398:	53                   	push   ebx
c001c399:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c39c:	e8 87 44 fe ff       	call   c0000828 <strcpy>
c001c3a1:	83 c4 10             	add    esp,0x10
c001c3a4:	31 c0                	xor    eax,eax
c001c3a6:	59                   	pop    ecx
c001c3a7:	31 d2                	xor    edx,edx
c001c3a9:	5b                   	pop    ebx
c001c3aa:	5e                   	pop    esi
c001c3ab:	c3                   	ret    
c001c3ac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c3b1:	74 bb                	je     c001c36e <sysCallTTYName(regs*)+0x16>
c001c3b3:	83 ec 0c             	sub    esp,0xc
c001c3b6:	50                   	push   eax
c001c3b7:	e8 2b 55 ff ff       	call   c00118e7 <getFromFileDescriptor(int)>
c001c3bc:	83 c4 10             	add    esp,0x10
c001c3bf:	89 c3                	mov    ebx,eax
c001c3c1:	85 db                	test   ebx,ebx
c001c3c3:	75 bb                	jne    c001c380 <sysCallTTYName(regs*)+0x28>
c001c3c5:	59                   	pop    ecx
c001c3c6:	b8 01 00 00 00       	mov    eax,0x1
c001c3cb:	31 d2                	xor    edx,edx
c001c3cd:	5b                   	pop    ebx
c001c3ce:	5e                   	pop    esi
c001c3cf:	c3                   	ret    
c001c3d0:	59                   	pop    ecx
c001c3d1:	b8 02 00 00 00       	mov    eax,0x2
c001c3d6:	31 d2                	xor    edx,edx
c001c3d8:	5b                   	pop    ebx
c001c3d9:	5e                   	pop    esi
c001c3da:	c3                   	ret    

c001c3db <sysCallUSleep(regs*)>:
c001c3db:	83 ec 14             	sub    esp,0x14
c001c3de:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c3e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c3e7:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c3ee:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c3f1:	01 ca                	add    edx,ecx
c001c3f3:	52                   	push   edx
c001c3f4:	50                   	push   eax
c001c3f5:	e8 a5 24 00 00       	call   c001e89f <nanoSleep(unsigned long long)>
c001c3fa:	31 c0                	xor    eax,eax
c001c3fc:	31 d2                	xor    edx,edx
c001c3fe:	83 c4 1c             	add    esp,0x1c
c001c401:	c3                   	ret    

c001c402 <sysCallSpawn(regs*)>:
c001c402:	56                   	push   esi
c001c403:	53                   	push   ebx
c001c404:	50                   	push   eax
c001c405:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c409:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c40c:	85 c0                	test   eax,eax
c001c40e:	75 08                	jne    c001c418 <sysCallSpawn(regs*)+0x16>
c001c410:	59                   	pop    ecx
c001c411:	31 c0                	xor    eax,eax
c001c413:	31 d2                	xor    edx,edx
c001c415:	5b                   	pop    ebx
c001c416:	5e                   	pop    esi
c001c417:	c3                   	ret    
c001c418:	83 ec 08             	sub    esp,0x8
c001c41b:	50                   	push   eax
c001c41c:	68 87 c9 02 c0       	push   0xc002c987
c001c421:	e8 1d 6a ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c426:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c42d:	e8 76 34 ff ff       	call   c000f8a8 <malloc>
c001c432:	83 c4 10             	add    esp,0x10
c001c435:	89 c6                	mov    esi,eax
c001c437:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c43a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c43d:	85 c0                	test   eax,eax
c001c43f:	75 32                	jne    c001c473 <sysCallSpawn(regs*)+0x71>
c001c441:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c446:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c449:	52                   	push   edx
c001c44a:	50                   	push   eax
c001c44b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c44e:	56                   	push   esi
c001c44f:	e8 28 1b 00 00       	call   c001df7c <Process::Process(char const*, Process*, char**)>
c001c454:	83 c4 10             	add    esp,0x10
c001c457:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c45e:	75 b0                	jne    c001c410 <sysCallSpawn(regs*)+0xe>
c001c460:	83 ec 0c             	sub    esp,0xc
c001c463:	56                   	push   esi
c001c464:	e8 f5 1f 00 00       	call   c001e45e <Process::createUserThread()>
c001c469:	8b 06                	mov    eax,DWORD PTR [esi]
c001c46b:	83 c4 10             	add    esp,0x10
c001c46e:	99                   	cdq    
c001c46f:	59                   	pop    ecx
c001c470:	5b                   	pop    ebx
c001c471:	5e                   	pop    esi
c001c472:	c3                   	ret    
c001c473:	31 c0                	xor    eax,eax
c001c475:	eb d2                	jmp    c001c449 <sysCallSpawn(regs*)+0x47>

c001c477 <sysCallGetEnv(regs*)>:
c001c477:	55                   	push   ebp
c001c478:	57                   	push   edi
c001c479:	56                   	push   esi
c001c47a:	53                   	push   ebx
c001c47b:	83 ec 28             	sub    esp,0x28
c001c47e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c482:	68 95 c9 02 c0       	push   0xc002c995
c001c487:	e8 b7 69 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c48c:	5f                   	pop    edi
c001c48d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c490:	5d                   	pop    ebp
c001c491:	53                   	push   ebx
c001c492:	68 c2 cc 02 c0       	push   0xc002ccc2
c001c497:	e8 a7 69 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c49c:	58                   	pop    eax
c001c49d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c4a0:	5a                   	pop    edx
c001c4a1:	57                   	push   edi
c001c4a2:	68 9e c9 02 c0       	push   0xc002c99e
c001c4a7:	e8 97 69 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c4ac:	59                   	pop    ecx
c001c4ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c4b5:	e8 6f e2 ff ff       	call   c001a729 <Krnl::getProcessTotalEnvCount(Process*)>
c001c4ba:	5a                   	pop    edx
c001c4bb:	89 c5                	mov    ebp,eax
c001c4bd:	59                   	pop    ecx
c001c4be:	50                   	push   eax
c001c4bf:	68 a8 c9 02 c0       	push   0xc002c9a8
c001c4c4:	e8 7a 69 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c4c9:	83 c4 10             	add    esp,0x10
c001c4cc:	39 ef                	cmp    edi,ebp
c001c4ce:	7c 15                	jl     c001c4e5 <sysCallGetEnv(regs*)+0x6e>
c001c4d0:	85 db                	test   ebx,ebx
c001c4d2:	75 0c                	jne    c001c4e0 <sysCallGetEnv(regs*)+0x69>
c001c4d4:	83 c4 1c             	add    esp,0x1c
c001c4d7:	31 c0                	xor    eax,eax
c001c4d9:	5b                   	pop    ebx
c001c4da:	31 d2                	xor    edx,edx
c001c4dc:	5e                   	pop    esi
c001c4dd:	5f                   	pop    edi
c001c4de:	5d                   	pop    ebp
c001c4df:	c3                   	ret    
c001c4e0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c4e3:	eb ef                	jmp    c001c4d4 <sysCallGetEnv(regs*)+0x5d>
c001c4e5:	83 ec 0c             	sub    esp,0xc
c001c4e8:	68 b4 c9 02 c0       	push   0xc002c9b4
c001c4ed:	e8 51 69 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c4f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c4f6:	83 c4 0c             	add    esp,0xc
c001c4f9:	57                   	push   edi
c001c4fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c500:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c503:	50                   	push   eax
c001c504:	e8 40 e2 ff ff       	call   c001a749 <Krnl::getProcessEnvPair(Process*, int)>
c001c509:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c50d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c511:	68 73 cd 02 c0       	push   0xc002cd73
c001c516:	e8 28 69 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c521:	85 f6                	test   esi,esi
c001c523:	75 47                	jne    c001c56c <sysCallGetEnv(regs*)+0xf5>
c001c525:	83 ec 0c             	sub    esp,0xc
c001c528:	55                   	push   ebp
c001c529:	e8 5a 42 fe ff       	call   c0000788 <strlen>
c001c52e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c531:	89 c3                	mov    ebx,eax
c001c533:	e8 50 42 fe ff       	call   c0000788 <strlen>
c001c538:	5a                   	pop    edx
c001c539:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c53d:	59                   	pop    ecx
c001c53e:	50                   	push   eax
c001c53f:	68 b7 c9 02 c0       	push   0xc002c9b7
c001c544:	e8 fa 68 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c549:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c54c:	e8 37 42 fe ff       	call   c0000788 <strlen>
c001c551:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c554:	89 c3                	mov    ebx,eax
c001c556:	e8 2d 42 fe ff       	call   c0000788 <strlen>
c001c55b:	83 c4 10             	add    esp,0x10
c001c55e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c562:	83 c4 1c             	add    esp,0x1c
c001c565:	31 d2                	xor    edx,edx
c001c567:	5b                   	pop    ebx
c001c568:	5e                   	pop    esi
c001c569:	5f                   	pop    edi
c001c56a:	5d                   	pop    ebp
c001c56b:	c3                   	ret    
c001c56c:	83 ec 0c             	sub    esp,0xc
c001c56f:	68 8d cd 02 c0       	push   0xc002cd8d
c001c574:	e8 ca 68 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c579:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c57c:	58                   	pop    eax
c001c57d:	5a                   	pop    edx
c001c57e:	55                   	push   ebp
c001c57f:	53                   	push   ebx
c001c580:	e8 a3 42 fe ff       	call   c0000828 <strcpy>
c001c585:	59                   	pop    ecx
c001c586:	5e                   	pop    esi
c001c587:	68 c1 c9 02 c0       	push   0xc002c9c1
c001c58c:	53                   	push   ebx
c001c58d:	e8 d6 43 fe ff       	call   c0000968 <strcat>
c001c592:	5d                   	pop    ebp
c001c593:	58                   	pop    eax
c001c594:	57                   	push   edi
c001c595:	53                   	push   ebx
c001c596:	e8 cd 43 fe ff       	call   c0000968 <strcat>
c001c59b:	c7 04 24 a7 cd 02 c0 	mov    DWORD PTR [esp],0xc002cda7
c001c5a2:	e8 9c 68 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c5a7:	83 c4 10             	add    esp,0x10
c001c5aa:	e9 25 ff ff ff       	jmp    c001c4d4 <sysCallGetEnv(regs*)+0x5d>

c001c5af <sysAppSettings(regs*)>:
c001c5af:	57                   	push   edi
c001c5b0:	56                   	push   esi
c001c5b1:	56                   	push   esi
c001c5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c5b9:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c5bf:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c5c4:	66 3d c0 09          	cmp    ax,0x9c0
c001c5c8:	75 2e                	jne    c001c5f8 <sysAppSettings(regs*)+0x49>
c001c5ca:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c5d0:	83 e0 1f             	and    eax,0x1f
c001c5d3:	3c 01                	cmp    al,0x1
c001c5d5:	74 2c                	je     c001c603 <sysAppSettings(regs*)+0x54>
c001c5d7:	3c 07                	cmp    al,0x7
c001c5d9:	0f 84 b3 00 00 00    	je     c001c692 <sysAppSettings(regs*)+0xe3>
c001c5df:	84 c0                	test   al,al
c001c5e1:	0f 84 d2 00 00 00    	je     c001c6b9 <sysAppSettings(regs*)+0x10a>
c001c5e7:	3c 08                	cmp    al,0x8
c001c5e9:	74 63                	je     c001c64e <sysAppSettings(regs*)+0x9f>
c001c5eb:	59                   	pop    ecx
c001c5ec:	0f b6 c0             	movzx  eax,al
c001c5ef:	5e                   	pop    esi
c001c5f0:	05 e8 03 00 00       	add    eax,0x3e8
c001c5f5:	5f                   	pop    edi
c001c5f6:	99                   	cdq    
c001c5f7:	c3                   	ret    
c001c5f8:	b8 01 00 00 00       	mov    eax,0x1
c001c5fd:	59                   	pop    ecx
c001c5fe:	31 d2                	xor    edx,edx
c001c600:	5e                   	pop    esi
c001c601:	5f                   	pop    edi
c001c602:	c3                   	ret    
c001c603:	50                   	push   eax
c001c604:	68 00 01 00 00       	push   0x100
c001c609:	6a 00                	push   0x0
c001c60b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c610:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c613:	83 c0 0c             	add    eax,0xc
c001c616:	50                   	push   eax
c001c617:	e8 50 41 fe ff       	call   c000076c <memset>
c001c61c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c621:	b9 ff 00 00 00       	mov    ecx,0xff
c001c626:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c629:	83 c7 0c             	add    edi,0xc
c001c62c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c62e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c633:	5a                   	pop    edx
c001c634:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c637:	59                   	pop    ecx
c001c638:	8d 50 0c             	lea    edx,[eax+0xc]
c001c63b:	52                   	push   edx
c001c63c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c642:	e8 cb 44 ff ff       	call   c0010b12 <VgaText::setTitle(char*)>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	31 c0                	xor    eax,eax
c001c64c:	eb af                	jmp    c001c5fd <sysAppSettings(regs*)+0x4e>
c001c64e:	83 ec 08             	sub    esp,0x8
c001c651:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c657:	83 e0 0f             	and    eax,0xf
c001c65a:	50                   	push   eax
c001c65b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c660:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c663:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c669:	e8 96 44 ff ff       	call   c0010b04 <VgaText::setTitleColour(VgaColour)>
c001c66e:	5f                   	pop    edi
c001c66f:	58                   	pop    eax
c001c670:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c676:	c1 e8 04             	shr    eax,0x4
c001c679:	83 e0 0f             	and    eax,0xf
c001c67c:	50                   	push   eax
c001c67d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c682:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c685:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c68b:	e8 66 44 ff ff       	call   c0010af6 <VgaText::setTitleTextColour(VgaColour)>
c001c690:	eb b5                	jmp    c001c647 <sysAppSettings(regs*)+0x98>
c001c692:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c697:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c69a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c6a0:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c6a6:	c0 e8 06             	shr    al,0x6
c001c6a9:	83 e0 01             	and    eax,0x1
c001c6ac:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c6b2:	31 c0                	xor    eax,eax
c001c6b4:	e9 44 ff ff ff       	jmp    c001c5fd <sysAppSettings(regs*)+0x4e>
c001c6b9:	b8 02 00 00 00       	mov    eax,0x2
c001c6be:	e9 3a ff ff ff       	jmp    c001c5fd <sysAppSettings(regs*)+0x4e>

c001c6c3 <sysSetFatAttrib(regs*)>:
c001c6c3:	57                   	push   edi
c001c6c4:	56                   	push   esi
c001c6c5:	53                   	push   ebx
c001c6c6:	83 ec 1c             	sub    esp,0x1c
c001c6c9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c6cd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c6d0:	68 14 01 00 00       	push   0x114
c001c6d5:	e8 ce 31 ff ff       	call   c000f8a8 <malloc>
c001c6da:	83 c4 0c             	add    esp,0xc
c001c6dd:	89 c3                	mov    ebx,eax
c001c6df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c6e7:	57                   	push   edi
c001c6e8:	53                   	push   ebx
c001c6e9:	e8 b4 6c ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001c6ee:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c6f1:	83 c4 0c             	add    esp,0xc
c001c6f4:	0f b6 d4             	movzx  edx,ah
c001c6f7:	0f b6 c0             	movzx  eax,al
c001c6fa:	52                   	push   edx
c001c6fb:	50                   	push   eax
c001c6fc:	53                   	push   ebx
c001c6fd:	e8 16 6f ff ff       	call   c0013618 <File::chfatattr(unsigned char, unsigned char)>
c001c702:	83 c4 10             	add    esp,0x10
c001c705:	85 db                	test   ebx,ebx
c001c707:	74 14                	je     c001c71d <sysSetFatAttrib(regs*)+0x5a>
c001c709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c70d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c70f:	83 ec 0c             	sub    esp,0xc
c001c712:	53                   	push   ebx
c001c713:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c716:	83 c4 10             	add    esp,0x10
c001c719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c71d:	85 c0                	test   eax,eax
c001c71f:	0f 95 c0             	setne  al
c001c722:	31 d2                	xor    edx,edx
c001c724:	0f b6 c0             	movzx  eax,al
c001c727:	f7 d8                	neg    eax
c001c729:	83 d2 00             	adc    edx,0x0
c001c72c:	83 c4 10             	add    esp,0x10
c001c72f:	f7 da                	neg    edx
c001c731:	5b                   	pop    ebx
c001c732:	5e                   	pop    esi
c001c733:	5f                   	pop    edi
c001c734:	c3                   	ret    

c001c735 <sysPipe(regs*)>:
c001c735:	57                   	push   edi
c001c736:	56                   	push   esi
c001c737:	53                   	push   ebx
c001c738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73c:	83 ec 0c             	sub    esp,0xc
c001c73f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c742:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c745:	6a 20                	push   0x20
c001c747:	e8 5c 31 ff ff       	call   c000f8a8 <malloc>
c001c74c:	89 c3                	mov    ebx,eax
c001c74e:	58                   	pop    eax
c001c74f:	5a                   	pop    edx
c001c750:	68 00 50 00 00       	push   0x5000
c001c755:	53                   	push   ebx
c001c756:	e8 5f 3d ff ff       	call   c00104ba <Pipe::Pipe(int)>
c001c75b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c75e:	e8 8f 4e ff ff       	call   c00115f2 <UnixFile::getFileDescriptor()>
c001c763:	89 07                	mov    DWORD PTR [edi],eax
c001c765:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c768:	e8 85 4e ff ff       	call   c00115f2 <UnixFile::getFileDescriptor()>
c001c76d:	83 c4 10             	add    esp,0x10
c001c770:	89 06                	mov    DWORD PTR [esi],eax
c001c772:	31 d2                	xor    edx,edx
c001c774:	5b                   	pop    ebx
c001c775:	31 c0                	xor    eax,eax
c001c777:	5e                   	pop    esi
c001c778:	5f                   	pop    edi
c001c779:	c3                   	ret    

c001c77a <sysGetUnixTime(regs*)>:
c001c77a:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001c77f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c785:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c789:	e9 06 76 ff ff       	jmp    c0013d94 <Clock::timeInSecondsLocal()>

c001c78e <string_ends_with(char const*, char const*)>:
c001c78e:	57                   	push   edi
c001c78f:	56                   	push   esi
c001c790:	53                   	push   ebx
c001c791:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c795:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c799:	83 ec 0c             	sub    esp,0xc
c001c79c:	53                   	push   ebx
c001c79d:	e8 e6 3f fe ff       	call   c0000788 <strlen>
c001c7a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7a5:	89 c6                	mov    esi,eax
c001c7a7:	e8 dc 3f fe ff       	call   c0000788 <strlen>
c001c7ac:	83 c4 10             	add    esp,0x10
c001c7af:	39 c6                	cmp    esi,eax
c001c7b1:	7d 06                	jge    c001c7b9 <string_ends_with(char const*, char const*)+0x2b>
c001c7b3:	5b                   	pop    ebx
c001c7b4:	31 c0                	xor    eax,eax
c001c7b6:	5e                   	pop    esi
c001c7b7:	5f                   	pop    edi
c001c7b8:	c3                   	ret    
c001c7b9:	83 ec 08             	sub    esp,0x8
c001c7bc:	29 c6                	sub    esi,eax
c001c7be:	57                   	push   edi
c001c7bf:	01 f3                	add    ebx,esi
c001c7c1:	53                   	push   ebx
c001c7c2:	e8 ed 40 fe ff       	call   c00008b4 <strcmp>
c001c7c7:	83 c4 10             	add    esp,0x10
c001c7ca:	85 c0                	test   eax,eax
c001c7cc:	5b                   	pop    ebx
c001c7cd:	0f 94 c0             	sete   al
c001c7d0:	5e                   	pop    esi
c001c7d1:	0f b6 c0             	movzx  eax,al
c001c7d4:	5f                   	pop    edi
c001c7d5:	c3                   	ret    

c001c7d6 <sysCallOpen(regs*)>:
c001c7d6:	56                   	push   esi
c001c7d7:	53                   	push   ebx
c001c7d8:	81 ec 04 01 00 00    	sub    esp,0x104
c001c7de:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c7e5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c7e8:	85 c9                	test   ecx,ecx
c001c7ea:	0f 84 b3 00 00 00    	je     c001c8a3 <sysCallOpen(regs*)+0xcd>
c001c7f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c7f3:	85 c0                	test   eax,eax
c001c7f5:	0f 84 a8 00 00 00    	je     c001c8a3 <sysCallOpen(regs*)+0xcd>
c001c7fb:	52                   	push   edx
c001c7fc:	68 c3 c9 02 c0       	push   0xc002c9c3
c001c801:	50                   	push   eax
c001c802:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c806:	56                   	push   esi
c001c807:	e8 ec 69 ff ff       	call   c00131f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c80c:	89 34 24             	mov    DWORD PTR [esp],esi
c001c80f:	e8 74 3f fe ff       	call   c0000788 <strlen>
c001c814:	83 c4 10             	add    esp,0x10
c001c817:	48                   	dec    eax
c001c818:	74 1d                	je     c001c837 <sysCallOpen(regs*)+0x61>
c001c81a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c81d:	eb 0f                	jmp    c001c82e <sysCallOpen(regs*)+0x58>
c001c81f:	80 fa 3a             	cmp    dl,0x3a
c001c822:	74 0f                	je     c001c833 <sysCallOpen(regs*)+0x5d>
c001c824:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c828:	48                   	dec    eax
c001c829:	74 0c                	je     c001c837 <sysCallOpen(regs*)+0x61>
c001c82b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c82e:	80 fa 2e             	cmp    dl,0x2e
c001c831:	75 ec                	jne    c001c81f <sysCallOpen(regs*)+0x49>
c001c833:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c837:	83 ec 08             	sub    esp,0x8
c001c83a:	68 c7 c9 02 c0       	push   0xc002c9c7
c001c83f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c842:	e8 47 ff ff ff       	call   c001c78e <string_ends_with(char const*, char const*)>
c001c847:	83 c4 10             	add    esp,0x10
c001c84a:	85 c0                	test   eax,eax
c001c84c:	75 17                	jne    c001c865 <sysCallOpen(regs*)+0x8f>
c001c84e:	83 ec 08             	sub    esp,0x8
c001c851:	68 e8 c9 02 c0       	push   0xc002c9e8
c001c856:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c859:	e8 30 ff ff ff       	call   c001c78e <string_ends_with(char const*, char const*)>
c001c85e:	83 c4 10             	add    esp,0x10
c001c861:	85 c0                	test   eax,eax
c001c863:	74 51                	je     c001c8b6 <sysCallOpen(regs*)+0xe0>
c001c865:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c868:	83 ec 08             	sub    esp,0x8
c001c86b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c871:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c878:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c87b:	ff 30                	push   DWORD PTR [eax]
c001c87d:	68 cc c9 02 c0       	push   0xc002c9cc
c001c882:	e8 bc 65 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c887:	c7 04 24 db c9 02 c0 	mov    DWORD PTR [esp],0xc002c9db
c001c88e:	e8 b0 65 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	81 c4 04 01 00 00    	add    esp,0x104
c001c89c:	31 c0                	xor    eax,eax
c001c89e:	31 d2                	xor    edx,edx
c001c8a0:	5b                   	pop    ebx
c001c8a1:	5e                   	pop    esi
c001c8a2:	c3                   	ret    
c001c8a3:	81 c4 04 01 00 00    	add    esp,0x104
c001c8a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c8ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c8b3:	5b                   	pop    ebx
c001c8b4:	5e                   	pop    esi
c001c8b5:	c3                   	ret    
c001c8b6:	83 ec 08             	sub    esp,0x8
c001c8b9:	68 c8 c9 02 c0       	push   0xc002c9c8
c001c8be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8c1:	e8 ee 3f fe ff       	call   c00008b4 <strcmp>
c001c8c6:	83 c4 10             	add    esp,0x10
c001c8c9:	85 c0                	test   eax,eax
c001c8cb:	74 98                	je     c001c865 <sysCallOpen(regs*)+0x8f>
c001c8cd:	83 ec 08             	sub    esp,0x8
c001c8d0:	68 c7 c9 02 c0       	push   0xc002c9c7
c001c8d5:	56                   	push   esi
c001c8d6:	e8 b3 fe ff ff       	call   c001c78e <string_ends_with(char const*, char const*)>
c001c8db:	83 c4 10             	add    esp,0x10
c001c8de:	85 c0                	test   eax,eax
c001c8e0:	75 83                	jne    c001c865 <sysCallOpen(regs*)+0x8f>
c001c8e2:	83 ec 08             	sub    esp,0x8
c001c8e5:	68 ed c9 02 c0       	push   0xc002c9ed
c001c8ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8ed:	e8 9c fe ff ff       	call   c001c78e <string_ends_with(char const*, char const*)>
c001c8f2:	83 c4 10             	add    esp,0x10
c001c8f5:	85 c0                	test   eax,eax
c001c8f7:	0f 85 d9 00 00 00    	jne    c001c9d6 <sysCallOpen(regs*)+0x200>
c001c8fd:	83 ec 08             	sub    esp,0x8
c001c900:	68 f2 c9 02 c0       	push   0xc002c9f2
c001c905:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c908:	e8 81 fe ff ff       	call   c001c78e <string_ends_with(char const*, char const*)>
c001c90d:	83 c4 10             	add    esp,0x10
c001c910:	85 c0                	test   eax,eax
c001c912:	0f 85 be 00 00 00    	jne    c001c9d6 <sysCallOpen(regs*)+0x200>
c001c918:	83 ec 08             	sub    esp,0x8
c001c91b:	68 ee c9 02 c0       	push   0xc002c9ee
c001c920:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c923:	e8 8c 3f fe ff       	call   c00008b4 <strcmp>
c001c928:	83 c4 10             	add    esp,0x10
c001c92b:	85 c0                	test   eax,eax
c001c92d:	0f 84 a3 00 00 00    	je     c001c9d6 <sysCallOpen(regs*)+0x200>
c001c933:	83 ec 08             	sub    esp,0x8
c001c936:	68 ed c9 02 c0       	push   0xc002c9ed
c001c93b:	56                   	push   esi
c001c93c:	e8 4d fe ff ff       	call   c001c78e <string_ends_with(char const*, char const*)>
c001c941:	83 c4 10             	add    esp,0x10
c001c944:	85 c0                	test   eax,eax
c001c946:	0f 85 8a 00 00 00    	jne    c001c9d6 <sysCallOpen(regs*)+0x200>
c001c94c:	83 ec 0c             	sub    esp,0xc
c001c94f:	68 14 01 00 00       	push   0x114
c001c954:	e8 4f 2f ff ff       	call   c000f8a8 <malloc>
c001c959:	83 c4 0c             	add    esp,0xc
c001c95c:	89 c6                	mov    esi,eax
c001c95e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c963:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c966:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c969:	56                   	push   esi
c001c96a:	e8 33 6a ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001c96f:	83 c4 10             	add    esp,0x10
c001c972:	85 f6                	test   esi,esi
c001c974:	0f 84 29 ff ff ff    	je     c001c8a3 <sysCallOpen(regs*)+0xcd>
c001c97a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c97d:	0f b6 c2             	movzx  eax,dl
c001c980:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c983:	89 d0                	mov    eax,edx
c001c985:	83 e0 01             	and    eax,0x1
c001c988:	f6 c2 02             	test   dl,0x2
c001c98b:	74 03                	je     c001c990 <sysCallOpen(regs*)+0x1ba>
c001c98d:	83 c8 02             	or     eax,0x2
c001c990:	f6 c2 04             	test   dl,0x4
c001c993:	74 03                	je     c001c998 <sysCallOpen(regs*)+0x1c2>
c001c995:	83 c8 04             	or     eax,0x4
c001c998:	f6 c2 08             	test   dl,0x8
c001c99b:	74 03                	je     c001c9a0 <sysCallOpen(regs*)+0x1ca>
c001c99d:	83 c8 0a             	or     eax,0xa
c001c9a0:	83 e2 10             	and    edx,0x10
c001c9a3:	74 03                	je     c001c9a8 <sysCallOpen(regs*)+0x1d2>
c001c9a5:	83 c8 12             	or     eax,0x12
c001c9a8:	83 ec 08             	sub    esp,0x8
c001c9ab:	50                   	push   eax
c001c9ac:	56                   	push   esi
c001c9ad:	e8 54 6a ff ff       	call   c0013406 <File::open(FileOpenMode)>
c001c9b2:	83 c4 10             	add    esp,0x10
c001c9b5:	85 c0                	test   eax,eax
c001c9b7:	0f 85 e6 fe ff ff    	jne    c001c8a3 <sysCallOpen(regs*)+0xcd>
c001c9bd:	83 ec 0c             	sub    esp,0xc
c001c9c0:	56                   	push   esi
c001c9c1:	e8 2c 4c ff ff       	call   c00115f2 <UnixFile::getFileDescriptor()>
c001c9c6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c9c9:	89 02                	mov    DWORD PTR [edx],eax
c001c9cb:	c1 f8 1f             	sar    eax,0x1f
c001c9ce:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c9d1:	e9 bd fe ff ff       	jmp    c001c893 <sysCallOpen(regs*)+0xbd>
c001c9d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c9d9:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c9df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9e6:	e9 ab fe ff ff       	jmp    c001c896 <sysCallOpen(regs*)+0xc0>

c001c9eb <Sys::loadSyscalls()>:
c001c9eb:	c7 05 e0 1a 03 c0 db ba 01 c0 	mov    DWORD PTR ds:0xc0031ae0,0xc001badb
c001c9f5:	c7 05 e4 1a 03 c0 40 b6 01 c0 	mov    DWORD PTR ds:0xc0031ae4,0xc001b640
c001c9ff:	c7 05 e8 1a 03 c0 2e b8 01 c0 	mov    DWORD PTR ds:0xc0031ae8,0xc001b82e
c001ca09:	c7 05 ec 1a 03 c0 11 ba 01 c0 	mov    DWORD PTR ds:0xc0031aec,0xc001ba11
c001ca13:	c7 05 f0 1a 03 c0 c6 b7 01 c0 	mov    DWORD PTR ds:0xc0031af0,0xc001b7c6
c001ca1d:	c7 05 f4 1a 03 c0 77 b6 01 c0 	mov    DWORD PTR ds:0xc0031af4,0xc001b677
c001ca27:	c7 05 f8 1a 03 c0 58 b6 01 c0 	mov    DWORD PTR ds:0xc0031af8,0xc001b658
c001ca31:	c7 05 fc 1a 03 c0 83 b8 01 c0 	mov    DWORD PTR ds:0xc0031afc,0xc001b883
c001ca3b:	c7 05 04 1b 03 c0 16 c0 01 c0 	mov    DWORD PTR ds:0xc0031b04,0xc001c016
c001ca45:	c7 05 00 1b 03 c0 d6 c7 01 c0 	mov    DWORD PTR ds:0xc0031b00,0xc001c7d6
c001ca4f:	c7 05 08 1b 03 c0 9e c0 01 c0 	mov    DWORD PTR ds:0xc0031b08,0xc001c09e
c001ca59:	c7 05 0c 1b 03 c0 05 bd 01 c0 	mov    DWORD PTR ds:0xc0031b0c,0xc001bd05
c001ca63:	c7 05 10 1b 03 c0 21 bb 01 c0 	mov    DWORD PTR ds:0xc0031b10,0xc001bb21
c001ca6d:	c7 05 14 1b 03 c0 26 bb 01 c0 	mov    DWORD PTR ds:0xc0031b14,0xc001bb26
c001ca77:	c7 05 18 1b 03 c0 79 c1 01 c0 	mov    DWORD PTR ds:0xc0031b18,0xc001c179
c001ca81:	c7 05 1c 1b 03 c0 13 c1 01 c0 	mov    DWORD PTR ds:0xc0031b1c,0xc001c113
c001ca8b:	c7 05 20 1b 03 c0 ed bd 01 c0 	mov    DWORD PTR ds:0xc0031b20,0xc001bded
c001ca95:	c7 05 24 1b 03 c0 56 be 01 c0 	mov    DWORD PTR ds:0xc0031b24,0xc001be56
c001ca9f:	c7 05 28 1b 03 c0 d3 be 01 c0 	mov    DWORD PTR ds:0xc0031b28,0xc001bed3
c001caa9:	c7 05 2c 1b 03 c0 2b bb 01 c0 	mov    DWORD PTR ds:0xc0031b2c,0xc001bb2b
c001cab3:	c7 05 30 1b 03 c0 e9 c1 01 c0 	mov    DWORD PTR ds:0xc0031b30,0xc001c1e9
c001cabd:	c7 05 34 1b 03 c0 03 c2 01 c0 	mov    DWORD PTR ds:0xc0031b34,0xc001c203
c001cac7:	c7 05 38 1b 03 c0 03 c2 01 c0 	mov    DWORD PTR ds:0xc0031b38,0xc001c203
c001cad1:	c7 05 3c 1b 03 c0 44 c2 01 c0 	mov    DWORD PTR ds:0xc0031b3c,0xc001c244
c001cadb:	c7 05 40 1b 03 c0 a8 c2 01 c0 	mov    DWORD PTR ds:0xc0031b40,0xc001c2a8
c001cae5:	c7 05 44 1b 03 c0 d7 bc 01 c0 	mov    DWORD PTR ds:0xc0031b44,0xc001bcd7
c001caef:	c7 05 48 1b 03 c0 0c c3 01 c0 	mov    DWORD PTR ds:0xc0031b48,0xc001c30c
c001caf9:	c7 05 4c 1b 03 c0 94 bc 01 c0 	mov    DWORD PTR ds:0xc0031b4c,0xc001bc94
c001cb03:	c7 05 50 1b 03 c0 58 c3 01 c0 	mov    DWORD PTR ds:0xc0031b50,0xc001c358
c001cb0d:	c7 05 54 1b 03 c0 93 bd 01 c0 	mov    DWORD PTR ds:0xc0031b54,0xc001bd93
c001cb17:	c7 05 58 1b 03 c0 db c3 01 c0 	mov    DWORD PTR ds:0xc0031b58,0xc001c3db
c001cb21:	c7 05 5c 1b 03 c0 56 bf 01 c0 	mov    DWORD PTR ds:0xc0031b5c,0xc001bf56
c001cb2b:	c7 05 60 1b 03 c0 02 c4 01 c0 	mov    DWORD PTR ds:0xc0031b60,0xc001c402
c001cb35:	c7 05 64 1b 03 c0 77 c4 01 c0 	mov    DWORD PTR ds:0xc0031b64,0xc001c477
c001cb3f:	c7 05 68 1b 03 c0 af c5 01 c0 	mov    DWORD PTR ds:0xc0031b68,0xc001c5af
c001cb49:	c7 05 6c 1b 03 c0 35 bb 01 c0 	mov    DWORD PTR ds:0xc0031b6c,0xc001bb35
c001cb53:	c7 05 70 1b 03 c0 9f bb 01 c0 	mov    DWORD PTR ds:0xc0031b70,0xc001bb9f
c001cb5d:	c7 05 74 1b 03 c0 e5 bb 01 c0 	mov    DWORD PTR ds:0xc0031b74,0xc001bbe5
c001cb67:	c7 05 78 1b 03 c0 c3 c6 01 c0 	mov    DWORD PTR ds:0xc0031b78,0xc001c6c3
c001cb71:	c7 05 7c 1b 03 c0 1e c2 01 c0 	mov    DWORD PTR ds:0xc0031b7c,0xc001c21e
c001cb7b:	c7 05 80 1b 03 c0 36 bc 01 c0 	mov    DWORD PTR ds:0xc0031b80,0xc001bc36
c001cb85:	c7 05 84 1b 03 c0 35 c7 01 c0 	mov    DWORD PTR ds:0xc0031b84,0xc001c735
c001cb8f:	c7 05 88 1b 03 c0 7a c7 01 c0 	mov    DWORD PTR ds:0xc0031b88,0xc001c77a
c001cb99:	c7 05 8c 1b 03 c0 1e b7 01 c0 	mov    DWORD PTR ds:0xc0031b8c,0xc001b71e
c001cba3:	c7 05 90 1b 03 c0 9f b8 01 c0 	mov    DWORD PTR ds:0xc0031b90,0xc001b89f
c001cbad:	c7 05 94 1b 03 c0 c7 b9 01 c0 	mov    DWORD PTR ds:0xc0031b94,0xc001b9c7
c001cbb7:	c7 05 98 1b 03 c0 0a b6 01 c0 	mov    DWORD PTR ds:0xc0031b98,0xc001b60a
c001cbc1:	c7 05 9c 1b 03 c0 79 ba 01 c0 	mov    DWORD PTR ds:0xc0031b9c,0xc001ba79
c001cbcb:	c7 05 a0 1b 03 c0 83 b6 01 c0 	mov    DWORD PTR ds:0xc0031ba0,0xc001b683
c001cbd5:	c7 05 a4 1b 03 c0 9a b6 01 c0 	mov    DWORD PTR ds:0xc0031ba4,0xc001b69a
c001cbdf:	c3                   	ret    

c001cbe0 <Sys::systemCall(regs*, void*)>:
c001cbe0:	53                   	push   ebx
c001cbe1:	83 ec 08             	sub    esp,0x8
c001cbe4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbe8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cbeb:	83 f8 7f             	cmp    eax,0x7f
c001cbee:	77 16                	ja     c001cc06 <Sys::systemCall(regs*, void*)+0x26>
c001cbf0:	8b 14 85 e0 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce520]
c001cbf7:	85 d2                	test   edx,edx
c001cbf9:	74 0b                	je     c001cc06 <Sys::systemCall(regs*, void*)+0x26>
c001cbfb:	83 ec 0c             	sub    esp,0xc
c001cbfe:	53                   	push   ebx
c001cbff:	ff d2                	call   edx
c001cc01:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cc04:	eb 0d                	jmp    c001cc13 <Sys::systemCall(regs*, void*)+0x33>
c001cc06:	52                   	push   edx
c001cc07:	52                   	push   edx
c001cc08:	50                   	push   eax
c001cc09:	68 f7 c9 02 c0       	push   0xc002c9f7
c001cc0e:	e8 30 62 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001cc13:	83 c4 10             	add    esp,0x10
c001cc16:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cc1b:	31 d2                	xor    edx,edx
c001cc1d:	83 c4 08             	add    esp,0x8
c001cc20:	5b                   	pop    ebx
c001cc21:	c3                   	ret    

c001cc22 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cc22:	55                   	push   ebp
c001cc23:	57                   	push   edi
c001cc24:	56                   	push   esi
c001cc25:	53                   	push   ebx
c001cc26:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cc2c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cc33:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cc3a:	85 c0                	test   eax,eax
c001cc3c:	0f 95 c1             	setne  cl
c001cc3f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cc47:	0f 94 c2             	sete   dl
c001cc4a:	84 d1                	test   cl,dl
c001cc4c:	74 23                	je     c001cc71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cc4e:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cc54:	74 1b                	je     c001cc71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cc56:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cc5c:	89 da                	mov    edx,ebx
c001cc5e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cc64:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cc6a:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cc71:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cc78:	05 ff 0f 00 00       	add    eax,0xfff
c001cc7d:	83 ec 0c             	sub    esp,0xc
c001cc80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc84:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cc8a:	c1 e8 0c             	shr    eax,0xc
c001cc8d:	89 fe                	mov    esi,edi
c001cc8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc93:	c1 ee 0c             	shr    esi,0xc
c001cc96:	6a 01                	push   0x1
c001cc98:	e8 a0 4d ff ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c001cc9d:	89 c5                	mov    ebp,eax
c001cc9f:	58                   	pop    eax
c001cca0:	5a                   	pop    edx
c001cca1:	56                   	push   esi
c001cca2:	68 7b ca 02 c0       	push   0xc002ca7b
c001cca7:	e8 97 61 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ccac:	59                   	pop    ecx
c001ccad:	58                   	pop    eax
c001ccae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ccb2:	68 8d ca 02 c0       	push   0xc002ca8d
c001ccb7:	e8 87 61 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ccbc:	83 c4 10             	add    esp,0x10
c001ccbf:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001ccc5:	0f 86 32 01 00 00    	jbe    c001cdfd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1db>
c001cccb:	89 f0                	mov    eax,esi
c001cccd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccd0:	c1 e0 0c             	shl    eax,0xc
c001ccd3:	01 d8                	add    eax,ebx
c001ccd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccd9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001cce0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cce3:	01 df                	add    edi,ebx
c001cce5:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cce8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001ccec:	0f 84 08 01 00 00    	je     c001cdfa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d8>
c001ccf2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001ccf8:	76 05                	jbe    c001ccff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdd>
c001ccfa:	bf 00 10 00 00       	mov    edi,0x1000
c001ccff:	83 ec 0c             	sub    esp,0xc
c001cd02:	31 d2                	xor    edx,edx
c001cd04:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cd0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cd0d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cd11:	50                   	push   eax
c001cd12:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cd16:	56                   	push   esi
c001cd17:	52                   	push   edx
c001cd18:	57                   	push   edi
c001cd19:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cd20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd23:	83 c4 20             	add    esp,0x20
c001cd26:	85 c0                	test   eax,eax
c001cd28:	74 0a                	je     c001cd34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x112>
c001cd2a:	53                   	push   ebx
c001cd2b:	53                   	push   ebx
c001cd2c:	50                   	push   eax
c001cd2d:	68 9f ca 02 c0       	push   0xc002ca9f
c001cd32:	eb 0f                	jmp    c001cd43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x121>
c001cd34:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001cd38:	74 20                	je     c001cd5a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x138>
c001cd3a:	51                   	push   ecx
c001cd3b:	51                   	push   ecx
c001cd3c:	6a 00                	push   0x0
c001cd3e:	68 ca ca 02 c0       	push   0xc002caca
c001cd43:	e8 fb 60 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001cd48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd4b:	e8 ad 51 ff ff       	call   c0011efd <Virt::freeKernelVirtualPages(unsigned long)>
c001cd50:	83 c4 10             	add    esp,0x10
c001cd53:	31 c0                	xor    eax,eax
c001cd55:	e9 69 01 00 00       	jmp    c001cec3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x2a1>
c001cd5a:	fa                   	cli    
c001cd5b:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001cd61:	e8 ae 31 ff ff       	call   c000ff14 <Phys::allocatePage()>
c001cd66:	6a 07                	push   0x7
c001cd68:	89 c7                	mov    edi,eax
c001cd6a:	55                   	push   ebp
c001cd6b:	50                   	push   eax
c001cd6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd74:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd7a:	e8 f5 54 ff ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd7f:	83 c4 0c             	add    esp,0xc
c001cd82:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cd89:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd8f:	6a 00                	push   0x0
c001cd91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd99:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd9f:	e8 2a 53 ff ff       	call   c00120ce <VAS::mapOtherVASIn(bool, VAS*)>
c001cda4:	58                   	pop    eax
c001cda5:	5a                   	pop    edx
c001cda6:	68 07 0c 00 00       	push   0xc07
c001cdab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cdaf:	57                   	push   edi
c001cdb0:	89 ef                	mov    edi,ebp
c001cdb2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cdb9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdbf:	6a 00                	push   0x0
c001cdc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cdc9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdcf:	e8 5c 58 ff ff       	call   c0012630 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cdd4:	b9 00 10 00 00       	mov    ecx,0x1000
c001cdd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cddb:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001cde0:	83 c4 20             	add    esp,0x20
c001cde3:	48                   	dec    eax
c001cde4:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001cde9:	85 c0                	test   eax,eax
c001cdeb:	75 01                	jne    c001cdee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cc>
c001cded:	fb                   	sti    
c001cdee:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cdf5:	e9 df fe ff ff       	jmp    c001ccd9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb7>
c001cdfa:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cdfd:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ce05:	0f 86 aa 00 00 00    	jbe    c001ceb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x293>
c001ce0b:	fa                   	cli    
c001ce0c:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001ce12:	51                   	push   ecx
c001ce13:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ce1a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce20:	6a 00                	push   0x0
c001ce22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce2a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce30:	e8 99 52 ff ff       	call   c00120ce <VAS::mapOtherVASIn(bool, VAS*)>
c001ce35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce39:	c1 e0 0c             	shl    eax,0xc
c001ce3c:	8d 34 18             	lea    esi,[eax+ebx*1]
c001ce3f:	83 c4 10             	add    esp,0x10
c001ce42:	39 de                	cmp    esi,ebx
c001ce44:	74 61                	je     c001cea7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x285>
c001ce46:	e8 c9 30 ff ff       	call   c000ff14 <Phys::allocatePage()>
c001ce4b:	6a 07                	push   0x7
c001ce4d:	89 c7                	mov    edi,eax
c001ce4f:	55                   	push   ebp
c001ce50:	50                   	push   eax
c001ce51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce56:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce59:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce5f:	e8 10 54 ff ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce64:	58                   	pop    eax
c001ce65:	5a                   	pop    edx
c001ce66:	68 07 0c 00 00       	push   0xc07
c001ce6b:	53                   	push   ebx
c001ce6c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ce72:	57                   	push   edi
c001ce73:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ce7a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce80:	6a 00                	push   0x0
c001ce82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce8a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce90:	e8 9b 57 ff ff       	call   c0012630 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ce95:	83 c4 1c             	add    esp,0x1c
c001ce98:	68 00 10 00 00       	push   0x1000
c001ce9d:	6a 00                	push   0x0
c001ce9f:	55                   	push   ebp
c001cea0:	e8 c7 38 fe ff       	call   c000076c <memset>
c001cea5:	eb 98                	jmp    c001ce3f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21d>
c001cea7:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001ceac:	48                   	dec    eax
c001cead:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001ceb2:	75 01                	jne    c001ceb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x293>
c001ceb4:	fb                   	sti    
c001ceb5:	83 ec 0c             	sub    esp,0xc
c001ceb8:	55                   	push   ebp
c001ceb9:	e8 3f 50 ff ff       	call   c0011efd <Virt::freeKernelVirtualPages(unsigned long)>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	b0 01                	mov    al,0x1
c001cec3:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cec9:	5b                   	pop    ebx
c001ceca:	5e                   	pop    esi
c001cecb:	5f                   	pop    edi
c001cecc:	5d                   	pop    ebp
c001cecd:	c3                   	ret    

c001cece <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cece:	55                   	push   ebp
c001cecf:	57                   	push   edi
c001ced0:	56                   	push   esi
c001ced1:	53                   	push   ebx
c001ced2:	83 ec 48             	sub    esp,0x48
c001ced5:	68 14 01 00 00       	push   0x114
c001ceda:	e8 c9 29 ff ff       	call   c000f8a8 <malloc>
c001cedf:	83 c4 0c             	add    esp,0xc
c001cee2:	89 c6                	mov    esi,eax
c001cee4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cee8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ceec:	50                   	push   eax
c001ceed:	e8 b0 64 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001cef2:	58                   	pop    eax
c001cef3:	5a                   	pop    edx
c001cef4:	6a 01                	push   0x1
c001cef6:	56                   	push   esi
c001cef7:	e8 0a 65 ff ff       	call   c0013406 <File::open(FileOpenMode)>
c001cefc:	83 c4 10             	add    esp,0x10
c001ceff:	85 c0                	test   eax,eax
c001cf01:	0f 85 47 01 00 00    	jne    c001d04e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf07:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cf0f:	83 ec 0c             	sub    esp,0xc
c001cf12:	6a 34                	push   0x34
c001cf14:	e8 8f 29 ff ff       	call   c000f8a8 <malloc>
c001cf19:	89 c3                	mov    ebx,eax
c001cf1b:	58                   	pop    eax
c001cf1c:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf1e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cf22:	57                   	push   edi
c001cf23:	53                   	push   ebx
c001cf24:	6a 00                	push   0x0
c001cf26:	6a 34                	push   0x34
c001cf28:	56                   	push   esi
c001cf29:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf2c:	83 c4 20             	add    esp,0x20
c001cf2f:	85 c0                	test   eax,eax
c001cf31:	0f 85 17 01 00 00    	jne    c001d04e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf37:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cf3d:	0f 85 0b 01 00 00    	jne    c001d04e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf43:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cf46:	85 c0                	test   eax,eax
c001cf48:	0f 84 00 01 00 00    	je     c001d04e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf4e:	31 d2                	xor    edx,edx
c001cf50:	55                   	push   ebp
c001cf51:	52                   	push   edx
c001cf52:	50                   	push   eax
c001cf53:	56                   	push   esi
c001cf54:	e8 6b 65 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001cf59:	83 c4 10             	add    esp,0x10
c001cf5c:	85 c0                	test   eax,eax
c001cf5e:	0f 85 ea 00 00 00    	jne    c001d04e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf64:	83 ec 0c             	sub    esp,0xc
c001cf67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cf6a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cf6e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cf72:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cf76:	0f af c2             	imul   eax,edx
c001cf79:	50                   	push   eax
c001cf7a:	e8 29 29 ff ff       	call   c000f8a8 <malloc>
c001cf7f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cf81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf85:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf88:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf8c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cf90:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cf94:	0f af c2             	imul   eax,edx
c001cf97:	99                   	cdq    
c001cf98:	52                   	push   edx
c001cf99:	50                   	push   eax
c001cf9a:	56                   	push   esi
c001cf9b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf9e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cfa1:	83 c4 20             	add    esp,0x20
c001cfa4:	85 c0                	test   eax,eax
c001cfa6:	0f 84 a2 00 00 00    	je     c001d04e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfac:	31 d2                	xor    edx,edx
c001cfae:	51                   	push   ecx
c001cfaf:	52                   	push   edx
c001cfb0:	50                   	push   eax
c001cfb1:	56                   	push   esi
c001cfb2:	e8 0d 65 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001cfb7:	83 c4 10             	add    esp,0x10
c001cfba:	85 c0                	test   eax,eax
c001cfbc:	0f 85 8c 00 00 00    	jne    c001d04e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfc2:	83 ec 0c             	sub    esp,0xc
c001cfc5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cfc9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cfcd:	31 ed                	xor    ebp,ebp
c001cfcf:	0f af c2             	imul   eax,edx
c001cfd2:	50                   	push   eax
c001cfd3:	e8 d0 28 ff ff       	call   c000f8a8 <malloc>
c001cfd8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cfda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfde:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfe5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cfe9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cfed:	0f af c2             	imul   eax,edx
c001cff0:	99                   	cdq    
c001cff1:	52                   	push   edx
c001cff2:	50                   	push   eax
c001cff3:	56                   	push   esi
c001cff4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cff7:	83 c4 20             	add    esp,0x20
c001cffa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d002:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d006:	0f 86 80 00 00 00    	jbe    c001d08c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d00c:	0f b7 fd             	movzx  edi,bp
c001d00f:	c1 e7 05             	shl    edi,0x5
c001d012:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d016:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d019:	75 6b                	jne    c001d086 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d01b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d01e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d022:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d025:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d029:	52                   	push   edx
c001d02a:	31 d2                	xor    edx,edx
c001d02c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d02f:	52                   	push   edx
c001d030:	50                   	push   eax
c001d031:	56                   	push   esi
c001d032:	e8 8d 64 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	85 c0                	test   eax,eax
c001d03c:	74 17                	je     c001d055 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d03e:	83 ec 0c             	sub    esp,0xc
c001d041:	68 f6 ca 02 c0       	push   0xc002caf6
c001d046:	e8 f8 5d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001d04b:	83 c4 10             	add    esp,0x10
c001d04e:	31 c0                	xor    eax,eax
c001d050:	e9 87 00 00 00       	jmp    c001d0dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d055:	83 ec 0c             	sub    esp,0xc
c001d058:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d05b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d05e:	50                   	push   eax
c001d05f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d063:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d067:	56                   	push   esi
c001d068:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d06c:	e8 b1 fb ff ff       	call   c001cc22 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d071:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d075:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d079:	83 c4 20             	add    esp,0x20
c001d07c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d080:	73 04                	jae    c001d086 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d082:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d086:	45                   	inc    ebp
c001d087:	e9 76 ff ff ff       	jmp    c001d002 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d08c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d090:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d094:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d098:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d09e:	83 ec 0c             	sub    esp,0xc
c001d0a1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d0a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d0ac:	05 00 10 00 00       	add    eax,0x1000
c001d0b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0b8:	e8 fb 27 ff ff       	call   c000f8b8 <free>
c001d0bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c0:	e8 f3 27 ff ff       	call   c000f8b8 <free>
c001d0c5:	58                   	pop    eax
c001d0c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0ca:	e8 e9 27 ff ff       	call   c000f8b8 <free>
c001d0cf:	89 34 24             	mov    DWORD PTR [esp],esi
c001d0d2:	e8 8d 63 ff ff       	call   c0013464 <File::close()>
c001d0d7:	83 c4 10             	add    esp,0x10
c001d0da:	b0 01                	mov    al,0x1
c001d0dc:	83 c4 3c             	add    esp,0x3c
c001d0df:	5b                   	pop    ebx
c001d0e0:	5e                   	pop    esi
c001d0e1:	5f                   	pop    edi
c001d0e2:	5d                   	pop    ebp
c001d0e3:	c3                   	ret    

c001d0e4 <Thr::runtimeReferenceHelper()>:
c001d0e4:	83 ec 18             	sub    esp,0x18
c001d0e7:	68 fe ca 02 c0       	push   0xc002cafe
c001d0ec:	e8 52 5d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001d0f1:	fa                   	cli    
c001d0f2:	83 c4 10             	add    esp,0x10
c001d0f5:	eb fe                	jmp    c001d0f5 <Thr::runtimeReferenceHelper()+0x11>

c001d0f7 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d0f7:	57                   	push   edi
c001d0f8:	56                   	push   esi
c001d0f9:	53                   	push   ebx
c001d0fa:	31 db                	xor    ebx,ebx
c001d0fc:	39 1d 80 24 03 c0    	cmp    DWORD PTR ds:0xc0032480,ebx
c001d102:	7e 3c                	jle    c001d140 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d104:	8b 34 9d 00 24 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdc00]
c001d10b:	31 ff                	xor    edi,edi
c001d10d:	39 3c 9d 00 23 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdd00],edi
c001d114:	7e 27                	jle    c001d13d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d116:	50                   	push   eax
c001d117:	50                   	push   eax
c001d118:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d11c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d11e:	03 04 9d 80 23 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdc80]
c001d125:	50                   	push   eax
c001d126:	e8 89 37 fe ff       	call   c00008b4 <strcmp>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	85 c0                	test   eax,eax
c001d130:	75 05                	jne    c001d137 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d132:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d135:	eb 0b                	jmp    c001d142 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d137:	83 c6 10             	add    esi,0x10
c001d13a:	47                   	inc    edi
c001d13b:	eb d0                	jmp    c001d10d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d13d:	43                   	inc    ebx
c001d13e:	eb bc                	jmp    c001d0fc <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d140:	31 c0                	xor    eax,eax
c001d142:	5b                   	pop    ebx
c001d143:	5e                   	pop    esi
c001d144:	5f                   	pop    edi
c001d145:	c3                   	ret    

c001d146 <Thr::loadKernelSymbolTable(char const*)>:
c001d146:	55                   	push   ebp
c001d147:	57                   	push   edi
c001d148:	56                   	push   esi
c001d149:	53                   	push   ebx
c001d14a:	83 ec 68             	sub    esp,0x68
c001d14d:	8b 35 d0 24 03 c0    	mov    esi,DWORD PTR ds:0xc00324d0
c001d153:	68 14 01 00 00       	push   0x114
c001d158:	e8 4b 27 ff ff       	call   c000f8a8 <malloc>
c001d15d:	83 c4 0c             	add    esp,0xc
c001d160:	89 c3                	mov    ebx,eax
c001d162:	56                   	push   esi
c001d163:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d167:	50                   	push   eax
c001d168:	e8 35 62 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001d16d:	5e                   	pop    esi
c001d16e:	5f                   	pop    edi
c001d16f:	6a 01                	push   0x1
c001d171:	53                   	push   ebx
c001d172:	e8 8f 62 ff ff       	call   c0013406 <File::open(FileOpenMode)>
c001d177:	83 c4 10             	add    esp,0x10
c001d17a:	85 c0                	test   eax,eax
c001d17c:	74 0a                	je     c001d188 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d17e:	83 ec 0c             	sub    esp,0xc
c001d181:	68 20 cb 02 c0       	push   0xc002cb20
c001d186:	eb 34                	jmp    c001d1bc <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d188:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d190:	83 ec 0c             	sub    esp,0xc
c001d193:	6a 34                	push   0x34
c001d195:	e8 0e 27 ff ff       	call   c000f8a8 <malloc>
c001d19a:	59                   	pop    ecx
c001d19b:	89 c7                	mov    edi,eax
c001d19d:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d1a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1a3:	56                   	push   esi
c001d1a4:	57                   	push   edi
c001d1a5:	6a 00                	push   0x0
c001d1a7:	6a 34                	push   0x34
c001d1a9:	53                   	push   ebx
c001d1aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1ad:	83 c4 20             	add    esp,0x20
c001d1b0:	85 c0                	test   eax,eax
c001d1b2:	74 17                	je     c001d1cb <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d1b4:	83 ec 0c             	sub    esp,0xc
c001d1b7:	68 37 cb 02 c0       	push   0xc002cb37
c001d1bc:	e8 4c d6 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001d1c1:	83 c4 10             	add    esp,0x10
c001d1c4:	31 c0                	xor    eax,eax
c001d1c6:	e9 31 02 00 00       	jmp    c001d3fc <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d1cb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d1d1:	75 e1                	jne    c001d1b4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d1d3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d1d6:	85 c0                	test   eax,eax
c001d1d8:	74 da                	je     c001d1b4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d1da:	52                   	push   edx
c001d1db:	31 d2                	xor    edx,edx
c001d1dd:	52                   	push   edx
c001d1de:	50                   	push   eax
c001d1df:	53                   	push   ebx
c001d1e0:	e8 df 62 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d1e5:	83 c4 10             	add    esp,0x10
c001d1e8:	85 c0                	test   eax,eax
c001d1ea:	75 c8                	jne    c001d1b4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d1ec:	83 ec 0c             	sub    esp,0xc
c001d1ef:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d1f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1f7:	31 ed                	xor    ebp,ebp
c001d1f9:	0f af c2             	imul   eax,edx
c001d1fc:	50                   	push   eax
c001d1fd:	e8 a6 26 ff ff       	call   c000f8a8 <malloc>
c001d202:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d204:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d208:	89 34 24             	mov    DWORD PTR [esp],esi
c001d20b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d20f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d213:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d217:	0f af c2             	imul   eax,edx
c001d21a:	99                   	cdq    
c001d21b:	52                   	push   edx
c001d21c:	50                   	push   eax
c001d21d:	53                   	push   ebx
c001d21e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d221:	83 c4 20             	add    esp,0x20
c001d224:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d22c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d234:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d23c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d244:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d248:	0f 86 aa 00 00 00    	jbe    c001d2f8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d24e:	0f b7 f5             	movzx  esi,bp
c001d251:	6b f6 28             	imul   esi,esi,0x28
c001d254:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d258:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d25b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d25f:	50                   	push   eax
c001d260:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d264:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d268:	8b 16                	mov    edx,DWORD PTR [esi]
c001d26a:	6b c0 28             	imul   eax,eax,0x28
c001d26d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d271:	89 d0                	mov    eax,edx
c001d273:	31 d2                	xor    edx,edx
c001d275:	52                   	push   edx
c001d276:	50                   	push   eax
c001d277:	53                   	push   ebx
c001d278:	e8 47 62 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d27d:	83 c4 0c             	add    esp,0xc
c001d280:	6a 20                	push   0x20
c001d282:	6a 00                	push   0x0
c001d284:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d288:	52                   	push   edx
c001d289:	e8 de 34 fe ff       	call   c000076c <memset>
c001d28e:	58                   	pop    eax
c001d28f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d291:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d295:	51                   	push   ecx
c001d296:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d29a:	52                   	push   edx
c001d29b:	6a 00                	push   0x0
c001d29d:	6a 1f                	push   0x1f
c001d29f:	53                   	push   ebx
c001d2a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2a3:	83 c4 18             	add    esp,0x18
c001d2a6:	68 4e cb 02 c0       	push   0xc002cb4e
c001d2ab:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d2af:	52                   	push   edx
c001d2b0:	e8 ff 35 fe ff       	call   c00008b4 <strcmp>
c001d2b5:	83 c4 10             	add    esp,0x10
c001d2b8:	85 c0                	test   eax,eax
c001d2ba:	75 0f                	jne    c001d2cb <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d2bc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2cb:	50                   	push   eax
c001d2cc:	50                   	push   eax
c001d2cd:	68 56 cb 02 c0       	push   0xc002cb56
c001d2d2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d2d6:	50                   	push   eax
c001d2d7:	e8 d8 35 fe ff       	call   c00008b4 <strcmp>
c001d2dc:	83 c4 10             	add    esp,0x10
c001d2df:	85 c0                	test   eax,eax
c001d2e1:	75 0f                	jne    c001d2f2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d2e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d2f2:	45                   	inc    ebp
c001d2f3:	e9 4c ff ff ff       	jmp    c001d244 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d2f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d2fd:	75 10                	jne    c001d30f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d2ff:	83 ec 0c             	sub    esp,0xc
c001d302:	68 5e cb 02 c0       	push   0xc002cb5e
c001d307:	e8 01 d5 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001d30c:	83 c4 10             	add    esp,0x10
c001d30f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d314:	75 10                	jne    c001d326 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d316:	83 ec 0c             	sub    esp,0xc
c001d319:	68 5e cb 02 c0       	push   0xc002cb5e
c001d31e:	e8 ea d4 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001d323:	83 c4 10             	add    esp,0x10
c001d326:	31 d2                	xor    edx,edx
c001d328:	50                   	push   eax
c001d329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d32d:	52                   	push   edx
c001d32e:	50                   	push   eax
c001d32f:	53                   	push   ebx
c001d330:	e8 8f 61 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d335:	5a                   	pop    edx
c001d336:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d33a:	e8 69 25 ff ff       	call   c000f8a8 <malloc>
c001d33f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d343:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d347:	31 c9                	xor    ecx,ecx
c001d349:	5e                   	pop    esi
c001d34a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d34c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d350:	55                   	push   ebp
c001d351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d355:	51                   	push   ecx
c001d356:	52                   	push   edx
c001d357:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d35b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d35f:	53                   	push   ebx
c001d360:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d363:	83 c4 14             	add    esp,0x14
c001d366:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d36a:	e8 39 25 ff ff       	call   c000f8a8 <malloc>
c001d36f:	89 c6                	mov    esi,eax
c001d371:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d373:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d376:	56                   	push   esi
c001d377:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d37b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d37f:	51                   	push   ecx
c001d380:	52                   	push   edx
c001d381:	53                   	push   ebx
c001d382:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d385:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d389:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c001d38f:	83 c4 1c             	add    esp,0x1c
c001d392:	c1 e8 04             	shr    eax,0x4
c001d395:	89 04 95 00 23 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdd00],eax
c001d39c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3a0:	31 d2                	xor    edx,edx
c001d3a2:	52                   	push   edx
c001d3a3:	50                   	push   eax
c001d3a4:	53                   	push   ebx
c001d3a5:	e8 1a 61 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d3aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d3ac:	31 d2                	xor    edx,edx
c001d3ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d3b1:	56                   	push   esi
c001d3b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3b6:	52                   	push   edx
c001d3b7:	50                   	push   eax
c001d3b8:	53                   	push   ebx
c001d3b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3bc:	83 c4 14             	add    esp,0x14
c001d3bf:	53                   	push   ebx
c001d3c0:	e8 9f 60 ff ff       	call   c0013464 <File::close()>
c001d3c5:	5d                   	pop    ebp
c001d3c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d3ca:	e8 e9 24 ff ff       	call   c000f8b8 <free>
c001d3cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d3d2:	e8 e1 24 ff ff       	call   c000f8b8 <free>
c001d3d7:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c001d3dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d3e0:	8d 50 01             	lea    edx,[eax+0x1]
c001d3e3:	89 0c 85 00 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc00],ecx
c001d3ea:	89 34 85 80 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc80],esi
c001d3f1:	89 15 80 24 03 c0    	mov    DWORD PTR ds:0xc0032480,edx
c001d3f7:	83 c4 10             	add    esp,0x10
c001d3fa:	b0 01                	mov    al,0x1
c001d3fc:	83 c4 5c             	add    esp,0x5c
c001d3ff:	5b                   	pop    ebx
c001d400:	5e                   	pop    esi
c001d401:	5f                   	pop    edi
c001d402:	5d                   	pop    ebp
c001d403:	c3                   	ret    

c001d404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d404:	55                   	push   ebp
c001d405:	57                   	push   edi
c001d406:	56                   	push   esi
c001d407:	53                   	push   ebx
c001d408:	81 ec 68 03 00 00    	sub    esp,0x368
c001d40e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d415:	8b 1d d0 24 03 c0    	mov    ebx,DWORD PTR ds:0xc00324d0
c001d41b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d41f:	68 14 01 00 00       	push   0x114
c001d424:	e8 7f 24 ff ff       	call   c000f8a8 <malloc>
c001d429:	83 c4 0c             	add    esp,0xc
c001d42c:	89 c5                	mov    ebp,eax
c001d42e:	53                   	push   ebx
c001d42f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d436:	50                   	push   eax
c001d437:	e8 66 5f ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001d43c:	5e                   	pop    esi
c001d43d:	5f                   	pop    edi
c001d43e:	6a 01                	push   0x1
c001d440:	55                   	push   ebp
c001d441:	e8 c0 5f ff ff       	call   c0013406 <File::open(FileOpenMode)>
c001d446:	83 c4 10             	add    esp,0x10
c001d449:	85 c0                	test   eax,eax
c001d44b:	0f 85 a7 06 00 00    	jne    c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d451:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d459:	83 ec 0c             	sub    esp,0xc
c001d45c:	6a 34                	push   0x34
c001d45e:	e8 45 24 ff ff       	call   c000f8a8 <malloc>
c001d463:	5b                   	pop    ebx
c001d464:	89 c7                	mov    edi,eax
c001d466:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d46a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d46d:	53                   	push   ebx
c001d46e:	57                   	push   edi
c001d46f:	6a 00                	push   0x0
c001d471:	6a 34                	push   0x34
c001d473:	55                   	push   ebp
c001d474:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d477:	83 c4 20             	add    esp,0x20
c001d47a:	85 c0                	test   eax,eax
c001d47c:	0f 85 76 06 00 00    	jne    c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d482:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d488:	0f 85 6a 06 00 00    	jne    c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d48e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d491:	85 c0                	test   eax,eax
c001d493:	0f 84 5f 06 00 00    	je     c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d499:	31 d2                	xor    edx,edx
c001d49b:	51                   	push   ecx
c001d49c:	52                   	push   edx
c001d49d:	50                   	push   eax
c001d49e:	55                   	push   ebp
c001d49f:	e8 20 60 ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d4a4:	83 c4 10             	add    esp,0x10
c001d4a7:	85 c0                	test   eax,eax
c001d4a9:	0f 85 49 06 00 00    	jne    c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d4af:	83 ec 0c             	sub    esp,0xc
c001d4b2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d4b5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d4b9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d4bd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4c1:	0f af c2             	imul   eax,edx
c001d4c4:	50                   	push   eax
c001d4c5:	e8 de 23 ff ff       	call   c000f8a8 <malloc>
c001d4ca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d4cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d4d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4d8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d4dc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4e0:	0f af c2             	imul   eax,edx
c001d4e3:	99                   	cdq    
c001d4e4:	52                   	push   edx
c001d4e5:	50                   	push   eax
c001d4e6:	55                   	push   ebp
c001d4e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4ea:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d4ed:	83 c4 20             	add    esp,0x20
c001d4f0:	85 c0                	test   eax,eax
c001d4f2:	0f 84 00 06 00 00    	je     c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d4f8:	52                   	push   edx
c001d4f9:	31 d2                	xor    edx,edx
c001d4fb:	52                   	push   edx
c001d4fc:	50                   	push   eax
c001d4fd:	55                   	push   ebp
c001d4fe:	e8 c1 5f ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d503:	83 c4 10             	add    esp,0x10
c001d506:	85 c0                	test   eax,eax
c001d508:	0f 85 ea 05 00 00    	jne    c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d50e:	83 ec 0c             	sub    esp,0xc
c001d511:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d515:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d519:	31 f6                	xor    esi,esi
c001d51b:	0f af c2             	imul   eax,edx
c001d51e:	50                   	push   eax
c001d51f:	e8 84 23 ff ff       	call   c000f8a8 <malloc>
c001d524:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d527:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d52b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d52e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d532:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d536:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d53a:	0f af c2             	imul   eax,edx
c001d53d:	99                   	cdq    
c001d53e:	52                   	push   edx
c001d53f:	50                   	push   eax
c001d540:	55                   	push   ebp
c001d541:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d544:	83 c4 20             	add    esp,0x20
c001d547:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d54b:	0f 86 8a 00 00 00    	jbe    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d551:	0f b7 de             	movzx  ebx,si
c001d554:	c1 e3 05             	shl    ebx,0x5
c001d557:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d55b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d55e:	75 75                	jne    c001d5d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d560:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d563:	31 d2                	xor    edx,edx
c001d565:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d569:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d56c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d570:	50                   	push   eax
c001d571:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d574:	52                   	push   edx
c001d575:	50                   	push   eax
c001d576:	55                   	push   ebp
c001d577:	e8 48 5f ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d57c:	83 c4 10             	add    esp,0x10
c001d57f:	85 c0                	test   eax,eax
c001d581:	0f 85 71 05 00 00    	jne    c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d587:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d58e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d591:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d595:	31 d2                	xor    edx,edx
c001d597:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d59b:	83 ec 0c             	sub    esp,0xc
c001d59e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d5a2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5a9:	50                   	push   eax
c001d5aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b2:	52                   	push   edx
c001d5b3:	50                   	push   eax
c001d5b4:	55                   	push   ebp
c001d5b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d5b8:	83 c4 1c             	add    esp,0x1c
c001d5bb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d5be:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d5c1:	50                   	push   eax
c001d5c2:	6a 00                	push   0x0
c001d5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d5cc:	50                   	push   eax
c001d5cd:	e8 9a 31 fe ff       	call   c000076c <memset>
c001d5d2:	83 c4 10             	add    esp,0x10
c001d5d5:	46                   	inc    esi
c001d5d6:	e9 6c ff ff ff       	jmp    c001d547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d5db:	53                   	push   ebx
c001d5dc:	31 db                	xor    ebx,ebx
c001d5de:	68 00 01 00 00       	push   0x100
c001d5e3:	6a 00                	push   0x0
c001d5e5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d5e9:	50                   	push   eax
c001d5ea:	e8 7d 31 fe ff       	call   c000076c <memset>
c001d5ef:	83 c4 0c             	add    esp,0xc
c001d5f2:	68 00 01 00 00       	push   0x100
c001d5f7:	6a 00                	push   0x0
c001d5f9:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d600:	50                   	push   eax
c001d601:	e8 66 31 fe ff       	call   c000076c <memset>
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d611:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d619:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d621:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d629:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d631:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d635:	0f 86 30 01 00 00    	jbe    c001d76b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d63b:	0f b7 f3             	movzx  esi,bx
c001d63e:	6b f6 28             	imul   esi,esi,0x28
c001d641:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d645:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d64c:	52                   	push   edx
c001d64d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d651:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d655:	8b 06                	mov    eax,DWORD PTR [esi]
c001d657:	6b d2 28             	imul   edx,edx,0x28
c001d65a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d65e:	31 d2                	xor    edx,edx
c001d660:	52                   	push   edx
c001d661:	50                   	push   eax
c001d662:	55                   	push   ebp
c001d663:	e8 5c 5e ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d668:	83 c4 0c             	add    esp,0xc
c001d66b:	6a 20                	push   0x20
c001d66d:	6a 00                	push   0x0
c001d66f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d676:	51                   	push   ecx
c001d677:	e8 f0 30 fe ff       	call   c000076c <memset>
c001d67c:	59                   	pop    ecx
c001d67d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d680:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d684:	52                   	push   edx
c001d685:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d68c:	51                   	push   ecx
c001d68d:	6a 00                	push   0x0
c001d68f:	6a 1f                	push   0x1f
c001d691:	55                   	push   ebp
c001d692:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d695:	83 c4 1c             	add    esp,0x1c
c001d698:	6a 09                	push   0x9
c001d69a:	68 78 cb 02 c0       	push   0xc002cb78
c001d69f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d6a6:	51                   	push   ecx
c001d6a7:	e8 bc 2f fe ff       	call   c0000668 <memcmp>
c001d6ac:	83 c4 10             	add    esp,0x10
c001d6af:	85 c0                	test   eax,eax
c001d6b1:	75 21                	jne    c001d6d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d6bb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d6bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6c3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d6c6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d6cd:	89 d0                	mov    eax,edx
c001d6cf:	40                   	inc    eax
c001d6d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6d4:	50                   	push   eax
c001d6d5:	6a 09                	push   0x9
c001d6d7:	68 82 cb 02 c0       	push   0xc002cb82
c001d6dc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d6e3:	50                   	push   eax
c001d6e4:	e8 7f 2f fe ff       	call   c0000668 <memcmp>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	85 c0                	test   eax,eax
c001d6ee:	75 21                	jne    c001d711 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d6f8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d6fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d700:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d703:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d70a:	89 d0                	mov    eax,edx
c001d70c:	40                   	inc    eax
c001d70d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d711:	50                   	push   eax
c001d712:	50                   	push   eax
c001d713:	68 4e cb 02 c0       	push   0xc002cb4e
c001d718:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d71f:	50                   	push   eax
c001d720:	e8 8f 31 fe ff       	call   c00008b4 <strcmp>
c001d725:	83 c4 10             	add    esp,0x10
c001d728:	85 c0                	test   eax,eax
c001d72a:	75 0f                	jne    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d72c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d72f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d733:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d737:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d73b:	50                   	push   eax
c001d73c:	50                   	push   eax
c001d73d:	68 56 cb 02 c0       	push   0xc002cb56
c001d742:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d749:	50                   	push   eax
c001d74a:	e8 65 31 fe ff       	call   c00008b4 <strcmp>
c001d74f:	83 c4 10             	add    esp,0x10
c001d752:	85 c0                	test   eax,eax
c001d754:	75 0f                	jne    c001d765 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d756:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d759:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d75d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d761:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d765:	43                   	inc    ebx
c001d766:	e9 c6 fe ff ff       	jmp    c001d631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d76b:	31 d2                	xor    edx,edx
c001d76d:	50                   	push   eax
c001d76e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d772:	52                   	push   edx
c001d773:	50                   	push   eax
c001d774:	55                   	push   ebp
c001d775:	e8 4a 5d ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d77a:	58                   	pop    eax
c001d77b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d77f:	e8 24 21 ff ff       	call   c000f8a8 <malloc>
c001d784:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d787:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d78b:	31 d2                	xor    edx,edx
c001d78d:	58                   	pop    eax
c001d78e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d792:	53                   	push   ebx
c001d793:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d79b:	52                   	push   edx
c001d79c:	50                   	push   eax
c001d79d:	55                   	push   ebp
c001d79e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d7a1:	83 c4 14             	add    esp,0x14
c001d7a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7a8:	e8 fb 20 ff ff       	call   c000f8a8 <malloc>
c001d7ad:	31 d2                	xor    edx,edx
c001d7af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d7b3:	83 c4 0c             	add    esp,0xc
c001d7b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7ba:	52                   	push   edx
c001d7bb:	50                   	push   eax
c001d7bc:	55                   	push   ebp
c001d7bd:	e8 02 5d ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d7c2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d7c5:	31 d2                	xor    edx,edx
c001d7c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d7ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d7d2:	52                   	push   edx
c001d7d3:	50                   	push   eax
c001d7d4:	55                   	push   ebp
c001d7d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d7d8:	83 c4 20             	add    esp,0x20
c001d7db:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d7e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d7e7:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d7eb:	0f 84 0b 03 00 00    	je     c001dafc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d7f1:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d7f8:	31 d2                	xor    edx,edx
c001d7fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7fe:	c1 e8 03             	shr    eax,0x3
c001d801:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d805:	51                   	push   ecx
c001d806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d80a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d80e:	52                   	push   edx
c001d80f:	50                   	push   eax
c001d810:	55                   	push   ebp
c001d811:	e8 ae 5c ff ff       	call   c00134c4 <File::seek(unsigned long long)>
c001d816:	5b                   	pop    ebx
c001d817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d81b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d822:	e8 81 20 ff ff       	call   c000f8a8 <malloc>
c001d827:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d82a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d82e:	31 d2                	xor    edx,edx
c001d830:	5e                   	pop    esi
c001d831:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d835:	50                   	push   eax
c001d836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d83a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d83e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d845:	52                   	push   edx
c001d846:	50                   	push   eax
c001d847:	55                   	push   ebp
c001d848:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d84b:	83 c4 20             	add    esp,0x20
c001d84e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d856:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d85a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d85e:	0f 8d 7c 02 00 00    	jge    c001dae0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d864:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d86c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d871:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d874:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d878:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d87c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d880:	89 d8                	mov    eax,ebx
c001d882:	c1 e8 08             	shr    eax,0x8
c001d885:	89 c6                	mov    esi,eax
c001d887:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d88b:	c1 e6 04             	shl    esi,0x4
c001d88e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d892:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d895:	85 d2                	test   edx,edx
c001d897:	0f 85 bf 00 00 00    	jne    c001d95c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d89d:	83 ec 0c             	sub    esp,0xc
c001d8a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d8a4:	03 06                	add    eax,DWORD PTR [esi]
c001d8a6:	50                   	push   eax
c001d8a7:	e8 4b f8 ff ff       	call   c001d0f7 <Thr::getAddressOfKernelSymbol(char const*)>
c001d8ac:	83 c4 10             	add    esp,0x10
c001d8af:	89 c2                	mov    edx,eax
c001d8b1:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d8b6:	85 c0                	test   eax,eax
c001d8b8:	0f 85 9e 00 00 00    	jne    c001d95c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d8be:	83 ec 0c             	sub    esp,0xc
c001d8c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d8c5:	03 06                	add    eax,DWORD PTR [esi]
c001d8c7:	50                   	push   eax
c001d8c8:	e8 8e 0c ff ff       	call   c000e55b <Krnl::resolveCompatibilitySymbol(char*)>
c001d8cd:	83 c4 10             	add    esp,0x10
c001d8d0:	89 c2                	mov    edx,eax
c001d8d2:	85 c0                	test   eax,eax
c001d8d4:	0f 85 82 00 00 00    	jne    c001d95c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d8da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d8de:	50                   	push   eax
c001d8df:	50                   	push   eax
c001d8e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8e4:	03 06                	add    eax,DWORD PTR [esi]
c001d8e6:	50                   	push   eax
c001d8e7:	68 8c cb 02 c0       	push   0xc002cb8c
c001d8ec:	e8 52 55 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001d8f1:	58                   	pop    eax
c001d8f2:	5a                   	pop    edx
c001d8f3:	68 a6 cb 02 c0       	push   0xc002cba6
c001d8f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d8ff:	50                   	push   eax
c001d900:	e8 23 2f fe ff       	call   c0000828 <strcpy>
c001d905:	59                   	pop    ecx
c001d906:	58                   	pop    eax
c001d907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d90b:	03 06                	add    eax,DWORD PTR [esi]
c001d90d:	50                   	push   eax
c001d90e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d915:	50                   	push   eax
c001d916:	e8 4d 30 fe ff       	call   c0000968 <strcat>
c001d91b:	58                   	pop    eax
c001d91c:	5a                   	pop    edx
c001d91d:	68 3c cc 02 c0       	push   0xc002cc3c
c001d922:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d929:	50                   	push   eax
c001d92a:	e8 39 30 fe ff       	call   c0000968 <strcat>
c001d92f:	83 c4 10             	add    esp,0x10
c001d932:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d937:	0f 84 5d 01 00 00    	je     c001da9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d93d:	83 ec 0c             	sub    esp,0xc
c001d940:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d947:	50                   	push   eax
c001d948:	e8 c0 ce ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001d94d:	83 c4 10             	add    esp,0x10
c001d950:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d954:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d958:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d95c:	80 fb 01             	cmp    bl,0x1
c001d95f:	0f 85 88 00 00 00    	jne    c001d9ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d965:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d96c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d970:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d974:	01 ce                	add    esi,ecx
c001d976:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d97c:	0f 94 c0             	sete   al
c001d97f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d985:	0f 94 c3             	sete   bl
c001d988:	09 c3                	or     ebx,eax
c001d98a:	8b 06                	mov    eax,DWORD PTR [esi]
c001d98c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d991:	74 41                	je     c001d9d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d993:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d996:	84 db                	test   bl,bl
c001d998:	75 15                	jne    c001d9af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d99a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d99e:	66 83 f8 0c          	cmp    ax,0xc
c001d9a2:	76 05                	jbe    c001d9a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d9a4:	b8 0c 00 00 00       	mov    eax,0xc
c001d9a9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d9ad:	76 37                	jbe    c001d9e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d9af:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d9b3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d9b8:	0f 84 dc 00 00 00    	je     c001da9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d9be:	83 ec 0c             	sub    esp,0xc
c001d9c1:	68 bd cb 02 c0       	push   0xc002cbbd
c001d9c6:	e8 42 ce ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001d9cb:	83 c4 10             	add    esp,0x10
c001d9ce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d9d2:	eb 12                	jmp    c001d9e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d9d4:	01 c1                	add    ecx,eax
c001d9d6:	84 db                	test   bl,bl
c001d9d8:	75 0c                	jne    c001d9e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d9da:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d9de:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d9e2:	77 02                	ja     c001d9e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d9e4:	01 d1                	add    ecx,edx
c001d9e6:	89 0e                	mov    DWORD PTR [esi],ecx
c001d9e8:	e9 ea 00 00 00       	jmp    c001dad7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d9ed:	80 fb 02             	cmp    bl,0x2
c001d9f0:	75 7c                	jne    c001da6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d9f2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d9f9:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d9fd:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001da01:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001da07:	74 20                	je     c001da29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001da09:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001da0f:	74 18                	je     c001da29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001da11:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001da15:	b9 0a 00 00 00       	mov    ecx,0xa
c001da1a:	66 83 f8 0e          	cmp    ax,0xe
c001da1e:	77 03                	ja     c001da23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001da20:	8d 48 fc             	lea    ecx,[eax-0x4]
c001da23:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001da27:	76 1f                	jbe    c001da48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001da29:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001da2d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da32:	74 66                	je     c001da9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da34:	83 ec 0c             	sub    esp,0xc
c001da37:	68 d9 cb 02 c0       	push   0xc002cbd9
c001da3c:	e8 cc cd ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001da41:	83 c4 10             	add    esp,0x10
c001da44:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da48:	8b 06                	mov    eax,DWORD PTR [esi]
c001da4a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001da4f:	74 13                	je     c001da64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001da51:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001da55:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001da5c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001da60:	01 c8                	add    eax,ecx
c001da62:	eb 04                	jmp    c001da68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001da64:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001da68:	01 c2                	add    edx,eax
c001da6a:	89 16                	mov    DWORD PTR [esi],edx
c001da6c:	eb 69                	jmp    c001dad7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001da6e:	0f b6 db             	movzx  ebx,bl
c001da71:	50                   	push   eax
c001da72:	50                   	push   eax
c001da73:	53                   	push   ebx
c001da74:	68 f5 cb 02 c0       	push   0xc002cbf5
c001da79:	e8 c5 53 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001da7e:	83 c4 10             	add    esp,0x10
c001da81:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da86:	74 12                	je     c001da9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da88:	83 ec 0c             	sub    esp,0xc
c001da8b:	68 00 cc 02 c0       	push   0xc002cc00
c001da90:	e8 78 cd ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001da95:	83 c4 10             	add    esp,0x10
c001da98:	eb 3d                	jmp    c001dad7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001da9a:	83 ec 0c             	sub    esp,0xc
c001da9d:	55                   	push   ebp
c001da9e:	e8 c1 59 ff ff       	call   c0013464 <File::close()>
c001daa3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001daa6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001daa9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001daac:	59                   	pop    ecx
c001daad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dab1:	e8 02 1e ff ff       	call   c000f8b8 <free>
c001dab6:	5b                   	pop    ebx
c001dab7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dabb:	e8 f8 1d ff ff       	call   c000f8b8 <free>
c001dac0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dac3:	e8 f0 1d ff ff       	call   c000f8b8 <free>
c001dac8:	5e                   	pop    esi
c001dac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dacd:	e8 e6 1d ff ff       	call   c000f8b8 <free>
c001dad2:	83 c4 10             	add    esp,0x10
c001dad5:	eb 21                	jmp    c001daf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001dad7:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001dadb:	e9 76 fd ff ff       	jmp    c001d856 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001dae0:	83 ec 0c             	sub    esp,0xc
c001dae3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dae7:	e8 cc 1d ff ff       	call   c000f8b8 <free>
c001daec:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001daf0:	83 c4 10             	add    esp,0x10
c001daf3:	e9 eb fc ff ff       	jmp    c001d7e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001daf8:	31 c0                	xor    eax,eax
c001dafa:	eb 33                	jmp    c001db2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001dafc:	83 ec 0c             	sub    esp,0xc
c001daff:	55                   	push   ebp
c001db00:	e8 5f 59 ff ff       	call   c0013464 <File::close()>
c001db05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001db08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db0e:	58                   	pop    eax
c001db0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db13:	e8 a0 1d ff ff       	call   c000f8b8 <free>
c001db18:	89 3c 24             	mov    DWORD PTR [esp],edi
c001db1b:	e8 98 1d ff ff       	call   c000f8b8 <free>
c001db20:	5a                   	pop    edx
c001db21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db25:	e8 8e 1d ff ff       	call   c000f8b8 <free>
c001db2a:	83 c4 10             	add    esp,0x10
c001db2d:	b0 01                	mov    al,0x1
c001db2f:	81 c4 5c 03 00 00    	add    esp,0x35c
c001db35:	5b                   	pop    ebx
c001db36:	5e                   	pop    esi
c001db37:	5f                   	pop    edi
c001db38:	5d                   	pop    ebp
c001db39:	c3                   	ret    

c001db3a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001db3a:	56                   	push   esi
c001db3b:	31 d2                	xor    edx,edx
c001db3d:	53                   	push   ebx
c001db3e:	8b 1d e0 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ce0
c001db44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001db48:	39 d3                	cmp    ebx,edx
c001db4a:	7e 1b                	jle    c001db67 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001db4c:	8b 04 95 00 1f 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce100]
c001db53:	39 c8                	cmp    eax,ecx
c001db55:	77 0d                	ja     c001db64 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001db57:	8b 34 95 00 1d 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce300]
c001db5e:	01 c6                	add    esi,eax
c001db60:	39 ce                	cmp    esi,ecx
c001db62:	77 05                	ja     c001db69 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001db64:	42                   	inc    edx
c001db65:	eb e1                	jmp    c001db48 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001db67:	31 c0                	xor    eax,eax
c001db69:	5b                   	pop    ebx
c001db6a:	5e                   	pop    esi
c001db6b:	c3                   	ret    

c001db6c <Thr::getDriverNameFromAddress(unsigned long)>:
c001db6c:	53                   	push   ebx
c001db6d:	31 c0                	xor    eax,eax
c001db6f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001db73:	8b 1d e0 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ce0
c001db79:	39 c3                	cmp    ebx,eax
c001db7b:	7e 22                	jle    c001db9f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001db7d:	8b 14 85 00 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce100]
c001db84:	39 ca                	cmp    edx,ecx
c001db86:	77 14                	ja     c001db9c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001db88:	03 14 85 00 1d 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce300]
c001db8f:	39 ca                	cmp    edx,ecx
c001db91:	76 09                	jbe    c001db9c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001db93:	8b 04 85 00 21 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdf00]
c001db9a:	eb 05                	jmp    c001dba1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001db9c:	40                   	inc    eax
c001db9d:	eb da                	jmp    c001db79 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001db9f:	31 c0                	xor    eax,eax
c001dba1:	5b                   	pop    ebx
c001dba2:	c3                   	ret    

c001dba3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dba3:	53                   	push   ebx
c001dba4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dba8:	53                   	push   ebx
c001dba9:	e8 8c ff ff ff       	call   c001db3a <Thr::getDriverBaseFromAddress(unsigned long)>
c001dbae:	5a                   	pop    edx
c001dbaf:	31 d2                	xor    edx,edx
c001dbb1:	85 c0                	test   eax,eax
c001dbb3:	74 04                	je     c001dbb9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dbb5:	89 da                	mov    edx,ebx
c001dbb7:	29 c2                	sub    edx,eax
c001dbb9:	89 d0                	mov    eax,edx
c001dbbb:	5b                   	pop    ebx
c001dbbc:	c3                   	ret    

c001dbbd <Thr::loadDLL(char const*, bool)>:
c001dbbd:	55                   	push   ebp
c001dbbe:	57                   	push   edi
c001dbbf:	56                   	push   esi
c001dbc0:	53                   	push   ebx
c001dbc1:	81 ec 34 01 00 00    	sub    esp,0x134
c001dbc7:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dbce:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dbd5:	56                   	push   esi
c001dbd6:	68 18 cc 02 c0       	push   0xc002cc18
c001dbdb:	e8 63 52 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001dbe0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dbe7:	e8 bc 1c ff ff       	call   c000f8a8 <malloc>
c001dbec:	83 c4 0c             	add    esp,0xc
c001dbef:	89 c3                	mov    ebx,eax
c001dbf1:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c001dbf7:	56                   	push   esi
c001dbf8:	50                   	push   eax
c001dbf9:	e8 a4 57 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001dbfe:	83 c4 10             	add    esp,0x10
c001dc01:	85 db                	test   ebx,ebx
c001dc03:	75 3c                	jne    c001dc41 <Thr::loadDLL(char const*, bool)+0x84>
c001dc05:	89 f8                	mov    eax,edi
c001dc07:	84 c0                	test   al,al
c001dc09:	0f 84 cc 01 00 00    	je     c001dddb <Thr::loadDLL(char const*, bool)+0x21e>
c001dc0f:	55                   	push   ebp
c001dc10:	55                   	push   ebp
c001dc11:	68 29 cc 02 c0       	push   0xc002cc29
c001dc16:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dc1a:	55                   	push   ebp
c001dc1b:	e8 08 2c fe ff       	call   c0000828 <strcpy>
c001dc20:	58                   	pop    eax
c001dc21:	5a                   	pop    edx
c001dc22:	56                   	push   esi
c001dc23:	55                   	push   ebp
c001dc24:	e8 3f 2d fe ff       	call   c0000968 <strcat>
c001dc29:	59                   	pop    ecx
c001dc2a:	58                   	pop    eax
c001dc2b:	68 3c cc 02 c0       	push   0xc002cc3c
c001dc30:	55                   	push   ebp
c001dc31:	e8 32 2d fe ff       	call   c0000968 <strcat>
c001dc36:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dc39:	e8 cf cb ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001dc3e:	83 c4 10             	add    esp,0x10
c001dc41:	51                   	push   ecx
c001dc42:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dc46:	50                   	push   eax
c001dc47:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dc4b:	50                   	push   eax
c001dc4c:	53                   	push   ebx
c001dc4d:	e8 60 5a ff ff       	call   c00136b2 <File::stat(unsigned long long*, bool*)>
c001dc52:	83 c4 10             	add    esp,0x10
c001dc55:	85 db                	test   ebx,ebx
c001dc57:	74 0c                	je     c001dc65 <Thr::loadDLL(char const*, bool)+0xa8>
c001dc59:	83 ec 0c             	sub    esp,0xc
c001dc5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc5e:	53                   	push   ebx
c001dc5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc62:	83 c4 10             	add    esp,0x10
c001dc65:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dc6a:	75 0a                	jne    c001dc76 <Thr::loadDLL(char const*, bool)+0xb9>
c001dc6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc70:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dc74:	75 3c                	jne    c001dcb2 <Thr::loadDLL(char const*, bool)+0xf5>
c001dc76:	89 f8                	mov    eax,edi
c001dc78:	84 c0                	test   al,al
c001dc7a:	0f 84 43 01 00 00    	je     c001ddc3 <Thr::loadDLL(char const*, bool)+0x206>
c001dc80:	51                   	push   ecx
c001dc81:	51                   	push   ecx
c001dc82:	68 29 cc 02 c0       	push   0xc002cc29
c001dc87:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001dc8b:	53                   	push   ebx
c001dc8c:	e8 97 2b fe ff       	call   c0000828 <strcpy>
c001dc91:	5d                   	pop    ebp
c001dc92:	58                   	pop    eax
c001dc93:	56                   	push   esi
c001dc94:	53                   	push   ebx
c001dc95:	e8 ce 2c fe ff       	call   c0000968 <strcat>
c001dc9a:	58                   	pop    eax
c001dc9b:	5a                   	pop    edx
c001dc9c:	68 3c cc 02 c0       	push   0xc002cc3c
c001dca1:	53                   	push   ebx
c001dca2:	e8 c1 2c fe ff       	call   c0000968 <strcat>
c001dca7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcaa:	e8 5e cb ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001dcaf:	83 c4 10             	add    esp,0x10
c001dcb2:	52                   	push   edx
c001dcb3:	6a 03                	push   0x3
c001dcb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dcbd:	05 ff 0f 00 00       	add    eax,0xfff
c001dcc2:	83 d2 00             	adc    edx,0x0
c001dcc5:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dcc9:	50                   	push   eax
c001dcca:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c001dcd0:	e8 a1 46 ff ff       	call   c0012376 <VAS::allocatePages(int, int)>
c001dcd5:	59                   	pop    ecx
c001dcd6:	89 c3                	mov    ebx,eax
c001dcd8:	5d                   	pop    ebp
c001dcd9:	50                   	push   eax
c001dcda:	68 3e cc 02 c0       	push   0xc002cc3e
c001dcdf:	e8 5f 51 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001dce4:	89 34 24             	mov    DWORD PTR [esp],esi
c001dce7:	e8 9c 2a fe ff       	call   c0000788 <strlen>
c001dcec:	8b 2d e0 1c 03 c0    	mov    ebp,DWORD PTR ds:0xc0031ce0
c001dcf2:	40                   	inc    eax
c001dcf3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcf6:	e8 ad 1b ff ff       	call   c000f8a8 <malloc>
c001dcfb:	89 04 ad 00 21 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdf00],eax
c001dd02:	58                   	pop    eax
c001dd03:	a1 e0 1c 03 c0       	mov    eax,ds:0xc0031ce0
c001dd08:	5a                   	pop    edx
c001dd09:	56                   	push   esi
c001dd0a:	ff 34 85 00 21 03 c0 	push   DWORD PTR [eax*4-0x3ffcdf00]
c001dd11:	e8 12 2b fe ff       	call   c0000828 <strcpy>
c001dd16:	a1 e0 1c 03 c0       	mov    eax,ds:0xc0031ce0
c001dd1b:	8d 50 01             	lea    edx,[eax+0x1]
c001dd1e:	89 1c 85 00 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce100],ebx
c001dd25:	89 15 e0 1c 03 c0    	mov    DWORD PTR ds:0xc0031ce0,edx
c001dd2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dd2f:	83 c4 0c             	add    esp,0xc
c001dd32:	89 14 85 00 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce300],edx
c001dd39:	6a 01                	push   0x1
c001dd3b:	53                   	push   ebx
c001dd3c:	56                   	push   esi
c001dd3d:	e8 c2 f6 ff ff       	call   c001d404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dd42:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dd46:	83 c4 10             	add    esp,0x10
c001dd49:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dd4e:	0f 85 83 00 00 00    	jne    c001ddd7 <Thr::loadDLL(char const*, bool)+0x21a>
c001dd54:	89 f8                	mov    eax,edi
c001dd56:	84 c0                	test   al,al
c001dd58:	74 6d                	je     c001ddc7 <Thr::loadDLL(char const*, bool)+0x20a>
c001dd5a:	83 ec 0c             	sub    esp,0xc
c001dd5d:	68 4b cc 02 c0       	push   0xc002cc4b
c001dd62:	e8 a6 ca ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001dd67:	83 c4 10             	add    esp,0x10
c001dd6a:	eb 5b                	jmp    c001ddc7 <Thr::loadDLL(char const*, bool)+0x20a>
c001dd6c:	89 ee                	mov    esi,ebp
c001dd6e:	50                   	push   eax
c001dd6f:	c1 e6 0c             	shl    esi,0xc
c001dd72:	50                   	push   eax
c001dd73:	01 de                	add    esi,ebx
c001dd75:	56                   	push   esi
c001dd76:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c001dd7c:	e8 5d 41 ff ff       	call   c0011ede <VAS::getPageTableEntry(unsigned long)>
c001dd81:	83 c4 10             	add    esp,0x10
c001dd84:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dd87:	75 0c                	jne    c001dd95 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dd89:	83 ec 0c             	sub    esp,0xc
c001dd8c:	56                   	push   esi
c001dd8d:	e8 f8 20 ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c001dd92:	83 c4 10             	add    esp,0x10
c001dd95:	45                   	inc    ebp
c001dd96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd9e:	05 ff 0f 00 00       	add    eax,0xfff
c001dda3:	bf 00 00 00 00       	mov    edi,0x0
c001dda8:	83 d2 00             	adc    edx,0x0
c001ddab:	0f ac d0 0c          	shrd   eax,edx,0xc
c001ddaf:	c1 ea 0c             	shr    edx,0xc
c001ddb2:	39 c5                	cmp    ebp,eax
c001ddb4:	89 d1                	mov    ecx,edx
c001ddb6:	89 f8                	mov    eax,edi
c001ddb8:	19 c8                	sbb    eax,ecx
c001ddba:	72 b0                	jb     c001dd6c <Thr::loadDLL(char const*, bool)+0x1af>
c001ddbc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ddc1:	75 18                	jne    c001dddb <Thr::loadDLL(char const*, bool)+0x21e>
c001ddc3:	31 db                	xor    ebx,ebx
c001ddc5:	eb 14                	jmp    c001dddb <Thr::loadDLL(char const*, bool)+0x21e>
c001ddc7:	83 ec 0c             	sub    esp,0xc
c001ddca:	68 6a cc 02 c0       	push   0xc002cc6a
c001ddcf:	e8 39 ca ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001ddd4:	83 c4 10             	add    esp,0x10
c001ddd7:	31 ed                	xor    ebp,ebp
c001ddd9:	eb bb                	jmp    c001dd96 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dddb:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dde1:	89 d8                	mov    eax,ebx
c001dde3:	5b                   	pop    ebx
c001dde4:	5e                   	pop    esi
c001dde5:	5f                   	pop    edi
c001dde6:	5d                   	pop    ebp
c001dde7:	c3                   	ret    

c001dde8 <Thr::executeDLL(unsigned long, void*)>:
c001dde8:	56                   	push   esi
c001dde9:	53                   	push   ebx
c001ddea:	52                   	push   edx
c001ddeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ddef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ddf3:	85 db                	test   ebx,ebx
c001ddf5:	75 10                	jne    c001de07 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001ddf7:	83 ec 0c             	sub    esp,0xc
c001ddfa:	68 86 cc 02 c0       	push   0xc002cc86
c001ddff:	e8 09 ca ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001de04:	83 c4 10             	add    esp,0x10
c001de07:	50                   	push   eax
c001de08:	50                   	push   eax
c001de09:	53                   	push   ebx
c001de0a:	68 b0 cc 02 c0       	push   0xc002ccb0
c001de0f:	e8 2f 50 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001de14:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001de18:	89 d8                	mov    eax,ebx
c001de1a:	83 c4 14             	add    esp,0x14
c001de1d:	5b                   	pop    ebx
c001de1e:	5e                   	pop    esi
c001de1f:	ff e0                	jmp    eax
c001de21:	90                   	nop

c001de22 <userModeEntryPoint(void*)>:
c001de22:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001de27:	48                   	dec    eax
c001de28:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001de2d:	75 01                	jne    c001de30 <userModeEntryPoint(void*)+0xe>
c001de2f:	fb                   	sti    
c001de30:	fb                   	sti    
c001de31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de39:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de43:	e9 e2 24 fe ff       	jmp    c000032a <goToUsermode>

c001de48 <changeTSS>:
c001de48:	83 ec 14             	sub    esp,0x14
c001de4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de50:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001de53:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001de58:	c1 e2 15             	shl    edx,0x15
c001de5b:	29 d0                	sub    eax,edx
c001de5d:	50                   	push   eax
c001de5e:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001de63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de69:	05 7c 11 00 00       	add    eax,0x117c
c001de6e:	50                   	push   eax
c001de6f:	e8 08 35 ff ff       	call   c001137c <TSS::setESP(unsigned long)>
c001de74:	83 c4 1c             	add    esp,0x1c
c001de77:	c3                   	ret    

c001de78 <switchToThread(ThreadControlBlock*)>:
c001de78:	57                   	push   edi
c001de79:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001de7e:	56                   	push   esi
c001de7f:	85 c0                	test   eax,eax
c001de81:	53                   	push   ebx
c001de82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de86:	0f 85 88 00 00 00    	jne    c001df14 <switchToThread(ThreadControlBlock*)+0x9c>
c001de8c:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001de8f:	3c ff                	cmp    al,0xff
c001de91:	74 7d                	je     c001df10 <switchToThread(ThreadControlBlock*)+0x98>
c001de93:	0f b6 d0             	movzx  edx,al
c001de96:	b8 84 03 00 00       	mov    eax,0x384
c001de9b:	29 d0                	sub    eax,edx
c001de9d:	c1 e0 10             	shl    eax,0x10
c001dea0:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dea3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dea6:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c001deab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001deb1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001deb8:	74 4a                	je     c001df04 <switchToThread(ThreadControlBlock*)+0x8c>
c001deba:	0f 31                	rdtsc  
c001debc:	a3 e8 24 03 c0       	mov    ds:0xc00324e8,eax
c001dec1:	89 c6                	mov    esi,eax
c001dec3:	89 d7                	mov    edi,edx
c001dec5:	2b 35 d8 24 03 c0    	sub    esi,DWORD PTR ds:0xc00324d8
c001decb:	89 15 ec 24 03 c0    	mov    DWORD PTR ds:0xc00324ec,edx
c001ded1:	1b 3d dc 24 03 c0    	sbb    edi,DWORD PTR ds:0xc00324dc
c001ded7:	89 35 e0 24 03 c0    	mov    DWORD PTR ds:0xc00324e0,esi
c001dedd:	a3 d8 24 03 c0       	mov    ds:0xc00324d8,eax
c001dee2:	89 3d e4 24 03 c0    	mov    DWORD PTR ds:0xc00324e4,edi
c001dee8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001deee:	89 15 dc 24 03 c0    	mov    DWORD PTR ds:0xc00324dc,edx
c001def4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001def7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001defa:	01 c6                	add    esi,eax
c001defc:	11 d7                	adc    edi,edx
c001defe:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001df01:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001df04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001df08:	5b                   	pop    ebx
c001df09:	5e                   	pop    esi
c001df0a:	5f                   	pop    edi
c001df0b:	e9 52 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df10:	31 c0                	xor    eax,eax
c001df12:	eb 8f                	jmp    c001dea3 <switchToThread(ThreadControlBlock*)+0x2b>
c001df14:	5b                   	pop    ebx
c001df15:	c7 05 a0 24 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x1
c001df1f:	5e                   	pop    esi
c001df20:	5f                   	pop    edi
c001df21:	c3                   	ret    

c001df22 <Process::addArgs(char**)>:
c001df22:	57                   	push   edi
c001df23:	56                   	push   esi
c001df24:	53                   	push   ebx
c001df25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001df2d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001df37:	85 ff                	test   edi,edi
c001df39:	74 3d                	je     c001df78 <Process::addArgs(char**)+0x56>
c001df3b:	8b 07                	mov    eax,DWORD PTR [edi]
c001df3d:	85 c0                	test   eax,eax
c001df3f:	74 37                	je     c001df78 <Process::addArgs(char**)+0x56>
c001df41:	31 db                	xor    ebx,ebx
c001df43:	83 ec 0c             	sub    esp,0xc
c001df46:	50                   	push   eax
c001df47:	e8 3c 28 fe ff       	call   c0000788 <strlen>
c001df4c:	40                   	inc    eax
c001df4d:	89 04 24             	mov    DWORD PTR [esp],eax
c001df50:	e8 53 19 ff ff       	call   c000f8a8 <malloc>
c001df55:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001df5c:	5a                   	pop    edx
c001df5d:	59                   	pop    ecx
c001df5e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001df61:	43                   	inc    ebx
c001df62:	50                   	push   eax
c001df63:	e8 c0 28 fe ff       	call   c0000828 <strcpy>
c001df68:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001df6e:	83 c4 10             	add    esp,0x10
c001df71:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001df74:	85 c0                	test   eax,eax
c001df76:	75 cb                	jne    c001df43 <Process::addArgs(char**)+0x21>
c001df78:	5b                   	pop    ebx
c001df79:	5e                   	pop    esi
c001df7a:	5f                   	pop    edi
c001df7b:	c3                   	ret    

c001df7c <Process::Process(char const*, Process*, char**)>:
c001df7c:	56                   	push   esi
c001df7d:	53                   	push   ebx
c001df7e:	83 ec 14             	sub    esp,0x14
c001df81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df85:	05 0c 02 00 00       	add    eax,0x20c
c001df8a:	bb 07 00 00 00       	mov    ebx,0x7
c001df8f:	89 c6                	mov    esi,eax
c001df91:	85 db                	test   ebx,ebx
c001df93:	78 12                	js     c001dfa7 <Process::Process(char const*, Process*, char**)+0x2b>
c001df95:	83 ec 0c             	sub    esp,0xc
c001df98:	56                   	push   esi
c001df99:	e8 e4 b6 00 00       	call   c0029682 <ThreadControlBlock::ThreadControlBlock()>
c001df9e:	83 c4 10             	add    esp,0x10
c001dfa1:	83 c6 63             	add    esi,0x63
c001dfa4:	4b                   	dec    ebx
c001dfa5:	eb ea                	jmp    c001df91 <Process::Process(char const*, Process*, char**)+0x15>
c001dfa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfab:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dfb2:	83 ec 0c             	sub    esp,0xc
c001dfb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfb9:	e8 a8 c6 ff ff       	call   c001a666 <Krnl::newProcessEnv(Process*)>
c001dfbe:	83 c4 10             	add    esp,0x10
c001dfc1:	89 c2                	mov    edx,eax
c001dfc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfc7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dfcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfd1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dfda:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c001dfdf:	8d 50 01             	lea    edx,[eax+0x1]
c001dfe2:	89 15 f0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f0,edx
c001dfe8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dfec:	89 02                	mov    DWORD PTR [edx],eax
c001dfee:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dff6:	83 ec 0c             	sub    esp,0xc
c001dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dffd:	e8 a6 18 ff ff       	call   c000f8a8 <malloc>
c001e002:	83 c4 10             	add    esp,0x10
c001e005:	89 c3                	mov    ebx,eax
c001e007:	83 ec 08             	sub    esp,0x8
c001e00a:	6a 00                	push   0x0
c001e00c:	53                   	push   ebx
c001e00d:	e8 0c 47 ff ff       	call   c001271e <VAS::VAS(bool)>
c001e012:	83 c4 10             	add    esp,0x10
c001e015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e019:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e01f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e023:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e02d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e031:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e035:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e03f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e045:	85 c0                	test   eax,eax
c001e047:	74 42                	je     c001e08b <Process::Process(char const*, Process*, char**)+0x10f>
c001e049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e04d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e053:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e059:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e05d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e067:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e06d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e077:	05 0c 01 00 00       	add    eax,0x10c
c001e07c:	83 ec 08             	sub    esp,0x8
c001e07f:	52                   	push   edx
c001e080:	50                   	push   eax
c001e081:	e8 a2 27 fe ff       	call   c0000828 <strcpy>
c001e086:	83 c4 10             	add    esp,0x10
c001e089:	eb 63                	jmp    c001e0ee <Process::Process(char const*, Process*, char**)+0x172>
c001e08b:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e093:	83 ec 0c             	sub    esp,0xc
c001e096:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e09a:	e8 09 18 ff ff       	call   c000f8a8 <malloc>
c001e09f:	83 c4 10             	add    esp,0x10
c001e0a2:	89 c3                	mov    ebx,eax
c001e0a4:	83 ec 08             	sub    esp,0x8
c001e0a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0ab:	53                   	push   ebx
c001e0ac:	e8 ad 2f ff ff       	call   c001105e <VgaText::VgaText(char const*)>
c001e0b1:	83 c4 10             	add    esp,0x10
c001e0b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0b8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e0be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0c2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0c8:	83 ec 0c             	sub    esp,0xc
c001e0cb:	50                   	push   eax
c001e0cc:	e8 c4 24 ff ff       	call   c0010595 <addToTerminalCycle(VgaText*)>
c001e0d1:	83 c4 10             	add    esp,0x10
c001e0d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0d8:	05 0c 01 00 00       	add    eax,0x10c
c001e0dd:	83 ec 08             	sub    esp,0x8
c001e0e0:	68 cf cc 02 c0       	push   0xc002cccf
c001e0e5:	50                   	push   eax
c001e0e6:	e8 3d 27 fe ff       	call   c0000828 <strcpy>
c001e0eb:	83 c4 10             	add    esp,0x10
c001e0ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0f2:	83 c0 0c             	add    eax,0xc
c001e0f5:	83 ec 08             	sub    esp,0x8
c001e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0fc:	50                   	push   eax
c001e0fd:	e8 26 27 fe ff       	call   c0000828 <strcpy>
c001e102:	83 c4 10             	add    esp,0x10
c001e105:	83 ec 08             	sub    esp,0x8
c001e108:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e10c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e110:	e8 0d fe ff ff       	call   c001df22 <Process::addArgs(char**)>
c001e115:	83 c4 10             	add    esp,0x10
c001e118:	83 ec 08             	sub    esp,0x8
c001e11b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e11f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e123:	e8 a6 ed ff ff       	call   c001cece <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e128:	83 c4 10             	add    esp,0x10
c001e12b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e12f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e133:	83 f0 01             	xor    eax,0x1
c001e136:	88 c2                	mov    dl,al
c001e138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e13c:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e142:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e147:	83 ec 08             	sub    esp,0x8
c001e14a:	50                   	push   eax
c001e14b:	68 fc cd 02 c0       	push   0xc002cdfc
c001e150:	e8 ee 4c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001e155:	83 c4 10             	add    esp,0x10
c001e158:	90                   	nop
c001e159:	83 c4 14             	add    esp,0x14
c001e15c:	5b                   	pop    ebx
c001e15d:	5e                   	pop    esi
c001e15e:	c3                   	ret    
c001e15f:	90                   	nop

c001e160 <Process::Process(bool, char const*, Process*, char**)>:
c001e160:	56                   	push   esi
c001e161:	53                   	push   ebx
c001e162:	83 ec 24             	sub    esp,0x24
c001e165:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e169:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e171:	05 0c 02 00 00       	add    eax,0x20c
c001e176:	bb 07 00 00 00       	mov    ebx,0x7
c001e17b:	89 c6                	mov    esi,eax
c001e17d:	85 db                	test   ebx,ebx
c001e17f:	78 12                	js     c001e193 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e181:	83 ec 0c             	sub    esp,0xc
c001e184:	56                   	push   esi
c001e185:	e8 f8 b4 00 00       	call   c0029682 <ThreadControlBlock::ThreadControlBlock()>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	83 c6 63             	add    esi,0x63
c001e190:	4b                   	dec    ebx
c001e191:	eb ea                	jmp    c001e17d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e197:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e19e:	83 ec 0c             	sub    esp,0xc
c001e1a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1a5:	e8 bc c4 ff ff       	call   c001a666 <Krnl::newProcessEnv(Process*)>
c001e1aa:	83 c4 10             	add    esp,0x10
c001e1ad:	89 c2                	mov    edx,eax
c001e1af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1b3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1bd:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e1c6:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c001e1cb:	8d 50 01             	lea    edx,[eax+0x1]
c001e1ce:	89 15 f0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f0,edx
c001e1d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e1d8:	89 02                	mov    DWORD PTR [edx],eax
c001e1da:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e1e2:	83 ec 0c             	sub    esp,0xc
c001e1e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e1e9:	e8 ba 16 ff ff       	call   c000f8a8 <malloc>
c001e1ee:	83 c4 10             	add    esp,0x10
c001e1f1:	89 c3                	mov    ebx,eax
c001e1f3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e1f8:	83 ec 08             	sub    esp,0x8
c001e1fb:	50                   	push   eax
c001e1fc:	53                   	push   ebx
c001e1fd:	e8 1c 45 ff ff       	call   c001271e <VAS::VAS(bool)>
c001e202:	83 c4 10             	add    esp,0x10
c001e205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e209:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e20f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e213:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e21d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e221:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e225:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e22b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e22f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e235:	85 c0                	test   eax,eax
c001e237:	74 42                	je     c001e27b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e23d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e243:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e24d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e253:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e257:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e25d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e267:	05 0c 01 00 00       	add    eax,0x10c
c001e26c:	83 ec 08             	sub    esp,0x8
c001e26f:	52                   	push   edx
c001e270:	50                   	push   eax
c001e271:	e8 b2 25 fe ff       	call   c0000828 <strcpy>
c001e276:	83 c4 10             	add    esp,0x10
c001e279:	eb 63                	jmp    c001e2de <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e27b:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e283:	83 ec 0c             	sub    esp,0xc
c001e286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e28a:	e8 19 16 ff ff       	call   c000f8a8 <malloc>
c001e28f:	83 c4 10             	add    esp,0x10
c001e292:	89 c3                	mov    ebx,eax
c001e294:	83 ec 08             	sub    esp,0x8
c001e297:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e29b:	53                   	push   ebx
c001e29c:	e8 bd 2d ff ff       	call   c001105e <VgaText::VgaText(char const*)>
c001e2a1:	83 c4 10             	add    esp,0x10
c001e2a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2a8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e2ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2b2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e2b8:	83 ec 0c             	sub    esp,0xc
c001e2bb:	50                   	push   eax
c001e2bc:	e8 d4 22 ff ff       	call   c0010595 <addToTerminalCycle(VgaText*)>
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2c8:	05 0c 01 00 00       	add    eax,0x10c
c001e2cd:	83 ec 08             	sub    esp,0x8
c001e2d0:	68 cf cc 02 c0       	push   0xc002cccf
c001e2d5:	50                   	push   eax
c001e2d6:	e8 4d 25 fe ff       	call   c0000828 <strcpy>
c001e2db:	83 c4 10             	add    esp,0x10
c001e2de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2e2:	83 c0 0c             	add    eax,0xc
c001e2e5:	83 ec 08             	sub    esp,0x8
c001e2e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e2ec:	50                   	push   eax
c001e2ed:	e8 36 25 fe ff       	call   c0000828 <strcpy>
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	83 ec 08             	sub    esp,0x8
c001e2f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e2fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e300:	e8 1d fc ff ff       	call   c001df22 <Process::addArgs(char**)>
c001e305:	83 c4 10             	add    esp,0x10
c001e308:	90                   	nop
c001e309:	83 c4 24             	add    esp,0x24
c001e30c:	5b                   	pop    ebx
c001e30d:	5e                   	pop    esi
c001e30e:	c3                   	ret    

c001e30f <taskStartupFunction>:
c001e30f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e314:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e317:	c3                   	ret    

c001e318 <Semaphore::Semaphore(int)>:
c001e318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e31c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e320:	89 10                	mov    DWORD PTR [eax],edx
c001e322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e326:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e32d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e331:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e33c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e343:	90                   	nop
c001e344:	c3                   	ret    
c001e345:	90                   	nop

c001e346 <Mutex::Mutex()>:
c001e346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e34a:	6a 01                	push   0x1
c001e34c:	50                   	push   eax
c001e34d:	e8 c6 ff ff ff       	call   c001e318 <Semaphore::Semaphore(int)>
c001e352:	83 c4 08             	add    esp,0x8
c001e355:	90                   	nop
c001e356:	c3                   	ret    
c001e357:	90                   	nop

c001e358 <Process::createThread(void (*)(void*), void*, int)>:
c001e358:	55                   	push   ebp
c001e359:	31 c9                	xor    ecx,ecx
c001e35b:	57                   	push   edi
c001e35c:	56                   	push   esi
c001e35d:	53                   	push   ebx
c001e35e:	83 ec 1c             	sub    esp,0x1c
c001e361:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e365:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e36c:	89 f2                	mov    edx,esi
c001e36e:	0f b7 c2             	movzx  eax,dx
c001e371:	83 e2 01             	and    edx,0x1
c001e374:	74 16                	je     c001e38c <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e376:	d1 f8                	sar    eax,1
c001e378:	41                   	inc    ecx
c001e379:	89 c2                	mov    edx,eax
c001e37b:	83 f9 10             	cmp    ecx,0x10
c001e37e:	75 ee                	jne    c001e36e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e380:	83 c4 1c             	add    esp,0x1c
c001e383:	31 db                	xor    ebx,ebx
c001e385:	89 d8                	mov    eax,ebx
c001e387:	5b                   	pop    ebx
c001e388:	5e                   	pop    esi
c001e389:	5f                   	pop    edi
c001e38a:	5d                   	pop    ebp
c001e38b:	c3                   	ret    
c001e38c:	b8 01 00 00 00       	mov    eax,0x1
c001e391:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e394:	d3 e0                	shl    eax,cl
c001e396:	09 c6                	or     esi,eax
c001e398:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e39b:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e3a2:	89 c6                	mov    esi,eax
c001e3a4:	c1 e6 05             	shl    esi,0x5
c001e3a7:	01 f0                	add    eax,esi
c001e3a9:	01 d8                	add    eax,ebx
c001e3ab:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e3b2:	75 0a                	jne    c001e3be <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e3b4:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e3be:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e3c4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e3c8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e3cb:	01 ca                	add    edx,ecx
c001e3cd:	83 ec 08             	sub    esp,0x8
c001e3d0:	89 d0                	mov    eax,edx
c001e3d2:	c1 e0 05             	shl    eax,0x5
c001e3d5:	01 d0                	add    eax,edx
c001e3d7:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e3db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3df:	01 d8                	add    eax,ebx
c001e3e1:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e3e7:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e3ed:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e3f3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e3f9:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e3ff:	89 cd                	mov    ebp,ecx
c001e401:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e405:	f7 dd                	neg    ebp
c001e407:	c1 e5 15             	shl    ebp,0x15
c001e40a:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e410:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e416:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e420:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e426:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e430:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e43a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e43e:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e445:	53                   	push   ebx
c001e446:	68 c4 24 03 c0       	push   0xc00324c4
c001e44b:	e8 ec af 00 00       	call   c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e450:	89 d8                	mov    eax,ebx
c001e452:	83 c4 10             	add    esp,0x10
c001e455:	83 c4 1c             	add    esp,0x1c
c001e458:	5b                   	pop    ebx
c001e459:	5e                   	pop    esi
c001e45a:	5f                   	pop    edi
c001e45b:	5d                   	pop    ebp
c001e45c:	c3                   	ret    
c001e45d:	90                   	nop

c001e45e <Process::createUserThread()>:
c001e45e:	83 ec 0c             	sub    esp,0xc
c001e461:	68 80 00 00 00       	push   0x80
c001e466:	6a 00                	push   0x0
c001e468:	68 22 de 01 c0       	push   0xc001de22
c001e46d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e471:	e8 e2 fe ff ff       	call   c001e358 <Process::createThread(void (*)(void*), void*, int)>
c001e476:	83 c4 1c             	add    esp,0x1c
c001e479:	c3                   	ret    

c001e47a <setupMultitasking(void (*)())>:
c001e47a:	56                   	push   esi
c001e47b:	53                   	push   ebx
c001e47c:	51                   	push   ecx
c001e47d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e481:	eb 10                	jmp    c001e493 <setupMultitasking(void (*)())+0x19>
c001e483:	83 ec 0c             	sub    esp,0xc
c001e486:	68 c4 24 03 c0       	push   0xc00324c4
c001e48b:	e8 fe ae 00 00       	call   c002938e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e490:	83 c4 10             	add    esp,0x10
c001e493:	83 ec 0c             	sub    esp,0xc
c001e496:	68 c4 24 03 c0       	push   0xc00324c4
c001e49b:	e8 ca ae 00 00       	call   c002936a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4a0:	83 c4 10             	add    esp,0x10
c001e4a3:	84 c0                	test   al,al
c001e4a5:	74 dc                	je     c001e483 <setupMultitasking(void (*)())+0x9>
c001e4a7:	83 ec 0c             	sub    esp,0xc
c001e4aa:	68 3f 07 00 00       	push   0x73f
c001e4af:	e8 f4 13 ff ff       	call   c000f8a8 <malloc>
c001e4b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e4bb:	89 c3                	mov    ebx,eax
c001e4bd:	6a 00                	push   0x0
c001e4bf:	68 d3 cc 02 c0       	push   0xc002ccd3
c001e4c4:	6a 01                	push   0x1
c001e4c6:	50                   	push   eax
c001e4c7:	e8 94 fc ff ff       	call   c001e160 <Process::Process(bool, char const*, Process*, char**)>
c001e4cc:	83 c4 18             	add    esp,0x18
c001e4cf:	89 1d d0 24 03 c0    	mov    DWORD PTR ds:0xc00324d0,ebx
c001e4d5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e4db:	68 24 ce 02 c0       	push   0xc002ce24
c001e4e0:	e8 5e 49 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001e4e5:	58                   	pop    eax
c001e4e6:	5a                   	pop    edx
c001e4e7:	6a 63                	push   0x63
c001e4e9:	68 58 ce 02 c0       	push   0xc002ce58
c001e4ee:	e8 50 49 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001e4f3:	59                   	pop    ecx
c001e4f4:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e4fa:	e8 67 27 ff ff       	call   c0010c66 <setActiveTerminal(VgaText*)>
c001e4ff:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e507:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e511:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e517:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e51a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e524:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e52a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e530:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e53a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e544:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e54e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e554:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e55e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e564:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e56e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e574:	58                   	pop    eax
c001e575:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e57b:	5a                   	pop    edx
c001e57c:	68 cf cc 02 c0       	push   0xc002cccf
c001e581:	50                   	push   eax
c001e582:	e8 a1 22 fe ff       	call   c0000828 <strcpy>
c001e587:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e58e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e592:	83 c4 14             	add    esp,0x14
c001e595:	5b                   	pop    ebx
c001e596:	5e                   	pop    esi
c001e597:	e9 b8 1d fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e59c <schedule()>:
c001e59c:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001e5a1:	85 c0                	test   eax,eax
c001e5a3:	74 0b                	je     c001e5b0 <schedule()+0x14>
c001e5a5:	c7 05 a0 24 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x1
c001e5af:	c3                   	ret    
c001e5b0:	53                   	push   ebx
c001e5b1:	83 ec 14             	sub    esp,0x14
c001e5b4:	68 c4 24 03 c0       	push   0xc00324c4
c001e5b9:	e8 ac ad 00 00       	call   c002936a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5be:	83 c4 10             	add    esp,0x10
c001e5c1:	84 c0                	test   al,al
c001e5c3:	75 38                	jne    c001e5fd <schedule()+0x61>
c001e5c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5cd:	4a                   	dec    edx
c001e5ce:	74 32                	je     c001e602 <schedule()+0x66>
c001e5d0:	83 ec 0c             	sub    esp,0xc
c001e5d3:	68 c4 24 03 c0       	push   0xc00324c4
c001e5d8:	e8 a9 ad 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5dd:	c7 04 24 c4 24 03 c0 	mov    DWORD PTR [esp],0xc00324c4
c001e5e4:	89 c3                	mov    ebx,eax
c001e5e6:	e8 a3 ad 00 00       	call   c002938e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5eb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e5f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e5f5:	e8 7e f8 ff ff       	call   c001de78 <switchToThread(ThreadControlBlock*)>
c001e5fa:	83 c4 10             	add    esp,0x10
c001e5fd:	83 c4 08             	add    esp,0x8
c001e600:	5b                   	pop    ebx
c001e601:	c3                   	ret    
c001e602:	83 ec 08             	sub    esp,0x8
c001e605:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e60c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e612:	68 c4 24 03 c0       	push   0xc00324c4
c001e617:	e8 20 ae 00 00       	call   c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e61c:	83 c4 10             	add    esp,0x10
c001e61f:	eb af                	jmp    c001e5d0 <schedule()+0x34>
c001e621:	90                   	nop

c001e622 <Semaphore::tryAcquire()>:
c001e622:	53                   	push   ebx
c001e623:	83 ec 08             	sub    esp,0x8
c001e626:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e62a:	fa                   	cli    
c001e62b:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e630:	8d 50 01             	lea    edx,[eax+0x1]
c001e633:	89 15 a8 24 03 c0    	mov    DWORD PTR ds:0xc00324a8,edx
c001e639:	8b 15 a4 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a4
c001e63f:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e642:	89 1d a4 24 03 c0    	mov    DWORD PTR ds:0xc00324a4,ebx
c001e648:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e64b:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e64d:	7c 2a                	jl     c001e679 <Semaphore::tryAcquire()+0x57>
c001e64f:	89 15 a4 24 03 c0    	mov    DWORD PTR ds:0xc00324a4,edx
c001e655:	85 d2                	test   edx,edx
c001e657:	75 0a                	jne    c001e663 <Semaphore::tryAcquire()+0x41>
c001e659:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c001e65f:	85 d2                	test   edx,edx
c001e661:	75 5b                	jne    c001e6be <Semaphore::tryAcquire()+0x9c>
c001e663:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e668:	85 c0                	test   eax,eax
c001e66a:	74 07                	je     c001e673 <Semaphore::tryAcquire()+0x51>
c001e66c:	31 c0                	xor    eax,eax
c001e66e:	83 c4 08             	add    esp,0x8
c001e671:	5b                   	pop    ebx
c001e672:	c3                   	ret    
c001e673:	fb                   	sti    
c001e674:	83 c4 08             	add    esp,0x8
c001e677:	5b                   	pop    ebx
c001e678:	c3                   	ret    
c001e679:	43                   	inc    ebx
c001e67a:	89 15 a4 24 03 c0    	mov    DWORD PTR ds:0xc00324a4,edx
c001e680:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e683:	85 d2                	test   edx,edx
c001e685:	75 1f                	jne    c001e6a6 <Semaphore::tryAcquire()+0x84>
c001e687:	8b 0d a0 24 03 c0    	mov    ecx,DWORD PTR ds:0xc00324a0
c001e68d:	85 c9                	test   ecx,ecx
c001e68f:	74 15                	je     c001e6a6 <Semaphore::tryAcquire()+0x84>
c001e691:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c001e69b:	e8 fc fe ff ff       	call   c001e59c <schedule()>
c001e6a0:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e6a5:	48                   	dec    eax
c001e6a6:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e6ab:	85 c0                	test   eax,eax
c001e6ad:	75 08                	jne    c001e6b7 <Semaphore::tryAcquire()+0x95>
c001e6af:	fb                   	sti    
c001e6b0:	b0 01                	mov    al,0x1
c001e6b2:	83 c4 08             	add    esp,0x8
c001e6b5:	5b                   	pop    ebx
c001e6b6:	c3                   	ret    
c001e6b7:	b0 01                	mov    al,0x1
c001e6b9:	83 c4 08             	add    esp,0x8
c001e6bc:	5b                   	pop    ebx
c001e6bd:	c3                   	ret    
c001e6be:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c001e6c8:	e8 cf fe ff ff       	call   c001e59c <schedule()>
c001e6cd:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e6d2:	48                   	dec    eax
c001e6d3:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e6d8:	85 c0                	test   eax,eax
c001e6da:	75 90                	jne    c001e66c <Semaphore::tryAcquire()+0x4a>
c001e6dc:	eb 95                	jmp    c001e673 <Semaphore::tryAcquire()+0x51>

c001e6de <Semaphore::assertLocked(char const*)>:
c001e6de:	83 ec 0c             	sub    esp,0xc
c001e6e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e6e5:	fa                   	cli    
c001e6e6:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001e6ec:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001e6f1:	8d 48 01             	lea    ecx,[eax+0x1]
c001e6f4:	89 0d a4 24 03 c0    	mov    DWORD PTR ds:0xc00324a4,ecx
c001e6fa:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e6fc:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e6ff:	7c 24                	jl     c001e725 <Semaphore::assertLocked(char const*)+0x47>
c001e701:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c001e706:	85 c0                	test   eax,eax
c001e708:	75 09                	jne    c001e713 <Semaphore::assertLocked(char const*)+0x35>
c001e70a:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c001e70f:	85 c0                	test   eax,eax
c001e711:	75 29                	jne    c001e73c <Semaphore::assertLocked(char const*)+0x5e>
c001e713:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e718:	48                   	dec    eax
c001e719:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e71e:	75 01                	jne    c001e721 <Semaphore::assertLocked(char const*)+0x43>
c001e720:	fb                   	sti    
c001e721:	83 c4 0c             	add    esp,0xc
c001e724:	c3                   	ret    
c001e725:	83 ec 0c             	sub    esp,0xc
c001e728:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e72c:	e8 dc c0 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001e731:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001e736:	83 c4 10             	add    esp,0x10
c001e739:	48                   	dec    eax
c001e73a:	eb c5                	jmp    c001e701 <Semaphore::assertLocked(char const*)+0x23>
c001e73c:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c001e746:	e8 51 fe ff ff       	call   c001e59c <schedule()>
c001e74b:	eb c6                	jmp    c001e713 <Semaphore::assertLocked(char const*)+0x35>

c001e74d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e74d:	83 ec 14             	sub    esp,0x14
c001e750:	ff 35 a8 24 03 c0    	push   DWORD PTR ds:0xc00324a8
c001e756:	68 7c ce 02 c0       	push   0xc002ce7c
c001e75b:	e8 e3 46 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001e760:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e765:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e769:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e76c:	e8 2b fe ff ff       	call   c001e59c <schedule()>
c001e771:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e776:	83 c4 10             	add    esp,0x10
c001e779:	48                   	dec    eax
c001e77a:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e77f:	85 c0                	test   eax,eax
c001e781:	75 06                	jne    c001e789 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e783:	fb                   	sti    
c001e784:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e789:	83 ec 08             	sub    esp,0x8
c001e78c:	50                   	push   eax
c001e78d:	68 b0 ce 02 c0       	push   0xc002ceb0
c001e792:	e8 ac 46 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001e797:	83 c4 1c             	add    esp,0x1c
c001e79a:	c3                   	ret    

c001e79b <blockTask(TaskState)>:
c001e79b:	83 ec 0c             	sub    esp,0xc
c001e79e:	fa                   	cli    
c001e79f:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001e7a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e7b1:	e8 e6 fd ff ff       	call   c001e59c <schedule()>
c001e7b6:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e7bb:	48                   	dec    eax
c001e7bc:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e7c1:	75 01                	jne    c001e7c4 <blockTask(TaskState)+0x29>
c001e7c3:	fb                   	sti    
c001e7c4:	83 c4 0c             	add    esp,0xc
c001e7c7:	c3                   	ret    

c001e7c8 <waitTask(int, int*, int)>:
c001e7c8:	83 ec 18             	sub    esp,0x18
c001e7cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e7d4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e7d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e7db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7e0:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e7e3:	6a 07                	push   0x7
c001e7e5:	e8 b1 ff ff ff       	call   c001e79b <blockTask(TaskState)>
c001e7ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ef:	83 c4 10             	add    esp,0x10
c001e7f2:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e7f5:	85 d2                	test   edx,edx
c001e7f7:	74 0a                	je     c001e803 <waitTask(int, int*, int)+0x3b>
c001e7f9:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e7fc:	89 02                	mov    DWORD PTR [edx],eax
c001e7fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e803:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e806:	83 c4 0c             	add    esp,0xc
c001e809:	c3                   	ret    

c001e80a <nanoSleepUntil(unsigned long long)>:
c001e80a:	83 ec 0c             	sub    esp,0xc
c001e80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e811:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e815:	3b 05 f0 f5 02 c0    	cmp    eax,DWORD PTR ds:0xc002f5f0
c001e81b:	89 d1                	mov    ecx,edx
c001e81d:	1b 0d f4 f5 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f5f4
c001e823:	73 04                	jae    c001e829 <nanoSleepUntil(unsigned long long)+0x1f>
c001e825:	83 c4 0c             	add    esp,0xc
c001e828:	c3                   	ret    
c001e829:	fa                   	cli    
c001e82a:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001e830:	83 ec 08             	sub    esp,0x8
c001e833:	ff 05 a4 24 03 c0    	inc    DWORD PTR ds:0xc00324a4
c001e839:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e83f:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e842:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e845:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e84b:	68 b8 24 03 c0       	push   0xc00324b8
c001e850:	e8 e7 ab 00 00       	call   c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e855:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e85c:	e8 3a ff ff ff       	call   c001e79b <blockTask(TaskState)>
c001e861:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001e866:	83 c4 10             	add    esp,0x10
c001e869:	48                   	dec    eax
c001e86a:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c001e86f:	85 c0                	test   eax,eax
c001e871:	75 09                	jne    c001e87c <nanoSleepUntil(unsigned long long)+0x72>
c001e873:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c001e878:	85 c0                	test   eax,eax
c001e87a:	75 12                	jne    c001e88e <nanoSleepUntil(unsigned long long)+0x84>
c001e87c:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e881:	48                   	dec    eax
c001e882:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e887:	75 9c                	jne    c001e825 <nanoSleepUntil(unsigned long long)+0x1b>
c001e889:	fb                   	sti    
c001e88a:	83 c4 0c             	add    esp,0xc
c001e88d:	c3                   	ret    
c001e88e:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c001e898:	e8 ff fc ff ff       	call   c001e59c <schedule()>
c001e89d:	eb dd                	jmp    c001e87c <nanoSleepUntil(unsigned long long)+0x72>

c001e89f <nanoSleep(unsigned long long)>:
c001e89f:	a1 f0 f5 02 c0       	mov    eax,ds:0xc002f5f0
c001e8a4:	8b 15 f4 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f5f4
c001e8aa:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e8ae:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e8b2:	e9 53 ff ff ff       	jmp    c001e80a <nanoSleepUntil(unsigned long long)>

c001e8b7 <sleep(unsigned long long)>:
c001e8b7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e8bf:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e8c4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e8c8:	01 ca                	add    edx,ecx
c001e8ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e8d2:	eb cb                	jmp    c001e89f <nanoSleep(unsigned long long)>

c001e8d4 <Semaphore::acquire()>:
c001e8d4:	83 ec 0c             	sub    esp,0xc
c001e8d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8db:	fa                   	cli    
c001e8dc:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001e8e1:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001e8e7:	8d 48 01             	lea    ecx,[eax+0x1]
c001e8ea:	89 0d a4 24 03 c0    	mov    DWORD PTR ds:0xc00324a4,ecx
c001e8f0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e8f3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e8f5:	7d 28                	jge    c001e91f <Semaphore::acquire()+0x4b>
c001e8f7:	41                   	inc    ecx
c001e8f8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e8fb:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c001e900:	85 c0                	test   eax,eax
c001e902:	75 09                	jne    c001e90d <Semaphore::acquire()+0x39>
c001e904:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c001e909:	85 c0                	test   eax,eax
c001e90b:	75 4e                	jne    c001e95b <Semaphore::acquire()+0x87>
c001e90d:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e912:	48                   	dec    eax
c001e913:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e918:	75 01                	jne    c001e91b <Semaphore::acquire()+0x47>
c001e91a:	fb                   	sti    
c001e91b:	83 c4 0c             	add    esp,0xc
c001e91e:	c3                   	ret    
c001e91f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e924:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e92b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e92e:	85 c9                	test   ecx,ecx
c001e930:	74 3a                	je     c001e96c <Semaphore::acquire()+0x98>
c001e932:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e935:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e93b:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e93e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e943:	83 ec 0c             	sub    esp,0xc
c001e946:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e949:	6a 05                	push   0x5
c001e94b:	e8 4b fe ff ff       	call   c001e79b <blockTask(TaskState)>
c001e950:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001e955:	83 c4 10             	add    esp,0x10
c001e958:	48                   	dec    eax
c001e959:	eb a0                	jmp    c001e8fb <Semaphore::acquire()+0x27>
c001e95b:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c001e965:	e8 32 fc ff ff       	call   c001e59c <schedule()>
c001e96a:	eb a1                	jmp    c001e90d <Semaphore::acquire()+0x39>
c001e96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e971:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e974:	eb c8                	jmp    c001e93e <Semaphore::acquire()+0x6a>

c001e976 <taskReturned>:
c001e976:	83 ec 18             	sub    esp,0x18
c001e979:	68 e4 ce 02 c0       	push   0xc002cee4
c001e97e:	e8 8a be ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001e983:	83 c4 10             	add    esp,0x10
c001e986:	83 ec 0c             	sub    esp,0xc
c001e989:	6a 02                	push   0x2
c001e98b:	e8 0b fe ff ff       	call   c001e79b <blockTask(TaskState)>
c001e990:	fa                   	cli    
c001e991:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001e997:	e8 00 fc ff ff       	call   c001e59c <schedule()>
c001e99c:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001e9a1:	83 c4 10             	add    esp,0x10
c001e9a4:	48                   	dec    eax
c001e9a5:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001e9aa:	85 c0                	test   eax,eax
c001e9ac:	75 d8                	jne    c001e986 <taskReturned+0x10>
c001e9ae:	fb                   	sti    
c001e9af:	eb d5                	jmp    c001e986 <taskReturned+0x10>

c001e9b1 <Thr::processFromPID(int)>:
c001e9b1:	57                   	push   edi
c001e9b2:	56                   	push   esi
c001e9b3:	53                   	push   ebx
c001e9b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e9b8:	83 ec 0c             	sub    esp,0xc
c001e9bb:	68 da cc 02 c0       	push   0xc002ccda
c001e9c0:	e8 7e 44 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001e9c5:	fa                   	cli    
c001e9c6:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001e9cc:	c7 04 24 c4 24 03 c0 	mov    DWORD PTR [esp],0xc00324c4
c001e9d3:	e8 ae a9 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e9d8:	83 c4 10             	add    esp,0x10
c001e9db:	89 c7                	mov    edi,eax
c001e9dd:	eb 14                	jmp    c001e9f3 <Thr::processFromPID(int)+0x42>
c001e9df:	83 ec 0c             	sub    esp,0xc
c001e9e2:	68 c4 24 03 c0       	push   0xc00324c4
c001e9e7:	e8 9a a9 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e9ec:	83 c4 10             	add    esp,0x10
c001e9ef:	39 f8                	cmp    eax,edi
c001e9f1:	74 49                	je     c001ea3c <Thr::processFromPID(int)+0x8b>
c001e9f3:	83 ec 0c             	sub    esp,0xc
c001e9f6:	68 c4 24 03 c0       	push   0xc00324c4
c001e9fb:	e8 86 a9 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea00:	c7 04 24 c4 24 03 c0 	mov    DWORD PTR [esp],0xc00324c4
c001ea07:	89 c3                	mov    ebx,eax
c001ea09:	e8 80 a9 00 00       	call   c002938e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ea0e:	58                   	pop    eax
c001ea0f:	5a                   	pop    edx
c001ea10:	53                   	push   ebx
c001ea11:	68 c4 24 03 c0       	push   0xc00324c4
c001ea16:	e8 21 aa 00 00       	call   c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea1b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	39 30                	cmp    DWORD PTR [eax],esi
c001ea23:	75 ba                	jne    c001e9df <Thr::processFromPID(int)+0x2e>
c001ea25:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001ea2a:	48                   	dec    eax
c001ea2b:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001ea30:	74 07                	je     c001ea39 <Thr::processFromPID(int)+0x88>
c001ea32:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea35:	5b                   	pop    ebx
c001ea36:	5e                   	pop    esi
c001ea37:	5f                   	pop    edi
c001ea38:	c3                   	ret    
c001ea39:	fb                   	sti    
c001ea3a:	eb f6                	jmp    c001ea32 <Thr::processFromPID(int)+0x81>
c001ea3c:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001ea41:	48                   	dec    eax
c001ea42:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001ea47:	75 01                	jne    c001ea4a <Thr::processFromPID(int)+0x99>
c001ea49:	fb                   	sti    
c001ea4a:	83 ec 0c             	sub    esp,0xc
c001ea4d:	68 f5 cc 02 c0       	push   0xc002ccf5
c001ea52:	e8 ec 43 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ea57:	83 c4 10             	add    esp,0x10
c001ea5a:	31 c0                	xor    eax,eax
c001ea5c:	5b                   	pop    ebx
c001ea5d:	5e                   	pop    esi
c001ea5e:	5f                   	pop    edi
c001ea5f:	c3                   	ret    

c001ea60 <unblockTask(ThreadControlBlock*)>:
c001ea60:	53                   	push   ebx
c001ea61:	83 ec 08             	sub    esp,0x8
c001ea64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea68:	fa                   	cli    
c001ea69:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001ea6f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ea72:	85 c0                	test   eax,eax
c001ea74:	74 66                	je     c001eadc <unblockTask(ThreadControlBlock*)+0x7c>
c001ea76:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ea79:	48                   	dec    eax
c001ea7a:	74 31                	je     c001eaad <unblockTask(ThreadControlBlock*)+0x4d>
c001ea7c:	83 ec 0c             	sub    esp,0xc
c001ea7f:	68 c4 24 03 c0       	push   0xc00324c4
c001ea84:	e8 fd a8 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea89:	83 c4 10             	add    esp,0x10
c001ea8c:	85 c0                	test   eax,eax
c001ea8e:	75 17                	jne    c001eaa7 <unblockTask(ThreadControlBlock*)+0x47>
c001ea90:	eb 68                	jmp    c001eafa <unblockTask(ThreadControlBlock*)+0x9a>
c001ea92:	83 ec 08             	sub    esp,0x8
c001ea95:	50                   	push   eax
c001ea96:	68 c4 24 03 c0       	push   0xc00324c4
c001ea9b:	e8 84 ac 00 00       	call   c0029724 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001eaa0:	83 c4 10             	add    esp,0x10
c001eaa3:	85 c0                	test   eax,eax
c001eaa5:	74 53                	je     c001eafa <unblockTask(ThreadControlBlock*)+0x9a>
c001eaa7:	39 c3                	cmp    ebx,eax
c001eaa9:	75 e7                	jne    c001ea92 <unblockTask(ThreadControlBlock*)+0x32>
c001eaab:	eb 1c                	jmp    c001eac9 <unblockTask(ThreadControlBlock*)+0x69>
c001eaad:	83 ec 0c             	sub    esp,0xc
c001eab0:	68 d4 cf 02 c0       	push   0xc002cfd4
c001eab5:	e8 89 43 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001eaba:	c7 04 24 60 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf60
c001eac1:	e8 7d 43 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001eac6:	83 c4 10             	add    esp,0x10
c001eac9:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001eace:	48                   	dec    eax
c001eacf:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001ead4:	75 01                	jne    c001ead7 <unblockTask(ThreadControlBlock*)+0x77>
c001ead6:	fb                   	sti    
c001ead7:	83 c4 08             	add    esp,0x8
c001eada:	5b                   	pop    ebx
c001eadb:	c3                   	ret    
c001eadc:	83 ec 0c             	sub    esp,0xc
c001eadf:	68 18 cf 02 c0       	push   0xc002cf18
c001eae4:	e8 5a 43 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001eae9:	c7 04 24 60 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf60
c001eaf0:	e8 4e 43 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	eb cf                	jmp    c001eac9 <unblockTask(ThreadControlBlock*)+0x69>
c001eafa:	83 ec 08             	sub    esp,0x8
c001eafd:	53                   	push   ebx
c001eafe:	68 c4 24 03 c0       	push   0xc00324c4
c001eb03:	e8 34 a9 00 00       	call   c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eb08:	83 c4 10             	add    esp,0x10
c001eb0b:	eb bc                	jmp    c001eac9 <unblockTask(ThreadControlBlock*)+0x69>

c001eb0d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001eb0d:	55                   	push   ebp
c001eb0e:	57                   	push   edi
c001eb0f:	56                   	push   esi
c001eb10:	53                   	push   ebx
c001eb11:	83 ec 1c             	sub    esp,0x1c
c001eb14:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eb18:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb1b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001eb21:	85 ff                	test   edi,edi
c001eb23:	7e 20                	jle    c001eb45 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001eb25:	31 f6                	xor    esi,esi
c001eb27:	83 ec 0c             	sub    esp,0xc
c001eb2a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001eb31:	46                   	inc    esi
c001eb32:	e8 81 0d ff ff       	call   c000f8b8 <free>
c001eb37:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb3a:	83 c4 10             	add    esp,0x10
c001eb3d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001eb43:	7f e2                	jg     c001eb27 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001eb45:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001eb4f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001eb54:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001eb57:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eb5a:	d3 c0                	rol    eax,cl
c001eb5c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001eb63:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb66:	89 f7                	mov    edi,esi
c001eb68:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001eb70:	0f 85 74 01 00 00    	jne    c001ecea <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001eb76:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001eb7c:	85 ed                	test   ebp,ebp
c001eb7e:	74 1b                	je     c001eb9b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001eb80:	83 ec 0c             	sub    esp,0xc
c001eb83:	55                   	push   ebp
c001eb84:	e8 f9 b9 ff ff       	call   c001a582 <EnvVarContainer::~EnvVarContainer()>
c001eb89:	59                   	pop    ecx
c001eb8a:	5e                   	pop    esi
c001eb8b:	6a 0c                	push   0xc
c001eb8d:	55                   	push   ebp
c001eb8e:	e8 d0 41 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c001eb93:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb96:	83 c4 10             	add    esp,0x10
c001eb99:	89 f7                	mov    edi,esi
c001eb9b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eba1:	85 c0                	test   eax,eax
c001eba3:	0f 84 aa 00 00 00    	je     c001ec53 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eba9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ebac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ebb0:	31 c9                	xor    ecx,ecx
c001ebb2:	eb 10                	jmp    c001ebc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ebb4:	41                   	inc    ecx
c001ebb5:	83 f9 10             	cmp    ecx,0x10
c001ebb8:	0f 84 95 00 00 00    	je     c001ec53 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ebbe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ebc4:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ebcb:	d3 fa                	sar    edx,cl
c001ebcd:	83 e2 01             	and    edx,0x1
c001ebd0:	74 e2                	je     c001ebb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ebd2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ebd5:	01 ca                	add    edx,ecx
c001ebd7:	89 d5                	mov    ebp,edx
c001ebd9:	c1 e5 05             	shl    ebp,0x5
c001ebdc:	01 ea                	add    edx,ebp
c001ebde:	01 d0                	add    eax,edx
c001ebe0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ebe6:	83 fd 07             	cmp    ebp,0x7
c001ebe9:	75 c9                	jne    c001ebb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ebeb:	05 40 02 00 00       	add    eax,0x240
c001ebf0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ebf3:	83 fd ff             	cmp    ebp,0xffffffff
c001ebf6:	0f 8c 08 01 00 00    	jl     c001ed04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ebfc:	0f 84 b9 01 00 00    	je     c001edbb <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001ec02:	85 ed                	test   ebp,ebp
c001ec04:	0f 84 a0 01 00 00    	je     c001edaa <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001ec0a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ec0c:	75 a6                	jne    c001ebb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec0e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ec14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec18:	01 d0                	add    eax,edx
c001ec1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ec27:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec2a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ec30:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ec37:	50                   	push   eax
c001ec38:	e8 23 fe ff ff       	call   c001ea60 <unblockTask(ThreadControlBlock*)>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec47:	89 f7                	mov    edi,esi
c001ec49:	41                   	inc    ecx
c001ec4a:	83 f9 10             	cmp    ecx,0x10
c001ec4d:	0f 85 6b ff ff ff    	jne    c001ebbe <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ec53:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ec59:	85 c0                	test   eax,eax
c001ec5b:	74 5d                	je     c001ecba <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ec5d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ec63:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ec69:	74 4f                	je     c001ecba <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ec6b:	83 ec 0c             	sub    esp,0xc
c001ec6e:	68 c4 24 03 c0       	push   0xc00324c4
c001ec73:	e8 0e a7 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec78:	c7 04 24 c4 24 03 c0 	mov    DWORD PTR [esp],0xc00324c4
c001ec7f:	89 c7                	mov    edi,eax
c001ec81:	e8 e4 a6 00 00       	call   c002936a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ec86:	83 c4 10             	add    esp,0x10
c001ec89:	84 c0                	test   al,al
c001ec8b:	0f 84 e4 00 00 00    	je     c001ed75 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ec91:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec94:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ec9a:	85 d2                	test   edx,edx
c001ec9c:	74 0f                	je     c001ecad <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	8b 02                	mov    eax,DWORD PTR [edx]
c001eca3:	52                   	push   edx
c001eca4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eca7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecaa:	83 c4 10             	add    esp,0x10
c001ecad:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ecb7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ecba:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ecc0:	85 db                	test   ebx,ebx
c001ecc2:	74 16                	je     c001ecda <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ecc4:	83 ec 0c             	sub    esp,0xc
c001ecc7:	53                   	push   ebx
c001ecc8:	e8 2b 34 ff ff       	call   c00120f8 <VAS::~VAS()>
c001eccd:	58                   	pop    eax
c001ecce:	5a                   	pop    edx
c001eccf:	6a 14                	push   0x14
c001ecd1:	53                   	push   ebx
c001ecd2:	e8 8c 40 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	83 ec 0c             	sub    esp,0xc
c001ecdd:	68 0c cd 02 c0       	push   0xc002cd0c
c001ece2:	e8 5c 41 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ece7:	83 c4 10             	add    esp,0x10
c001ecea:	83 ec 08             	sub    esp,0x8
c001eced:	68 3f 07 00 00       	push   0x73f
c001ecf2:	68 1a cd 02 c0       	push   0xc002cd1a
c001ecf7:	e8 47 41 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ecfc:	83 c4 2c             	add    esp,0x2c
c001ecff:	5b                   	pop    ebx
c001ed00:	5e                   	pop    esi
c001ed01:	5f                   	pop    edi
c001ed02:	5d                   	pop    ebp
c001ed03:	c3                   	ret    
c001ed04:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	68 18 d0 02 c0       	push   0xc002d018
c001ed10:	e8 f8 ba ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001ed15:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed18:	83 c4 10             	add    esp,0x10
c001ed1b:	89 f7                	mov    edi,esi
c001ed1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed21:	e9 8e fe ff ff       	jmp    c001ebb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed26:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ed2c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ed32:	75 1c                	jne    c001ed50 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ed34:	83 ec 0c             	sub    esp,0xc
c001ed37:	68 80 d0 02 c0       	push   0xc002d080
c001ed3c:	e8 02 41 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ed41:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ed48:	e8 4e fa ff ff       	call   c001e79b <blockTask(TaskState)>
c001ed4d:	83 c4 10             	add    esp,0x10
c001ed50:	83 ec 08             	sub    esp,0x8
c001ed53:	56                   	push   esi
c001ed54:	68 c4 24 03 c0       	push   0xc00324c4
c001ed59:	e8 de a6 00 00       	call   c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ed5e:	c7 04 24 c4 24 03 c0 	mov    DWORD PTR [esp],0xc00324c4
c001ed65:	e8 1c a6 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed6a:	83 c4 10             	add    esp,0x10
c001ed6d:	39 f8                	cmp    eax,edi
c001ed6f:	0f 84 1c ff ff ff    	je     c001ec91 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ed75:	83 ec 0c             	sub    esp,0xc
c001ed78:	68 c4 24 03 c0       	push   0xc00324c4
c001ed7d:	e8 04 a6 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed82:	c7 04 24 c4 24 03 c0 	mov    DWORD PTR [esp],0xc00324c4
c001ed89:	89 c6                	mov    esi,eax
c001ed8b:	e8 fe a5 00 00       	call   c002938e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed90:	83 c4 10             	add    esp,0x10
c001ed93:	39 f3                	cmp    ebx,esi
c001ed95:	74 b9                	je     c001ed50 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ed97:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ed9a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed9d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001eda3:	75 ab                	jne    c001ed50 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eda5:	e9 7c ff ff ff       	jmp    c001ed26 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001edaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edae:	83 ec 0c             	sub    esp,0xc
c001edb1:	68 4c d0 02 c0       	push   0xc002d04c
c001edb6:	e9 55 ff ff ff       	jmp    c001ed10 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001edbb:	8b 36                	mov    esi,DWORD PTR [esi]
c001edbd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edc1:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001edc4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001edc7:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001edcd:	01 d7                	add    edi,edx
c001edcf:	89 f8                	mov    eax,edi
c001edd1:	e9 44 fe ff ff       	jmp    c001ec1a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001edd6 <cleanerTaskFunction(void*)>:
c001edd6:	53                   	push   ebx
c001edd7:	83 ec 08             	sub    esp,0x8
c001edda:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001eddf:	48                   	dec    eax
c001ede0:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001ede5:	75 01                	jne    c001ede8 <cleanerTaskFunction(void*)+0x12>
c001ede7:	fb                   	sti    
c001ede8:	fa                   	cli    
c001ede9:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001edee:	80 3d 8c 24 03 c0 00 	cmp    BYTE PTR ds:0xc003248c,0x0
c001edf5:	8d 50 01             	lea    edx,[eax+0x1]
c001edf8:	89 15 a8 24 03 c0    	mov    DWORD PTR ds:0xc00324a8,edx
c001edfe:	0f 84 b9 00 00 00    	je     c001eebd <cleanerTaskFunction(void*)+0xe7>
c001ee04:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001ee09:	85 c0                	test   eax,eax
c001ee0b:	75 01                	jne    c001ee0e <cleanerTaskFunction(void*)+0x38>
c001ee0d:	fb                   	sti    
c001ee0e:	c6 05 8c 24 03 c0 00 	mov    BYTE PTR ds:0xc003248c,0x0
c001ee15:	fa                   	cli    
c001ee16:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001ee1c:	ff 05 a4 24 03 c0    	inc    DWORD PTR ds:0xc00324a4
c001ee22:	fa                   	cli    
c001ee23:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001ee29:	eb 3e                	jmp    c001ee69 <cleanerTaskFunction(void*)+0x93>
c001ee2b:	83 ec 0c             	sub    esp,0xc
c001ee2e:	68 ac 24 03 c0       	push   0xc00324ac
c001ee33:	e8 4e a5 00 00       	call   c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee38:	c7 04 24 ac 24 03 c0 	mov    DWORD PTR [esp],0xc00324ac
c001ee3f:	89 c3                	mov    ebx,eax
c001ee41:	e8 48 a5 00 00       	call   c002938e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ee46:	c7 04 24 30 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd30
c001ee4d:	e8 f1 3f ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ee52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ee55:	e8 b3 fc ff ff       	call   c001eb0d <cleanupTerminatedTask(ThreadControlBlock*)>
c001ee5a:	c7 04 24 49 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd49
c001ee61:	e8 dd 3f ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ee66:	83 c4 10             	add    esp,0x10
c001ee69:	83 ec 0c             	sub    esp,0xc
c001ee6c:	68 ac 24 03 c0       	push   0xc00324ac
c001ee71:	e8 f4 a4 00 00       	call   c002936a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ee76:	83 c4 10             	add    esp,0x10
c001ee79:	84 c0                	test   al,al
c001ee7b:	74 ae                	je     c001ee2b <cleanerTaskFunction(void*)+0x55>
c001ee7d:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001ee82:	48                   	dec    eax
c001ee83:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001ee88:	75 01                	jne    c001ee8b <cleanerTaskFunction(void*)+0xb5>
c001ee8a:	fb                   	sti    
c001ee8b:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001ee90:	48                   	dec    eax
c001ee91:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c001ee96:	0f 85 3e ff ff ff    	jne    c001edda <cleanerTaskFunction(void*)+0x4>
c001ee9c:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c001eea1:	85 c0                	test   eax,eax
c001eea3:	0f 84 31 ff ff ff    	je     c001edda <cleanerTaskFunction(void*)+0x4>
c001eea9:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c001eeb3:	e8 e4 f6 ff ff       	call   c001e59c <schedule()>
c001eeb8:	e9 1d ff ff ff       	jmp    c001edda <cleanerTaskFunction(void*)+0x4>
c001eebd:	83 ec 0c             	sub    esp,0xc
c001eec0:	6a 02                	push   0x2
c001eec2:	e8 86 f8 ff ff       	call   c001e74d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eec7:	83 c4 10             	add    esp,0x10
c001eeca:	e9 3f ff ff ff       	jmp    c001ee0e <cleanerTaskFunction(void*)+0x38>

c001eecf <terminateTask(int)>:
c001eecf:	83 ec 14             	sub    esp,0x14
c001eed2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eed7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001eeda:	83 c0 0c             	add    eax,0xc
c001eedd:	50                   	push   eax
c001eede:	68 a8 d0 02 c0       	push   0xc002d0a8
c001eee3:	e8 5b 3f ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001eee8:	fa                   	cli    
c001eee9:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001eeef:	ff 05 a4 24 03 c0    	inc    DWORD PTR ds:0xc00324a4
c001eef5:	fa                   	cli    
c001eef6:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001eefc:	c7 04 24 5c cd 02 c0 	mov    DWORD PTR [esp],0xc002cd5c
c001ef03:	e8 3b 3f ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ef08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ef0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef11:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ef14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef19:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ef1c:	5a                   	pop    edx
c001ef1d:	59                   	pop    ecx
c001ef1e:	50                   	push   eax
c001ef1f:	68 ac 24 03 c0       	push   0xc00324ac
c001ef24:	e8 13 a5 00 00       	call   c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ef29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef2e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ef35:	c7 04 24 76 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd76
c001ef3c:	e8 02 3f ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ef41:	83 c4 10             	add    esp,0x10
c001ef44:	a1 88 24 03 c0       	mov    eax,ds:0xc0032488
c001ef49:	85 c0                	test   eax,eax
c001ef4b:	0f 84 8d 00 00 00    	je     c001efde <terminateTask(int)+0x10f>
c001ef51:	83 ec 0c             	sub    esp,0xc
c001ef54:	68 90 cd 02 c0       	push   0xc002cd90
c001ef59:	e8 e5 3e ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ef5e:	58                   	pop    eax
c001ef5f:	c6 05 8c 24 03 c0 01 	mov    BYTE PTR ds:0xc003248c,0x1
c001ef66:	ff 35 88 24 03 c0    	push   DWORD PTR ds:0xc0032488
c001ef6c:	e8 ef fa ff ff       	call   c001ea60 <unblockTask(ThreadControlBlock*)>
c001ef71:	c7 04 24 aa cd 02 c0 	mov    DWORD PTR [esp],0xc002cdaa
c001ef78:	e8 c6 3e ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001ef85:	48                   	dec    eax
c001ef86:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001ef8b:	75 01                	jne    c001ef8e <terminateTask(int)+0xbf>
c001ef8d:	fb                   	sti    
c001ef8e:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001ef93:	48                   	dec    eax
c001ef94:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c001ef99:	75 09                	jne    c001efa4 <terminateTask(int)+0xd5>
c001ef9b:	83 3d a0 24 03 c0 00 	cmp    DWORD PTR ds:0xc00324a0,0x0
c001efa2:	75 4c                	jne    c001eff0 <terminateTask(int)+0x121>
c001efa4:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001efa9:	48                   	dec    eax
c001efaa:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001efaf:	75 01                	jne    c001efb2 <terminateTask(int)+0xe3>
c001efb1:	fb                   	sti    
c001efb2:	83 ec 0c             	sub    esp,0xc
c001efb5:	68 e2 cd 02 c0       	push   0xc002cde2
c001efba:	e8 84 3e ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001efbf:	83 c4 10             	add    esp,0x10
c001efc2:	fa                   	cli    
c001efc3:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001efc9:	e8 ce f5 ff ff       	call   c001e59c <schedule()>
c001efce:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001efd3:	48                   	dec    eax
c001efd4:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001efd9:	75 e7                	jne    c001efc2 <terminateTask(int)+0xf3>
c001efdb:	fb                   	sti    
c001efdc:	eb e4                	jmp    c001efc2 <terminateTask(int)+0xf3>
c001efde:	83 ec 0c             	sub    esp,0xc
c001efe1:	68 c4 cd 02 c0       	push   0xc002cdc4
c001efe6:	e8 58 3e ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001efeb:	83 c4 10             	add    esp,0x10
c001efee:	eb 90                	jmp    c001ef80 <terminateTask(int)+0xb1>
c001eff0:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c001effa:	e8 9d f5 ff ff       	call   c001e59c <schedule()>
c001efff:	eb a3                	jmp    c001efa4 <terminateTask(int)+0xd5>

c001f001 <Thr::terminateFromIRQ(int)>:
c001f001:	83 ec 18             	sub    esp,0x18
c001f004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f008:	e8 c2 fe ff ff       	call   c001eecf <terminateTask(int)>
c001f00d:	90                   	nop

c001f00e <Semaphore::release()>:
c001f00e:	83 ec 0c             	sub    esp,0xc
c001f011:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f015:	fa                   	cli    
c001f016:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001f01b:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001f021:	8d 48 01             	lea    ecx,[eax+0x1]
c001f024:	89 0d a4 24 03 c0    	mov    DWORD PTR ds:0xc00324a4,ecx
c001f02a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f02d:	85 c9                	test   ecx,ecx
c001f02f:	74 3c                	je     c001f06d <Semaphore::release()+0x5f>
c001f031:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f03a:	51                   	push   ecx
c001f03b:	e8 20 fa ff ff       	call   c001ea60 <unblockTask(ThreadControlBlock*)>
c001f040:	a1 a4 24 03 c0       	mov    eax,ds:0xc00324a4
c001f045:	83 c4 10             	add    esp,0x10
c001f048:	48                   	dec    eax
c001f049:	a3 a4 24 03 c0       	mov    ds:0xc00324a4,eax
c001f04e:	85 c0                	test   eax,eax
c001f050:	75 09                	jne    c001f05b <Semaphore::release()+0x4d>
c001f052:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c001f057:	85 c0                	test   eax,eax
c001f059:	75 17                	jne    c001f072 <Semaphore::release()+0x64>
c001f05b:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001f060:	48                   	dec    eax
c001f061:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001f066:	75 01                	jne    c001f069 <Semaphore::release()+0x5b>
c001f068:	fb                   	sti    
c001f069:	83 c4 0c             	add    esp,0xc
c001f06c:	c3                   	ret    
c001f06d:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f070:	eb d7                	jmp    c001f049 <Semaphore::release()+0x3b>
c001f072:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c001f07c:	e8 1b f5 ff ff       	call   c001e59c <schedule()>
c001f081:	eb d8                	jmp    c001f05b <Semaphore::release()+0x4d>

c001f083 <__static_initialization_and_destruction_0(int, int)>:
c001f083:	83 ec 0c             	sub    esp,0xc
c001f086:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f08b:	0f 85 88 00 00 00    	jne    c001f119 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f091:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f099:	75 7e                	jne    c001f119 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f09b:	83 ec 0c             	sub    esp,0xc
c001f09e:	68 c4 24 03 c0       	push   0xc00324c4
c001f0a3:	e8 24 a6 00 00       	call   c00296cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f0a8:	83 c4 10             	add    esp,0x10
c001f0ab:	83 ec 04             	sub    esp,0x4
c001f0ae:	68 90 de 02 c0       	push   0xc002de90
c001f0b3:	68 c4 24 03 c0       	push   0xc00324c4
c001f0b8:	68 80 96 02 c0       	push   0xc0029680
c001f0bd:	e8 1b 3c ff ff       	call   c0012cdd <__cxa_atexit>
c001f0c2:	83 c4 10             	add    esp,0x10
c001f0c5:	83 ec 0c             	sub    esp,0xc
c001f0c8:	68 b8 24 03 c0       	push   0xc00324b8
c001f0cd:	e8 fa a5 00 00       	call   c00296cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f0d2:	83 c4 10             	add    esp,0x10
c001f0d5:	83 ec 04             	sub    esp,0x4
c001f0d8:	68 90 de 02 c0       	push   0xc002de90
c001f0dd:	68 b8 24 03 c0       	push   0xc00324b8
c001f0e2:	68 80 96 02 c0       	push   0xc0029680
c001f0e7:	e8 f1 3b ff ff       	call   c0012cdd <__cxa_atexit>
c001f0ec:	83 c4 10             	add    esp,0x10
c001f0ef:	83 ec 0c             	sub    esp,0xc
c001f0f2:	68 ac 24 03 c0       	push   0xc00324ac
c001f0f7:	e8 d0 a5 00 00       	call   c00296cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f0fc:	83 c4 10             	add    esp,0x10
c001f0ff:	83 ec 04             	sub    esp,0x4
c001f102:	68 90 de 02 c0       	push   0xc002de90
c001f107:	68 ac 24 03 c0       	push   0xc00324ac
c001f10c:	68 80 96 02 c0       	push   0xc0029680
c001f111:	e8 c7 3b ff ff       	call   c0012cdd <__cxa_atexit>
c001f116:	83 c4 10             	add    esp,0x10
c001f119:	90                   	nop
c001f11a:	83 c4 0c             	add    esp,0xc
c001f11d:	c3                   	ret    

c001f11e <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	83 ec 08             	sub    esp,0x8
c001f124:	68 ff ff 00 00       	push   0xffff
c001f129:	6a 01                	push   0x1
c001f12b:	e8 53 ff ff ff       	call   c001f083 <__static_initialization_and_destruction_0(int, int)>
c001f130:	83 c4 10             	add    esp,0x10
c001f133:	83 c4 0c             	add    esp,0xc
c001f136:	c3                   	ret    

c001f137 <Vm::inbv(unsigned short)>:
c001f137:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f13b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f140:	75 06                	jne    c001f148 <Vm::inbv(unsigned short)+0x11>
c001f142:	a0 0c 25 03 c0       	mov    al,ds:0xc003250c
c001f147:	c3                   	ret    
c001f148:	ec                   	in     al,dx
c001f149:	c3                   	ret    

c001f14a <Vm::outbv(unsigned short, unsigned char)>:
c001f14a:	53                   	push   ebx
c001f14b:	83 ec 08             	sub    esp,0x8
c001f14e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f152:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f156:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f15b:	75 38                	jne    c001f195 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f15d:	0f b6 c3             	movzx  eax,bl
c001f160:	51                   	push   ecx
c001f161:	51                   	push   ecx
c001f162:	50                   	push   eax
c001f163:	68 c7 d0 02 c0       	push   0xc002d0c7
c001f168:	e8 d6 3c ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f16d:	8b 15 0c 25 03 c0    	mov    edx,DWORD PTR ds:0xc003250c
c001f173:	83 c4 10             	add    esp,0x10
c001f176:	8d 42 01             	lea    eax,[edx+0x1]
c001f179:	88 9a 20 25 03 c0    	mov    BYTE PTR [edx-0x3ffcdae0],bl
c001f17f:	a3 0c 25 03 c0       	mov    ds:0xc003250c,eax
c001f184:	83 f8 20             	cmp    eax,0x20
c001f187:	75 0f                	jne    c001f198 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f189:	c7 05 0c 25 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003250c,0x1f
c001f193:	eb 03                	jmp    c001f198 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f195:	88 d8                	mov    al,bl
c001f197:	ee                   	out    dx,al
c001f198:	83 c4 08             	add    esp,0x8
c001f19b:	5b                   	pop    ebx
c001f19c:	c3                   	ret    

c001f19d <Vm::realToLinear(unsigned short, unsigned short)>:
c001f19d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f1a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f1a7:	c1 e0 04             	shl    eax,0x4
c001f1aa:	01 d0                	add    eax,edx
c001f1ac:	c3                   	ret    

c001f1ad <Vm::getSegment(unsigned int)>:
c001f1ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b1:	c1 e8 10             	shr    eax,0x10
c001f1b4:	c3                   	ret    

c001f1b5 <Vm::getOffset(unsigned int)>:
c001f1b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b9:	c3                   	ret    

c001f1ba <Vm::mainloop2()>:
c001f1ba:	83 ec 18             	sub    esp,0x18
c001f1bd:	fa                   	cli    
c001f1be:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001f1c4:	6a 02                	push   0x2
c001f1c6:	c6 05 05 25 03 c0 01 	mov    BYTE PTR ds:0xc0032505,0x1
c001f1cd:	e8 7b f5 ff ff       	call   c001e74d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f1d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1d7:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f1db:	52                   	push   edx
c001f1dc:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f1e0:	52                   	push   edx
c001f1e1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f1e5:	52                   	push   edx
c001f1e6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f1ea:	50                   	push   eax
c001f1eb:	e8 0a 11 fe ff       	call   c00002fa <goToVM86>
c001f1f0:	83 c4 2c             	add    esp,0x2c
c001f1f3:	c3                   	ret    

c001f1f4 <Vm::mainVm8086Loop(void*)>:
c001f1f4:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001f1f9:	48                   	dec    eax
c001f1fa:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001f1ff:	75 01                	jne    c001f202 <Vm::mainVm8086Loop(void*)+0xe>
c001f201:	fb                   	sti    
c001f202:	eb b6                	jmp    c001f1ba <Vm::mainloop2()>

c001f204 <Vm::mainloop3(unsigned long)>:
c001f204:	83 ec 18             	sub    esp,0x18
c001f207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f20b:	fa                   	cli    
c001f20c:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001f212:	6a 02                	push   0x2
c001f214:	c6 05 04 25 03 c0 01 	mov    BYTE PTR ds:0xc0032504,0x1
c001f21b:	a3 00 25 03 c0       	mov    ds:0xc0032500,eax
c001f220:	e8 28 f5 ff ff       	call   c001e74d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f225:	83 c4 1c             	add    esp,0x1c
c001f228:	eb 90                	jmp    c001f1ba <Vm::mainloop2()>

c001f22a <Vm::initialise8086()>:
c001f22a:	83 ec 0c             	sub    esp,0xc
c001f22d:	68 80 00 00 00       	push   0x80
c001f232:	6a 00                	push   0x0
c001f234:	68 f4 f1 01 c0       	push   0xc001f1f4
c001f239:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c001f23f:	e8 14 f1 ff ff       	call   c001e358 <Process::createThread(void (*)(void*), void*, int)>
c001f244:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f24b:	a3 08 25 03 c0       	mov    ds:0xc0032508,eax
c001f250:	68 00 01 00 00       	push   0x100
c001f255:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c001f25a:	6a 00                	push   0x0
c001f25c:	6a 00                	push   0x0
c001f25e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f264:	e8 01 33 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f269:	83 c4 2c             	add    esp,0x2c
c001f26c:	c3                   	ret    

c001f26d <Vm::finish8086()>:
c001f26d:	53                   	push   ebx
c001f26e:	83 ec 08             	sub    esp,0x8
c001f271:	fa                   	cli    
c001f272:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001f278:	80 3d 04 25 03 c0 00 	cmp    BYTE PTR ds:0xc0032504,0x0
c001f27f:	75 15                	jne    c001f296 <Vm::finish8086()+0x29>
c001f281:	e8 16 f3 ff ff       	call   c001e59c <schedule()>
c001f286:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001f28b:	48                   	dec    eax
c001f28c:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001f291:	75 de                	jne    c001f271 <Vm::finish8086()+0x4>
c001f293:	fb                   	sti    
c001f294:	eb db                	jmp    c001f271 <Vm::finish8086()+0x4>
c001f296:	83 ec 0c             	sub    esp,0xc
c001f299:	8b 1d 00 25 03 c0    	mov    ebx,DWORD PTR ds:0xc0032500
c001f29f:	ff 35 08 25 03 c0    	push   DWORD PTR ds:0xc0032508
c001f2a5:	c6 05 04 25 03 c0 00 	mov    BYTE PTR ds:0xc0032504,0x0
c001f2ac:	e8 af f7 ff ff       	call   c001ea60 <unblockTask(ThreadControlBlock*)>
c001f2b1:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001f2b6:	83 c4 10             	add    esp,0x10
c001f2b9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f2bc:	89 15 a8 24 03 c0    	mov    DWORD PTR ds:0xc00324a8,edx
c001f2c2:	85 d2                	test   edx,edx
c001f2c4:	75 01                	jne    c001f2c7 <Vm::finish8086()+0x5a>
c001f2c6:	fb                   	sti    
c001f2c7:	89 d8                	mov    eax,ebx
c001f2c9:	83 c4 08             	add    esp,0x8
c001f2cc:	5b                   	pop    ebx
c001f2cd:	c3                   	ret    

c001f2ce <Vm::getOutput8086(unsigned char*)>:
c001f2ce:	57                   	push   edi
c001f2cf:	8b 0d 0c 25 03 c0    	mov    ecx,DWORD PTR ds:0xc003250c
c001f2d5:	56                   	push   esi
c001f2d6:	be 20 25 03 c0       	mov    esi,0xc0032520
c001f2db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f2df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f2e1:	a1 0c 25 03 c0       	mov    eax,ds:0xc003250c
c001f2e6:	5e                   	pop    esi
c001f2e7:	c7 05 0c 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003250c,0x0
c001f2f1:	5f                   	pop    edi
c001f2f2:	c3                   	ret    

c001f2f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f2f3:	55                   	push   ebp
c001f2f4:	57                   	push   edi
c001f2f5:	56                   	push   esi
c001f2f6:	53                   	push   ebx
c001f2f7:	83 ec 2c             	sub    esp,0x2c
c001f2fa:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f2fe:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f302:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f306:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f30a:	fa                   	cli    
c001f30b:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c001f311:	0f b6 35 05 25 03 c0 	movzx  esi,BYTE PTR ds:0xc0032505
c001f318:	89 f0                	mov    eax,esi
c001f31a:	84 c0                	test   al,al
c001f31c:	75 1d                	jne    c001f33b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f31e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f322:	e8 75 f2 ff ff       	call   c001e59c <schedule()>
c001f327:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001f32c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f330:	48                   	dec    eax
c001f331:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001f336:	75 d2                	jne    c001f30a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f338:	fb                   	sti    
c001f339:	eb cf                	jmp    c001f30a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f33b:	a1 08 25 03 c0       	mov    eax,ds:0xc0032508
c001f340:	c7 05 0c 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003250c,0x0
c001f34a:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f34e:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f352:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f356:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f35a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f35e:	50                   	push   eax
c001f35f:	6a 20                	push   0x20
c001f361:	6a 00                	push   0x0
c001f363:	68 20 25 03 c0       	push   0xc0032520
c001f368:	e8 ff 13 fe ff       	call   c000076c <memset>
c001f36d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f374:	e8 2f 05 ff ff       	call   c000f8a8 <malloc>
c001f379:	83 c4 0c             	add    esp,0xc
c001f37c:	89 c3                	mov    ebx,eax
c001f37e:	ff 35 d0 24 03 c0    	push   DWORD PTR ds:0xc00324d0
c001f384:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f388:	50                   	push   eax
c001f389:	e8 14 40 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c001f38e:	83 c4 10             	add    esp,0x10
c001f391:	85 db                	test   ebx,ebx
c001f393:	75 0a                	jne    c001f39f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f395:	83 ec 0c             	sub    esp,0xc
c001f398:	68 e3 d0 02 c0       	push   0xc002d0e3
c001f39d:	eb 3e                	jmp    c001f3dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f39f:	50                   	push   eax
c001f3a0:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f3a4:	50                   	push   eax
c001f3a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f3a9:	50                   	push   eax
c001f3aa:	53                   	push   ebx
c001f3ab:	e8 02 43 ff ff       	call   c00136b2 <File::stat(unsigned long long*, bool*)>
c001f3b0:	83 c4 10             	add    esp,0x10
c001f3b3:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f3b8:	74 0a                	je     c001f3c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f3ba:	83 ec 0c             	sub    esp,0xc
c001f3bd:	68 f7 d0 02 c0       	push   0xc002d0f7
c001f3c2:	eb 19                	jmp    c001f3dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f3c4:	51                   	push   ecx
c001f3c5:	51                   	push   ecx
c001f3c6:	6a 01                	push   0x1
c001f3c8:	53                   	push   ebx
c001f3c9:	e8 38 40 ff ff       	call   c0013406 <File::open(FileOpenMode)>
c001f3ce:	83 c4 10             	add    esp,0x10
c001f3d1:	85 c0                	test   eax,eax
c001f3d3:	74 24                	je     c001f3f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f3d5:	83 ec 0c             	sub    esp,0xc
c001f3d8:	68 10 d1 02 c0       	push   0xc002d110
c001f3dd:	e8 2b b4 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001f3e2:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	48                   	dec    eax
c001f3eb:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001f3f0:	85 c0                	test   eax,eax
c001f3f2:	75 01                	jne    c001f3f5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f3f4:	fb                   	sti    
c001f3f5:	31 f6                	xor    esi,esi
c001f3f7:	eb 58                	jmp    c001f451 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f3f9:	0f b7 ed             	movzx  ebp,bp
c001f3fc:	50                   	push   eax
c001f3fd:	0f b7 ff             	movzx  edi,di
c001f400:	50                   	push   eax
c001f401:	55                   	push   ebp
c001f402:	57                   	push   edi
c001f403:	e8 95 fd ff ff       	call   c001f19d <Vm::realToLinear(unsigned short, unsigned short)>
c001f408:	5a                   	pop    edx
c001f409:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f40b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f40f:	51                   	push   ecx
c001f410:	50                   	push   eax
c001f411:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f415:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f419:	53                   	push   ebx
c001f41a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f41d:	83 c4 14             	add    esp,0x14
c001f420:	53                   	push   ebx
c001f421:	e8 3e 40 ff ff       	call   c0013464 <File::close()>
c001f426:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c001f42b:	83 c4 10             	add    esp,0x10
c001f42e:	48                   	dec    eax
c001f42f:	c6 05 05 25 03 c0 00 	mov    BYTE PTR ds:0xc0032505,0x0
c001f436:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c001f43b:	85 c0                	test   eax,eax
c001f43d:	75 01                	jne    c001f440 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f43f:	fb                   	sti    
c001f440:	83 ec 0c             	sub    esp,0xc
c001f443:	ff 35 08 25 03 c0    	push   DWORD PTR ds:0xc0032508
c001f449:	e8 12 f6 ff ff       	call   c001ea60 <unblockTask(ThreadControlBlock*)>
c001f44e:	83 c4 10             	add    esp,0x10
c001f451:	83 c4 2c             	add    esp,0x2c
c001f454:	89 f0                	mov    eax,esi
c001f456:	5b                   	pop    ebx
c001f457:	5e                   	pop    esi
c001f458:	5f                   	pop    edi
c001f459:	5d                   	pop    ebp
c001f45a:	c3                   	ret    

c001f45b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f45b:	57                   	push   edi
c001f45c:	56                   	push   esi
c001f45d:	53                   	push   ebx
c001f45e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f466:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f46a:	83 e8 06             	sub    eax,0x6
c001f46d:	0f b7 c0             	movzx  eax,ax
c001f470:	50                   	push   eax
c001f471:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f476:	50                   	push   eax
c001f477:	e8 21 fd ff ff       	call   c001f19d <Vm::realToLinear(unsigned short, unsigned short)>
c001f47c:	5a                   	pop    edx
c001f47d:	5e                   	pop    esi
c001f47e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f481:	8d 56 fa             	lea    edx,[esi-0x6]
c001f484:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f48a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f48d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f490:	83 c2 02             	add    edx,0x2
c001f493:	66 89 10             	mov    WORD PTR [eax],dx
c001f496:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f499:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f49d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f4a0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f4a4:	89 d6                	mov    esi,edx
c001f4a6:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f4ac:	66 81 e6 ff fd       	and    si,0xfdff
c001f4b1:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f4b5:	74 07                	je     c001f4be <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f4b7:	89 d6                	mov    esi,edx
c001f4b9:	66 81 ce 00 02       	or     si,0x200
c001f4be:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f4c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f4c7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f4cb:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f4d3:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f4d6:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f4de:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f4e1:	5b                   	pop    ebx
c001f4e2:	5e                   	pop    esi
c001f4e3:	5f                   	pop    edi
c001f4e4:	c3                   	ret    

c001f4e5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f4e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f4ea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f4ef:	c1 e0 04             	shl    eax,0x4
c001f4f2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f4f5:	c3                   	ret    

c001f4f6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f4f6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f4fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f500:	c1 e0 04             	shl    eax,0x4
c001f503:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f507:	c3                   	ret    

c001f508 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f508:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f50d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f512:	c1 e0 04             	shl    eax,0x4
c001f515:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f518:	c3                   	ret    

c001f519 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f519:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f51e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f523:	c1 e0 04             	shl    eax,0x4
c001f526:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f52a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f52d:	c3                   	ret    

c001f52e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f52e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f533:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f538:	c1 e0 04             	shl    eax,0x4
c001f53b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f53f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f543:	c3                   	ret    

c001f544 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f544:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f549:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f54e:	c1 e0 04             	shl    eax,0x4
c001f551:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f555:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f558:	c3                   	ret    

c001f559 <Vm::faultHandler(regs*)>:
c001f559:	55                   	push   ebp
c001f55a:	57                   	push   edi
c001f55b:	56                   	push   esi
c001f55c:	53                   	push   ebx
c001f55d:	83 ec 1c             	sub    esp,0x1c
c001f560:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f564:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f567:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f56a:	0f b7 c1             	movzx  eax,cx
c001f56d:	50                   	push   eax
c001f56e:	0f b7 c3             	movzx  eax,bx
c001f571:	c1 e3 04             	shl    ebx,0x4
c001f574:	50                   	push   eax
c001f575:	e8 23 fc ff ff       	call   c001f19d <Vm::realToLinear(unsigned short, unsigned short)>
c001f57a:	5a                   	pop    edx
c001f57b:	89 c5                	mov    ebp,eax
c001f57d:	5e                   	pop    esi
c001f57e:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f582:	50                   	push   eax
c001f583:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f587:	50                   	push   eax
c001f588:	e8 10 fc ff ff       	call   c001f19d <Vm::realToLinear(unsigned short, unsigned short)>
c001f58d:	01 cb                	add    ebx,ecx
c001f58f:	89 c6                	mov    esi,eax
c001f591:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f595:	50                   	push   eax
c001f596:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f59a:	50                   	push   eax
c001f59b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f59f:	50                   	push   eax
c001f5a0:	55                   	push   ebp
c001f5a1:	53                   	push   ebx
c001f5a2:	b3 06                	mov    bl,0x6
c001f5a4:	68 29 d1 02 c0       	push   0xc002d129
c001f5a9:	e8 95 38 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f5ae:	83 c4 20             	add    esp,0x20
c001f5b1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f5b6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f5bb:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f5bf:	3c 9d                	cmp    al,0x9d
c001f5c1:	0f 84 d7 02 00 00    	je     c001f89e <Vm::faultHandler(regs*)+0x345>
c001f5c7:	0f 87 a3 00 00 00    	ja     c001f670 <Vm::faultHandler(regs*)+0x117>
c001f5cd:	3c 66                	cmp    al,0x66
c001f5cf:	0f 84 15 02 00 00    	je     c001f7ea <Vm::faultHandler(regs*)+0x291>
c001f5d5:	77 5f                	ja     c001f636 <Vm::faultHandler(regs*)+0xdd>
c001f5d7:	3c 36                	cmp    al,0x36
c001f5d9:	0f 84 f1 01 00 00    	je     c001f7d0 <Vm::faultHandler(regs*)+0x277>
c001f5df:	77 28                	ja     c001f609 <Vm::faultHandler(regs*)+0xb0>
c001f5e1:	3c 26                	cmp    al,0x26
c001f5e3:	0f 84 99 01 00 00    	je     c001f782 <Vm::faultHandler(regs*)+0x229>
c001f5e9:	3c 2e                	cmp    al,0x2e
c001f5eb:	0f 85 3b 07 00 00    	jne    c001fd2c <Vm::faultHandler(regs*)+0x7d3>
c001f5f1:	83 ec 0c             	sub    esp,0xc
c001f5f4:	31 db                	xor    ebx,ebx
c001f5f6:	68 3e d1 02 c0       	push   0xc002d13e
c001f5fb:	e8 43 38 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f600:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f603:	83 c4 10             	add    esp,0x10
c001f606:	45                   	inc    ebp
c001f607:	eb b2                	jmp    c001f5bb <Vm::faultHandler(regs*)+0x62>
c001f609:	3c 64                	cmp    al,0x64
c001f60b:	0f 84 8b 01 00 00    	je     c001f79c <Vm::faultHandler(regs*)+0x243>
c001f611:	0f 87 9f 01 00 00    	ja     c001f7b6 <Vm::faultHandler(regs*)+0x25d>
c001f617:	3c 3e                	cmp    al,0x3e
c001f619:	0f 85 0d 07 00 00    	jne    c001fd2c <Vm::faultHandler(regs*)+0x7d3>
c001f61f:	83 ec 0c             	sub    esp,0xc
c001f622:	b3 01                	mov    bl,0x1
c001f624:	68 42 d1 02 c0       	push   0xc002d142
c001f629:	e8 15 38 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f62e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f631:	83 c4 10             	add    esp,0x10
c001f634:	eb d0                	jmp    c001f606 <Vm::faultHandler(regs*)+0xad>
c001f636:	3c 6d                	cmp    al,0x6d
c001f638:	0f 84 af 03 00 00    	je     c001f9ed <Vm::faultHandler(regs*)+0x494>
c001f63e:	77 15                	ja     c001f655 <Vm::faultHandler(regs*)+0xfc>
c001f640:	3c 67                	cmp    al,0x67
c001f642:	0f 84 bf 01 00 00    	je     c001f807 <Vm::faultHandler(regs*)+0x2ae>
c001f648:	3c 6c                	cmp    al,0x6c
c001f64a:	0f 84 3f 03 00 00    	je     c001f98f <Vm::faultHandler(regs*)+0x436>
c001f650:	e9 d7 06 00 00       	jmp    c001fd2c <Vm::faultHandler(regs*)+0x7d3>
c001f655:	3c 6f                	cmp    al,0x6f
c001f657:	0f 84 a4 04 00 00    	je     c001fb01 <Vm::faultHandler(regs*)+0x5a8>
c001f65d:	0f 82 11 04 00 00    	jb     c001fa74 <Vm::faultHandler(regs*)+0x51b>
c001f663:	3c 9c                	cmp    al,0x9c
c001f665:	0f 84 ba 01 00 00    	je     c001f825 <Vm::faultHandler(regs*)+0x2cc>
c001f66b:	e9 bc 06 00 00       	jmp    c001fd2c <Vm::faultHandler(regs*)+0x7d3>
c001f670:	3c ec                	cmp    al,0xec
c001f672:	0f 84 24 06 00 00    	je     c001fc9c <Vm::faultHandler(regs*)+0x743>
c001f678:	0f 87 93 00 00 00    	ja     c001f711 <Vm::faultHandler(regs*)+0x1b8>
c001f67e:	3c e4                	cmp    al,0xe4
c001f680:	0f 84 5c 05 00 00    	je     c001fbe2 <Vm::faultHandler(regs*)+0x689>
c001f686:	77 6a                	ja     c001f6f2 <Vm::faultHandler(regs*)+0x199>
c001f688:	3c cd                	cmp    al,0xcd
c001f68a:	0f 84 7e 02 00 00    	je     c001f90e <Vm::faultHandler(regs*)+0x3b5>
c001f690:	3c cf                	cmp    al,0xcf
c001f692:	0f 85 94 06 00 00    	jne    c001fd2c <Vm::faultHandler(regs*)+0x7d3>
c001f698:	83 ec 0c             	sub    esp,0xc
c001f69b:	68 86 d1 02 c0       	push   0xc002d186
c001f6a0:	e8 9e 37 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f6a5:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f6a8:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f6ab:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f6af:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f6b2:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f6b6:	0d 00 02 02 00       	or     eax,0x20200
c001f6bb:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f6be:	56                   	push   esi
c001f6bf:	53                   	push   ebx
c001f6c0:	52                   	push   edx
c001f6c1:	68 8c d1 02 c0       	push   0xc002d18c
c001f6c6:	e8 78 37 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f6cb:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f6cf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f6d5:	66 c1 e8 09          	shr    ax,0x9
c001f6d9:	83 e0 01             	and    eax,0x1
c001f6dc:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f6df:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f6e2:	83 c0 06             	add    eax,0x6
c001f6e5:	25 ff ff 00 00       	and    eax,0xffff
c001f6ea:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f6ed:	e9 95 02 00 00       	jmp    c001f987 <Vm::faultHandler(regs*)+0x42e>
c001f6f2:	3c e6                	cmp    al,0xe6
c001f6f4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f6f8:	0f 84 4e 05 00 00    	je     c001fc4c <Vm::faultHandler(regs*)+0x6f3>
c001f6fe:	0f 82 0a 05 00 00    	jb     c001fc0e <Vm::faultHandler(regs*)+0x6b5>
c001f704:	3c e7                	cmp    al,0xe7
c001f706:	0f 84 69 05 00 00    	je     c001fc75 <Vm::faultHandler(regs*)+0x71c>
c001f70c:	e9 1b 06 00 00       	jmp    c001fd2c <Vm::faultHandler(regs*)+0x7d3>
c001f711:	3c ef                	cmp    al,0xef
c001f713:	0f 84 e6 05 00 00    	je     c001fcff <Vm::faultHandler(regs*)+0x7a6>
c001f719:	77 37                	ja     c001f752 <Vm::faultHandler(regs*)+0x1f9>
c001f71b:	3c ed                	cmp    al,0xed
c001f71d:	0f 84 a3 05 00 00    	je     c001fcc6 <Vm::faultHandler(regs*)+0x76d>
c001f723:	3c ee                	cmp    al,0xee
c001f725:	0f 85 01 06 00 00    	jne    c001fd2c <Vm::faultHandler(regs*)+0x7d3>
c001f72b:	52                   	push   edx
c001f72c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f72f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f732:	68 27 d2 02 c0       	push   0xc002d227
c001f737:	e8 07 37 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f73c:	59                   	pop    ecx
c001f73d:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f741:	5b                   	pop    ebx
c001f742:	50                   	push   eax
c001f743:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f747:	50                   	push   eax
c001f748:	e8 fd f9 ff ff       	call   c001f14a <Vm::outbv(unsigned short, unsigned char)>
c001f74d:	e9 a5 05 00 00       	jmp    c001fcf7 <Vm::faultHandler(regs*)+0x79e>
c001f752:	3c fa                	cmp    al,0xfa
c001f754:	0f 84 f7 01 00 00    	je     c001f951 <Vm::faultHandler(regs*)+0x3f8>
c001f75a:	3c fb                	cmp    al,0xfb
c001f75c:	0f 84 0a 02 00 00    	je     c001f96c <Vm::faultHandler(regs*)+0x413>
c001f762:	3c f3                	cmp    al,0xf3
c001f764:	0f 85 c2 05 00 00    	jne    c001fd2c <Vm::faultHandler(regs*)+0x7d3>
c001f76a:	83 ec 0c             	sub    esp,0xc
c001f76d:	68 5f d1 02 c0       	push   0xc002d15f
c001f772:	e8 cc 36 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f777:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f77a:	83 c4 10             	add    esp,0x10
c001f77d:	e9 84 fe ff ff       	jmp    c001f606 <Vm::faultHandler(regs*)+0xad>
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	b3 02                	mov    bl,0x2
c001f787:	68 3a d1 02 c0       	push   0xc002d13a
c001f78c:	e8 b2 36 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f791:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f794:	83 c4 10             	add    esp,0x10
c001f797:	e9 6a fe ff ff       	jmp    c001f606 <Vm::faultHandler(regs*)+0xad>
c001f79c:	83 ec 0c             	sub    esp,0xc
c001f79f:	b3 03                	mov    bl,0x3
c001f7a1:	68 46 d1 02 c0       	push   0xc002d146
c001f7a6:	e8 98 36 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f7ab:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7ae:	83 c4 10             	add    esp,0x10
c001f7b1:	e9 50 fe ff ff       	jmp    c001f606 <Vm::faultHandler(regs*)+0xad>
c001f7b6:	83 ec 0c             	sub    esp,0xc
c001f7b9:	b3 04                	mov    bl,0x4
c001f7bb:	68 4a d1 02 c0       	push   0xc002d14a
c001f7c0:	e8 7e 36 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f7c5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7c8:	83 c4 10             	add    esp,0x10
c001f7cb:	e9 36 fe ff ff       	jmp    c001f606 <Vm::faultHandler(regs*)+0xad>
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	b3 05                	mov    bl,0x5
c001f7d5:	68 4e d1 02 c0       	push   0xc002d14e
c001f7da:	e8 64 36 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f7df:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7e2:	83 c4 10             	add    esp,0x10
c001f7e5:	e9 1c fe ff ff       	jmp    c001f606 <Vm::faultHandler(regs*)+0xad>
c001f7ea:	83 ec 0c             	sub    esp,0xc
c001f7ed:	68 52 d1 02 c0       	push   0xc002d152
c001f7f2:	e8 4c 36 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f7f7:	83 c4 10             	add    esp,0x10
c001f7fa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7fd:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f802:	e9 ff fd ff ff       	jmp    c001f606 <Vm::faultHandler(regs*)+0xad>
c001f807:	50                   	push   eax
c001f808:	50                   	push   eax
c001f809:	6a 01                	push   0x1
c001f80b:	68 57 d1 02 c0       	push   0xc002d157
c001f810:	e8 2e 36 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f815:	83 c4 10             	add    esp,0x10
c001f818:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f81b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f820:	e9 e1 fd ff ff       	jmp    c001f606 <Vm::faultHandler(regs*)+0xad>
c001f825:	83 ec 0c             	sub    esp,0xc
c001f828:	68 65 d1 02 c0       	push   0xc002d165
c001f82d:	e8 11 36 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f832:	83 c4 10             	add    esp,0x10
c001f835:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f838:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f83d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f840:	74 2f                	je     c001f871 <Vm::faultHandler(regs*)+0x318>
c001f842:	83 ea 04             	sub    edx,0x4
c001f845:	25 ff 0d 00 00       	and    eax,0xdff
c001f84a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f850:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f853:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f856:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f85c:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f860:	0f 84 bf 04 00 00    	je     c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001f866:	80 cc 02             	or     ah,0x2
c001f869:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f86c:	e9 b4 04 00 00       	jmp    c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001f871:	83 ea 02             	sub    edx,0x2
c001f874:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f87a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f87d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f881:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f887:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f88b:	74 05                	je     c001f892 <Vm::faultHandler(regs*)+0x339>
c001f88d:	80 cc 02             	or     ah,0x2
c001f890:	eb 03                	jmp    c001f895 <Vm::faultHandler(regs*)+0x33c>
c001f892:	80 e4 fd             	and    ah,0xfd
c001f895:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f899:	e9 87 04 00 00       	jmp    c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001f89e:	83 ec 0c             	sub    esp,0xc
c001f8a1:	68 6c d1 02 c0       	push   0xc002d16c
c001f8a6:	e8 98 35 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f8ab:	83 c4 10             	add    esp,0x10
c001f8ae:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f8b3:	74 28                	je     c001f8dd <Vm::faultHandler(regs*)+0x384>
c001f8b5:	8b 06                	mov    eax,DWORD PTR [esi]
c001f8b7:	25 ff 0d 00 00       	and    eax,0xdff
c001f8bc:	0d 00 02 02 00       	or     eax,0x20200
c001f8c1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f8c4:	8b 06                	mov    eax,DWORD PTR [esi]
c001f8c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f8cc:	c1 e8 09             	shr    eax,0x9
c001f8cf:	83 e0 01             	and    eax,0x1
c001f8d2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f8d5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f8d8:	83 c0 04             	add    eax,0x4
c001f8db:	eb 24                	jmp    c001f901 <Vm::faultHandler(regs*)+0x3a8>
c001f8dd:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f8e0:	0d 00 02 02 00       	or     eax,0x20200
c001f8e5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f8e8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f8eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f8f1:	66 c1 e8 09          	shr    ax,0x9
c001f8f5:	83 e0 01             	and    eax,0x1
c001f8f8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f8fb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f8fe:	83 c0 02             	add    eax,0x2
c001f901:	25 ff ff 00 00       	and    eax,0xffff
c001f906:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f909:	e9 17 04 00 00       	jmp    c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001f90e:	53                   	push   ebx
c001f90f:	53                   	push   ebx
c001f910:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f914:	50                   	push   eax
c001f915:	68 72 d1 02 c0       	push   0xc002d172
c001f91a:	e8 24 35 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f91f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f923:	83 c4 10             	add    esp,0x10
c001f926:	3c ee                	cmp    al,0xee
c001f928:	75 10                	jne    c001f93a <Vm::faultHandler(regs*)+0x3e1>
c001f92a:	83 ec 0c             	sub    esp,0xc
c001f92d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f930:	e8 cf f8 ff ff       	call   c001f204 <Vm::mainloop3(unsigned long)>
c001f935:	e9 c0 03 00 00       	jmp    c001fcfa <Vm::faultHandler(regs*)+0x7a1>
c001f93a:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f93e:	83 ec 0c             	sub    esp,0xc
c001f941:	53                   	push   ebx
c001f942:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f946:	53                   	push   ebx
c001f947:	55                   	push   ebp
c001f948:	50                   	push   eax
c001f949:	57                   	push   edi
c001f94a:	e8 0c fb ff ff       	call   c001f45b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f94f:	eb 36                	jmp    c001f987 <Vm::faultHandler(regs*)+0x42e>
c001f951:	83 ec 0c             	sub    esp,0xc
c001f954:	68 7c d1 02 c0       	push   0xc002d17c
c001f959:	e8 e5 34 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f95e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f963:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f967:	e9 8b 03 00 00       	jmp    c001fcf7 <Vm::faultHandler(regs*)+0x79e>
c001f96c:	83 ec 0c             	sub    esp,0xc
c001f96f:	68 81 d1 02 c0       	push   0xc002d181
c001f974:	e8 ca 34 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f979:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f97e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f982:	e9 70 03 00 00       	jmp    c001fcf7 <Vm::faultHandler(regs*)+0x79e>
c001f987:	83 c4 20             	add    esp,0x20
c001f98a:	e9 99 03 00 00       	jmp    c001fd28 <Vm::faultHandler(regs*)+0x7cf>
c001f98f:	83 ec 0c             	sub    esp,0xc
c001f992:	68 bf d1 02 c0       	push   0xc002d1bf
c001f997:	e8 a7 34 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f99c:	83 c4 10             	add    esp,0x10
c001f99f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f9a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f9a7:	74 0d                	je     c001f9b6 <Vm::faultHandler(regs*)+0x45d>
c001f9a9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f9b0:	0f 87 9e 01 00 00    	ja     c001fb54 <Vm::faultHandler(regs*)+0x5fb>
c001f9b6:	83 ec 0c             	sub    esp,0xc
c001f9b9:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f9bd:	0f b7 db             	movzx  ebx,bx
c001f9c0:	50                   	push   eax
c001f9c1:	e8 71 f7 ff ff       	call   c001f137 <Vm::inbv(unsigned short)>
c001f9c6:	83 c4 0c             	add    esp,0xc
c001f9c9:	0f b6 c0             	movzx  eax,al
c001f9cc:	50                   	push   eax
c001f9cd:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f9d1:	50                   	push   eax
c001f9d2:	53                   	push   ebx
c001f9d3:	e8 41 fb ff ff       	call   c001f519 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f9d8:	83 c4 10             	add    esp,0x10
c001f9db:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f9de:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9e2:	74 03                	je     c001f9e7 <Vm::faultHandler(regs*)+0x48e>
c001f9e4:	48                   	dec    eax
c001f9e5:	eb 01                	jmp    c001f9e8 <Vm::faultHandler(regs*)+0x48f>
c001f9e7:	40                   	inc    eax
c001f9e8:	0f b7 c0             	movzx  eax,ax
c001f9eb:	eb 7f                	jmp    c001fa6c <Vm::faultHandler(regs*)+0x513>
c001f9ed:	83 ec 0c             	sub    esp,0xc
c001f9f0:	68 f1 d1 02 c0       	push   0xc002d1f1
c001f9f5:	e8 49 34 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001f9fa:	83 c4 10             	add    esp,0x10
c001f9fd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fa00:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa05:	74 0d                	je     c001fa14 <Vm::faultHandler(regs*)+0x4bb>
c001fa07:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fa0e:	0f 87 40 01 00 00    	ja     c001fb54 <Vm::faultHandler(regs*)+0x5fb>
c001fa14:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fa17:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fa1b:	0f b7 db             	movzx  ebx,bx
c001fa1e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa23:	74 20                	je     c001fa45 <Vm::faultHandler(regs*)+0x4ec>
c001fa25:	ed                   	in     eax,dx
c001fa26:	51                   	push   ecx
c001fa27:	50                   	push   eax
c001fa28:	56                   	push   esi
c001fa29:	53                   	push   ebx
c001fa2a:	e8 15 fb ff ff       	call   c001f544 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fa2f:	83 c4 10             	add    esp,0x10
c001fa32:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fa35:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fa39:	74 05                	je     c001fa40 <Vm::faultHandler(regs*)+0x4e7>
c001fa3b:	83 e8 04             	sub    eax,0x4
c001fa3e:	eb 27                	jmp    c001fa67 <Vm::faultHandler(regs*)+0x50e>
c001fa40:	83 c0 04             	add    eax,0x4
c001fa43:	eb 22                	jmp    c001fa67 <Vm::faultHandler(regs*)+0x50e>
c001fa45:	66 ed                	in     ax,dx
c001fa47:	0f b7 c0             	movzx  eax,ax
c001fa4a:	52                   	push   edx
c001fa4b:	50                   	push   eax
c001fa4c:	56                   	push   esi
c001fa4d:	53                   	push   ebx
c001fa4e:	e8 db fa ff ff       	call   c001f52e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001fa53:	83 c4 10             	add    esp,0x10
c001fa56:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fa59:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fa5d:	74 05                	je     c001fa64 <Vm::faultHandler(regs*)+0x50b>
c001fa5f:	83 e8 02             	sub    eax,0x2
c001fa62:	eb 03                	jmp    c001fa67 <Vm::faultHandler(regs*)+0x50e>
c001fa64:	83 c0 02             	add    eax,0x2
c001fa67:	25 ff ff 00 00       	and    eax,0xffff
c001fa6c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fa6f:	e9 b1 02 00 00       	jmp    c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001fa74:	83 ec 0c             	sub    esp,0xc
c001fa77:	4b                   	dec    ebx
c001fa78:	68 f7 d1 02 c0       	push   0xc002d1f7
c001fa7d:	e8 c1 33 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fa82:	83 c4 10             	add    esp,0x10
c001fa85:	80 fb 05             	cmp    bl,0x5
c001fa88:	77 0a                	ja     c001fa94 <Vm::faultHandler(regs*)+0x53b>
c001fa8a:	0f b6 db             	movzx  ebx,bl
c001fa8d:	ff 24 9d 68 d2 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2d98]
c001fa94:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa98:	eb 1b                	jmp    c001fab5 <Vm::faultHandler(regs*)+0x55c>
c001fa9a:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa9e:	eb 15                	jmp    c001fab5 <Vm::faultHandler(regs*)+0x55c>
c001faa0:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001faa4:	eb 0f                	jmp    c001fab5 <Vm::faultHandler(regs*)+0x55c>
c001faa6:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001faaa:	eb 09                	jmp    c001fab5 <Vm::faultHandler(regs*)+0x55c>
c001faac:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001faaf:	eb 04                	jmp    c001fab5 <Vm::faultHandler(regs*)+0x55c>
c001fab1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fab5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001faba:	74 0d                	je     c001fac9 <Vm::faultHandler(regs*)+0x570>
c001fabc:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fac3:	0f 87 8b 00 00 00    	ja     c001fb54 <Vm::faultHandler(regs*)+0x5fb>
c001fac9:	53                   	push   ebx
c001faca:	53                   	push   ebx
c001facb:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001facf:	52                   	push   edx
c001fad0:	50                   	push   eax
c001fad1:	e8 0f fa ff ff       	call   c001f4e5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fad6:	5e                   	pop    esi
c001fad7:	0f b6 c0             	movzx  eax,al
c001fada:	5d                   	pop    ebp
c001fadb:	50                   	push   eax
c001fadc:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fae0:	50                   	push   eax
c001fae1:	e8 64 f6 ff ff       	call   c001f14a <Vm::outbv(unsigned short, unsigned char)>
c001fae6:	83 c4 10             	add    esp,0x10
c001fae9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001faec:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001faf0:	74 03                	je     c001faf5 <Vm::faultHandler(regs*)+0x59c>
c001faf2:	48                   	dec    eax
c001faf3:	eb 01                	jmp    c001faf6 <Vm::faultHandler(regs*)+0x59d>
c001faf5:	40                   	inc    eax
c001faf6:	0f b7 c0             	movzx  eax,ax
c001faf9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fafc:	e9 24 02 00 00       	jmp    c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	4b                   	dec    ebx
c001fb05:	68 f7 d1 02 c0       	push   0xc002d1f7
c001fb0a:	e8 34 33 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fb0f:	83 c4 10             	add    esp,0x10
c001fb12:	80 fb 05             	cmp    bl,0x5
c001fb15:	77 0a                	ja     c001fb21 <Vm::faultHandler(regs*)+0x5c8>
c001fb17:	0f b6 db             	movzx  ebx,bl
c001fb1a:	ff 24 9d 80 d2 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2d80]
c001fb21:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fb25:	eb 1b                	jmp    c001fb42 <Vm::faultHandler(regs*)+0x5e9>
c001fb27:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fb2b:	eb 15                	jmp    c001fb42 <Vm::faultHandler(regs*)+0x5e9>
c001fb2d:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fb31:	eb 0f                	jmp    c001fb42 <Vm::faultHandler(regs*)+0x5e9>
c001fb33:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fb37:	eb 09                	jmp    c001fb42 <Vm::faultHandler(regs*)+0x5e9>
c001fb39:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fb3c:	eb 04                	jmp    c001fb42 <Vm::faultHandler(regs*)+0x5e9>
c001fb3e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fb42:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fb45:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb4a:	74 39                	je     c001fb85 <Vm::faultHandler(regs*)+0x62c>
c001fb4c:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fb52:	76 31                	jbe    c001fb85 <Vm::faultHandler(regs*)+0x62c>
c001fb54:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fb58:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fb5c:	51                   	push   ecx
c001fb5d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fb61:	51                   	push   ecx
c001fb62:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fb66:	51                   	push   ecx
c001fb67:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fb6b:	51                   	push   ecx
c001fb6c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb70:	52                   	push   edx
c001fb71:	50                   	push   eax
c001fb72:	50                   	push   eax
c001fb73:	68 c4 d1 02 c0       	push   0xc002d1c4
c001fb78:	e8 c6 32 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fb7d:	83 c4 20             	add    esp,0x20
c001fb80:	e9 fb 01 00 00       	jmp    c001fd80 <Vm::faultHandler(regs*)+0x827>
c001fb85:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fb88:	0f b7 d3             	movzx  edx,bx
c001fb8b:	81 e6 00 04 00 00    	and    esi,0x400
c001fb91:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fb94:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb99:	74 1d                	je     c001fbb8 <Vm::faultHandler(regs*)+0x65f>
c001fb9b:	51                   	push   ecx
c001fb9c:	51                   	push   ecx
c001fb9d:	52                   	push   edx
c001fb9e:	50                   	push   eax
c001fb9f:	e8 64 f9 ff ff       	call   c001f508 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fba4:	83 c4 10             	add    esp,0x10
c001fba7:	89 ea                	mov    edx,ebp
c001fba9:	ef                   	out    dx,eax
c001fbaa:	85 f6                	test   esi,esi
c001fbac:	74 05                	je     c001fbb3 <Vm::faultHandler(regs*)+0x65a>
c001fbae:	83 eb 04             	sub    ebx,0x4
c001fbb1:	eb 21                	jmp    c001fbd4 <Vm::faultHandler(regs*)+0x67b>
c001fbb3:	83 c3 04             	add    ebx,0x4
c001fbb6:	eb 1c                	jmp    c001fbd4 <Vm::faultHandler(regs*)+0x67b>
c001fbb8:	51                   	push   ecx
c001fbb9:	51                   	push   ecx
c001fbba:	52                   	push   edx
c001fbbb:	50                   	push   eax
c001fbbc:	e8 35 f9 ff ff       	call   c001f4f6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fbc1:	83 c4 10             	add    esp,0x10
c001fbc4:	89 ea                	mov    edx,ebp
c001fbc6:	66 ef                	out    dx,ax
c001fbc8:	85 f6                	test   esi,esi
c001fbca:	74 05                	je     c001fbd1 <Vm::faultHandler(regs*)+0x678>
c001fbcc:	83 eb 02             	sub    ebx,0x2
c001fbcf:	eb 03                	jmp    c001fbd4 <Vm::faultHandler(regs*)+0x67b>
c001fbd1:	83 c3 02             	add    ebx,0x2
c001fbd4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fbda:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fbdd:	e9 43 01 00 00       	jmp    c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001fbe2:	53                   	push   ebx
c001fbe3:	53                   	push   ebx
c001fbe4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbe8:	50                   	push   eax
c001fbe9:	68 fd d1 02 c0       	push   0xc002d1fd
c001fbee:	e8 50 32 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fbf3:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fbfa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbfe:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc01:	e8 31 f5 ff ff       	call   c001f137 <Vm::inbv(unsigned short)>
c001fc06:	0f b6 c0             	movzx  eax,al
c001fc09:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fc0c:	eb 5e                	jmp    c001fc6c <Vm::faultHandler(regs*)+0x713>
c001fc0e:	51                   	push   ecx
c001fc0f:	51                   	push   ecx
c001fc10:	53                   	push   ebx
c001fc11:	68 03 d2 02 c0       	push   0xc002d203
c001fc16:	e8 28 32 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fc1b:	83 c4 10             	add    esp,0x10
c001fc1e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc23:	74 07                	je     c001fc2c <Vm::faultHandler(regs*)+0x6d3>
c001fc25:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc29:	ed                   	in     eax,dx
c001fc2a:	eb 14                	jmp    c001fc40 <Vm::faultHandler(regs*)+0x6e7>
c001fc2c:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fc2f:	66 31 db             	xor    bx,bx
c001fc32:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fc35:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc39:	66 ed                	in     ax,dx
c001fc3b:	0f b7 c0             	movzx  eax,ax
c001fc3e:	09 d8                	or     eax,ebx
c001fc40:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fc43:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fc47:	e9 dc 00 00 00       	jmp    c001fd28 <Vm::faultHandler(regs*)+0x7cf>
c001fc4c:	50                   	push   eax
c001fc4d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fc50:	53                   	push   ebx
c001fc51:	68 09 d2 02 c0       	push   0xc002d209
c001fc56:	e8 e8 31 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fc5b:	58                   	pop    eax
c001fc5c:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fc60:	5a                   	pop    edx
c001fc61:	50                   	push   eax
c001fc62:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc66:	50                   	push   eax
c001fc67:	e8 de f4 ff ff       	call   c001f14a <Vm::outbv(unsigned short, unsigned char)>
c001fc6c:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fc70:	e9 85 00 00 00       	jmp    c001fcfa <Vm::faultHandler(regs*)+0x7a1>
c001fc75:	50                   	push   eax
c001fc76:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fc79:	53                   	push   ebx
c001fc7a:	68 12 d2 02 c0       	push   0xc002d212
c001fc7f:	e8 bf 31 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fc84:	83 c4 10             	add    esp,0x10
c001fc87:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc8b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc90:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc93:	74 03                	je     c001fc98 <Vm::faultHandler(regs*)+0x73f>
c001fc95:	ef                   	out    dx,eax
c001fc96:	eb ab                	jmp    c001fc43 <Vm::faultHandler(regs*)+0x6ea>
c001fc98:	66 ef                	out    dx,ax
c001fc9a:	eb a7                	jmp    c001fc43 <Vm::faultHandler(regs*)+0x6ea>
c001fc9c:	55                   	push   ebp
c001fc9d:	55                   	push   ebp
c001fc9e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fca1:	68 1b d2 02 c0       	push   0xc002d21b
c001fca6:	e8 98 31 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fcab:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fcb2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fcb6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcb9:	e8 79 f4 ff ff       	call   c001f137 <Vm::inbv(unsigned short)>
c001fcbe:	0f b6 c0             	movzx  eax,al
c001fcc1:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fcc4:	eb 31                	jmp    c001fcf7 <Vm::faultHandler(regs*)+0x79e>
c001fcc6:	56                   	push   esi
c001fcc7:	56                   	push   esi
c001fcc8:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fccb:	68 21 d2 02 c0       	push   0xc002d221
c001fcd0:	e8 6e 31 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fcd5:	83 c4 10             	add    esp,0x10
c001fcd8:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fcdb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fce0:	74 03                	je     c001fce5 <Vm::faultHandler(regs*)+0x78c>
c001fce2:	ed                   	in     eax,dx
c001fce3:	eb 0d                	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x799>
c001fce5:	66 ed                	in     ax,dx
c001fce7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fcea:	0f b7 c0             	movzx  eax,ax
c001fced:	66 31 d2             	xor    dx,dx
c001fcf0:	09 d0                	or     eax,edx
c001fcf2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fcf5:	eb 2e                	jmp    c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001fcf7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fcfa:	83 c4 10             	add    esp,0x10
c001fcfd:	eb 29                	jmp    c001fd28 <Vm::faultHandler(regs*)+0x7cf>
c001fcff:	50                   	push   eax
c001fd00:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd03:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fd06:	68 30 d2 02 c0       	push   0xc002d230
c001fd0b:	e8 33 31 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fd10:	83 c4 10             	add    esp,0x10
c001fd13:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fd16:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd1b:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fd1e:	74 03                	je     c001fd23 <Vm::faultHandler(regs*)+0x7ca>
c001fd20:	ef                   	out    dx,eax
c001fd21:	eb 02                	jmp    c001fd25 <Vm::faultHandler(regs*)+0x7cc>
c001fd23:	66 ef                	out    dx,ax
c001fd25:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fd28:	b0 01                	mov    al,0x1
c001fd2a:	eb 56                	jmp    c001fd82 <Vm::faultHandler(regs*)+0x829>
c001fd2c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fd30:	51                   	push   ecx
c001fd31:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fd35:	51                   	push   ecx
c001fd36:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fd3a:	51                   	push   ecx
c001fd3b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fd3f:	51                   	push   ecx
c001fd40:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd44:	52                   	push   edx
c001fd45:	50                   	push   eax
c001fd46:	50                   	push   eax
c001fd47:	68 39 d2 02 c0       	push   0xc002d239
c001fd4c:	e8 f2 30 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c001fd51:	83 c4 20             	add    esp,0x20
c001fd54:	83 ec 0c             	sub    esp,0xc
c001fd57:	6a 60                	push   0x60
c001fd59:	e8 d9 f3 ff ff       	call   c001f137 <Vm::inbv(unsigned short)>
c001fd5e:	83 c4 10             	add    esp,0x10
c001fd61:	3c 1c                	cmp    al,0x1c
c001fd63:	74 04                	je     c001fd69 <Vm::faultHandler(regs*)+0x810>
c001fd65:	3c 5a                	cmp    al,0x5a
c001fd67:	75 eb                	jne    c001fd54 <Vm::faultHandler(regs*)+0x7fb>
c001fd69:	3c 1c                	cmp    al,0x1c
c001fd6b:	74 04                	je     c001fd71 <Vm::faultHandler(regs*)+0x818>
c001fd6d:	3c 5a                	cmp    al,0x5a
c001fd6f:	75 0f                	jne    c001fd80 <Vm::faultHandler(regs*)+0x827>
c001fd71:	83 ec 0c             	sub    esp,0xc
c001fd74:	6a 60                	push   0x60
c001fd76:	e8 bc f3 ff ff       	call   c001f137 <Vm::inbv(unsigned short)>
c001fd7b:	83 c4 10             	add    esp,0x10
c001fd7e:	eb e9                	jmp    c001fd69 <Vm::faultHandler(regs*)+0x810>
c001fd80:	31 c0                	xor    eax,eax
c001fd82:	83 c4 1c             	add    esp,0x1c
c001fd85:	5b                   	pop    ebx
c001fd86:	5e                   	pop    esi
c001fd87:	5f                   	pop    edi
c001fd88:	5d                   	pop    ebp
c001fd89:	c3                   	ret    

c001fd8a <Vm::fpuInternalTo32(unsigned long long)>:
c001fd8a:	57                   	push   edi
c001fd8b:	56                   	push   esi
c001fd8c:	53                   	push   ebx
c001fd8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd95:	89 d6                	mov    esi,edx
c001fd97:	89 d7                	mov    edi,edx
c001fd99:	89 c1                	mov    ecx,eax
c001fd9b:	c1 ef 14             	shr    edi,0x14
c001fd9e:	89 d3                	mov    ebx,edx
c001fda0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fda6:	31 d2                	xor    edx,edx
c001fda8:	89 f8                	mov    eax,edi
c001fdaa:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fdb0:	bf ff 00 00 00       	mov    edi,0xff
c001fdb5:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fdba:	83 d2 ff             	adc    edx,0xffffffff
c001fdbd:	39 c7                	cmp    edi,eax
c001fdbf:	bf 00 00 00 00       	mov    edi,0x0
c001fdc4:	19 d7                	sbb    edi,edx
c001fdc6:	72 15                	jb     c001fddd <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fdc8:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fdcc:	c1 e0 17             	shl    eax,0x17
c001fdcf:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fdd5:	09 f1                	or     ecx,esi
c001fdd7:	09 c1                	or     ecx,eax
c001fdd9:	89 cf                	mov    edi,ecx
c001fddb:	eb 02                	jmp    c001fddf <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fddd:	31 ff                	xor    edi,edi
c001fddf:	89 f8                	mov    eax,edi
c001fde1:	5b                   	pop    ebx
c001fde2:	5e                   	pop    esi
c001fde3:	5f                   	pop    edi
c001fde4:	c3                   	ret    

c001fde5 <Vm::fpuInternalTo64(unsigned long long)>:
c001fde5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fded:	c3                   	ret    

c001fdee <Vm::fpu32ToInternal(unsigned int)>:
c001fdee:	57                   	push   edi
c001fdef:	31 ff                	xor    edi,edi
c001fdf1:	56                   	push   esi
c001fdf2:	53                   	push   ebx
c001fdf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fdf7:	89 cb                	mov    ebx,ecx
c001fdf9:	89 ce                	mov    esi,ecx
c001fdfb:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fe01:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fe07:	c1 e9 17             	shr    ecx,0x17
c001fe0a:	89 f0                	mov    eax,esi
c001fe0c:	0f b6 d1             	movzx  edx,cl
c001fe0f:	81 c2 80 03 00 00    	add    edx,0x380
c001fe15:	89 d1                	mov    ecx,edx
c001fe17:	89 fa                	mov    edx,edi
c001fe19:	c1 e1 14             	shl    ecx,0x14
c001fe1c:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fe20:	c1 e0 1d             	shl    eax,0x1d
c001fe23:	89 d7                	mov    edi,edx
c001fe25:	89 c6                	mov    esi,eax
c001fe27:	89 ca                	mov    edx,ecx
c001fe29:	89 f0                	mov    eax,esi
c001fe2b:	09 fa                	or     edx,edi
c001fe2d:	09 da                	or     edx,ebx
c001fe2f:	5b                   	pop    ebx
c001fe30:	5e                   	pop    esi
c001fe31:	5f                   	pop    edi
c001fe32:	c3                   	ret    

c001fe33 <Vm::fpu64ToInternal(unsigned long long)>:
c001fe33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe3b:	c3                   	ret    

c001fe3c <Vm::fpuFloatToLong(unsigned long long)>:
c001fe3c:	57                   	push   edi
c001fe3d:	31 c0                	xor    eax,eax
c001fe3f:	56                   	push   esi
c001fe40:	31 d2                	xor    edx,edx
c001fe42:	53                   	push   ebx
c001fe43:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fe47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe4b:	89 d9                	mov    ecx,ebx
c001fe4d:	c1 e9 14             	shr    ecx,0x14
c001fe50:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fe56:	89 cf                	mov    edi,ecx
c001fe58:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fe5e:	78 33                	js     c001fe93 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fe60:	89 d9                	mov    ecx,ebx
c001fe62:	89 f0                	mov    eax,esi
c001fe64:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe6a:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fe70:	89 ca                	mov    edx,ecx
c001fe72:	b9 34 00 00 00       	mov    ecx,0x34
c001fe77:	29 f9                	sub    ecx,edi
c001fe79:	0f ad d0             	shrd   eax,edx,cl
c001fe7c:	d3 fa                	sar    edx,cl
c001fe7e:	f6 c1 20             	test   cl,0x20
c001fe81:	74 05                	je     c001fe88 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fe83:	89 d0                	mov    eax,edx
c001fe85:	c1 fa 1f             	sar    edx,0x1f
c001fe88:	85 db                	test   ebx,ebx
c001fe8a:	79 07                	jns    c001fe93 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fe8c:	f7 d8                	neg    eax
c001fe8e:	83 d2 00             	adc    edx,0x0
c001fe91:	f7 da                	neg    edx
c001fe93:	5b                   	pop    ebx
c001fe94:	5e                   	pop    esi
c001fe95:	5f                   	pop    edi
c001fe96:	c3                   	ret    

c001fe97 <Vm::fpuULongToFloat(unsigned long long)>:
c001fe97:	57                   	push   edi
c001fe98:	31 c9                	xor    ecx,ecx
c001fe9a:	56                   	push   esi
c001fe9b:	53                   	push   ebx
c001fe9c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fea0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fea4:	0f ba e7 14          	bt     edi,0x14
c001fea8:	72 07                	jb     c001feb1 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001feaa:	01 f6                	add    esi,esi
c001feac:	11 ff                	adc    edi,edi
c001feae:	41                   	inc    ecx
c001feaf:	eb f3                	jmp    c001fea4 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001feb1:	89 fa                	mov    edx,edi
c001feb3:	89 f0                	mov    eax,esi
c001feb5:	bb 33 04 00 00       	mov    ebx,0x433
c001feba:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fec0:	29 cb                	sub    ebx,ecx
c001fec2:	89 d9                	mov    ecx,ebx
c001fec4:	5b                   	pop    ebx
c001fec5:	c1 e1 14             	shl    ecx,0x14
c001fec8:	5e                   	pop    esi
c001fec9:	09 ca                	or     edx,ecx
c001fecb:	5f                   	pop    edi
c001fecc:	c3                   	ret    

c001fecd <Vm::fpuLongToFloat(long long)>:
c001fecd:	56                   	push   esi
c001fece:	31 c0                	xor    eax,eax
c001fed0:	53                   	push   ebx
c001fed1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fed5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fed9:	39 c8                	cmp    eax,ecx
c001fedb:	19 d8                	sbb    eax,ebx
c001fedd:	7d 04                	jge    c001fee3 <Vm::fpuLongToFloat(long long)+0x16>
c001fedf:	31 f6                	xor    esi,esi
c001fee1:	eb 0c                	jmp    c001feef <Vm::fpuLongToFloat(long long)+0x22>
c001fee3:	f7 d9                	neg    ecx
c001fee5:	be 01 00 00 00       	mov    esi,0x1
c001feea:	83 d3 00             	adc    ebx,0x0
c001feed:	f7 db                	neg    ebx
c001feef:	31 c0                	xor    eax,eax
c001fef1:	0f ba e3 14          	bt     ebx,0x14
c001fef5:	72 07                	jb     c001fefe <Vm::fpuLongToFloat(long long)+0x31>
c001fef7:	01 c9                	add    ecx,ecx
c001fef9:	11 db                	adc    ebx,ebx
c001fefb:	40                   	inc    eax
c001fefc:	eb f3                	jmp    c001fef1 <Vm::fpuLongToFloat(long long)+0x24>
c001fefe:	ba 33 04 00 00       	mov    edx,0x433
c001ff03:	29 c2                	sub    edx,eax
c001ff05:	89 c8                	mov    eax,ecx
c001ff07:	c1 e2 14             	shl    edx,0x14
c001ff0a:	89 d9                	mov    ecx,ebx
c001ff0c:	89 f3                	mov    ebx,esi
c001ff0e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ff14:	09 ca                	or     edx,ecx
c001ff16:	84 db                	test   bl,bl
c001ff18:	74 06                	je     c001ff20 <Vm::fpuLongToFloat(long long)+0x53>
c001ff1a:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ff20:	5b                   	pop    ebx
c001ff21:	5e                   	pop    esi
c001ff22:	c3                   	ret    

c001ff23 <Vm::fpuGet0()>:
c001ff23:	31 c0                	xor    eax,eax
c001ff25:	31 d2                	xor    edx,edx
c001ff27:	c3                   	ret    

c001ff28 <Vm::fpuGet1()>:
c001ff28:	b8 01 00 00 00       	mov    eax,0x1
c001ff2d:	31 d2                	xor    edx,edx
c001ff2f:	c3                   	ret    

c001ff30 <Vm::fpuGetPi()>:
c001ff30:	b8 03 00 00 00       	mov    eax,0x3
c001ff35:	31 d2                	xor    edx,edx
c001ff37:	c3                   	ret    

c001ff38 <Vm::fpuGetLog2E()>:
c001ff38:	83 ec 18             	sub    esp,0x18
c001ff3b:	68 98 d2 02 c0       	push   0xc002d298
c001ff40:	e8 c8 a8 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001ff45:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff4a:	31 d2                	xor    edx,edx
c001ff4c:	83 c4 1c             	add    esp,0x1c
c001ff4f:	c3                   	ret    

c001ff50 <Vm::fpuGetLogE2()>:
c001ff50:	83 ec 18             	sub    esp,0x18
c001ff53:	68 a4 d2 02 c0       	push   0xc002d2a4
c001ff58:	e8 b0 a8 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001ff5d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff62:	31 d2                	xor    edx,edx
c001ff64:	83 c4 1c             	add    esp,0x1c
c001ff67:	c3                   	ret    

c001ff68 <Vm::fpuGetLog210()>:
c001ff68:	83 ec 18             	sub    esp,0x18
c001ff6b:	68 b0 d2 02 c0       	push   0xc002d2b0
c001ff70:	e8 98 a8 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001ff75:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff7a:	31 d2                	xor    edx,edx
c001ff7c:	83 c4 1c             	add    esp,0x1c
c001ff7f:	c3                   	ret    

c001ff80 <Vm::fpuGetLog102()>:
c001ff80:	83 ec 18             	sub    esp,0x18
c001ff83:	68 bd d2 02 c0       	push   0xc002d2bd
c001ff88:	e8 80 a8 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c001ff8d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff92:	31 d2                	xor    edx,edx
c001ff94:	83 c4 1c             	add    esp,0x1c
c001ff97:	c3                   	ret    

c001ff98 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ff98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff9c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ffa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffa4:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ffa8:	0f 92 c0             	setb   al
c001ffab:	c3                   	ret    

c001ffac <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ffac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ffb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb4:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ffb8:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ffbc:	09 c2                	or     edx,eax
c001ffbe:	0f 94 c0             	sete   al
c001ffc1:	c3                   	ret    

c001ffc2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ffc2:	57                   	push   edi
c001ffc3:	56                   	push   esi
c001ffc4:	53                   	push   ebx
c001ffc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ffc9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ffcd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ffd1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ffd5:	57                   	push   edi
c001ffd6:	56                   	push   esi
c001ffd7:	53                   	push   ebx
c001ffd8:	51                   	push   ecx
c001ffd9:	e8 ce ff ff ff       	call   c001ffac <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ffde:	83 c4 10             	add    esp,0x10
c001ffe1:	88 c2                	mov    dl,al
c001ffe3:	31 c0                	xor    eax,eax
c001ffe5:	84 d2                	test   dl,dl
c001ffe7:	75 0c                	jne    c001fff5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ffe9:	57                   	push   edi
c001ffea:	56                   	push   esi
c001ffeb:	53                   	push   ebx
c001ffec:	51                   	push   ecx
c001ffed:	e8 a6 ff ff ff       	call   c001ff98 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fff2:	83 c4 10             	add    esp,0x10
c001fff5:	83 e0 01             	and    eax,0x1
c001fff8:	5b                   	pop    ebx
c001fff9:	88 c1                	mov    cl,al
c001fffb:	83 e2 01             	and    edx,0x1
c001fffe:	a0 41 25 03 c0       	mov    al,ds:0xc0032541
c0020003:	c1 e2 06             	shl    edx,0x6
c0020006:	83 e0 ba             	and    eax,0xffffffba
c0020009:	5e                   	pop    esi
c002000a:	09 c8                	or     eax,ecx
c002000c:	5f                   	pop    edi
c002000d:	09 d0                	or     eax,edx
c002000f:	a2 41 25 03 c0       	mov    ds:0xc0032541,al
c0020014:	c3                   	ret    

c0020015 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0020015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020019:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002001d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0020021:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0020025:	c3                   	ret    

c0020026 <Vm::fpuAbs(unsigned long long)>:
c0020026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002002e:	c3                   	ret    

c002002f <Vm::fpuChs(unsigned long long)>:
c002002f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020033:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020037:	f7 d8                	neg    eax
c0020039:	83 d2 00             	adc    edx,0x0
c002003c:	f7 da                	neg    edx
c002003e:	c3                   	ret    

c002003f <Vm::fpuSub(unsigned long long, unsigned long long)>:
c002003f:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0020043:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0020048:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c002004c:	eb c7                	jmp    c0020015 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c002004e <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c002004e:	53                   	push   ebx
c002004f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020053:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020057:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002005b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002005f:	0f af ca             	imul   ecx,edx
c0020062:	0f af d8             	imul   ebx,eax
c0020065:	f7 e2                	mul    edx
c0020067:	01 d9                	add    ecx,ebx
c0020069:	5b                   	pop    ebx
c002006a:	01 ca                	add    edx,ecx
c002006c:	c3                   	ret    

c002006d <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002007c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020080:	e8 5f 72 00 00       	call   c00272e4 <__udivdi3>
c0020085:	83 c4 1c             	add    esp,0x1c
c0020088:	c3                   	ret    

c0020089 <Vm::fpuSquare(unsigned long long)>:
c0020089:	50                   	push   eax
c002008a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002008e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020092:	52                   	push   edx
c0020093:	50                   	push   eax
c0020094:	52                   	push   edx
c0020095:	50                   	push   eax
c0020096:	e8 b3 ff ff ff       	call   c002004e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002009b:	83 c4 14             	add    esp,0x14
c002009e:	c3                   	ret    

c002009f <Vm::fpuGetReg(int)>:
c002009f:	83 ec 0c             	sub    esp,0xc
c00200a2:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00200a7:	76 10                	jbe    c00200b9 <Vm::fpuGetReg(int)+0x1a>
c00200a9:	83 ec 0c             	sub    esp,0xc
c00200ac:	68 ca d2 02 c0       	push   0xc002d2ca
c00200b1:	e8 57 a7 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00200b6:	83 c4 10             	add    esp,0x10
c00200b9:	a0 41 25 03 c0       	mov    al,ds:0xc0032541
c00200be:	b9 08 00 00 00       	mov    ecx,0x8
c00200c3:	c0 e8 03             	shr    al,0x3
c00200c6:	83 e0 07             	and    eax,0x7
c00200c9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00200cd:	99                   	cdq    
c00200ce:	f7 f9                	idiv   ecx
c00200d0:	8b 04 d5 44 25 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdabc]
c00200d7:	8b 14 d5 48 25 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdab8]
c00200de:	83 c4 0c             	add    esp,0xc
c00200e1:	c3                   	ret    

c00200e2 <Vm::fpuSetReg(int, unsigned long long)>:
c00200e2:	57                   	push   edi
c00200e3:	56                   	push   esi
c00200e4:	52                   	push   edx
c00200e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00200e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00200ed:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00200f2:	76 10                	jbe    c0020104 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c00200f4:	83 ec 0c             	sub    esp,0xc
c00200f7:	68 dd d2 02 c0       	push   0xc002d2dd
c00200fc:	e8 0c a7 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0020101:	83 c4 10             	add    esp,0x10
c0020104:	a0 41 25 03 c0       	mov    al,ds:0xc0032541
c0020109:	b9 08 00 00 00       	mov    ecx,0x8
c002010e:	c0 e8 03             	shr    al,0x3
c0020111:	83 e0 07             	and    eax,0x7
c0020114:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020118:	99                   	cdq    
c0020119:	f7 f9                	idiv   ecx
c002011b:	89 34 d5 44 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdabc],esi
c0020122:	89 3c d5 48 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdab8],edi
c0020129:	58                   	pop    eax
c002012a:	5e                   	pop    esi
c002012b:	5f                   	pop    edi
c002012c:	c3                   	ret    

c002012d <Vm::fpuPush(unsigned long long)>:
c002012d:	a0 41 25 03 c0       	mov    al,ds:0xc0032541
c0020132:	c0 e8 03             	shr    al,0x3
c0020135:	83 e0 07             	and    eax,0x7
c0020138:	83 c0 07             	add    eax,0x7
c002013b:	88 c2                	mov    dl,al
c002013d:	83 e0 07             	and    eax,0x7
c0020140:	83 e2 07             	and    edx,0x7
c0020143:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c002014a:	8a 15 41 25 03 c0    	mov    dl,BYTE PTR ds:0xc0032541
c0020150:	83 e2 c7             	and    edx,0xffffffc7
c0020153:	09 ca                	or     edx,ecx
c0020155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020159:	88 15 41 25 03 c0    	mov    BYTE PTR ds:0xc0032541,dl
c002015f:	89 0c c5 48 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdab8],ecx
c0020166:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002016a:	89 14 c5 44 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdabc],edx
c0020171:	a1 84 25 03 c0       	mov    eax,ds:0xc0032584
c0020176:	83 f8 08             	cmp    eax,0x8
c0020179:	75 08                	jne    c0020183 <Vm::fpuPush(unsigned long long)+0x56>
c002017b:	80 0d 40 25 03 c0 40 	or     BYTE PTR ds:0xc0032540,0x40
c0020182:	c3                   	ret    
c0020183:	40                   	inc    eax
c0020184:	a3 84 25 03 c0       	mov    ds:0xc0032584,eax
c0020189:	c3                   	ret    

c002018a <Vm::fpuPop()>:
c002018a:	8a 0d 41 25 03 c0    	mov    cl,BYTE PTR ds:0xc0032541
c0020190:	53                   	push   ebx
c0020191:	c0 e9 03             	shr    cl,0x3
c0020194:	8a 1d 41 25 03 c0    	mov    bl,BYTE PTR ds:0xc0032541
c002019a:	83 e1 07             	and    ecx,0x7
c002019d:	83 e3 c7             	and    ebx,0xffffffc7
c00201a0:	8b 04 cd 44 25 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdabc]
c00201a7:	8b 14 cd 48 25 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdab8]
c00201ae:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00201b5:	83 e1 38             	and    ecx,0x38
c00201b8:	09 d9                	or     ecx,ebx
c00201ba:	88 0d 41 25 03 c0    	mov    BYTE PTR ds:0xc0032541,cl
c00201c0:	8b 0d 84 25 03 c0    	mov    ecx,DWORD PTR ds:0xc0032584
c00201c6:	85 c9                	test   ecx,ecx
c00201c8:	74 09                	je     c00201d3 <Vm::fpuPop()+0x49>
c00201ca:	49                   	dec    ecx
c00201cb:	89 0d 84 25 03 c0    	mov    DWORD PTR ds:0xc0032584,ecx
c00201d1:	eb 07                	jmp    c00201da <Vm::fpuPop()+0x50>
c00201d3:	80 0d 40 25 03 c0 40 	or     BYTE PTR ds:0xc0032540,0x40
c00201da:	5b                   	pop    ebx
c00201db:	c3                   	ret    

c00201dc <Vm::x87Handler(regs*)>:
c00201dc:	55                   	push   ebp
c00201dd:	57                   	push   edi
c00201de:	56                   	push   esi
c00201df:	53                   	push   ebx
c00201e0:	83 ec 1c             	sub    esp,0x1c
c00201e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00201e7:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00201ec:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00201ef:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00201f7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00201fb:	50                   	push   eax
c00201fc:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0020200:	50                   	push   eax
c0020201:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020205:	50                   	push   eax
c0020206:	53                   	push   ebx
c0020207:	e8 d2 9c ff ff       	call   c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c002020c:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c002020f:	83 c4 10             	add    esp,0x10
c0020212:	89 c6                	mov    esi,eax
c0020214:	80 fa d9             	cmp    dl,0xd9
c0020217:	0f 85 52 01 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0x193>
c002021d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020221:	8d 50 20             	lea    edx,[eax+0x20]
c0020224:	80 fa 0e             	cmp    dl,0xe
c0020227:	0f 87 86 00 00 00    	ja     c00202b3 <Vm::x87Handler(regs*)+0xd7>
c002022d:	0f b6 d2             	movzx  edx,dl
c0020230:	ff 24 95 f0 d2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2d10]
c0020237:	e8 e7 fc ff ff       	call   c001ff23 <Vm::fpuGet0()>
c002023c:	eb 05                	jmp    c0020243 <Vm::x87Handler(regs*)+0x67>
c002023e:	e8 e5 fc ff ff       	call   c001ff28 <Vm::fpuGet1()>
c0020243:	57                   	push   edi
c0020244:	57                   	push   edi
c0020245:	52                   	push   edx
c0020246:	50                   	push   eax
c0020247:	e8 e1 fe ff ff       	call   c002012d <Vm::fpuPush(unsigned long long)>
c002024c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020250:	83 c4 10             	add    esp,0x10
c0020253:	b0 01                	mov    al,0x1
c0020255:	e9 e3 09 00 00       	jmp    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c002025a:	83 ec 0c             	sub    esp,0xc
c002025d:	6a 00                	push   0x0
c002025f:	e8 3b fe ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020264:	59                   	pop    ecx
c0020265:	5e                   	pop    esi
c0020266:	52                   	push   edx
c0020267:	50                   	push   eax
c0020268:	e8 c2 fd ff ff       	call   c002002f <Vm::fpuChs(unsigned long long)>
c002026d:	eb 13                	jmp    c0020282 <Vm::x87Handler(regs*)+0xa6>
c002026f:	83 ec 0c             	sub    esp,0xc
c0020272:	6a 00                	push   0x0
c0020274:	e8 26 fe ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020279:	5f                   	pop    edi
c002027a:	5d                   	pop    ebp
c002027b:	52                   	push   edx
c002027c:	50                   	push   eax
c002027d:	e8 a4 fd ff ff       	call   c0020026 <Vm::fpuAbs(unsigned long long)>
c0020282:	83 c4 0c             	add    esp,0xc
c0020285:	52                   	push   edx
c0020286:	50                   	push   eax
c0020287:	6a 00                	push   0x0
c0020289:	e8 54 fe ff ff       	call   c00200e2 <Vm::fpuSetReg(int, unsigned long long)>
c002028e:	eb bc                	jmp    c002024c <Vm::x87Handler(regs*)+0x70>
c0020290:	e8 d3 fc ff ff       	call   c001ff68 <Vm::fpuGetLog210()>
c0020295:	eb ac                	jmp    c0020243 <Vm::x87Handler(regs*)+0x67>
c0020297:	e8 9c fc ff ff       	call   c001ff38 <Vm::fpuGetLog2E()>
c002029c:	eb a5                	jmp    c0020243 <Vm::x87Handler(regs*)+0x67>
c002029e:	e8 8d fc ff ff       	call   c001ff30 <Vm::fpuGetPi()>
c00202a3:	eb 9e                	jmp    c0020243 <Vm::x87Handler(regs*)+0x67>
c00202a5:	e8 d6 fc ff ff       	call   c001ff80 <Vm::fpuGetLog102()>
c00202aa:	eb 97                	jmp    c0020243 <Vm::x87Handler(regs*)+0x67>
c00202ac:	e8 9f fc ff ff       	call   c001ff50 <Vm::fpuGetLogE2()>
c00202b1:	eb 90                	jmp    c0020243 <Vm::x87Handler(regs*)+0x67>
c00202b3:	8d 50 40             	lea    edx,[eax+0x40]
c00202b6:	80 fa 07             	cmp    dl,0x7
c00202b9:	77 15                	ja     c00202d0 <Vm::x87Handler(regs*)+0xf4>
c00202bb:	83 ec 0c             	sub    esp,0xc
c00202be:	2d c0 00 00 00       	sub    eax,0xc0
c00202c3:	50                   	push   eax
c00202c4:	e8 d6 fd ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00202c9:	59                   	pop    ecx
c00202ca:	5e                   	pop    esi
c00202cb:	e9 75 ff ff ff       	jmp    c0020245 <Vm::x87Handler(regs*)+0x69>
c00202d0:	8d 50 38             	lea    edx,[eax+0x38]
c00202d3:	80 fa 07             	cmp    dl,0x7
c00202d6:	77 3c                	ja     c0020314 <Vm::x87Handler(regs*)+0x138>
c00202d8:	83 ec 0c             	sub    esp,0xc
c00202db:	2d c8 00 00 00       	sub    eax,0xc8
c00202e0:	50                   	push   eax
c00202e1:	e8 b9 fd ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00202e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202ed:	89 c6                	mov    esi,eax
c00202ef:	89 d7                	mov    edi,edx
c00202f1:	e8 a9 fd ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00202f6:	83 c4 0c             	add    esp,0xc
c00202f9:	52                   	push   edx
c00202fa:	50                   	push   eax
c00202fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202ff:	2d c8 00 00 00       	sub    eax,0xc8
c0020304:	50                   	push   eax
c0020305:	e8 d8 fd ff ff       	call   c00200e2 <Vm::fpuSetReg(int, unsigned long long)>
c002030a:	83 c4 0c             	add    esp,0xc
c002030d:	57                   	push   edi
c002030e:	56                   	push   esi
c002030f:	e9 73 ff ff ff       	jmp    c0020287 <Vm::x87Handler(regs*)+0xab>
c0020314:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020318:	84 d2                	test   dl,dl
c002031a:	75 0f                	jne    c002032b <Vm::x87Handler(regs*)+0x14f>
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	ff 36                	push   DWORD PTR [esi]
c0020321:	e8 c8 fa ff ff       	call   c001fdee <Vm::fpu32ToInternal(unsigned int)>
c0020326:	e9 bf 00 00 00       	jmp    c00203ea <Vm::x87Handler(regs*)+0x20e>
c002032b:	80 fa 03             	cmp    dl,0x3
c002032e:	75 13                	jne    c0020343 <Vm::x87Handler(regs*)+0x167>
c0020330:	e8 55 fe ff ff       	call   c002018a <Vm::fpuPop()>
c0020335:	55                   	push   ebp
c0020336:	55                   	push   ebp
c0020337:	52                   	push   edx
c0020338:	50                   	push   eax
c0020339:	e8 4c fa ff ff       	call   c001fd8a <Vm::fpuInternalTo32(unsigned long long)>
c002033e:	e9 88 00 00 00       	jmp    c00203cb <Vm::x87Handler(regs*)+0x1ef>
c0020343:	80 fa 05             	cmp    dl,0x5
c0020346:	75 0e                	jne    c0020356 <Vm::x87Handler(regs*)+0x17a>
c0020348:	66 8b 06             	mov    ax,WORD PTR [esi]
c002034b:	66 a3 42 25 03 c0    	mov    ds:0xc0032542,ax
c0020351:	e9 df 00 00 00       	jmp    c0020435 <Vm::x87Handler(regs*)+0x259>
c0020356:	31 c0                	xor    eax,eax
c0020358:	80 fa 07             	cmp    dl,0x7
c002035b:	0f 85 dc 08 00 00    	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c0020361:	66 a1 42 25 03 c0    	mov    ax,ds:0xc0032542
c0020367:	66 89 06             	mov    WORD PTR [esi],ax
c002036a:	e9 c6 00 00 00       	jmp    c0020435 <Vm::x87Handler(regs*)+0x259>
c002036f:	80 fa d8             	cmp    dl,0xd8
c0020372:	0f 84 c9 00 00 00    	je     c0020441 <Vm::x87Handler(regs*)+0x265>
c0020378:	80 fa dc             	cmp    dl,0xdc
c002037b:	0f 84 0d 02 00 00    	je     c002058e <Vm::x87Handler(regs*)+0x3b2>
c0020381:	80 fa de             	cmp    dl,0xde
c0020384:	0f 84 cd 02 00 00    	je     c0020657 <Vm::x87Handler(regs*)+0x47b>
c002038a:	80 fa dd             	cmp    dl,0xdd
c002038d:	0f 84 5f 04 00 00    	je     c00207f2 <Vm::x87Handler(regs*)+0x616>
c0020393:	80 fa da             	cmp    dl,0xda
c0020396:	0f 84 24 05 00 00    	je     c00208c0 <Vm::x87Handler(regs*)+0x6e4>
c002039c:	80 fa df             	cmp    dl,0xdf
c002039f:	0f 84 68 05 00 00    	je     c002090d <Vm::x87Handler(regs*)+0x731>
c00203a5:	31 c0                	xor    eax,eax
c00203a7:	80 fa db             	cmp    dl,0xdb
c00203aa:	0f 85 8d 08 00 00    	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c00203b0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203b4:	80 fa 03             	cmp    dl,0x3
c00203b7:	0f 85 70 06 00 00    	jne    c0020a2d <Vm::x87Handler(regs*)+0x851>
c00203bd:	e8 c8 fd ff ff       	call   c002018a <Vm::fpuPop()>
c00203c2:	55                   	push   ebp
c00203c3:	55                   	push   ebp
c00203c4:	52                   	push   edx
c00203c5:	50                   	push   eax
c00203c6:	e8 71 fa ff ff       	call   c001fe3c <Vm::fpuFloatToLong(unsigned long long)>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	89 06                	mov    DWORD PTR [esi],eax
c00203d0:	eb 63                	jmp    c0020435 <Vm::x87Handler(regs*)+0x259>
c00203d2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203d6:	84 d2                	test   dl,dl
c00203d8:	0f 85 e6 05 00 00    	jne    c00209c4 <Vm::x87Handler(regs*)+0x7e8>
c00203de:	57                   	push   edi
c00203df:	57                   	push   edi
c00203e0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e3:	ff 36                	push   DWORD PTR [esi]
c00203e5:	e8 49 fa ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c00203ea:	5e                   	pop    esi
c00203eb:	5f                   	pop    edi
c00203ec:	52                   	push   edx
c00203ed:	50                   	push   eax
c00203ee:	e8 3a fd ff ff       	call   c002012d <Vm::fpuPush(unsigned long long)>
c00203f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203f7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203fa:	e9 51 fe ff ff       	jmp    c0020250 <Vm::x87Handler(regs*)+0x74>
c00203ff:	80 fa 03             	cmp    dl,0x3
c0020402:	0f 85 d7 06 00 00    	jne    c0020adf <Vm::x87Handler(regs*)+0x903>
c0020408:	57                   	push   edi
c0020409:	57                   	push   edi
c002040a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002040d:	ff 36                	push   DWORD PTR [esi]
c002040f:	e8 1f fa ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c0020414:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002041b:	89 c6                	mov    esi,eax
c002041d:	89 d7                	mov    edi,edx
c002041f:	e8 7b fc ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020424:	57                   	push   edi
c0020425:	56                   	push   esi
c0020426:	52                   	push   edx
c0020427:	50                   	push   eax
c0020428:	e8 95 fb ff ff       	call   c001ffc2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002042d:	83 c4 20             	add    esp,0x20
c0020430:	e8 55 fd ff ff       	call   c002018a <Vm::fpuPop()>
c0020435:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020439:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002043c:	e9 12 fe ff ff       	jmp    c0020253 <Vm::x87Handler(regs*)+0x77>
c0020441:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020445:	8d 50 40             	lea    edx,[eax+0x40]
c0020448:	80 fa 07             	cmp    dl,0x7
c002044b:	77 29                	ja     c0020476 <Vm::x87Handler(regs*)+0x29a>
c002044d:	83 ec 0c             	sub    esp,0xc
c0020450:	2d c0 00 00 00       	sub    eax,0xc0
c0020455:	50                   	push   eax
c0020456:	e8 44 fc ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002045b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020462:	89 c6                	mov    esi,eax
c0020464:	89 d7                	mov    edi,edx
c0020466:	e8 34 fc ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002046b:	57                   	push   edi
c002046c:	56                   	push   esi
c002046d:	52                   	push   edx
c002046e:	50                   	push   eax
c002046f:	e8 a1 fb ff ff       	call   c0020015 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020474:	eb 2f                	jmp    c00204a5 <Vm::x87Handler(regs*)+0x2c9>
c0020476:	8d 50 38             	lea    edx,[eax+0x38]
c0020479:	80 fa 07             	cmp    dl,0x7
c002047c:	77 2f                	ja     c00204ad <Vm::x87Handler(regs*)+0x2d1>
c002047e:	83 ec 0c             	sub    esp,0xc
c0020481:	2d c8 00 00 00       	sub    eax,0xc8
c0020486:	50                   	push   eax
c0020487:	e8 13 fc ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002048c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020493:	89 c6                	mov    esi,eax
c0020495:	89 d7                	mov    edi,edx
c0020497:	e8 03 fc ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002049c:	57                   	push   edi
c002049d:	56                   	push   esi
c002049e:	52                   	push   edx
c002049f:	50                   	push   eax
c00204a0:	e8 a9 fb ff ff       	call   c002004e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204a5:	83 c4 1c             	add    esp,0x1c
c00204a8:	e9 d8 fd ff ff       	jmp    c0020285 <Vm::x87Handler(regs*)+0xa9>
c00204ad:	8d 50 30             	lea    edx,[eax+0x30]
c00204b0:	80 fa 07             	cmp    dl,0x7
c00204b3:	77 0d                	ja     c00204c2 <Vm::x87Handler(regs*)+0x2e6>
c00204b5:	83 ec 0c             	sub    esp,0xc
c00204b8:	2d d0 00 00 00       	sub    eax,0xd0
c00204bd:	e9 99 03 00 00       	jmp    c002085b <Vm::x87Handler(regs*)+0x67f>
c00204c2:	8d 50 28             	lea    edx,[eax+0x28]
c00204c5:	80 fa 07             	cmp    dl,0x7
c00204c8:	77 0d                	ja     c00204d7 <Vm::x87Handler(regs*)+0x2fb>
c00204ca:	83 ec 0c             	sub    esp,0xc
c00204cd:	2d d8 00 00 00       	sub    eax,0xd8
c00204d2:	e9 c0 03 00 00       	jmp    c0020897 <Vm::x87Handler(regs*)+0x6bb>
c00204d7:	8d 50 20             	lea    edx,[eax+0x20]
c00204da:	80 fa 07             	cmp    dl,0x7
c00204dd:	77 1b                	ja     c00204fa <Vm::x87Handler(regs*)+0x31e>
c00204df:	83 ec 0c             	sub    esp,0xc
c00204e2:	2d e0 00 00 00       	sub    eax,0xe0
c00204e7:	50                   	push   eax
c00204e8:	e8 b2 fb ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00204ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f4:	89 c6                	mov    esi,eax
c00204f6:	89 d7                	mov    edi,edx
c00204f8:	eb 22                	jmp    c002051c <Vm::x87Handler(regs*)+0x340>
c00204fa:	8d 50 18             	lea    edx,[eax+0x18]
c00204fd:	80 fa 07             	cmp    dl,0x7
c0020500:	77 2d                	ja     c002052f <Vm::x87Handler(regs*)+0x353>
c0020502:	83 ec 0c             	sub    esp,0xc
c0020505:	6a 00                	push   0x0
c0020507:	e8 93 fb ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002050c:	89 c6                	mov    esi,eax
c002050e:	89 d7                	mov    edi,edx
c0020510:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020514:	2d e8 00 00 00       	sub    eax,0xe8
c0020519:	89 04 24             	mov    DWORD PTR [esp],eax
c002051c:	e8 7e fb ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020521:	57                   	push   edi
c0020522:	56                   	push   esi
c0020523:	52                   	push   edx
c0020524:	50                   	push   eax
c0020525:	e8 15 fb ff ff       	call   c002003f <Vm::fpuSub(unsigned long long, unsigned long long)>
c002052a:	e9 76 ff ff ff       	jmp    c00204a5 <Vm::x87Handler(regs*)+0x2c9>
c002052f:	8d 50 10             	lea    edx,[eax+0x10]
c0020532:	80 fa 07             	cmp    dl,0x7
c0020535:	77 1b                	ja     c0020552 <Vm::x87Handler(regs*)+0x376>
c0020537:	83 ec 0c             	sub    esp,0xc
c002053a:	2d f0 00 00 00       	sub    eax,0xf0
c002053f:	50                   	push   eax
c0020540:	e8 5a fb ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020545:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002054c:	89 c6                	mov    esi,eax
c002054e:	89 d7                	mov    edi,edx
c0020550:	eb 22                	jmp    c0020574 <Vm::x87Handler(regs*)+0x398>
c0020552:	3c f7                	cmp    al,0xf7
c0020554:	0f 86 d1 03 00 00    	jbe    c002092b <Vm::x87Handler(regs*)+0x74f>
c002055a:	83 ec 0c             	sub    esp,0xc
c002055d:	6a 00                	push   0x0
c002055f:	e8 3b fb ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020564:	89 c6                	mov    esi,eax
c0020566:	89 d7                	mov    edi,edx
c0020568:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002056c:	2d f8 00 00 00       	sub    eax,0xf8
c0020571:	89 04 24             	mov    DWORD PTR [esp],eax
c0020574:	e8 26 fb ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020579:	57                   	push   edi
c002057a:	56                   	push   esi
c002057b:	52                   	push   edx
c002057c:	50                   	push   eax
c002057d:	e8 eb fa ff ff       	call   c002006d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020582:	83 c4 1c             	add    esp,0x1c
c0020585:	52                   	push   edx
c0020586:	50                   	push   eax
c0020587:	6a 00                	push   0x0
c0020589:	e9 51 02 00 00       	jmp    c00207df <Vm::x87Handler(regs*)+0x603>
c002058e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020592:	8d 50 40             	lea    edx,[eax+0x40]
c0020595:	80 fa 07             	cmp    dl,0x7
c0020598:	77 37                	ja     c00205d1 <Vm::x87Handler(regs*)+0x3f5>
c002059a:	83 ec 0c             	sub    esp,0xc
c002059d:	2d c0 00 00 00       	sub    eax,0xc0
c00205a2:	50                   	push   eax
c00205a3:	e8 f7 fa ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00205a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205af:	89 c6                	mov    esi,eax
c00205b1:	89 d7                	mov    edi,edx
c00205b3:	e8 e7 fa ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00205b8:	57                   	push   edi
c00205b9:	56                   	push   esi
c00205ba:	52                   	push   edx
c00205bb:	50                   	push   eax
c00205bc:	e8 54 fa ff ff       	call   c0020015 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00205c1:	83 c4 1c             	add    esp,0x1c
c00205c4:	52                   	push   edx
c00205c5:	50                   	push   eax
c00205c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205ca:	2d c0 00 00 00       	sub    eax,0xc0
c00205cf:	eb 3d                	jmp    c002060e <Vm::x87Handler(regs*)+0x432>
c00205d1:	8d 50 38             	lea    edx,[eax+0x38]
c00205d4:	80 fa 07             	cmp    dl,0x7
c00205d7:	77 3b                	ja     c0020614 <Vm::x87Handler(regs*)+0x438>
c00205d9:	83 ec 0c             	sub    esp,0xc
c00205dc:	2d c8 00 00 00       	sub    eax,0xc8
c00205e1:	50                   	push   eax
c00205e2:	e8 b8 fa ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00205e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205ee:	89 c6                	mov    esi,eax
c00205f0:	89 d7                	mov    edi,edx
c00205f2:	e8 a8 fa ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00205f7:	57                   	push   edi
c00205f8:	56                   	push   esi
c00205f9:	52                   	push   edx
c00205fa:	50                   	push   eax
c00205fb:	e8 4e fa ff ff       	call   c002004e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020600:	83 c4 1c             	add    esp,0x1c
c0020603:	52                   	push   edx
c0020604:	50                   	push   eax
c0020605:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020609:	2d c8 00 00 00       	sub    eax,0xc8
c002060e:	50                   	push   eax
c002060f:	e9 75 fc ff ff       	jmp    c0020289 <Vm::x87Handler(regs*)+0xad>
c0020614:	83 c0 18             	add    eax,0x18
c0020617:	3c 07                	cmp    al,0x7
c0020619:	0f 87 3b 04 00 00    	ja     c0020a5a <Vm::x87Handler(regs*)+0x87e>
c002061f:	83 ec 0c             	sub    esp,0xc
c0020622:	6a 00                	push   0x0
c0020624:	e8 76 fa ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020629:	89 c6                	mov    esi,eax
c002062b:	89 d7                	mov    edi,edx
c002062d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020631:	2d e8 00 00 00       	sub    eax,0xe8
c0020636:	89 04 24             	mov    DWORD PTR [esp],eax
c0020639:	e8 61 fa ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002063e:	57                   	push   edi
c002063f:	56                   	push   esi
c0020640:	52                   	push   edx
c0020641:	50                   	push   eax
c0020642:	e8 f8 f9 ff ff       	call   c002003f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020647:	83 c4 1c             	add    esp,0x1c
c002064a:	52                   	push   edx
c002064b:	50                   	push   eax
c002064c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020650:	2d e8 00 00 00       	sub    eax,0xe8
c0020655:	eb b7                	jmp    c002060e <Vm::x87Handler(regs*)+0x432>
c0020657:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002065b:	8d 50 40             	lea    edx,[eax+0x40]
c002065e:	80 fa 07             	cmp    dl,0x7
c0020661:	77 3a                	ja     c002069d <Vm::x87Handler(regs*)+0x4c1>
c0020663:	83 ec 0c             	sub    esp,0xc
c0020666:	2d c0 00 00 00       	sub    eax,0xc0
c002066b:	50                   	push   eax
c002066c:	e8 2e fa ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020671:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020678:	89 c6                	mov    esi,eax
c002067a:	89 d7                	mov    edi,edx
c002067c:	e8 1e fa ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020681:	57                   	push   edi
c0020682:	56                   	push   esi
c0020683:	52                   	push   edx
c0020684:	50                   	push   eax
c0020685:	e8 8b f9 ff ff       	call   c0020015 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002068a:	83 c4 1c             	add    esp,0x1c
c002068d:	52                   	push   edx
c002068e:	50                   	push   eax
c002068f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020693:	2d c0 00 00 00       	sub    eax,0xc0
c0020698:	e9 9e 01 00 00       	jmp    c002083b <Vm::x87Handler(regs*)+0x65f>
c002069d:	8d 50 20             	lea    edx,[eax+0x20]
c00206a0:	80 fa 07             	cmp    dl,0x7
c00206a3:	77 3a                	ja     c00206df <Vm::x87Handler(regs*)+0x503>
c00206a5:	83 ec 0c             	sub    esp,0xc
c00206a8:	2d e0 00 00 00       	sub    eax,0xe0
c00206ad:	50                   	push   eax
c00206ae:	e8 ec f9 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00206b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206ba:	89 c6                	mov    esi,eax
c00206bc:	89 d7                	mov    edi,edx
c00206be:	e8 dc f9 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00206c3:	57                   	push   edi
c00206c4:	56                   	push   esi
c00206c5:	52                   	push   edx
c00206c6:	50                   	push   eax
c00206c7:	e8 73 f9 ff ff       	call   c002003f <Vm::fpuSub(unsigned long long, unsigned long long)>
c00206cc:	83 c4 1c             	add    esp,0x1c
c00206cf:	52                   	push   edx
c00206d0:	50                   	push   eax
c00206d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206d5:	2d e0 00 00 00       	sub    eax,0xe0
c00206da:	e9 5c 01 00 00       	jmp    c002083b <Vm::x87Handler(regs*)+0x65f>
c00206df:	8d 50 18             	lea    edx,[eax+0x18]
c00206e2:	80 fa 07             	cmp    dl,0x7
c00206e5:	77 3b                	ja     c0020722 <Vm::x87Handler(regs*)+0x546>
c00206e7:	83 ec 0c             	sub    esp,0xc
c00206ea:	6a 00                	push   0x0
c00206ec:	e8 ae f9 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00206f1:	89 c6                	mov    esi,eax
c00206f3:	89 d7                	mov    edi,edx
c00206f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206f9:	2d e8 00 00 00       	sub    eax,0xe8
c00206fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0020701:	e8 99 f9 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020706:	57                   	push   edi
c0020707:	56                   	push   esi
c0020708:	52                   	push   edx
c0020709:	50                   	push   eax
c002070a:	e8 30 f9 ff ff       	call   c002003f <Vm::fpuSub(unsigned long long, unsigned long long)>
c002070f:	83 c4 1c             	add    esp,0x1c
c0020712:	52                   	push   edx
c0020713:	50                   	push   eax
c0020714:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020718:	2d e8 00 00 00       	sub    eax,0xe8
c002071d:	e9 19 01 00 00       	jmp    c002083b <Vm::x87Handler(regs*)+0x65f>
c0020722:	8d 50 38             	lea    edx,[eax+0x38]
c0020725:	80 fa 07             	cmp    dl,0x7
c0020728:	77 37                	ja     c0020761 <Vm::x87Handler(regs*)+0x585>
c002072a:	83 ec 0c             	sub    esp,0xc
c002072d:	2d c8 00 00 00       	sub    eax,0xc8
c0020732:	50                   	push   eax
c0020733:	e8 67 f9 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020738:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002073f:	89 c6                	mov    esi,eax
c0020741:	89 d7                	mov    edi,edx
c0020743:	e8 57 f9 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020748:	57                   	push   edi
c0020749:	56                   	push   esi
c002074a:	52                   	push   edx
c002074b:	50                   	push   eax
c002074c:	e8 fd f8 ff ff       	call   c002004e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020751:	83 c4 1c             	add    esp,0x1c
c0020754:	52                   	push   edx
c0020755:	50                   	push   eax
c0020756:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002075a:	2d c8 00 00 00       	sub    eax,0xc8
c002075f:	eb 7d                	jmp    c00207de <Vm::x87Handler(regs*)+0x602>
c0020761:	3c f7                	cmp    al,0xf7
c0020763:	76 38                	jbe    c002079d <Vm::x87Handler(regs*)+0x5c1>
c0020765:	83 ec 0c             	sub    esp,0xc
c0020768:	6a 00                	push   0x0
c002076a:	e8 30 f9 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002076f:	89 c6                	mov    esi,eax
c0020771:	89 d7                	mov    edi,edx
c0020773:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020777:	2d f8 00 00 00       	sub    eax,0xf8
c002077c:	89 04 24             	mov    DWORD PTR [esp],eax
c002077f:	e8 1b f9 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020784:	57                   	push   edi
c0020785:	56                   	push   esi
c0020786:	52                   	push   edx
c0020787:	50                   	push   eax
c0020788:	e8 e0 f8 ff ff       	call   c002006d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002078d:	83 c4 1c             	add    esp,0x1c
c0020790:	52                   	push   edx
c0020791:	50                   	push   eax
c0020792:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020796:	2d f8 00 00 00       	sub    eax,0xf8
c002079b:	eb 41                	jmp    c00207de <Vm::x87Handler(regs*)+0x602>
c002079d:	8d 50 10             	lea    edx,[eax+0x10]
c00207a0:	80 fa 07             	cmp    dl,0x7
c00207a3:	0f 87 5a 01 00 00    	ja     c0020903 <Vm::x87Handler(regs*)+0x727>
c00207a9:	83 ec 0c             	sub    esp,0xc
c00207ac:	2d f0 00 00 00       	sub    eax,0xf0
c00207b1:	50                   	push   eax
c00207b2:	e8 e8 f8 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00207b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207be:	89 c6                	mov    esi,eax
c00207c0:	89 d7                	mov    edi,edx
c00207c2:	e8 d8 f8 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00207c7:	57                   	push   edi
c00207c8:	56                   	push   esi
c00207c9:	52                   	push   edx
c00207ca:	50                   	push   eax
c00207cb:	e8 9d f8 ff ff       	call   c002006d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00207d0:	83 c4 1c             	add    esp,0x1c
c00207d3:	52                   	push   edx
c00207d4:	50                   	push   eax
c00207d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207d9:	2d f0 00 00 00       	sub    eax,0xf0
c00207de:	50                   	push   eax
c00207df:	e8 fe f8 ff ff       	call   c00200e2 <Vm::fpuSetReg(int, unsigned long long)>
c00207e4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00207e8:	e8 9d f9 ff ff       	call   c002018a <Vm::fpuPop()>
c00207ed:	e9 5e fa ff ff       	jmp    c0020250 <Vm::x87Handler(regs*)+0x74>
c00207f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207f6:	8d 50 30             	lea    edx,[eax+0x30]
c00207f9:	80 fa 07             	cmp    dl,0x7
c00207fc:	77 1d                	ja     c002081b <Vm::x87Handler(regs*)+0x63f>
c00207fe:	83 ec 0c             	sub    esp,0xc
c0020801:	6a 00                	push   0x0
c0020803:	e8 97 f8 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020808:	83 c4 0c             	add    esp,0xc
c002080b:	52                   	push   edx
c002080c:	50                   	push   eax
c002080d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020811:	2d d0 00 00 00       	sub    eax,0xd0
c0020816:	e9 f3 fd ff ff       	jmp    c002060e <Vm::x87Handler(regs*)+0x432>
c002081b:	8d 50 28             	lea    edx,[eax+0x28]
c002081e:	80 fa 07             	cmp    dl,0x7
c0020821:	77 28                	ja     c002084b <Vm::x87Handler(regs*)+0x66f>
c0020823:	83 ec 0c             	sub    esp,0xc
c0020826:	6a 00                	push   0x0
c0020828:	e8 72 f8 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002082d:	83 c4 0c             	add    esp,0xc
c0020830:	52                   	push   edx
c0020831:	50                   	push   eax
c0020832:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020836:	2d d8 00 00 00       	sub    eax,0xd8
c002083b:	50                   	push   eax
c002083c:	e8 a1 f8 ff ff       	call   c00200e2 <Vm::fpuSetReg(int, unsigned long long)>
c0020841:	e8 44 f9 ff ff       	call   c002018a <Vm::fpuPop()>
c0020846:	e9 01 fa ff ff       	jmp    c002024c <Vm::x87Handler(regs*)+0x70>
c002084b:	8d 50 20             	lea    edx,[eax+0x20]
c002084e:	80 fa 07             	cmp    dl,0x7
c0020851:	77 30                	ja     c0020883 <Vm::x87Handler(regs*)+0x6a7>
c0020853:	83 ec 0c             	sub    esp,0xc
c0020856:	2d e0 00 00 00       	sub    eax,0xe0
c002085b:	50                   	push   eax
c002085c:	e8 3e f8 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020861:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020868:	89 c6                	mov    esi,eax
c002086a:	89 d7                	mov    edi,edx
c002086c:	e8 2e f8 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020871:	57                   	push   edi
c0020872:	56                   	push   esi
c0020873:	52                   	push   edx
c0020874:	50                   	push   eax
c0020875:	e8 48 f7 ff ff       	call   c001ffc2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002087a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002087e:	e9 54 02 00 00       	jmp    c0020ad7 <Vm::x87Handler(regs*)+0x8fb>
c0020883:	8d 50 18             	lea    edx,[eax+0x18]
c0020886:	80 fa 07             	cmp    dl,0x7
c0020889:	0f 87 43 fb ff ff    	ja     c00203d2 <Vm::x87Handler(regs*)+0x1f6>
c002088f:	83 ec 0c             	sub    esp,0xc
c0020892:	2d e8 00 00 00       	sub    eax,0xe8
c0020897:	50                   	push   eax
c0020898:	e8 02 f8 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c002089d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208a4:	89 c6                	mov    esi,eax
c00208a6:	89 d7                	mov    edi,edx
c00208a8:	e8 f2 f7 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00208ad:	57                   	push   edi
c00208ae:	56                   	push   esi
c00208af:	52                   	push   edx
c00208b0:	50                   	push   eax
c00208b1:	e8 0c f7 ff ff       	call   c001ffc2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00208b6:	83 c4 20             	add    esp,0x20
c00208b9:	e8 cc f8 ff ff       	call   c002018a <Vm::fpuPop()>
c00208be:	eb 62                	jmp    c0020922 <Vm::x87Handler(regs*)+0x746>
c00208c0:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00208c4:	0f 85 0f 01 00 00    	jne    c00209d9 <Vm::x87Handler(regs*)+0x7fd>
c00208ca:	83 ec 0c             	sub    esp,0xc
c00208cd:	6a 01                	push   0x1
c00208cf:	e8 cb f7 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00208d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208db:	89 c6                	mov    esi,eax
c00208dd:	89 d7                	mov    edi,edx
c00208df:	e8 bb f7 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00208e4:	57                   	push   edi
c00208e5:	56                   	push   esi
c00208e6:	52                   	push   edx
c00208e7:	50                   	push   eax
c00208e8:	e8 d5 f6 ff ff       	call   c001ffc2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00208ed:	83 c4 20             	add    esp,0x20
c00208f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00208f4:	e8 91 f8 ff ff       	call   c002018a <Vm::fpuPop()>
c00208f9:	e8 8c f8 ff ff       	call   c002018a <Vm::fpuPop()>
c00208fe:	e9 50 f9 ff ff       	jmp    c0020253 <Vm::x87Handler(regs*)+0x77>
c0020903:	3c d9                	cmp    al,0xd9
c0020905:	0f 85 b5 02 00 00    	jne    c0020bc0 <Vm::x87Handler(regs*)+0x9e4>
c002090b:	eb bd                	jmp    c00208ca <Vm::x87Handler(regs*)+0x6ee>
c002090d:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020911:	0f 85 ea 02 00 00    	jne    c0020c01 <Vm::x87Handler(regs*)+0xa25>
c0020917:	0f b7 05 40 25 03 c0 	movzx  eax,WORD PTR ds:0xc0032540
c002091e:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020922:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020926:	e9 28 f9 ff ff       	jmp    c0020253 <Vm::x87Handler(regs*)+0x77>
c002092b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002092f:	84 d2                	test   dl,dl
c0020931:	75 0f                	jne    c0020942 <Vm::x87Handler(regs*)+0x766>
c0020933:	83 ec 0c             	sub    esp,0xc
c0020936:	ff 36                	push   DWORD PTR [esi]
c0020938:	e8 b1 f4 ff ff       	call   c001fdee <Vm::fpu32ToInternal(unsigned int)>
c002093d:	e9 2c 01 00 00       	jmp    c0020a6e <Vm::x87Handler(regs*)+0x892>
c0020942:	80 fa 01             	cmp    dl,0x1
c0020945:	75 0f                	jne    c0020956 <Vm::x87Handler(regs*)+0x77a>
c0020947:	83 ec 0c             	sub    esp,0xc
c002094a:	ff 36                	push   DWORD PTR [esi]
c002094c:	e8 9d f4 ff ff       	call   c001fdee <Vm::fpu32ToInternal(unsigned int)>
c0020951:	e9 81 02 00 00       	jmp    c0020bd7 <Vm::x87Handler(regs*)+0x9fb>
c0020956:	80 fa 04             	cmp    dl,0x4
c0020959:	75 0f                	jne    c002096a <Vm::x87Handler(regs*)+0x78e>
c002095b:	83 ec 0c             	sub    esp,0xc
c002095e:	ff 36                	push   DWORD PTR [esi]
c0020960:	e8 89 f4 ff ff       	call   c001fdee <Vm::fpu32ToInternal(unsigned int)>
c0020965:	e9 86 01 00 00       	jmp    c0020af0 <Vm::x87Handler(regs*)+0x914>
c002096a:	80 fa 05             	cmp    dl,0x5
c002096d:	75 1b                	jne    c002098a <Vm::x87Handler(regs*)+0x7ae>
c002096f:	83 ec 0c             	sub    esp,0xc
c0020972:	6a 00                	push   0x0
c0020974:	e8 26 f7 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020979:	89 c7                	mov    edi,eax
c002097b:	89 d5                	mov    ebp,edx
c002097d:	58                   	pop    eax
c002097e:	ff 36                	push   DWORD PTR [esi]
c0020980:	e8 69 f4 ff ff       	call   c001fdee <Vm::fpu32ToInternal(unsigned int)>
c0020985:	e9 a3 01 00 00       	jmp    c0020b2d <Vm::x87Handler(regs*)+0x951>
c002098a:	80 fa 06             	cmp    dl,0x6
c002098d:	75 0f                	jne    c002099e <Vm::x87Handler(regs*)+0x7c2>
c002098f:	83 ec 0c             	sub    esp,0xc
c0020992:	ff 36                	push   DWORD PTR [esi]
c0020994:	e8 55 f4 ff ff       	call   c001fdee <Vm::fpu32ToInternal(unsigned int)>
c0020999:	e9 ae 01 00 00       	jmp    c0020b4c <Vm::x87Handler(regs*)+0x970>
c002099e:	31 c0                	xor    eax,eax
c00209a0:	80 fa 07             	cmp    dl,0x7
c00209a3:	0f 85 94 02 00 00    	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c00209a9:	83 ec 0c             	sub    esp,0xc
c00209ac:	6a 00                	push   0x0
c00209ae:	e8 ec f6 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c00209b3:	89 c7                	mov    edi,eax
c00209b5:	89 d5                	mov    ebp,edx
c00209b7:	58                   	pop    eax
c00209b8:	ff 36                	push   DWORD PTR [esi]
c00209ba:	e8 2f f4 ff ff       	call   c001fdee <Vm::fpu32ToInternal(unsigned int)>
c00209bf:	e9 cb 01 00 00       	jmp    c0020b8f <Vm::x87Handler(regs*)+0x9b3>
c00209c4:	80 fa 03             	cmp    dl,0x3
c00209c7:	0f 85 d3 01 00 00    	jne    c0020ba0 <Vm::x87Handler(regs*)+0x9c4>
c00209cd:	e8 b8 f7 ff ff       	call   c002018a <Vm::fpuPop()>
c00209d2:	51                   	push   ecx
c00209d3:	51                   	push   ecx
c00209d4:	e9 de 01 00 00       	jmp    c0020bb7 <Vm::x87Handler(regs*)+0x9db>
c00209d9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00209dd:	80 fa 01             	cmp    dl,0x1
c00209e0:	75 09                	jne    c00209eb <Vm::x87Handler(regs*)+0x80f>
c00209e2:	57                   	push   edi
c00209e3:	57                   	push   edi
c00209e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00209e6:	e9 e3 01 00 00       	jmp    c0020bce <Vm::x87Handler(regs*)+0x9f2>
c00209eb:	80 fa 04             	cmp    dl,0x4
c00209ee:	75 12                	jne    c0020a02 <Vm::x87Handler(regs*)+0x826>
c00209f0:	31 d2                	xor    edx,edx
c00209f2:	51                   	push   ecx
c00209f3:	51                   	push   ecx
c00209f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00209f6:	52                   	push   edx
c00209f7:	50                   	push   eax
c00209f8:	e8 d0 f4 ff ff       	call   c001fecd <Vm::fpuLongToFloat(long long)>
c00209fd:	e9 ee 00 00 00       	jmp    c0020af0 <Vm::x87Handler(regs*)+0x914>
c0020a02:	31 c0                	xor    eax,eax
c0020a04:	80 fa 07             	cmp    dl,0x7
c0020a07:	0f 85 30 02 00 00    	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c0020a0d:	83 ec 0c             	sub    esp,0xc
c0020a10:	6a 00                	push   0x0
c0020a12:	e8 88 f6 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020a17:	89 c7                	mov    edi,eax
c0020a19:	89 d5                	mov    ebp,edx
c0020a1b:	58                   	pop    eax
c0020a1c:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a1e:	5a                   	pop    edx
c0020a1f:	31 d2                	xor    edx,edx
c0020a21:	52                   	push   edx
c0020a22:	50                   	push   eax
c0020a23:	e8 a5 f4 ff ff       	call   c001fecd <Vm::fpuLongToFloat(long long)>
c0020a28:	e9 62 01 00 00       	jmp    c0020b8f <Vm::x87Handler(regs*)+0x9b3>
c0020a2d:	84 d2                	test   dl,dl
c0020a2f:	75 0d                	jne    c0020a3e <Vm::x87Handler(regs*)+0x862>
c0020a31:	31 d2                	xor    edx,edx
c0020a33:	55                   	push   ebp
c0020a34:	55                   	push   ebp
c0020a35:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a37:	52                   	push   edx
c0020a38:	50                   	push   eax
c0020a39:	e9 d3 01 00 00       	jmp    c0020c11 <Vm::x87Handler(regs*)+0xa35>
c0020a3e:	31 c0                	xor    eax,eax
c0020a40:	80 fa 02             	cmp    dl,0x2
c0020a43:	0f 85 f4 01 00 00    	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c0020a49:	83 ec 0c             	sub    esp,0xc
c0020a4c:	6a 00                	push   0x0
c0020a4e:	e8 4c f6 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020a53:	59                   	pop    ecx
c0020a54:	5f                   	pop    edi
c0020a55:	e9 6a f9 ff ff       	jmp    c00203c4 <Vm::x87Handler(regs*)+0x1e8>
c0020a5a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a5e:	84 d2                	test   dl,dl
c0020a60:	75 2a                	jne    c0020a8c <Vm::x87Handler(regs*)+0x8b0>
c0020a62:	50                   	push   eax
c0020a63:	50                   	push   eax
c0020a64:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a67:	ff 36                	push   DWORD PTR [esi]
c0020a69:	e8 c5 f3 ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c0020a6e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a75:	89 c6                	mov    esi,eax
c0020a77:	89 d7                	mov    edi,edx
c0020a79:	e8 21 f6 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020a7e:	57                   	push   edi
c0020a7f:	56                   	push   esi
c0020a80:	52                   	push   edx
c0020a81:	50                   	push   eax
c0020a82:	e8 8e f5 ff ff       	call   c0020015 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020a87:	e9 64 01 00 00       	jmp    c0020bf0 <Vm::x87Handler(regs*)+0xa14>
c0020a8c:	80 fa 01             	cmp    dl,0x1
c0020a8f:	75 11                	jne    c0020aa2 <Vm::x87Handler(regs*)+0x8c6>
c0020a91:	50                   	push   eax
c0020a92:	50                   	push   eax
c0020a93:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a96:	ff 36                	push   DWORD PTR [esi]
c0020a98:	e8 96 f3 ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c0020a9d:	e9 35 01 00 00       	jmp    c0020bd7 <Vm::x87Handler(regs*)+0x9fb>
c0020aa2:	80 fa 02             	cmp    dl,0x2
c0020aa5:	0f 85 54 f9 ff ff    	jne    c00203ff <Vm::x87Handler(regs*)+0x223>
c0020aab:	55                   	push   ebp
c0020aac:	55                   	push   ebp
c0020aad:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020ab0:	ff 36                	push   DWORD PTR [esi]
c0020ab2:	e8 7c f3 ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c0020ab7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020abe:	89 c6                	mov    esi,eax
c0020ac0:	89 d7                	mov    edi,edx
c0020ac2:	e8 d8 f5 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020ac7:	57                   	push   edi
c0020ac8:	56                   	push   esi
c0020ac9:	52                   	push   edx
c0020aca:	50                   	push   eax
c0020acb:	e8 f2 f4 ff ff       	call   c001ffc2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020ad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ad4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020ad7:	83 c4 20             	add    esp,0x20
c0020ada:	e9 74 f7 ff ff       	jmp    c0020253 <Vm::x87Handler(regs*)+0x77>
c0020adf:	80 fa 04             	cmp    dl,0x4
c0020ae2:	75 2a                	jne    c0020b0e <Vm::x87Handler(regs*)+0x932>
c0020ae4:	51                   	push   ecx
c0020ae5:	51                   	push   ecx
c0020ae6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020ae9:	ff 36                	push   DWORD PTR [esi]
c0020aeb:	e8 43 f3 ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c0020af0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020af7:	89 c6                	mov    esi,eax
c0020af9:	89 d7                	mov    edi,edx
c0020afb:	e8 9f f5 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020b00:	57                   	push   edi
c0020b01:	56                   	push   esi
c0020b02:	52                   	push   edx
c0020b03:	50                   	push   eax
c0020b04:	e8 36 f5 ff ff       	call   c002003f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020b09:	e9 e2 00 00 00       	jmp    c0020bf0 <Vm::x87Handler(regs*)+0xa14>
c0020b0e:	80 fa 05             	cmp    dl,0x5
c0020b11:	75 28                	jne    c0020b3b <Vm::x87Handler(regs*)+0x95f>
c0020b13:	83 ec 0c             	sub    esp,0xc
c0020b16:	6a 00                	push   0x0
c0020b18:	e8 82 f5 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020b1d:	89 c7                	mov    edi,eax
c0020b1f:	89 d5                	mov    ebp,edx
c0020b21:	58                   	pop    eax
c0020b22:	5a                   	pop    edx
c0020b23:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b26:	ff 36                	push   DWORD PTR [esi]
c0020b28:	e8 06 f3 ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c0020b2d:	83 c4 10             	add    esp,0x10
c0020b30:	55                   	push   ebp
c0020b31:	57                   	push   edi
c0020b32:	52                   	push   edx
c0020b33:	50                   	push   eax
c0020b34:	e8 06 f5 ff ff       	call   c002003f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020b39:	eb 60                	jmp    c0020b9b <Vm::x87Handler(regs*)+0x9bf>
c0020b3b:	80 fa 06             	cmp    dl,0x6
c0020b3e:	75 2a                	jne    c0020b6a <Vm::x87Handler(regs*)+0x98e>
c0020b40:	51                   	push   ecx
c0020b41:	51                   	push   ecx
c0020b42:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b45:	ff 36                	push   DWORD PTR [esi]
c0020b47:	e8 e7 f2 ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c0020b4c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b53:	89 c6                	mov    esi,eax
c0020b55:	89 d7                	mov    edi,edx
c0020b57:	e8 43 f5 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020b5c:	57                   	push   edi
c0020b5d:	56                   	push   esi
c0020b5e:	52                   	push   edx
c0020b5f:	50                   	push   eax
c0020b60:	e8 08 f5 ff ff       	call   c002006d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020b65:	e9 86 00 00 00       	jmp    c0020bf0 <Vm::x87Handler(regs*)+0xa14>
c0020b6a:	31 c0                	xor    eax,eax
c0020b6c:	80 fa 07             	cmp    dl,0x7
c0020b6f:	0f 85 c8 00 00 00    	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c0020b75:	83 ec 0c             	sub    esp,0xc
c0020b78:	6a 00                	push   0x0
c0020b7a:	e8 20 f5 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020b7f:	89 c7                	mov    edi,eax
c0020b81:	89 d5                	mov    ebp,edx
c0020b83:	58                   	pop    eax
c0020b84:	5a                   	pop    edx
c0020b85:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b88:	ff 36                	push   DWORD PTR [esi]
c0020b8a:	e8 a4 f2 ff ff       	call   c001fe33 <Vm::fpu64ToInternal(unsigned long long)>
c0020b8f:	83 c4 10             	add    esp,0x10
c0020b92:	55                   	push   ebp
c0020b93:	57                   	push   edi
c0020b94:	52                   	push   edx
c0020b95:	50                   	push   eax
c0020b96:	e8 d2 f4 ff ff       	call   c002006d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020b9b:	83 c4 0c             	add    esp,0xc
c0020b9e:	eb 53                	jmp    c0020bf3 <Vm::x87Handler(regs*)+0xa17>
c0020ba0:	31 c0                	xor    eax,eax
c0020ba2:	80 fa 02             	cmp    dl,0x2
c0020ba5:	0f 85 92 00 00 00    	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c0020bab:	83 ec 0c             	sub    esp,0xc
c0020bae:	6a 00                	push   0x0
c0020bb0:	e8 ea f4 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020bb5:	59                   	pop    ecx
c0020bb6:	5f                   	pop    edi
c0020bb7:	52                   	push   edx
c0020bb8:	50                   	push   eax
c0020bb9:	e8 27 f2 ff ff       	call   c001fde5 <Vm::fpuInternalTo64(unsigned long long)>
c0020bbe:	eb 70                	jmp    c0020c30 <Vm::x87Handler(regs*)+0xa54>
c0020bc0:	31 c0                	xor    eax,eax
c0020bc2:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020bc7:	75 74                	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c0020bc9:	50                   	push   eax
c0020bca:	50                   	push   eax
c0020bcb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020bce:	31 d2                	xor    edx,edx
c0020bd0:	52                   	push   edx
c0020bd1:	50                   	push   eax
c0020bd2:	e8 f6 f2 ff ff       	call   c001fecd <Vm::fpuLongToFloat(long long)>
c0020bd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bde:	89 c6                	mov    esi,eax
c0020be0:	89 d7                	mov    edi,edx
c0020be2:	e8 b8 f4 ff ff       	call   c002009f <Vm::fpuGetReg(int)>
c0020be7:	57                   	push   edi
c0020be8:	56                   	push   esi
c0020be9:	52                   	push   edx
c0020bea:	50                   	push   eax
c0020beb:	e8 5e f4 ff ff       	call   c002004e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020bf0:	83 c4 1c             	add    esp,0x1c
c0020bf3:	52                   	push   edx
c0020bf4:	50                   	push   eax
c0020bf5:	6a 00                	push   0x0
c0020bf7:	e8 e6 f4 ff ff       	call   c00200e2 <Vm::fpuSetReg(int, unsigned long long)>
c0020bfc:	e9 f2 f7 ff ff       	jmp    c00203f3 <Vm::x87Handler(regs*)+0x217>
c0020c01:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020c05:	80 fa 05             	cmp    dl,0x5
c0020c08:	75 11                	jne    c0020c1b <Vm::x87Handler(regs*)+0xa3f>
c0020c0a:	55                   	push   ebp
c0020c0b:	55                   	push   ebp
c0020c0c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c0f:	ff 36                	push   DWORD PTR [esi]
c0020c11:	e8 81 f2 ff ff       	call   c001fe97 <Vm::fpuULongToFloat(unsigned long long)>
c0020c16:	e9 cf f7 ff ff       	jmp    c00203ea <Vm::x87Handler(regs*)+0x20e>
c0020c1b:	31 c0                	xor    eax,eax
c0020c1d:	80 fa 07             	cmp    dl,0x7
c0020c20:	75 1b                	jne    c0020c3d <Vm::x87Handler(regs*)+0xa61>
c0020c22:	e8 63 f5 ff ff       	call   c002018a <Vm::fpuPop()>
c0020c27:	51                   	push   ecx
c0020c28:	51                   	push   ecx
c0020c29:	52                   	push   edx
c0020c2a:	50                   	push   eax
c0020c2b:	e8 0c f2 ff ff       	call   c001fe3c <Vm::fpuFloatToLong(unsigned long long)>
c0020c30:	83 c4 10             	add    esp,0x10
c0020c33:	89 06                	mov    DWORD PTR [esi],eax
c0020c35:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020c38:	e9 f8 f7 ff ff       	jmp    c0020435 <Vm::x87Handler(regs*)+0x259>
c0020c3d:	83 c4 1c             	add    esp,0x1c
c0020c40:	5b                   	pop    ebx
c0020c41:	5e                   	pop    esi
c0020c42:	5f                   	pop    edi
c0020c43:	5d                   	pop    ebp
c0020c44:	c3                   	ret    

c0020c45 <__static_initialization_and_destruction_0(int, int)>:
c0020c45:	83 ec 0c             	sub    esp,0xc
c0020c48:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020c4d:	75 1a                	jne    c0020c69 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020c4f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020c57:	75 10                	jne    c0020c69 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020c59:	83 ec 0c             	sub    esp,0xc
c0020c5c:	68 40 25 03 c0       	push   0xc0032540
c0020c61:	e8 c6 8a 00 00       	call   c002972c <Vm::_FPUState::_FPUState()>
c0020c66:	83 c4 10             	add    esp,0x10
c0020c69:	90                   	nop
c0020c6a:	83 c4 0c             	add    esp,0xc
c0020c6d:	c3                   	ret    

c0020c6e <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020c6e:	83 ec 0c             	sub    esp,0xc
c0020c71:	83 ec 08             	sub    esp,0x8
c0020c74:	68 ff ff 00 00       	push   0xffff
c0020c79:	6a 01                	push   0x1
c0020c7b:	e8 c5 ff ff ff       	call   c0020c45 <__static_initialization_and_destruction_0(int, int)>
c0020c80:	83 c4 10             	add    esp,0x10
c0020c83:	83 c4 0c             	add    esp,0xc
c0020c86:	c3                   	ret    
c0020c87:	90                   	nop

c0020c88 <FAT::getName()>:
c0020c88:	b8 2c d3 02 c0       	mov    eax,0xc002d32c
c0020c8d:	c3                   	ret    

c0020c8e <FAT::tell(void*, unsigned long long*)>:
c0020c8e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020c93:	75 06                	jne    c0020c9b <FAT::tell(void*, unsigned long long*)+0xd>
c0020c95:	b8 04 00 00 00       	mov    eax,0x4
c0020c9a:	c3                   	ret    
c0020c9b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020ca0:	75 06                	jne    c0020ca8 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020ca2:	b8 04 00 00 00       	mov    eax,0x4
c0020ca7:	c3                   	ret    
c0020ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cac:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020caf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020cb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020cb6:	89 01                	mov    DWORD PTR [ecx],eax
c0020cb8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020cbb:	b8 00 00 00 00       	mov    eax,0x0
c0020cc0:	c3                   	ret    
c0020cc1:	90                   	nop

c0020cc2 <FAT::stat(void*, unsigned long long*)>:
c0020cc2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020cc7:	75 06                	jne    c0020ccf <FAT::stat(void*, unsigned long long*)+0xd>
c0020cc9:	b8 04 00 00 00       	mov    eax,0x4
c0020cce:	c3                   	ret    
c0020ccf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020cd4:	75 06                	jne    c0020cdc <FAT::stat(void*, unsigned long long*)+0x1a>
c0020cd6:	b8 04 00 00 00       	mov    eax,0x4
c0020cdb:	c3                   	ret    
c0020cdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ce0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020ce3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020ce6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020cea:	89 01                	mov    DWORD PTR [ecx],eax
c0020cec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020cef:	b8 00 00 00 00       	mov    eax,0x0
c0020cf4:	c3                   	ret    
c0020cf5:	90                   	nop

c0020cf6 <FAT::~FAT()>:
c0020cf6:	83 ec 0c             	sub    esp,0xc
c0020cf9:	ba bc d3 02 c0       	mov    edx,0xc002d3bc
c0020cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d02:	89 10                	mov    DWORD PTR [eax],edx
c0020d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d08:	83 ec 0c             	sub    esp,0xc
c0020d0b:	50                   	push   eax
c0020d0c:	e8 61 24 ff ff       	call   c0013172 <Filesystem::~Filesystem()>
c0020d11:	83 c4 10             	add    esp,0x10
c0020d14:	90                   	nop
c0020d15:	83 c4 0c             	add    esp,0xc
c0020d18:	c3                   	ret    
c0020d19:	90                   	nop

c0020d1a <FAT::~FAT()>:
c0020d1a:	83 ec 0c             	sub    esp,0xc
c0020d1d:	83 ec 0c             	sub    esp,0xc
c0020d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d24:	e8 cd ff ff ff       	call   c0020cf6 <FAT::~FAT()>
c0020d29:	83 c4 10             	add    esp,0x10
c0020d2c:	83 ec 08             	sub    esp,0x8
c0020d2f:	6a 08                	push   0x8
c0020d31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d35:	e8 29 20 ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0020d3a:	83 c4 10             	add    esp,0x10
c0020d3d:	83 c4 0c             	add    esp,0xc
c0020d40:	c3                   	ret    
c0020d41:	90                   	nop

c0020d42 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020d42:	83 ec 1c             	sub    esp,0x1c
c0020d45:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020d4c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020d51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d55:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c0020d5c:	83 f8 ff             	cmp    eax,0xffffffff
c0020d5f:	75 34                	jne    c0020d95 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020d61:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020d65:	88 c2                	mov    dl,al
c0020d67:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0020d6c:	01 d0                	add    eax,edx
c0020d6e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020d72:	8b 15 a0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325a0
c0020d78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d7c:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c0020d83:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0020d88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020d8c:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020d93:	eb 17                	jmp    c0020dac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020d95:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020d99:	88 c2                	mov    dl,al
c0020d9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d9f:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c0020da6:	01 d0                	add    eax,edx
c0020da8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020dac:	83 ec 04             	sub    esp,0x4
c0020daf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020db3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020db7:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020dbb:	50                   	push   eax
c0020dbc:	e8 59 5f fe ff       	call   c0006d1a <f_getlabel>
c0020dc1:	83 c4 10             	add    esp,0x10
c0020dc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dc8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020dcd:	75 07                	jne    c0020dd6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020dcf:	b8 00 00 00 00       	mov    eax,0x0
c0020dd4:	eb 05                	jmp    c0020ddb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020dd6:	b8 01 00 00 00       	mov    eax,0x1
c0020ddb:	83 c4 1c             	add    esp,0x1c
c0020dde:	c3                   	ret    
c0020ddf:	90                   	nop

c0020de0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020de0:	57                   	push   edi
c0020de1:	83 ec 58             	sub    esp,0x58
c0020de4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020dec:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020df0:	b9 0f 00 00 00       	mov    ecx,0xf
c0020df5:	b8 00 00 00 00       	mov    eax,0x0
c0020dfa:	fc                   	cld    
c0020dfb:	89 d7                	mov    edi,edx
c0020dfd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020dff:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e03:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c0020e0a:	83 f8 ff             	cmp    eax,0xffffffff
c0020e0d:	75 34                	jne    c0020e43 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020e0f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020e13:	88 c2                	mov    dl,al
c0020e15:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0020e1a:	01 d0                	add    eax,edx
c0020e1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e20:	8b 15 a0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325a0
c0020e26:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e2a:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c0020e31:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0020e36:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020e3a:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020e41:	eb 17                	jmp    c0020e5a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020e43:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020e47:	88 c2                	mov    dl,al
c0020e49:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e4d:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c0020e54:	01 d0                	add    eax,edx
c0020e56:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e5a:	83 ec 08             	sub    esp,0x8
c0020e5d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020e61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e65:	50                   	push   eax
c0020e66:	e8 fd fa fd ff       	call   c0000968 <strcat>
c0020e6b:	83 c4 10             	add    esp,0x10
c0020e6e:	83 ec 0c             	sub    esp,0xc
c0020e71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e75:	50                   	push   eax
c0020e76:	e8 8d 60 fe ff       	call   c0006f08 <f_setlabel>
c0020e7b:	83 c4 10             	add    esp,0x10
c0020e7e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020e82:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020e87:	75 07                	jne    c0020e90 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020e89:	b8 00 00 00 00       	mov    eax,0x0
c0020e8e:	eb 05                	jmp    c0020e95 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020e90:	b8 01 00 00 00       	mov    eax,0x1
c0020e95:	83 c4 58             	add    esp,0x58
c0020e98:	5f                   	pop    edi
c0020e99:	c3                   	ret    

c0020e9a <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020e9a:	83 ec 2c             	sub    esp,0x2c
c0020e9d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020ea5:	83 ec 08             	sub    esp,0x8
c0020ea8:	68 50 d3 02 c0       	push   0xc002d350
c0020ead:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020eb1:	e8 fe f9 fd ff       	call   c00008b4 <strcmp>
c0020eb6:	83 c4 10             	add    esp,0x10
c0020eb9:	85 c0                	test   eax,eax
c0020ebb:	0f 94 c0             	sete   al
c0020ebe:	84 c0                	test   al,al
c0020ec0:	74 0d                	je     c0020ecf <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020ec2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020eca:	e9 a6 00 00 00       	jmp    c0020f75 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ecf:	83 ec 08             	sub    esp,0x8
c0020ed2:	68 42 d3 02 c0       	push   0xc002d342
c0020ed7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020edb:	e8 d4 f9 fd ff       	call   c00008b4 <strcmp>
c0020ee0:	83 c4 10             	add    esp,0x10
c0020ee3:	85 c0                	test   eax,eax
c0020ee5:	0f 94 c0             	sete   al
c0020ee8:	84 c0                	test   al,al
c0020eea:	74 0a                	je     c0020ef6 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020eec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020ef4:	eb 7f                	jmp    c0020f75 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ef6:	83 ec 08             	sub    esp,0x8
c0020ef9:	68 48 d3 02 c0       	push   0xc002d348
c0020efe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f02:	e8 ad f9 fd ff       	call   c00008b4 <strcmp>
c0020f07:	83 c4 10             	add    esp,0x10
c0020f0a:	85 c0                	test   eax,eax
c0020f0c:	0f 94 c0             	sete   al
c0020f0f:	84 c0                	test   al,al
c0020f11:	74 0a                	je     c0020f1d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020f13:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020f1b:	eb 58                	jmp    c0020f75 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f1d:	83 ec 08             	sub    esp,0x8
c0020f20:	68 8c 9e 02 c0       	push   0xc0029e8c
c0020f25:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f29:	e8 86 f9 fd ff       	call   c00008b4 <strcmp>
c0020f2e:	83 c4 10             	add    esp,0x10
c0020f31:	85 c0                	test   eax,eax
c0020f33:	0f 94 c0             	sete   al
c0020f36:	84 c0                	test   al,al
c0020f38:	74 0a                	je     c0020f44 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020f3a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020f42:	eb 31                	jmp    c0020f75 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f44:	83 ec 08             	sub    esp,0x8
c0020f47:	68 4e d3 02 c0       	push   0xc002d34e
c0020f4c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f50:	e8 5f f9 fd ff       	call   c00008b4 <strcmp>
c0020f55:	83 c4 10             	add    esp,0x10
c0020f58:	85 c0                	test   eax,eax
c0020f5a:	0f 94 c0             	sete   al
c0020f5d:	84 c0                	test   al,al
c0020f5f:	74 0a                	je     c0020f6b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020f61:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020f69:	eb 0a                	jmp    c0020f75 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f6b:	b8 08 00 00 00       	mov    eax,0x8
c0020f70:	e9 04 01 00 00       	jmp    c0021079 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f75:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020f7c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020f81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f85:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c0020f8c:	83 f8 ff             	cmp    eax,0xffffffff
c0020f8f:	75 34                	jne    c0020fc5 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020f91:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020f95:	88 c2                	mov    dl,al
c0020f97:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0020f9c:	01 d0                	add    eax,edx
c0020f9e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020fa2:	8b 15 a0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325a0
c0020fa8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fac:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c0020fb3:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0020fb8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020fbc:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020fc3:	eb 17                	jmp    c0020fdc <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020fc5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020fc9:	88 c2                	mov    dl,al
c0020fcb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fcf:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c0020fd6:	01 d0                	add    eax,edx
c0020fd8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020fdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fe0:	88 04 24             	mov    BYTE PTR [esp],al
c0020fe3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020feb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020ff3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020ff8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021000:	83 ec 0c             	sub    esp,0xc
c0021003:	68 00 20 00 00       	push   0x2000
c0021008:	e8 9b e8 fe ff       	call   c000f8a8 <malloc>
c002100d:	83 c4 10             	add    esp,0x10
c0021010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021014:	68 00 20 00 00       	push   0x2000
c0021019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002101d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021021:	50                   	push   eax
c0021022:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0021026:	50                   	push   eax
c0021027:	e8 27 63 fe ff       	call   c0007353 <f_mkfs>
c002102c:	83 c4 10             	add    esp,0x10
c002102f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021033:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021038:	75 07                	jne    c0021041 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002103a:	b8 00 00 00 00       	mov    eax,0x0
c002103f:	eb 38                	jmp    c0021079 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021041:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0021046:	75 17                	jne    c002105f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0021048:	83 ec 0c             	sub    esp,0xc
c002104b:	68 8c d3 02 c0       	push   0xc002d38c
c0021050:	e8 ee 1d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0021055:	83 c4 10             	add    esp,0x10
c0021058:	b8 09 00 00 00       	mov    eax,0x9
c002105d:	eb 1a                	jmp    c0021079 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002105f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021063:	83 ec 08             	sub    esp,0x8
c0021066:	50                   	push   eax
c0021067:	68 54 d3 02 c0       	push   0xc002d354
c002106c:	e8 d2 1d ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0021071:	83 c4 10             	add    esp,0x10
c0021074:	b8 01 00 00 00       	mov    eax,0x1
c0021079:	83 c4 2c             	add    esp,0x2c
c002107c:	c3                   	ret    
c002107d:	90                   	nop

c002107e <FAT::tryMount(LogicalDisk*, int)>:
c002107e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0021084:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0021089:	83 f8 14             	cmp    eax,0x14
c002108c:	75 17                	jne    c00210a5 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002108e:	83 ec 0c             	sub    esp,0xc
c0021091:	68 66 d3 02 c0       	push   0xc002d366
c0021096:	e8 72 97 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c002109b:	83 c4 10             	add    esp,0x10
c002109e:	b0 00                	mov    al,0x0
c00210a0:	e9 d7 01 00 00       	jmp    c002127c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00210a5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00210ac:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00210b8:	3d 00 02 00 00       	cmp    eax,0x200
c00210bd:	74 07                	je     c00210c6 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00210bf:	b0 00                	mov    al,0x0
c00210c1:	e9 b6 01 00 00       	jmp    c002127c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00210c6:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00210ce:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00210d5:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c00210dc:	83 f8 ff             	cmp    eax,0xffffffff
c00210df:	74 07                	je     c00210e8 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00210e1:	b0 01                	mov    al,0x1
c00210e3:	e9 94 01 00 00       	jmp    c002127c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00210e8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00210f2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00210fa:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0021101:	88 c2                	mov    dl,al
c0021103:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0021108:	01 d0                	add    eax,edx
c002110a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0021111:	8b 15 a0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325a0
c0021117:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002111e:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c0021125:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c002112a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021131:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0021138:	83 ec 0c             	sub    esp,0xc
c002113b:	68 54 02 00 00       	push   0x254
c0021140:	e8 63 e7 fe ff       	call   c000f8a8 <malloc>
c0021145:	83 c4 10             	add    esp,0x10
c0021148:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002114f:	83 ec 04             	sub    esp,0x4
c0021152:	6a 00                	push   0x0
c0021154:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002115b:	50                   	push   eax
c002115c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021163:	e8 a9 3d fe ff       	call   c0004f11 <f_mount>
c0021168:	83 c4 10             	add    esp,0x10
c002116b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021172:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002117a:	74 19                	je     c0021195 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002117c:	83 ec 0c             	sub    esp,0xc
c002117f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021186:	e8 3d e7 fe ff       	call   c000f8c8 <rfree>
c002118b:	83 c4 10             	add    esp,0x10
c002118e:	b0 00                	mov    al,0x0
c0021190:	e9 e7 00 00 00       	jmp    c002127c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021195:	83 ec 04             	sub    esp,0x4
c0021198:	68 00 01 00 00       	push   0x100
c002119d:	6a 00                	push   0x0
c002119f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00211a6:	50                   	push   eax
c00211a7:	e8 c0 f5 fd ff       	call   c000076c <memset>
c00211ac:	83 c4 10             	add    esp,0x10
c00211af:	83 ec 08             	sub    esp,0x8
c00211b2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00211b9:	50                   	push   eax
c00211ba:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00211c1:	50                   	push   eax
c00211c2:	e8 a1 f7 fd ff       	call   c0000968 <strcat>
c00211c7:	83 c4 10             	add    esp,0x10
c00211ca:	83 ec 08             	sub    esp,0x8
c00211cd:	68 74 d3 02 c0       	push   0xc002d374
c00211d2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00211d9:	50                   	push   eax
c00211da:	e8 89 f7 fd ff       	call   c0000968 <strcat>
c00211df:	83 c4 10             	add    esp,0x10
c00211e2:	83 ec 04             	sub    esp,0x4
c00211e5:	6a 01                	push   0x1
c00211e7:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00211ee:	50                   	push   eax
c00211ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00211f3:	50                   	push   eax
c00211f4:	e8 7a 3d fe ff       	call   c0004f73 <f_open>
c00211f9:	83 c4 10             	add    esp,0x10
c00211fc:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021203:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002120a:	85 c0                	test   eax,eax
c002120c:	74 0a                	je     c0021218 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002120e:	78 2d                	js     c002123d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021210:	83 e8 04             	sub    eax,0x4
c0021213:	83 f8 01             	cmp    eax,0x1
c0021216:	77 25                	ja     c002123d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021218:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021220:	83 ec 0c             	sub    esp,0xc
c0021223:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021227:	50                   	push   eax
c0021228:	e8 98 48 fe ff       	call   c0005ac5 <f_close>
c002122d:	83 c4 10             	add    esp,0x10
c0021230:	90                   	nop
c0021231:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0021239:	74 3a                	je     c0021275 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002123b:	eb 2d                	jmp    c002126a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002123d:	83 ec 0c             	sub    esp,0xc
c0021240:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021247:	e8 7c e6 fe ff       	call   c000f8c8 <rfree>
c002124c:	83 c4 10             	add    esp,0x10
c002124f:	83 ec 04             	sub    esp,0x4
c0021252:	6a 00                	push   0x0
c0021254:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002125b:	50                   	push   eax
c002125c:	6a 00                	push   0x0
c002125e:	e8 ae 3c fe ff       	call   c0004f11 <f_mount>
c0021263:	83 c4 10             	add    esp,0x10
c0021266:	b0 00                	mov    al,0x0
c0021268:	eb 12                	jmp    c002127c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002126a:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c002126f:	40                   	inc    eax
c0021270:	a3 a0 25 03 c0       	mov    ds:0xc00325a0,eax
c0021275:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002127c:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021282:	c3                   	ret    
c0021283:	90                   	nop

c0021284 <FAT::getFileFirstSector(char const*)>:
c0021284:	53                   	push   ebx
c0021285:	83 ec 28             	sub    esp,0x28
c0021288:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0021290:	83 ec 0c             	sub    esp,0xc
c0021293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021297:	e8 0c e6 fe ff       	call   c000f8a8 <malloc>
c002129c:	83 c4 10             	add    esp,0x10
c002129f:	89 c3                	mov    ebx,eax
c00212a1:	a1 d0 24 03 c0       	mov    eax,ds:0xc00324d0
c00212a6:	83 ec 04             	sub    esp,0x4
c00212a9:	50                   	push   eax
c00212aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00212ae:	53                   	push   ebx
c00212af:	e8 ee 20 ff ff       	call   c00133a2 <File::File(char const*, Process*)>
c00212b4:	83 c4 10             	add    esp,0x10
c00212b7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00212bb:	83 ec 08             	sub    esp,0x8
c00212be:	6a 01                	push   0x1
c00212c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00212c4:	e8 3d 21 ff ff       	call   c0013406 <File::open(FileOpenMode)>
c00212c9:	83 c4 10             	add    esp,0x10
c00212cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00212d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00212d2:	83 c0 0c             	add    eax,0xc
c00212d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00212d7:	83 ec 0c             	sub    esp,0xc
c00212da:	8d 54 24 14          	lea    edx,[esp+0x14]
c00212de:	52                   	push   edx
c00212df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00212e3:	52                   	push   edx
c00212e4:	6a 00                	push   0x0
c00212e6:	6a 04                	push   0x4
c00212e8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00212ec:	ff d0                	call   eax
c00212ee:	83 c4 20             	add    esp,0x20
c00212f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00212f5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00212fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00212ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021303:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021306:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021309:	83 ec 04             	sub    esp,0x4
c002130c:	52                   	push   edx
c002130d:	50                   	push   eax
c002130e:	68 7f d3 02 c0       	push   0xc002d37f
c0021313:	e8 2b 1b ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0021318:	83 c4 10             	add    esp,0x10
c002131b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002131f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021322:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021325:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021329:	83 ec 0c             	sub    esp,0xc
c002132c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021330:	e8 2f 21 ff ff       	call   c0013464 <File::close()>
c0021335:	83 c4 10             	add    esp,0x10
c0021338:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002133c:	ba 00 00 00 00       	mov    edx,0x0
c0021341:	83 c4 28             	add    esp,0x28
c0021344:	5b                   	pop    ebx
c0021345:	c3                   	ret    

c0021346 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021346:	57                   	push   edi
c0021347:	56                   	push   esi
c0021348:	81 ec 54 02 00 00    	sub    esp,0x254
c002134e:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0021356:	74 0a                	je     c0021362 <FAT::readDir(void*, unsigned long, void*, int*)+0x1c>
c0021358:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0021360:	75 0a                	jne    c002136c <FAT::readDir(void*, unsigned long, void*, int*)+0x26>
c0021362:	b8 04 00 00 00       	mov    eax,0x4
c0021367:	e9 20 01 00 00       	jmp    c002148c <FAT::readDir(void*, unsigned long, void*, int*)+0x146>
c002136c:	83 ec 08             	sub    esp,0x8
c002136f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0021376:	50                   	push   eax
c0021377:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002137e:	e8 4c 4d fe ff       	call   c00060cf <f_readdir>
c0021383:	83 c4 10             	add    esp,0x10
c0021386:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002138d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0021394:	83 ec 0c             	sub    esp,0xc
c0021397:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002139e:	83 c0 1a             	add    eax,0x1a
c00213a1:	50                   	push   eax
c00213a2:	e8 e1 f3 fd ff       	call   c0000788 <strlen>
c00213a7:	83 c4 10             	add    esp,0x10
c00213aa:	ba 00 00 00 00       	mov    edx,0x0
c00213af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00213b7:	8a 84 24 24 01 00 00 	mov    al,BYTE PTR [esp+0x124]
c00213be:	0f b6 c0             	movzx  eax,al
c00213c1:	83 e0 10             	and    eax,0x10
c00213c4:	74 07                	je     c00213cd <FAT::readDir(void*, unsigned long, void*, int*)+0x87>
c00213c6:	b8 02 00 00 00       	mov    eax,0x2
c00213cb:	eb 05                	jmp    c00213d2 <FAT::readDir(void*, unsigned long, void*, int*)+0x8c>
c00213cd:	b8 01 00 00 00       	mov    eax,0x1
c00213d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00213d6:	83 ec 08             	sub    esp,0x8
c00213d9:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00213e0:	83 c0 1a             	add    eax,0x1a
c00213e3:	50                   	push   eax
c00213e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213e8:	83 c0 10             	add    eax,0x10
c00213eb:	50                   	push   eax
c00213ec:	e8 37 f4 fd ff       	call   c0000828 <strcpy>
c00213f1:	83 c4 10             	add    esp,0x10
c00213f4:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00213fb:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0021402:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021406:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002140d:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0021414:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002141b:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0021422:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0021429:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0021430:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0021437:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002143e:	89 c6                	mov    esi,eax
c0021440:	89 d7                	mov    edi,edx
c0021442:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021444:	89 f8                	mov    eax,edi
c0021446:	89 f2                	mov    edx,esi
c0021448:	89 94 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],edx
c002144f:	89 84 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],eax
c0021456:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c002145d:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021463:	8a 84 24 32 01 00 00 	mov    al,BYTE PTR [esp+0x132]
c002146a:	84 c0                	test   al,al
c002146c:	75 07                	jne    c0021475 <FAT::readDir(void*, unsigned long, void*, int*)+0x12f>
c002146e:	b8 07 00 00 00       	mov    eax,0x7
c0021473:	eb 17                	jmp    c002148c <FAT::readDir(void*, unsigned long, void*, int*)+0x146>
c0021475:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002147c:	85 c0                	test   eax,eax
c002147e:	75 07                	jne    c0021487 <FAT::readDir(void*, unsigned long, void*, int*)+0x141>
c0021480:	b8 00 00 00 00       	mov    eax,0x0
c0021485:	eb 05                	jmp    c002148c <FAT::readDir(void*, unsigned long, void*, int*)+0x146>
c0021487:	b8 01 00 00 00       	mov    eax,0x1
c002148c:	81 c4 54 02 00 00    	add    esp,0x254
c0021492:	5e                   	pop    esi
c0021493:	5f                   	pop    edi
c0021494:	c3                   	ret    
c0021495:	90                   	nop

c0021496 <FAT::read(void*, unsigned long, void*, int*)>:
c0021496:	83 ec 1c             	sub    esp,0x1c
c0021499:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002149e:	74 07                	je     c00214a7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00214a0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00214a5:	75 07                	jne    c00214ae <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00214a7:	b8 04 00 00 00       	mov    eax,0x4
c00214ac:	eb 3d                	jmp    c00214eb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00214ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00214b2:	50                   	push   eax
c00214b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00214b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00214bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214bf:	e8 eb 3e fe ff       	call   c00053af <f_read>
c00214c4:	83 c4 10             	add    esp,0x10
c00214c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214cf:	89 c2                	mov    edx,eax
c00214d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00214d5:	89 10                	mov    DWORD PTR [eax],edx
c00214d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214db:	85 c0                	test   eax,eax
c00214dd:	75 07                	jne    c00214e6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00214df:	b8 00 00 00 00       	mov    eax,0x0
c00214e4:	eb 05                	jmp    c00214eb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00214e6:	b8 01 00 00 00       	mov    eax,0x1
c00214eb:	83 c4 1c             	add    esp,0x1c
c00214ee:	c3                   	ret    
c00214ef:	90                   	nop

c00214f0 <FAT::write(void*, unsigned long, void*, int*)>:
c00214f0:	83 ec 1c             	sub    esp,0x1c
c00214f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00214f8:	74 07                	je     c0021501 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00214fa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00214ff:	75 07                	jne    c0021508 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0021501:	b8 04 00 00 00       	mov    eax,0x4
c0021506:	eb 3d                	jmp    c0021545 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021508:	8d 44 24 08          	lea    eax,[esp+0x8]
c002150c:	50                   	push   eax
c002150d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021511:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021515:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021519:	e8 11 41 fe ff       	call   c000562f <f_write>
c002151e:	83 c4 10             	add    esp,0x10
c0021521:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021525:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021529:	89 c2                	mov    edx,eax
c002152b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002152f:	89 10                	mov    DWORD PTR [eax],edx
c0021531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021535:	85 c0                	test   eax,eax
c0021537:	75 07                	jne    c0021540 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0021539:	b8 00 00 00 00       	mov    eax,0x0
c002153e:	eb 05                	jmp    c0021545 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021540:	b8 01 00 00 00       	mov    eax,0x1
c0021545:	83 c4 1c             	add    esp,0x1c
c0021548:	c3                   	ret    
c0021549:	90                   	nop

c002154a <FAT::close(void*)>:
c002154a:	83 ec 1c             	sub    esp,0x1c
c002154d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021552:	75 07                	jne    c002155b <FAT::close(void*)+0x11>
c0021554:	b8 04 00 00 00       	mov    eax,0x4
c0021559:	eb 36                	jmp    c0021591 <FAT::close(void*)+0x47>
c002155b:	83 ec 0c             	sub    esp,0xc
c002155e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021562:	e8 5e 45 fe ff       	call   c0005ac5 <f_close>
c0021567:	83 c4 10             	add    esp,0x10
c002156a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002156e:	83 ec 0c             	sub    esp,0xc
c0021571:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021575:	e8 3e e3 fe ff       	call   c000f8b8 <free>
c002157a:	83 c4 10             	add    esp,0x10
c002157d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021581:	85 c0                	test   eax,eax
c0021583:	75 07                	jne    c002158c <FAT::close(void*)+0x42>
c0021585:	b8 00 00 00 00       	mov    eax,0x0
c002158a:	eb 05                	jmp    c0021591 <FAT::close(void*)+0x47>
c002158c:	b8 01 00 00 00       	mov    eax,0x1
c0021591:	83 c4 1c             	add    esp,0x1c
c0021594:	c3                   	ret    
c0021595:	90                   	nop

c0021596 <FAT::closeDir(void*)>:
c0021596:	83 ec 1c             	sub    esp,0x1c
c0021599:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002159e:	75 07                	jne    c00215a7 <FAT::closeDir(void*)+0x11>
c00215a0:	b8 04 00 00 00       	mov    eax,0x4
c00215a5:	eb 36                	jmp    c00215dd <FAT::closeDir(void*)+0x47>
c00215a7:	83 ec 0c             	sub    esp,0xc
c00215aa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215ae:	e8 fa 4a fe ff       	call   c00060ad <f_closedir>
c00215b3:	83 c4 10             	add    esp,0x10
c00215b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215ba:	83 ec 0c             	sub    esp,0xc
c00215bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215c1:	e8 f2 e2 fe ff       	call   c000f8b8 <free>
c00215c6:	83 c4 10             	add    esp,0x10
c00215c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215cd:	85 c0                	test   eax,eax
c00215cf:	75 07                	jne    c00215d8 <FAT::closeDir(void*)+0x42>
c00215d1:	b8 00 00 00 00       	mov    eax,0x0
c00215d6:	eb 05                	jmp    c00215dd <FAT::closeDir(void*)+0x47>
c00215d8:	b8 01 00 00 00       	mov    eax,0x1
c00215dd:	83 c4 1c             	add    esp,0x1c
c00215e0:	c3                   	ret    
c00215e1:	90                   	nop

c00215e2 <FAT::seek(void*, unsigned long long)>:
c00215e2:	83 ec 2c             	sub    esp,0x2c
c00215e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00215f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215f5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00215fa:	75 07                	jne    c0021603 <FAT::seek(void*, unsigned long long)+0x21>
c00215fc:	b8 04 00 00 00       	mov    eax,0x4
c0021601:	eb 2f                	jmp    c0021632 <FAT::seek(void*, unsigned long long)+0x50>
c0021603:	83 ec 04             	sub    esp,0x4
c0021606:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002160a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002160e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021612:	e8 dd 44 fe ff       	call   c0005af4 <f_lseek>
c0021617:	83 c4 10             	add    esp,0x10
c002161a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002161e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021622:	85 c0                	test   eax,eax
c0021624:	75 07                	jne    c002162d <FAT::seek(void*, unsigned long long)+0x4b>
c0021626:	b8 00 00 00 00       	mov    eax,0x0
c002162b:	eb 05                	jmp    c0021632 <FAT::seek(void*, unsigned long long)+0x50>
c002162d:	b8 01 00 00 00       	mov    eax,0x1
c0021632:	83 c4 2c             	add    esp,0x2c
c0021635:	c3                   	ret    

c0021636 <fatWrapperReadDisk>:
c0021636:	83 ec 1c             	sub    esp,0x1c
c0021639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002163d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021645:	89 04 24             	mov    DWORD PTR [esp],eax
c0021648:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002164c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021650:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021655:	8b 04 85 80 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a80]
c002165c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021660:	83 ec 0c             	sub    esp,0xc
c0021663:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021667:	52                   	push   edx
c0021668:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002166c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021670:	50                   	push   eax
c0021671:	e8 44 51 ff ff       	call   c00167ba <LogicalDisk::read(unsigned long long, int, void*)>
c0021676:	83 c4 20             	add    esp,0x20
c0021679:	83 c4 1c             	add    esp,0x1c
c002167c:	c3                   	ret    

c002167d <fatWrapperWriteDisk>:
c002167d:	83 ec 1c             	sub    esp,0x1c
c0021680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021684:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021688:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002168c:	89 04 24             	mov    DWORD PTR [esp],eax
c002168f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021693:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021697:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002169c:	8b 04 85 80 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a80]
c00216a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00216a7:	83 ec 0c             	sub    esp,0xc
c00216aa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216ae:	52                   	push   edx
c00216af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00216b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00216b7:	50                   	push   eax
c00216b8:	e8 69 51 ff ff       	call   c0016826 <LogicalDisk::write(unsigned long long, int, void*)>
c00216bd:	83 c4 20             	add    esp,0x20
c00216c0:	83 c4 1c             	add    esp,0x1c
c00216c3:	c3                   	ret    

c00216c4 <fatWrapperIoctl>:
c00216c4:	53                   	push   ebx
c00216c5:	83 ec 28             	sub    esp,0x28
c00216c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00216cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00216d0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00216d4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00216d8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00216dd:	75 31                	jne    c0021710 <fatWrapperIoctl+0x4c>
c00216df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00216e7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216ec:	8b 04 85 80 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a80]
c00216f3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00216f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00216ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021703:	66 89 02             	mov    WORD PTR [edx],ax
c0021706:	b8 00 00 00 00       	mov    eax,0x0
c002170b:	e9 b2 00 00 00       	jmp    c00217c2 <fatWrapperIoctl+0xfe>
c0021710:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021715:	75 6a                	jne    c0021781 <fatWrapperIoctl+0xbd>
c0021717:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002171b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002171f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021724:	8b 04 85 80 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a80]
c002172b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021731:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021737:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002173d:	89 c8                	mov    eax,ecx
c002173f:	89 da                	mov    edx,ebx
c0021741:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021745:	c1 e0 0a             	shl    eax,0xa
c0021748:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002174d:	8b 0c 8d 80 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a80]
c0021754:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002175a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021760:	89 cb                	mov    ebx,ecx
c0021762:	c1 fb 1f             	sar    ebx,0x1f
c0021765:	53                   	push   ebx
c0021766:	51                   	push   ecx
c0021767:	52                   	push   edx
c0021768:	50                   	push   eax
c0021769:	e8 76 5b 00 00       	call   c00272e4 <__udivdi3>
c002176e:	83 c4 10             	add    esp,0x10
c0021771:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021775:	89 01                	mov    DWORD PTR [ecx],eax
c0021777:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002177a:	b8 00 00 00 00       	mov    eax,0x0
c002177f:	eb 41                	jmp    c00217c2 <fatWrapperIoctl+0xfe>
c0021781:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021786:	75 07                	jne    c002178f <fatWrapperIoctl+0xcb>
c0021788:	b8 00 00 00 00       	mov    eax,0x0
c002178d:	eb 33                	jmp    c00217c2 <fatWrapperIoctl+0xfe>
c002178f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021794:	75 19                	jne    c00217af <fatWrapperIoctl+0xeb>
c0021796:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002179a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002179e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217a2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00217a8:	b8 00 00 00 00       	mov    eax,0x0
c00217ad:	eb 13                	jmp    c00217c2 <fatWrapperIoctl+0xfe>
c00217af:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00217b4:	75 07                	jne    c00217bd <fatWrapperIoctl+0xf9>
c00217b6:	b8 00 00 00 00       	mov    eax,0x0
c00217bb:	eb 05                	jmp    c00217c2 <fatWrapperIoctl+0xfe>
c00217bd:	b8 04 00 00 00       	mov    eax,0x4
c00217c2:	83 c4 28             	add    esp,0x28
c00217c5:	5b                   	pop    ebx
c00217c6:	c3                   	ret    
c00217c7:	90                   	nop

c00217c8 <FAT::FAT()>:
c00217c8:	83 ec 1c             	sub    esp,0x1c
c00217cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217cf:	83 ec 0c             	sub    esp,0xc
c00217d2:	50                   	push   eax
c00217d3:	e8 76 19 ff ff       	call   c001314e <Filesystem::Filesystem()>
c00217d8:	83 c4 10             	add    esp,0x10
c00217db:	ba bc d3 02 c0       	mov    edx,0xc002d3bc
c00217e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217e4:	89 10                	mov    DWORD PTR [eax],edx
c00217e6:	c7 05 a0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325a0,0x0
c00217f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217f8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00217fd:	7f 15                	jg     c0021814 <FAT::FAT()+0x4c>
c00217ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021803:	c7 04 85 c0 25 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcda40],0xffffffff
c002180e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021812:	eb e4                	jmp    c00217f8 <FAT::FAT()+0x30>
c0021814:	90                   	nop
c0021815:	83 c4 1c             	add    esp,0x1c
c0021818:	c3                   	ret    
c0021819:	90                   	nop

c002181a <FAT::fixFilepath(char*)>:
c002181a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002181e:	8a 00                	mov    al,BYTE PTR [eax]
c0021820:	3c 40                	cmp    al,0x40
c0021822:	7e 2c                	jle    c0021850 <FAT::fixFilepath(char*)+0x36>
c0021824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021828:	8a 00                	mov    al,BYTE PTR [eax]
c002182a:	83 e8 41             	sub    eax,0x41
c002182d:	88 c2                	mov    dl,al
c002182f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021833:	88 10                	mov    BYTE PTR [eax],dl
c0021835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021839:	8a 00                	mov    al,BYTE PTR [eax]
c002183b:	0f be c0             	movsx  eax,al
c002183e:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c0021845:	83 c0 30             	add    eax,0x30
c0021848:	88 c2                	mov    dl,al
c002184a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002184e:	88 10                	mov    BYTE PTR [eax],dl
c0021850:	90                   	nop
c0021851:	c3                   	ret    

c0021852 <FAT::open(char const*, void**, FileOpenMode)>:
c0021852:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021858:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021860:	74 0a                	je     c002186c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021862:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002186a:	75 0a                	jne    c0021876 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002186c:	b8 04 00 00 00       	mov    eax,0x4
c0021871:	e9 fd 00 00 00       	jmp    c0021973 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021876:	83 ec 08             	sub    esp,0x8
c0021879:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021880:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021884:	50                   	push   eax
c0021885:	e8 9e ef fd ff       	call   c0000828 <strcpy>
c002188a:	83 c4 10             	add    esp,0x10
c002188d:	83 ec 08             	sub    esp,0x8
c0021890:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021894:	50                   	push   eax
c0021895:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002189c:	e8 79 ff ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c00218a1:	83 c4 10             	add    esp,0x10
c00218a4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00218ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00218b3:	83 e0 01             	and    eax,0x1
c00218b6:	74 08                	je     c00218c0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00218b8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00218c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00218c7:	83 e0 04             	and    eax,0x4
c00218ca:	74 10                	je     c00218dc <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00218cc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00218d4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00218dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00218e3:	83 e0 02             	and    eax,0x2
c00218e6:	74 08                	je     c00218f0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00218e8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00218f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00218f7:	83 e0 08             	and    eax,0x8
c00218fa:	74 08                	je     c0021904 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00218fc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021904:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002190b:	83 e0 10             	and    eax,0x10
c002190e:	74 08                	je     c0021918 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021910:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021918:	83 ec 0c             	sub    esp,0xc
c002191b:	68 50 02 00 00       	push   0x250
c0021920:	e8 83 df fe ff       	call   c000f8a8 <malloc>
c0021925:	83 c4 10             	add    esp,0x10
c0021928:	89 c2                	mov    edx,eax
c002192a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021931:	89 10                	mov    DWORD PTR [eax],edx
c0021933:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002193b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021942:	8b 00                	mov    eax,DWORD PTR [eax]
c0021944:	83 ec 04             	sub    esp,0x4
c0021947:	52                   	push   edx
c0021948:	8d 54 24 10          	lea    edx,[esp+0x10]
c002194c:	52                   	push   edx
c002194d:	50                   	push   eax
c002194e:	e8 20 36 fe ff       	call   c0004f73 <f_open>
c0021953:	83 c4 10             	add    esp,0x10
c0021956:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002195d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021965:	74 07                	je     c002196e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021967:	b8 01 00 00 00       	mov    eax,0x1
c002196c:	eb 05                	jmp    c0021973 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002196e:	b8 00 00 00 00       	mov    eax,0x0
c0021973:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021979:	c3                   	ret    

c002197a <FAT::openDir(char const*, void**)>:
c002197a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021980:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021988:	74 0a                	je     c0021994 <FAT::openDir(char const*, void**)+0x1a>
c002198a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021992:	75 07                	jne    c002199b <FAT::openDir(char const*, void**)+0x21>
c0021994:	b8 04 00 00 00       	mov    eax,0x4
c0021999:	eb 7d                	jmp    c0021a18 <FAT::openDir(char const*, void**)+0x9e>
c002199b:	83 ec 08             	sub    esp,0x8
c002199e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219a9:	50                   	push   eax
c00219aa:	e8 79 ee fd ff       	call   c0000828 <strcpy>
c00219af:	83 c4 10             	add    esp,0x10
c00219b2:	83 ec 08             	sub    esp,0x8
c00219b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219b9:	50                   	push   eax
c00219ba:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219c1:	e8 54 fe ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c00219c6:	83 c4 10             	add    esp,0x10
c00219c9:	83 ec 0c             	sub    esp,0xc
c00219cc:	6a 4c                	push   0x4c
c00219ce:	e8 d5 de fe ff       	call   c000f8a8 <malloc>
c00219d3:	83 c4 10             	add    esp,0x10
c00219d6:	89 c2                	mov    edx,eax
c00219d8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00219df:	89 10                	mov    DWORD PTR [eax],edx
c00219e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00219e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00219ea:	83 ec 08             	sub    esp,0x8
c00219ed:	8d 54 24 14          	lea    edx,[esp+0x14]
c00219f1:	52                   	push   edx
c00219f2:	50                   	push   eax
c00219f3:	e8 b3 45 fe ff       	call   c0005fab <f_opendir>
c00219f8:	83 c4 10             	add    esp,0x10
c00219fb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a02:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021a0a:	74 07                	je     c0021a13 <FAT::openDir(char const*, void**)+0x99>
c0021a0c:	b8 01 00 00 00       	mov    eax,0x1
c0021a11:	eb 05                	jmp    c0021a18 <FAT::openDir(char const*, void**)+0x9e>
c0021a13:	b8 00 00 00 00       	mov    eax,0x0
c0021a18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a1e:	c3                   	ret    
c0021a1f:	90                   	nop

c0021a20 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021a20:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021a26:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021a2e:	75 0a                	jne    c0021a3a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021a30:	b8 04 00 00 00       	mov    eax,0x4
c0021a35:	e9 c9 00 00 00       	jmp    c0021b03 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a3a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021a42:	75 0a                	jne    c0021a4e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021a44:	b8 04 00 00 00       	mov    eax,0x4
c0021a49:	e9 b5 00 00 00       	jmp    c0021b03 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a4e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021a56:	75 0a                	jne    c0021a62 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021a58:	b8 04 00 00 00       	mov    eax,0x4
c0021a5d:	e9 a1 00 00 00       	jmp    c0021b03 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a62:	83 ec 08             	sub    esp,0x8
c0021a65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021a6c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021a73:	50                   	push   eax
c0021a74:	e8 af ed fd ff       	call   c0000828 <strcpy>
c0021a79:	83 c4 10             	add    esp,0x10
c0021a7c:	83 ec 08             	sub    esp,0x8
c0021a7f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021a86:	50                   	push   eax
c0021a87:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021a8e:	e8 87 fd ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c0021a93:	83 c4 10             	add    esp,0x10
c0021a96:	83 ec 08             	sub    esp,0x8
c0021a99:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a9d:	50                   	push   eax
c0021a9e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021aa5:	50                   	push   eax
c0021aa6:	e8 bf 46 fe ff       	call   c000616a <f_stat>
c0021aab:	83 c4 10             	add    esp,0x10
c0021aae:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021ab5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021abc:	85 c0                	test   eax,eax
c0021abe:	74 07                	je     c0021ac7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021ac0:	83 f8 04             	cmp    eax,0x4
c0021ac3:	74 32                	je     c0021af7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021ac5:	eb 37                	jmp    c0021afe <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021ac7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021acb:	0f b6 c0             	movzx  eax,al
c0021ace:	83 e0 10             	and    eax,0x10
c0021ad1:	0f 95 c2             	setne  dl
c0021ad4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021adb:	88 10                	mov    BYTE PTR [eax],dl
c0021add:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ae0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ae4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021aeb:	89 01                	mov    DWORD PTR [ecx],eax
c0021aed:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021af0:	b8 00 00 00 00       	mov    eax,0x0
c0021af5:	eb 0c                	jmp    c0021b03 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021af7:	b8 02 00 00 00       	mov    eax,0x2
c0021afc:	eb 05                	jmp    c0021b03 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021afe:	b8 01 00 00 00       	mov    eax,0x1
c0021b03:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021b09:	c3                   	ret    

c0021b0a <FAT::unlink(char const*)>:
c0021b0a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021b10:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021b18:	75 07                	jne    c0021b21 <FAT::unlink(char const*)+0x17>
c0021b1a:	b8 04 00 00 00       	mov    eax,0x4
c0021b1f:	eb 5c                	jmp    c0021b7d <FAT::unlink(char const*)+0x73>
c0021b21:	83 ec 08             	sub    esp,0x8
c0021b24:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b2b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b2f:	50                   	push   eax
c0021b30:	e8 f3 ec fd ff       	call   c0000828 <strcpy>
c0021b35:	83 c4 10             	add    esp,0x10
c0021b38:	83 ec 08             	sub    esp,0x8
c0021b3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b3f:	50                   	push   eax
c0021b40:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b47:	e8 ce fc ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c0021b4c:	83 c4 10             	add    esp,0x10
c0021b4f:	83 ec 0c             	sub    esp,0xc
c0021b52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b56:	50                   	push   eax
c0021b57:	e8 60 49 fe ff       	call   c00064bc <f_unlink>
c0021b5c:	83 c4 10             	add    esp,0x10
c0021b5f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021b66:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021b6d:	85 c0                	test   eax,eax
c0021b6f:	75 07                	jne    c0021b78 <FAT::unlink(char const*)+0x6e>
c0021b71:	b8 00 00 00 00       	mov    eax,0x0
c0021b76:	eb 05                	jmp    c0021b7d <FAT::unlink(char const*)+0x73>
c0021b78:	b8 01 00 00 00       	mov    eax,0x1
c0021b7d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b83:	c3                   	ret    

c0021b84 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021b84:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021b8a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021b91:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021b98:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021b9c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021ba0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021ba8:	75 0a                	jne    c0021bb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021baa:	b8 04 00 00 00       	mov    eax,0x4
c0021baf:	e9 1c 01 00 00       	jmp    c0021cd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021bb4:	83 ec 08             	sub    esp,0x8
c0021bb7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021bbe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bc2:	50                   	push   eax
c0021bc3:	e8 60 ec fd ff       	call   c0000828 <strcpy>
c0021bc8:	83 c4 10             	add    esp,0x10
c0021bcb:	83 ec 08             	sub    esp,0x8
c0021bce:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021bd2:	50                   	push   eax
c0021bd3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021bda:	e8 3b fc ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c0021bdf:	83 c4 10             	add    esp,0x10
c0021be2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021bea:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021bf2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021bf7:	83 e0 01             	and    eax,0x1
c0021bfa:	74 08                	je     c0021c04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021bfc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021c04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021c09:	83 e0 02             	and    eax,0x2
c0021c0c:	74 08                	je     c0021c16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021c0e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021c16:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021c1b:	83 e0 04             	and    eax,0x4
c0021c1e:	74 08                	je     c0021c28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021c20:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021c28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021c2d:	83 e0 08             	and    eax,0x8
c0021c30:	74 08                	je     c0021c3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021c32:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021c3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021c3f:	83 e0 01             	and    eax,0x1
c0021c42:	74 08                	je     c0021c4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021c44:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021c4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021c51:	83 e0 02             	and    eax,0x2
c0021c54:	74 08                	je     c0021c5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021c56:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021c5e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021c63:	83 e0 04             	and    eax,0x4
c0021c66:	74 08                	je     c0021c70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021c68:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021c70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021c75:	83 e0 08             	and    eax,0x8
c0021c78:	74 08                	je     c0021c82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021c7a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021c82:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021c89:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021c90:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021c98:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021ca0:	83 ec 04             	sub    esp,0x4
c0021ca3:	52                   	push   edx
c0021ca4:	50                   	push   eax
c0021ca5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021ca9:	50                   	push   eax
c0021caa:	e8 af 4e fe ff       	call   c0006b5e <f_chmod>
c0021caf:	83 c4 10             	add    esp,0x10
c0021cb2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021cb9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021cc0:	85 c0                	test   eax,eax
c0021cc2:	75 07                	jne    c0021ccb <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021cc4:	b8 00 00 00 00       	mov    eax,0x0
c0021cc9:	eb 05                	jmp    c0021cd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021ccb:	b8 01 00 00 00       	mov    eax,0x1
c0021cd0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021cd6:	c3                   	ret    
c0021cd7:	90                   	nop

c0021cd8 <FAT::rename(char const*, char const*)>:
c0021cd8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021cde:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021ce6:	74 0a                	je     c0021cf2 <FAT::rename(char const*, char const*)+0x1a>
c0021ce8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021cf0:	75 0a                	jne    c0021cfc <FAT::rename(char const*, char const*)+0x24>
c0021cf2:	b8 04 00 00 00       	mov    eax,0x4
c0021cf7:	e9 98 00 00 00       	jmp    c0021d94 <FAT::rename(char const*, char const*)+0xbc>
c0021cfc:	83 ec 08             	sub    esp,0x8
c0021cff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021d06:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021d0d:	50                   	push   eax
c0021d0e:	e8 15 eb fd ff       	call   c0000828 <strcpy>
c0021d13:	83 c4 10             	add    esp,0x10
c0021d16:	83 ec 08             	sub    esp,0x8
c0021d19:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021d20:	50                   	push   eax
c0021d21:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021d28:	e8 ed fa ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c0021d2d:	83 c4 10             	add    esp,0x10
c0021d30:	83 ec 08             	sub    esp,0x8
c0021d33:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021d3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d3e:	50                   	push   eax
c0021d3f:	e8 e4 ea fd ff       	call   c0000828 <strcpy>
c0021d44:	83 c4 10             	add    esp,0x10
c0021d47:	83 ec 08             	sub    esp,0x8
c0021d4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d4e:	50                   	push   eax
c0021d4f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021d56:	e8 bf fa ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c0021d5b:	83 c4 10             	add    esp,0x10
c0021d5e:	83 ec 08             	sub    esp,0x8
c0021d61:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d65:	50                   	push   eax
c0021d66:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021d6d:	50                   	push   eax
c0021d6e:	e8 f8 4a fe ff       	call   c000686b <f_rename>
c0021d73:	83 c4 10             	add    esp,0x10
c0021d76:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021d7d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021d84:	85 c0                	test   eax,eax
c0021d86:	75 07                	jne    c0021d8f <FAT::rename(char const*, char const*)+0xb7>
c0021d88:	b8 00 00 00 00       	mov    eax,0x0
c0021d8d:	eb 05                	jmp    c0021d94 <FAT::rename(char const*, char const*)+0xbc>
c0021d8f:	b8 01 00 00 00       	mov    eax,0x1
c0021d94:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021d9a:	c3                   	ret    
c0021d9b:	90                   	nop

c0021d9c <FAT::mkdir(char const*)>:
c0021d9c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021da2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021daa:	75 07                	jne    c0021db3 <FAT::mkdir(char const*)+0x17>
c0021dac:	b8 04 00 00 00       	mov    eax,0x4
c0021db1:	eb 5c                	jmp    c0021e0f <FAT::mkdir(char const*)+0x73>
c0021db3:	83 ec 08             	sub    esp,0x8
c0021db6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021dbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021dc1:	50                   	push   eax
c0021dc2:	e8 61 ea fd ff       	call   c0000828 <strcpy>
c0021dc7:	83 c4 10             	add    esp,0x10
c0021dca:	83 ec 08             	sub    esp,0x8
c0021dcd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021dd1:	50                   	push   eax
c0021dd2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021dd9:	e8 3c fa ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c0021dde:	83 c4 10             	add    esp,0x10
c0021de1:	83 ec 0c             	sub    esp,0xc
c0021de4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021de8:	50                   	push   eax
c0021de9:	e8 51 48 fe ff       	call   c000663f <f_mkdir>
c0021dee:	83 c4 10             	add    esp,0x10
c0021df1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021df8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021dff:	85 c0                	test   eax,eax
c0021e01:	75 07                	jne    c0021e0a <FAT::mkdir(char const*)+0x6e>
c0021e03:	b8 00 00 00 00       	mov    eax,0x0
c0021e08:	eb 05                	jmp    c0021e0f <FAT::mkdir(char const*)+0x73>
c0021e0a:	b8 01 00 00 00       	mov    eax,0x1
c0021e0f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021e15:	c3                   	ret    

c0021e16 <FAT::exists(char const*)>:
c0021e16:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021e1c:	83 ec 08             	sub    esp,0x8
c0021e1f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021e26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021e2a:	50                   	push   eax
c0021e2b:	e8 f8 e9 fd ff       	call   c0000828 <strcpy>
c0021e30:	83 c4 10             	add    esp,0x10
c0021e33:	83 ec 08             	sub    esp,0x8
c0021e36:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021e3a:	50                   	push   eax
c0021e3b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021e42:	e8 d3 f9 ff ff       	call   c002181a <FAT::fixFilepath(char*)>
c0021e47:	83 c4 10             	add    esp,0x10
c0021e4a:	83 ec 08             	sub    esp,0x8
c0021e4d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021e54:	50                   	push   eax
c0021e55:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021e59:	50                   	push   eax
c0021e5a:	e8 0b 43 fe ff       	call   c000616a <f_stat>
c0021e5f:	83 c4 10             	add    esp,0x10
c0021e62:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021e69:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021e70:	85 c0                	test   eax,eax
c0021e72:	75 04                	jne    c0021e78 <FAT::exists(char const*)+0x62>
c0021e74:	b0 01                	mov    al,0x1
c0021e76:	eb 02                	jmp    c0021e7a <FAT::exists(char const*)+0x64>
c0021e78:	b0 00                	mov    al,0x0
c0021e7a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021e80:	c3                   	ret    
c0021e81:	90                   	nop

c0021e82 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021e82:	b8 08 00 00 00       	mov    eax,0x8
c0021e87:	c3                   	ret    

c0021e88 <ISO9660::seek(void*, unsigned long long)>:
c0021e88:	53                   	push   ebx
c0021e89:	b8 04 00 00 00       	mov    eax,0x4
c0021e8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021e9a:	85 d2                	test   edx,edx
c0021e9c:	74 17                	je     c0021eb5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021e9e:	89 c8                	mov    eax,ecx
c0021ea0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021ea3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021ea6:	b8 01 00 00 00       	mov    eax,0x1
c0021eab:	73 08                	jae    c0021eb5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021ead:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021eb0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021eb3:	31 c0                	xor    eax,eax
c0021eb5:	5b                   	pop    ebx
c0021eb6:	c3                   	ret    
c0021eb7:	90                   	nop

c0021eb8 <ISO9660::tell(void*, unsigned long long*)>:
c0021eb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ec0:	85 d2                	test   edx,edx
c0021ec2:	74 12                	je     c0021ed6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021ec4:	85 c0                	test   eax,eax
c0021ec6:	74 0e                	je     c0021ed6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021ec8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021ecb:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021ece:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021ed1:	89 10                	mov    DWORD PTR [eax],edx
c0021ed3:	31 c0                	xor    eax,eax
c0021ed5:	c3                   	ret    
c0021ed6:	b8 04 00 00 00       	mov    eax,0x4
c0021edb:	c3                   	ret    

c0021edc <ISO9660::getName()>:
c0021edc:	b8 1c d4 02 c0       	mov    eax,0xc002d41c
c0021ee1:	c3                   	ret    

c0021ee2 <ISO9660::stat(void*, unsigned long long*)>:
c0021ee2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021eea:	85 d2                	test   edx,edx
c0021eec:	74 12                	je     c0021f00 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021eee:	85 c0                	test   eax,eax
c0021ef0:	74 0e                	je     c0021f00 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021ef2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021ef5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021ef8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021efb:	89 10                	mov    DWORD PTR [eax],edx
c0021efd:	31 c0                	xor    eax,eax
c0021eff:	c3                   	ret    
c0021f00:	b8 04 00 00 00       	mov    eax,0x4
c0021f05:	c3                   	ret    

c0021f06 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021f06:	b8 01 00 00 00       	mov    eax,0x1
c0021f0b:	c3                   	ret    

c0021f0c <ISO9660::unlink(char const*)>:
c0021f0c:	b8 01 00 00 00       	mov    eax,0x1
c0021f11:	c3                   	ret    

c0021f12 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021f12:	b8 01 00 00 00       	mov    eax,0x1
c0021f17:	c3                   	ret    

c0021f18 <ISO9660::rename(char const*, char const*)>:
c0021f18:	b8 01 00 00 00       	mov    eax,0x1
c0021f1d:	c3                   	ret    

c0021f1e <ISO9660::mkdir(char const*)>:
c0021f1e:	b8 01 00 00 00       	mov    eax,0x1
c0021f23:	c3                   	ret    

c0021f24 <ISO9660::close(void*)>:
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	b8 04 00 00 00       	mov    eax,0x4
c0021f2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f30:	85 d2                	test   edx,edx
c0021f32:	74 0e                	je     c0021f42 <ISO9660::close(void*)+0x1e>
c0021f34:	83 ec 0c             	sub    esp,0xc
c0021f37:	52                   	push   edx
c0021f38:	e8 7b d9 fe ff       	call   c000f8b8 <free>
c0021f3d:	83 c4 10             	add    esp,0x10
c0021f40:	31 c0                	xor    eax,eax
c0021f42:	83 c4 0c             	add    esp,0xc
c0021f45:	c3                   	ret    

c0021f46 <ISO9660::closeDir(void*)>:
c0021f46:	83 ec 0c             	sub    esp,0xc
c0021f49:	b8 04 00 00 00       	mov    eax,0x4
c0021f4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f52:	85 d2                	test   edx,edx
c0021f54:	74 0e                	je     c0021f64 <ISO9660::closeDir(void*)+0x1e>
c0021f56:	83 ec 0c             	sub    esp,0xc
c0021f59:	52                   	push   edx
c0021f5a:	e8 59 d9 fe ff       	call   c000f8b8 <free>
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	31 c0                	xor    eax,eax
c0021f64:	83 c4 0c             	add    esp,0xc
c0021f67:	c3                   	ret    

c0021f68 <ISO9660::~ISO9660()>:
c0021f68:	83 ec 0c             	sub    esp,0xc
c0021f6b:	ba 80 d4 02 c0       	mov    edx,0xc002d480
c0021f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f74:	89 10                	mov    DWORD PTR [eax],edx
c0021f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f7a:	83 ec 0c             	sub    esp,0xc
c0021f7d:	50                   	push   eax
c0021f7e:	e8 ef 11 ff ff       	call   c0013172 <Filesystem::~Filesystem()>
c0021f83:	83 c4 10             	add    esp,0x10
c0021f86:	90                   	nop
c0021f87:	83 c4 0c             	add    esp,0xc
c0021f8a:	c3                   	ret    
c0021f8b:	90                   	nop

c0021f8c <ISO9660::~ISO9660()>:
c0021f8c:	83 ec 0c             	sub    esp,0xc
c0021f8f:	83 ec 0c             	sub    esp,0xc
c0021f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f96:	e8 cd ff ff ff       	call   c0021f68 <ISO9660::~ISO9660()>
c0021f9b:	83 c4 10             	add    esp,0x10
c0021f9e:	83 ec 08             	sub    esp,0x8
c0021fa1:	6a 08                	push   0x8
c0021fa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fa7:	e8 b7 0d ff ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0021fac:	83 c4 10             	add    esp,0x10
c0021faf:	83 c4 0c             	add    esp,0xc
c0021fb2:	c3                   	ret    

c0021fb3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021fb3:	55                   	push   ebp
c0021fb4:	31 c9                	xor    ecx,ecx
c0021fb6:	57                   	push   edi
c0021fb7:	56                   	push   esi
c0021fb8:	53                   	push   ebx
c0021fb9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021fbd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021fc1:	89 eb                	mov    ebx,ebp
c0021fc3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021fc7:	39 ce                	cmp    esi,ecx
c0021fc9:	7e 17                	jle    c0021fe2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021fcb:	31 d2                	xor    edx,edx
c0021fcd:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021fd1:	7d 13                	jge    c0021fe6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021fd3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021fd7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021fda:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021fdd:	75 0d                	jne    c0021fec <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021fdf:	42                   	inc    edx
c0021fe0:	eb eb                	jmp    c0021fcd <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021fe2:	31 c0                	xor    eax,eax
c0021fe4:	eb 0a                	jmp    c0021ff0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021fe6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021fea:	eb 04                	jmp    c0021ff0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021fec:	41                   	inc    ecx
c0021fed:	43                   	inc    ebx
c0021fee:	eb d7                	jmp    c0021fc7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021ff0:	5b                   	pop    ebx
c0021ff1:	5e                   	pop    esi
c0021ff2:	5f                   	pop    edi
c0021ff3:	5d                   	pop    ebp
c0021ff4:	c3                   	ret    

c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021ff5:	57                   	push   edi
c0021ff6:	56                   	push   esi
c0021ff7:	53                   	push   ebx
c0021ff8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ffc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022000:	39 0d a0 26 03 c0    	cmp    DWORD PTR ds:0xc00326a0,ecx
c0022006:	75 08                	jne    c0022010 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0022008:	38 05 f4 e4 02 c0    	cmp    BYTE PTR ds:0xc002e4f4,al
c002200e:	74 2b                	je     c002203b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0022010:	83 ec 0c             	sub    esp,0xc
c0022013:	a2 f4 e4 02 c0       	mov    ds:0xc002e4f4,al
c0022018:	68 c0 26 03 c0       	push   0xc00326c0
c002201d:	0f be c0             	movsx  eax,al
c0022020:	6a 01                	push   0x1
c0022022:	89 0d a0 26 03 c0    	mov    DWORD PTR ds:0xc00326a0,ecx
c0022028:	31 db                	xor    ebx,ebx
c002202a:	53                   	push   ebx
c002202b:	51                   	push   ecx
c002202c:	ff 34 85 7c f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b84]
c0022033:	e8 82 47 ff ff       	call   c00167ba <LogicalDisk::read(unsigned long long, int, void*)>
c0022038:	83 c4 20             	add    esp,0x20
c002203b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002203f:	be c0 26 03 c0       	mov    esi,0xc00326c0
c0022044:	b9 00 08 00 00       	mov    ecx,0x800
c0022049:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002204b:	5b                   	pop    ebx
c002204c:	5e                   	pop    esi
c002204d:	5f                   	pop    edi
c002204e:	c3                   	ret    
c002204f:	90                   	nop

c0022050 <ISO9660::tryMount(LogicalDisk*, int)>:
c0022050:	81 ec 10 08 00 00    	sub    esp,0x810
c0022056:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002205d:	83 c0 41             	add    eax,0x41
c0022060:	0f be c0             	movsx  eax,al
c0022063:	50                   	push   eax
c0022064:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022068:	50                   	push   eax
c0022069:	6a 10                	push   0x10
c002206b:	e8 85 ff ff ff       	call   c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022070:	83 c4 10             	add    esp,0x10
c0022073:	31 c0                	xor    eax,eax
c0022075:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002207a:	75 1d                	jne    c0022099 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002207c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0022081:	75 16                	jne    c0022099 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022083:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0022088:	75 0f                	jne    c0022099 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002208a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002208f:	75 08                	jne    c0022099 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022091:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0022096:	0f 94 c0             	sete   al
c0022099:	81 c4 0c 08 00 00    	add    esp,0x80c
c002209f:	c3                   	ret    

c00220a0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00220a0:	55                   	push   ebp
c00220a1:	57                   	push   edi
c00220a2:	56                   	push   esi
c00220a3:	53                   	push   ebx
c00220a4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00220aa:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00220b1:	85 ed                	test   ebp,ebp
c00220b3:	0f 84 da 01 00 00    	je     c0022293 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00220b9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00220c1:	0f 84 cc 01 00 00    	je     c0022293 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00220c7:	b8 01 00 00 00       	mov    eax,0x1
c00220cc:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00220d0:	0f 85 c2 01 00 00    	jne    c0022298 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00220d6:	31 d2                	xor    edx,edx
c00220d8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00220df:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00220e2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00220e5:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00220e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00220eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00220ef:	01 c8                	add    eax,ecx
c00220f1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00220f4:	11 da                	adc    edx,ebx
c00220f6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00220fa:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00220fe:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0022102:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022106:	19 d7                	sbb    edi,edx
c0022108:	72 11                	jb     c002211b <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002210a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002210d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022119:	eb 0c                	jmp    c0022127 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002211b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002211f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022123:	29 ce                	sub    esi,ecx
c0022125:	19 df                	sbb    edi,ebx
c0022127:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002212a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002212d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0022131:	c1 e0 0b             	shl    eax,0xb
c0022134:	01 c8                	add    eax,ecx
c0022136:	11 da                	adc    edx,ebx
c0022138:	89 04 24             	mov    DWORD PTR [esp],eax
c002213b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002213f:	51                   	push   ecx
c0022140:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022144:	50                   	push   eax
c0022145:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0022149:	53                   	push   ebx
c002214a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002214e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022152:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022156:	50                   	push   eax
c0022157:	e8 99 fe ff ff       	call   c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002215c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002215f:	b8 00 08 00 00       	mov    eax,0x800
c0022164:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002216a:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002216e:	29 d0                	sub    eax,edx
c0022170:	83 c4 10             	add    esp,0x10
c0022173:	89 f9                	mov    ecx,edi
c0022175:	39 c6                	cmp    esi,eax
c0022177:	83 d9 00             	sbb    ecx,0x0
c002217a:	7d 1b                	jge    c0022197 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002217c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022181:	75 12                	jne    c0022195 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0022183:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002218a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022190:	e9 fa 00 00 00       	jmp    c002228f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0022195:	89 f0                	mov    eax,esi
c0022197:	01 d3                	add    ebx,edx
c0022199:	31 d2                	xor    edx,edx
c002219b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002219f:	39 c2                	cmp    edx,eax
c00221a1:	7d 14                	jge    c00221b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00221a3:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00221aa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00221ae:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00221b1:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00221b4:	42                   	inc    edx
c00221b5:	eb e8                	jmp    c002219f <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00221b7:	89 c2                	mov    edx,eax
c00221b9:	85 c0                	test   eax,eax
c00221bb:	79 02                	jns    c00221bf <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00221bd:	31 d2                	xor    edx,edx
c00221bf:	01 c2                	add    edx,eax
c00221c1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00221c4:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00221cb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00221cf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00221d3:	99                   	cdq    
c00221d4:	01 c1                	add    ecx,eax
c00221d6:	11 d3                	adc    ebx,edx
c00221d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00221dc:	29 c6                	sub    esi,eax
c00221de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00221e2:	19 d7                	sbb    edi,edx
c00221e4:	89 34 24             	mov    DWORD PTR [esp],esi
c00221e7:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00221eb:	b8 ff 07 00 00       	mov    eax,0x7ff
c00221f0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00221f3:	b8 00 00 00 00       	mov    eax,0x0
c00221f8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00221fc:	7d 43                	jge    c0022241 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00221fe:	52                   	push   edx
c00221ff:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022203:	50                   	push   eax
c0022204:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002220c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022210:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022214:	50                   	push   eax
c0022215:	e8 db fd ff ff       	call   c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002221a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0022222:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0022227:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002222f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0022237:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002223c:	83 c4 10             	add    esp,0x10
c002223f:	eb aa                	jmp    c00221eb <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0022241:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022245:	0b 04 24             	or     eax,DWORD PTR [esp]
c0022248:	74 2a                	je     c0022274 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c002224a:	50                   	push   eax
c002224b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002224f:	50                   	push   eax
c0022250:	8d 74 24 28          	lea    esi,[esp+0x28]
c0022254:	56                   	push   esi
c0022255:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022259:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002225d:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0022261:	51                   	push   ecx
c0022262:	e8 8e fd ff ff       	call   c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022267:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002226b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002226f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022271:	83 c4 10             	add    esp,0x10
c0022274:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002227b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002227f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022283:	89 18                	mov    DWORD PTR [eax],ebx
c0022285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022289:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002228c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002228f:	31 c0                	xor    eax,eax
c0022291:	eb 05                	jmp    c0022298 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0022293:	b8 04 00 00 00       	mov    eax,0x4
c0022298:	81 c4 2c 08 00 00    	add    esp,0x82c
c002229e:	5b                   	pop    ebx
c002229f:	5e                   	pop    esi
c00222a0:	5f                   	pop    edi
c00222a1:	5d                   	pop    ebp
c00222a2:	c3                   	ret    
c00222a3:	90                   	nop

c00222a4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00222a4:	55                   	push   ebp
c00222a5:	57                   	push   edi
c00222a6:	56                   	push   esi
c00222a7:	53                   	push   ebx
c00222a8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00222ae:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00222b5:	85 ed                	test   ebp,ebp
c00222b7:	0f 84 51 02 00 00    	je     c002250e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00222bd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00222c5:	0f 84 43 02 00 00    	je     c002250e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00222cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222ce:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00222d1:	75 0a                	jne    c00222dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00222d3:	b8 07 00 00 00       	mov    eax,0x7
c00222d8:	e9 36 02 00 00       	jmp    c0022513 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00222dd:	50                   	push   eax
c00222de:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222e2:	50                   	push   eax
c00222e3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00222ea:	53                   	push   ebx
c00222eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00222ee:	c1 e0 0b             	shl    eax,0xb
c00222f1:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00222f4:	c1 e8 0b             	shr    eax,0xb
c00222f7:	50                   	push   eax
c00222f8:	e8 f8 fc ff ff       	call   c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00222fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022300:	83 c4 10             	add    esp,0x10
c0022303:	89 c1                	mov    ecx,eax
c0022305:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022308:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002230e:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0022311:	84 db                	test   bl,bl
c0022313:	0f 85 8b 00 00 00    	jne    c00223a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0022319:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002231f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022322:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0022328:	29 c6                	sub    esi,eax
c002232a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002232e:	89 f3                	mov    ebx,esi
c0022330:	89 f1                	mov    ecx,esi
c0022332:	c1 fb 1f             	sar    ebx,0x1f
c0022335:	01 f0                	add    eax,esi
c0022337:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002233a:	11 da                	adc    edx,ebx
c002233c:	89 04 24             	mov    DWORD PTR [esp],eax
c002233f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022343:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022346:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022349:	89 d8                	mov    eax,ebx
c002234b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002234f:	ba 00 00 00 00       	mov    edx,0x0
c0022354:	19 f8                	sbb    eax,edi
c0022356:	b8 00 00 00 00       	mov    eax,0x0
c002235b:	73 08                	jae    c0022365 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002235d:	89 f0                	mov    eax,esi
c002235f:	89 fa                	mov    edx,edi
c0022361:	29 c8                	sub    eax,ecx
c0022363:	19 da                	sbb    edx,ebx
c0022365:	89 d7                	mov    edi,edx
c0022367:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002236a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002236d:	09 c7                	or     edi,eax
c002236f:	0f 84 5e ff ff ff    	je     c00222d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0022375:	57                   	push   edi
c0022376:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002237a:	50                   	push   eax
c002237b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022382:	53                   	push   ebx
c0022383:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022386:	c1 e0 0b             	shl    eax,0xb
c0022389:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002238d:	c1 e8 0b             	shr    eax,0xb
c0022390:	50                   	push   eax
c0022391:	e8 5f fc ff ff       	call   c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022396:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022399:	83 c4 10             	add    esp,0x10
c002239c:	25 ff 07 00 00       	and    eax,0x7ff
c00223a1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00223a4:	31 ff                	xor    edi,edi
c00223a6:	56                   	push   esi
c00223a7:	6a 28                	push   0x28
c00223a9:	6a 00                	push   0x0
c00223ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00223af:	50                   	push   eax
c00223b0:	e8 b7 e3 fd ff       	call   c000076c <memset>
c00223b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00223b8:	25 ff 07 00 00       	and    eax,0x7ff
c00223bd:	89 c6                	mov    esi,eax
c00223bf:	83 c6 21             	add    esi,0x21
c00223c2:	83 d7 00             	adc    edi,0x0
c00223c5:	83 c4 10             	add    esp,0x10
c00223c8:	31 c9                	xor    ecx,ecx
c00223ca:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00223d1:	83 f9 28             	cmp    ecx,0x28
c00223d4:	88 04 24             	mov    BYTE PTR [esp],al
c00223d7:	0f 94 c2             	sete   dl
c00223da:	88 d0                	mov    al,dl
c00223dc:	ba ff 07 00 00       	mov    edx,0x7ff
c00223e1:	39 f2                	cmp    edx,esi
c00223e3:	ba 00 00 00 00       	mov    edx,0x0
c00223e8:	19 fa                	sbb    edx,edi
c00223ea:	0f 92 c2             	setb   dl
c00223ed:	09 c2                	or     edx,eax
c00223ef:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00223f3:	0f 94 c0             	sete   al
c00223f6:	08 d0                	or     al,dl
c00223f8:	75 16                	jne    c0022410 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00223fa:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00223fe:	74 10                	je     c0022410 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0022400:	8a 04 24             	mov    al,BYTE PTR [esp]
c0022403:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0022407:	41                   	inc    ecx
c0022408:	83 c6 01             	add    esi,0x1
c002240b:	83 d7 00             	adc    edi,0x0
c002240e:	eb ba                	jmp    c00223ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0022410:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0022417:	83 ec 0c             	sub    esp,0xc
c002241a:	8d 74 24 24          	lea    esi,[esp+0x24]
c002241e:	56                   	push   esi
c002241f:	e8 64 e3 fd ff       	call   c0000788 <strlen>
c0022424:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002242b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002242f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0022437:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002243a:	5a                   	pop    edx
c002243b:	25 ff 07 00 00       	and    eax,0x7ff
c0022440:	59                   	pop    ecx
c0022441:	01 f8                	add    eax,edi
c0022443:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022449:	83 e0 02             	and    eax,0x2
c002244c:	3c 01                	cmp    al,0x1
c002244e:	19 c0                	sbb    eax,eax
c0022450:	83 c0 02             	add    eax,0x2
c0022453:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022457:	56                   	push   esi
c0022458:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002245c:	50                   	push   eax
c002245d:	e8 c6 e3 fd ff       	call   c0000828 <strcpy>
c0022462:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022466:	83 c4 10             	add    esp,0x10
c0022469:	84 c0                	test   al,al
c002246b:	75 21                	jne    c002248e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c002246d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022475:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002247d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022485:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002248c:	eb 28                	jmp    c00224b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002248e:	fe c8                	dec    al
c0022490:	75 24                	jne    c00224b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022492:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002249a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00224a2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00224aa:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00224b1:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00224b6:	8d 74 24 40          	lea    esi,[esp+0x40]
c00224ba:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00224c1:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00224c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00224ca:	0f b6 f3             	movzx  esi,bl
c00224cd:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00224d4:	31 db                	xor    ebx,ebx
c00224d6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00224dc:	89 df                	mov    edi,ebx
c00224de:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00224e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224e4:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00224e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00224ea:	39 c6                	cmp    esi,eax
c00224ec:	19 d7                	sbb    edi,edx
c00224ee:	72 10                	jb     c0022500 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00224f0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00224f7:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00224fe:	eb 0a                	jmp    c002250a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0022500:	29 f0                	sub    eax,esi
c0022502:	19 da                	sbb    edx,ebx
c0022504:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022507:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002250a:	31 c0                	xor    eax,eax
c002250c:	eb 05                	jmp    c0022513 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002250e:	b8 04 00 00 00       	mov    eax,0x4
c0022513:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022519:	5b                   	pop    ebx
c002251a:	5e                   	pop    esi
c002251b:	5f                   	pop    edi
c002251c:	5d                   	pop    ebp
c002251d:	c3                   	ret    

c002251e <readRoot(unsigned int*, unsigned int*, char)>:
c002251e:	57                   	push   edi
c002251f:	56                   	push   esi
c0022520:	81 ec 38 08 00 00    	sub    esp,0x838
c0022526:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002252e:	50                   	push   eax
c002252f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0022533:	50                   	push   eax
c0022534:	6a 10                	push   0x10
c0022536:	e8 ba fa ff ff       	call   c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002253b:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0022542:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0022546:	b9 22 00 00 00       	mov    ecx,0x22
c002254b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002254d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022554:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022558:	89 10                	mov    DWORD PTR [eax],edx
c002255a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0022561:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022565:	89 10                	mov    DWORD PTR [eax],edx
c0022567:	81 c4 44 08 00 00    	add    esp,0x844
c002256d:	b0 01                	mov    al,0x1
c002256f:	5e                   	pop    esi
c0022570:	5f                   	pop    edi
c0022571:	c3                   	ret    

c0022572 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022572:	55                   	push   ebp
c0022573:	57                   	push   edi
c0022574:	56                   	push   esi
c0022575:	53                   	push   ebx
c0022576:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002257c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022583:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002258a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002258e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022592:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022596:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002259a:	75 03                	jne    c002259f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002259c:	83 c3 02             	add    ebx,0x2
c002259f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00225a2:	75 03                	jne    c00225a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00225a4:	43                   	inc    ebx
c00225a5:	eb f8                	jmp    c002259f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00225a7:	51                   	push   ecx
c00225a8:	68 00 01 00 00       	push   0x100
c00225ad:	6a 00                	push   0x0
c00225af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00225b3:	50                   	push   eax
c00225b4:	e8 b3 e1 fd ff       	call   c000076c <memset>
c00225b9:	83 c4 10             	add    esp,0x10
c00225bc:	31 d2                	xor    edx,edx
c00225be:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00225c1:	84 c0                	test   al,al
c00225c3:	74 21                	je     c00225e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00225c5:	3c 2f                	cmp    al,0x2f
c00225c7:	75 0b                	jne    c00225d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00225c9:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00225cd:	bd 01 00 00 00       	mov    ebp,0x1
c00225d2:	eb 14                	jmp    c00225e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00225d4:	8d 48 9f             	lea    ecx,[eax-0x61]
c00225d7:	80 f9 19             	cmp    cl,0x19
c00225da:	77 03                	ja     c00225df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00225dc:	83 e8 20             	sub    eax,0x20
c00225df:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00225e3:	42                   	inc    edx
c00225e4:	eb d8                	jmp    c00225be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00225e6:	31 ed                	xor    ebp,ebp
c00225e8:	83 ec 0c             	sub    esp,0xc
c00225eb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00225f2:	e8 b1 d2 fe ff       	call   c000f8a8 <malloc>
c00225f7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00225fe:	89 c6                	mov    esi,eax
c0022600:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022606:	c1 ef 0b             	shr    edi,0xb
c0022609:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022610:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022614:	83 c4 10             	add    esp,0x10
c0022617:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002261c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022620:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022627:	74 28                	je     c0022651 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022629:	52                   	push   edx
c002262a:	57                   	push   edi
c002262b:	50                   	push   eax
c002262c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022630:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022637:	e8 b9 f9 ff ff       	call   c0021ff5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002263c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022640:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022647:	05 00 08 00 00       	add    eax,0x800
c002264c:	83 c4 10             	add    esp,0x10
c002264f:	eb cb                	jmp    c002261c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022651:	83 ec 0c             	sub    esp,0xc
c0022654:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022658:	57                   	push   edi
c0022659:	e8 2a e1 fd ff       	call   c0000788 <strlen>
c002265e:	50                   	push   eax
c002265f:	57                   	push   edi
c0022660:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022667:	56                   	push   esi
c0022668:	e8 46 f9 ff ff       	call   c0021fb3 <__memmem(unsigned char*, int, unsigned char*, int)>
c002266d:	83 c4 20             	add    esp,0x20
c0022670:	85 c0                	test   eax,eax
c0022672:	75 13                	jne    c0022687 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022674:	83 ec 0c             	sub    esp,0xc
c0022677:	56                   	push   esi
c0022678:	e8 3b d2 fe ff       	call   c000f8b8 <free>
c002267d:	83 c4 10             	add    esp,0x10
c0022680:	31 c0                	xor    eax,eax
c0022682:	e9 b3 00 00 00       	jmp    c002273a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022687:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002268b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002268f:	c1 e7 08             	shl    edi,0x8
c0022692:	c1 e2 10             	shl    edx,0x10
c0022695:	09 d7                	or     edi,edx
c0022697:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002269b:	09 d7                	or     edi,edx
c002269d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00226a1:	c1 e2 18             	shl    edx,0x18
c00226a4:	09 d7                	or     edi,edx
c00226a6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00226aa:	89 d1                	mov    ecx,edx
c00226ac:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00226b0:	c1 e1 08             	shl    ecx,0x8
c00226b3:	c1 e2 10             	shl    edx,0x10
c00226b6:	09 ca                	or     edx,ecx
c00226b8:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00226bc:	09 ca                	or     edx,ecx
c00226be:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00226c2:	c1 e1 18             	shl    ecx,0x18
c00226c5:	09 ca                	or     edx,ecx
c00226c7:	89 e9                	mov    ecx,ebp
c00226c9:	84 c9                	test   cl,cl
c00226cb:	74 3c                	je     c0022709 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00226cd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00226d1:	83 ec 0c             	sub    esp,0xc
c00226d4:	56                   	push   esi
c00226d5:	e8 de d1 fe ff       	call   c000f8b8 <free>
c00226da:	83 c4 0c             	add    esp,0xc
c00226dd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00226e4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00226e9:	50                   	push   eax
c00226ea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00226f1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00226f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00226fc:	52                   	push   edx
c00226fd:	57                   	push   edi
c00226fe:	53                   	push   ebx
c00226ff:	e8 6e fe ff ff       	call   c0022572 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022704:	83 c4 20             	add    esp,0x20
c0022707:	eb 31                	jmp    c002273a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022709:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002270c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022713:	d0 e8                	shr    al,1
c0022715:	89 3b                	mov    DWORD PTR [ebx],edi
c0022717:	83 e0 01             	and    eax,0x1
c002271a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022721:	83 ec 0c             	sub    esp,0xc
c0022724:	89 13                	mov    DWORD PTR [ebx],edx
c0022726:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002272d:	89 03                	mov    DWORD PTR [ebx],eax
c002272f:	56                   	push   esi
c0022730:	e8 83 d1 fe ff       	call   c000f8b8 <free>
c0022735:	83 c4 10             	add    esp,0x10
c0022738:	b0 01                	mov    al,0x1
c002273a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022740:	5b                   	pop    ebx
c0022741:	5e                   	pop    esi
c0022742:	5f                   	pop    edi
c0022743:	5d                   	pop    ebp
c0022744:	c3                   	ret    

c0022745 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022745:	55                   	push   ebp
c0022746:	57                   	push   edi
c0022747:	56                   	push   esi
c0022748:	53                   	push   ebx
c0022749:	83 ec 20             	sub    esp,0x20
c002274c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022750:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022754:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022758:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022760:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022768:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002276d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022773:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022779:	57                   	push   edi
c002277a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002277e:	50                   	push   eax
c002277f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022783:	50                   	push   eax
c0022784:	e8 95 fd ff ff       	call   c002251e <readRoot(unsigned int*, unsigned int*, char)>
c0022789:	5a                   	pop    edx
c002278a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002278e:	e8 f5 df fd ff       	call   c0000788 <strlen>
c0022793:	83 c4 10             	add    esp,0x10
c0022796:	83 f8 03             	cmp    eax,0x3
c0022799:	77 17                	ja     c00227b2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002279b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002279f:	89 03                	mov    DWORD PTR [ebx],eax
c00227a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227a5:	89 06                	mov    DWORD PTR [esi],eax
c00227a7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00227ae:	b0 01                	mov    al,0x1
c00227b0:	eb 19                	jmp    c00227cb <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00227b2:	50                   	push   eax
c00227b3:	55                   	push   ebp
c00227b4:	57                   	push   edi
c00227b5:	56                   	push   esi
c00227b6:	53                   	push   ebx
c00227b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00227bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00227bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227c3:	e8 aa fd ff ff       	call   c0022572 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00227c8:	83 c4 20             	add    esp,0x20
c00227cb:	83 c4 1c             	add    esp,0x1c
c00227ce:	5b                   	pop    ebx
c00227cf:	5e                   	pop    esi
c00227d0:	5f                   	pop    edi
c00227d1:	5d                   	pop    ebp
c00227d2:	c3                   	ret    
c00227d3:	90                   	nop

c00227d4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00227d4:	57                   	push   edi
c00227d5:	56                   	push   esi
c00227d6:	53                   	push   ebx
c00227d7:	83 ec 10             	sub    esp,0x10
c00227da:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00227de:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00227e2:	85 ff                	test   edi,edi
c00227e4:	0f 84 9d 00 00 00    	je     c0022887 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00227ea:	85 f6                	test   esi,esi
c00227ec:	0f 84 95 00 00 00    	je     c0022887 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00227f2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00227f7:	74 17                	je     c0022810 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00227f9:	83 ec 0c             	sub    esp,0xc
c00227fc:	68 37 d4 02 c0       	push   0xc002d437
c0022801:	e8 3d 06 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0022806:	83 c4 10             	add    esp,0x10
c0022809:	b8 03 00 00 00       	mov    eax,0x3
c002280e:	eb 7c                	jmp    c002288c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022810:	83 ec 0c             	sub    esp,0xc
c0022813:	6a 1c                	push   0x1c
c0022815:	e8 8e d0 fe ff       	call   c000f8a8 <malloc>
c002281a:	89 07                	mov    DWORD PTR [edi],eax
c002281c:	89 c3                	mov    ebx,eax
c002281e:	58                   	pop    eax
c002281f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022823:	50                   	push   eax
c0022824:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022827:	50                   	push   eax
c0022828:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002282c:	50                   	push   eax
c002282d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022831:	50                   	push   eax
c0022832:	56                   	push   esi
c0022833:	e8 0d ff ff ff       	call   c0022745 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022838:	83 c4 20             	add    esp,0x20
c002283b:	84 c0                	test   al,al
c002283d:	74 07                	je     c0022846 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002283f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022844:	74 0b                	je     c0022851 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022846:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002284a:	b8 01 00 00 00       	mov    eax,0x1
c002284f:	eb 3b                	jmp    c002288c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022855:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022859:	89 03                	mov    DWORD PTR [ebx],eax
c002285b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022862:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022866:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002286d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022874:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022877:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002287e:	8a 06                	mov    al,BYTE PTR [esi]
c0022880:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022883:	31 c0                	xor    eax,eax
c0022885:	eb 05                	jmp    c002288c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022887:	b8 04 00 00 00       	mov    eax,0x4
c002288c:	83 c4 10             	add    esp,0x10
c002288f:	5b                   	pop    ebx
c0022890:	5e                   	pop    esi
c0022891:	5f                   	pop    edi
c0022892:	c3                   	ret    
c0022893:	90                   	nop

c0022894 <ISO9660::exists(char const*)>:
c0022894:	83 ec 28             	sub    esp,0x28
c0022897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002289b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002289f:	52                   	push   edx
c00228a0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00228a3:	52                   	push   edx
c00228a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00228a8:	52                   	push   edx
c00228a9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00228ad:	52                   	push   edx
c00228ae:	50                   	push   eax
c00228af:	e8 91 fe ff ff       	call   c0022745 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00228b4:	83 c4 3c             	add    esp,0x3c
c00228b7:	c3                   	ret    

c00228b8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00228b8:	56                   	push   esi
c00228b9:	53                   	push   ebx
c00228ba:	83 ec 14             	sub    esp,0x14
c00228bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00228c1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00228c5:	85 db                	test   ebx,ebx
c00228c7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00228cb:	0f 94 c2             	sete   dl
c00228ce:	85 f6                	test   esi,esi
c00228d0:	0f 94 c0             	sete   al
c00228d3:	08 c2                	or     dl,al
c00228d5:	75 68                	jne    c002293f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00228d7:	85 c9                	test   ecx,ecx
c00228d9:	74 64                	je     c002293f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00228db:	83 ec 0c             	sub    esp,0xc
c00228de:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00228e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00228e5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00228eb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228f2:	50                   	push   eax
c00228f3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00228f6:	50                   	push   eax
c00228f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228fb:	50                   	push   eax
c00228fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022900:	50                   	push   eax
c0022901:	51                   	push   ecx
c0022902:	e8 3e fe ff ff       	call   c0022745 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022907:	83 c4 20             	add    esp,0x20
c002290a:	ba 01 00 00 00       	mov    edx,0x1
c002290f:	84 c0                	test   al,al
c0022911:	74 31                	je     c0022944 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022913:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022917:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002291e:	89 03                	mov    DWORD PTR [ebx],eax
c0022920:	ba 00 00 00 00       	mov    edx,0x0
c0022925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022929:	85 c0                	test   eax,eax
c002292b:	0f 95 06             	setne  BYTE PTR [esi]
c002292e:	74 14                	je     c0022944 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022930:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022936:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002293d:	eb 05                	jmp    c0022944 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002293f:	ba 04 00 00 00       	mov    edx,0x4
c0022944:	83 c4 14             	add    esp,0x14
c0022947:	89 d0                	mov    eax,edx
c0022949:	5b                   	pop    ebx
c002294a:	5e                   	pop    esi
c002294b:	c3                   	ret    

c002294c <ISO9660::openDir(char const*, void**)>:
c002294c:	57                   	push   edi
c002294d:	56                   	push   esi
c002294e:	53                   	push   ebx
c002294f:	83 ec 10             	sub    esp,0x10
c0022952:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022956:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002295a:	85 ff                	test   edi,edi
c002295c:	0f 84 95 00 00 00    	je     c00229f7 <ISO9660::openDir(char const*, void**)+0xab>
c0022962:	85 f6                	test   esi,esi
c0022964:	0f 84 8d 00 00 00    	je     c00229f7 <ISO9660::openDir(char const*, void**)+0xab>
c002296a:	83 ec 0c             	sub    esp,0xc
c002296d:	6a 1c                	push   0x1c
c002296f:	e8 34 cf fe ff       	call   c000f8a8 <malloc>
c0022974:	89 07                	mov    DWORD PTR [edi],eax
c0022976:	89 c3                	mov    ebx,eax
c0022978:	59                   	pop    ecx
c0022979:	8d 44 24 18          	lea    eax,[esp+0x18]
c002297d:	50                   	push   eax
c002297e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022981:	50                   	push   eax
c0022982:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022986:	50                   	push   eax
c0022987:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002298b:	50                   	push   eax
c002298c:	56                   	push   esi
c002298d:	e8 b3 fd ff ff       	call   c0022745 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022992:	83 c4 20             	add    esp,0x20
c0022995:	84 c0                	test   al,al
c0022997:	74 07                	je     c00229a0 <ISO9660::openDir(char const*, void**)+0x54>
c0022999:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002299e:	75 21                	jne    c00229c1 <ISO9660::openDir(char const*, void**)+0x75>
c00229a0:	0f b6 c0             	movzx  eax,al
c00229a3:	52                   	push   edx
c00229a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00229a8:	50                   	push   eax
c00229a9:	68 5d d4 02 c0       	push   0xc002d45d
c00229ae:	e8 90 04 ff ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00229b3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00229b7:	83 c4 10             	add    esp,0x10
c00229ba:	b8 01 00 00 00       	mov    eax,0x1
c00229bf:	eb 3b                	jmp    c00229fc <ISO9660::openDir(char const*, void**)+0xb0>
c00229c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229c5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00229c9:	89 03                	mov    DWORD PTR [ebx],eax
c00229cb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00229d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00229dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00229e4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00229e7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00229ee:	8a 06                	mov    al,BYTE PTR [esi]
c00229f0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00229f3:	31 c0                	xor    eax,eax
c00229f5:	eb 05                	jmp    c00229fc <ISO9660::openDir(char const*, void**)+0xb0>
c00229f7:	b8 04 00 00 00       	mov    eax,0x4
c00229fc:	83 c4 10             	add    esp,0x10
c00229ff:	5b                   	pop    ebx
c0022a00:	5e                   	pop    esi
c0022a01:	5f                   	pop    edi
c0022a02:	c3                   	ret    
c0022a03:	90                   	nop

c0022a04 <ISO9660::ISO9660()>:
c0022a04:	83 ec 0c             	sub    esp,0xc
c0022a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0b:	83 ec 0c             	sub    esp,0xc
c0022a0e:	50                   	push   eax
c0022a0f:	e8 3a 07 ff ff       	call   c001314e <Filesystem::Filesystem()>
c0022a14:	83 c4 10             	add    esp,0x10
c0022a17:	ba 80 d4 02 c0       	mov    edx,0xc002d480
c0022a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a20:	89 10                	mov    DWORD PTR [eax],edx
c0022a22:	90                   	nop
c0022a23:	83 c4 0c             	add    esp,0xc
c0022a26:	c3                   	ret    
c0022a27:	90                   	nop

c0022a28 <SoundChannel::~SoundChannel()>:
c0022a28:	83 ec 0c             	sub    esp,0xc
c0022a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022a32:	83 ec 0c             	sub    esp,0xc
c0022a35:	50                   	push   eax
c0022a36:	e8 7d ce fe ff       	call   c000f8b8 <free>
c0022a3b:	83 c4 10             	add    esp,0x10
c0022a3e:	90                   	nop
c0022a3f:	83 c4 0c             	add    esp,0xc
c0022a42:	c3                   	ret    
c0022a43:	90                   	nop

c0022a44 <SoundChannel::setSpeed(float)>:
c0022a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a4c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022a4f:	c3                   	ret    

c0022a50 <SoundChannel::getSpeed()>:
c0022a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a54:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022a57:	c3                   	ret    

c0022a58 <SoundChannel::setVolume(int)>:
c0022a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a5c:	83 f8 64             	cmp    eax,0x64
c0022a5f:	7e 05                	jle    c0022a66 <SoundChannel::setVolume(int)+0xe>
c0022a61:	b8 64 00 00 00       	mov    eax,0x64
c0022a66:	85 c0                	test   eax,eax
c0022a68:	79 02                	jns    c0022a6c <SoundChannel::setVolume(int)+0x14>
c0022a6a:	31 c0                	xor    eax,eax
c0022a6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022a70:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022a73:	c3                   	ret    

c0022a74 <SoundChannel::getVolume()>:
c0022a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a78:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022a7b:	c3                   	ret    

c0022a7c <SoundChannel::pause()>:
c0022a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a80:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022a84:	c3                   	ret    
c0022a85:	90                   	nop

c0022a86 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022a86:	83 ec 1c             	sub    esp,0x1c
c0022a89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022a8d:	e8 ea ff ff ff       	call   c0022a7c <SoundChannel::pause()>
c0022a92:	83 c4 04             	add    esp,0x4
c0022a95:	6a 50                	push   0x50
c0022a97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a9b:	e8 b8 ff ff ff       	call   c0022a58 <SoundChannel::setVolume(int)>
c0022aa0:	83 c4 08             	add    esp,0x8
c0022aa3:	a1 fc d4 02 c0       	mov    eax,ds:0xc002d4fc
c0022aa8:	50                   	push   eax
c0022aa9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022aad:	e8 92 ff ff ff       	call   c0022a44 <SoundChannel::setSpeed(float)>
c0022ab2:	83 c4 08             	add    esp,0x8
c0022ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ab9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022abd:	89 10                	mov    DWORD PTR [eax],edx
c0022abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ac3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022ac7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ace:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ad2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ad5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022ada:	75 23                	jne    c0022aff <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ae0:	8b 10                	mov    edx,DWORD PTR [eax]
c0022ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ae9:	0f af c2             	imul   eax,edx
c0022aec:	85 c0                	test   eax,eax
c0022aee:	79 03                	jns    c0022af3 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022af0:	83 c0 03             	add    eax,0x3
c0022af3:	c1 f8 02             	sar    eax,0x2
c0022af6:	05 a0 0f 00 00       	add    eax,0xfa0
c0022afb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022aff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022b07:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b0e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b19:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022b27:	c1 e0 02             	shl    eax,0x2
c0022b2a:	83 ec 0c             	sub    esp,0xc
c0022b2d:	50                   	push   eax
c0022b2e:	e8 75 cd fe ff       	call   c000f8a8 <malloc>
c0022b33:	83 c4 10             	add    esp,0x10
c0022b36:	89 c2                	mov    edx,eax
c0022b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b3c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022b3f:	83 ec 04             	sub    esp,0x4
c0022b42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022b46:	50                   	push   eax
c0022b47:	6a 01                	push   0x1
c0022b49:	6a 04                	push   0x4
c0022b4b:	e8 31 60 fe ff       	call   c0008b81 <src_new>
c0022b50:	83 c4 10             	add    esp,0x10
c0022b53:	89 c2                	mov    edx,eax
c0022b55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b60:	85 c0                	test   eax,eax
c0022b62:	74 10                	je     c0022b74 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022b64:	83 ec 0c             	sub    esp,0xc
c0022b67:	68 e0 d4 02 c0       	push   0xc002d4e0
c0022b6c:	e8 9c 7c ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0022b71:	83 c4 10             	add    esp,0x10
c0022b74:	a0 c0 32 03 c0       	mov    al,ds:0xc00332c0
c0022b79:	83 f0 01             	xor    eax,0x1
c0022b7c:	84 c0                	test   al,al
c0022b7e:	74 57                	je     c0022bd7 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022b80:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c0022b85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b91:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022b99:	7f 35                	jg     c0022bd0 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022b9b:	83 ec 0c             	sub    esp,0xc
c0022b9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022ba2:	e8 68 50 00 00       	call   c0027c0f <__floatsisf>
c0022ba7:	83 c4 10             	add    esp,0x10
c0022baa:	8b 15 00 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d500
c0022bb0:	83 ec 08             	sub    esp,0x8
c0022bb3:	52                   	push   edx
c0022bb4:	50                   	push   eax
c0022bb5:	e8 67 4c 00 00       	call   c0027821 <__mulsf3>
c0022bba:	83 c4 10             	add    esp,0x10
c0022bbd:	89 c2                	mov    edx,eax
c0022bbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022bc3:	89 14 85 c0 2e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd140],edx
c0022bca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022bce:	eb c1                	jmp    c0022b91 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022bd0:	c6 05 c0 32 03 c0 01 	mov    BYTE PTR ds:0xc00332c0,0x1
c0022bd7:	90                   	nop
c0022bd8:	83 c4 1c             	add    esp,0x1c
c0022bdb:	c3                   	ret    

c0022bdc <SoundChannel::play()>:
c0022bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022be0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022be4:	c3                   	ret    
c0022be5:	90                   	nop

c0022be6 <SoundChannel::paused()>:
c0022be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bea:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022bed:	c3                   	ret    

c0022bee <SoundChannel::getSampleRate()>:
c0022bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bf4:	c3                   	ret    
c0022bf5:	90                   	nop

c0022bf6 <SoundChannel::getBits()>:
c0022bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bfd:	c3                   	ret    

c0022bfe <SoundChannel::getBufferUsed()>:
c0022bfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c02:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022c05:	c3                   	ret    

c0022c06 <SoundChannel::getBufferSize()>:
c0022c06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c0a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022c0d:	c3                   	ret    

c0022c0e <SoundChannel::unbuffer(float*, int, int)>:
c0022c0e:	56                   	push   esi
c0022c0f:	53                   	push   ebx
c0022c10:	83 ec 40             	sub    esp,0x40
c0022c13:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022c17:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022c1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c1e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022c21:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c25:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022c29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022c2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022c31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c35:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022c39:	e8 d1 4f 00 00       	call   c0027c0f <__floatsisf>
c0022c3e:	5a                   	pop    edx
c0022c3f:	89 c6                	mov    esi,eax
c0022c41:	ff 33                	push   DWORD PTR [ebx]
c0022c43:	e8 c7 4f 00 00       	call   c0027c0f <__floatsisf>
c0022c48:	59                   	pop    ecx
c0022c49:	5a                   	pop    edx
c0022c4a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022c4d:	50                   	push   eax
c0022c4e:	e8 ce 4b 00 00       	call   c0027821 <__mulsf3>
c0022c53:	59                   	pop    ecx
c0022c54:	5a                   	pop    edx
c0022c55:	50                   	push   eax
c0022c56:	56                   	push   esi
c0022c57:	e8 88 4d 00 00       	call   c00279e4 <__divsf3>
c0022c5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c5f:	e8 7b 62 00 00       	call   c0028edf <__extendsfdf2>
c0022c64:	59                   	pop    ecx
c0022c65:	5e                   	pop    esi
c0022c66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c6a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022c6e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022c76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022c7a:	50                   	push   eax
c0022c7b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022c7e:	e8 f3 5a fe ff       	call   c0008776 <src_process>
c0022c83:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022c87:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022c8a:	83 c4 0c             	add    esp,0xc
c0022c8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022c90:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022c93:	29 d0                	sub    eax,edx
c0022c95:	c1 e0 02             	shl    eax,0x2
c0022c98:	50                   	push   eax
c0022c99:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022c9c:	50                   	push   eax
c0022c9d:	51                   	push   ecx
c0022c9e:	e8 01 da fd ff       	call   c00006a4 <memmove>
c0022ca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022ca7:	83 c4 44             	add    esp,0x44
c0022caa:	5b                   	pop    ebx
c0022cab:	5e                   	pop    esi
c0022cac:	c3                   	ret    
c0022cad:	90                   	nop

c0022cae <SoundChannel::buffer8(unsigned char*, int)>:
c0022cae:	55                   	push   ebp
c0022caf:	57                   	push   edi
c0022cb0:	56                   	push   esi
c0022cb1:	53                   	push   ebx
c0022cb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022cb6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022cba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022cbd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022cc1:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022cc4:	74 7a                	je     c0022d40 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022cc6:	85 ff                	test   edi,edi
c0022cc8:	7e 76                	jle    c0022d40 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022cca:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022cce:	8d 70 01             	lea    esi,[eax+0x1]
c0022cd1:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022cd4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022cd7:	8b 1c 9d c0 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd140]
c0022cde:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022ce1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022ce4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022ce7:	74 5e                	je     c0022d47 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022ce9:	83 ff 01             	cmp    edi,0x1
c0022cec:	74 4b                	je     c0022d39 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022cee:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022cf2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022cf5:	8d 70 01             	lea    esi,[eax+0x1]
c0022cf8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022cfb:	8b 1c 9d c0 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd140]
c0022d02:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022d05:	b8 02 00 00 00       	mov    eax,0x2
c0022d0a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022d0d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022d10:	75 23                	jne    c0022d35 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022d12:	eb 27                	jmp    c0022d3b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022d14:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022d19:	8d 71 01             	lea    esi,[ecx+0x1]
c0022d1c:	40                   	inc    eax
c0022d1d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022d20:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022d23:	8b 1c 9d c0 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd140]
c0022d2a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022d2d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022d30:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022d33:	74 06                	je     c0022d3b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022d35:	39 c7                	cmp    edi,eax
c0022d37:	75 db                	jne    c0022d14 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022d39:	89 f8                	mov    eax,edi
c0022d3b:	5b                   	pop    ebx
c0022d3c:	5e                   	pop    esi
c0022d3d:	5f                   	pop    edi
c0022d3e:	5d                   	pop    ebp
c0022d3f:	c3                   	ret    
c0022d40:	5b                   	pop    ebx
c0022d41:	31 c0                	xor    eax,eax
c0022d43:	5e                   	pop    esi
c0022d44:	5f                   	pop    edi
c0022d45:	5d                   	pop    ebp
c0022d46:	c3                   	ret    
c0022d47:	b8 01 00 00 00       	mov    eax,0x1
c0022d4c:	eb ed                	jmp    c0022d3b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022d4e <SoundDevice::SoundDevice(char const*)>:
c0022d4e:	83 ec 1c             	sub    esp,0x1c
c0022d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d55:	83 ec 08             	sub    esp,0x8
c0022d58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d5c:	50                   	push   eax
c0022d5d:	e8 f2 16 ff ff       	call   c0014454 <Device::Device(char const*)>
c0022d62:	83 c4 10             	add    esp,0x10
c0022d65:	ba 0c d5 02 c0       	mov    edx,0xc002d50c
c0022d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d6e:	89 10                	mov    DWORD PTR [eax],edx
c0022d70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d74:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022d7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022d8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022d94:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022d99:	7f 19                	jg     c0022db4 <SoundDevice::SoundDevice(char const*)+0x66>
c0022d9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022da3:	83 c2 54             	add    edx,0x54
c0022da6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022dae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022db2:	eb e0                	jmp    c0022d94 <SoundDevice::SoundDevice(char const*)+0x46>
c0022db4:	90                   	nop
c0022db5:	83 c4 1c             	add    esp,0x1c
c0022db8:	c3                   	ret    
c0022db9:	90                   	nop

c0022dba <SoundDevice::~SoundDevice()>:
c0022dba:	53                   	push   ebx
c0022dbb:	83 ec 18             	sub    esp,0x18
c0022dbe:	ba 0c d5 02 c0       	mov    edx,0xc002d50c
c0022dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022dc7:	89 10                	mov    DWORD PTR [eax],edx
c0022dc9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022dd1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022dd6:	7f 46                	jg     c0022e1e <SoundDevice::~SoundDevice()+0x64>
c0022dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ddc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022de0:	83 c2 54             	add    edx,0x54
c0022de3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022de7:	85 c0                	test   eax,eax
c0022de9:	74 2d                	je     c0022e18 <SoundDevice::~SoundDevice()+0x5e>
c0022deb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022def:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022df3:	83 c2 54             	add    edx,0x54
c0022df6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022dfa:	85 db                	test   ebx,ebx
c0022dfc:	74 1a                	je     c0022e18 <SoundDevice::~SoundDevice()+0x5e>
c0022dfe:	83 ec 0c             	sub    esp,0xc
c0022e01:	53                   	push   ebx
c0022e02:	e8 21 fc ff ff       	call   c0022a28 <SoundChannel::~SoundChannel()>
c0022e07:	83 c4 10             	add    esp,0x10
c0022e0a:	83 ec 08             	sub    esp,0x8
c0022e0d:	6a 2c                	push   0x2c
c0022e0f:	53                   	push   ebx
c0022e10:	e8 4e ff fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0022e15:	83 c4 10             	add    esp,0x10
c0022e18:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022e1c:	eb b3                	jmp    c0022dd1 <SoundDevice::~SoundDevice()+0x17>
c0022e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e22:	83 ec 0c             	sub    esp,0xc
c0022e25:	50                   	push   eax
c0022e26:	e8 1f 13 ff ff       	call   c001414a <Device::~Device()>
c0022e2b:	83 c4 10             	add    esp,0x10
c0022e2e:	90                   	nop
c0022e2f:	83 c4 18             	add    esp,0x18
c0022e32:	5b                   	pop    ebx
c0022e33:	c3                   	ret    

c0022e34 <SoundDevice::~SoundDevice()>:
c0022e34:	83 ec 0c             	sub    esp,0xc
c0022e37:	83 ec 0c             	sub    esp,0xc
c0022e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e3e:	e8 77 ff ff ff       	call   c0022dba <SoundDevice::~SoundDevice()>
c0022e43:	83 c4 10             	add    esp,0x10
c0022e46:	83 ec 08             	sub    esp,0x8
c0022e49:	68 e4 01 00 00       	push   0x1e4
c0022e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e52:	e8 0c ff fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0022e57:	83 c4 10             	add    esp,0x10
c0022e5a:	83 c4 0c             	add    esp,0xc
c0022e5d:	c3                   	ret    

c0022e5e <SoundDevice::getFreeChannelNum()>:
c0022e5e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e62:	31 c0                	xor    eax,eax
c0022e64:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022e6c:	74 09                	je     c0022e77 <SoundDevice::getFreeChannelNum()+0x19>
c0022e6e:	40                   	inc    eax
c0022e6f:	83 f8 20             	cmp    eax,0x20
c0022e72:	75 f0                	jne    c0022e64 <SoundDevice::getFreeChannelNum()+0x6>
c0022e74:	83 c8 ff             	or     eax,0xffffffff
c0022e77:	c3                   	ret    

c0022e78 <SoundDevice::addChannel(SoundChannel*)>:
c0022e78:	56                   	push   esi
c0022e79:	53                   	push   ebx
c0022e7a:	51                   	push   ecx
c0022e7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e7f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022e83:	53                   	push   ebx
c0022e84:	e8 d5 ff ff ff       	call   c0022e5e <SoundDevice::getFreeChannelNum()>
c0022e89:	5a                   	pop    edx
c0022e8a:	83 f8 ff             	cmp    eax,0xffffffff
c0022e8d:	74 51                	je     c0022ee0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022e8f:	85 f6                	test   esi,esi
c0022e91:	74 4d                	je     c0022ee0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022e93:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022e9a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022ea1:	75 30                	jne    c0022ed3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022ea3:	83 ec 0c             	sub    esp,0xc
c0022ea6:	56                   	push   esi
c0022ea7:	e8 42 fd ff ff       	call   c0022bee <SoundChannel::getSampleRate()>
c0022eac:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022eb2:	89 34 24             	mov    DWORD PTR [esp],esi
c0022eb5:	e8 3c fd ff ff       	call   c0022bf6 <SoundChannel::getBits()>
c0022eba:	83 c4 0c             	add    esp,0xc
c0022ebd:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022ec3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022ec5:	50                   	push   eax
c0022ec6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022ecc:	53                   	push   ebx
c0022ecd:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022ed0:	83 c4 10             	add    esp,0x10
c0022ed3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022ed9:	b8 01 00 00 00       	mov    eax,0x1
c0022ede:	eb 03                	jmp    c0022ee3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022ee0:	83 c8 ff             	or     eax,0xffffffff
c0022ee3:	5a                   	pop    edx
c0022ee4:	5b                   	pop    ebx
c0022ee5:	5e                   	pop    esi
c0022ee6:	c3                   	ret    
c0022ee7:	90                   	nop

c0022ee8 <SoundDevice::removeChannel(int)>:
c0022ee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ef0:	83 fa 1f             	cmp    edx,0x1f
c0022ef3:	77 23                	ja     c0022f18 <SoundDevice::removeChannel(int)+0x30>
c0022ef5:	8d 14 90             	lea    edx,[eax+edx*4]
c0022ef8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022eff:	74 17                	je     c0022f18 <SoundDevice::removeChannel(int)+0x30>
c0022f01:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022f0b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022f11:	75 05                	jne    c0022f18 <SoundDevice::removeChannel(int)+0x30>
c0022f13:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f15:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022f18:	c3                   	ret    
c0022f19:	90                   	nop

c0022f1a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022f1a:	57                   	push   edi
c0022f1b:	56                   	push   esi
c0022f1c:	53                   	push   ebx
c0022f1d:	31 db                	xor    ebx,ebx
c0022f1f:	83 ec 10             	sub    esp,0x10
c0022f22:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022f26:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022f2a:	0f 8d cb 00 00 00    	jge    c0022ffb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022f30:	83 ec 0c             	sub    esp,0xc
c0022f33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022f37:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022f3a:	e8 a0 5f 00 00       	call   c0028edf <__extendsfdf2>
c0022f3f:	83 c4 10             	add    esp,0x10
c0022f42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022f4a:	68 00 00 f0 3f       	push   0x3ff00000
c0022f4f:	6a 00                	push   0x0
c0022f51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f59:	e8 0d 4f 00 00       	call   c0027e6b <__adddf3>
c0022f5e:	83 c4 10             	add    esp,0x10
c0022f61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022f69:	68 00 00 e0 3f       	push   0x3fe00000
c0022f6e:	6a 00                	push   0x0
c0022f70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f78:	e8 6b 55 00 00       	call   c00284e8 <__muldf3>
c0022f7d:	83 c4 10             	add    esp,0x10
c0022f80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022f88:	68 00 00 60 40       	push   0x40600000
c0022f8d:	6a 00                	push   0x0
c0022f8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f97:	e8 4c 55 00 00       	call   c00284e8 <__muldf3>
c0022f9c:	59                   	pop    ecx
c0022f9d:	5f                   	pop    edi
c0022f9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022fa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022fa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022faa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fae:	e8 08 5e 00 00       	call   c0028dbb <__truncdfsf2>
c0022fb3:	5a                   	pop    edx
c0022fb4:	89 c7                	mov    edi,eax
c0022fb6:	59                   	pop    ecx
c0022fb7:	68 00 00 fe 42       	push   0x42fe0000
c0022fbc:	50                   	push   eax
c0022fbd:	e8 a3 4e 00 00       	call   c0027e65 <__gesf2>
c0022fc2:	83 c4 10             	add    esp,0x10
c0022fc5:	85 c0                	test   eax,eax
c0022fc7:	78 06                	js     c0022fcf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022fc9:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022fcd:	eb 26                	jmp    c0022ff5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022fcf:	50                   	push   eax
c0022fd0:	50                   	push   eax
c0022fd1:	6a 00                	push   0x0
c0022fd3:	57                   	push   edi
c0022fd4:	e8 90 4e 00 00       	call   c0027e69 <__lesf2>
c0022fd9:	83 c4 10             	add    esp,0x10
c0022fdc:	85 c0                	test   eax,eax
c0022fde:	7f 06                	jg     c0022fe6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022fe0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022fe4:	eb 0f                	jmp    c0022ff5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022fe6:	83 ec 0c             	sub    esp,0xc
c0022fe9:	57                   	push   edi
c0022fea:	e8 8d 5f 00 00       	call   c0028f7c <lrintf>
c0022fef:	83 c4 10             	add    esp,0x10
c0022ff2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022ff5:	43                   	inc    ebx
c0022ff6:	e9 2b ff ff ff       	jmp    c0022f26 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ffb:	83 c4 10             	add    esp,0x10
c0022ffe:	5b                   	pop    ebx
c0022fff:	5e                   	pop    esi
c0023000:	5f                   	pop    edi
c0023001:	c3                   	ret    

c0023002 <SoundDevice::getAudio(int, float*, float*)>:
c0023002:	55                   	push   ebp
c0023003:	57                   	push   edi
c0023004:	56                   	push   esi
c0023005:	53                   	push   ebx
c0023006:	31 db                	xor    ebx,ebx
c0023008:	83 ec 20             	sub    esp,0x20
c002300b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002300f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023013:	c1 e0 02             	shl    eax,0x2
c0023016:	50                   	push   eax
c0023017:	6a 00                	push   0x0
c0023019:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002301d:	e8 4a d7 fd ff       	call   c000076c <memset>
c0023022:	83 c4 10             	add    esp,0x10
c0023025:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023029:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0023030:	85 c0                	test   eax,eax
c0023032:	0f 84 d7 00 00 00    	je     c002310f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023038:	83 ec 0c             	sub    esp,0xc
c002303b:	50                   	push   eax
c002303c:	e8 a5 fb ff ff       	call   c0022be6 <SoundChannel::paused()>
c0023041:	83 c4 10             	add    esp,0x10
c0023044:	84 c0                	test   al,al
c0023046:	0f 85 c3 00 00 00    	jne    c002310f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002304c:	83 ec 0c             	sub    esp,0xc
c002304f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023056:	e8 19 fa ff ff       	call   c0022a74 <SoundChannel::getVolume()>
c002305b:	83 c4 10             	add    esp,0x10
c002305e:	85 c0                	test   eax,eax
c0023060:	0f 84 a9 00 00 00    	je     c002310f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023066:	83 ec 0c             	sub    esp,0xc
c0023069:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023070:	e8 ff f9 ff ff       	call   c0022a74 <SoundChannel::getVolume()>
c0023075:	83 ec 0c             	sub    esp,0xc
c0023078:	50                   	push   eax
c0023079:	e8 91 4b 00 00       	call   c0027c0f <__floatsisf>
c002307e:	59                   	pop    ecx
c002307f:	5d                   	pop    ebp
c0023080:	31 ed                	xor    ebp,ebp
c0023082:	68 00 00 c8 42       	push   0x42c80000
c0023087:	50                   	push   eax
c0023088:	e8 57 49 00 00       	call   c00279e4 <__divsf3>
c002308d:	83 c4 10             	add    esp,0x10
c0023090:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0023098:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002309e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00230a2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00230a9:	e8 60 fb ff ff       	call   c0022c0e <SoundChannel::unbuffer(float*, int, int)>
c00230ae:	83 c4 20             	add    esp,0x20
c00230b1:	89 c1                	mov    ecx,eax
c00230b3:	39 cd                	cmp    ebp,ecx
c00230b5:	7d 52                	jge    c0023109 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00230b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00230bb:	50                   	push   eax
c00230bc:	50                   	push   eax
c00230bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00230c1:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00230c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00230c8:	e8 54 47 00 00       	call   c0027821 <__mulsf3>
c00230cd:	5a                   	pop    edx
c00230ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00230d2:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00230d8:	e8 32 4b 00 00       	call   c0027c0f <__floatsisf>
c00230dd:	59                   	pop    ecx
c00230de:	5a                   	pop    edx
c00230df:	50                   	push   eax
c00230e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230e4:	e8 fb 48 00 00       	call   c00279e4 <__divsf3>
c00230e9:	59                   	pop    ecx
c00230ea:	5a                   	pop    edx
c00230eb:	50                   	push   eax
c00230ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00230f0:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00230f3:	e8 06 44 00 00       	call   c00274fe <__addsf3>
c00230f8:	83 c4 10             	add    esp,0x10
c00230fb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00230ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023103:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0023106:	45                   	inc    ebp
c0023107:	eb aa                	jmp    c00230b3 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0023109:	39 cf                	cmp    edi,ecx
c002310b:	7e 02                	jle    c002310f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002310d:	89 cf                	mov    edi,ecx
c002310f:	43                   	inc    ebx
c0023110:	83 fb 20             	cmp    ebx,0x20
c0023113:	0f 85 10 ff ff ff    	jne    c0023029 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0023119:	83 c4 1c             	add    esp,0x1c
c002311c:	89 f8                	mov    eax,edi
c002311e:	5b                   	pop    ebx
c002311f:	5e                   	pop    esi
c0023120:	5f                   	pop    edi
c0023121:	5d                   	pop    ebp
c0023122:	c3                   	ret    
c0023123:	90                   	nop

c0023124 <PCI::open(int, int, void*)>:
c0023124:	83 ec 18             	sub    esp,0x18
c0023127:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002312b:	8b 10                	mov    edx,DWORD PTR [eax]
c002312d:	50                   	push   eax
c002312e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0023131:	31 c0                	xor    eax,eax
c0023133:	83 c4 1c             	add    esp,0x1c
c0023136:	c3                   	ret    
c0023137:	90                   	nop

c0023138 <PCI::close(int, int, void*)>:
c0023138:	31 c0                	xor    eax,eax
c002313a:	c3                   	ret    
c002313b:	90                   	nop

c002313c <PCI::PCI()>:
c002313c:	83 ec 0c             	sub    esp,0xc
c002313f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023143:	83 ec 08             	sub    esp,0x8
c0023146:	68 3c d5 02 c0       	push   0xc002d53c
c002314b:	50                   	push   eax
c002314c:	e8 93 09 ff ff       	call   c0013ae4 <Bus::Bus(char const*)>
c0023151:	83 c4 10             	add    esp,0x10
c0023154:	ba c4 d5 02 c0       	mov    edx,0xc002d5c4
c0023159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002315d:	89 10                	mov    DWORD PTR [eax],edx
c002315f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023163:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023169:	0f b6 d0             	movzx  edx,al
c002316c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023170:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002317b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023181:	0f b6 d0             	movzx  edx,al
c0023184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023188:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002318d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023191:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023197:	8d 50 01             	lea    edx,[eax+0x1]
c002319a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002319e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00231a4:	0f b6 d0             	movzx  edx,al
c00231a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00231af:	83 c9 c0             	or     ecx,0xffffffc0
c00231b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00231b6:	90                   	nop
c00231b7:	83 c4 0c             	add    esp,0xc
c00231ba:	c3                   	ret    
c00231bb:	90                   	nop

c00231bc <PCI::readBAR8(unsigned int, int)>:
c00231bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00231c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231c4:	f6 c2 01             	test   dl,0x1
c00231c7:	74 07                	je     c00231d0 <PCI::readBAR8(unsigned int, int)+0x14>
c00231c9:	83 e2 fc             	and    edx,0xfffffffc
c00231cc:	01 c2                	add    edx,eax
c00231ce:	ec                   	in     al,dx
c00231cf:	c3                   	ret    
c00231d0:	83 e2 f0             	and    edx,0xfffffff0
c00231d3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00231d6:	c3                   	ret    
c00231d7:	90                   	nop

c00231d8 <PCI::readBAR16(unsigned int, int)>:
c00231d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00231dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231e0:	f6 c2 01             	test   dl,0x1
c00231e3:	74 08                	je     c00231ed <PCI::readBAR16(unsigned int, int)+0x15>
c00231e5:	83 e2 fc             	and    edx,0xfffffffc
c00231e8:	01 c2                	add    edx,eax
c00231ea:	66 ed                	in     ax,dx
c00231ec:	c3                   	ret    
c00231ed:	83 e2 f0             	and    edx,0xfffffff0
c00231f0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00231f4:	c3                   	ret    
c00231f5:	90                   	nop

c00231f6 <PCI::readBAR32(unsigned int, int)>:
c00231f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00231fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231fe:	f6 c2 01             	test   dl,0x1
c0023201:	74 07                	je     c002320a <PCI::readBAR32(unsigned int, int)+0x14>
c0023203:	83 e2 fc             	and    edx,0xfffffffc
c0023206:	01 c2                	add    edx,eax
c0023208:	ed                   	in     eax,dx
c0023209:	c3                   	ret    
c002320a:	83 e2 f0             	and    edx,0xfffffff0
c002320d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0023210:	c3                   	ret    
c0023211:	90                   	nop

c0023212 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0023212:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002321a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002321e:	f6 c2 01             	test   dl,0x1
c0023221:	74 07                	je     c002322a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023223:	83 e2 fc             	and    edx,0xfffffffc
c0023226:	01 ca                	add    edx,ecx
c0023228:	ee                   	out    dx,al
c0023229:	c3                   	ret    
c002322a:	83 e2 f0             	and    edx,0xfffffff0
c002322d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0023230:	c3                   	ret    
c0023231:	90                   	nop

c0023232 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023232:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023236:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002323a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002323e:	f6 c2 01             	test   dl,0x1
c0023241:	74 08                	je     c002324b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0023243:	83 e2 fc             	and    edx,0xfffffffc
c0023246:	01 ca                	add    edx,ecx
c0023248:	66 ef                	out    dx,ax
c002324a:	c3                   	ret    
c002324b:	83 e2 f0             	and    edx,0xfffffff0
c002324e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0023252:	c3                   	ret    
c0023253:	90                   	nop

c0023254 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002325c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023260:	f6 c2 01             	test   dl,0x1
c0023263:	74 07                	je     c002326c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023265:	83 e2 fc             	and    edx,0xfffffffc
c0023268:	01 ca                	add    edx,ecx
c002326a:	ef                   	out    dx,eax
c002326b:	c3                   	ret    
c002326c:	83 e2 f0             	and    edx,0xfffffff0
c002326f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023272:	c3                   	ret    
c0023273:	90                   	nop

c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023274:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023278:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002327d:	89 ca                	mov    edx,ecx
c002327f:	c1 e0 10             	shl    eax,0x10
c0023282:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023288:	09 d0                	or     eax,edx
c002328a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002328f:	c1 e2 08             	shl    edx,0x8
c0023292:	09 d0                	or     eax,edx
c0023294:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023299:	c1 e2 0b             	shl    edx,0xb
c002329c:	09 d0                	or     eax,edx
c002329e:	ba f8 0c 00 00       	mov    edx,0xcf8
c00232a3:	0d 00 00 00 80       	or     eax,0x80000000
c00232a8:	ef                   	out    dx,eax
c00232a9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00232ae:	ed                   	in     eax,dx
c00232af:	83 e1 02             	and    ecx,0x2
c00232b2:	0f b6 c9             	movzx  ecx,cl
c00232b5:	c1 e1 03             	shl    ecx,0x3
c00232b8:	d3 e8                	shr    eax,cl
c00232ba:	c3                   	ret    
c00232bb:	90                   	nop

c00232bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00232bc:	6a 00                	push   0x0
c00232be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232c3:	50                   	push   eax
c00232c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232c9:	50                   	push   eax
c00232ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232cf:	50                   	push   eax
c00232d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232d4:	e8 9b ff ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232d9:	83 c4 14             	add    esp,0x14
c00232dc:	c3                   	ret    
c00232dd:	90                   	nop

c00232de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00232de:	6a 0e                	push   0xe
c00232e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232e5:	50                   	push   eax
c00232e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232eb:	50                   	push   eax
c00232ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232f1:	50                   	push   eax
c00232f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232f6:	e8 79 ff ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232fb:	83 c4 14             	add    esp,0x14
c00232fe:	0f b6 c0             	movzx  eax,al
c0023301:	c3                   	ret    

c0023302 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023302:	55                   	push   ebp
c0023303:	57                   	push   edi
c0023304:	56                   	push   esi
c0023305:	53                   	push   ebx
c0023306:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002330b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023310:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0023315:	6a 0a                	push   0xa
c0023317:	56                   	push   esi
c0023318:	55                   	push   ebp
c0023319:	57                   	push   edi
c002331a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002331e:	e8 51 ff ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023323:	6a 0a                	push   0xa
c0023325:	89 c3                	mov    ebx,eax
c0023327:	56                   	push   esi
c0023328:	0f b6 db             	movzx  ebx,bl
c002332b:	55                   	push   ebp
c002332c:	57                   	push   edi
c002332d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023331:	e8 3e ff ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023336:	83 c4 28             	add    esp,0x28
c0023339:	25 00 ff 00 00       	and    eax,0xff00
c002333e:	09 d8                	or     eax,ebx
c0023340:	5b                   	pop    ebx
c0023341:	5e                   	pop    esi
c0023342:	5f                   	pop    edi
c0023343:	5d                   	pop    ebp
c0023344:	c3                   	ret    
c0023345:	90                   	nop

c0023346 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023346:	6a 08                	push   0x8
c0023348:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002334d:	50                   	push   eax
c002334e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023353:	50                   	push   eax
c0023354:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023359:	50                   	push   eax
c002335a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002335e:	e8 11 ff ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023363:	83 c4 14             	add    esp,0x14
c0023366:	0f b6 c4             	movzx  eax,ah
c0023369:	c3                   	ret    

c002336a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002336a:	6a 08                	push   0x8
c002336c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023371:	50                   	push   eax
c0023372:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023377:	50                   	push   eax
c0023378:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002337d:	50                   	push   eax
c002337e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023382:	e8 ed fe ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023387:	83 c4 14             	add    esp,0x14
c002338a:	c3                   	ret    
c002338b:	90                   	nop

c002338c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002338c:	6a 3c                	push   0x3c
c002338e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023393:	50                   	push   eax
c0023394:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023399:	50                   	push   eax
c002339a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002339f:	50                   	push   eax
c00233a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00233a4:	e8 cb fe ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233a9:	83 c4 14             	add    esp,0x14
c00233ac:	c3                   	ret    
c00233ad:	90                   	nop

c00233ae <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00233ae:	6a 18                	push   0x18
c00233b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233b5:	50                   	push   eax
c00233b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233bb:	50                   	push   eax
c00233bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233c1:	50                   	push   eax
c00233c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00233c6:	e8 a9 fe ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233cb:	83 c4 14             	add    esp,0x14
c00233ce:	0f b6 c4             	movzx  eax,ah
c00233d1:	c3                   	ret    

c00233d2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00233d2:	55                   	push   ebp
c00233d3:	57                   	push   edi
c00233d4:	56                   	push   esi
c00233d5:	53                   	push   ebx
c00233d6:	50                   	push   eax
c00233d7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00233db:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00233e0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00233e5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00233ea:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00233f1:	8d 43 12             	lea    eax,[ebx+0x12]
c00233f4:	83 c3 10             	add    ebx,0x10
c00233f7:	0f b6 c0             	movzx  eax,al
c00233fa:	0f b6 db             	movzx  ebx,bl
c00233fd:	50                   	push   eax
c00233fe:	51                   	push   ecx
c00233ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023403:	57                   	push   edi
c0023404:	55                   	push   ebp
c0023405:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023409:	e8 66 fe ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002340e:	53                   	push   ebx
c002340f:	89 c6                	mov    esi,eax
c0023411:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023415:	c1 e6 10             	shl    esi,0x10
c0023418:	51                   	push   ecx
c0023419:	57                   	push   edi
c002341a:	55                   	push   ebp
c002341b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002341f:	e8 50 fe ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023424:	83 c4 2c             	add    esp,0x2c
c0023427:	0f b7 c0             	movzx  eax,ax
c002342a:	5b                   	pop    ebx
c002342b:	09 f0                	or     eax,esi
c002342d:	5e                   	pop    esi
c002342e:	5f                   	pop    edi
c002342f:	5d                   	pop    ebp
c0023430:	c3                   	ret    
c0023431:	90                   	nop

c0023432 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023432:	53                   	push   ebx
c0023433:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023438:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002343d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023441:	c1 e1 10             	shl    ecx,0x10
c0023444:	25 fc 00 00 00       	and    eax,0xfc
c0023449:	09 c1                	or     ecx,eax
c002344b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023450:	c1 e0 08             	shl    eax,0x8
c0023453:	09 c1                	or     ecx,eax
c0023455:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002345a:	c1 e0 0b             	shl    eax,0xb
c002345d:	09 c1                	or     ecx,eax
c002345f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023465:	89 c8                	mov    eax,ecx
c0023467:	ef                   	out    dx,eax
c0023468:	ba fc 0c 00 00       	mov    edx,0xcfc
c002346d:	ed                   	in     eax,dx
c002346e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023473:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023478:	74 0a                	je     c0023484 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002347a:	0f b7 d8             	movzx  ebx,ax
c002347d:	89 d0                	mov    eax,edx
c002347f:	c1 e0 10             	shl    eax,0x10
c0023482:	eb 05                	jmp    c0023489 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023484:	66 31 c0             	xor    ax,ax
c0023487:	89 d3                	mov    ebx,edx
c0023489:	09 c3                	or     ebx,eax
c002348b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023490:	89 c8                	mov    eax,ecx
c0023492:	ef                   	out    dx,eax
c0023493:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023498:	89 d8                	mov    eax,ebx
c002349a:	ef                   	out    dx,eax
c002349b:	5b                   	pop    ebx
c002349c:	c3                   	ret    
c002349d:	90                   	nop

c002349e <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c002349e:	31 c0                	xor    eax,eax
c00234a0:	c3                   	ret    
c00234a1:	90                   	nop

c00234a2 <PCI::checkBus(unsigned char)>:
c00234a2:	56                   	push   esi
c00234a3:	53                   	push   ebx
c00234a4:	31 db                	xor    ebx,ebx
c00234a6:	51                   	push   ecx
c00234a7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00234ac:	52                   	push   edx
c00234ad:	53                   	push   ebx
c00234ae:	43                   	inc    ebx
c00234af:	56                   	push   esi
c00234b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234b4:	e8 41 03 00 00       	call   c00237fa <PCI::checkDevice(unsigned char, unsigned char)>
c00234b9:	83 c4 10             	add    esp,0x10
c00234bc:	83 fb 20             	cmp    ebx,0x20
c00234bf:	75 eb                	jne    c00234ac <PCI::checkBus(unsigned char)+0xa>
c00234c1:	58                   	pop    eax
c00234c2:	5b                   	pop    ebx
c00234c3:	5e                   	pop    esi
c00234c4:	c3                   	ret    
c00234c5:	90                   	nop

c00234c6 <PCI::foundDevice(PCIDeviceInfo)>:
c00234c6:	55                   	push   ebp
c00234c7:	57                   	push   edi
c00234c8:	56                   	push   esi
c00234c9:	53                   	push   ebx
c00234ca:	83 ec 1c             	sub    esp,0x1c
c00234cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00234d1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00234d7:	0f 84 68 01 00 00    	je     c0023645 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00234dd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00234e1:	66 81 f9 06 04       	cmp    cx,0x406
c00234e6:	75 2c                	jne    c0023514 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00234e8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00234ed:	50                   	push   eax
c00234ee:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00234f3:	50                   	push   eax
c00234f4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00234f9:	50                   	push   eax
c00234fa:	56                   	push   esi
c00234fb:	e8 ae fe ff ff       	call   c00233ae <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023500:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023504:	0f b6 c0             	movzx  eax,al
c0023507:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002350b:	83 c4 2c             	add    esp,0x2c
c002350e:	5b                   	pop    ebx
c002350f:	5e                   	pop    esi
c0023510:	5f                   	pop    edi
c0023511:	5d                   	pop    ebp
c0023512:	eb 8e                	jmp    c00234a2 <PCI::checkBus(unsigned char)>
c0023514:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023518:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002351e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023522:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023526:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002352a:	88 d3                	mov    bl,dl
c002352c:	85 c0                	test   eax,eax
c002352e:	74 33                	je     c0023563 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023530:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023533:	85 d2                	test   edx,edx
c0023535:	74 28                	je     c002355f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023537:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002353d:	31 ef                	xor    edi,ebp
c002353f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023545:	75 18                	jne    c002355f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023547:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002354b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023551:	75 0c                	jne    c002355f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023553:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023559:	0f 84 e6 00 00 00    	je     c0023645 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002355f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023561:	eb c9                	jmp    c002352c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023563:	66 81 f9 01 06       	cmp    cx,0x601
c0023568:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002356c:	75 19                	jne    c0023587 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002356e:	83 ec 0c             	sub    esp,0xc
c0023571:	68 64 01 00 00       	push   0x164
c0023576:	e8 2d c3 fe ff       	call   c000f8a8 <malloc>
c002357b:	89 c5                	mov    ebp,eax
c002357d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023580:	e8 ab 0f 00 00       	call   c0024530 <SATABus::SATABus()>
c0023585:	eb 1e                	jmp    c00235a5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023587:	66 81 f9 01 01       	cmp    cx,0x101
c002358c:	75 60                	jne    c00235ee <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002358e:	83 ec 0c             	sub    esp,0xc
c0023591:	68 70 02 00 00       	push   0x270
c0023596:	e8 0d c3 fe ff       	call   c000f8a8 <malloc>
c002359b:	89 c5                	mov    ebp,eax
c002359d:	89 04 24             	mov    DWORD PTR [esp],eax
c00235a0:	e8 19 03 00 00       	call   c00238be <IDE::IDE()>
c00235a5:	58                   	pop    eax
c00235a6:	5a                   	pop    edx
c00235a7:	55                   	push   ebp
c00235a8:	56                   	push   esi
c00235a9:	e8 b6 0c ff ff       	call   c0014264 <Device::addChild(Device*)>
c00235ae:	83 ec 1c             	sub    esp,0x1c
c00235b1:	b9 09 00 00 00       	mov    ecx,0x9
c00235b6:	fc                   	cld    
c00235b7:	89 e7                	mov    edi,esp
c00235b9:	89 de                	mov    esi,ebx
c00235bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235bd:	55                   	push   ebp
c00235be:	e8 bf 0b ff ff       	call   c0014182 <Device::preOpenPCI(PCIDeviceInfo)>
c00235c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00235c6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00235ca:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00235d2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00235da:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00235e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00235e5:	83 c4 4c             	add    esp,0x4c
c00235e8:	5b                   	pop    ebx
c00235e9:	5e                   	pop    esi
c00235ea:	5f                   	pop    edi
c00235eb:	5d                   	pop    ebp
c00235ec:	ff e0                	jmp    eax
c00235ee:	50                   	push   eax
c00235ef:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00235f4:	50                   	push   eax
c00235f5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00235fa:	50                   	push   eax
c00235fb:	68 44 d5 02 c0       	push   0xc002d544
c0023600:	e8 3e f8 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0023605:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c002360c:	e8 97 c2 fe ff       	call   c000f8a8 <malloc>
c0023611:	5a                   	pop    edx
c0023612:	89 c5                	mov    ebp,eax
c0023614:	59                   	pop    ecx
c0023615:	68 60 d5 02 c0       	push   0xc002d560
c002361a:	50                   	push   eax
c002361b:	e8 3a 0f ff ff       	call   c001455a <DriverlessDevice::DriverlessDevice(char const*)>
c0023620:	5f                   	pop    edi
c0023621:	58                   	pop    eax
c0023622:	55                   	push   ebp
c0023623:	56                   	push   esi
c0023624:	e8 3b 0c ff ff       	call   c0014264 <Device::addChild(Device*)>
c0023629:	b9 09 00 00 00       	mov    ecx,0x9
c002362e:	fc                   	cld    
c002362f:	89 df                	mov    edi,ebx
c0023631:	89 de                	mov    esi,ebx
c0023633:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023635:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023639:	83 c4 2c             	add    esp,0x2c
c002363c:	5b                   	pop    ebx
c002363d:	5e                   	pop    esi
c002363e:	5f                   	pop    edi
c002363f:	5d                   	pop    ebp
c0023640:	e9 3d 0b ff ff       	jmp    c0014182 <Device::preOpenPCI(PCIDeviceInfo)>
c0023645:	83 c4 1c             	add    esp,0x1c
c0023648:	5b                   	pop    ebx
c0023649:	5e                   	pop    esi
c002364a:	5f                   	pop    edi
c002364b:	5d                   	pop    ebp
c002364c:	c3                   	ret    
c002364d:	90                   	nop

c002364e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002364e:	55                   	push   ebp
c002364f:	57                   	push   edi
c0023650:	56                   	push   esi
c0023651:	53                   	push   ebx
c0023652:	83 ec 5c             	sub    esp,0x5c
c0023655:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023659:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002365d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023661:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0023666:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002366a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002366e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0023673:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023677:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002367c:	6a 0c                	push   0xc
c002367e:	55                   	push   ebp
c002367f:	53                   	push   ebx
c0023680:	57                   	push   edi
c0023681:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023688:	e8 e7 fb ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002368d:	55                   	push   ebp
c002368e:	53                   	push   ebx
c002368f:	57                   	push   edi
c0023690:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023697:	e8 66 fc ff ff       	call   c0023302 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002369c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00236a1:	83 c4 24             	add    esp,0x24
c00236a4:	55                   	push   ebp
c00236a5:	53                   	push   ebx
c00236a6:	57                   	push   edi
c00236a7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00236ab:	e8 dc fc ff ff       	call   c002338c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00236b0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00236b4:	6a 3c                	push   0x3c
c00236b6:	55                   	push   ebp
c00236b7:	53                   	push   ebx
c00236b8:	57                   	push   edi
c00236b9:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00236c0:	e8 af fb ff ff       	call   c0023274 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236c5:	0f b6 c4             	movzx  eax,ah
c00236c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00236cc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00236d0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00236d4:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00236d9:	83 c4 24             	add    esp,0x24
c00236dc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00236e2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00236e9:	74 6c                	je     c0023757 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00236eb:	31 f6                	xor    esi,esi
c00236ed:	8b 15 68 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef68
c00236f3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00236f9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00236ff:	7e 56                	jle    c0023757 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023701:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023704:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002370b:	39 cb                	cmp    ebx,ecx
c002370d:	75 45                	jne    c0023754 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002370f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023716:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c002371a:	75 38                	jne    c0023754 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002371c:	83 ec 0c             	sub    esp,0xc
c002371f:	68 7a d5 02 c0       	push   0xc002d57a
c0023724:	e8 1a f7 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0023729:	8b 15 68 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef68
c002372f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023735:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c002373d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0023741:	52                   	push   edx
c0023742:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023746:	53                   	push   ebx
c0023747:	68 9f d5 02 c0       	push   0xc002d59f
c002374c:	e8 f2 f6 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0023751:	83 c4 20             	add    esp,0x20
c0023754:	46                   	inc    esi
c0023755:	eb 96                	jmp    c00236ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023757:	31 d2                	xor    edx,edx
c0023759:	83 ec 0c             	sub    esp,0xc
c002375c:	55                   	push   ebp
c002375d:	53                   	push   ebx
c002375e:	57                   	push   edi
c002375f:	52                   	push   edx
c0023760:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023764:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002376b:	e8 62 fc ff ff       	call   c00233d2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023770:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023774:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023778:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002377c:	42                   	inc    edx
c002377d:	83 c4 20             	add    esp,0x20
c0023780:	83 fa 06             	cmp    edx,0x6
c0023783:	75 d4                	jne    c0023759 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023785:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023789:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002378d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023791:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023795:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023799:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002379d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00237a2:	86 e0                	xchg   al,ah
c00237a4:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00237a9:	55                   	push   ebp
c00237aa:	53                   	push   ebx
c00237ab:	57                   	push   edi
c00237ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00237b0:	e8 91 fb ff ff       	call   c0023346 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00237b5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00237b9:	55                   	push   ebp
c00237ba:	53                   	push   ebx
c00237bb:	57                   	push   edi
c00237bc:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00237c3:	e8 f4 fa ff ff       	call   c00232bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237c8:	83 ec 0c             	sub    esp,0xc
c00237cb:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00237d0:	b9 09 00 00 00       	mov    ecx,0x9
c00237d5:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00237d9:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00237dd:	fc                   	cld    
c00237de:	89 e7                	mov    edi,esp
c00237e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00237e2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00237e9:	e8 d8 fc ff ff       	call   c00234c6 <PCI::foundDevice(PCIDeviceInfo)>
c00237ee:	81 c4 8c 00 00 00    	add    esp,0x8c
c00237f4:	5b                   	pop    ebx
c00237f5:	5e                   	pop    esi
c00237f6:	5f                   	pop    edi
c00237f7:	5d                   	pop    ebp
c00237f8:	c3                   	ret    
c00237f9:	90                   	nop

c00237fa <PCI::checkDevice(unsigned char, unsigned char)>:
c00237fa:	55                   	push   ebp
c00237fb:	57                   	push   edi
c00237fc:	56                   	push   esi
c00237fd:	53                   	push   ebx
c00237fe:	83 ec 0c             	sub    esp,0xc
c0023801:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023805:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002380a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002380f:	6a 00                	push   0x0
c0023811:	56                   	push   esi
c0023812:	57                   	push   edi
c0023813:	55                   	push   ebp
c0023814:	e8 a3 fa ff ff       	call   c00232bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023819:	6a 00                	push   0x0
c002381b:	56                   	push   esi
c002381c:	57                   	push   edi
c002381d:	55                   	push   ebp
c002381e:	e8 2b fe ff ff       	call   c002364e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023823:	83 c4 20             	add    esp,0x20
c0023826:	6a 00                	push   0x0
c0023828:	56                   	push   esi
c0023829:	57                   	push   edi
c002382a:	55                   	push   ebp
c002382b:	e8 ae fa ff ff       	call   c00232de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023830:	83 c4 10             	add    esp,0x10
c0023833:	84 c0                	test   al,al
c0023835:	79 27                	jns    c002385e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023837:	bb 01 00 00 00       	mov    ebx,0x1
c002383c:	53                   	push   ebx
c002383d:	56                   	push   esi
c002383e:	57                   	push   edi
c002383f:	55                   	push   ebp
c0023840:	e8 77 fa ff ff       	call   c00232bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023845:	83 c4 10             	add    esp,0x10
c0023848:	66 40                	inc    ax
c002384a:	74 0c                	je     c0023858 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002384c:	53                   	push   ebx
c002384d:	56                   	push   esi
c002384e:	57                   	push   edi
c002384f:	55                   	push   ebp
c0023850:	e8 f9 fd ff ff       	call   c002364e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023855:	83 c4 10             	add    esp,0x10
c0023858:	43                   	inc    ebx
c0023859:	83 fb 08             	cmp    ebx,0x8
c002385c:	75 de                	jne    c002383c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002385e:	83 c4 0c             	add    esp,0xc
c0023861:	5b                   	pop    ebx
c0023862:	5e                   	pop    esi
c0023863:	5f                   	pop    edi
c0023864:	5d                   	pop    ebp
c0023865:	c3                   	ret    

c0023866 <PCI::detect()>:
c0023866:	56                   	push   esi
c0023867:	53                   	push   ebx
c0023868:	53                   	push   ebx
c0023869:	31 db                	xor    ebx,ebx
c002386b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002386f:	6a 00                	push   0x0
c0023871:	6a 00                	push   0x0
c0023873:	6a 00                	push   0x0
c0023875:	56                   	push   esi
c0023876:	e8 63 fa ff ff       	call   c00232de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002387b:	83 c4 10             	add    esp,0x10
c002387e:	a8 80                	test   al,0x80
c0023880:	75 21                	jne    c00238a3 <PCI::detect()+0x3d>
c0023882:	51                   	push   ecx
c0023883:	51                   	push   ecx
c0023884:	6a 00                	push   0x0
c0023886:	56                   	push   esi
c0023887:	e8 16 fc ff ff       	call   c00234a2 <PCI::checkBus(unsigned char)>
c002388c:	83 c4 10             	add    esp,0x10
c002388f:	eb 24                	jmp    c00238b5 <PCI::detect()+0x4f>
c0023891:	52                   	push   edx
c0023892:	52                   	push   edx
c0023893:	53                   	push   ebx
c0023894:	43                   	inc    ebx
c0023895:	56                   	push   esi
c0023896:	e8 07 fc ff ff       	call   c00234a2 <PCI::checkBus(unsigned char)>
c002389b:	83 c4 10             	add    esp,0x10
c002389e:	83 fb 08             	cmp    ebx,0x8
c00238a1:	74 12                	je     c00238b5 <PCI::detect()+0x4f>
c00238a3:	53                   	push   ebx
c00238a4:	6a 00                	push   0x0
c00238a6:	6a 00                	push   0x0
c00238a8:	56                   	push   esi
c00238a9:	e8 0e fa ff ff       	call   c00232bc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00238ae:	83 c4 10             	add    esp,0x10
c00238b1:	66 40                	inc    ax
c00238b3:	74 dc                	je     c0023891 <PCI::detect()+0x2b>
c00238b5:	58                   	pop    eax
c00238b6:	5b                   	pop    ebx
c00238b7:	5e                   	pop    esi
c00238b8:	c3                   	ret    
c00238b9:	90                   	nop

c00238ba <IDE::close(int, int, void*)>:
c00238ba:	83 c8 ff             	or     eax,0xffffffff
c00238bd:	c3                   	ret    

c00238be <IDE::IDE()>:
c00238be:	83 ec 0c             	sub    esp,0xc
c00238c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238c5:	83 ec 08             	sub    esp,0x8
c00238c8:	68 e8 d5 02 c0       	push   0xc002d5e8
c00238cd:	50                   	push   eax
c00238ce:	e8 2b 0d ff ff       	call   c00145fe <HardDiskController::HardDiskController(char const*)>
c00238d3:	83 c4 10             	add    esp,0x10
c00238d6:	ba 28 d8 02 c0       	mov    edx,0xc002d828
c00238db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238df:	89 10                	mov    DWORD PTR [eax],edx
c00238e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238e5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00238ec:	90                   	nop
c00238ed:	83 c4 0c             	add    esp,0xc
c00238f0:	c3                   	ret    
c00238f1:	90                   	nop

c00238f2 <IDE::prepareInterrupt(unsigned char)>:
c00238f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00238f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00238fb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023903:	c3                   	ret    

c0023904 <selectDrive(unsigned char, unsigned char)>:
c0023904:	c3                   	ret    
c0023905:	90                   	nop

c0023906 <IDE::getBase(unsigned char)>:
c0023906:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002390b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002390f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023917:	c3                   	ret    

c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023918:	55                   	push   ebp
c0023919:	57                   	push   edi
c002391a:	56                   	push   esi
c002391b:	53                   	push   ebx
c002391c:	83 ec 1c             	sub    esp,0x1c
c002391f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023923:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023927:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002392a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002392e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023932:	80 f9 03             	cmp    cl,0x3
c0023935:	77 51                	ja     c0023988 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023937:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002393b:	0f b6 f2             	movzx  esi,dl
c002393e:	0f b6 db             	movzx  ebx,bl
c0023941:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023944:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023948:	83 ca 80             	or     edx,0xffffff80
c002394b:	0f b6 d2             	movzx  edx,dl
c002394e:	52                   	push   edx
c002394f:	6a 0c                	push   0xc
c0023951:	56                   	push   esi
c0023952:	57                   	push   edi
c0023953:	e8 c0 ff ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023958:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002395d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023961:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023965:	ee                   	out    dx,al
c0023966:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002396b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002396f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023973:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023977:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002397f:	83 c4 2c             	add    esp,0x2c
c0023982:	5b                   	pop    ebx
c0023983:	5e                   	pop    esi
c0023984:	5f                   	pop    edi
c0023985:	5d                   	pop    ebp
c0023986:	eb 90                	jmp    c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023988:	80 fb 07             	cmp    bl,0x7
c002398b:	77 12                	ja     c002399f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002398d:	0f b6 d2             	movzx  edx,dl
c0023990:	0f b6 db             	movzx  ebx,bl
c0023993:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002399b:	89 da                	mov    edx,ebx
c002399d:	eb 2f                	jmp    c00239ce <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002399f:	80 fb 0d             	cmp    bl,0xd
c00239a2:	77 13                	ja     c00239b7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00239a4:	0f b6 d2             	movzx  edx,dl
c00239a7:	0f b6 db             	movzx  ebx,bl
c00239aa:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00239b1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00239b5:	eb 17                	jmp    c00239ce <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00239b7:	80 fb 15             	cmp    bl,0x15
c00239ba:	77 13                	ja     c00239cf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00239bc:	0f b6 d2             	movzx  edx,dl
c00239bf:	0f b6 db             	movzx  ebx,bl
c00239c2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00239ca:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00239ce:	ee                   	out    dx,al
c00239cf:	83 c4 1c             	add    esp,0x1c
c00239d2:	5b                   	pop    ebx
c00239d3:	5e                   	pop    esi
c00239d4:	5f                   	pop    edi
c00239d5:	5d                   	pop    ebp
c00239d6:	c3                   	ret    
c00239d7:	90                   	nop

c00239d8 <IDE::read(unsigned char, unsigned char)>:
c00239d8:	55                   	push   ebp
c00239d9:	57                   	push   edi
c00239da:	56                   	push   esi
c00239db:	53                   	push   ebx
c00239dc:	83 ec 1c             	sub    esp,0x1c
c00239df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00239e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239e7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00239ea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00239ee:	3c 03                	cmp    al,0x3
c00239f0:	77 43                	ja     c0023a35 <IDE::read(unsigned char, unsigned char)+0x5d>
c00239f2:	0f b6 f2             	movzx  esi,dl
c00239f5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00239f8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00239fc:	83 c8 80             	or     eax,0xffffff80
c00239ff:	0f b6 c0             	movzx  eax,al
c0023a02:	50                   	push   eax
c0023a03:	6a 0c                	push   0xc
c0023a05:	56                   	push   esi
c0023a06:	57                   	push   edi
c0023a07:	e8 0c ff ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a0c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023a11:	0f b6 c3             	movzx  eax,bl
c0023a14:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023a18:	ec                   	in     al,dx
c0023a19:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a1d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023a22:	52                   	push   edx
c0023a23:	6a 0c                	push   0xc
c0023a25:	56                   	push   esi
c0023a26:	57                   	push   edi
c0023a27:	e8 ec fe ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a2c:	83 c4 20             	add    esp,0x20
c0023a2f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023a33:	eb 49                	jmp    c0023a7e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023a35:	80 fb 07             	cmp    bl,0x7
c0023a38:	77 12                	ja     c0023a4c <IDE::read(unsigned char, unsigned char)+0x74>
c0023a3a:	0f b6 d2             	movzx  edx,dl
c0023a3d:	0f b6 c3             	movzx  eax,bl
c0023a40:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023a48:	89 c2                	mov    edx,eax
c0023a4a:	eb 31                	jmp    c0023a7d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023a4c:	80 fb 0d             	cmp    bl,0xd
c0023a4f:	77 13                	ja     c0023a64 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023a51:	0f b6 d2             	movzx  edx,dl
c0023a54:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023a5b:	0f b6 d3             	movzx  edx,bl
c0023a5e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023a62:	eb 19                	jmp    c0023a7d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023a64:	31 c0                	xor    eax,eax
c0023a66:	80 fb 15             	cmp    bl,0x15
c0023a69:	77 13                	ja     c0023a7e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023a6b:	0f b6 d2             	movzx  edx,dl
c0023a6e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023a76:	0f b6 d3             	movzx  edx,bl
c0023a79:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023a7d:	ec                   	in     al,dx
c0023a7e:	83 c4 1c             	add    esp,0x1c
c0023a81:	5b                   	pop    ebx
c0023a82:	5e                   	pop    esi
c0023a83:	5f                   	pop    edi
c0023a84:	5d                   	pop    ebp
c0023a85:	c3                   	ret    

c0023a86 <IDE::waitInterrupt(unsigned char)>:
c0023a86:	55                   	push   ebp
c0023a87:	57                   	push   edi
c0023a88:	56                   	push   esi
c0023a89:	53                   	push   ebx
c0023a8a:	31 db                	xor    ebx,ebx
c0023a8c:	83 ec 0c             	sub    esp,0xc
c0023a8f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023a93:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023a98:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023aa0:	89 e8                	mov    eax,ebp
c0023aa2:	84 c0                	test   al,al
c0023aa4:	75 34                	jne    c0023ada <IDE::waitInterrupt(unsigned char)+0x54>
c0023aa6:	52                   	push   edx
c0023aa7:	6a 0c                	push   0xc
c0023aa9:	56                   	push   esi
c0023aaa:	57                   	push   edi
c0023aab:	e8 28 ff ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0023ab0:	83 c4 10             	add    esp,0x10
c0023ab3:	a8 01                	test   al,0x1
c0023ab5:	75 2b                	jne    c0023ae2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023ab7:	f6 c3 04             	test   bl,0x4
c0023aba:	75 16                	jne    c0023ad2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023abc:	83 fb 32             	cmp    ebx,0x32
c0023abf:	7e 11                	jle    c0023ad2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023ac1:	50                   	push   eax
c0023ac2:	50                   	push   eax
c0023ac3:	6a 00                	push   0x0
c0023ac5:	68 80 96 98 00       	push   0x989680
c0023aca:	e8 d0 ad ff ff       	call   c001e89f <nanoSleep(unsigned long long)>
c0023acf:	83 c4 10             	add    esp,0x10
c0023ad2:	83 fb 3c             	cmp    ebx,0x3c
c0023ad5:	74 0b                	je     c0023ae2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023ad7:	43                   	inc    ebx
c0023ad8:	eb be                	jmp    c0023a98 <IDE::waitInterrupt(unsigned char)+0x12>
c0023ada:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023ae2:	83 c4 0c             	add    esp,0xc
c0023ae5:	89 e8                	mov    eax,ebp
c0023ae7:	5b                   	pop    ebx
c0023ae8:	5e                   	pop    esi
c0023ae9:	5f                   	pop    edi
c0023aea:	5d                   	pop    ebp
c0023aeb:	c3                   	ret    

c0023aec <ideChannel0IRQHandler(regs*, void*)>:
c0023aec:	83 ec 10             	sub    esp,0x10
c0023aef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023af3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023afa:	6a 07                	push   0x7
c0023afc:	6a 00                	push   0x0
c0023afe:	50                   	push   eax
c0023aff:	e8 d4 fe ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0023b04:	83 c4 1c             	add    esp,0x1c
c0023b07:	c3                   	ret    

c0023b08 <ideChannel1IRQHandler(regs*, void*)>:
c0023b08:	83 ec 10             	sub    esp,0x10
c0023b0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b0f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023b16:	6a 07                	push   0x7
c0023b18:	6a 01                	push   0x1
c0023b1a:	50                   	push   eax
c0023b1b:	e8 b8 fe ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0023b20:	83 c4 1c             	add    esp,0x1c
c0023b23:	c3                   	ret    

c0023b24 <IDE::enableIRQs(unsigned char, bool)>:
c0023b24:	57                   	push   edi
c0023b25:	56                   	push   esi
c0023b26:	be 04 00 00 00       	mov    esi,0x4
c0023b2b:	53                   	push   ebx
c0023b2c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023b31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023b35:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023b3a:	0f 94 c0             	sete   al
c0023b3d:	d1 e0                	shl    eax,1
c0023b3f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023b46:	0f b6 c0             	movzx  eax,al
c0023b49:	50                   	push   eax
c0023b4a:	6a 0c                	push   0xc
c0023b4c:	57                   	push   edi
c0023b4d:	53                   	push   ebx
c0023b4e:	e8 c5 fd ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b53:	83 c4 10             	add    esp,0x10
c0023b56:	50                   	push   eax
c0023b57:	6a 0c                	push   0xc
c0023b59:	57                   	push   edi
c0023b5a:	53                   	push   ebx
c0023b5b:	e8 78 fe ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0023b60:	83 c4 10             	add    esp,0x10
c0023b63:	4e                   	dec    esi
c0023b64:	75 f0                	jne    c0023b56 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023b66:	5b                   	pop    ebx
c0023b67:	5e                   	pop    esi
c0023b68:	5f                   	pop    edi
c0023b69:	c3                   	ret    

c0023b6a <IDE::open(int, int, void*)>:
c0023b6a:	55                   	push   ebp
c0023b6b:	57                   	push   edi
c0023b6c:	56                   	push   esi
c0023b6d:	53                   	push   ebx
c0023b6e:	83 ec 1c             	sub    esp,0x1c
c0023b71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023b75:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023b7e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023b87:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023b8e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023b95:	0f 85 b0 02 00 00    	jne    c0023e4b <IDE::open(int, int, void*)+0x2e1>
c0023b9b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023ba1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023ba5:	83 e0 7f             	and    eax,0x7f
c0023ba8:	3c 05                	cmp    al,0x5
c0023baa:	74 04                	je     c0023bb0 <IDE::open(int, int, void*)+0x46>
c0023bac:	3c 0f                	cmp    al,0xf
c0023bae:	75 32                	jne    c0023be2 <IDE::open(int, int, void*)+0x78>
c0023bb0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023bb6:	83 e0 fc             	and    eax,0xfffffffc
c0023bb9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023bc0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023bc6:	83 e0 fc             	and    eax,0xfffffffc
c0023bc9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023bd0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023bd6:	83 e0 fc             	and    eax,0xfffffffc
c0023bd9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023be0:	eb 14                	jmp    c0023bf6 <IDE::open(int, int, void*)+0x8c>
c0023be2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023bec:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023bf6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023bfd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023c04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c08:	89 c6                	mov    esi,eax
c0023c0a:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c0f:	c1 e6 10             	shl    esi,0x10
c0023c12:	89 e8                	mov    eax,ebp
c0023c14:	89 fa                	mov    edx,edi
c0023c16:	c1 e0 0b             	shl    eax,0xb
c0023c19:	09 f0                	or     eax,esi
c0023c1b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023c22:	c1 e6 08             	shl    esi,0x8
c0023c25:	09 c6                	or     esi,eax
c0023c27:	89 f0                	mov    eax,esi
c0023c29:	0d 08 00 00 80       	or     eax,0x80000008
c0023c2e:	ef                   	out    dx,eax
c0023c2f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023c34:	89 ca                	mov    edx,ecx
c0023c36:	ed                   	in     eax,dx
c0023c37:	c1 e8 10             	shr    eax,0x10
c0023c3a:	3d ff ff 00 00       	cmp    eax,0xffff
c0023c3f:	0f 84 f5 00 00 00    	je     c0023d3a <IDE::open(int, int, void*)+0x1d0>
c0023c45:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023c4b:	89 fa                	mov    edx,edi
c0023c4d:	89 f0                	mov    eax,esi
c0023c4f:	ef                   	out    dx,eax
c0023c50:	b0 fe                	mov    al,0xfe
c0023c52:	89 ca                	mov    edx,ecx
c0023c54:	ee                   	out    dx,al
c0023c55:	89 f0                	mov    eax,esi
c0023c57:	89 fa                	mov    edx,edi
c0023c59:	ef                   	out    dx,eax
c0023c5a:	89 ca                	mov    edx,ecx
c0023c5c:	ed                   	in     eax,dx
c0023c5d:	3c fe                	cmp    al,0xfe
c0023c5f:	0f 85 a9 00 00 00    	jne    c0023d0e <IDE::open(int, int, void*)+0x1a4>
c0023c65:	8b 15 68 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef68
c0023c6b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023c72:	74 33                	je     c0023ca7 <IDE::open(int, int, void*)+0x13d>
c0023c74:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023c7a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023c7e:	40                   	inc    eax
c0023c7f:	83 ec 0c             	sub    esp,0xc
c0023c82:	0f b6 c0             	movzx  eax,al
c0023c85:	50                   	push   eax
c0023c86:	55                   	push   ebp
c0023c87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c8b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023c91:	51                   	push   ecx
c0023c92:	e8 9b 46 ff ff       	call   c0018332 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023c97:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023c9c:	83 c4 1c             	add    esp,0x1c
c0023c9f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023ca5:	eb 0a                	jmp    c0023cb1 <IDE::open(int, int, void*)+0x147>
c0023ca7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023cb1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023cb8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023cbf:	c1 e1 10             	shl    ecx,0x10
c0023cc2:	c1 e0 08             	shl    eax,0x8
c0023cc5:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023cca:	09 c1                	or     ecx,eax
c0023ccc:	89 fa                	mov    edx,edi
c0023cce:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023cd5:	c1 e0 0b             	shl    eax,0xb
c0023cd8:	09 c1                	or     ecx,eax
c0023cda:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023ce0:	89 c8                	mov    eax,ecx
c0023ce2:	ef                   	out    dx,eax
c0023ce3:	be fc 0c 00 00       	mov    esi,0xcfc
c0023ce8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023cee:	89 f2                	mov    edx,esi
c0023cf0:	ee                   	out    dx,al
c0023cf1:	89 c8                	mov    eax,ecx
c0023cf3:	89 fa                	mov    edx,edi
c0023cf5:	ef                   	out    dx,eax
c0023cf6:	89 f2                	mov    edx,esi
c0023cf8:	ed                   	in     eax,dx
c0023cf9:	0f b6 c0             	movzx  eax,al
c0023cfc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023d02:	74 46                	je     c0023d4a <IDE::open(int, int, void*)+0x1e0>
c0023d04:	83 ec 0c             	sub    esp,0xc
c0023d07:	68 00 d6 02 c0       	push   0xc002d600
c0023d0c:	eb 34                	jmp    c0023d42 <IDE::open(int, int, void*)+0x1d8>
c0023d0e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023d17:	75 17                	jne    c0023d30 <IDE::open(int, int, void*)+0x1c6>
c0023d19:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023d1e:	74 07                	je     c0023d27 <IDE::open(int, int, void*)+0x1bd>
c0023d20:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023d25:	75 09                	jne    c0023d30 <IDE::open(int, int, void*)+0x1c6>
c0023d27:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d2e:	eb 1a                	jmp    c0023d4a <IDE::open(int, int, void*)+0x1e0>
c0023d30:	83 ec 0c             	sub    esp,0xc
c0023d33:	68 08 d6 02 c0       	push   0xc002d608
c0023d38:	eb 08                	jmp    c0023d42 <IDE::open(int, int, void*)+0x1d8>
c0023d3a:	83 ec 0c             	sub    esp,0xc
c0023d3d:	68 39 d6 02 c0       	push   0xc002d639
c0023d42:	e8 c6 6a ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0023d47:	83 c4 10             	add    esp,0x10
c0023d4a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023d51:	79 1a                	jns    c0023d6d <IDE::open(int, int, void*)+0x203>
c0023d53:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023d59:	83 e0 fc             	and    eax,0xfffffffc
c0023d5c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023d63:	83 c0 08             	add    eax,0x8
c0023d66:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023d6d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023d73:	89 c2                	mov    edx,eax
c0023d75:	83 e2 0f             	and    edx,0xf
c0023d78:	66 83 fa 08          	cmp    dx,0x8
c0023d7c:	75 0a                	jne    c0023d88 <IDE::open(int, int, void*)+0x21e>
c0023d7e:	83 e8 02             	sub    eax,0x2
c0023d81:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d88:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023d8e:	89 c2                	mov    edx,eax
c0023d90:	83 e2 0f             	and    edx,0xf
c0023d93:	66 83 fa 08          	cmp    dx,0x8
c0023d97:	75 0a                	jne    c0023da3 <IDE::open(int, int, void*)+0x239>
c0023d99:	83 e8 02             	sub    eax,0x2
c0023d9c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023da3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023daa:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023db1:	89 d0                	mov    eax,edx
c0023db3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023db6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023dba:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023dbe:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023dc1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023dc6:	0f b6 c9             	movzx  ecx,cl
c0023dc9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023dd0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023dd3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023dd7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023ddb:	8d 50 02             	lea    edx,[eax+0x2]
c0023dde:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023de3:	0f b6 d2             	movzx  edx,dl
c0023de6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023dec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023def:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023df3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023df7:	8d 48 03             	lea    ecx,[eax+0x3]
c0023dfa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023dff:	0f b6 c9             	movzx  ecx,cl
c0023e02:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023e08:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e0b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e0f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023e13:	8d 50 04             	lea    edx,[eax+0x4]
c0023e16:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023e1c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023e21:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023e28:	66 85 f6             	test   si,si
c0023e2b:	74 3e                	je     c0023e6b <IDE::open(int, int, void*)+0x301>
c0023e2d:	0f b6 d2             	movzx  edx,dl
c0023e30:	83 c0 05             	add    eax,0x5
c0023e33:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e36:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e3a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023e3e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023e44:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e49:	eb 20                	jmp    c0023e6b <IDE::open(int, int, void*)+0x301>
c0023e4b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023e55:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023e5f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023e66:	e9 02 ff ff ff       	jmp    c0023d6d <IDE::open(int, int, void*)+0x203>
c0023e6b:	52                   	push   edx
c0023e6c:	52                   	push   edx
c0023e6d:	6a 00                	push   0x0
c0023e6f:	53                   	push   ebx
c0023e70:	e8 7d fa ff ff       	call   c00238f2 <IDE::prepareInterrupt(unsigned char)>
c0023e75:	59                   	pop    ecx
c0023e76:	5e                   	pop    esi
c0023e77:	6a 01                	push   0x1
c0023e79:	53                   	push   ebx
c0023e7a:	e8 73 fa ff ff       	call   c00238f2 <IDE::prepareInterrupt(unsigned char)>
c0023e7f:	83 c4 0c             	add    esp,0xc
c0023e82:	6a 00                	push   0x0
c0023e84:	6a 00                	push   0x0
c0023e86:	53                   	push   ebx
c0023e87:	e8 98 fc ff ff       	call   c0023b24 <IDE::enableIRQs(unsigned char, bool)>
c0023e8c:	83 c4 0c             	add    esp,0xc
c0023e8f:	6a 00                	push   0x0
c0023e91:	6a 01                	push   0x1
c0023e93:	53                   	push   ebx
c0023e94:	e8 8b fc ff ff       	call   c0023b24 <IDE::enableIRQs(unsigned char, bool)>
c0023e99:	83 c4 10             	add    esp,0x10
c0023e9c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023ea3:	74 40                	je     c0023ee5 <IDE::open(int, int, void*)+0x37b>
c0023ea5:	83 ec 0c             	sub    esp,0xc
c0023ea8:	68 63 d6 02 c0       	push   0xc002d663
c0023ead:	e8 91 ef fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0023eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023eb5:	6a 01                	push   0x1
c0023eb7:	68 ec 3a 02 c0       	push   0xc0023aec
c0023ebc:	6a 0e                	push   0xe
c0023ebe:	53                   	push   ebx
c0023ebf:	e8 24 03 ff ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ec4:	83 c4 14             	add    esp,0x14
c0023ec7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023ecd:	53                   	push   ebx
c0023ece:	6a 01                	push   0x1
c0023ed0:	68 08 3b 02 c0       	push   0xc0023b08
c0023ed5:	6a 0f                	push   0xf
c0023ed7:	53                   	push   ebx
c0023ed8:	e8 0b 03 ff ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023edd:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023ee3:	eb 4a                	jmp    c0023f2f <IDE::open(int, int, void*)+0x3c5>
c0023ee5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023eef:	50                   	push   eax
c0023ef0:	6a 0f                	push   0xf
c0023ef2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023ef8:	68 7f d6 02 c0       	push   0xc002d67f
c0023efd:	e8 41 ef fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0023f02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f05:	6a 00                	push   0x0
c0023f07:	68 ec 3a 02 c0       	push   0xc0023aec
c0023f0c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023f12:	53                   	push   ebx
c0023f13:	e8 d0 02 ff ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f18:	83 c4 14             	add    esp,0x14
c0023f1b:	53                   	push   ebx
c0023f1c:	6a 00                	push   0x0
c0023f1e:	68 08 3b 02 c0       	push   0xc0023b08
c0023f23:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023f29:	53                   	push   ebx
c0023f2a:	e8 b9 02 ff ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f31:	83 c4 20             	add    esp,0x20
c0023f34:	83 ec 0c             	sub    esp,0xc
c0023f37:	53                   	push   ebx
c0023f38:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023f3b:	83 c4 0c             	add    esp,0xc
c0023f3e:	6a 07                	push   0x7
c0023f40:	6a 00                	push   0x0
c0023f42:	53                   	push   ebx
c0023f43:	e8 90 fa ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0023f48:	83 c4 0c             	add    esp,0xc
c0023f4b:	6a 07                	push   0x7
c0023f4d:	6a 01                	push   0x1
c0023f4f:	53                   	push   ebx
c0023f50:	e8 83 fa ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0023f55:	83 c4 0c             	add    esp,0xc
c0023f58:	6a 01                	push   0x1
c0023f5a:	6a 00                	push   0x0
c0023f5c:	53                   	push   ebx
c0023f5d:	e8 c2 fb ff ff       	call   c0023b24 <IDE::enableIRQs(unsigned char, bool)>
c0023f62:	83 c4 0c             	add    esp,0xc
c0023f65:	6a 01                	push   0x1
c0023f67:	6a 01                	push   0x1
c0023f69:	53                   	push   ebx
c0023f6a:	e8 b5 fb ff ff       	call   c0023b24 <IDE::enableIRQs(unsigned char, bool)>
c0023f6f:	83 c4 2c             	add    esp,0x2c
c0023f72:	31 c0                	xor    eax,eax
c0023f74:	5b                   	pop    ebx
c0023f75:	5e                   	pop    esi
c0023f76:	5f                   	pop    edi
c0023f77:	5d                   	pop    ebp
c0023f78:	c3                   	ret    
c0023f79:	90                   	nop

c0023f7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023f7a:	55                   	push   ebp
c0023f7b:	57                   	push   edi
c0023f7c:	56                   	push   esi
c0023f7d:	53                   	push   ebx
c0023f7e:	83 ec 1c             	sub    esp,0x1c
c0023f81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023f85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f89:	8d 50 f8             	lea    edx,[eax-0x8]
c0023f8c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f90:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023f94:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023f98:	80 fa 03             	cmp    dl,0x3
c0023f9b:	77 5d                	ja     c0023ffa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023f9d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023fa5:	0f b6 db             	movzx  ebx,bl
c0023fa8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023fab:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023faf:	83 ca 80             	or     edx,0xffffff80
c0023fb2:	0f b6 d2             	movzx  edx,dl
c0023fb5:	52                   	push   edx
c0023fb6:	6a 0c                	push   0xc
c0023fb8:	53                   	push   ebx
c0023fb9:	56                   	push   esi
c0023fba:	e8 59 f9 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fbf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023fc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023fcc:	0f b6 c0             	movzx  eax,al
c0023fcf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023fd3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023fd5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023fda:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023fde:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023fe2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023fe6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023fee:	83 c4 2c             	add    esp,0x2c
c0023ff1:	5b                   	pop    ebx
c0023ff2:	5e                   	pop    esi
c0023ff3:	5f                   	pop    edi
c0023ff4:	5d                   	pop    ebp
c0023ff5:	e9 1e f9 ff ff       	jmp    c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ffa:	3c 07                	cmp    al,0x7
c0023ffc:	77 10                	ja     c002400e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023ffe:	0f b6 db             	movzx  ebx,bl
c0024001:	0f b6 d0             	movzx  edx,al
c0024004:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002400c:	eb 2d                	jmp    c002403b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002400e:	3c 0d                	cmp    al,0xd
c0024010:	77 13                	ja     c0024025 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0024012:	0f b6 db             	movzx  ebx,bl
c0024015:	0f b6 c0             	movzx  eax,al
c0024018:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002401f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0024023:	eb 16                	jmp    c002403b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024025:	3c 15                	cmp    al,0x15
c0024027:	77 14                	ja     c002403d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0024029:	0f b6 db             	movzx  ebx,bl
c002402c:	0f b6 c0             	movzx  eax,al
c002402f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0024037:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002403b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002403d:	83 c4 1c             	add    esp,0x1c
c0024040:	5b                   	pop    ebx
c0024041:	5e                   	pop    esi
c0024042:	5f                   	pop    edi
c0024043:	5d                   	pop    ebp
c0024044:	c3                   	ret    
c0024045:	90                   	nop

c0024046 <IDE::detect()>:
c0024046:	55                   	push   ebp
c0024047:	57                   	push   edi
c0024048:	56                   	push   esi
c0024049:	53                   	push   ebx
c002404a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0024050:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0024057:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002405e:	0f 85 be 02 00 00    	jne    c0024322 <IDE::detect()+0x2dc>
c0024064:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002406b:	31 f6                	xor    esi,esi
c002406d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024075:	31 ed                	xor    ebp,ebp
c0024077:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002407b:	c1 e0 06             	shl    eax,0x6
c002407e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0024086:	89 e8                	mov    eax,ebp
c0024088:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002408c:	c1 e0 04             	shl    eax,0x4
c002408f:	83 c8 a0             	or     eax,0xffffffa0
c0024092:	0f b6 c0             	movzx  eax,al
c0024095:	50                   	push   eax
c0024096:	6a 06                	push   0x6
c0024098:	56                   	push   esi
c0024099:	53                   	push   ebx
c002409a:	e8 79 f8 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002409f:	83 c4 0c             	add    esp,0xc
c00240a2:	6a 0c                	push   0xc
c00240a4:	56                   	push   esi
c00240a5:	53                   	push   ebx
c00240a6:	e8 2d f9 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00240ab:	83 c4 0c             	add    esp,0xc
c00240ae:	6a 0c                	push   0xc
c00240b0:	56                   	push   esi
c00240b1:	53                   	push   ebx
c00240b2:	e8 21 f9 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00240b7:	83 c4 0c             	add    esp,0xc
c00240ba:	6a 0c                	push   0xc
c00240bc:	56                   	push   esi
c00240bd:	53                   	push   ebx
c00240be:	e8 15 f9 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00240c3:	83 c4 0c             	add    esp,0xc
c00240c6:	6a 0c                	push   0xc
c00240c8:	56                   	push   esi
c00240c9:	53                   	push   ebx
c00240ca:	e8 09 f9 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00240cf:	68 ec 00 00 00       	push   0xec
c00240d4:	6a 07                	push   0x7
c00240d6:	56                   	push   esi
c00240d7:	53                   	push   ebx
c00240d8:	e8 3b f8 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240dd:	83 c4 1c             	add    esp,0x1c
c00240e0:	6a 0c                	push   0xc
c00240e2:	56                   	push   esi
c00240e3:	53                   	push   ebx
c00240e4:	e8 ef f8 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00240e9:	83 c4 0c             	add    esp,0xc
c00240ec:	6a 0c                	push   0xc
c00240ee:	56                   	push   esi
c00240ef:	53                   	push   ebx
c00240f0:	e8 e3 f8 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00240f5:	83 c4 0c             	add    esp,0xc
c00240f8:	6a 0c                	push   0xc
c00240fa:	56                   	push   esi
c00240fb:	53                   	push   ebx
c00240fc:	e8 d7 f8 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0024101:	83 c4 0c             	add    esp,0xc
c0024104:	6a 0c                	push   0xc
c0024106:	56                   	push   esi
c0024107:	53                   	push   ebx
c0024108:	e8 cb f8 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c002410d:	83 c4 0c             	add    esp,0xc
c0024110:	6a 0c                	push   0xc
c0024112:	56                   	push   esi
c0024113:	53                   	push   ebx
c0024114:	e8 bf f8 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0024119:	83 c4 10             	add    esp,0x10
c002411c:	84 c0                	test   al,al
c002411e:	0f 84 8b 01 00 00    	je     c00242af <IDE::detect()+0x269>
c0024124:	31 ff                	xor    edi,edi
c0024126:	50                   	push   eax
c0024127:	6a 0c                	push   0xc
c0024129:	56                   	push   esi
c002412a:	53                   	push   ebx
c002412b:	e8 a8 f8 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0024130:	83 c4 10             	add    esp,0x10
c0024133:	a8 01                	test   al,0x1
c0024135:	0f 85 8e 01 00 00    	jne    c00242c9 <IDE::detect()+0x283>
c002413b:	84 c0                	test   al,al
c002413d:	78 04                	js     c0024143 <IDE::detect()+0xfd>
c002413f:	a8 08                	test   al,0x8
c0024141:	75 27                	jne    c002416a <IDE::detect()+0x124>
c0024143:	47                   	inc    edi
c0024144:	81 ff 17 01 00 00    	cmp    edi,0x117
c002414a:	7e da                	jle    c0024126 <IDE::detect()+0xe0>
c002414c:	50                   	push   eax
c002414d:	50                   	push   eax
c002414e:	6a 00                	push   0x0
c0024150:	68 40 4b 4c 00       	push   0x4c4b40
c0024155:	e8 45 a7 ff ff       	call   c001e89f <nanoSleep(unsigned long long)>
c002415a:	83 c4 10             	add    esp,0x10
c002415d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024163:	75 c1                	jne    c0024126 <IDE::detect()+0xe0>
c0024165:	e9 5f 01 00 00       	jmp    c00242c9 <IDE::detect()+0x283>
c002416a:	31 c9                	xor    ecx,ecx
c002416c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024170:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024174:	83 ec 0c             	sub    esp,0xc
c0024177:	68 80 00 00 00       	push   0x80
c002417c:	57                   	push   edi
c002417d:	6a 00                	push   0x0
c002417f:	56                   	push   esi
c0024180:	53                   	push   ebx
c0024181:	e8 f4 fd ff ff       	call   c0023f7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024186:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002418b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002418f:	89 d1                	mov    ecx,edx
c0024191:	c1 e0 06             	shl    eax,0x6
c0024194:	01 d8                	add    eax,ebx
c0024196:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002419d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00241a4:	89 f2                	mov    edx,esi
c00241a6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00241ac:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00241b0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00241b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00241ba:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00241c1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00241c9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00241d0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00241d8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00241de:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00241e5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00241eb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00241ef:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00241f3:	83 c4 20             	add    esp,0x20
c00241f6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00241f9:	83 c0 02             	add    eax,0x2
c00241fc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024202:	83 c7 02             	add    edi,0x2
c0024205:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024208:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002420e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024212:	75 e2                	jne    c00241f6 <IDE::detect()+0x1b0>
c0024214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024218:	c1 e0 06             	shl    eax,0x6
c002421b:	01 d8                	add    eax,ebx
c002421d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024223:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002422a:	66 c1 ea 09          	shr    dx,0x9
c002422e:	83 e2 01             	and    edx,0x1
c0024231:	84 c9                	test   cl,cl
c0024233:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024239:	75 2f                	jne    c002426a <IDE::detect()+0x224>
c002423b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024241:	85 c0                	test   eax,eax
c0024243:	74 66                	je     c00242ab <IDE::detect()+0x265>
c0024245:	50                   	push   eax
c0024246:	55                   	push   ebp
c0024247:	56                   	push   esi
c0024248:	68 9b d6 02 c0       	push   0xc002d69b
c002424d:	e8 f1 eb fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024252:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024259:	e8 4a b6 fe ff       	call   c000f8a8 <malloc>
c002425e:	89 c7                	mov    edi,eax
c0024260:	89 04 24             	mov    DWORD PTR [esp],eax
c0024263:	e8 78 06 00 00       	call   c00248e0 <ATA::ATA()>
c0024268:	eb 28                	jmp    c0024292 <IDE::detect()+0x24c>
c002426a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024270:	55                   	push   ebp
c0024271:	56                   	push   esi
c0024272:	68 ca d6 02 c0       	push   0xc002d6ca
c0024277:	e8 c7 eb fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002427c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024283:	e8 20 b6 fe ff       	call   c000f8a8 <malloc>
c0024288:	89 c7                	mov    edi,eax
c002428a:	89 04 24             	mov    DWORD PTR [esp],eax
c002428d:	e8 8e 0c 00 00       	call   c0024f20 <ATAPI::ATAPI()>
c0024292:	5a                   	pop    edx
c0024293:	59                   	pop    ecx
c0024294:	57                   	push   edi
c0024295:	53                   	push   ebx
c0024296:	e8 c9 ff fe ff       	call   c0014264 <Device::addChild(Device*)>
c002429b:	8b 07                	mov    eax,DWORD PTR [edi]
c002429d:	53                   	push   ebx
c002429e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00242a2:	6a 00                	push   0x0
c00242a4:	57                   	push   edi
c00242a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00242a8:	83 c4 20             	add    esp,0x20
c00242ab:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00242af:	4d                   	dec    ebp
c00242b0:	74 0a                	je     c00242bc <IDE::detect()+0x276>
c00242b2:	bd 01 00 00 00       	mov    ebp,0x1
c00242b7:	e9 bb fd ff ff       	jmp    c0024077 <IDE::detect()+0x31>
c00242bc:	4e                   	dec    esi
c00242bd:	74 63                	je     c0024322 <IDE::detect()+0x2dc>
c00242bf:	be 01 00 00 00       	mov    esi,0x1
c00242c4:	e9 ac fd ff ff       	jmp    c0024075 <IDE::detect()+0x2f>
c00242c9:	50                   	push   eax
c00242ca:	6a 04                	push   0x4
c00242cc:	56                   	push   esi
c00242cd:	53                   	push   ebx
c00242ce:	e8 05 f7 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00242d3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00242d7:	83 c4 0c             	add    esp,0xc
c00242da:	6a 05                	push   0x5
c00242dc:	56                   	push   esi
c00242dd:	53                   	push   ebx
c00242de:	e8 f5 f6 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00242e3:	83 c4 10             	add    esp,0x10
c00242e6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00242ea:	80 fa 14             	cmp    dl,0x14
c00242ed:	75 04                	jne    c00242f3 <IDE::detect()+0x2ad>
c00242ef:	3c eb                	cmp    al,0xeb
c00242f1:	eb 07                	jmp    c00242fa <IDE::detect()+0x2b4>
c00242f3:	3c 96                	cmp    al,0x96
c00242f5:	75 b8                	jne    c00242af <IDE::detect()+0x269>
c00242f7:	80 fa 69             	cmp    dl,0x69
c00242fa:	75 b3                	jne    c00242af <IDE::detect()+0x269>
c00242fc:	68 a1 00 00 00       	push   0xa1
c0024301:	6a 07                	push   0x7
c0024303:	56                   	push   esi
c0024304:	53                   	push   ebx
c0024305:	e8 0e f6 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430a:	5f                   	pop    edi
c002430b:	58                   	pop    eax
c002430c:	6a 00                	push   0x0
c002430e:	68 40 42 0f 00       	push   0xf4240
c0024313:	e8 87 a5 ff ff       	call   c001e89f <nanoSleep(unsigned long long)>
c0024318:	83 c4 10             	add    esp,0x10
c002431b:	b1 01                	mov    cl,0x1
c002431d:	e9 4a fe ff ff       	jmp    c002416c <IDE::detect()+0x126>
c0024322:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024328:	5b                   	pop    ebx
c0024329:	5e                   	pop    esi
c002432a:	5f                   	pop    edi
c002432b:	5d                   	pop    ebp
c002432c:	c3                   	ret    
c002432d:	90                   	nop

c002432e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002432e:	55                   	push   ebp
c002432f:	57                   	push   edi
c0024330:	56                   	push   esi
c0024331:	53                   	push   ebx
c0024332:	83 ec 1c             	sub    esp,0x1c
c0024335:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024339:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002433d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024341:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024345:	88 c3                	mov    bl,al
c0024347:	84 c0                	test   al,al
c0024349:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002434d:	0f 84 67 01 00 00    	je     c00244ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024353:	83 ec 0c             	sub    esp,0xc
c0024356:	68 fb d6 02 c0       	push   0xc002d6fb
c002435b:	e8 e3 ea fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024360:	83 c4 10             	add    esp,0x10
c0024363:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024367:	3c 01                	cmp    al,0x1
c0024369:	75 17                	jne    c0024382 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002436b:	83 ec 0c             	sub    esp,0xc
c002436e:	b3 13                	mov    bl,0x13
c0024370:	68 07 d7 02 c0       	push   0xc002d707
c0024375:	e8 c9 ea fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002437a:	83 c4 10             	add    esp,0x10
c002437d:	e9 25 01 00 00       	jmp    c00244a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024382:	3c 02                	cmp    al,0x2
c0024384:	0f 85 ef 00 00 00    	jne    c0024479 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002438a:	d1 e6                	shl    esi,1
c002438c:	09 ee                	or     esi,ebp
c002438e:	52                   	push   edx
c002438f:	89 f0                	mov    eax,esi
c0024391:	6a 01                	push   0x1
c0024393:	0f b6 f0             	movzx  esi,al
c0024396:	c1 e6 06             	shl    esi,0x6
c0024399:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00243a1:	50                   	push   eax
c00243a2:	57                   	push   edi
c00243a3:	e8 30 f6 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00243a8:	83 c4 10             	add    esp,0x10
c00243ab:	89 c6                	mov    esi,eax
c00243ad:	a8 01                	test   al,0x1
c00243af:	74 12                	je     c00243c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00243b1:	83 ec 0c             	sub    esp,0xc
c00243b4:	b3 07                	mov    bl,0x7
c00243b6:	68 1c d7 02 c0       	push   0xc002d71c
c00243bb:	e8 83 ea fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00243c0:	83 c4 10             	add    esp,0x10
c00243c3:	f7 c6 02 00 00 00    	test   esi,0x2
c00243c9:	74 12                	je     c00243dd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00243cb:	83 ec 0c             	sub    esp,0xc
c00243ce:	b3 03                	mov    bl,0x3
c00243d0:	68 3a d7 02 c0       	push   0xc002d73a
c00243d5:	e8 69 ea fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00243da:	83 c4 10             	add    esp,0x10
c00243dd:	f7 c6 04 00 00 00    	test   esi,0x4
c00243e3:	74 12                	je     c00243f7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00243e5:	83 ec 0c             	sub    esp,0xc
c00243e8:	b3 14                	mov    bl,0x14
c00243ea:	68 5a d7 02 c0       	push   0xc002d75a
c00243ef:	e8 4f ea fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00243f4:	83 c4 10             	add    esp,0x10
c00243f7:	f7 c6 08 00 00 00    	test   esi,0x8
c00243fd:	74 12                	je     c0024411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00243ff:	83 ec 0c             	sub    esp,0xc
c0024402:	b3 03                	mov    bl,0x3
c0024404:	68 3a d7 02 c0       	push   0xc002d73a
c0024409:	e8 35 ea fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002440e:	83 c4 10             	add    esp,0x10
c0024411:	f7 c6 10 00 00 00    	test   esi,0x10
c0024417:	74 12                	je     c002442b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024419:	83 ec 0c             	sub    esp,0xc
c002441c:	b3 15                	mov    bl,0x15
c002441e:	68 72 d7 02 c0       	push   0xc002d772
c0024423:	e8 1b ea fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024428:	83 c4 10             	add    esp,0x10
c002442b:	f7 c6 20 00 00 00    	test   esi,0x20
c0024431:	74 12                	je     c0024445 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024433:	83 ec 0c             	sub    esp,0xc
c0024436:	b3 03                	mov    bl,0x3
c0024438:	68 3a d7 02 c0       	push   0xc002d73a
c002443d:	e8 01 ea fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024442:	83 c4 10             	add    esp,0x10
c0024445:	f7 c6 40 00 00 00    	test   esi,0x40
c002444b:	74 12                	je     c002445f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002444d:	83 ec 0c             	sub    esp,0xc
c0024450:	b3 16                	mov    bl,0x16
c0024452:	68 8c d7 02 c0       	push   0xc002d78c
c0024457:	e8 e7 e9 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002445c:	83 c4 10             	add    esp,0x10
c002445f:	89 f0                	mov    eax,esi
c0024461:	84 c0                	test   al,al
c0024463:	79 42                	jns    c00244a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024465:	83 ec 0c             	sub    esp,0xc
c0024468:	b3 0d                	mov    bl,0xd
c002446a:	68 ad d7 02 c0       	push   0xc002d7ad
c002446f:	e8 cf e9 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024474:	83 c4 10             	add    esp,0x10
c0024477:	eb 2e                	jmp    c00244a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024479:	3c 03                	cmp    al,0x3
c002447b:	75 14                	jne    c0024491 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002447d:	83 ec 0c             	sub    esp,0xc
c0024480:	b3 17                	mov    bl,0x17
c0024482:	68 c1 d7 02 c0       	push   0xc002d7c1
c0024487:	e8 b7 e9 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002448c:	83 c4 10             	add    esp,0x10
c002448f:	eb 16                	jmp    c00244a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024491:	3c 04                	cmp    al,0x4
c0024493:	75 12                	jne    c00244a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024495:	83 ec 0c             	sub    esp,0xc
c0024498:	b3 08                	mov    bl,0x8
c002449a:	68 d7 d7 02 c0       	push   0xc002d7d7
c002449f:	e8 9f e9 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00244a4:	83 c4 10             	add    esp,0x10
c00244a7:	50                   	push   eax
c00244a8:	50                   	push   eax
c00244a9:	0f b6 c3             	movzx  eax,bl
c00244ac:	50                   	push   eax
c00244ad:	68 ef d7 02 c0       	push   0xc002d7ef
c00244b2:	e8 8c e9 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00244b7:	83 c4 10             	add    esp,0x10
c00244ba:	83 c4 1c             	add    esp,0x1c
c00244bd:	88 d8                	mov    al,bl
c00244bf:	5b                   	pop    ebx
c00244c0:	5e                   	pop    esi
c00244c1:	5f                   	pop    edi
c00244c2:	5d                   	pop    ebp
c00244c3:	c3                   	ret    

c00244c4 <IDE::polling(unsigned char, unsigned int)>:
c00244c4:	57                   	push   edi
c00244c5:	56                   	push   esi
c00244c6:	53                   	push   ebx
c00244c7:	bb 04 00 00 00       	mov    ebx,0x4
c00244cc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00244d0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00244d5:	52                   	push   edx
c00244d6:	6a 0c                	push   0xc
c00244d8:	56                   	push   esi
c00244d9:	57                   	push   edi
c00244da:	e8 f9 f4 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00244df:	83 c4 10             	add    esp,0x10
c00244e2:	4b                   	dec    ebx
c00244e3:	75 f0                	jne    c00244d5 <IDE::polling(unsigned char, unsigned int)+0x11>
c00244e5:	bb a0 86 01 00       	mov    ebx,0x186a0
c00244ea:	50                   	push   eax
c00244eb:	6a 0c                	push   0xc
c00244ed:	56                   	push   esi
c00244ee:	57                   	push   edi
c00244ef:	e8 e4 f4 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c00244f4:	83 c4 10             	add    esp,0x10
c00244f7:	a8 01                	test   al,0x1
c00244f9:	74 12                	je     c002450d <IDE::polling(unsigned char, unsigned int)+0x49>
c00244fb:	83 ec 0c             	sub    esp,0xc
c00244fe:	68 09 d8 02 c0       	push   0xc002d809
c0024503:	e8 3b e9 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024508:	83 c4 10             	add    esp,0x10
c002450b:	eb 17                	jmp    c0024524 <IDE::polling(unsigned char, unsigned int)+0x60>
c002450d:	a8 20                	test   al,0x20
c002450f:	75 0f                	jne    c0024520 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024511:	4b                   	dec    ebx
c0024512:	74 10                	je     c0024524 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024514:	84 c0                	test   al,al
c0024516:	78 d2                	js     c00244ea <IDE::polling(unsigned char, unsigned int)+0x26>
c0024518:	a8 08                	test   al,0x8
c002451a:	74 ce                	je     c00244ea <IDE::polling(unsigned char, unsigned int)+0x26>
c002451c:	31 c0                	xor    eax,eax
c002451e:	eb 06                	jmp    c0024526 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024520:	b0 01                	mov    al,0x1
c0024522:	eb 02                	jmp    c0024526 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024524:	b0 02                	mov    al,0x2
c0024526:	5b                   	pop    ebx
c0024527:	5e                   	pop    esi
c0024528:	5f                   	pop    edi
c0024529:	c3                   	ret    

c002452a <SATABus::close(int, int, void*)>:
c002452a:	31 c0                	xor    eax,eax
c002452c:	c3                   	ret    
c002452d:	90                   	nop

c002452e <SATABus::detect()>:
c002452e:	c3                   	ret    
c002452f:	90                   	nop

c0024530 <SATABus::SATABus()>:
c0024530:	83 ec 0c             	sub    esp,0xc
c0024533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024537:	83 ec 08             	sub    esp,0x8
c002453a:	68 4c d8 02 c0       	push   0xc002d84c
c002453f:	50                   	push   eax
c0024540:	e8 b9 00 ff ff       	call   c00145fe <HardDiskController::HardDiskController(char const*)>
c0024545:	83 c4 10             	add    esp,0x10
c0024548:	ba 08 d9 02 c0       	mov    edx,0xc002d908
c002454d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024551:	89 10                	mov    DWORD PTR [eax],edx
c0024553:	83 ec 0c             	sub    esp,0xc
c0024556:	6a 50                	push   0x50
c0024558:	e8 9c ba fe ff       	call   c000fff9 <Phys::allocateContiguousPages(int)>
c002455d:	83 c4 10             	add    esp,0x10
c0024560:	89 c2                	mov    edx,eax
c0024562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024566:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002456c:	83 ec 0c             	sub    esp,0xc
c002456f:	6a 50                	push   0x50
c0024571:	e8 c7 d4 fe ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0024576:	83 c4 10             	add    esp,0x10
c0024579:	89 c2                	mov    edx,eax
c002457b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002457f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024585:	a1 f0 f0 02 c0       	mov    eax,ds:0xc002f0f0
c002458a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002458e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024594:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024598:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002459e:	83 ec 0c             	sub    esp,0xc
c00245a1:	6a 03                	push   0x3
c00245a3:	6a 50                	push   0x50
c00245a5:	51                   	push   ecx
c00245a6:	52                   	push   edx
c00245a7:	50                   	push   eax
c00245a8:	e8 bd df fe ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00245ad:	83 c4 20             	add    esp,0x20
c00245b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245b4:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00245ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00245c4:	83 ec 04             	sub    esp,0x4
c00245c7:	52                   	push   edx
c00245c8:	50                   	push   eax
c00245c9:	68 70 d8 02 c0       	push   0xc002d870
c00245ce:	e8 70 e8 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00245d3:	83 c4 10             	add    esp,0x10
c00245d6:	90                   	nop
c00245d7:	83 c4 0c             	add    esp,0xc
c00245da:	c3                   	ret    
c00245db:	90                   	nop

c00245dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00245dc:	83 ec 0c             	sub    esp,0xc
c00245df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00245e3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00245e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00245e9:	09 c2                	or     edx,eax
c00245eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00245f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00245f7:	31 c0                	xor    eax,eax
c00245f9:	c1 e9 08             	shr    ecx,0x8
c00245fc:	83 e1 0f             	and    ecx,0xf
c00245ff:	39 c8                	cmp    eax,ecx
c0024601:	74 0a                	je     c002460d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024603:	f6 c2 01             	test   dl,0x1
c0024606:	74 18                	je     c0024620 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024608:	d1 ea                	shr    edx,1
c002460a:	40                   	inc    eax
c002460b:	eb f2                	jmp    c00245ff <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002460d:	83 ec 0c             	sub    esp,0xc
c0024610:	68 94 d8 02 c0       	push   0xc002d894
c0024615:	e8 f3 61 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c002461a:	83 c4 10             	add    esp,0x10
c002461d:	83 c8 ff             	or     eax,0xffffffff
c0024620:	83 c4 0c             	add    esp,0xc
c0024623:	c3                   	ret    

c0024624 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024624:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024628:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002462b:	89 c2                	mov    edx,eax
c002462d:	c1 ea 08             	shr    edx,0x8
c0024630:	83 e2 0f             	and    edx,0xf
c0024633:	fe ca                	dec    dl
c0024635:	75 31                	jne    c0024668 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024637:	83 e0 0f             	and    eax,0xf
c002463a:	3c 03                	cmp    al,0x3
c002463c:	75 2a                	jne    c0024668 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002463e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024641:	b8 02 00 00 00       	mov    eax,0x2
c0024646:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002464c:	74 1c                	je     c002466a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002464e:	b8 04 00 00 00       	mov    eax,0x4
c0024653:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024659:	74 0f                	je     c002466a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002465b:	31 c0                	xor    eax,eax
c002465d:	83 fa 03             	cmp    edx,0x3
c0024660:	0f 94 c0             	sete   al
c0024663:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024667:	c3                   	ret    
c0024668:	31 c0                	xor    eax,eax
c002466a:	c3                   	ret    
c002466b:	90                   	nop

c002466c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002466c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024670:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024673:	0f ba e2 0f          	bt     edx,0xf
c0024677:	72 f7                	jb     c0024670 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024679:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002467c:	83 ca 10             	or     edx,0x10
c002467f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024682:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024685:	83 ca 01             	or     edx,0x1
c0024688:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002468b:	c3                   	ret    

c002468c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002468c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024690:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024693:	83 e2 fe             	and    edx,0xfffffffe
c0024696:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024699:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002469c:	83 e2 ef             	and    edx,0xffffffef
c002469f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246a5:	0f ba e2 0e          	bt     edx,0xe
c00246a9:	72 f7                	jb     c00246a2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00246ab:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246ae:	0f ba e2 0f          	bt     edx,0xf
c00246b2:	72 ee                	jb     c00246a2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00246b4:	c3                   	ret    
c00246b5:	90                   	nop

c00246b6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00246b6:	55                   	push   ebp
c00246b7:	57                   	push   edi
c00246b8:	56                   	push   esi
c00246b9:	53                   	push   ebx
c00246ba:	83 ec 1c             	sub    esp,0x1c
c00246bd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00246c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00246c5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00246c9:	53                   	push   ebx
c00246ca:	89 fd                	mov    ebp,edi
c00246cc:	56                   	push   esi
c00246cd:	c1 e5 0a             	shl    ebp,0xa
c00246d0:	e8 b7 ff ff ff       	call   c002468c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00246d5:	83 ec 0c             	sub    esp,0xc
c00246d8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00246de:	01 e8                	add    eax,ebp
c00246e0:	89 03                	mov    DWORD PTR [ebx],eax
c00246e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00246e4:	68 00 04 00 00       	push   0x400
c00246e9:	6a 00                	push   0x0
c00246eb:	50                   	push   eax
c00246ec:	e8 7b c0 fd ff       	call   c000076c <memset>
c00246f1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00246f7:	89 fa                	mov    edx,edi
c00246f9:	01 e8                	add    eax,ebp
c00246fb:	c1 e7 0d             	shl    edi,0xd
c00246fe:	89 03                	mov    DWORD PTR [ebx],eax
c0024700:	c1 e2 08             	shl    edx,0x8
c0024703:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002470a:	81 c2 00 80 00 00    	add    edx,0x8000
c0024710:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024714:	89 d0                	mov    eax,edx
c0024716:	83 c4 1c             	add    esp,0x1c
c0024719:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002471f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024722:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024725:	68 00 01 00 00       	push   0x100
c002472a:	6a 00                	push   0x0
c002472c:	50                   	push   eax
c002472d:	e8 3a c0 fd ff       	call   c000076c <memset>
c0024732:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024736:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002473c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024742:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024746:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024749:	83 c4 10             	add    esp,0x10
c002474c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024753:	31 ff                	xor    edi,edi
c0024755:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002475b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024765:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002476b:	83 c5 20             	add    ebp,0x20
c002476e:	01 f8                	add    eax,edi
c0024770:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024773:	52                   	push   edx
c0024774:	68 00 01 00 00       	push   0x100
c0024779:	6a 00                	push   0x0
c002477b:	50                   	push   eax
c002477c:	e8 eb bf fd ff       	call   c000076c <memset>
c0024781:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024785:	83 c4 10             	add    esp,0x10
c0024788:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002478e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024795:	01 f8                	add    eax,edi
c0024797:	81 c7 00 01 00 00    	add    edi,0x100
c002479d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00247a0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00247a6:	75 b3                	jne    c002475b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00247a8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00247ac:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00247b0:	83 c4 1c             	add    esp,0x1c
c00247b3:	5b                   	pop    ebx
c00247b4:	5e                   	pop    esi
c00247b5:	5f                   	pop    edi
c00247b6:	5d                   	pop    ebp
c00247b7:	e9 b0 fe ff ff       	jmp    c002466c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00247bc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00247bc:	55                   	push   ebp
c00247bd:	57                   	push   edi
c00247be:	56                   	push   esi
c00247bf:	53                   	push   ebx
c00247c0:	31 db                	xor    ebx,ebx
c00247c2:	83 ec 0c             	sub    esp,0xc
c00247c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00247c9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00247cd:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00247d0:	f7 c7 01 00 00 00    	test   edi,0x1
c00247d6:	0f 84 aa 00 00 00    	je     c0024886 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00247dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00247e0:	89 d8                	mov    eax,ebx
c00247e2:	c1 e0 07             	shl    eax,0x7
c00247e5:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00247ec:	55                   	push   ebp
c00247ed:	56                   	push   esi
c00247ee:	e8 31 fe ff ff       	call   c0024624 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00247f3:	5a                   	pop    edx
c00247f4:	83 f8 01             	cmp    eax,0x1
c00247f7:	59                   	pop    ecx
c00247f8:	75 30                	jne    c002482a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00247fa:	50                   	push   eax
c00247fb:	50                   	push   eax
c00247fc:	53                   	push   ebx
c00247fd:	68 b9 d8 02 c0       	push   0xc002d8b9
c0024802:	e8 3c e6 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024807:	83 c4 0c             	add    esp,0xc
c002480a:	53                   	push   ebx
c002480b:	55                   	push   ebp
c002480c:	56                   	push   esi
c002480d:	e8 a4 fe ff ff       	call   c00246b6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024812:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024819:	e8 8a b0 fe ff       	call   c000f8a8 <malloc>
c002481e:	89 c5                	mov    ebp,eax
c0024820:	89 04 24             	mov    DWORD PTR [esp],eax
c0024823:	e8 5c 0d 00 00       	call   c0025584 <SATA::SATA()>
c0024828:	eb 33                	jmp    c002485d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c002482a:	83 f8 04             	cmp    eax,0x4
c002482d:	75 47                	jne    c0024876 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002482f:	50                   	push   eax
c0024830:	50                   	push   eax
c0024831:	53                   	push   ebx
c0024832:	68 d0 d8 02 c0       	push   0xc002d8d0
c0024837:	e8 07 e6 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002483c:	83 c4 0c             	add    esp,0xc
c002483f:	53                   	push   ebx
c0024840:	55                   	push   ebp
c0024841:	56                   	push   esi
c0024842:	e8 6f fe ff ff       	call   c00246b6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024847:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002484e:	e8 55 b0 fe ff       	call   c000f8a8 <malloc>
c0024853:	89 c5                	mov    ebp,eax
c0024855:	89 04 24             	mov    DWORD PTR [esp],eax
c0024858:	e8 d3 10 00 00       	call   c0025930 <SATAPI::SATAPI()>
c002485d:	5a                   	pop    edx
c002485e:	59                   	pop    ecx
c002485f:	55                   	push   ebp
c0024860:	56                   	push   esi
c0024861:	e8 fe f9 fe ff       	call   c0014264 <Device::addChild(Device*)>
c0024866:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024869:	56                   	push   esi
c002486a:	6a 00                	push   0x0
c002486c:	53                   	push   ebx
c002486d:	55                   	push   ebp
c002486e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024871:	83 c4 20             	add    esp,0x20
c0024874:	eb 10                	jmp    c0024886 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024876:	50                   	push   eax
c0024877:	50                   	push   eax
c0024878:	53                   	push   ebx
c0024879:	68 e9 d8 02 c0       	push   0xc002d8e9
c002487e:	e8 c0 e5 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024883:	83 c4 10             	add    esp,0x10
c0024886:	d1 ef                	shr    edi,1
c0024888:	43                   	inc    ebx
c0024889:	83 fb 20             	cmp    ebx,0x20
c002488c:	0f 85 3e ff ff ff    	jne    c00247d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024892:	83 c4 0c             	add    esp,0xc
c0024895:	5b                   	pop    ebx
c0024896:	5e                   	pop    esi
c0024897:	5f                   	pop    edi
c0024898:	5d                   	pop    ebp
c0024899:	c3                   	ret    

c002489a <SATABus::open(int, int, void*)>:
c002489a:	83 ec 14             	sub    esp,0x14
c002489d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248a1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00248a7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00248ad:	52                   	push   edx
c00248ae:	50                   	push   eax
c00248af:	e8 08 ff ff ff       	call   c00247bc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00248b4:	31 c0                	xor    eax,eax
c00248b6:	83 c4 1c             	add    esp,0x1c
c00248b9:	c3                   	ret    

c00248ba <ATA::close(int, int, void*)>:
c00248ba:	83 ec 0c             	sub    esp,0xc
c00248bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248c7:	85 c0                	test   eax,eax
c00248c9:	74 0c                	je     c00248d7 <ATA::close(int, int, void*)+0x1d>
c00248cb:	83 ec 0c             	sub    esp,0xc
c00248ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00248d0:	50                   	push   eax
c00248d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00248d4:	83 c4 10             	add    esp,0x10
c00248d7:	31 c0                	xor    eax,eax
c00248d9:	83 c4 0c             	add    esp,0xc
c00248dc:	c3                   	ret    
c00248dd:	90                   	nop

c00248de <ATA::powerSaving(PowerSavingLevel)>:
c00248de:	c3                   	ret    
c00248df:	90                   	nop

c00248e0 <ATA::ATA()>:
c00248e0:	83 ec 0c             	sub    esp,0xc
c00248e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e7:	83 ec 04             	sub    esp,0x4
c00248ea:	68 00 02 00 00       	push   0x200
c00248ef:	68 d1 d9 02 c0       	push   0xc002d9d1
c00248f4:	50                   	push   eax
c00248f5:	e8 9c fd fe ff       	call   c0014696 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248fa:	83 c4 10             	add    esp,0x10
c00248fd:	ba 54 d9 02 c0       	mov    edx,0xc002d954
c0024902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024906:	89 10                	mov    DWORD PTR [eax],edx
c0024908:	90                   	nop
c0024909:	83 c4 0c             	add    esp,0xc
c002490c:	c3                   	ret    
c002490d:	90                   	nop

c002490e <ATA::flush(bool)>:
c002490e:	53                   	push   ebx
c002490f:	83 ec 08             	sub    esp,0x8
c0024912:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002491b:	19 c0                	sbb    eax,eax
c002491d:	83 e0 fd             	and    eax,0xfffffffd
c0024920:	05 ea 00 00 00       	add    eax,0xea
c0024925:	50                   	push   eax
c0024926:	6a 07                	push   0x7
c0024928:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002492f:	50                   	push   eax
c0024930:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024936:	e8 dd ef ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002493b:	83 c4 0c             	add    esp,0xc
c002493e:	6a 00                	push   0x0
c0024940:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024947:	50                   	push   eax
c0024948:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002494e:	e8 71 fb ff ff       	call   c00244c4 <IDE::polling(unsigned char, unsigned int)>
c0024953:	83 c4 18             	add    esp,0x18
c0024956:	5b                   	pop    ebx
c0024957:	c3                   	ret    

c0024958 <ATA::readyForCommand()>:
c0024958:	56                   	push   esi
c0024959:	53                   	push   ebx
c002495a:	31 db                	xor    ebx,ebx
c002495c:	50                   	push   eax
c002495d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024961:	50                   	push   eax
c0024962:	6a 0c                	push   0xc
c0024964:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002496b:	50                   	push   eax
c002496c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024972:	e8 61 f0 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0024977:	83 c4 10             	add    esp,0x10
c002497a:	a8 88                	test   al,0x88
c002497c:	74 23                	je     c00249a1 <ATA::readyForCommand()+0x49>
c002497e:	43                   	inc    ebx
c002497f:	83 fb 63             	cmp    ebx,0x63
c0024982:	7e dd                	jle    c0024961 <ATA::readyForCommand()+0x9>
c0024984:	51                   	push   ecx
c0024985:	51                   	push   ecx
c0024986:	6a 00                	push   0x0
c0024988:	68 40 42 0f 00       	push   0xf4240
c002498d:	e8 0d 9f ff ff       	call   c001e89f <nanoSleep(unsigned long long)>
c0024992:	83 c4 10             	add    esp,0x10
c0024995:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002499b:	75 c4                	jne    c0024961 <ATA::readyForCommand()+0x9>
c002499d:	31 c0                	xor    eax,eax
c002499f:	eb 02                	jmp    c00249a3 <ATA::readyForCommand()+0x4b>
c00249a1:	b0 01                	mov    al,0x1
c00249a3:	5a                   	pop    edx
c00249a4:	5b                   	pop    ebx
c00249a5:	5e                   	pop    esi
c00249a6:	c3                   	ret    
c00249a7:	90                   	nop

c00249a8 <ATA::access(unsigned long long, int, void*, bool)>:
c00249a8:	55                   	push   ebp
c00249a9:	57                   	push   edi
c00249aa:	56                   	push   esi
c00249ab:	53                   	push   ebx
c00249ac:	83 ec 2c             	sub    esp,0x2c
c00249af:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00249b3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00249b7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00249bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00249bf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00249c3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00249c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00249cb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00249d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00249d5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00249db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00249df:	c1 e0 06             	shl    eax,0x6
c00249e2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00249ea:	74 5d                	je     c0024a49 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00249ec:	89 fa                	mov    edx,edi
c00249ee:	89 f0                	mov    eax,esi
c00249f0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00249f4:	c1 ea 1c             	shr    edx,0x1c
c00249f7:	89 d1                	mov    ecx,edx
c00249f9:	09 c1                	or     ecx,eax
c00249fb:	74 25                	je     c0024a22 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00249fd:	31 ed                	xor    ebp,ebp
c00249ff:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024a06:	89 fa                	mov    edx,edi
c0024a08:	89 f0                	mov    eax,esi
c0024a0a:	0f ad d0             	shrd   eax,edx,cl
c0024a0d:	d3 ea                	shr    edx,cl
c0024a0f:	f6 c1 20             	test   cl,0x20
c0024a12:	74 02                	je     c0024a16 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024a14:	89 d0                	mov    eax,edx
c0024a16:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024a1a:	45                   	inc    ebp
c0024a1b:	83 fd 06             	cmp    ebp,0x6
c0024a1e:	75 df                	jne    c00249ff <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024a20:	eb 76                	jmp    c0024a98 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024a22:	89 f0                	mov    eax,esi
c0024a24:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024a29:	89 fa                	mov    edx,edi
c0024a2b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024a32:	0f ac d0 10          	shrd   eax,edx,0x10
c0024a36:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024a3b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024a3f:	c1 ee 18             	shr    esi,0x18
c0024a42:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024a47:	eb 56                	jmp    c0024a9f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a49:	6a 00                	push   0x0
c0024a4b:	6a 3f                	push   0x3f
c0024a4d:	57                   	push   edi
c0024a4e:	56                   	push   esi
c0024a4f:	e8 90 29 00 00       	call   c00273e4 <__umoddi3>
c0024a54:	83 c4 10             	add    esp,0x10
c0024a57:	40                   	inc    eax
c0024a58:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024a5c:	6a 00                	push   0x0
c0024a5e:	68 f0 03 00 00       	push   0x3f0
c0024a63:	57                   	push   edi
c0024a64:	56                   	push   esi
c0024a65:	e8 7a 28 00 00       	call   c00272e4 <__udivdi3>
c0024a6a:	83 c4 10             	add    esp,0x10
c0024a6d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024a72:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024a79:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024a7e:	6a 00                	push   0x0
c0024a80:	6a 3f                	push   0x3f
c0024a82:	57                   	push   edi
c0024a83:	56                   	push   esi
c0024a84:	e8 5b 28 00 00       	call   c00272e4 <__udivdi3>
c0024a89:	83 c4 10             	add    esp,0x10
c0024a8c:	89 c6                	mov    esi,eax
c0024a8e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024a93:	83 e6 0f             	and    esi,0xf
c0024a96:	eb 07                	jmp    c0024a9f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a98:	31 f6                	xor    esi,esi
c0024a9a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024a9f:	bf 01 00 00 00       	mov    edi,0x1
c0024aa4:	50                   	push   eax
c0024aa5:	6a 00                	push   0x0
c0024aa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aae:	50                   	push   eax
c0024aaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024ab3:	e8 6c f0 ff ff       	call   c0023b24 <IDE::enableIRQs(unsigned char, bool)>
c0024ab8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024abb:	e8 98 fe ff ff       	call   c0024958 <ATA::readyForCommand()>
c0024ac0:	83 c4 10             	add    esp,0x10
c0024ac3:	84 c0                	test   al,al
c0024ac5:	0f 84 5a 02 00 00    	je     c0024d25 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024acb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024ad1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024ad7:	c1 e0 04             	shl    eax,0x4
c0024ada:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024ae1:	09 c6                	or     esi,eax
c0024ae3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024ae8:	75 05                	jne    c0024aef <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024aea:	83 ce a0             	or     esi,0xffffffa0
c0024aed:	eb 03                	jmp    c0024af2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024aef:	83 ce e0             	or     esi,0xffffffe0
c0024af2:	89 f0                	mov    eax,esi
c0024af4:	0f b6 f0             	movzx  esi,al
c0024af7:	56                   	push   esi
c0024af8:	6a 06                	push   0x6
c0024afa:	51                   	push   ecx
c0024afb:	52                   	push   edx
c0024afc:	e8 17 ee ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b01:	83 c4 10             	add    esp,0x10
c0024b04:	6a 00                	push   0x0
c0024b06:	6a 01                	push   0x1
c0024b08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b0f:	50                   	push   eax
c0024b10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b16:	e8 fd ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b1b:	83 c4 10             	add    esp,0x10
c0024b1e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b23:	75 6e                	jne    c0024b93 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024b25:	6a 00                	push   0x0
c0024b27:	6a 08                	push   0x8
c0024b29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b30:	50                   	push   eax
c0024b31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b37:	e8 dc ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b3c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024b41:	50                   	push   eax
c0024b42:	6a 09                	push   0x9
c0024b44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b4b:	50                   	push   eax
c0024b4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b52:	e8 c1 ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b57:	83 c4 20             	add    esp,0x20
c0024b5a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024b5f:	50                   	push   eax
c0024b60:	6a 0a                	push   0xa
c0024b62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b69:	50                   	push   eax
c0024b6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b70:	e8 a3 ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b75:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024b7a:	50                   	push   eax
c0024b7b:	6a 0b                	push   0xb
c0024b7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b84:	50                   	push   eax
c0024b85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b8b:	e8 88 ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b90:	83 c4 20             	add    esp,0x20
c0024b93:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024b98:	50                   	push   eax
c0024b99:	6a 02                	push   0x2
c0024b9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ba2:	50                   	push   eax
c0024ba3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba9:	e8 6a ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bae:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024bb3:	50                   	push   eax
c0024bb4:	6a 03                	push   0x3
c0024bb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bbd:	50                   	push   eax
c0024bbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bc4:	e8 4f ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bc9:	83 c4 20             	add    esp,0x20
c0024bcc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024bd1:	50                   	push   eax
c0024bd2:	6a 04                	push   0x4
c0024bd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bdb:	50                   	push   eax
c0024bdc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024be2:	e8 31 ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024be7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024bec:	50                   	push   eax
c0024bed:	6a 05                	push   0x5
c0024bef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bf6:	50                   	push   eax
c0024bf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bfd:	e8 16 ed ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c02:	83 c4 20             	add    esp,0x20
c0024c05:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024c0a:	0f 94 c0             	sete   al
c0024c0d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c12:	74 09                	je     c0024c1d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024c14:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024c1b:	eb 07                	jmp    c0024c24 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024c1d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024c24:	0f b6 c0             	movzx  eax,al
c0024c27:	50                   	push   eax
c0024c28:	6a 07                	push   0x7
c0024c2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c31:	50                   	push   eax
c0024c32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c38:	e8 db ec ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c3d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024c41:	83 c4 10             	add    esp,0x10
c0024c44:	85 f6                	test   esi,esi
c0024c46:	0f 84 ba 00 00 00    	je     c0024d06 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024c4c:	50                   	push   eax
c0024c4d:	6a 01                	push   0x1
c0024c4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c56:	50                   	push   eax
c0024c57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c5d:	e8 62 f8 ff ff       	call   c00244c4 <IDE::polling(unsigned char, unsigned int)>
c0024c62:	83 c4 10             	add    esp,0x10
c0024c65:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024c6b:	84 c0                	test   al,al
c0024c6d:	74 2c                	je     c0024c9b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024c6f:	0f b6 f8             	movzx  edi,al
c0024c72:	0f b6 d2             	movzx  edx,dl
c0024c75:	57                   	push   edi
c0024c76:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024c7d:	50                   	push   eax
c0024c7e:	52                   	push   edx
c0024c7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c85:	e8 a4 f6 ff ff       	call   c002432e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024c8a:	c7 04 24 2c d9 02 c0 	mov    DWORD PTR [esp],0xc002d92c
c0024c91:	e8 ad e1 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0024c96:	e9 87 00 00 00       	jmp    c0024d22 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024c9b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024ca0:	74 33                	je     c0024cd5 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024ca2:	31 ed                	xor    ebp,ebp
c0024ca4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024ca8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024cac:	50                   	push   eax
c0024cad:	50                   	push   eax
c0024cae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cb5:	50                   	push   eax
c0024cb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cbc:	e8 45 ec ff ff       	call   c0023906 <IDE::getBase(unsigned char)>
c0024cc1:	89 c2                	mov    edx,eax
c0024cc3:	89 f8                	mov    eax,edi
c0024cc5:	66 ef                	out    dx,ax
c0024cc7:	45                   	inc    ebp
c0024cc8:	83 c4 10             	add    esp,0x10
c0024ccb:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024cd1:	75 d1                	jne    c0024ca4 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024cd3:	eb 23                	jmp    c0024cf8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024cd5:	0f b6 d2             	movzx  edx,dl
c0024cd8:	51                   	push   ecx
c0024cd9:	51                   	push   ecx
c0024cda:	52                   	push   edx
c0024cdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ce1:	e8 20 ec ff ff       	call   c0023906 <IDE::getBase(unsigned char)>
c0024ce6:	b9 00 01 00 00       	mov    ecx,0x100
c0024ceb:	89 c2                	mov    edx,eax
c0024ced:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024cf1:	fc                   	cld    
c0024cf2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024cf5:	83 c4 10             	add    esp,0x10
c0024cf8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024d00:	4e                   	dec    esi
c0024d01:	e9 3e ff ff ff       	jmp    c0024c44 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024d06:	31 ff                	xor    edi,edi
c0024d08:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d0d:	74 16                	je     c0024d25 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024d0f:	50                   	push   eax
c0024d10:	50                   	push   eax
c0024d11:	31 c0                	xor    eax,eax
c0024d13:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024d18:	0f 94 c0             	sete   al
c0024d1b:	50                   	push   eax
c0024d1c:	53                   	push   ebx
c0024d1d:	e8 ec fb ff ff       	call   c002490e <ATA::flush(bool)>
c0024d22:	83 c4 10             	add    esp,0x10
c0024d25:	83 c4 2c             	add    esp,0x2c
c0024d28:	89 f8                	mov    eax,edi
c0024d2a:	5b                   	pop    ebx
c0024d2b:	5e                   	pop    esi
c0024d2c:	5f                   	pop    edi
c0024d2d:	5d                   	pop    ebp
c0024d2e:	c3                   	ret    
c0024d2f:	90                   	nop

c0024d30 <ATA::read(unsigned long long, int, void*)>:
c0024d30:	57                   	push   edi
c0024d31:	b8 04 00 00 00       	mov    eax,0x4
c0024d36:	56                   	push   esi
c0024d37:	53                   	push   ebx
c0024d38:	83 ec 10             	sub    esp,0x10
c0024d3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d3f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024d43:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024d46:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024d4a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024d4e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024d54:	77 3b                	ja     c0024d91 <ATA::read(unsigned long long, int, void*)+0x61>
c0024d56:	b8 06 00 00 00       	mov    eax,0x6
c0024d5b:	85 d2                	test   edx,edx
c0024d5d:	74 32                	je     c0024d91 <ATA::read(unsigned long long, int, void*)+0x61>
c0024d5f:	50                   	push   eax
c0024d60:	50                   	push   eax
c0024d61:	6a 00                	push   0x0
c0024d63:	52                   	push   edx
c0024d64:	53                   	push   ebx
c0024d65:	57                   	push   edi
c0024d66:	56                   	push   esi
c0024d67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d6b:	e8 38 fc ff ff       	call   c00249a8 <ATA::access(unsigned long long, int, void*, bool)>
c0024d70:	83 c4 20             	add    esp,0x20
c0024d73:	85 c0                	test   eax,eax
c0024d75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d79:	75 11                	jne    c0024d8c <ATA::read(unsigned long long, int, void*)+0x5c>
c0024d7b:	01 1d c8 32 03 c0    	add    DWORD PTR ds:0xc00332c8,ebx
c0024d81:	e8 c2 bb fe ff       	call   c0010948 <VgaText::updateDiskUsage()>
c0024d86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d8a:	eb 05                	jmp    c0024d91 <ATA::read(unsigned long long, int, void*)+0x61>
c0024d8c:	b8 01 00 00 00       	mov    eax,0x1
c0024d91:	83 c4 10             	add    esp,0x10
c0024d94:	5b                   	pop    ebx
c0024d95:	5e                   	pop    esi
c0024d96:	5f                   	pop    edi
c0024d97:	c3                   	ret    

c0024d98 <ATA::write(unsigned long long, int, void*)>:
c0024d98:	57                   	push   edi
c0024d99:	b8 04 00 00 00       	mov    eax,0x4
c0024d9e:	56                   	push   esi
c0024d9f:	53                   	push   ebx
c0024da0:	83 ec 10             	sub    esp,0x10
c0024da3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024da7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024dab:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024dae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024db2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024db6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024dbc:	77 3b                	ja     c0024df9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024dbe:	b8 06 00 00 00       	mov    eax,0x6
c0024dc3:	85 d2                	test   edx,edx
c0024dc5:	74 32                	je     c0024df9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024dc7:	50                   	push   eax
c0024dc8:	50                   	push   eax
c0024dc9:	6a 01                	push   0x1
c0024dcb:	52                   	push   edx
c0024dcc:	53                   	push   ebx
c0024dcd:	57                   	push   edi
c0024dce:	56                   	push   esi
c0024dcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024dd3:	e8 d0 fb ff ff       	call   c00249a8 <ATA::access(unsigned long long, int, void*, bool)>
c0024dd8:	83 c4 20             	add    esp,0x20
c0024ddb:	85 c0                	test   eax,eax
c0024ddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024de1:	75 11                	jne    c0024df4 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024de3:	01 1d c4 32 03 c0    	add    DWORD PTR ds:0xc00332c4,ebx
c0024de9:	e8 5a bb fe ff       	call   c0010948 <VgaText::updateDiskUsage()>
c0024dee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024df2:	eb 05                	jmp    c0024df9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024df4:	b8 01 00 00 00       	mov    eax,0x1
c0024df9:	83 c4 10             	add    esp,0x10
c0024dfc:	5b                   	pop    ebx
c0024dfd:	5e                   	pop    esi
c0024dfe:	5f                   	pop    edi
c0024dff:	c3                   	ret    

c0024e00 <ATA::detectCHS()>:
c0024e00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024e04:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024e0a:	c1 e0 06             	shl    eax,0x6
c0024e0d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024e13:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024e1d:	c7 44 24 04 37 d9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d937
c0024e25:	e9 e3 59 ff ff       	jmp    c001a80d <Krnl::panic(char const*)>

c0024e2a <ATA::open(int, int, void*)>:
c0024e2a:	53                   	push   ebx
c0024e2b:	83 ec 08             	sub    esp,0x8
c0024e2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e3a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024e40:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e46:	c1 e0 06             	shl    eax,0x6
c0024e49:	01 d0                	add    eax,edx
c0024e4b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024e52:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024e58:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024e5f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024e69:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024e6f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024e76:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024e7d:	75 0c                	jne    c0024e8b <ATA::open(int, int, void*)+0x61>
c0024e7f:	83 ec 0c             	sub    esp,0xc
c0024e82:	53                   	push   ebx
c0024e83:	e8 78 ff ff ff       	call   c0024e00 <ATA::detectCHS()>
c0024e88:	83 c4 10             	add    esp,0x10
c0024e8b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024e91:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024e97:	c1 e0 06             	shl    eax,0x6
c0024e9a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024ea1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024eab:	d1 e8                	shr    eax,1
c0024ead:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024eb3:	6a 04                	push   0x4
c0024eb5:	6a 0c                	push   0xc
c0024eb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ebe:	50                   	push   eax
c0024ebf:	52                   	push   edx
c0024ec0:	e8 53 ea ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ec5:	90                   	nop
c0024ec6:	90                   	nop
c0024ec7:	6a 00                	push   0x0
c0024ec9:	6a 0c                	push   0xc
c0024ecb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ed2:	50                   	push   eax
c0024ed3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ed9:	e8 3a ea ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ede:	83 c4 14             	add    esp,0x14
c0024ee1:	53                   	push   ebx
c0024ee2:	e8 17 f8 fe ff       	call   c00146fe <PhysicalDisk::startCache()>
c0024ee7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024eea:	e8 ef 1a ff ff       	call   c00169de <createPartitionsForDisk(PhysicalDisk*)>
c0024eef:	31 c0                	xor    eax,eax
c0024ef1:	83 c4 18             	add    esp,0x18
c0024ef4:	5b                   	pop    ebx
c0024ef5:	c3                   	ret    

c0024ef6 <ATAPI::write(unsigned long long, int, void*)>:
c0024ef6:	b8 03 00 00 00       	mov    eax,0x3
c0024efb:	c3                   	ret    

c0024efc <ATAPI::close(int, int, void*)>:
c0024efc:	83 ec 0c             	sub    esp,0xc
c0024eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f03:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f09:	85 c0                	test   eax,eax
c0024f0b:	74 0c                	je     c0024f19 <ATAPI::close(int, int, void*)+0x1d>
c0024f0d:	83 ec 0c             	sub    esp,0xc
c0024f10:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f12:	50                   	push   eax
c0024f13:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f16:	83 c4 10             	add    esp,0x10
c0024f19:	31 c0                	xor    eax,eax
c0024f1b:	83 c4 0c             	add    esp,0xc
c0024f1e:	c3                   	ret    
c0024f1f:	90                   	nop

c0024f20 <ATAPI::ATAPI()>:
c0024f20:	83 ec 0c             	sub    esp,0xc
c0024f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f27:	83 ec 04             	sub    esp,0x4
c0024f2a:	68 00 08 00 00       	push   0x800
c0024f2f:	68 71 da 02 c0       	push   0xc002da71
c0024f34:	50                   	push   eax
c0024f35:	e8 5c f7 fe ff       	call   c0014696 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f3a:	83 c4 10             	add    esp,0x10
c0024f3d:	ba 8c d9 02 c0       	mov    edx,0xc002d98c
c0024f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f46:	89 10                	mov    DWORD PTR [eax],edx
c0024f48:	90                   	nop
c0024f49:	83 c4 0c             	add    esp,0xc
c0024f4c:	c3                   	ret    
c0024f4d:	90                   	nop

c0024f4e <ATAPI::readyForCommand()>:
c0024f4e:	56                   	push   esi
c0024f4f:	53                   	push   ebx
c0024f50:	31 db                	xor    ebx,ebx
c0024f52:	50                   	push   eax
c0024f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024f57:	50                   	push   eax
c0024f58:	6a 0c                	push   0xc
c0024f5a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024f61:	50                   	push   eax
c0024f62:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024f68:	e8 6b ea ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0024f6d:	83 c4 10             	add    esp,0x10
c0024f70:	a8 88                	test   al,0x88
c0024f72:	74 23                	je     c0024f97 <ATAPI::readyForCommand()+0x49>
c0024f74:	43                   	inc    ebx
c0024f75:	83 fb 63             	cmp    ebx,0x63
c0024f78:	7e dd                	jle    c0024f57 <ATAPI::readyForCommand()+0x9>
c0024f7a:	51                   	push   ecx
c0024f7b:	51                   	push   ecx
c0024f7c:	6a 00                	push   0x0
c0024f7e:	68 40 42 0f 00       	push   0xf4240
c0024f83:	e8 17 99 ff ff       	call   c001e89f <nanoSleep(unsigned long long)>
c0024f88:	83 c4 10             	add    esp,0x10
c0024f8b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024f91:	75 c4                	jne    c0024f57 <ATAPI::readyForCommand()+0x9>
c0024f93:	31 c0                	xor    eax,eax
c0024f95:	eb 02                	jmp    c0024f99 <ATAPI::readyForCommand()+0x4b>
c0024f97:	b0 01                	mov    al,0x1
c0024f99:	5a                   	pop    edx
c0024f9a:	5b                   	pop    ebx
c0024f9b:	5e                   	pop    esi
c0024f9c:	c3                   	ret    
c0024f9d:	90                   	nop

c0024f9e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024f9e:	55                   	push   ebp
c0024f9f:	57                   	push   edi
c0024fa0:	56                   	push   esi
c0024fa1:	53                   	push   ebx
c0024fa2:	83 ec 20             	sub    esp,0x20
c0024fa5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024fa9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024fad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024fb1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024fb5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024fb9:	6a 01                	push   0x1
c0024fbb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fc2:	50                   	push   eax
c0024fc3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fc9:	e8 56 eb ff ff       	call   c0023b24 <IDE::enableIRQs(unsigned char, bool)>
c0024fce:	5e                   	pop    esi
c0024fcf:	58                   	pop    eax
c0024fd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fd7:	50                   	push   eax
c0024fd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fde:	e8 0f e9 ff ff       	call   c00238f2 <IDE::prepareInterrupt(unsigned char)>
c0024fe3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024fe6:	e8 63 ff ff ff       	call   c0024f4e <ATAPI::readyForCommand()>
c0024feb:	83 c4 10             	add    esp,0x10
c0024fee:	84 c0                	test   al,al
c0024ff0:	75 0a                	jne    c0024ffc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024ff2:	bb 01 00 00 00       	mov    ebx,0x1
c0024ff7:	e9 57 02 00 00       	jmp    c0025253 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ffc:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025002:	c1 e0 04             	shl    eax,0x4
c0025005:	0f b6 c0             	movzx  eax,al
c0025008:	50                   	push   eax
c0025009:	6a 06                	push   0x6
c002500b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025012:	50                   	push   eax
c0025013:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025019:	e8 fa e8 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002501e:	6a 00                	push   0x0
c0025020:	6a 01                	push   0x1
c0025022:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025029:	50                   	push   eax
c002502a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025030:	e8 e3 e8 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025035:	83 c4 20             	add    esp,0x20
c0025038:	0f b6 c3             	movzx  eax,bl
c002503b:	0f b6 df             	movzx  ebx,bh
c002503e:	50                   	push   eax
c002503f:	6a 04                	push   0x4
c0025041:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025048:	50                   	push   eax
c0025049:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002504f:	e8 c4 e8 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025054:	53                   	push   ebx
c0025055:	6a 05                	push   0x5
c0025057:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002505e:	50                   	push   eax
c002505f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025065:	e8 ae e8 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002506a:	83 c4 20             	add    esp,0x20
c002506d:	68 a0 00 00 00       	push   0xa0
c0025072:	6a 07                	push   0x7
c0025074:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002507b:	50                   	push   eax
c002507c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025082:	e8 91 e8 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025087:	83 c4 0c             	add    esp,0xc
c002508a:	6a 01                	push   0x1
c002508c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025093:	50                   	push   eax
c0025094:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002509a:	e8 25 f4 ff ff       	call   c00244c4 <IDE::polling(unsigned char, unsigned int)>
c002509f:	83 c4 10             	add    esp,0x10
c00250a2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00250a8:	84 c0                	test   al,al
c00250aa:	74 23                	je     c00250cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00250ac:	0f b6 d8             	movzx  ebx,al
c00250af:	0f b6 d2             	movzx  edx,dl
c00250b2:	53                   	push   ebx
c00250b3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00250ba:	50                   	push   eax
c00250bb:	52                   	push   edx
c00250bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250c2:	e8 67 f2 ff ff       	call   c002432e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00250c7:	83 c4 10             	add    esp,0x10
c00250ca:	e9 84 01 00 00       	jmp    c0025253 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00250cf:	0f b6 d2             	movzx  edx,dl
c00250d2:	53                   	push   ebx
c00250d3:	53                   	push   ebx
c00250d4:	52                   	push   edx
c00250d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250db:	e8 26 e8 ff ff       	call   c0023906 <IDE::getBase(unsigned char)>
c00250e0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00250e4:	b9 06 00 00 00       	mov    ecx,0x6
c00250e9:	89 c2                	mov    edx,eax
c00250eb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00250ee:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00250f2:	83 c4 10             	add    esp,0x10
c00250f5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250fb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025102:	85 db                	test   ebx,ebx
c0025104:	0f 84 ec 00 00 00    	je     c00251f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002510a:	51                   	push   ecx
c002510b:	51                   	push   ecx
c002510c:	52                   	push   edx
c002510d:	50                   	push   eax
c002510e:	e8 73 e9 ff ff       	call   c0023a86 <IDE::waitInterrupt(unsigned char)>
c0025113:	83 c4 10             	add    esp,0x10
c0025116:	84 c0                	test   al,al
c0025118:	0f 84 d4 fe ff ff    	je     c0024ff2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002511e:	56                   	push   esi
c002511f:	56                   	push   esi
c0025120:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025127:	50                   	push   eax
c0025128:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002512e:	e8 bf e7 ff ff       	call   c00238f2 <IDE::prepareInterrupt(unsigned char)>
c0025133:	83 c4 0c             	add    esp,0xc
c0025136:	6a 04                	push   0x4
c0025138:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002513f:	50                   	push   eax
c0025140:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025146:	e8 8d e8 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c002514b:	83 c4 0c             	add    esp,0xc
c002514e:	89 c6                	mov    esi,eax
c0025150:	6a 05                	push   0x5
c0025152:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025159:	50                   	push   eax
c002515a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025160:	e8 73 e8 ff ff       	call   c00239d8 <IDE::read(unsigned char, unsigned char)>
c0025165:	89 f1                	mov    ecx,esi
c0025167:	0f b6 c0             	movzx  eax,al
c002516a:	0f b6 f1             	movzx  esi,cl
c002516d:	c1 e0 08             	shl    eax,0x8
c0025170:	09 c6                	or     esi,eax
c0025172:	d1 fe                	sar    esi,1
c0025174:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025178:	83 c4 10             	add    esp,0x10
c002517b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025180:	74 41                	je     c00251c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025182:	31 c9                	xor    ecx,ecx
c0025184:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002518a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025191:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025195:	75 0a                	jne    c00251a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025197:	01 c9                	add    ecx,ecx
c0025199:	01 cd                	add    ebp,ecx
c002519b:	4b                   	dec    ebx
c002519c:	e9 54 ff ff ff       	jmp    c00250f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00251a1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00251a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00251aa:	51                   	push   ecx
c00251ab:	51                   	push   ecx
c00251ac:	52                   	push   edx
c00251ad:	50                   	push   eax
c00251ae:	e8 53 e7 ff ff       	call   c0023906 <IDE::getBase(unsigned char)>
c00251b3:	89 c2                	mov    edx,eax
c00251b5:	89 f0                	mov    eax,esi
c00251b7:	66 ef                	out    dx,ax
c00251b9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00251bd:	83 c4 10             	add    esp,0x10
c00251c0:	41                   	inc    ecx
c00251c1:	eb c1                	jmp    c0025184 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00251c3:	31 f6                	xor    esi,esi
c00251c5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00251cb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00251d2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00251d6:	75 06                	jne    c00251de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00251d8:	01 f6                	add    esi,esi
c00251da:	01 f5                	add    ebp,esi
c00251dc:	eb bd                	jmp    c002519b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00251de:	51                   	push   ecx
c00251df:	51                   	push   ecx
c00251e0:	52                   	push   edx
c00251e1:	50                   	push   eax
c00251e2:	e8 1f e7 ff ff       	call   c0023906 <IDE::getBase(unsigned char)>
c00251e7:	89 c2                	mov    edx,eax
c00251e9:	66 ed                	in     ax,dx
c00251eb:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00251f0:	83 c4 10             	add    esp,0x10
c00251f3:	46                   	inc    esi
c00251f4:	eb cf                	jmp    c00251c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00251f6:	51                   	push   ecx
c00251f7:	51                   	push   ecx
c00251f8:	52                   	push   edx
c00251f9:	50                   	push   eax
c00251fa:	e8 87 e8 ff ff       	call   c0023a86 <IDE::waitInterrupt(unsigned char)>
c00251ff:	83 c4 10             	add    esp,0x10
c0025202:	84 c0                	test   al,al
c0025204:	0f 84 e8 fd ff ff    	je     c0024ff2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002520a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002520f:	52                   	push   edx
c0025210:	52                   	push   edx
c0025211:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025218:	50                   	push   eax
c0025219:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002521f:	e8 ce e6 ff ff       	call   c00238f2 <IDE::prepareInterrupt(unsigned char)>
c0025224:	83 c4 10             	add    esp,0x10
c0025227:	50                   	push   eax
c0025228:	50                   	push   eax
c0025229:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025230:	50                   	push   eax
c0025231:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025237:	e8 ca e6 ff ff       	call   c0023906 <IDE::getBase(unsigned char)>
c002523c:	8d 50 07             	lea    edx,[eax+0x7]
c002523f:	ec                   	in     al,dx
c0025240:	83 c4 10             	add    esp,0x10
c0025243:	a8 88                	test   al,0x88
c0025245:	74 0a                	je     c0025251 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025247:	4b                   	dec    ebx
c0025248:	75 dd                	jne    c0025227 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002524a:	bb 02 00 00 00       	mov    ebx,0x2
c002524f:	eb 02                	jmp    c0025253 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025251:	31 db                	xor    ebx,ebx
c0025253:	83 c4 1c             	add    esp,0x1c
c0025256:	89 d8                	mov    eax,ebx
c0025258:	5b                   	pop    ebx
c0025259:	5e                   	pop    esi
c002525a:	5f                   	pop    edi
c002525b:	5d                   	pop    ebp
c002525c:	c3                   	ret    
c002525d:	90                   	nop

c002525e <ATAPI::diskRemoved()>:
c002525e:	83 ec 18             	sub    esp,0x18
c0025261:	68 7d da 02 c0       	push   0xc002da7d
c0025266:	e8 d8 db fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002526b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002526f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025276:	83 c4 1c             	add    esp,0x1c
c0025279:	c3                   	ret    

c002527a <ATAPI::eject()>:
c002527a:	57                   	push   edi
c002527b:	b9 03 00 00 00       	mov    ecx,0x3
c0025280:	53                   	push   ebx
c0025281:	83 ec 14             	sub    esp,0x14
c0025284:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025288:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002528c:	fc                   	cld    
c002528d:	31 c0                	xor    eax,eax
c002528f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025291:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025296:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002529b:	50                   	push   eax
c002529c:	50                   	push   eax
c002529d:	6a 00                	push   0x0
c002529f:	6a 00                	push   0x0
c00252a1:	6a 00                	push   0x0
c00252a3:	6a 02                	push   0x2
c00252a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252a9:	50                   	push   eax
c00252aa:	53                   	push   ebx
c00252ab:	e8 ee fc ff ff       	call   c0024f9e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00252b0:	83 c4 14             	add    esp,0x14
c00252b3:	53                   	push   ebx
c00252b4:	e8 a5 ff ff ff       	call   c002525e <ATAPI::diskRemoved()>
c00252b9:	83 c4 24             	add    esp,0x24
c00252bc:	31 c0                	xor    eax,eax
c00252be:	5b                   	pop    ebx
c00252bf:	5f                   	pop    edi
c00252c0:	c3                   	ret    
c00252c1:	90                   	nop

c00252c2 <ATAPI::diskInserted()>:
c00252c2:	53                   	push   ebx
c00252c3:	83 ec 14             	sub    esp,0x14
c00252c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00252ca:	68 94 da 02 c0       	push   0xc002da94
c00252cf:	e8 6f db fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00252d4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00252db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00252de:	e8 1b f4 fe ff       	call   c00146fe <PhysicalDisk::startCache()>
c00252e3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00252e7:	83 c4 18             	add    esp,0x18
c00252ea:	5b                   	pop    ebx
c00252eb:	e9 ee 16 ff ff       	jmp    c00169de <createPartitionsForDisk(PhysicalDisk*)>

c00252f0 <ATAPI::detectMedia()>:
c00252f0:	56                   	push   esi
c00252f1:	53                   	push   ebx
c00252f2:	83 ec 28             	sub    esp,0x28
c00252f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252f9:	6a 0c                	push   0xc
c00252fb:	6a 00                	push   0x0
c00252fd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025301:	56                   	push   esi
c0025302:	e8 65 b4 fd ff       	call   c000076c <memset>
c0025307:	58                   	pop    eax
c0025308:	5a                   	pop    edx
c0025309:	6a 00                	push   0x0
c002530b:	6a 00                	push   0x0
c002530d:	6a 00                	push   0x0
c002530f:	6a 00                	push   0x0
c0025311:	56                   	push   esi
c0025312:	53                   	push   ebx
c0025313:	e8 86 fc ff ff       	call   c0024f9e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025318:	83 c4 1c             	add    esp,0x1c
c002531b:	6a 0c                	push   0xc
c002531d:	6a 00                	push   0x0
c002531f:	56                   	push   esi
c0025320:	e8 47 b4 fd ff       	call   c000076c <memset>
c0025325:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002532a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002532f:	59                   	pop    ecx
c0025330:	58                   	pop    eax
c0025331:	6a 01                	push   0x1
c0025333:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025337:	50                   	push   eax
c0025338:	6a 00                	push   0x0
c002533a:	6a 12                	push   0x12
c002533c:	56                   	push   esi
c002533d:	53                   	push   ebx
c002533e:	e8 5b fc ff ff       	call   c0024f9e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025343:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025347:	83 c4 20             	add    esp,0x20
c002534a:	83 e0 7f             	and    eax,0x7f
c002534d:	3c 70                	cmp    al,0x70
c002534f:	74 15                	je     c0025366 <ATAPI::detectMedia()+0x76>
c0025351:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025358:	75 0c                	jne    c0025366 <ATAPI::detectMedia()+0x76>
c002535a:	83 ec 0c             	sub    esp,0xc
c002535d:	53                   	push   ebx
c002535e:	e8 5f ff ff ff       	call   c00252c2 <ATAPI::diskInserted()>
c0025363:	83 c4 10             	add    esp,0x10
c0025366:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002536a:	83 e0 0f             	and    eax,0xf
c002536d:	3c 02                	cmp    al,0x2
c002536f:	75 1b                	jne    c002538c <ATAPI::detectMedia()+0x9c>
c0025371:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025376:	75 2d                	jne    c00253a5 <ATAPI::detectMedia()+0xb5>
c0025378:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002537f:	74 24                	je     c00253a5 <ATAPI::detectMedia()+0xb5>
c0025381:	83 ec 0c             	sub    esp,0xc
c0025384:	53                   	push   ebx
c0025385:	e8 d4 fe ff ff       	call   c002525e <ATAPI::diskRemoved()>
c002538a:	eb 16                	jmp    c00253a2 <ATAPI::detectMedia()+0xb2>
c002538c:	84 c0                	test   al,al
c002538e:	75 15                	jne    c00253a5 <ATAPI::detectMedia()+0xb5>
c0025390:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025397:	75 0c                	jne    c00253a5 <ATAPI::detectMedia()+0xb5>
c0025399:	83 ec 0c             	sub    esp,0xc
c002539c:	53                   	push   ebx
c002539d:	e8 20 ff ff ff       	call   c00252c2 <ATAPI::diskInserted()>
c00253a2:	83 c4 10             	add    esp,0x10
c00253a5:	83 c4 24             	add    esp,0x24
c00253a8:	5b                   	pop    ebx
c00253a9:	5e                   	pop    esi
c00253aa:	c3                   	ret    
c00253ab:	90                   	nop

c00253ac <ATAPI::open(int, int, void*)>:
c00253ac:	53                   	push   ebx
c00253ad:	83 ec 08             	sub    esp,0x8
c00253b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00253b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00253bc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00253c8:	c1 e0 06             	shl    eax,0x6
c00253cb:	01 d0                	add    eax,edx
c00253cd:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00253d4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00253da:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00253e1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253eb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00253f1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253f8:	6a 04                	push   0x4
c00253fa:	6a 0c                	push   0xc
c00253fc:	51                   	push   ecx
c00253fd:	52                   	push   edx
c00253fe:	e8 15 e5 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025403:	90                   	nop
c0025404:	90                   	nop
c0025405:	6a 00                	push   0x0
c0025407:	6a 0c                	push   0xc
c0025409:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025410:	50                   	push   eax
c0025411:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025417:	e8 fc e4 ff ff       	call   c0023918 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002541c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025423:	83 c4 14             	add    esp,0x14
c0025426:	53                   	push   ebx
c0025427:	e8 c4 fe ff ff       	call   c00252f0 <ATAPI::detectMedia()>
c002542c:	31 c0                	xor    eax,eax
c002542e:	83 c4 18             	add    esp,0x18
c0025431:	5b                   	pop    ebx
c0025432:	c3                   	ret    
c0025433:	90                   	nop

c0025434 <ATAPI::read(unsigned long long, int, void*)>:
c0025434:	55                   	push   ebp
c0025435:	57                   	push   edi
c0025436:	56                   	push   esi
c0025437:	53                   	push   ebx
c0025438:	83 ec 1c             	sub    esp,0x1c
c002543b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002543f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025443:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025447:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002544e:	74 41                	je     c0025491 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025450:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025454:	b9 03 00 00 00       	mov    ecx,0x3
c0025459:	fc                   	cld    
c002545a:	31 c0                	xor    eax,eax
c002545c:	86 fb                	xchg   bl,bh
c002545e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025460:	c1 c3 10             	rol    ebx,0x10
c0025463:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025468:	89 e8                	mov    eax,ebp
c002546a:	86 fb                	xchg   bl,bh
c002546c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025470:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025474:	50                   	push   eax
c0025475:	50                   	push   eax
c0025476:	55                   	push   ebp
c0025477:	c1 e5 0b             	shl    ebp,0xb
c002547a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002547e:	6a 00                	push   0x0
c0025480:	55                   	push   ebp
c0025481:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025485:	50                   	push   eax
c0025486:	56                   	push   esi
c0025487:	e8 12 fb ff ff       	call   c0024f9e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002548c:	83 c4 20             	add    esp,0x20
c002548f:	eb 1a                	jmp    c00254ab <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025491:	83 ec 0c             	sub    esp,0xc
c0025494:	56                   	push   esi
c0025495:	e8 56 fe ff ff       	call   c00252f0 <ATAPI::detectMedia()>
c002549a:	83 c4 10             	add    esp,0x10
c002549d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00254a4:	75 aa                	jne    c0025450 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00254a6:	b8 02 00 00 00       	mov    eax,0x2
c00254ab:	83 c4 1c             	add    esp,0x1c
c00254ae:	5b                   	pop    ebx
c00254af:	5e                   	pop    esi
c00254b0:	5f                   	pop    edi
c00254b1:	5d                   	pop    ebp
c00254b2:	c3                   	ret    
c00254b3:	90                   	nop

c00254b4 <SATA::close(int, int, void*)>:
c00254b4:	83 ec 0c             	sub    esp,0xc
c00254b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00254c1:	85 c0                	test   eax,eax
c00254c3:	74 0c                	je     c00254d1 <SATA::close(int, int, void*)+0x1d>
c00254c5:	83 ec 0c             	sub    esp,0xc
c00254c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00254ca:	50                   	push   eax
c00254cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00254ce:	83 c4 10             	add    esp,0x10
c00254d1:	31 c0                	xor    eax,eax
c00254d3:	83 c4 0c             	add    esp,0xc
c00254d6:	c3                   	ret    
c00254d7:	90                   	nop

c00254d8 <SATA::powerSaving(PowerSavingLevel)>:
c00254d8:	c3                   	ret    
c00254d9:	90                   	nop

c00254da <SATA::open(int, int, void*)>:
c00254da:	56                   	push   esi
c00254db:	53                   	push   ebx
c00254dc:	50                   	push   eax
c00254dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00254e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00254e5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00254ef:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00254f5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00254ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025503:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002550d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025513:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002551a:	e8 f5 a9 fe ff       	call   c000ff14 <Phys::allocatePage()>
c002551f:	89 c6                	mov    esi,eax
c0025521:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025527:	81 c6 00 10 00 00    	add    esi,0x1000
c002552d:	e8 e2 a9 fe ff       	call   c000ff14 <Phys::allocatePage()>
c0025532:	39 c6                	cmp    esi,eax
c0025534:	74 10                	je     c0025546 <SATA::open(int, int, void*)+0x6c>
c0025536:	83 ec 0c             	sub    esp,0xc
c0025539:	68 bc d9 02 c0       	push   0xc002d9bc
c002553e:	e8 ca 52 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0025543:	83 c4 10             	add    esp,0x10
c0025546:	83 ec 0c             	sub    esp,0xc
c0025549:	6a 02                	push   0x2
c002554b:	e8 ed c4 fe ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0025550:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025556:	6a 03                	push   0x3
c0025558:	50                   	push   eax
c0025559:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002555f:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c0025565:	e8 0a cd fe ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c002556a:	83 c4 14             	add    esp,0x14
c002556d:	53                   	push   ebx
c002556e:	e8 8b f1 fe ff       	call   c00146fe <PhysicalDisk::startCache()>
c0025573:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025576:	e8 63 14 ff ff       	call   c00169de <createPartitionsForDisk(PhysicalDisk*)>
c002557b:	83 c4 14             	add    esp,0x14
c002557e:	31 c0                	xor    eax,eax
c0025580:	5b                   	pop    ebx
c0025581:	5e                   	pop    esi
c0025582:	c3                   	ret    
c0025583:	90                   	nop

c0025584 <SATA::SATA()>:
c0025584:	83 ec 0c             	sub    esp,0xc
c0025587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558b:	83 ec 04             	sub    esp,0x4
c002558e:	68 00 02 00 00       	push   0x200
c0025593:	68 d0 d9 02 c0       	push   0xc002d9d0
c0025598:	50                   	push   eax
c0025599:	e8 f8 f0 fe ff       	call   c0014696 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002559e:	83 c4 10             	add    esp,0x10
c00255a1:	ba 40 da 02 c0       	mov    edx,0xc002da40
c00255a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255aa:	89 10                	mov    DWORD PTR [eax],edx
c00255ac:	90                   	nop
c00255ad:	83 c4 0c             	add    esp,0xc
c00255b0:	c3                   	ret    
c00255b1:	90                   	nop

c00255b2 <SATA::access(unsigned long long, int, void*, bool)>:
c00255b2:	55                   	push   ebp
c00255b3:	57                   	push   edi
c00255b4:	56                   	push   esi
c00255b5:	53                   	push   ebx
c00255b6:	83 ec 2c             	sub    esp,0x2c
c00255b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00255bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00255c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00255c5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00255c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00255cd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00255d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255d6:	7e 10                	jle    c00255e8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00255d8:	83 ec 0c             	sub    esp,0xc
c00255db:	68 e0 d9 02 c0       	push   0xc002d9e0
c00255e0:	e8 28 52 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00255e5:	83 c4 10             	add    esp,0x10
c00255e8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00255ee:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00255f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00255fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00255fe:	89 d0                	mov    eax,edx
c0025600:	c1 e0 07             	shl    eax,0x7
c0025603:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025607:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025611:	51                   	push   ecx
c0025612:	8d 42 02             	lea    eax,[edx+0x2]
c0025615:	51                   	push   ecx
c0025616:	c1 e0 07             	shl    eax,0x7
c0025619:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002561d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025621:	50                   	push   eax
c0025622:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025628:	e8 af ef ff ff       	call   c00245dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002562d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025631:	83 c4 10             	add    esp,0x10
c0025634:	b8 01 00 00 00       	mov    eax,0x1
c0025639:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002563e:	0f 84 cb 01 00 00    	je     c002580f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025644:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025648:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002564c:	c1 e0 09             	shl    eax,0x9
c002564f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025654:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025658:	74 0e                	je     c0025668 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002565a:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025660:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025664:	89 c1                	mov    ecx,eax
c0025666:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002566c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025672:	8d 42 02             	lea    eax,[edx+0x2]
c0025675:	c1 e0 07             	shl    eax,0x7
c0025678:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002567c:	8b 00                	mov    eax,DWORD PTR [eax]
c002567e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025684:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002568a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002568e:	c1 e1 05             	shl    ecx,0x5
c0025691:	01 c8                	add    eax,ecx
c0025693:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025697:	83 e1 01             	and    ecx,0x1
c002569a:	89 ce                	mov    esi,ecx
c002569c:	8a 08                	mov    cl,BYTE PTR [eax]
c002569e:	c1 e6 06             	shl    esi,0x6
c00256a1:	83 e1 bf             	and    ecx,0xffffffbf
c00256a4:	09 f1                	or     ecx,esi
c00256a6:	88 08                	mov    BYTE PTR [eax],cl
c00256a8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00256aa:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00256b0:	81 c9 05 00 01 00    	or     ecx,0x10005
c00256b6:	89 08                	mov    DWORD PTR [eax],ecx
c00256b8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00256be:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00256c4:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00256ca:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00256cd:	50                   	push   eax
c00256ce:	68 90 00 00 00       	push   0x90
c00256d3:	6a 00                	push   0x0
c00256d5:	56                   	push   esi
c00256d6:	e8 91 b0 fd ff       	call   c000076c <memset>
c00256db:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00256e1:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00256e5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00256eb:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00256ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00256f3:	83 c4 10             	add    esp,0x10
c00256f6:	48                   	dec    eax
c00256f7:	25 ff ff 3f 00       	and    eax,0x3fffff
c00256fc:	89 c1                	mov    ecx,eax
c00256fe:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025704:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025709:	09 c8                	or     eax,ecx
c002570b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025711:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025714:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002571b:	66 25 00 7f          	and    ax,0x7f00
c002571f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025723:	66 0d 27 80          	or     ax,0x8027
c0025727:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002572c:	66 89 06             	mov    WORD PTR [esi],ax
c002572f:	19 c0                	sbb    eax,eax
c0025731:	83 e0 f0             	and    eax,0xfffffff0
c0025734:	83 c0 35             	add    eax,0x35
c0025737:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002573a:	89 e8                	mov    eax,ebp
c002573c:	c1 e8 10             	shr    eax,0x10
c002573f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025742:	89 e8                	mov    eax,ebp
c0025744:	c1 e8 18             	shr    eax,0x18
c0025747:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002574a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002574e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025751:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025755:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025758:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002575c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025760:	89 d6                	mov    esi,edx
c0025762:	31 c0                	xor    eax,eax
c0025764:	c1 e6 07             	shl    esi,0x7
c0025767:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002576b:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025771:	80 e1 88             	and    cl,0x88
c0025774:	74 0a                	je     c0025780 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025776:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002577b:	74 0a                	je     c0025787 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c002577d:	40                   	inc    eax
c002577e:	eb eb                	jmp    c002576b <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025780:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025785:	75 0a                	jne    c0025791 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025787:	83 ec 0c             	sub    esp,0xc
c002578a:	68 19 da 02 c0       	push   0xc002da19
c002578f:	eb 56                	jmp    c00257e7 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025791:	b8 01 00 00 00       	mov    eax,0x1
c0025796:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002579a:	c1 e2 07             	shl    edx,0x7
c002579d:	d3 e0                	shl    eax,cl
c002579f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00257a3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00257a9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00257af:	85 c8                	test   eax,ecx
c00257b1:	74 20                	je     c00257d3 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00257b3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00257b9:	0f ba e1 1e          	bt     ecx,0x1e
c00257bd:	73 ea                	jae    c00257a9 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00257bf:	83 ec 0c             	sub    esp,0xc
c00257c2:	68 27 da 02 c0       	push   0xc002da27
c00257c7:	e8 41 50 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00257cc:	83 c4 10             	add    esp,0x10
c00257cf:	31 c0                	xor    eax,eax
c00257d1:	eb 3c                	jmp    c002580f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257d3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00257d9:	0f ba e0 1e          	bt     eax,0x1e
c00257dd:	73 17                	jae    c00257f6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00257df:	83 ec 0c             	sub    esp,0xc
c00257e2:	68 27 da 02 c0       	push   0xc002da27
c00257e7:	e8 21 50 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00257ec:	83 c4 10             	add    esp,0x10
c00257ef:	b8 01 00 00 00       	mov    eax,0x1
c00257f4:	eb 19                	jmp    c002580f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257f6:	31 c0                	xor    eax,eax
c00257f8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00257fd:	75 10                	jne    c002580f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257ff:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025805:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025809:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002580d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002580f:	83 c4 2c             	add    esp,0x2c
c0025812:	5b                   	pop    ebx
c0025813:	5e                   	pop    esi
c0025814:	5f                   	pop    edi
c0025815:	5d                   	pop    ebp
c0025816:	c3                   	ret    
c0025817:	90                   	nop

c0025818 <SATA::read(unsigned long long, int, void*)>:
c0025818:	57                   	push   edi
c0025819:	b8 04 00 00 00       	mov    eax,0x4
c002581e:	56                   	push   esi
c002581f:	53                   	push   ebx
c0025820:	83 ec 10             	sub    esp,0x10
c0025823:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025827:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002582b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002582e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025832:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025836:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002583c:	77 3b                	ja     c0025879 <SATA::read(unsigned long long, int, void*)+0x61>
c002583e:	b8 06 00 00 00       	mov    eax,0x6
c0025843:	85 d2                	test   edx,edx
c0025845:	74 32                	je     c0025879 <SATA::read(unsigned long long, int, void*)+0x61>
c0025847:	50                   	push   eax
c0025848:	50                   	push   eax
c0025849:	6a 00                	push   0x0
c002584b:	52                   	push   edx
c002584c:	53                   	push   ebx
c002584d:	57                   	push   edi
c002584e:	56                   	push   esi
c002584f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025853:	e8 5a fd ff ff       	call   c00255b2 <SATA::access(unsigned long long, int, void*, bool)>
c0025858:	83 c4 20             	add    esp,0x20
c002585b:	85 c0                	test   eax,eax
c002585d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025861:	75 11                	jne    c0025874 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025863:	01 1d c8 32 03 c0    	add    DWORD PTR ds:0xc00332c8,ebx
c0025869:	e8 da b0 fe ff       	call   c0010948 <VgaText::updateDiskUsage()>
c002586e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025872:	eb 05                	jmp    c0025879 <SATA::read(unsigned long long, int, void*)+0x61>
c0025874:	b8 01 00 00 00       	mov    eax,0x1
c0025879:	83 c4 10             	add    esp,0x10
c002587c:	5b                   	pop    ebx
c002587d:	5e                   	pop    esi
c002587e:	5f                   	pop    edi
c002587f:	c3                   	ret    

c0025880 <SATA::write(unsigned long long, int, void*)>:
c0025880:	55                   	push   ebp
c0025881:	b8 04 00 00 00       	mov    eax,0x4
c0025886:	57                   	push   edi
c0025887:	56                   	push   esi
c0025888:	53                   	push   ebx
c0025889:	83 ec 1c             	sub    esp,0x1c
c002588c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025890:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025894:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025897:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002589b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002589f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00258a5:	77 56                	ja     c00258fd <SATA::write(unsigned long long, int, void*)+0x7d>
c00258a7:	b8 06 00 00 00       	mov    eax,0x6
c00258ac:	85 ff                	test   edi,edi
c00258ae:	74 4d                	je     c00258fd <SATA::write(unsigned long long, int, void*)+0x7d>
c00258b0:	89 ee                	mov    esi,ebp
c00258b2:	c1 e6 09             	shl    esi,0x9
c00258b5:	01 fe                	add    esi,edi
c00258b7:	89 c8                	mov    eax,ecx
c00258b9:	89 da                	mov    edx,ebx
c00258bb:	83 c0 01             	add    eax,0x1
c00258be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00258c2:	83 d2 00             	adc    edx,0x0
c00258c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00258c9:	50                   	push   eax
c00258ca:	50                   	push   eax
c00258cb:	6a 01                	push   0x1
c00258cd:	57                   	push   edi
c00258ce:	81 c7 00 02 00 00    	add    edi,0x200
c00258d4:	6a 01                	push   0x1
c00258d6:	53                   	push   ebx
c00258d7:	51                   	push   ecx
c00258d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00258dc:	e8 d1 fc ff ff       	call   c00255b2 <SATA::access(unsigned long long, int, void*, bool)>
c00258e1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00258e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00258e9:	83 c4 20             	add    esp,0x20
c00258ec:	39 f7                	cmp    edi,esi
c00258ee:	75 c7                	jne    c00258b7 <SATA::write(unsigned long long, int, void*)+0x37>
c00258f0:	01 2d c4 32 03 c0    	add    DWORD PTR ds:0xc00332c4,ebp
c00258f6:	e8 4d b0 fe ff       	call   c0010948 <VgaText::updateDiskUsage()>
c00258fb:	31 c0                	xor    eax,eax
c00258fd:	83 c4 1c             	add    esp,0x1c
c0025900:	5b                   	pop    ebx
c0025901:	5e                   	pop    esi
c0025902:	5f                   	pop    edi
c0025903:	5d                   	pop    ebp
c0025904:	c3                   	ret    
c0025905:	90                   	nop

c0025906 <SATAPI::write(unsigned long long, int, void*)>:
c0025906:	b8 03 00 00 00       	mov    eax,0x3
c002590b:	c3                   	ret    

c002590c <SATAPI::close(int, int, void*)>:
c002590c:	83 ec 0c             	sub    esp,0xc
c002590f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025913:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025919:	85 c0                	test   eax,eax
c002591b:	74 0c                	je     c0025929 <SATAPI::close(int, int, void*)+0x1d>
c002591d:	83 ec 0c             	sub    esp,0xc
c0025920:	8b 10                	mov    edx,DWORD PTR [eax]
c0025922:	50                   	push   eax
c0025923:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025926:	83 c4 10             	add    esp,0x10
c0025929:	31 c0                	xor    eax,eax
c002592b:	83 c4 0c             	add    esp,0xc
c002592e:	c3                   	ret    
c002592f:	90                   	nop

c0025930 <SATAPI::SATAPI()>:
c0025930:	83 ec 0c             	sub    esp,0xc
c0025933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025937:	83 ec 04             	sub    esp,0x4
c002593a:	68 00 08 00 00       	push   0x800
c002593f:	68 70 da 02 c0       	push   0xc002da70
c0025944:	50                   	push   eax
c0025945:	e8 4c ed fe ff       	call   c0014696 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002594a:	83 c4 10             	add    esp,0x10
c002594d:	ba 1c db 02 c0       	mov    edx,0xc002db1c
c0025952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025956:	89 10                	mov    DWORD PTR [eax],edx
c0025958:	90                   	nop
c0025959:	83 c4 0c             	add    esp,0xc
c002595c:	c3                   	ret    
c002595d:	90                   	nop

c002595e <SATAPI::diskRemoved()>:
c002595e:	83 ec 18             	sub    esp,0x18
c0025961:	68 7c da 02 c0       	push   0xc002da7c
c0025966:	e8 d8 d4 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002596b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002596f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025976:	83 c4 1c             	add    esp,0x1c
c0025979:	c3                   	ret    

c002597a <SATAPI::diskInserted()>:
c002597a:	53                   	push   ebx
c002597b:	83 ec 14             	sub    esp,0x14
c002597e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025982:	68 93 da 02 c0       	push   0xc002da93
c0025987:	e8 b7 d4 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002598c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025996:	e8 63 ed fe ff       	call   c00146fe <PhysicalDisk::startCache()>
c002599b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002599f:	83 c4 18             	add    esp,0x18
c00259a2:	5b                   	pop    ebx
c00259a3:	e9 36 10 ff ff       	jmp    c00169de <createPartitionsForDisk(PhysicalDisk*)>

c00259a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00259a8:	55                   	push   ebp
c00259a9:	57                   	push   edi
c00259aa:	56                   	push   esi
c00259ab:	53                   	push   ebx
c00259ac:	83 ec 34             	sub    esp,0x34
c00259af:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00259b3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259b7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00259bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00259bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00259c3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00259c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00259d3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00259d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00259dd:	c1 e0 07             	shl    eax,0x7
c00259e0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00259e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00259e8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00259f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259f6:	8d 58 02             	lea    ebx,[eax+0x2]
c00259f9:	c1 e3 07             	shl    ebx,0x7
c00259fc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025a00:	53                   	push   ebx
c0025a01:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025a07:	e8 d0 eb ff ff       	call   c00245dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025a0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025a10:	83 c4 10             	add    esp,0x10
c0025a13:	b8 01 00 00 00       	mov    eax,0x1
c0025a18:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025a1d:	0f 84 85 01 00 00    	je     c0025ba8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a23:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025a29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025a2b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025a31:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025a37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a3b:	c1 e1 05             	shl    ecx,0x5
c0025a3e:	01 c8                	add    eax,ecx
c0025a40:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025a42:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025a48:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025a4e:	89 08                	mov    DWORD PTR [eax],ecx
c0025a50:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025a56:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025a5c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025a62:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025a65:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025a68:	50                   	push   eax
c0025a69:	68 90 00 00 00       	push   0x90
c0025a6e:	6a 00                	push   0x0
c0025a70:	53                   	push   ebx
c0025a71:	e8 f6 ac fd ff       	call   c000076c <memset>
c0025a76:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025a7a:	b9 0c 00 00 00       	mov    ecx,0xc
c0025a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a81:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025a87:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025a8b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025a91:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025a95:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025a99:	48                   	dec    eax
c0025a9a:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025a9f:	89 c1                	mov    ecx,eax
c0025aa1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025aa7:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025aac:	09 c8                	or     eax,ecx
c0025aae:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025ab4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025ab7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025abe:	66 25 00 7f          	and    ax,0x7f00
c0025ac2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025ac6:	66 0d 27 80          	or     ax,0x8027
c0025aca:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025ace:	66 89 03             	mov    WORD PTR [ebx],ax
c0025ad1:	89 d0                	mov    eax,edx
c0025ad3:	c1 ea 18             	shr    edx,0x18
c0025ad6:	c1 e8 10             	shr    eax,0x10
c0025ad9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025adc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025adf:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025ae3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025ae6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025aea:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025aed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025af1:	83 c4 10             	add    esp,0x10
c0025af4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025af8:	31 c0                	xor    eax,eax
c0025afa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025afe:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025b04:	80 e2 88             	and    dl,0x88
c0025b07:	74 0a                	je     c0025b13 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025b09:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b0e:	74 0a                	je     c0025b1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025b10:	40                   	inc    eax
c0025b11:	eb eb                	jmp    c0025afe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025b13:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b18:	75 0f                	jne    c0025b29 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025b1a:	83 ec 0c             	sub    esp,0xc
c0025b1d:	68 19 da 02 c0       	push   0xc002da19
c0025b22:	e8 e6 4c ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0025b27:	eb 3f                	jmp    c0025b68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025b29:	ba 01 00 00 00       	mov    edx,0x1
c0025b2e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025b36:	d3 e2                	shl    edx,cl
c0025b38:	c1 e0 07             	shl    eax,0x7
c0025b3b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025b41:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025b45:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025b4b:	85 ca                	test   edx,ecx
c0025b4d:	74 23                	je     c0025b72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025b4f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025b55:	0f ba e1 1e          	bt     ecx,0x1e
c0025b59:	73 ea                	jae    c0025b45 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025b5b:	83 ec 0c             	sub    esp,0xc
c0025b5e:	68 ab da 02 c0       	push   0xc002daab
c0025b63:	e8 db d2 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0025b68:	83 c4 10             	add    esp,0x10
c0025b6b:	b8 01 00 00 00       	mov    eax,0x1
c0025b70:	eb 36                	jmp    c0025ba8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025b72:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025b78:	0f ba e0 1e          	bt     eax,0x1e
c0025b7c:	73 0a                	jae    c0025b88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025b7e:	83 ec 0c             	sub    esp,0xc
c0025b81:	68 be da 02 c0       	push   0xc002dabe
c0025b86:	eb db                	jmp    c0025b63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025b88:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025b8d:	74 17                	je     c0025ba6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025b8f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025b94:	74 10                	je     c0025ba6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025b96:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025b9c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025ba0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025ba4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ba6:	31 c0                	xor    eax,eax
c0025ba8:	83 c4 2c             	add    esp,0x2c
c0025bab:	5b                   	pop    ebx
c0025bac:	5e                   	pop    esi
c0025bad:	5f                   	pop    edi
c0025bae:	5d                   	pop    ebp
c0025baf:	c3                   	ret    

c0025bb0 <SATAPI::eject()>:
c0025bb0:	57                   	push   edi
c0025bb1:	b9 03 00 00 00       	mov    ecx,0x3
c0025bb6:	53                   	push   ebx
c0025bb7:	83 ec 14             	sub    esp,0x14
c0025bba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025bbe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025bc2:	fc                   	cld    
c0025bc3:	31 c0                	xor    eax,eax
c0025bc5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025bc7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025bcc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025bd1:	50                   	push   eax
c0025bd2:	6a 00                	push   0x0
c0025bd4:	6a 00                	push   0x0
c0025bd6:	6a 00                	push   0x0
c0025bd8:	6a 00                	push   0x0
c0025bda:	6a 02                	push   0x2
c0025bdc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025be0:	50                   	push   eax
c0025be1:	53                   	push   ebx
c0025be2:	e8 c1 fd ff ff       	call   c00259a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025be7:	83 c4 14             	add    esp,0x14
c0025bea:	53                   	push   ebx
c0025beb:	e8 6e fd ff ff       	call   c002595e <SATAPI::diskRemoved()>
c0025bf0:	83 c4 24             	add    esp,0x24
c0025bf3:	31 c0                	xor    eax,eax
c0025bf5:	5b                   	pop    ebx
c0025bf6:	5f                   	pop    edi
c0025bf7:	c3                   	ret    

c0025bf8 <SATAPI::detectMedia()>:
c0025bf8:	56                   	push   esi
c0025bf9:	53                   	push   ebx
c0025bfa:	83 ec 28             	sub    esp,0x28
c0025bfd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c01:	6a 0c                	push   0xc
c0025c03:	6a 00                	push   0x0
c0025c05:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025c09:	56                   	push   esi
c0025c0a:	e8 5d ab fd ff       	call   c000076c <memset>
c0025c0f:	83 c4 0c             	add    esp,0xc
c0025c12:	6a 00                	push   0x0
c0025c14:	6a 00                	push   0x0
c0025c16:	6a 00                	push   0x0
c0025c18:	6a 00                	push   0x0
c0025c1a:	6a 00                	push   0x0
c0025c1c:	56                   	push   esi
c0025c1d:	53                   	push   ebx
c0025c1e:	e8 85 fd ff ff       	call   c00259a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c23:	83 c4 1c             	add    esp,0x1c
c0025c26:	6a 0c                	push   0xc
c0025c28:	6a 00                	push   0x0
c0025c2a:	56                   	push   esi
c0025c2b:	e8 3c ab fd ff       	call   c000076c <memset>
c0025c30:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025c35:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025c3a:	83 c4 0c             	add    esp,0xc
c0025c3d:	6a 01                	push   0x1
c0025c3f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025c43:	50                   	push   eax
c0025c44:	6a 00                	push   0x0
c0025c46:	6a 00                	push   0x0
c0025c48:	6a 12                	push   0x12
c0025c4a:	56                   	push   esi
c0025c4b:	53                   	push   ebx
c0025c4c:	e8 57 fd ff ff       	call   c00259a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c51:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025c55:	83 c4 20             	add    esp,0x20
c0025c58:	83 e0 7f             	and    eax,0x7f
c0025c5b:	3c 70                	cmp    al,0x70
c0025c5d:	74 15                	je     c0025c74 <SATAPI::detectMedia()+0x7c>
c0025c5f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c66:	75 0c                	jne    c0025c74 <SATAPI::detectMedia()+0x7c>
c0025c68:	83 ec 0c             	sub    esp,0xc
c0025c6b:	53                   	push   ebx
c0025c6c:	e8 09 fd ff ff       	call   c002597a <SATAPI::diskInserted()>
c0025c71:	83 c4 10             	add    esp,0x10
c0025c74:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025c78:	83 e0 0f             	and    eax,0xf
c0025c7b:	3c 02                	cmp    al,0x2
c0025c7d:	75 1b                	jne    c0025c9a <SATAPI::detectMedia()+0xa2>
c0025c7f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025c84:	75 2d                	jne    c0025cb3 <SATAPI::detectMedia()+0xbb>
c0025c86:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c8d:	74 24                	je     c0025cb3 <SATAPI::detectMedia()+0xbb>
c0025c8f:	83 ec 0c             	sub    esp,0xc
c0025c92:	53                   	push   ebx
c0025c93:	e8 c6 fc ff ff       	call   c002595e <SATAPI::diskRemoved()>
c0025c98:	eb 16                	jmp    c0025cb0 <SATAPI::detectMedia()+0xb8>
c0025c9a:	84 c0                	test   al,al
c0025c9c:	75 15                	jne    c0025cb3 <SATAPI::detectMedia()+0xbb>
c0025c9e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025ca5:	75 0c                	jne    c0025cb3 <SATAPI::detectMedia()+0xbb>
c0025ca7:	83 ec 0c             	sub    esp,0xc
c0025caa:	53                   	push   ebx
c0025cab:	e8 ca fc ff ff       	call   c002597a <SATAPI::diskInserted()>
c0025cb0:	83 c4 10             	add    esp,0x10
c0025cb3:	83 c4 24             	add    esp,0x24
c0025cb6:	5b                   	pop    ebx
c0025cb7:	5e                   	pop    esi
c0025cb8:	c3                   	ret    
c0025cb9:	90                   	nop

c0025cba <SATAPI::open(int, int, void*)>:
c0025cba:	56                   	push   esi
c0025cbb:	53                   	push   ebx
c0025cbc:	50                   	push   eax
c0025cbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025cc5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025ccf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025cd5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ce3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025ced:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025cf3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025cfa:	e8 15 a2 fe ff       	call   c000ff14 <Phys::allocatePage()>
c0025cff:	89 c6                	mov    esi,eax
c0025d01:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025d07:	81 c6 00 10 00 00    	add    esi,0x1000
c0025d0d:	e8 02 a2 fe ff       	call   c000ff14 <Phys::allocatePage()>
c0025d12:	39 c6                	cmp    esi,eax
c0025d14:	74 10                	je     c0025d26 <SATAPI::open(int, int, void*)+0x6c>
c0025d16:	83 ec 0c             	sub    esp,0xc
c0025d19:	68 d3 da 02 c0       	push   0xc002dad3
c0025d1e:	e8 ea 4a ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0025d23:	83 c4 10             	add    esp,0x10
c0025d26:	83 ec 0c             	sub    esp,0xc
c0025d29:	6a 02                	push   0x2
c0025d2b:	e8 0d bd fe ff       	call   c0011a3d <Virt::allocateKernelVirtualPages(int)>
c0025d30:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025d36:	6a 03                	push   0x3
c0025d38:	50                   	push   eax
c0025d39:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025d3f:	ff 35 f0 f0 02 c0    	push   DWORD PTR ds:0xc002f0f0
c0025d45:	e8 2a c5 fe ff       	call   c0012274 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025d4a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025d51:	83 c4 14             	add    esp,0x14
c0025d54:	53                   	push   ebx
c0025d55:	e8 9e fe ff ff       	call   c0025bf8 <SATAPI::detectMedia()>
c0025d5a:	83 c4 14             	add    esp,0x14
c0025d5d:	31 c0                	xor    eax,eax
c0025d5f:	5b                   	pop    ebx
c0025d60:	5e                   	pop    esi
c0025d61:	c3                   	ret    

c0025d62 <SATAPI::read(unsigned long long, int, void*)>:
c0025d62:	55                   	push   ebp
c0025d63:	57                   	push   edi
c0025d64:	56                   	push   esi
c0025d65:	53                   	push   ebx
c0025d66:	83 ec 1c             	sub    esp,0x1c
c0025d69:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025d6d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d71:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025d75:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025d7c:	74 19                	je     c0025d97 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025d7e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025d83:	7e 2e                	jle    c0025db3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025d85:	83 ec 0c             	sub    esp,0xc
c0025d88:	68 e9 da 02 c0       	push   0xc002dae9
c0025d8d:	e8 7b 4a ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0025d92:	83 c4 10             	add    esp,0x10
c0025d95:	eb 1c                	jmp    c0025db3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025d97:	83 ec 0c             	sub    esp,0xc
c0025d9a:	55                   	push   ebp
c0025d9b:	e8 58 fe ff ff       	call   c0025bf8 <SATAPI::detectMedia()>
c0025da0:	83 c4 10             	add    esp,0x10
c0025da3:	b8 02 00 00 00       	mov    eax,0x2
c0025da8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025daf:	75 cd                	jne    c0025d7e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025db1:	eb 49                	jmp    c0025dfc <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025db3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025db7:	b9 03 00 00 00       	mov    ecx,0x3
c0025dbc:	fc                   	cld    
c0025dbd:	31 c0                	xor    eax,eax
c0025dbf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025dc1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025dc6:	89 d8                	mov    eax,ebx
c0025dc8:	86 e0                	xchg   al,ah
c0025dca:	c1 c0 10             	rol    eax,0x10
c0025dcd:	86 e0                	xchg   al,ah
c0025dcf:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025dd3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025dd7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025ddb:	50                   	push   eax
c0025ddc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025de0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025de4:	56                   	push   esi
c0025de5:	53                   	push   ebx
c0025de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025dea:	c1 e0 0b             	shl    eax,0xb
c0025ded:	50                   	push   eax
c0025dee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025df2:	50                   	push   eax
c0025df3:	55                   	push   ebp
c0025df4:	e8 af fb ff ff       	call   c00259a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025df9:	83 c4 20             	add    esp,0x20
c0025dfc:	83 c4 1c             	add    esp,0x1c
c0025dff:	5b                   	pop    ebx
c0025e00:	5e                   	pop    esi
c0025e01:	5f                   	pop    edi
c0025e02:	5d                   	pop    ebp
c0025e03:	c3                   	ret    

c0025e04 <AVX::open(int, int, void*)>:
c0025e04:	83 ec 0c             	sub    esp,0xc
c0025e07:	e8 3c 11 00 00       	call   c0026f48 <avxInit>
c0025e0c:	b8 00 00 00 00       	mov    eax,0x0
c0025e11:	83 c4 0c             	add    esp,0xc
c0025e14:	c3                   	ret    
c0025e15:	90                   	nop

c0025e16 <AVX::close(int, int, void*)>:
c0025e16:	83 ec 0c             	sub    esp,0xc
c0025e19:	e8 2b 11 00 00       	call   c0026f49 <avxClose>
c0025e1e:	b8 00 00 00 00       	mov    eax,0x0
c0025e23:	83 c4 0c             	add    esp,0xc
c0025e26:	c3                   	ret    
c0025e27:	90                   	nop

c0025e28 <AVX::available()>:
c0025e28:	83 ec 0c             	sub    esp,0xc
c0025e2b:	e8 10 11 00 00       	call   c0026f40 <avxDetect>
c0025e30:	85 c0                	test   eax,eax
c0025e32:	0f 95 c0             	setne  al
c0025e35:	83 c4 0c             	add    esp,0xc
c0025e38:	c3                   	ret    
c0025e39:	90                   	nop

c0025e3a <AVX::save(void*)>:
c0025e3a:	83 ec 0c             	sub    esp,0xc
c0025e3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e41:	83 ec 0c             	sub    esp,0xc
c0025e44:	50                   	push   eax
c0025e45:	e8 fc 10 00 00       	call   c0026f46 <avxSave>
c0025e4a:	83 c4 10             	add    esp,0x10
c0025e4d:	90                   	nop
c0025e4e:	83 c4 0c             	add    esp,0xc
c0025e51:	c3                   	ret    

c0025e52 <AVX::load(void*)>:
c0025e52:	83 ec 0c             	sub    esp,0xc
c0025e55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e59:	83 ec 0c             	sub    esp,0xc
c0025e5c:	50                   	push   eax
c0025e5d:	e8 e5 10 00 00       	call   c0026f47 <avxLoad>
c0025e62:	83 c4 10             	add    esp,0x10
c0025e65:	90                   	nop
c0025e66:	83 c4 0c             	add    esp,0xc
c0025e69:	c3                   	ret    

c0025e6a <AVX::AVX()>:
c0025e6a:	83 ec 0c             	sub    esp,0xc
c0025e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e71:	83 ec 08             	sub    esp,0x8
c0025e74:	68 4c db 02 c0       	push   0xc002db4c
c0025e79:	50                   	push   eax
c0025e7a:	e8 f5 e8 fe ff       	call   c0014774 <FPU::FPU(char const*)>
c0025e7f:	83 c4 10             	add    esp,0x10
c0025e82:	ba 5c db 02 c0       	mov    edx,0xc002db5c
c0025e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8b:	89 10                	mov    DWORD PTR [eax],edx
c0025e8d:	90                   	nop
c0025e8e:	83 c4 0c             	add    esp,0xc
c0025e91:	c3                   	ret    

c0025e92 <MMX::available()>:
c0025e92:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0025e97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025e9d:	83 e0 20             	and    eax,0x20
c0025ea0:	84 c0                	test   al,al
c0025ea2:	0f 95 c0             	setne  al
c0025ea5:	c3                   	ret    

c0025ea6 <MMX::open(int, int, void*)>:
c0025ea6:	83 ec 0c             	sub    esp,0xc
c0025ea9:	e8 24 11 00 00       	call   c0026fd2 <x87Init>
c0025eae:	b8 00 00 00 00       	mov    eax,0x0
c0025eb3:	83 c4 0c             	add    esp,0xc
c0025eb6:	c3                   	ret    
c0025eb7:	90                   	nop

c0025eb8 <MMX::close(int, int, void*)>:
c0025eb8:	83 ec 0c             	sub    esp,0xc
c0025ebb:	e8 2c 11 00 00       	call   c0026fec <x87Close>
c0025ec0:	b8 00 00 00 00       	mov    eax,0x0
c0025ec5:	83 c4 0c             	add    esp,0xc
c0025ec8:	c3                   	ret    
c0025ec9:	90                   	nop

c0025eca <MMX::save(void*)>:
c0025eca:	83 ec 0c             	sub    esp,0xc
c0025ecd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ed1:	83 ec 0c             	sub    esp,0xc
c0025ed4:	50                   	push   eax
c0025ed5:	e8 e7 10 00 00       	call   c0026fc1 <x87Save>
c0025eda:	83 c4 10             	add    esp,0x10
c0025edd:	90                   	nop
c0025ede:	83 c4 0c             	add    esp,0xc
c0025ee1:	c3                   	ret    

c0025ee2 <MMX::load(void*)>:
c0025ee2:	83 ec 0c             	sub    esp,0xc
c0025ee5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ee9:	83 ec 0c             	sub    esp,0xc
c0025eec:	50                   	push   eax
c0025eed:	e8 d8 10 00 00       	call   c0026fca <x87Load>
c0025ef2:	83 c4 10             	add    esp,0x10
c0025ef5:	90                   	nop
c0025ef6:	83 c4 0c             	add    esp,0xc
c0025ef9:	c3                   	ret    

c0025efa <MMX::MMX()>:
c0025efa:	83 ec 0c             	sub    esp,0xc
c0025efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f01:	83 ec 08             	sub    esp,0x8
c0025f04:	68 8c db 02 c0       	push   0xc002db8c
c0025f09:	50                   	push   eax
c0025f0a:	e8 65 e8 fe ff       	call   c0014774 <FPU::FPU(char const*)>
c0025f0f:	83 c4 10             	add    esp,0x10
c0025f12:	ba 9c db 02 c0       	mov    edx,0xc002db9c
c0025f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1b:	89 10                	mov    DWORD PTR [eax],edx
c0025f1d:	90                   	nop
c0025f1e:	83 c4 0c             	add    esp,0xc
c0025f21:	c3                   	ret    

c0025f22 <SSE::open(int, int, void*)>:
c0025f22:	83 ec 0c             	sub    esp,0xc
c0025f25:	e8 5a 10 00 00       	call   c0026f84 <sseInit>
c0025f2a:	b8 00 00 00 00       	mov    eax,0x0
c0025f2f:	83 c4 0c             	add    esp,0xc
c0025f32:	c3                   	ret    
c0025f33:	90                   	nop

c0025f34 <SSE::close(int, int, void*)>:
c0025f34:	83 ec 0c             	sub    esp,0xc
c0025f37:	e8 58 10 00 00       	call   c0026f94 <sseClose>
c0025f3c:	b8 00 00 00 00       	mov    eax,0x0
c0025f41:	83 c4 0c             	add    esp,0xc
c0025f44:	c3                   	ret    
c0025f45:	90                   	nop

c0025f46 <SSE::available()>:
c0025f46:	83 ec 1c             	sub    esp,0x1c
c0025f49:	e8 12 10 00 00       	call   c0026f60 <absolutelyNoChanceInHell>
c0025f4e:	85 c0                	test   eax,eax
c0025f50:	0f 95 c0             	setne  al
c0025f53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025f57:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025f5b:	83 c4 1c             	add    esp,0x1c
c0025f5e:	c3                   	ret    
c0025f5f:	90                   	nop

c0025f60 <SSE::save(void*)>:
c0025f60:	83 ec 0c             	sub    esp,0xc
c0025f63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f67:	83 ec 0c             	sub    esp,0xc
c0025f6a:	50                   	push   eax
c0025f6b:	e8 08 10 00 00       	call   c0026f78 <sseSave>
c0025f70:	83 c4 10             	add    esp,0x10
c0025f73:	90                   	nop
c0025f74:	83 c4 0c             	add    esp,0xc
c0025f77:	c3                   	ret    

c0025f78 <SSE::load(void*)>:
c0025f78:	83 ec 0c             	sub    esp,0xc
c0025f7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f7f:	83 ec 0c             	sub    esp,0xc
c0025f82:	50                   	push   eax
c0025f83:	e8 f6 0f 00 00       	call   c0026f7e <sseLoad>
c0025f88:	83 c4 10             	add    esp,0x10
c0025f8b:	90                   	nop
c0025f8c:	83 c4 0c             	add    esp,0xc
c0025f8f:	c3                   	ret    

c0025f90 <SSE::SSE()>:
c0025f90:	83 ec 0c             	sub    esp,0xc
c0025f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f97:	83 ec 08             	sub    esp,0x8
c0025f9a:	68 cc db 02 c0       	push   0xc002dbcc
c0025f9f:	50                   	push   eax
c0025fa0:	e8 cf e7 fe ff       	call   c0014774 <FPU::FPU(char const*)>
c0025fa5:	83 c4 10             	add    esp,0x10
c0025fa8:	ba dc db 02 c0       	mov    edx,0xc002dbdc
c0025fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb1:	89 10                	mov    DWORD PTR [eax],edx
c0025fb3:	90                   	nop
c0025fb4:	83 c4 0c             	add    esp,0xc
c0025fb7:	c3                   	ret    

c0025fb8 <x87::open(int, int, void*)>:
c0025fb8:	83 ec 0c             	sub    esp,0xc
c0025fbb:	e8 12 10 00 00       	call   c0026fd2 <x87Init>
c0025fc0:	b8 00 00 00 00       	mov    eax,0x0
c0025fc5:	83 c4 0c             	add    esp,0xc
c0025fc8:	c3                   	ret    
c0025fc9:	90                   	nop

c0025fca <x87::close(int, int, void*)>:
c0025fca:	83 ec 0c             	sub    esp,0xc
c0025fcd:	e8 1a 10 00 00       	call   c0026fec <x87Close>
c0025fd2:	b8 00 00 00 00       	mov    eax,0x0
c0025fd7:	83 c4 0c             	add    esp,0xc
c0025fda:	c3                   	ret    
c0025fdb:	90                   	nop

c0025fdc <x87::available()>:
c0025fdc:	83 ec 0c             	sub    esp,0xc
c0025fdf:	e8 c2 0f 00 00       	call   c0026fa6 <x87Detect>
c0025fe4:	85 c0                	test   eax,eax
c0025fe6:	0f 95 c0             	setne  al
c0025fe9:	83 c4 0c             	add    esp,0xc
c0025fec:	c3                   	ret    
c0025fed:	90                   	nop

c0025fee <x87::save(void*)>:
c0025fee:	83 ec 0c             	sub    esp,0xc
c0025ff1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ff5:	83 ec 0c             	sub    esp,0xc
c0025ff8:	50                   	push   eax
c0025ff9:	e8 c3 0f 00 00       	call   c0026fc1 <x87Save>
c0025ffe:	83 c4 10             	add    esp,0x10
c0026001:	90                   	nop
c0026002:	83 c4 0c             	add    esp,0xc
c0026005:	c3                   	ret    

c0026006 <x87::load(void*)>:
c0026006:	83 ec 0c             	sub    esp,0xc
c0026009:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002600d:	83 ec 0c             	sub    esp,0xc
c0026010:	50                   	push   eax
c0026011:	e8 b4 0f 00 00       	call   c0026fca <x87Load>
c0026016:	83 c4 10             	add    esp,0x10
c0026019:	90                   	nop
c002601a:	83 c4 0c             	add    esp,0xc
c002601d:	c3                   	ret    

c002601e <x87::x87()>:
c002601e:	83 ec 0c             	sub    esp,0xc
c0026021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026025:	83 ec 08             	sub    esp,0x8
c0026028:	68 0c dc 02 c0       	push   0xc002dc0c
c002602d:	50                   	push   eax
c002602e:	e8 41 e7 fe ff       	call   c0014774 <FPU::FPU(char const*)>
c0026033:	83 c4 10             	add    esp,0x10
c0026036:	ba 1c dc 02 c0       	mov    edx,0xc002dc1c
c002603b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603f:	89 10                	mov    DWORD PTR [eax],edx
c0026041:	90                   	nop
c0026042:	83 c4 0c             	add    esp,0xc
c0026045:	c3                   	ret    

c0026046 <APIC::disable()>:
c0026046:	90                   	nop
c0026047:	c3                   	ret    

c0026048 <APIC::close(int, int, void*)>:
c0026048:	55                   	push   ebp
c0026049:	89 e5                	mov    ebp,esp
c002604b:	83 ec 08             	sub    esp,0x8
c002604e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026051:	8b 00                	mov    eax,DWORD PTR [eax]
c0026053:	83 c0 3c             	add    eax,0x3c
c0026056:	8b 00                	mov    eax,DWORD PTR [eax]
c0026058:	83 ec 0c             	sub    esp,0xc
c002605b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002605e:	ff d0                	call   eax
c0026060:	83 c4 10             	add    esp,0x10
c0026063:	b8 00 00 00 00       	mov    eax,0x0
c0026068:	c9                   	leave  
c0026069:	c3                   	ret    

c002606a <IOAPIC::close(int, int, void*)>:
c002606a:	b8 00 00 00 00       	mov    eax,0x0
c002606f:	c3                   	ret    

c0026070 <APIC::io_wait()>:
c0026070:	eb 00                	jmp    c0026072 <APIC::io_wait()+0x2>
c0026072:	eb 00                	jmp    c0026074 <APIC::io_wait()+0x4>
c0026074:	90                   	nop
c0026075:	c3                   	ret    

c0026076 <APIC::getBase()>:
c0026076:	55                   	push   ebp
c0026077:	89 e5                	mov    ebp,esp
c0026079:	83 ec 18             	sub    esp,0x18
c002607c:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0026081:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026087:	83 e0 08             	and    eax,0x8
c002608a:	84 c0                	test   al,al
c002608c:	75 07                	jne    c0026095 <APIC::getBase()+0x1f>
c002608e:	b8 00 00 00 00       	mov    eax,0x0
c0026093:	eb 21                	jmp    c00260b6 <APIC::getBase()+0x40>
c0026095:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c002609a:	83 ec 08             	sub    esp,0x8
c002609d:	6a 1b                	push   0x1b
c002609f:	50                   	push   eax
c00260a0:	e8 a9 8d fe ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c00260a5:	83 c4 10             	add    esp,0x10
c00260a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00260ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00260ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00260b6:	c9                   	leave  
c00260b7:	c3                   	ret    

c00260b8 <APIC::eoi(unsigned char)>:
c00260b8:	55                   	push   ebp
c00260b9:	89 e5                	mov    ebp,esp
c00260bb:	83 ec 28             	sub    esp,0x28
c00260be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260c1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00260c4:	83 ec 0c             	sub    esp,0xc
c00260c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260ca:	e8 a7 ff ff ff       	call   c0026076 <APIC::getBase()>
c00260cf:	83 c4 10             	add    esp,0x10
c00260d2:	05 b0 00 00 00       	add    eax,0xb0
c00260d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00260da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260dd:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00260e3:	90                   	nop
c00260e4:	c9                   	leave  
c00260e5:	c3                   	ret    

c00260e6 <APIC::open(int, int, void*)>:
c00260e6:	55                   	push   ebp
c00260e7:	89 e5                	mov    ebp,esp
c00260e9:	57                   	push   edi
c00260ea:	56                   	push   esi
c00260eb:	53                   	push   ebx
c00260ec:	83 ec 2c             	sub    esp,0x2c
c00260ef:	83 ec 0c             	sub    esp,0xc
c00260f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f5:	e8 7c ff ff ff       	call   c0026076 <APIC::getBase()>
c00260fa:	83 c4 10             	add    esp,0x10
c00260fd:	89 c2                	mov    edx,eax
c00260ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026102:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026108:	0f b6 f8             	movzx  edi,al
c002610b:	89 d0                	mov    eax,edx
c002610d:	ba 00 00 00 00       	mov    edx,0x0
c0026112:	89 c1                	mov    ecx,eax
c0026114:	80 e5 ff             	and    ch,0xff
c0026117:	89 cb                	mov    ebx,ecx
c0026119:	0f b6 f2             	movzx  esi,dl
c002611c:	89 d8                	mov    eax,ebx
c002611e:	89 f2                	mov    edx,esi
c0026120:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026123:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026126:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002612a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002612e:	83 e0 00             	and    eax,0x0
c0026131:	09 d0                	or     eax,edx
c0026133:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002613a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026140:	8d 50 01             	lea    edx,[eax+0x1]
c0026143:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026146:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002614c:	0f b6 d0             	movzx  edx,al
c002614f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026152:	83 c2 08             	add    edx,0x8
c0026155:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026159:	0f b6 c9             	movzx  ecx,cl
c002615c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026162:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026166:	83 ec 0c             	sub    esp,0xc
c0026169:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002616c:	e8 05 ff ff ff       	call   c0026076 <APIC::getBase()>
c0026171:	83 c4 10             	add    esp,0x10
c0026174:	05 f0 00 00 00       	add    eax,0xf0
c0026179:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002617c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002617f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026181:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026184:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002618b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026192:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026195:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026198:	89 10                	mov    DWORD PTR [eax],edx
c002619a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00261a1:	a1 50 18 03 c0       	mov    eax,ds:0xc0031850
c00261a6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00261a9:	7d 7c                	jge    c0026227 <APIC::open(int, int, void*)+0x141>
c00261ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00261ae:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c00261b5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00261b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00261bb:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c00261c2:	c1 e8 08             	shr    eax,0x8
c00261c5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00261c9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00261cc:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c00261d3:	c1 e8 18             	shr    eax,0x18
c00261d6:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00261d9:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00261dd:	75 40                	jne    c002621f <APIC::open(int, int, void*)+0x139>
c00261df:	83 ec 0c             	sub    esp,0xc
c00261e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e5:	e8 8c fe ff ff       	call   c0026076 <APIC::getBase()>
c00261ea:	83 c4 10             	add    esp,0x10
c00261ed:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00261f1:	75 07                	jne    c00261fa <APIC::open(int, int, void*)+0x114>
c00261f3:	ba 60 03 00 00       	mov    edx,0x360
c00261f8:	eb 05                	jmp    c00261ff <APIC::open(int, int, void*)+0x119>
c00261fa:	ba 50 03 00 00       	mov    edx,0x350
c00261ff:	01 d0                	add    eax,edx
c0026201:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026204:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026207:	8b 00                	mov    eax,DWORD PTR [eax]
c0026209:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002620c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026213:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026217:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002621a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002621d:	89 10                	mov    DWORD PTR [eax],edx
c002621f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026222:	e9 7a ff ff ff       	jmp    c00261a1 <APIC::open(int, int, void*)+0xbb>
c0026227:	b8 00 00 00 00       	mov    eax,0x0
c002622c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002622f:	5b                   	pop    ebx
c0026230:	5e                   	pop    esi
c0026231:	5f                   	pop    edi
c0026232:	5d                   	pop    ebp
c0026233:	c3                   	ret    

c0026234 <IOAPIC::IOAPIC()>:
c0026234:	83 ec 0c             	sub    esp,0xc
c0026237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623b:	83 ec 08             	sub    esp,0x8
c002623e:	68 4c dc 02 c0       	push   0xc002dc4c
c0026243:	50                   	push   eax
c0026244:	e8 0b e2 fe ff       	call   c0014454 <Device::Device(char const*)>
c0026249:	83 c4 10             	add    esp,0x10
c002624c:	ba 74 dd 02 c0       	mov    edx,0xc002dd74
c0026251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026255:	89 10                	mov    DWORD PTR [eax],edx
c0026257:	90                   	nop
c0026258:	83 c4 0c             	add    esp,0xc
c002625b:	c3                   	ret    

c002625c <APIC::APIC()>:
c002625c:	53                   	push   ebx
c002625d:	83 ec 18             	sub    esp,0x18
c0026260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026264:	83 ec 08             	sub    esp,0x8
c0026267:	68 54 dc 02 c0       	push   0xc002dc54
c002626c:	50                   	push   eax
c002626d:	e8 5c e9 fe ff       	call   c0014bce <InterruptController::InterruptController(char const*)>
c0026272:	83 c4 10             	add    esp,0x10
c0026275:	ba 2c dd 02 c0       	mov    edx,0xc002dd2c
c002627a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002627e:	89 10                	mov    DWORD PTR [eax],edx
c0026280:	a0 20 33 03 c0       	mov    al,ds:0xc0033320
c0026285:	83 f0 01             	xor    eax,0x1
c0026288:	84 c0                	test   al,al
c002628a:	0f 84 a1 00 00 00    	je     c0026331 <APIC::APIC()+0xd5>
c0026290:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026295:	a0 00 19 03 c0       	mov    al,ds:0xc0031900
c002629a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002629e:	0f 83 86 00 00 00    	jae    c002632a <APIC::APIC()+0xce>
c00262a4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00262ac:	83 ec 0c             	sub    esp,0xc
c00262af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00262b3:	e8 f0 95 fe ff       	call   c000f8a8 <malloc>
c00262b8:	83 c4 10             	add    esp,0x10
c00262bb:	89 c3                	mov    ebx,eax
c00262bd:	83 ec 0c             	sub    esp,0xc
c00262c0:	53                   	push   ebx
c00262c1:	e8 6e ff ff ff       	call   c0026234 <IOAPIC::IOAPIC()>
c00262c6:	83 c4 10             	add    esp,0x10
c00262c9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00262cd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00262d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00262d6:	89 14 85 00 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccd00],edx
c00262dd:	a1 e0 32 03 c0       	mov    eax,ds:0xc00332e0
c00262e2:	40                   	inc    eax
c00262e3:	a3 e0 32 03 c0       	mov    ds:0xc00332e0,eax
c00262e8:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c00262ed:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00262f3:	83 ec 08             	sub    esp,0x8
c00262f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00262fa:	50                   	push   eax
c00262fb:	e8 64 df fe ff       	call   c0014264 <Device::addChild(Device*)>
c0026300:	83 c4 10             	add    esp,0x10
c0026303:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026307:	8b 00                	mov    eax,DWORD PTR [eax]
c0026309:	83 c0 08             	add    eax,0x8
c002630c:	8b 00                	mov    eax,DWORD PTR [eax]
c002630e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026313:	6a 00                	push   0x0
c0026315:	6a 00                	push   0x0
c0026317:	52                   	push   edx
c0026318:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002631c:	ff d0                	call   eax
c002631e:	83 c4 10             	add    esp,0x10
c0026321:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026325:	e9 6b ff ff ff       	jmp    c0026295 <APIC::APIC()+0x39>
c002632a:	c6 05 20 33 03 c0 01 	mov    BYTE PTR ds:0xc0033320,0x1
c0026331:	90                   	nop
c0026332:	83 c4 18             	add    esp,0x18
c0026335:	5b                   	pop    ebx
c0026336:	c3                   	ret    
c0026337:	90                   	nop

c0026338 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026338:	55                   	push   ebp
c0026339:	89 e5                	mov    ebp,esp
c002633b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002633e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026344:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026347:	72 1d                	jb     c0026366 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002634c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026355:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002635b:	01 d0                	add    eax,edx
c002635d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026360:	73 04                	jae    c0026366 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026362:	b0 01                	mov    al,0x1
c0026364:	eb 02                	jmp    c0026368 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026366:	b0 00                	mov    al,0x0
c0026368:	5d                   	pop    ebp
c0026369:	c3                   	ret    

c002636a <IOAPIC::read(int)>:
c002636a:	55                   	push   ebp
c002636b:	89 e5                	mov    ebp,esp
c002636d:	83 ec 10             	sub    esp,0x10
c0026370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026373:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026379:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002637c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002637f:	0f b6 d0             	movzx  edx,al
c0026382:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026385:	89 10                	mov    DWORD PTR [eax],edx
c0026387:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002638a:	83 c0 10             	add    eax,0x10
c002638d:	8b 00                	mov    eax,DWORD PTR [eax]
c002638f:	c9                   	leave  
c0026390:	c3                   	ret    
c0026391:	90                   	nop

c0026392 <IOAPIC::open(int, int, void*)>:
c0026392:	55                   	push   ebp
c0026393:	89 e5                	mov    ebp,esp
c0026395:	57                   	push   edi
c0026396:	56                   	push   esi
c0026397:	53                   	push   ebx
c0026398:	83 ec 0c             	sub    esp,0xc
c002639b:	83 ec 0c             	sub    esp,0xc
c002639e:	68 7f dc 02 c0       	push   0xc002dc7f
c00263a3:	e8 9b ca fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c00263a8:	83 c4 10             	add    esp,0x10
c00263ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00263b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00263b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00263c0:	8b 14 85 40 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce6c0]
c00263c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00263d9:	8b 14 85 c0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce640]
c00263e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263e3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00263e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00263f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263fb:	0f b6 f8             	movzx  edi,al
c00263fe:	89 d0                	mov    eax,edx
c0026400:	ba 00 00 00 00       	mov    edx,0x0
c0026405:	89 c1                	mov    ecx,eax
c0026407:	80 e5 ff             	and    ch,0xff
c002640a:	89 cb                	mov    ebx,ecx
c002640c:	0f b6 f2             	movzx  esi,dl
c002640f:	89 d8                	mov    eax,ebx
c0026411:	89 f2                	mov    edx,esi
c0026413:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026416:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026419:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002641d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026421:	83 e0 00             	and    eax,0x0
c0026424:	09 d0                	or     eax,edx
c0026426:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002642a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002642d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026433:	8d 50 01             	lea    edx,[eax+0x1]
c0026436:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026439:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002643f:	0f b6 d0             	movzx  edx,al
c0026442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026445:	83 c2 08             	add    edx,0x8
c0026448:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002644c:	0f b6 c9             	movzx  ecx,cl
c002644f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026455:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026459:	83 ec 08             	sub    esp,0x8
c002645c:	6a 01                	push   0x1
c002645e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026461:	e8 04 ff ff ff       	call   c002636a <IOAPIC::read(int)>
c0026466:	83 c4 10             	add    esp,0x10
c0026469:	c1 f8 10             	sar    eax,0x10
c002646c:	0f b6 c0             	movzx  eax,al
c002646f:	8d 50 01             	lea    edx,[eax+0x1]
c0026472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026475:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002647b:	b8 00 00 00 00       	mov    eax,0x0
c0026480:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026483:	5b                   	pop    ebx
c0026484:	5e                   	pop    esi
c0026485:	5f                   	pop    edi
c0026486:	5d                   	pop    ebp
c0026487:	c3                   	ret    

c0026488 <IOAPIC::write(int, int)>:
c0026488:	55                   	push   ebp
c0026489:	89 e5                	mov    ebp,esp
c002648b:	83 ec 10             	sub    esp,0x10
c002648e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026491:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026497:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002649a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002649d:	0f b6 d0             	movzx  edx,al
c00264a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00264a3:	89 10                	mov    DWORD PTR [eax],edx
c00264a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00264a8:	8d 50 10             	lea    edx,[eax+0x10]
c00264ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00264ae:	89 02                	mov    DWORD PTR [edx],eax
c00264b0:	90                   	nop
c00264b1:	c9                   	leave  
c00264b2:	c3                   	ret    
c00264b3:	90                   	nop

c00264b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00264b4:	55                   	push   ebp
c00264b5:	89 e5                	mov    ebp,esp
c00264b7:	53                   	push   ebx
c00264b8:	83 ec 2c             	sub    esp,0x2c
c00264bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264be:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00264c1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00264c4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00264c7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00264ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00264cd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00264d0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264d3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00264d6:	88 d8                	mov    al,bl
c00264d8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00264db:	88 c8                	mov    al,cl
c00264dd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264e0:	88 d0                	mov    al,dl
c00264e2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00264e5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00264e9:	83 c0 08             	add    eax,0x8
c00264ec:	01 c0                	add    eax,eax
c00264ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00264f1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00264f5:	83 c0 08             	add    eax,0x8
c00264f8:	01 c0                	add    eax,eax
c00264fa:	40                   	inc    eax
c00264fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026501:	50                   	push   eax
c0026502:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026505:	e8 60 fe ff ff       	call   c002636a <IOAPIC::read(int)>
c002650a:	83 c4 08             	add    esp,0x8
c002650d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026510:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026517:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002651a:	c1 e0 18             	shl    eax,0x18
c002651d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026520:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026523:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026526:	52                   	push   edx
c0026527:	50                   	push   eax
c0026528:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002652b:	e8 58 ff ff ff       	call   c0026488 <IOAPIC::write(int, int)>
c0026530:	83 c4 0c             	add    esp,0xc
c0026533:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026536:	50                   	push   eax
c0026537:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002653a:	e8 2b fe ff ff       	call   c002636a <IOAPIC::read(int)>
c002653f:	83 c4 08             	add    esp,0x8
c0026542:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026545:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002654c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026553:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002655a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002655e:	74 09                	je     c0026569 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026560:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026567:	eb 07                	jmp    c0026570 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026569:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026570:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026574:	74 09                	je     c002657f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026576:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002657d:	eb 07                	jmp    c0026586 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002657f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026586:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002658d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026591:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026594:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026597:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002659a:	52                   	push   edx
c002659b:	50                   	push   eax
c002659c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002659f:	e8 e4 fe ff ff       	call   c0026488 <IOAPIC::write(int, int)>
c00265a4:	83 c4 0c             	add    esp,0xc
c00265a7:	90                   	nop
c00265a8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00265ab:	c9                   	leave  
c00265ac:	c3                   	ret    
c00265ad:	90                   	nop

c00265ae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00265ae:	55                   	push   ebp
c00265af:	89 e5                	mov    ebp,esp
c00265b1:	57                   	push   edi
c00265b2:	56                   	push   esi
c00265b3:	53                   	push   ebx
c00265b4:	83 ec 2c             	sub    esp,0x2c
c00265b7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00265ba:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00265bd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00265c1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00265c5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00265c9:	74 5a                	je     c0026625 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00265cb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00265cf:	7f 44                	jg     c0026615 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00265d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265d4:	05 c0 e1 02 c0       	add    eax,0xc002e1c0
c00265d9:	8a 00                	mov    al,BYTE PTR [eax]
c00265db:	0f b6 c0             	movzx  eax,al
c00265de:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00265e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265e4:	66 8b 84 00 e0 18 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce720]
c00265ec:	0f b7 c0             	movzx  eax,ax
c00265ef:	83 e0 02             	and    eax,0x2
c00265f2:	85 c0                	test   eax,eax
c00265f4:	74 04                	je     c00265fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00265f6:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00265fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265fd:	66 8b 84 00 e0 18 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce720]
c0026605:	0f b7 c0             	movzx  eax,ax
c0026608:	83 e0 08             	and    eax,0x8
c002660b:	85 c0                	test   eax,eax
c002660d:	74 16                	je     c0026625 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002660f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026613:	eb 10                	jmp    c0026625 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026615:	83 ec 0c             	sub    esp,0xc
c0026618:	68 90 dc 02 c0       	push   0xc002dc90
c002661d:	e8 eb 41 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0026622:	83 c4 10             	add    esp,0x10
c0026625:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026629:	a1 e0 32 03 c0       	mov    eax,ds:0xc00332e0
c002662e:	83 ec 08             	sub    esp,0x8
c0026631:	50                   	push   eax
c0026632:	68 c8 dc 02 c0       	push   0xc002dcc8
c0026637:	e8 07 c8 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002663c:	83 c4 10             	add    esp,0x10
c002663f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026646:	a1 e0 32 03 c0       	mov    eax,ds:0xc00332e0
c002664b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002664e:	7d 67                	jge    c00266b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026650:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026653:	8b 04 85 00 33 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccd00]
c002665a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002665d:	83 ec 08             	sub    esp,0x8
c0026660:	52                   	push   edx
c0026661:	50                   	push   eax
c0026662:	e8 d1 fc ff ff       	call   c0026338 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026667:	83 c4 10             	add    esp,0x10
c002666a:	84 c0                	test   al,al
c002666c:	74 44                	je     c00266b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002666e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026671:	8b 1c 85 00 33 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccd00]
c0026678:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002667c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002667f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026683:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026686:	83 c0 20             	add    eax,0x20
c0026689:	0f b6 f0             	movzx  esi,al
c002668c:	b8 00 00 00 00       	mov    eax,0x0
c0026691:	99                   	cdq    
c0026692:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026695:	0f b6 c9             	movzx  ecx,cl
c0026698:	83 ec 04             	sub    esp,0x4
c002669b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002669e:	57                   	push   edi
c002669f:	56                   	push   esi
c00266a0:	52                   	push   edx
c00266a1:	50                   	push   eax
c00266a2:	51                   	push   ecx
c00266a3:	53                   	push   ebx
c00266a4:	e8 0b fe ff ff       	call   c00264b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00266a9:	83 c4 20             	add    esp,0x20
c00266ac:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00266b0:	eb 05                	jmp    c00266b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00266b2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00266b5:	eb 8f                	jmp    c0026646 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00266b7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00266ba:	83 f0 01             	xor    eax,0x1
c00266bd:	84 c0                	test   al,al
c00266bf:	74 10                	je     c00266d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00266c1:	83 ec 0c             	sub    esp,0xc
c00266c4:	68 df dc 02 c0       	push   0xc002dcdf
c00266c9:	e8 3f 41 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00266ce:	83 c4 10             	add    esp,0x10
c00266d1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00266d5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00266dc:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00266e0:	7f 65                	jg     c0026747 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00266e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266e8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00266ef:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00266f2:	01 ca                	add    edx,ecx
c00266f4:	83 c2 54             	add    edx,0x54
c00266f7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00266fb:	85 c0                	test   eax,eax
c00266fd:	75 43                	jne    c0026742 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00266ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026702:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026705:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002670c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002670f:	01 ca                	add    edx,ecx
c0026711:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026714:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026717:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002671b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002671e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026721:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026728:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002672b:	01 ca                	add    edx,ecx
c002672d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026733:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026736:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002673a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002673d:	83 e8 20             	sub    eax,0x20
c0026740:	eb 1a                	jmp    c002675c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026742:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026745:	eb 95                	jmp    c00266dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026747:	83 ec 0c             	sub    esp,0xc
c002674a:	68 ec dc 02 c0       	push   0xc002dcec
c002674f:	e8 b9 40 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0026754:	83 c4 10             	add    esp,0x10
c0026757:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002675c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002675f:	5b                   	pop    ebx
c0026760:	5e                   	pop    esi
c0026761:	5f                   	pop    edi
c0026762:	5d                   	pop    ebp
c0026763:	c3                   	ret    

c0026764 <PIC::disable()>:
c0026764:	55                   	push   ebp
c0026765:	89 e5                	mov    ebp,esp
c0026767:	83 ec 10             	sub    esp,0x10
c002676a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026770:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026774:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026777:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002677b:	ee                   	out    dx,al
c002677c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026782:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026786:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026789:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002678d:	ee                   	out    dx,al
c002678e:	90                   	nop
c002678f:	c9                   	leave  
c0026790:	c3                   	ret    
c0026791:	90                   	nop

c0026792 <PIC::close(int, int, void*)>:
c0026792:	55                   	push   ebp
c0026793:	89 e5                	mov    ebp,esp
c0026795:	83 ec 08             	sub    esp,0x8
c0026798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002679b:	8b 00                	mov    eax,DWORD PTR [eax]
c002679d:	83 c0 3c             	add    eax,0x3c
c00267a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00267a2:	83 ec 0c             	sub    esp,0xc
c00267a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267a8:	ff d0                	call   eax
c00267aa:	83 c4 10             	add    esp,0x10
c00267ad:	b8 00 00 00 00       	mov    eax,0x0
c00267b2:	c9                   	leave  
c00267b3:	c3                   	ret    

c00267b4 <PIC::PIC()>:
c00267b4:	83 ec 0c             	sub    esp,0xc
c00267b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267bb:	83 ec 08             	sub    esp,0x8
c00267be:	68 98 dd 02 c0       	push   0xc002dd98
c00267c3:	50                   	push   eax
c00267c4:	e8 05 e4 fe ff       	call   c0014bce <InterruptController::InterruptController(char const*)>
c00267c9:	83 c4 10             	add    esp,0x10
c00267cc:	ba c4 dd 02 c0       	mov    edx,0xc002ddc4
c00267d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267d5:	89 10                	mov    DWORD PTR [eax],edx
c00267d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267e1:	0f b6 d0             	movzx  edx,al
c00267e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267e8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00267ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267f9:	0f b6 d0             	movzx  edx,al
c00267fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026800:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026809:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002680f:	8d 50 01             	lea    edx,[eax+0x1]
c0026812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026816:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002681c:	0f b6 d0             	movzx  edx,al
c002681f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026823:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026827:	83 e1 3f             	and    ecx,0x3f
c002682a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002682e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026832:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026838:	0f b6 d0             	movzx  edx,al
c002683b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002683f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002684a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026850:	0f b6 d0             	movzx  edx,al
c0026853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026857:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002685c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026860:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026866:	8d 50 01             	lea    edx,[eax+0x1]
c0026869:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002686d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026873:	0f b6 d0             	movzx  edx,al
c0026876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002687a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002687e:	83 e1 3f             	and    ecx,0x3f
c0026881:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026885:	90                   	nop
c0026886:	83 c4 0c             	add    esp,0xc
c0026889:	c3                   	ret    

c002688a <PIC::ioWait()>:
c002688a:	eb 00                	jmp    c002688c <PIC::ioWait()+0x2>
c002688c:	eb 00                	jmp    c002688e <PIC::ioWait()+0x4>
c002688e:	90                   	nop
c002688f:	c3                   	ret    

c0026890 <PIC::getIRQReg(int)>:
c0026890:	55                   	push   ebp
c0026891:	89 e5                	mov    ebp,esp
c0026893:	83 ec 10             	sub    esp,0x10
c0026896:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026899:	0f b6 c0             	movzx  eax,al
c002689c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00268a2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00268a5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00268a8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00268ac:	ee                   	out    dx,al
c00268ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268b0:	0f b6 c0             	movzx  eax,al
c00268b3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00268b9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00268bc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00268bf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00268c3:	ee                   	out    dx,al
c00268c4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00268ca:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00268ce:	89 c2                	mov    edx,eax
c00268d0:	ec                   	in     al,dx
c00268d1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00268d4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00268d7:	0f b6 c0             	movzx  eax,al
c00268da:	c1 e0 08             	shl    eax,0x8
c00268dd:	89 c1                	mov    ecx,eax
c00268df:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00268e5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00268e9:	89 c2                	mov    edx,eax
c00268eb:	ec                   	in     al,dx
c00268ec:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00268ef:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00268f2:	0f b6 c0             	movzx  eax,al
c00268f5:	09 c8                	or     eax,ecx
c00268f7:	c9                   	leave  
c00268f8:	c3                   	ret    
c00268f9:	90                   	nop

c00268fa <PIC::eoi(unsigned char)>:
c00268fa:	55                   	push   ebp
c00268fb:	89 e5                	mov    ebp,esp
c00268fd:	83 ec 14             	sub    esp,0x14
c0026900:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026903:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026906:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002690a:	75 1e                	jne    c002692a <PIC::eoi(unsigned char)+0x30>
c002690c:	6a 0b                	push   0xb
c002690e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026911:	e8 7a ff ff ff       	call   c0026890 <PIC::getIRQReg(int)>
c0026916:	83 c4 08             	add    esp,0x8
c0026919:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002691d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026921:	25 80 00 00 00       	and    eax,0x80
c0026926:	85 c0                	test   eax,eax
c0026928:	74 5f                	je     c0026989 <PIC::eoi(unsigned char)+0x8f>
c002692a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002692e:	75 2d                	jne    c002695d <PIC::eoi(unsigned char)+0x63>
c0026930:	6a 0b                	push   0xb
c0026932:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026935:	e8 56 ff ff ff       	call   c0026890 <PIC::getIRQReg(int)>
c002693a:	83 c4 08             	add    esp,0x8
c002693d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026941:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026944:	66 85 c0             	test   ax,ax
c0026947:	78 14                	js     c002695d <PIC::eoi(unsigned char)+0x63>
c0026949:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002694f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026953:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026956:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002695a:	ee                   	out    dx,al
c002695b:	eb 2d                	jmp    c002698a <PIC::eoi(unsigned char)+0x90>
c002695d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026961:	76 12                	jbe    c0026975 <PIC::eoi(unsigned char)+0x7b>
c0026963:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026969:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002696d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026970:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026974:	ee                   	out    dx,al
c0026975:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002697b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002697f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026982:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026986:	ee                   	out    dx,al
c0026987:	eb 01                	jmp    c002698a <PIC::eoi(unsigned char)+0x90>
c0026989:	90                   	nop
c002698a:	c9                   	leave  
c002698b:	c3                   	ret    

c002698c <PIC::remap()>:
c002698c:	55                   	push   ebp
c002698d:	89 e5                	mov    ebp,esp
c002698f:	83 ec 48             	sub    esp,0x48
c0026992:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026999:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00269a0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00269a6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00269a9:	89 c2                	mov    edx,eax
c00269ab:	ec                   	in     al,dx
c00269ac:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00269af:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00269b2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00269b5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00269bb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00269be:	89 c2                	mov    edx,eax
c00269c0:	ec                   	in     al,dx
c00269c1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00269c4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00269c7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00269ca:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00269d0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00269d4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00269d7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00269da:	ee                   	out    dx,al
c00269db:	83 ec 0c             	sub    esp,0xc
c00269de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269e1:	e8 a4 fe ff ff       	call   c002688a <PIC::ioWait()>
c00269e6:	83 c4 10             	add    esp,0x10
c00269e9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00269ef:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00269f3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00269f6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00269f9:	ee                   	out    dx,al
c00269fa:	83 ec 0c             	sub    esp,0xc
c00269fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a00:	e8 85 fe ff ff       	call   c002688a <PIC::ioWait()>
c0026a05:	83 c4 10             	add    esp,0x10
c0026a08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026a0b:	0f b6 c0             	movzx  eax,al
c0026a0e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026a14:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026a17:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026a1a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026a1d:	ee                   	out    dx,al
c0026a1e:	83 ec 0c             	sub    esp,0xc
c0026a21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a24:	e8 61 fe ff ff       	call   c002688a <PIC::ioWait()>
c0026a29:	83 c4 10             	add    esp,0x10
c0026a2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a2f:	0f b6 c0             	movzx  eax,al
c0026a32:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026a38:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026a3b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026a3e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026a41:	ee                   	out    dx,al
c0026a42:	83 ec 0c             	sub    esp,0xc
c0026a45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a48:	e8 3d fe ff ff       	call   c002688a <PIC::ioWait()>
c0026a4d:	83 c4 10             	add    esp,0x10
c0026a50:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026a56:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026a5a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026a5d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026a60:	ee                   	out    dx,al
c0026a61:	83 ec 0c             	sub    esp,0xc
c0026a64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a67:	e8 1e fe ff ff       	call   c002688a <PIC::ioWait()>
c0026a6c:	83 c4 10             	add    esp,0x10
c0026a6f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026a75:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026a79:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026a7c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a7f:	ee                   	out    dx,al
c0026a80:	83 ec 0c             	sub    esp,0xc
c0026a83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a86:	e8 ff fd ff ff       	call   c002688a <PIC::ioWait()>
c0026a8b:	83 c4 10             	add    esp,0x10
c0026a8e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026a94:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026a98:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026a9b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026a9e:	ee                   	out    dx,al
c0026a9f:	83 ec 0c             	sub    esp,0xc
c0026aa2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026aa5:	e8 e0 fd ff ff       	call   c002688a <PIC::ioWait()>
c0026aaa:	83 c4 10             	add    esp,0x10
c0026aad:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026ab3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026ab7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026aba:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026abd:	ee                   	out    dx,al
c0026abe:	83 ec 0c             	sub    esp,0xc
c0026ac1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ac4:	e8 c1 fd ff ff       	call   c002688a <PIC::ioWait()>
c0026ac9:	83 c4 10             	add    esp,0x10
c0026acc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026ad0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026ad6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026ad9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026adc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026adf:	ee                   	out    dx,al
c0026ae0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026ae4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026aea:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026aed:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026af0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026af3:	ee                   	out    dx,al
c0026af4:	90                   	nop
c0026af5:	c9                   	leave  
c0026af6:	c3                   	ret    
c0026af7:	90                   	nop

c0026af8 <PIC::open(int, int, void*)>:
c0026af8:	55                   	push   ebp
c0026af9:	89 e5                	mov    ebp,esp
c0026afb:	83 ec 18             	sub    esp,0x18
c0026afe:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026b04:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026b08:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026b0b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026b0f:	ee                   	out    dx,al
c0026b10:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026b16:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026b1a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026b1d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026b21:	ee                   	out    dx,al
c0026b22:	83 ec 0c             	sub    esp,0xc
c0026b25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b28:	e8 5f fe ff ff       	call   c002698c <PIC::remap()>
c0026b2d:	83 c4 10             	add    esp,0x10
c0026b30:	b8 00 00 00 00       	mov    eax,0x0
c0026b35:	c9                   	leave  
c0026b36:	c3                   	ret    
c0026b37:	90                   	nop

c0026b38 <APICTimer::close(int, int, void*)>:
c0026b38:	b8 00 00 00 00       	mov    eax,0x0
c0026b3d:	c3                   	ret    

c0026b3e <apicTimerHandler(regs*, void*)>:
c0026b3e:	83 ec 0c             	sub    esp,0xc
c0026b41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b47:	99                   	cdq    
c0026b48:	52                   	push   edx
c0026b49:	50                   	push   eax
c0026b4a:	6a 00                	push   0x0
c0026b4c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026b51:	e8 8e 07 00 00       	call   c00272e4 <__udivdi3>
c0026b56:	83 c4 10             	add    esp,0x10
c0026b59:	83 ec 08             	sub    esp,0x8
c0026b5c:	52                   	push   edx
c0026b5d:	50                   	push   eax
c0026b5e:	e8 20 02 ff ff       	call   c0016d83 <timerHandler(unsigned long long)>
c0026b63:	83 c4 10             	add    esp,0x10
c0026b66:	90                   	nop
c0026b67:	83 c4 0c             	add    esp,0xc
c0026b6a:	c3                   	ret    
c0026b6b:	90                   	nop

c0026b6c <APICTimer::write(int)>:
c0026b6c:	53                   	push   ebx
c0026b6d:	83 ec 28             	sub    esp,0x28
c0026b70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026b78:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026b7e:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0026b83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b89:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b8f:	83 ec 0c             	sub    esp,0xc
c0026b92:	50                   	push   eax
c0026b93:	e8 de f4 ff ff       	call   c0026076 <APIC::getBase()>
c0026b98:	83 c4 10             	add    esp,0x10
c0026b9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026b9f:	a1 f0 f5 02 c0       	mov    eax,ds:0xc002f5f0
c0026ba4:	8b 15 f4 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f5f4
c0026baa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026bae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026bb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bb6:	05 e0 03 00 00       	add    eax,0x3e0
c0026bbb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026bc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bc5:	05 80 03 00 00       	add    eax,0x380
c0026bca:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026bd0:	fb                   	sti    
c0026bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026bd9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026bde:	83 d2 00             	adc    edx,0x0
c0026be1:	89 c1                	mov    ecx,eax
c0026be3:	89 d3                	mov    ebx,edx
c0026be5:	a1 f0 f5 02 c0       	mov    eax,ds:0xc002f5f0
c0026bea:	8b 15 f4 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f5f4
c0026bf0:	39 c8                	cmp    eax,ecx
c0026bf2:	89 d0                	mov    eax,edx
c0026bf4:	19 d8                	sbb    eax,ebx
c0026bf6:	73 02                	jae    c0026bfa <APICTimer::write(int)+0x8e>
c0026bf8:	eb d7                	jmp    c0026bd1 <APICTimer::write(int)+0x65>
c0026bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bfe:	05 20 03 00 00       	add    eax,0x320
c0026c03:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026c09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c0d:	05 90 03 00 00       	add    eax,0x390
c0026c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c14:	f7 d0                	not    eax
c0026c16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c1a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026c1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c22:	ba 00 00 00 00       	mov    edx,0x0
c0026c27:	f7 f3                	div    ebx
c0026c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026c31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026c37:	0d 00 00 02 00       	or     eax,0x20000
c0026c3c:	89 c2                	mov    edx,eax
c0026c3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c42:	05 20 03 00 00       	add    eax,0x320
c0026c47:	89 10                	mov    DWORD PTR [eax],edx
c0026c49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c4d:	05 e0 03 00 00       	add    eax,0x3e0
c0026c52:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026c58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c5c:	05 80 03 00 00       	add    eax,0x380
c0026c61:	89 c2                	mov    edx,eax
c0026c63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026c67:	89 02                	mov    DWORD PTR [edx],eax
c0026c69:	90                   	nop
c0026c6a:	83 c4 28             	add    esp,0x28
c0026c6d:	5b                   	pop    ebx
c0026c6e:	c3                   	ret    
c0026c6f:	90                   	nop

c0026c70 <APICTimer::open(int, int, void*)>:
c0026c70:	57                   	push   edi
c0026c71:	56                   	push   esi
c0026c72:	53                   	push   ebx
c0026c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c79:	83 c0 24             	add    eax,0x24
c0026c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c7e:	83 ec 08             	sub    esp,0x8
c0026c81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c89:	ff d0                	call   eax
c0026c8b:	83 c4 10             	add    esp,0x10
c0026c8e:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0026c93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026c99:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026c9f:	83 ec 0c             	sub    esp,0xc
c0026ca2:	50                   	push   eax
c0026ca3:	e8 ce f3 ff ff       	call   c0026076 <APIC::getBase()>
c0026ca8:	83 c4 10             	add    esp,0x10
c0026cab:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cb5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026cbb:	0f b6 f8             	movzx  edi,al
c0026cbe:	89 d0                	mov    eax,edx
c0026cc0:	ba 00 00 00 00       	mov    edx,0x0
c0026cc5:	89 c1                	mov    ecx,eax
c0026cc7:	80 e5 ff             	and    ch,0xff
c0026cca:	89 cb                	mov    ebx,ecx
c0026ccc:	0f b6 f2             	movzx  esi,dl
c0026ccf:	89 d8                	mov    eax,ebx
c0026cd1:	89 f2                	mov    edx,esi
c0026cd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026cd7:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026cda:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026cde:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026ce2:	83 e0 00             	and    eax,0x0
c0026ce5:	09 d0                	or     eax,edx
c0026ce7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cef:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026cf5:	8d 50 01             	lea    edx,[eax+0x1]
c0026cf8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026cfc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026d02:	0f b6 d0             	movzx  edx,al
c0026d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d09:	83 c2 08             	add    edx,0x8
c0026d0c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026d10:	0f b6 c9             	movzx  ecx,cl
c0026d13:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026d19:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026d25:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026d33:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026d39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026d3d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026d43:	83 ec 0c             	sub    esp,0xc
c0026d46:	51                   	push   ecx
c0026d47:	6a 01                	push   0x1
c0026d49:	68 3e 6b 02 c0       	push   0xc0026b3e
c0026d4e:	52                   	push   edx
c0026d4f:	50                   	push   eax
c0026d50:	e8 93 d4 fe ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d55:	83 c4 20             	add    esp,0x20
c0026d58:	89 c2                	mov    edx,eax
c0026d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d64:	b8 00 00 00 00       	mov    eax,0x0
c0026d69:	5b                   	pop    ebx
c0026d6a:	5e                   	pop    esi
c0026d6b:	5f                   	pop    edi
c0026d6c:	c3                   	ret    
c0026d6d:	90                   	nop

c0026d6e <APICTimer::APICTimer()>:
c0026d6e:	83 ec 0c             	sub    esp,0xc
c0026d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d75:	83 ec 08             	sub    esp,0x8
c0026d78:	68 04 de 02 c0       	push   0xc002de04
c0026d7d:	50                   	push   eax
c0026d7e:	e8 71 ff fe ff       	call   c0016cf4 <Timer::Timer(char const*)>
c0026d83:	83 c4 10             	add    esp,0x10
c0026d86:	ba 18 de 02 c0       	mov    edx,0xc002de18
c0026d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d8f:	89 10                	mov    DWORD PTR [eax],edx
c0026d91:	90                   	nop
c0026d92:	83 c4 0c             	add    esp,0xc
c0026d95:	c3                   	ret    

c0026d96 <PIT::write(int)>:
c0026d96:	83 ec 10             	sub    esp,0x10
c0026d99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026da1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026dab:	a3 24 33 03 c0       	mov    ds:0xc0033324,eax
c0026db0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026db5:	99                   	cdq    
c0026db6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026dba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026dbe:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026dc5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026dca:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026dce:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026dd3:	ee                   	out    dx,al
c0026dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026dd8:	0f b6 c0             	movzx  eax,al
c0026ddb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026de2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026de6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026dea:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026def:	ee                   	out    dx,al
c0026df0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026df4:	c1 f8 08             	sar    eax,0x8
c0026df7:	0f b6 c0             	movzx  eax,al
c0026dfa:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026e01:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026e05:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026e09:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026e0e:	ee                   	out    dx,al
c0026e0f:	90                   	nop
c0026e10:	83 c4 10             	add    esp,0x10
c0026e13:	c3                   	ret    

c0026e14 <pitHandler(regs*, void*)>:
c0026e14:	83 ec 0c             	sub    esp,0xc
c0026e17:	a1 24 33 03 c0       	mov    eax,ds:0xc0033324
c0026e1c:	99                   	cdq    
c0026e1d:	52                   	push   edx
c0026e1e:	50                   	push   eax
c0026e1f:	6a 00                	push   0x0
c0026e21:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026e26:	e8 b9 04 00 00       	call   c00272e4 <__udivdi3>
c0026e2b:	83 c4 10             	add    esp,0x10
c0026e2e:	83 ec 08             	sub    esp,0x8
c0026e31:	52                   	push   edx
c0026e32:	50                   	push   eax
c0026e33:	e8 4b ff fe ff       	call   c0016d83 <timerHandler(unsigned long long)>
c0026e38:	83 c4 10             	add    esp,0x10
c0026e3b:	90                   	nop
c0026e3c:	83 c4 0c             	add    esp,0xc
c0026e3f:	c3                   	ret    

c0026e40 <PIT::open(int, int, void*)>:
c0026e40:	83 ec 0c             	sub    esp,0xc
c0026e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e49:	83 c0 24             	add    eax,0x24
c0026e4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e4e:	83 ec 08             	sub    esp,0x8
c0026e51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e59:	ff d0                	call   eax
c0026e5b:	83 c4 10             	add    esp,0x10
c0026e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e62:	83 ec 0c             	sub    esp,0xc
c0026e65:	6a 00                	push   0x0
c0026e67:	6a 01                	push   0x1
c0026e69:	68 14 6e 02 c0       	push   0xc0026e14
c0026e6e:	6a 00                	push   0x0
c0026e70:	50                   	push   eax
c0026e71:	e8 72 d3 fe ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026e76:	83 c4 20             	add    esp,0x20
c0026e79:	89 c2                	mov    edx,eax
c0026e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e7f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026e85:	b8 00 00 00 00       	mov    eax,0x0
c0026e8a:	83 c4 0c             	add    esp,0xc
c0026e8d:	c3                   	ret    

c0026e8e <PIT::close(int, int, void*)>:
c0026e8e:	83 ec 0c             	sub    esp,0xc
c0026e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e95:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ea3:	6a 01                	push   0x1
c0026ea5:	68 14 6e 02 c0       	push   0xc0026e14
c0026eaa:	6a 00                	push   0x0
c0026eac:	50                   	push   eax
c0026ead:	e8 74 d3 fe ff       	call   c0014226 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026eb2:	83 c4 10             	add    esp,0x10
c0026eb5:	b8 00 00 00 00       	mov    eax,0x0
c0026eba:	83 c4 0c             	add    esp,0xc
c0026ebd:	c3                   	ret    

c0026ebe <PIT::PIT()>:
c0026ebe:	83 ec 0c             	sub    esp,0xc
c0026ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ec5:	83 ec 08             	sub    esp,0x8
c0026ec8:	68 40 de 02 c0       	push   0xc002de40
c0026ecd:	50                   	push   eax
c0026ece:	e8 21 fe fe ff       	call   c0016cf4 <Timer::Timer(char const*)>
c0026ed3:	83 c4 10             	add    esp,0x10
c0026ed6:	ba 68 de 02 c0       	mov    edx,0xc002de68
c0026edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026edf:	89 10                	mov    DWORD PTR [eax],edx
c0026ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ee5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026eeb:	0f b6 d0             	movzx  edx,al
c0026eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef2:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026efd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026f03:	0f b6 d0             	movzx  edx,al
c0026f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f0a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026f19:	8d 50 01             	lea    edx,[eax+0x1]
c0026f1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026f20:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026f26:	0f b6 d0             	movzx  edx,al
c0026f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f2d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026f31:	83 e1 3f             	and    ecx,0x3f
c0026f34:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026f38:	90                   	nop
c0026f39:	83 c4 0c             	add    esp,0xc
c0026f3c:	c3                   	ret    
c0026f3d:	66 90                	xchg   ax,ax
c0026f3f:	90                   	nop

c0026f40 <avxDetect>:
c0026f40:	b8 00 00 00 00       	mov    eax,0x0
c0026f45:	c3                   	ret    

c0026f46 <avxSave>:
c0026f46:	c3                   	ret    

c0026f47 <avxLoad>:
c0026f47:	c3                   	ret    

c0026f48 <avxInit>:
c0026f48:	c3                   	ret    

c0026f49 <avxClose>:
c0026f49:	c3                   	ret    

c0026f4a <wouldSheSayYes>:
c0026f4a:	c3                   	ret    
c0026f4b:	49                   	dec    ecx
c0026f4c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026f50:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026f54:	75 20                	jne    c0026f76 <sseDetect.noSSE+0x1>
c0026f56:	4e                   	dec    esi
c0026f57:	79 61                	jns    c0026fba <x87Detect+0x14>
c0026f59:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026f5e:	66 90                	xchg   ax,ax

c0026f60 <absolutelyNoChanceInHell>:
c0026f60:	b8 01 00 00 00       	mov    eax,0x1
c0026f65:	0f a2                	cpuid  
c0026f67:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026f6d:	74 06                	je     c0026f75 <sseDetect.noSSE>
c0026f6f:	b8 01 00 00 00       	mov    eax,0x1
c0026f74:	c3                   	ret    

c0026f75 <sseDetect.noSSE>:
c0026f75:	31 c0                	xor    eax,eax
c0026f77:	c3                   	ret    

c0026f78 <sseSave>:
c0026f78:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026f7d:	c3                   	ret    

c0026f7e <sseLoad>:
c0026f7e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026f83:	c3                   	ret    

c0026f84 <sseInit>:
c0026f84:	e8 49 00 00 00       	call   c0026fd2 <x87Init>
c0026f89:	0f 20 e0             	mov    eax,cr4
c0026f8c:	66 0d 00 06          	or     ax,0x600
c0026f90:	0f 22 e0             	mov    cr4,eax
c0026f93:	c3                   	ret    

c0026f94 <sseClose>:
c0026f94:	c3                   	ret    
c0026f95:	66 90                	xchg   ax,ax
c0026f97:	66 90                	xchg   ax,ax
c0026f99:	66 90                	xchg   ax,ax
c0026f9b:	66 90                	xchg   ax,ax
c0026f9d:	66 90                	xchg   ax,ax
c0026f9f:	90                   	nop

c0026fa0 <value_37F>:
c0026fa0:	7f 03                	jg     c0026fa5 <value_37A+0x1>

c0026fa2 <value_37E>:
c0026fa2:	7e 03                	jle    c0026fa7 <x87Detect+0x1>

c0026fa4 <value_37A>:
c0026fa4:	7a 03                	jp     c0026fa9 <x87Detect+0x3>

c0026fa6 <x87Detect>:
c0026fa6:	b8 01 00 00 00       	mov    eax,0x1
c0026fab:	0f a2                	cpuid  
c0026fad:	f7 c2 01 00 00 00    	test   edx,0x1
c0026fb3:	74 06                	je     c0026fbb <x87Detect.nox87>
c0026fb5:	b8 01 00 00 00       	mov    eax,0x1
c0026fba:	c3                   	ret    

c0026fbb <x87Detect.nox87>:
c0026fbb:	b8 00 00 00 00       	mov    eax,0x0
c0026fc0:	c3                   	ret    

c0026fc1 <x87Save>:
c0026fc1:	55                   	push   ebp
c0026fc2:	89 e5                	mov    ebp,esp
c0026fc4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026fc8:	c9                   	leave  
c0026fc9:	c3                   	ret    

c0026fca <x87Load>:
c0026fca:	55                   	push   ebp
c0026fcb:	89 e5                	mov    ebp,esp
c0026fcd:	dd 65 08             	frstor [ebp+0x8]
c0026fd0:	c9                   	leave  
c0026fd1:	c3                   	ret    

c0026fd2 <x87Init>:
c0026fd2:	9b db e3             	finit  
c0026fd5:	0f 20 c0             	mov    eax,cr0
c0026fd8:	66 25 fb ff          	and    ax,0xfffb
c0026fdc:	66 0d 22 00          	or     ax,0x22
c0026fe0:	0f 22 c0             	mov    cr0,eax
c0026fe3:	0f 06                	clts   
c0026fe5:	d9 2d a4 6f 02 c0    	fldcw  WORD PTR ds:0xc0026fa4
c0026feb:	c3                   	ret    

c0026fec <x87Close>:
c0026fec:	c3                   	ret    
c0026fed:	66 90                	xchg   ax,ax
c0026fef:	90                   	nop

c0026ff0 <__do_global_ctors_aux>:
c0026ff0:	a1 28 9c 02 c0       	mov    eax,ds:0xc0029c28
c0026ff5:	83 f8 ff             	cmp    eax,0xffffffff
c0026ff8:	74 1a                	je     c0027014 <__do_global_ctors_aux+0x24>
c0026ffa:	55                   	push   ebp
c0026ffb:	89 e5                	mov    ebp,esp
c0026ffd:	53                   	push   ebx
c0026ffe:	52                   	push   edx
c0026fff:	bb 28 9c 02 c0       	mov    ebx,0xc0029c28
c0027004:	ff d0                	call   eax
c0027006:	83 eb 04             	sub    ebx,0x4
c0027009:	8b 03                	mov    eax,DWORD PTR [ebx]
c002700b:	83 f8 ff             	cmp    eax,0xffffffff
c002700e:	75 f4                	jne    c0027004 <__do_global_ctors_aux+0x14>
c0027010:	58                   	pop    eax
c0027011:	5b                   	pop    ebx
c0027012:	5d                   	pop    ebp
c0027013:	c3                   	ret    
c0027014:	c3                   	ret    
c0027015:	66 90                	xchg   ax,ax
c0027017:	90                   	nop

c0027018 <__divdi3>:
c0027018:	55                   	push   ebp
c0027019:	57                   	push   edi
c002701a:	56                   	push   esi
c002701b:	53                   	push   ebx
c002701c:	83 ec 1c             	sub    esp,0x1c
c002701f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027023:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027027:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002702a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002702e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027032:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027036:	85 db                	test   ebx,ebx
c0027038:	0f 88 8e 00 00 00    	js     c00270cc <__divdi3+0xb4>
c002703e:	89 dd                	mov    ebp,ebx
c0027040:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027048:	89 d3                	mov    ebx,edx
c002704a:	85 d2                	test   edx,edx
c002704c:	79 0d                	jns    c002705b <__divdi3+0x43>
c002704e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027052:	f7 d8                	neg    eax
c0027054:	83 d2 00             	adc    edx,0x0
c0027057:	f7 da                	neg    edx
c0027059:	89 d3                	mov    ebx,edx
c002705b:	89 c7                	mov    edi,eax
c002705d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027060:	85 db                	test   ebx,ebx
c0027062:	75 48                	jne    c00270ac <__divdi3+0x94>
c0027064:	39 ef                	cmp    edi,ebp
c0027066:	76 24                	jbe    c002708c <__divdi3+0x74>
c0027068:	89 ea                	mov    edx,ebp
c002706a:	f7 f7                	div    edi
c002706c:	89 c1                	mov    ecx,eax
c002706e:	31 f6                	xor    esi,esi
c0027070:	89 c8                	mov    eax,ecx
c0027072:	89 f2                	mov    edx,esi
c0027074:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027078:	85 c9                	test   ecx,ecx
c002707a:	74 07                	je     c0027083 <__divdi3+0x6b>
c002707c:	f7 d8                	neg    eax
c002707e:	83 d2 00             	adc    edx,0x0
c0027081:	f7 da                	neg    edx
c0027083:	83 c4 1c             	add    esp,0x1c
c0027086:	5b                   	pop    ebx
c0027087:	5e                   	pop    esi
c0027088:	5f                   	pop    edi
c0027089:	5d                   	pop    ebp
c002708a:	c3                   	ret    
c002708b:	90                   	nop
c002708c:	85 ff                	test   edi,edi
c002708e:	75 0b                	jne    c002709b <__divdi3+0x83>
c0027090:	b8 01 00 00 00       	mov    eax,0x1
c0027095:	31 d2                	xor    edx,edx
c0027097:	f7 f3                	div    ebx
c0027099:	89 c7                	mov    edi,eax
c002709b:	31 d2                	xor    edx,edx
c002709d:	89 e8                	mov    eax,ebp
c002709f:	f7 f7                	div    edi
c00270a1:	89 c6                	mov    esi,eax
c00270a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00270a6:	f7 f7                	div    edi
c00270a8:	89 c1                	mov    ecx,eax
c00270aa:	eb c4                	jmp    c0027070 <__divdi3+0x58>
c00270ac:	39 eb                	cmp    ebx,ebp
c00270ae:	77 3c                	ja     c00270ec <__divdi3+0xd4>
c00270b0:	0f bd f3             	bsr    esi,ebx
c00270b3:	83 f6 1f             	xor    esi,0x1f
c00270b6:	75 40                	jne    c00270f8 <__divdi3+0xe0>
c00270b8:	39 eb                	cmp    ebx,ebp
c00270ba:	72 09                	jb     c00270c5 <__divdi3+0xad>
c00270bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00270bf:	0f 87 97 00 00 00    	ja     c002715c <__divdi3+0x144>
c00270c5:	b9 01 00 00 00       	mov    ecx,0x1
c00270ca:	eb a4                	jmp    c0027070 <__divdi3+0x58>
c00270cc:	f7 d9                	neg    ecx
c00270ce:	83 d3 00             	adc    ebx,0x0
c00270d1:	f7 db                	neg    ebx
c00270d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00270d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00270da:	89 dd                	mov    ebp,ebx
c00270dc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00270e4:	e9 5f ff ff ff       	jmp    c0027048 <__divdi3+0x30>
c00270e9:	8d 76 00             	lea    esi,[esi+0x0]
c00270ec:	31 f6                	xor    esi,esi
c00270ee:	31 c9                	xor    ecx,ecx
c00270f0:	e9 7b ff ff ff       	jmp    c0027070 <__divdi3+0x58>
c00270f5:	8d 76 00             	lea    esi,[esi+0x0]
c00270f8:	b8 20 00 00 00       	mov    eax,0x20
c00270fd:	29 f0                	sub    eax,esi
c00270ff:	89 f1                	mov    ecx,esi
c0027101:	d3 e3                	shl    ebx,cl
c0027103:	89 fa                	mov    edx,edi
c0027105:	88 c1                	mov    cl,al
c0027107:	d3 ea                	shr    edx,cl
c0027109:	09 da                	or     edx,ebx
c002710b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002710f:	89 f1                	mov    ecx,esi
c0027111:	d3 e7                	shl    edi,cl
c0027113:	89 eb                	mov    ebx,ebp
c0027115:	88 c1                	mov    cl,al
c0027117:	d3 eb                	shr    ebx,cl
c0027119:	89 f1                	mov    ecx,esi
c002711b:	d3 e5                	shl    ebp,cl
c002711d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027120:	88 c1                	mov    cl,al
c0027122:	d3 ea                	shr    edx,cl
c0027124:	09 d5                	or     ebp,edx
c0027126:	89 e8                	mov    eax,ebp
c0027128:	89 da                	mov    edx,ebx
c002712a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002712e:	89 d3                	mov    ebx,edx
c0027130:	89 c5                	mov    ebp,eax
c0027132:	f7 e7                	mul    edi
c0027134:	39 d3                	cmp    ebx,edx
c0027136:	72 18                	jb     c0027150 <__divdi3+0x138>
c0027138:	74 0a                	je     c0027144 <__divdi3+0x12c>
c002713a:	89 e9                	mov    ecx,ebp
c002713c:	31 f6                	xor    esi,esi
c002713e:	e9 2d ff ff ff       	jmp    c0027070 <__divdi3+0x58>
c0027143:	90                   	nop
c0027144:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027147:	89 f1                	mov    ecx,esi
c0027149:	d3 e7                	shl    edi,cl
c002714b:	39 c7                	cmp    edi,eax
c002714d:	73 eb                	jae    c002713a <__divdi3+0x122>
c002714f:	90                   	nop
c0027150:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027153:	31 f6                	xor    esi,esi
c0027155:	e9 16 ff ff ff       	jmp    c0027070 <__divdi3+0x58>
c002715a:	66 90                	xchg   ax,ax
c002715c:	31 c9                	xor    ecx,ecx
c002715e:	e9 0d ff ff ff       	jmp    c0027070 <__divdi3+0x58>
c0027163:	90                   	nop

c0027164 <__moddi3>:
c0027164:	55                   	push   ebp
c0027165:	57                   	push   edi
c0027166:	56                   	push   esi
c0027167:	53                   	push   ebx
c0027168:	83 ec 2c             	sub    esp,0x2c
c002716b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002716f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027173:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027177:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002717b:	85 db                	test   ebx,ebx
c002717d:	0f 88 85 00 00 00    	js     c0027208 <__moddi3+0xa4>
c0027183:	89 de                	mov    esi,ebx
c0027185:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002718d:	89 d7                	mov    edi,edx
c002718f:	85 d2                	test   edx,edx
c0027191:	79 09                	jns    c002719c <__moddi3+0x38>
c0027193:	f7 d8                	neg    eax
c0027195:	83 d2 00             	adc    edx,0x0
c0027198:	f7 da                	neg    edx
c002719a:	89 d7                	mov    edi,edx
c002719c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00271a0:	89 cd                	mov    ebp,ecx
c00271a2:	85 ff                	test   edi,edi
c00271a4:	75 52                	jne    c00271f8 <__moddi3+0x94>
c00271a6:	89 c3                	mov    ebx,eax
c00271a8:	39 f0                	cmp    eax,esi
c00271aa:	76 24                	jbe    c00271d0 <__moddi3+0x6c>
c00271ac:	89 c8                	mov    eax,ecx
c00271ae:	89 f2                	mov    edx,esi
c00271b0:	f7 f3                	div    ebx
c00271b2:	89 d6                	mov    esi,edx
c00271b4:	89 f0                	mov    eax,esi
c00271b6:	31 d2                	xor    edx,edx
c00271b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00271bc:	85 c9                	test   ecx,ecx
c00271be:	74 07                	je     c00271c7 <__moddi3+0x63>
c00271c0:	f7 d8                	neg    eax
c00271c2:	83 d2 00             	adc    edx,0x0
c00271c5:	f7 da                	neg    edx
c00271c7:	83 c4 2c             	add    esp,0x2c
c00271ca:	5b                   	pop    ebx
c00271cb:	5e                   	pop    esi
c00271cc:	5f                   	pop    edi
c00271cd:	5d                   	pop    ebp
c00271ce:	c3                   	ret    
c00271cf:	90                   	nop
c00271d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00271d4:	85 db                	test   ebx,ebx
c00271d6:	75 0d                	jne    c00271e5 <__moddi3+0x81>
c00271d8:	b8 01 00 00 00       	mov    eax,0x1
c00271dd:	31 d2                	xor    edx,edx
c00271df:	f7 f7                	div    edi
c00271e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00271e5:	89 f0                	mov    eax,esi
c00271e7:	31 d2                	xor    edx,edx
c00271e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00271ed:	f7 f7                	div    edi
c00271ef:	89 e8                	mov    eax,ebp
c00271f1:	f7 f7                	div    edi
c00271f3:	89 d6                	mov    esi,edx
c00271f5:	eb bd                	jmp    c00271b4 <__moddi3+0x50>
c00271f7:	90                   	nop
c00271f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00271fc:	39 f7                	cmp    edi,esi
c00271fe:	76 20                	jbe    c0027220 <__moddi3+0xbc>
c0027200:	89 c8                	mov    eax,ecx
c0027202:	89 f2                	mov    edx,esi
c0027204:	eb b2                	jmp    c00271b8 <__moddi3+0x54>
c0027206:	66 90                	xchg   ax,ax
c0027208:	f7 d9                	neg    ecx
c002720a:	83 d3 00             	adc    ebx,0x0
c002720d:	f7 db                	neg    ebx
c002720f:	89 de                	mov    esi,ebx
c0027211:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027219:	e9 6f ff ff ff       	jmp    c002718d <__moddi3+0x29>
c002721e:	66 90                	xchg   ax,ax
c0027220:	0f bd c7             	bsr    eax,edi
c0027223:	83 f0 1f             	xor    eax,0x1f
c0027226:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002722a:	75 24                	jne    c0027250 <__moddi3+0xec>
c002722c:	39 f7                	cmp    edi,esi
c002722e:	72 06                	jb     c0027236 <__moddi3+0xd2>
c0027230:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027234:	77 0c                	ja     c0027242 <__moddi3+0xde>
c0027236:	89 e9                	mov    ecx,ebp
c0027238:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002723c:	19 fe                	sbb    esi,edi
c002723e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027246:	89 f2                	mov    edx,esi
c0027248:	e9 6b ff ff ff       	jmp    c00271b8 <__moddi3+0x54>
c002724d:	8d 76 00             	lea    esi,[esi+0x0]
c0027250:	b8 20 00 00 00       	mov    eax,0x20
c0027255:	89 c2                	mov    edx,eax
c0027257:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002725b:	29 da                	sub    edx,ebx
c002725d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027261:	88 d9                	mov    cl,bl
c0027263:	d3 e7                	shl    edi,cl
c0027265:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027269:	88 d1                	mov    cl,dl
c002726b:	d3 e8                	shr    eax,cl
c002726d:	09 c7                	or     edi,eax
c002726f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027273:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027277:	89 d8                	mov    eax,ebx
c0027279:	88 d9                	mov    cl,bl
c002727b:	d3 e7                	shl    edi,cl
c002727d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027281:	89 f3                	mov    ebx,esi
c0027283:	88 d1                	mov    cl,dl
c0027285:	d3 eb                	shr    ebx,cl
c0027287:	89 c7                	mov    edi,eax
c0027289:	88 c1                	mov    cl,al
c002728b:	d3 e6                	shl    esi,cl
c002728d:	89 e8                	mov    eax,ebp
c002728f:	88 d1                	mov    cl,dl
c0027291:	d3 e8                	shr    eax,cl
c0027293:	09 f0                	or     eax,esi
c0027295:	89 f9                	mov    ecx,edi
c0027297:	d3 e5                	shl    ebp,cl
c0027299:	89 da                	mov    edx,ebx
c002729b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002729f:	89 d3                	mov    ebx,edx
c00272a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272a5:	89 c6                	mov    esi,eax
c00272a7:	89 d1                	mov    ecx,edx
c00272a9:	39 d3                	cmp    ebx,edx
c00272ab:	72 27                	jb     c00272d4 <__moddi3+0x170>
c00272ad:	74 21                	je     c00272d0 <__moddi3+0x16c>
c00272af:	29 f5                	sub    ebp,esi
c00272b1:	19 cb                	sbb    ebx,ecx
c00272b3:	89 de                	mov    esi,ebx
c00272b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00272b9:	d3 e6                	shl    esi,cl
c00272bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00272bf:	89 f9                	mov    ecx,edi
c00272c1:	d3 ed                	shr    ebp,cl
c00272c3:	09 ee                	or     esi,ebp
c00272c5:	89 f0                	mov    eax,esi
c00272c7:	d3 eb                	shr    ebx,cl
c00272c9:	89 da                	mov    edx,ebx
c00272cb:	e9 e8 fe ff ff       	jmp    c00271b8 <__moddi3+0x54>
c00272d0:	39 c5                	cmp    ebp,eax
c00272d2:	73 db                	jae    c00272af <__moddi3+0x14b>
c00272d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00272d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00272dc:	89 d1                	mov    ecx,edx
c00272de:	89 c6                	mov    esi,eax
c00272e0:	eb cd                	jmp    c00272af <__moddi3+0x14b>
c00272e2:	66 90                	xchg   ax,ax

c00272e4 <__udivdi3>:
c00272e4:	55                   	push   ebp
c00272e5:	57                   	push   edi
c00272e6:	56                   	push   esi
c00272e7:	53                   	push   ebx
c00272e8:	83 ec 1c             	sub    esp,0x1c
c00272eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00272ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00272f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00272fb:	85 d2                	test   edx,edx
c00272fd:	75 41                	jne    c0027340 <__udivdi3+0x5c>
c00272ff:	39 f7                	cmp    edi,esi
c0027301:	76 15                	jbe    c0027318 <__udivdi3+0x34>
c0027303:	89 e8                	mov    eax,ebp
c0027305:	89 f2                	mov    edx,esi
c0027307:	f7 f7                	div    edi
c0027309:	31 db                	xor    ebx,ebx
c002730b:	89 da                	mov    edx,ebx
c002730d:	83 c4 1c             	add    esp,0x1c
c0027310:	5b                   	pop    ebx
c0027311:	5e                   	pop    esi
c0027312:	5f                   	pop    edi
c0027313:	5d                   	pop    ebp
c0027314:	c3                   	ret    
c0027315:	8d 76 00             	lea    esi,[esi+0x0]
c0027318:	89 f9                	mov    ecx,edi
c002731a:	85 ff                	test   edi,edi
c002731c:	75 0b                	jne    c0027329 <__udivdi3+0x45>
c002731e:	b8 01 00 00 00       	mov    eax,0x1
c0027323:	31 d2                	xor    edx,edx
c0027325:	f7 f7                	div    edi
c0027327:	89 c1                	mov    ecx,eax
c0027329:	31 d2                	xor    edx,edx
c002732b:	89 f0                	mov    eax,esi
c002732d:	f7 f1                	div    ecx
c002732f:	89 c3                	mov    ebx,eax
c0027331:	89 e8                	mov    eax,ebp
c0027333:	f7 f1                	div    ecx
c0027335:	89 da                	mov    edx,ebx
c0027337:	83 c4 1c             	add    esp,0x1c
c002733a:	5b                   	pop    ebx
c002733b:	5e                   	pop    esi
c002733c:	5f                   	pop    edi
c002733d:	5d                   	pop    ebp
c002733e:	c3                   	ret    
c002733f:	90                   	nop
c0027340:	39 f2                	cmp    edx,esi
c0027342:	77 1c                	ja     c0027360 <__udivdi3+0x7c>
c0027344:	0f bd da             	bsr    ebx,edx
c0027347:	83 f3 1f             	xor    ebx,0x1f
c002734a:	75 24                	jne    c0027370 <__udivdi3+0x8c>
c002734c:	39 f2                	cmp    edx,esi
c002734e:	72 08                	jb     c0027358 <__udivdi3+0x74>
c0027350:	39 ef                	cmp    edi,ebp
c0027352:	0f 87 84 00 00 00    	ja     c00273dc <__udivdi3+0xf8>
c0027358:	b8 01 00 00 00       	mov    eax,0x1
c002735d:	eb ac                	jmp    c002730b <__udivdi3+0x27>
c002735f:	90                   	nop
c0027360:	31 db                	xor    ebx,ebx
c0027362:	31 c0                	xor    eax,eax
c0027364:	89 da                	mov    edx,ebx
c0027366:	83 c4 1c             	add    esp,0x1c
c0027369:	5b                   	pop    ebx
c002736a:	5e                   	pop    esi
c002736b:	5f                   	pop    edi
c002736c:	5d                   	pop    ebp
c002736d:	c3                   	ret    
c002736e:	66 90                	xchg   ax,ax
c0027370:	b8 20 00 00 00       	mov    eax,0x20
c0027375:	29 d8                	sub    eax,ebx
c0027377:	88 d9                	mov    cl,bl
c0027379:	d3 e2                	shl    edx,cl
c002737b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002737f:	89 fa                	mov    edx,edi
c0027381:	88 c1                	mov    cl,al
c0027383:	d3 ea                	shr    edx,cl
c0027385:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027389:	09 d1                	or     ecx,edx
c002738b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002738f:	88 d9                	mov    cl,bl
c0027391:	d3 e7                	shl    edi,cl
c0027393:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027397:	89 f7                	mov    edi,esi
c0027399:	88 c1                	mov    cl,al
c002739b:	d3 ef                	shr    edi,cl
c002739d:	88 d9                	mov    cl,bl
c002739f:	d3 e6                	shl    esi,cl
c00273a1:	89 ea                	mov    edx,ebp
c00273a3:	88 c1                	mov    cl,al
c00273a5:	d3 ea                	shr    edx,cl
c00273a7:	09 d6                	or     esi,edx
c00273a9:	89 f0                	mov    eax,esi
c00273ab:	89 fa                	mov    edx,edi
c00273ad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273b1:	89 d7                	mov    edi,edx
c00273b3:	89 c6                	mov    esi,eax
c00273b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273b9:	39 d7                	cmp    edi,edx
c00273bb:	72 13                	jb     c00273d0 <__udivdi3+0xec>
c00273bd:	74 09                	je     c00273c8 <__udivdi3+0xe4>
c00273bf:	89 f0                	mov    eax,esi
c00273c1:	31 db                	xor    ebx,ebx
c00273c3:	e9 43 ff ff ff       	jmp    c002730b <__udivdi3+0x27>
c00273c8:	88 d9                	mov    cl,bl
c00273ca:	d3 e5                	shl    ebp,cl
c00273cc:	39 c5                	cmp    ebp,eax
c00273ce:	73 ef                	jae    c00273bf <__udivdi3+0xdb>
c00273d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00273d3:	31 db                	xor    ebx,ebx
c00273d5:	e9 31 ff ff ff       	jmp    c002730b <__udivdi3+0x27>
c00273da:	66 90                	xchg   ax,ax
c00273dc:	31 c0                	xor    eax,eax
c00273de:	e9 28 ff ff ff       	jmp    c002730b <__udivdi3+0x27>
c00273e3:	90                   	nop

c00273e4 <__umoddi3>:
c00273e4:	55                   	push   ebp
c00273e5:	57                   	push   edi
c00273e6:	56                   	push   esi
c00273e7:	53                   	push   ebx
c00273e8:	83 ec 1c             	sub    esp,0x1c
c00273eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00273ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00273f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00273f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00273fb:	89 da                	mov    edx,ebx
c00273fd:	85 c0                	test   eax,eax
c00273ff:	75 37                	jne    c0027438 <__umoddi3+0x54>
c0027401:	39 df                	cmp    edi,ebx
c0027403:	76 13                	jbe    c0027418 <__umoddi3+0x34>
c0027405:	89 f0                	mov    eax,esi
c0027407:	f7 f7                	div    edi
c0027409:	89 d0                	mov    eax,edx
c002740b:	31 d2                	xor    edx,edx
c002740d:	83 c4 1c             	add    esp,0x1c
c0027410:	5b                   	pop    ebx
c0027411:	5e                   	pop    esi
c0027412:	5f                   	pop    edi
c0027413:	5d                   	pop    ebp
c0027414:	c3                   	ret    
c0027415:	8d 76 00             	lea    esi,[esi+0x0]
c0027418:	89 fd                	mov    ebp,edi
c002741a:	85 ff                	test   edi,edi
c002741c:	75 0b                	jne    c0027429 <__umoddi3+0x45>
c002741e:	b8 01 00 00 00       	mov    eax,0x1
c0027423:	31 d2                	xor    edx,edx
c0027425:	f7 f7                	div    edi
c0027427:	89 c5                	mov    ebp,eax
c0027429:	89 d8                	mov    eax,ebx
c002742b:	31 d2                	xor    edx,edx
c002742d:	f7 f5                	div    ebp
c002742f:	89 f0                	mov    eax,esi
c0027431:	f7 f5                	div    ebp
c0027433:	89 d0                	mov    eax,edx
c0027435:	eb d4                	jmp    c002740b <__umoddi3+0x27>
c0027437:	90                   	nop
c0027438:	89 f1                	mov    ecx,esi
c002743a:	39 d8                	cmp    eax,ebx
c002743c:	76 0a                	jbe    c0027448 <__umoddi3+0x64>
c002743e:	89 f0                	mov    eax,esi
c0027440:	83 c4 1c             	add    esp,0x1c
c0027443:	5b                   	pop    ebx
c0027444:	5e                   	pop    esi
c0027445:	5f                   	pop    edi
c0027446:	5d                   	pop    ebp
c0027447:	c3                   	ret    
c0027448:	0f bd e8             	bsr    ebp,eax
c002744b:	83 f5 1f             	xor    ebp,0x1f
c002744e:	75 1c                	jne    c002746c <__umoddi3+0x88>
c0027450:	39 d8                	cmp    eax,ebx
c0027452:	72 04                	jb     c0027458 <__umoddi3+0x74>
c0027454:	39 f7                	cmp    edi,esi
c0027456:	77 08                	ja     c0027460 <__umoddi3+0x7c>
c0027458:	89 da                	mov    edx,ebx
c002745a:	29 fe                	sub    esi,edi
c002745c:	19 c2                	sbb    edx,eax
c002745e:	89 f1                	mov    ecx,esi
c0027460:	89 c8                	mov    eax,ecx
c0027462:	83 c4 1c             	add    esp,0x1c
c0027465:	5b                   	pop    ebx
c0027466:	5e                   	pop    esi
c0027467:	5f                   	pop    edi
c0027468:	5d                   	pop    ebp
c0027469:	c3                   	ret    
c002746a:	66 90                	xchg   ax,ax
c002746c:	ba 20 00 00 00       	mov    edx,0x20
c0027471:	29 ea                	sub    edx,ebp
c0027473:	89 e9                	mov    ecx,ebp
c0027475:	d3 e0                	shl    eax,cl
c0027477:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002747b:	89 f8                	mov    eax,edi
c002747d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027481:	88 d1                	mov    cl,dl
c0027483:	d3 e8                	shr    eax,cl
c0027485:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027489:	09 c1                	or     ecx,eax
c002748b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002748f:	89 e9                	mov    ecx,ebp
c0027491:	d3 e7                	shl    edi,cl
c0027493:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027497:	89 d8                	mov    eax,ebx
c0027499:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002749d:	88 d1                	mov    cl,dl
c002749f:	d3 e8                	shr    eax,cl
c00274a1:	89 c7                	mov    edi,eax
c00274a3:	89 e9                	mov    ecx,ebp
c00274a5:	d3 e3                	shl    ebx,cl
c00274a7:	89 f0                	mov    eax,esi
c00274a9:	88 d1                	mov    cl,dl
c00274ab:	d3 e8                	shr    eax,cl
c00274ad:	09 d8                	or     eax,ebx
c00274af:	89 e9                	mov    ecx,ebp
c00274b1:	d3 e6                	shl    esi,cl
c00274b3:	89 f3                	mov    ebx,esi
c00274b5:	89 fa                	mov    edx,edi
c00274b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00274bb:	89 d1                	mov    ecx,edx
c00274bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00274c1:	89 c6                	mov    esi,eax
c00274c3:	89 d7                	mov    edi,edx
c00274c5:	39 d1                	cmp    ecx,edx
c00274c7:	72 27                	jb     c00274f0 <__umoddi3+0x10c>
c00274c9:	74 21                	je     c00274ec <__umoddi3+0x108>
c00274cb:	89 ca                	mov    edx,ecx
c00274cd:	29 f3                	sub    ebx,esi
c00274cf:	19 fa                	sbb    edx,edi
c00274d1:	89 d0                	mov    eax,edx
c00274d3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00274d7:	d3 e0                	shl    eax,cl
c00274d9:	89 e9                	mov    ecx,ebp
c00274db:	d3 eb                	shr    ebx,cl
c00274dd:	09 d8                	or     eax,ebx
c00274df:	d3 ea                	shr    edx,cl
c00274e1:	83 c4 1c             	add    esp,0x1c
c00274e4:	5b                   	pop    ebx
c00274e5:	5e                   	pop    esi
c00274e6:	5f                   	pop    edi
c00274e7:	5d                   	pop    ebp
c00274e8:	c3                   	ret    
c00274e9:	8d 76 00             	lea    esi,[esi+0x0]
c00274ec:	39 c3                	cmp    ebx,eax
c00274ee:	73 db                	jae    c00274cb <__umoddi3+0xe7>
c00274f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00274f4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00274f8:	89 d7                	mov    edi,edx
c00274fa:	89 c6                	mov    esi,eax
c00274fc:	eb cd                	jmp    c00274cb <__umoddi3+0xe7>

c00274fe <__addsf3>:
c00274fe:	55                   	push   ebp
c00274ff:	89 e5                	mov    ebp,esp
c0027501:	57                   	push   edi
c0027502:	56                   	push   esi
c0027503:	53                   	push   ebx
c0027504:	83 ec 08             	sub    esp,0x8
c0027507:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002750a:	89 fa                	mov    edx,edi
c002750c:	89 f8                	mov    eax,edi
c002750e:	c1 f8 17             	sar    eax,0x17
c0027511:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027514:	c1 e2 08             	shl    edx,0x8
c0027517:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002751d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027520:	89 de                	mov    esi,ebx
c0027522:	c1 fe 17             	sar    esi,0x17
c0027525:	c1 e3 08             	shl    ebx,0x8
c0027528:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002752e:	31 f0                	xor    eax,esi
c0027530:	0f 88 3b 01 00 00    	js     c0027671 <__addsf3+0x173>
c0027536:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027539:	29 f1                	sub    ecx,esi
c002753b:	85 c9                	test   ecx,ecx
c002753d:	7e 54                	jle    c0027593 <__addsf3+0x95>
c002753f:	89 f0                	mov    eax,esi
c0027541:	84 c0                	test   al,al
c0027543:	75 10                	jne    c0027555 <__addsf3+0x57>
c0027545:	85 db                	test   ebx,ebx
c0027547:	0f 84 aa 02 00 00    	je     c00277f7 <__addsf3+0x2f9>
c002754d:	49                   	dec    ecx
c002754e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027551:	74 38                	je     c002758b <__addsf3+0x8d>
c0027553:	eb 13                	jmp    c0027568 <__addsf3+0x6a>
c0027555:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027558:	f7 d0                	not    eax
c002755a:	84 c0                	test   al,al
c002755c:	0f 84 95 02 00 00    	je     c00277f7 <__addsf3+0x2f9>
c0027562:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027568:	83 f9 1f             	cmp    ecx,0x1f
c002756b:	0f 8f 86 02 00 00    	jg     c00277f7 <__addsf3+0x2f9>
c0027571:	89 de                	mov    esi,ebx
c0027573:	d3 ee                	shr    esi,cl
c0027575:	b8 20 00 00 00       	mov    eax,0x20
c002757a:	29 c8                	sub    eax,ecx
c002757c:	89 c1                	mov    ecx,eax
c002757e:	d3 e3                	shl    ebx,cl
c0027580:	31 c0                	xor    eax,eax
c0027582:	85 db                	test   ebx,ebx
c0027584:	0f 95 c0             	setne  al
c0027587:	09 f0                	or     eax,esi
c0027589:	01 d0                	add    eax,edx
c002758b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002758e:	e9 b6 00 00 00       	jmp    c0027649 <__addsf3+0x14b>
c0027593:	74 5c                	je     c00275f1 <__addsf3+0xf3>
c0027595:	89 f1                	mov    ecx,esi
c0027597:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002759a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002759d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00275a1:	75 14                	jne    c00275b7 <__addsf3+0xb9>
c00275a3:	85 d2                	test   edx,edx
c00275a5:	0f 84 4c 02 00 00    	je     c00277f7 <__addsf3+0x2f9>
c00275ab:	49                   	dec    ecx
c00275ac:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00275af:	0f 84 94 00 00 00    	je     c0027649 <__addsf3+0x14b>
c00275b5:	eb 12                	jmp    c00275c9 <__addsf3+0xcb>
c00275b7:	89 f0                	mov    eax,esi
c00275b9:	f7 d0                	not    eax
c00275bb:	84 c0                	test   al,al
c00275bd:	0f 84 34 02 00 00    	je     c00277f7 <__addsf3+0x2f9>
c00275c3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275c9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275cc:	83 f9 1f             	cmp    ecx,0x1f
c00275cf:	0f 8f 22 02 00 00    	jg     c00277f7 <__addsf3+0x2f9>
c00275d5:	89 d7                	mov    edi,edx
c00275d7:	d3 ef                	shr    edi,cl
c00275d9:	b8 20 00 00 00       	mov    eax,0x20
c00275de:	29 c8                	sub    eax,ecx
c00275e0:	89 c1                	mov    ecx,eax
c00275e2:	d3 e2                	shl    edx,cl
c00275e4:	31 c0                	xor    eax,eax
c00275e6:	85 d2                	test   edx,edx
c00275e8:	0f 95 c0             	setne  al
c00275eb:	09 f8                	or     eax,edi
c00275ed:	01 d8                	add    eax,ebx
c00275ef:	eb 58                	jmp    c0027649 <__addsf3+0x14b>
c00275f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275f4:	8d 70 01             	lea    esi,[eax+0x1]
c00275f7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00275fd:	75 32                	jne    c0027631 <__addsf3+0x133>
c00275ff:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027603:	75 1f                	jne    c0027624 <__addsf3+0x126>
c0027605:	85 d2                	test   edx,edx
c0027607:	0f 84 e0 01 00 00    	je     c00277ed <__addsf3+0x2ef>
c002760d:	85 db                	test   ebx,ebx
c002760f:	0f 84 e2 01 00 00    	je     c00277f7 <__addsf3+0x2f9>
c0027615:	89 d0                	mov    eax,edx
c0027617:	01 d8                	add    eax,ebx
c0027619:	0f 89 a9 01 00 00    	jns    c00277c8 <__addsf3+0x2ca>
c002761f:	e9 9d 01 00 00       	jmp    c00277c1 <__addsf3+0x2c3>
c0027624:	85 d2                	test   edx,edx
c0027626:	0f 85 cb 01 00 00    	jne    c00277f7 <__addsf3+0x2f9>
c002762c:	e9 bc 01 00 00       	jmp    c00277ed <__addsf3+0x2ef>
c0027631:	31 c0                	xor    eax,eax
c0027633:	89 f1                	mov    ecx,esi
c0027635:	f7 d1                	not    ecx
c0027637:	84 c9                	test   cl,cl
c0027639:	0f 84 90 01 00 00    	je     c00277cf <__addsf3+0x2d1>
c002763f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027642:	d1 e8                	shr    eax,1
c0027644:	e9 86 01 00 00       	jmp    c00277cf <__addsf3+0x2d1>
c0027649:	85 c0                	test   eax,eax
c002764b:	0f 89 7e 01 00 00    	jns    c00277cf <__addsf3+0x2d1>
c0027651:	46                   	inc    esi
c0027652:	89 f2                	mov    edx,esi
c0027654:	f7 d2                	not    edx
c0027656:	84 d2                	test   dl,dl
c0027658:	0f 84 6f 01 00 00    	je     c00277cd <__addsf3+0x2cf>
c002765e:	89 c2                	mov    edx,eax
c0027660:	83 e2 01             	and    edx,0x1
c0027663:	d1 e8                	shr    eax,1
c0027665:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002766a:	09 d0                	or     eax,edx
c002766c:	e9 5e 01 00 00       	jmp    c00277cf <__addsf3+0x2d1>
c0027671:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027675:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027678:	89 f0                	mov    eax,esi
c002767a:	0f b6 c0             	movzx  eax,al
c002767d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027680:	29 c1                	sub    ecx,eax
c0027682:	85 c9                	test   ecx,ecx
c0027684:	7e 55                	jle    c00276db <__addsf3+0x1dd>
c0027686:	85 c0                	test   eax,eax
c0027688:	75 11                	jne    c002769b <__addsf3+0x19d>
c002768a:	85 db                	test   ebx,ebx
c002768c:	0f 84 65 01 00 00    	je     c00277f7 <__addsf3+0x2f9>
c0027692:	49                   	dec    ecx
c0027693:	75 19                	jne    c00276ae <__addsf3+0x1b0>
c0027695:	89 d0                	mov    eax,edx
c0027697:	29 d8                	sub    eax,ebx
c0027699:	eb 38                	jmp    c00276d3 <__addsf3+0x1d5>
c002769b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002769e:	f7 d0                	not    eax
c00276a0:	84 c0                	test   al,al
c00276a2:	0f 84 4f 01 00 00    	je     c00277f7 <__addsf3+0x2f9>
c00276a8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00276ae:	83 f9 1f             	cmp    ecx,0x1f
c00276b1:	0f 8f 40 01 00 00    	jg     c00277f7 <__addsf3+0x2f9>
c00276b7:	89 de                	mov    esi,ebx
c00276b9:	d3 ee                	shr    esi,cl
c00276bb:	b8 20 00 00 00       	mov    eax,0x20
c00276c0:	29 c8                	sub    eax,ecx
c00276c2:	89 c1                	mov    ecx,eax
c00276c4:	d3 e3                	shl    ebx,cl
c00276c6:	31 c0                	xor    eax,eax
c00276c8:	85 db                	test   ebx,ebx
c00276ca:	0f 95 c0             	setne  al
c00276cd:	09 f0                	or     eax,esi
c00276cf:	29 c2                	sub    edx,eax
c00276d1:	89 d0                	mov    eax,edx
c00276d3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276d6:	e9 af 00 00 00       	jmp    c002778a <__addsf3+0x28c>
c00276db:	74 5c                	je     c0027739 <__addsf3+0x23b>
c00276dd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00276e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276e3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00276e7:	75 14                	jne    c00276fd <__addsf3+0x1ff>
c00276e9:	85 d2                	test   edx,edx
c00276eb:	0f 84 06 01 00 00    	je     c00277f7 <__addsf3+0x2f9>
c00276f1:	48                   	dec    eax
c00276f2:	75 1b                	jne    c002770f <__addsf3+0x211>
c00276f4:	89 d8                	mov    eax,ebx
c00276f6:	29 d0                	sub    eax,edx
c00276f8:	e9 8d 00 00 00       	jmp    c002778a <__addsf3+0x28c>
c00276fd:	89 f1                	mov    ecx,esi
c00276ff:	f7 d1                	not    ecx
c0027701:	84 c9                	test   cl,cl
c0027703:	0f 84 ee 00 00 00    	je     c00277f7 <__addsf3+0x2f9>
c0027709:	81 ca 00 00 00 80    	or     edx,0x80000000
c002770f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027712:	83 f8 1f             	cmp    eax,0x1f
c0027715:	0f 8f dc 00 00 00    	jg     c00277f7 <__addsf3+0x2f9>
c002771b:	89 d7                	mov    edi,edx
c002771d:	88 c1                	mov    cl,al
c002771f:	d3 ef                	shr    edi,cl
c0027721:	b9 20 00 00 00       	mov    ecx,0x20
c0027726:	29 c1                	sub    ecx,eax
c0027728:	d3 e2                	shl    edx,cl
c002772a:	31 c0                	xor    eax,eax
c002772c:	85 d2                	test   edx,edx
c002772e:	0f 95 c0             	setne  al
c0027731:	09 f8                	or     eax,edi
c0027733:	29 c3                	sub    ebx,eax
c0027735:	89 d8                	mov    eax,ebx
c0027737:	eb 51                	jmp    c002778a <__addsf3+0x28c>
c0027739:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002773c:	40                   	inc    eax
c002773d:	a8 fe                	test   al,0xfe
c002773f:	75 3d                	jne    c002777e <__addsf3+0x280>
c0027741:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027745:	0f 85 a7 00 00 00    	jne    c00277f2 <__addsf3+0x2f4>
c002774b:	85 d2                	test   edx,edx
c002774d:	75 12                	jne    c0027761 <__addsf3+0x263>
c002774f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027752:	85 db                	test   ebx,ebx
c0027754:	0f 85 9d 00 00 00    	jne    c00277f7 <__addsf3+0x2f9>
c002775a:	31 ff                	xor    edi,edi
c002775c:	e9 96 00 00 00       	jmp    c00277f7 <__addsf3+0x2f9>
c0027761:	85 db                	test   ebx,ebx
c0027763:	0f 84 8e 00 00 00    	je     c00277f7 <__addsf3+0x2f9>
c0027769:	89 d0                	mov    eax,edx
c002776b:	29 d8                	sub    eax,ebx
c002776d:	79 06                	jns    c0027775 <__addsf3+0x277>
c002776f:	89 d8                	mov    eax,ebx
c0027771:	29 d0                	sub    eax,edx
c0027773:	eb 5a                	jmp    c00277cf <__addsf3+0x2d1>
c0027775:	bf 00 00 00 00       	mov    edi,0x0
c002777a:	74 7b                	je     c00277f7 <__addsf3+0x2f9>
c002777c:	eb 4a                	jmp    c00277c8 <__addsf3+0x2ca>
c002777e:	89 d0                	mov    eax,edx
c0027780:	29 d8                	sub    eax,ebx
c0027782:	79 12                	jns    c0027796 <__addsf3+0x298>
c0027784:	89 d8                	mov    eax,ebx
c0027786:	29 d0                	sub    eax,edx
c0027788:	eb 09                	jmp    c0027793 <__addsf3+0x295>
c002778a:	85 c0                	test   eax,eax
c002778c:	79 41                	jns    c00277cf <__addsf3+0x2d1>
c002778e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027793:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027796:	31 f6                	xor    esi,esi
c0027798:	85 c0                	test   eax,eax
c002779a:	74 33                	je     c00277cf <__addsf3+0x2d1>
c002779c:	0f bd c8             	bsr    ecx,eax
c002779f:	83 f1 1f             	xor    ecx,0x1f
c00277a2:	d3 e0                	shl    eax,cl
c00277a4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00277a8:	39 ca                	cmp    edx,ecx
c00277aa:	7f 10                	jg     c00277bc <__addsf3+0x2be>
c00277ac:	29 d1                	sub    ecx,edx
c00277ae:	41                   	inc    ecx
c00277af:	d3 e8                	shr    eax,cl
c00277b1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277b4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00277ba:	eb 13                	jmp    c00277cf <__addsf3+0x2d1>
c00277bc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277bf:	29 ce                	sub    esi,ecx
c00277c1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277c6:	eb 07                	jmp    c00277cf <__addsf3+0x2d1>
c00277c8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277cb:	eb 02                	jmp    c00277cf <__addsf3+0x2d1>
c00277cd:	31 c0                	xor    eax,eax
c00277cf:	89 c2                	mov    edx,eax
c00277d1:	c1 ea 08             	shr    edx,0x8
c00277d4:	a8 7f                	test   al,0x7f
c00277d6:	0f 95 c1             	setne  cl
c00277d9:	09 d1                	or     ecx,edx
c00277db:	83 e1 01             	and    ecx,0x1
c00277de:	c1 e8 07             	shr    eax,0x7
c00277e1:	21 c8                	and    eax,ecx
c00277e3:	c1 e6 17             	shl    esi,0x17
c00277e6:	09 d6                	or     esi,edx
c00277e8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00277eb:	eb 0a                	jmp    c00277f7 <__addsf3+0x2f9>
c00277ed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00277f0:	eb 05                	jmp    c00277f7 <__addsf3+0x2f9>
c00277f2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00277f7:	89 f8                	mov    eax,edi
c00277f9:	5a                   	pop    edx
c00277fa:	59                   	pop    ecx
c00277fb:	5b                   	pop    ebx
c00277fc:	5e                   	pop    esi
c00277fd:	5f                   	pop    edi
c00277fe:	5d                   	pop    ebp
c00277ff:	c3                   	ret    

c0027800 <__subsf3>:
c0027800:	55                   	push   ebp
c0027801:	89 e5                	mov    ebp,esp
c0027803:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027806:	05 00 00 00 80       	add    eax,0x80000000
c002780b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002780e:	5d                   	pop    ebp
c002780f:	e9 ea fc ff ff       	jmp    c00274fe <__addsf3>

c0027814 <__negsf2>:
c0027814:	55                   	push   ebp
c0027815:	89 e5                	mov    ebp,esp
c0027817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002781a:	05 00 00 00 80       	add    eax,0x80000000
c002781f:	5d                   	pop    ebp
c0027820:	c3                   	ret    

c0027821 <__mulsf3>:
c0027821:	55                   	push   ebp
c0027822:	89 e5                	mov    ebp,esp
c0027824:	57                   	push   edi
c0027825:	56                   	push   esi
c0027826:	53                   	push   ebx
c0027827:	83 ec 1c             	sub    esp,0x1c
c002782a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002782d:	89 f0                	mov    eax,esi
c002782f:	89 f1                	mov    ecx,esi
c0027831:	c1 f9 17             	sar    ecx,0x17
c0027834:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027837:	c1 e0 08             	shl    eax,0x8
c002783a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002783f:	89 c1                	mov    ecx,eax
c0027841:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027844:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027847:	89 c7                	mov    edi,eax
c0027849:	c1 ff 17             	sar    edi,0x17
c002784c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027850:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027853:	89 f8                	mov    eax,edi
c0027855:	0f b6 c0             	movzx  eax,al
c0027858:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002785b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002785f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027862:	42                   	inc    edx
c0027863:	80 e2 fe             	and    dl,0xfe
c0027866:	75 7b                	jne    c00278e3 <__mulsf3+0xc2>
c0027868:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002786c:	74 54                	je     c00278c2 <__mulsf3+0xa1>
c002786e:	85 c9                	test   ecx,ecx
c0027870:	0f 85 64 01 00 00    	jne    c00279da <__mulsf3+0x1b9>
c0027876:	8d 57 01             	lea    edx,[edi+0x1]
c0027879:	80 e2 fe             	and    dl,0xfe
c002787c:	75 1f                	jne    c002789d <__mulsf3+0x7c>
c002787e:	85 c0                	test   eax,eax
c0027880:	b8 00 00 00 00       	mov    eax,0x0
c0027885:	74 29                	je     c00278b0 <__mulsf3+0x8f>
c0027887:	53                   	push   ebx
c0027888:	53                   	push   ebx
c0027889:	50                   	push   eax
c002788a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002788d:	e8 96 05 00 00       	call   c0027e28 <__nesf2>
c0027892:	83 c4 10             	add    esp,0x10
c0027895:	85 c0                	test   eax,eax
c0027897:	0f 85 3a 01 00 00    	jne    c00279d7 <__mulsf3+0x1b6>
c002789d:	85 ff                	test   edi,edi
c002789f:	0f 89 35 01 00 00    	jns    c00279da <__mulsf3+0x1b9>
c00278a5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00278ab:	e9 2a 01 00 00       	jmp    c00279da <__mulsf3+0x1b9>
c00278b0:	51                   	push   ecx
c00278b1:	51                   	push   ecx
c00278b2:	50                   	push   eax
c00278b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278b6:	e8 6d 05 00 00       	call   c0027e28 <__nesf2>
c00278bb:	83 c4 10             	add    esp,0x10
c00278be:	85 c0                	test   eax,eax
c00278c0:	eb 15                	jmp    c00278d7 <__mulsf3+0xb6>
c00278c2:	85 c9                	test   ecx,ecx
c00278c4:	74 0b                	je     c00278d1 <__mulsf3+0xb0>
c00278c6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00278c9:	01 c9                	add    ecx,ecx
c00278cb:	78 16                	js     c00278e3 <__mulsf3+0xc2>
c00278cd:	89 d3                	mov    ebx,edx
c00278cf:	eb f5                	jmp    c00278c6 <__mulsf3+0xa5>
c00278d1:	89 f8                	mov    eax,edi
c00278d3:	f7 d0                	not    eax
c00278d5:	84 c0                	test   al,al
c00278d7:	75 c4                	jne    c002789d <__mulsf3+0x7c>
c00278d9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00278de:	e9 f7 00 00 00       	jmp    c00279da <__mulsf3+0x1b9>
c00278e3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00278e6:	c1 e6 08             	shl    esi,0x8
c00278e9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00278ef:	8d 57 01             	lea    edx,[edi+0x1]
c00278f2:	80 e2 fe             	and    dl,0xfe
c00278f5:	75 63                	jne    c002795a <__mulsf3+0x139>
c00278f7:	85 c0                	test   eax,eax
c00278f9:	74 2f                	je     c002792a <__mulsf3+0x109>
c00278fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00278ff:	0f 89 d2 00 00 00    	jns    c00279d7 <__mulsf3+0x1b6>
c0027905:	52                   	push   edx
c0027906:	52                   	push   edx
c0027907:	6a 00                	push   0x0
c0027909:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002790c:	e8 dc 04 00 00       	call   c0027ded <__eqsf2>
c0027911:	83 c4 10             	add    esp,0x10
c0027914:	85 c0                	test   eax,eax
c0027916:	0f 85 bb 00 00 00    	jne    c00279d7 <__mulsf3+0x1b6>
c002791c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002791f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027925:	e9 b0 00 00 00       	jmp    c00279da <__mulsf3+0x1b9>
c002792a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002792d:	50                   	push   eax
c002792e:	50                   	push   eax
c002792f:	6a 00                	push   0x0
c0027931:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027934:	e8 b4 04 00 00       	call   c0027ded <__eqsf2>
c0027939:	83 c4 10             	add    esp,0x10
c002793c:	85 c0                	test   eax,eax
c002793e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027941:	75 0c                	jne    c002794f <__mulsf3+0x12e>
c0027943:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027947:	0f 89 8a 00 00 00    	jns    c00279d7 <__mulsf3+0x1b6>
c002794d:	eb cd                	jmp    c002791c <__mulsf3+0xfb>
c002794f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027952:	01 f6                	add    esi,esi
c0027954:	78 04                	js     c002795a <__mulsf3+0x139>
c0027956:	89 c3                	mov    ebx,eax
c0027958:	eb f5                	jmp    c002794f <__mulsf3+0x12e>
c002795a:	89 c8                	mov    eax,ecx
c002795c:	0d 00 00 00 80       	or     eax,0x80000000
c0027961:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027967:	f7 e6                	mul    esi
c0027969:	85 c0                	test   eax,eax
c002796b:	0f 95 c0             	setne  al
c002796e:	0f b6 c0             	movzx  eax,al
c0027971:	09 c2                	or     edx,eax
c0027973:	78 03                	js     c0027978 <__mulsf3+0x157>
c0027975:	01 d2                	add    edx,edx
c0027977:	4b                   	dec    ebx
c0027978:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002797e:	7f 22                	jg     c00279a2 <__mulsf3+0x181>
c0027980:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027986:	85 db                	test   ebx,ebx
c0027988:	7f 23                	jg     c00279ad <__mulsf3+0x18c>
c002798a:	83 fb e9             	cmp    ebx,0xffffffe9
c002798d:	7c 1a                	jl     c00279a9 <__mulsf3+0x188>
c002798f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027995:	b9 01 00 00 00       	mov    ecx,0x1
c002799a:	29 d9                	sub    ecx,ebx
c002799c:	d3 ea                	shr    edx,cl
c002799e:	31 db                	xor    ebx,ebx
c00279a0:	eb 0b                	jmp    c00279ad <__mulsf3+0x18c>
c00279a2:	bb ff 00 00 00       	mov    ebx,0xff
c00279a7:	eb 02                	jmp    c00279ab <__mulsf3+0x18a>
c00279a9:	31 db                	xor    ebx,ebx
c00279ab:	31 d2                	xor    edx,edx
c00279ad:	89 d0                	mov    eax,edx
c00279af:	c1 e8 08             	shr    eax,0x8
c00279b2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00279b5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00279bb:	09 fb                	or     ebx,edi
c00279bd:	c1 e3 17             	shl    ebx,0x17
c00279c0:	09 c3                	or     ebx,eax
c00279c2:	f6 c2 7f             	test   dl,0x7f
c00279c5:	0f 95 c1             	setne  cl
c00279c8:	09 c8                	or     eax,ecx
c00279ca:	83 e0 01             	and    eax,0x1
c00279cd:	c1 ea 07             	shr    edx,0x7
c00279d0:	21 c2                	and    edx,eax
c00279d2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00279d5:	eb 03                	jmp    c00279da <__mulsf3+0x1b9>
c00279d7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00279da:	89 f0                	mov    eax,esi
c00279dc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00279df:	5b                   	pop    ebx
c00279e0:	5e                   	pop    esi
c00279e1:	5f                   	pop    edi
c00279e2:	5d                   	pop    ebp
c00279e3:	c3                   	ret    

c00279e4 <__divsf3>:
c00279e4:	55                   	push   ebp
c00279e5:	89 e5                	mov    ebp,esp
c00279e7:	57                   	push   edi
c00279e8:	56                   	push   esi
c00279e9:	53                   	push   ebx
c00279ea:	83 ec 1c             	sub    esp,0x1c
c00279ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00279f0:	89 d8                	mov    eax,ebx
c00279f2:	89 d9                	mov    ecx,ebx
c00279f4:	c1 f9 17             	sar    ecx,0x17
c00279f7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00279fa:	c1 e0 08             	shl    eax,0x8
c00279fd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027a02:	89 c1                	mov    ecx,eax
c0027a04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a07:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a0a:	89 c7                	mov    edi,eax
c0027a0c:	c1 ff 17             	sar    edi,0x17
c0027a0f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027a13:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027a16:	89 f8                	mov    eax,edi
c0027a18:	0f b6 c0             	movzx  eax,al
c0027a1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027a1e:	29 c6                	sub    esi,eax
c0027a20:	83 c6 7f             	add    esi,0x7f
c0027a23:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027a26:	42                   	inc    edx
c0027a27:	80 e2 fe             	and    dl,0xfe
c0027a2a:	0f 85 9c 00 00 00    	jne    c0027acc <__divsf3+0xe8>
c0027a30:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a34:	74 33                	je     c0027a69 <__divsf3+0x85>
c0027a36:	85 c9                	test   ecx,ecx
c0027a38:	0f 85 c7 01 00 00    	jne    c0027c05 <__divsf3+0x221>
c0027a3e:	8d 57 01             	lea    edx,[edi+0x1]
c0027a41:	80 e2 fe             	and    dl,0xfe
c0027a44:	75 2f                	jne    c0027a75 <__divsf3+0x91>
c0027a46:	85 c0                	test   eax,eax
c0027a48:	74 2b                	je     c0027a75 <__divsf3+0x91>
c0027a4a:	51                   	push   ecx
c0027a4b:	51                   	push   ecx
c0027a4c:	6a 00                	push   0x0
c0027a4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a51:	e8 d2 03 00 00       	call   c0027e28 <__nesf2>
c0027a56:	83 c4 10             	add    esp,0x10
c0027a59:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027a5c:	85 c0                	test   eax,eax
c0027a5e:	0f 85 a1 01 00 00    	jne    c0027c05 <__divsf3+0x221>
c0027a64:	e9 92 01 00 00       	jmp    c0027bfb <__divsf3+0x217>
c0027a69:	85 c9                	test   ecx,ecx
c0027a6b:	75 1b                	jne    c0027a88 <__divsf3+0xa4>
c0027a6d:	8d 57 01             	lea    edx,[edi+0x1]
c0027a70:	80 e2 fe             	and    dl,0xfe
c0027a73:	74 1e                	je     c0027a93 <__divsf3+0xaf>
c0027a75:	85 ff                	test   edi,edi
c0027a77:	0f 89 88 01 00 00    	jns    c0027c05 <__divsf3+0x221>
c0027a7d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027a83:	e9 7d 01 00 00       	jmp    c0027c05 <__divsf3+0x221>
c0027a88:	8d 56 ff             	lea    edx,[esi-0x1]
c0027a8b:	01 c9                	add    ecx,ecx
c0027a8d:	78 3d                	js     c0027acc <__divsf3+0xe8>
c0027a8f:	89 d6                	mov    esi,edx
c0027a91:	eb f5                	jmp    c0027a88 <__divsf3+0xa4>
c0027a93:	85 c0                	test   eax,eax
c0027a95:	b8 00 00 00 00       	mov    eax,0x0
c0027a9a:	74 18                	je     c0027ab4 <__divsf3+0xd0>
c0027a9c:	52                   	push   edx
c0027a9d:	52                   	push   edx
c0027a9e:	50                   	push   eax
c0027a9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027aa2:	e8 81 03 00 00       	call   c0027e28 <__nesf2>
c0027aa7:	83 c4 10             	add    esp,0x10
c0027aaa:	85 c0                	test   eax,eax
c0027aac:	0f 85 50 01 00 00    	jne    c0027c02 <__divsf3+0x21e>
c0027ab2:	eb c1                	jmp    c0027a75 <__divsf3+0x91>
c0027ab4:	56                   	push   esi
c0027ab5:	56                   	push   esi
c0027ab6:	50                   	push   eax
c0027ab7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027aba:	e8 69 03 00 00       	call   c0027e28 <__nesf2>
c0027abf:	83 c4 10             	add    esp,0x10
c0027ac2:	85 c0                	test   eax,eax
c0027ac4:	0f 84 31 01 00 00    	je     c0027bfb <__divsf3+0x217>
c0027aca:	eb a9                	jmp    c0027a75 <__divsf3+0x91>
c0027acc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027acf:	c1 e3 08             	shl    ebx,0x8
c0027ad2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027ad8:	8d 57 01             	lea    edx,[edi+0x1]
c0027adb:	80 e2 fe             	and    dl,0xfe
c0027ade:	75 71                	jne    c0027b51 <__divsf3+0x16d>
c0027ae0:	85 c0                	test   eax,eax
c0027ae2:	ba 00 00 00 00       	mov    edx,0x0
c0027ae7:	74 2f                	je     c0027b18 <__divsf3+0x134>
c0027ae9:	51                   	push   ecx
c0027aea:	51                   	push   ecx
c0027aeb:	52                   	push   edx
c0027aec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027aef:	e8 f9 02 00 00       	call   c0027ded <__eqsf2>
c0027af4:	83 c4 10             	add    esp,0x10
c0027af7:	85 c0                	test   eax,eax
c0027af9:	0f 85 03 01 00 00    	jne    c0027c02 <__divsf3+0x21e>
c0027aff:	31 d2                	xor    edx,edx
c0027b01:	89 d3                	mov    ebx,edx
c0027b03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b06:	31 f8                	xor    eax,edi
c0027b08:	0f 89 f7 00 00 00    	jns    c0027c05 <__divsf3+0x221>
c0027b0e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027b13:	e9 ed 00 00 00       	jmp    c0027c05 <__divsf3+0x221>
c0027b18:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027b1b:	50                   	push   eax
c0027b1c:	50                   	push   eax
c0027b1d:	52                   	push   edx
c0027b1e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b21:	e8 c7 02 00 00       	call   c0027ded <__eqsf2>
c0027b26:	83 c4 10             	add    esp,0x10
c0027b29:	85 c0                	test   eax,eax
c0027b2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b2e:	75 16                	jne    c0027b46 <__divsf3+0x162>
c0027b30:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b33:	31 fb                	xor    ebx,edi
c0027b35:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027b3b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027b41:	e9 bf 00 00 00       	jmp    c0027c05 <__divsf3+0x221>
c0027b46:	8d 46 01             	lea    eax,[esi+0x1]
c0027b49:	01 db                	add    ebx,ebx
c0027b4b:	78 04                	js     c0027b51 <__divsf3+0x16d>
c0027b4d:	89 c6                	mov    esi,eax
c0027b4f:	eb f5                	jmp    c0027b46 <__divsf3+0x162>
c0027b51:	89 c8                	mov    eax,ecx
c0027b53:	0d 00 00 00 80       	or     eax,0x80000000
c0027b58:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027b5e:	31 d2                	xor    edx,edx
c0027b60:	39 d8                	cmp    eax,ebx
c0027b62:	72 07                	jb     c0027b6b <__divsf3+0x187>
c0027b64:	29 d8                	sub    eax,ebx
c0027b66:	ba 01 00 00 00       	mov    edx,0x1
c0027b6b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027b72:	01 d2                	add    edx,edx
c0027b74:	89 c1                	mov    ecx,eax
c0027b76:	01 c0                	add    eax,eax
c0027b78:	85 c9                	test   ecx,ecx
c0027b7a:	78 04                	js     c0027b80 <__divsf3+0x19c>
c0027b7c:	39 c3                	cmp    ebx,eax
c0027b7e:	77 05                	ja     c0027b85 <__divsf3+0x1a1>
c0027b80:	29 d8                	sub    eax,ebx
c0027b82:	83 ca 01             	or     edx,0x1
c0027b85:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027b88:	75 e8                	jne    c0027b72 <__divsf3+0x18e>
c0027b8a:	85 c0                	test   eax,eax
c0027b8c:	0f 95 c0             	setne  al
c0027b8f:	0f b6 c0             	movzx  eax,al
c0027b92:	c1 e2 06             	shl    edx,0x6
c0027b95:	09 c2                	or     edx,eax
c0027b97:	78 03                	js     c0027b9c <__divsf3+0x1b8>
c0027b99:	01 d2                	add    edx,edx
c0027b9b:	4e                   	dec    esi
c0027b9c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027ba2:	7f 22                	jg     c0027bc6 <__divsf3+0x1e2>
c0027ba4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027baa:	85 f6                	test   esi,esi
c0027bac:	7f 23                	jg     c0027bd1 <__divsf3+0x1ed>
c0027bae:	83 fe e9             	cmp    esi,0xffffffe9
c0027bb1:	7c 1a                	jl     c0027bcd <__divsf3+0x1e9>
c0027bb3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027bb9:	b9 01 00 00 00       	mov    ecx,0x1
c0027bbe:	29 f1                	sub    ecx,esi
c0027bc0:	d3 ea                	shr    edx,cl
c0027bc2:	31 f6                	xor    esi,esi
c0027bc4:	eb 0b                	jmp    c0027bd1 <__divsf3+0x1ed>
c0027bc6:	be ff 00 00 00       	mov    esi,0xff
c0027bcb:	eb 02                	jmp    c0027bcf <__divsf3+0x1eb>
c0027bcd:	31 f6                	xor    esi,esi
c0027bcf:	31 d2                	xor    edx,edx
c0027bd1:	89 d0                	mov    eax,edx
c0027bd3:	c1 e8 08             	shr    eax,0x8
c0027bd6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027bd9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027bdf:	09 fe                	or     esi,edi
c0027be1:	c1 e6 17             	shl    esi,0x17
c0027be4:	09 c6                	or     esi,eax
c0027be6:	f6 c2 7f             	test   dl,0x7f
c0027be9:	0f 95 c1             	setne  cl
c0027bec:	09 c8                	or     eax,ecx
c0027bee:	83 e0 01             	and    eax,0x1
c0027bf1:	c1 ea 07             	shr    edx,0x7
c0027bf4:	21 c2                	and    edx,eax
c0027bf6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027bf9:	eb 0a                	jmp    c0027c05 <__divsf3+0x221>
c0027bfb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027c00:	eb 03                	jmp    c0027c05 <__divsf3+0x221>
c0027c02:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027c05:	89 d8                	mov    eax,ebx
c0027c07:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027c0a:	5b                   	pop    ebx
c0027c0b:	5e                   	pop    esi
c0027c0c:	5f                   	pop    edi
c0027c0d:	5d                   	pop    ebp
c0027c0e:	c3                   	ret    

c0027c0f <__floatsisf>:
c0027c0f:	55                   	push   ebp
c0027c10:	89 e5                	mov    ebp,esp
c0027c12:	53                   	push   ebx
c0027c13:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c16:	85 d2                	test   edx,edx
c0027c18:	7e 2b                	jle    c0027c45 <__floatsisf+0x36>
c0027c1a:	0f bd ca             	bsr    ecx,edx
c0027c1d:	83 f1 1f             	xor    ecx,0x1f
c0027c20:	d3 e2                	shl    edx,cl
c0027c22:	89 d0                	mov    eax,edx
c0027c24:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c29:	89 c3                	mov    ebx,eax
c0027c2b:	c1 eb 08             	shr    ebx,0x8
c0027c2e:	80 e2 7f             	and    dl,0x7f
c0027c31:	0f 95 c2             	setne  dl
c0027c34:	09 da                	or     edx,ebx
c0027c36:	83 e2 01             	and    edx,0x1
c0027c39:	c1 e8 07             	shr    eax,0x7
c0027c3c:	21 c2                	and    edx,eax
c0027c3e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027c43:	eb 32                	jmp    c0027c77 <__floatsisf+0x68>
c0027c45:	b8 00 00 00 00       	mov    eax,0x0
c0027c4a:	74 34                	je     c0027c80 <__floatsisf+0x71>
c0027c4c:	f7 da                	neg    edx
c0027c4e:	0f bd ca             	bsr    ecx,edx
c0027c51:	83 f1 1f             	xor    ecx,0x1f
c0027c54:	d3 e2                	shl    edx,cl
c0027c56:	89 d0                	mov    eax,edx
c0027c58:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c5d:	89 c3                	mov    ebx,eax
c0027c5f:	c1 eb 08             	shr    ebx,0x8
c0027c62:	80 e2 7f             	and    dl,0x7f
c0027c65:	0f 95 c2             	setne  dl
c0027c68:	09 da                	or     edx,ebx
c0027c6a:	83 e2 01             	and    edx,0x1
c0027c6d:	c1 e8 07             	shr    eax,0x7
c0027c70:	21 c2                	and    edx,eax
c0027c72:	b8 9e 01 00 00       	mov    eax,0x19e
c0027c77:	29 c8                	sub    eax,ecx
c0027c79:	c1 e0 17             	shl    eax,0x17
c0027c7c:	09 d8                	or     eax,ebx
c0027c7e:	01 d0                	add    eax,edx
c0027c80:	5b                   	pop    ebx
c0027c81:	5d                   	pop    ebp
c0027c82:	c3                   	ret    

c0027c83 <__floatunsisf>:
c0027c83:	55                   	push   ebp
c0027c84:	89 e5                	mov    ebp,esp
c0027c86:	53                   	push   ebx
c0027c87:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c8a:	31 c0                	xor    eax,eax
c0027c8c:	85 d2                	test   edx,edx
c0027c8e:	74 32                	je     c0027cc2 <__floatunsisf+0x3f>
c0027c90:	0f bd ca             	bsr    ecx,edx
c0027c93:	83 f1 1f             	xor    ecx,0x1f
c0027c96:	d3 e2                	shl    edx,cl
c0027c98:	89 d0                	mov    eax,edx
c0027c9a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c9f:	89 c3                	mov    ebx,eax
c0027ca1:	c1 eb 08             	shr    ebx,0x8
c0027ca4:	80 e2 7f             	and    dl,0x7f
c0027ca7:	0f 95 c2             	setne  dl
c0027caa:	09 da                	or     edx,ebx
c0027cac:	83 e2 01             	and    edx,0x1
c0027caf:	c1 e8 07             	shr    eax,0x7
c0027cb2:	21 c2                	and    edx,eax
c0027cb4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027cb9:	29 c8                	sub    eax,ecx
c0027cbb:	c1 e0 17             	shl    eax,0x17
c0027cbe:	09 d8                	or     eax,ebx
c0027cc0:	01 d0                	add    eax,edx
c0027cc2:	5b                   	pop    ebx
c0027cc3:	5d                   	pop    ebp
c0027cc4:	c3                   	ret    

c0027cc5 <__fixsfsi>:
c0027cc5:	55                   	push   ebp
c0027cc6:	89 e5                	mov    ebp,esp
c0027cc8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ccb:	89 d1                	mov    ecx,edx
c0027ccd:	c1 e1 08             	shl    ecx,0x8
c0027cd0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027cd6:	c1 fa 17             	sar    edx,0x17
c0027cd9:	78 1c                	js     c0027cf7 <__fixsfsi+0x32>
c0027cdb:	83 ea 7f             	sub    edx,0x7f
c0027cde:	31 c0                	xor    eax,eax
c0027ce0:	83 fa 1e             	cmp    edx,0x1e
c0027ce3:	77 40                	ja     c0027d25 <__fixsfsi+0x60>
c0027ce5:	89 c8                	mov    eax,ecx
c0027ce7:	0d 00 00 00 80       	or     eax,0x80000000
c0027cec:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027cf1:	29 d1                	sub    ecx,edx
c0027cf3:	d3 e8                	shr    eax,cl
c0027cf5:	eb 2e                	jmp    c0027d25 <__fixsfsi+0x60>
c0027cf7:	31 c0                	xor    eax,eax
c0027cf9:	81 c2 81 00 00 00    	add    edx,0x81
c0027cff:	78 24                	js     c0027d25 <__fixsfsi+0x60>
c0027d01:	83 fa 1e             	cmp    edx,0x1e
c0027d04:	7e 09                	jle    c0027d0f <__fixsfsi+0x4a>
c0027d06:	83 fa 1f             	cmp    edx,0x1f
c0027d09:	75 18                	jne    c0027d23 <__fixsfsi+0x5e>
c0027d0b:	85 c9                	test   ecx,ecx
c0027d0d:	75 14                	jne    c0027d23 <__fixsfsi+0x5e>
c0027d0f:	89 c8                	mov    eax,ecx
c0027d11:	0d 00 00 00 80       	or     eax,0x80000000
c0027d16:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d1b:	29 d1                	sub    ecx,edx
c0027d1d:	d3 e8                	shr    eax,cl
c0027d1f:	f7 d8                	neg    eax
c0027d21:	eb 02                	jmp    c0027d25 <__fixsfsi+0x60>
c0027d23:	31 c0                	xor    eax,eax
c0027d25:	5d                   	pop    ebp
c0027d26:	c3                   	ret    

c0027d27 <__fixunssfsi>:
c0027d27:	55                   	push   ebp
c0027d28:	89 e5                	mov    ebp,esp
c0027d2a:	53                   	push   ebx
c0027d2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d2e:	89 d3                	mov    ebx,edx
c0027d30:	c1 fb 17             	sar    ebx,0x17
c0027d33:	83 eb 7f             	sub    ebx,0x7f
c0027d36:	31 c0                	xor    eax,eax
c0027d38:	83 fb 1f             	cmp    ebx,0x1f
c0027d3b:	77 18                	ja     c0027d55 <__fixunssfsi+0x2e>
c0027d3d:	89 d0                	mov    eax,edx
c0027d3f:	c1 e0 08             	shl    eax,0x8
c0027d42:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d47:	0d 00 00 00 80       	or     eax,0x80000000
c0027d4c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d51:	29 d9                	sub    ecx,ebx
c0027d53:	d3 e8                	shr    eax,cl
c0027d55:	5b                   	pop    ebx
c0027d56:	5d                   	pop    ebp
c0027d57:	c3                   	ret    

c0027d58 <__cmpsf2>:
c0027d58:	55                   	push   ebp
c0027d59:	89 e5                	mov    ebp,esp
c0027d5b:	57                   	push   edi
c0027d5c:	56                   	push   esi
c0027d5d:	53                   	push   ebx
c0027d5e:	83 ec 24             	sub    esp,0x24
c0027d61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d67:	e8 4f 10 00 00       	call   c0028dbb <__truncdfsf2>
c0027d6c:	5a                   	pop    edx
c0027d6d:	59                   	pop    ecx
c0027d6e:	89 c3                	mov    ebx,eax
c0027d70:	c1 e8 17             	shr    eax,0x17
c0027d73:	0f b6 f0             	movzx  esi,al
c0027d76:	89 d8                	mov    eax,ebx
c0027d78:	c1 e8 1f             	shr    eax,0x1f
c0027d7b:	31 c6                	xor    esi,eax
c0027d7d:	c1 e3 08             	shl    ebx,0x8
c0027d80:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d83:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d86:	e8 30 10 00 00       	call   c0028dbb <__truncdfsf2>
c0027d8b:	83 c4 10             	add    esp,0x10
c0027d8e:	89 c1                	mov    ecx,eax
c0027d90:	c1 e9 17             	shr    ecx,0x17
c0027d93:	0f b6 c9             	movzx  ecx,cl
c0027d96:	89 c7                	mov    edi,eax
c0027d98:	c1 ef 1f             	shr    edi,0x1f
c0027d9b:	89 ca                	mov    edx,ecx
c0027d9d:	31 fa                	xor    edx,edi
c0027d9f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027da2:	c1 e0 08             	shl    eax,0x8
c0027da5:	89 c2                	mov    edx,eax
c0027da7:	89 d8                	mov    eax,ebx
c0027da9:	09 d0                	or     eax,edx
c0027dab:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027db0:	09 f0                	or     eax,esi
c0027db2:	75 08                	jne    c0027dbc <__cmpsf2+0x64>
c0027db4:	31 c0                	xor    eax,eax
c0027db6:	39 f9                	cmp    ecx,edi
c0027db8:	75 0c                	jne    c0027dc6 <__cmpsf2+0x6e>
c0027dba:	eb 29                	jmp    c0027de5 <__cmpsf2+0x8d>
c0027dbc:	b8 01 00 00 00       	mov    eax,0x1
c0027dc1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027dc4:	7f 1f                	jg     c0027de5 <__cmpsf2+0x8d>
c0027dc6:	83 c8 ff             	or     eax,0xffffffff
c0027dc9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027dcc:	7c 17                	jl     c0027de5 <__cmpsf2+0x8d>
c0027dce:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027dd4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027dda:	b8 01 00 00 00       	mov    eax,0x1
c0027ddf:	39 d3                	cmp    ebx,edx
c0027de1:	77 02                	ja     c0027de5 <__cmpsf2+0x8d>
c0027de3:	19 c0                	sbb    eax,eax
c0027de5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027de8:	5b                   	pop    ebx
c0027de9:	5e                   	pop    esi
c0027dea:	5f                   	pop    edi
c0027deb:	5d                   	pop    ebp
c0027dec:	c3                   	ret    

c0027ded <__eqsf2>:
c0027ded:	55                   	push   ebp
c0027dee:	89 e5                	mov    ebp,esp
c0027df0:	83 ec 24             	sub    esp,0x24
c0027df3:	6a 01                	push   0x1
c0027df5:	83 ec 0c             	sub    esp,0xc
c0027df8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027dfb:	e8 df 10 00 00       	call   c0028edf <__extendsfdf2>
c0027e00:	83 c4 10             	add    esp,0x10
c0027e03:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e06:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e09:	52                   	push   edx
c0027e0a:	50                   	push   eax
c0027e0b:	50                   	push   eax
c0027e0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027e0f:	e8 cb 10 00 00       	call   c0028edf <__extendsfdf2>
c0027e14:	59                   	pop    ecx
c0027e15:	59                   	pop    ecx
c0027e16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e19:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e1c:	52                   	push   edx
c0027e1d:	50                   	push   eax
c0027e1e:	e8 35 ff ff ff       	call   c0027d58 <__cmpsf2>
c0027e23:	83 c4 20             	add    esp,0x20
c0027e26:	c9                   	leave  
c0027e27:	c3                   	ret    

c0027e28 <__nesf2>:
c0027e28:	eb c3                	jmp    c0027ded <__eqsf2>

c0027e2a <__gtsf2>:
c0027e2a:	55                   	push   ebp
c0027e2b:	89 e5                	mov    ebp,esp
c0027e2d:	83 ec 24             	sub    esp,0x24
c0027e30:	6a ff                	push   0xffffffff
c0027e32:	83 ec 0c             	sub    esp,0xc
c0027e35:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e38:	e8 a2 10 00 00       	call   c0028edf <__extendsfdf2>
c0027e3d:	83 c4 10             	add    esp,0x10
c0027e40:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e43:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e46:	52                   	push   edx
c0027e47:	50                   	push   eax
c0027e48:	50                   	push   eax
c0027e49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027e4c:	e8 8e 10 00 00       	call   c0028edf <__extendsfdf2>
c0027e51:	59                   	pop    ecx
c0027e52:	59                   	pop    ecx
c0027e53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e56:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e59:	52                   	push   edx
c0027e5a:	50                   	push   eax
c0027e5b:	e8 f8 fe ff ff       	call   c0027d58 <__cmpsf2>
c0027e60:	83 c4 20             	add    esp,0x20
c0027e63:	c9                   	leave  
c0027e64:	c3                   	ret    

c0027e65 <__gesf2>:
c0027e65:	eb c3                	jmp    c0027e2a <__gtsf2>

c0027e67 <__ltsf2>:
c0027e67:	eb 84                	jmp    c0027ded <__eqsf2>

c0027e69 <__lesf2>:
c0027e69:	eb 82                	jmp    c0027ded <__eqsf2>

c0027e6b <__adddf3>:
c0027e6b:	55                   	push   ebp
c0027e6c:	89 e5                	mov    ebp,esp
c0027e6e:	57                   	push   edi
c0027e6f:	56                   	push   esi
c0027e70:	53                   	push   ebx
c0027e71:	83 ec 24             	sub    esp,0x24
c0027e74:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e77:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e7a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e7d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e80:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e83:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027e86:	89 c8                	mov    eax,ecx
c0027e88:	89 ce                	mov    esi,ecx
c0027e8a:	c1 fe 14             	sar    esi,0x14
c0027e8d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027e90:	89 fb                	mov    ebx,edi
c0027e92:	89 fa                	mov    edx,edi
c0027e94:	c1 e2 0b             	shl    edx,0xb
c0027e97:	c1 e0 0b             	shl    eax,0xb
c0027e9a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e9f:	c1 eb 15             	shr    ebx,0x15
c0027ea2:	09 d8                	or     eax,ebx
c0027ea4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ea7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eaa:	c1 fe 14             	sar    esi,0x14
c0027ead:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027eb0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027eb3:	89 f3                	mov    ebx,esi
c0027eb5:	c1 e3 0b             	shl    ebx,0xb
c0027eb8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027ebb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ebe:	c1 e3 0b             	shl    ebx,0xb
c0027ec1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027ec7:	c1 ee 15             	shr    esi,0x15
c0027eca:	09 f3                	or     ebx,esi
c0027ecc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027ecf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ed2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027ed5:	0f 88 5f 02 00 00    	js     c002813a <__adddf3+0x2cf>
c0027edb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ede:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027ee1:	85 db                	test   ebx,ebx
c0027ee3:	0f 8e c7 00 00 00    	jle    c0027fb0 <__adddf3+0x145>
c0027ee9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027ef0:	75 1a                	jne    c0027f0c <__adddf3+0xa1>
c0027ef2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ef5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027ef8:	0f 84 b2 05 00 00    	je     c00284b0 <__adddf3+0x645>
c0027efe:	4b                   	dec    ebx
c0027eff:	75 23                	jne    c0027f24 <__adddf3+0xb9>
c0027f01:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f04:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f07:	e9 99 00 00 00       	jmp    c0027fa5 <__adddf3+0x13a>
c0027f0c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f0f:	f7 d6                	not    esi
c0027f11:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f17:	0f 84 93 05 00 00    	je     c00284b0 <__adddf3+0x645>
c0027f1d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027f24:	83 fb 1f             	cmp    ebx,0x1f
c0027f27:	7e 42                	jle    c0027f6b <__adddf3+0x100>
c0027f29:	83 fb 3f             	cmp    ebx,0x3f
c0027f2c:	0f 8f 7e 05 00 00    	jg     c00284b0 <__adddf3+0x645>
c0027f32:	83 e3 1f             	and    ebx,0x1f
c0027f35:	89 d9                	mov    ecx,ebx
c0027f37:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027f3a:	d3 ef                	shr    edi,cl
c0027f3c:	31 db                	xor    ebx,ebx
c0027f3e:	85 c9                	test   ecx,ecx
c0027f40:	74 15                	je     c0027f57 <__adddf3+0xec>
c0027f42:	be 20 00 00 00       	mov    esi,0x20
c0027f47:	29 ce                	sub    esi,ecx
c0027f49:	89 f1                	mov    ecx,esi
c0027f4b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f4e:	d3 e6                	shl    esi,cl
c0027f50:	31 db                	xor    ebx,ebx
c0027f52:	85 f6                	test   esi,esi
c0027f54:	0f 95 c3             	setne  bl
c0027f57:	31 c9                	xor    ecx,ecx
c0027f59:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027f5d:	0f 95 c1             	setne  cl
c0027f60:	09 cf                	or     edi,ecx
c0027f62:	09 fb                	or     ebx,edi
c0027f64:	01 da                	add    edx,ebx
c0027f66:	83 d0 00             	adc    eax,0x0
c0027f69:	eb 3a                	jmp    c0027fa5 <__adddf3+0x13a>
c0027f6b:	bf 20 00 00 00       	mov    edi,0x20
c0027f70:	29 df                	sub    edi,ebx
c0027f72:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f75:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f78:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027f7b:	d3 e6                	shl    esi,cl
c0027f7d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f80:	88 d9                	mov    cl,bl
c0027f82:	d3 ef                	shr    edi,cl
c0027f84:	09 fe                	or     esi,edi
c0027f86:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027f89:	88 d9                	mov    cl,bl
c0027f8b:	d3 ef                	shr    edi,cl
c0027f8d:	89 fb                	mov    ebx,edi
c0027f8f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f92:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027f95:	d3 e7                	shl    edi,cl
c0027f97:	85 ff                	test   edi,edi
c0027f99:	0f 95 c1             	setne  cl
c0027f9c:	0f b6 c9             	movzx  ecx,cl
c0027f9f:	09 ce                	or     esi,ecx
c0027fa1:	01 f2                	add    edx,esi
c0027fa3:	11 d8                	adc    eax,ebx
c0027fa5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fa8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027fab:	e9 52 01 00 00       	jmp    c0028102 <__adddf3+0x297>
c0027fb0:	0f 84 d5 00 00 00    	je     c002808b <__adddf3+0x220>
c0027fb6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fb9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027fbc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027fbf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027fc2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fc9:	75 20                	jne    c0027feb <__adddf3+0x180>
c0027fcb:	89 d6                	mov    esi,edx
c0027fcd:	09 c6                	or     esi,eax
c0027fcf:	0f 84 db 04 00 00    	je     c00284b0 <__adddf3+0x645>
c0027fd5:	4b                   	dec    ebx
c0027fd6:	75 29                	jne    c0028001 <__adddf3+0x196>
c0027fd8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fdb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027fde:	01 d1                	add    ecx,edx
c0027fe0:	11 c6                	adc    esi,eax
c0027fe2:	89 f0                	mov    eax,esi
c0027fe4:	89 ca                	mov    edx,ecx
c0027fe6:	e9 17 01 00 00       	jmp    c0028102 <__adddf3+0x297>
c0027feb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027fee:	f7 d6                	not    esi
c0027ff0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ff6:	0f 84 b4 04 00 00    	je     c00284b0 <__adddf3+0x645>
c0027ffc:	0d 00 00 00 80       	or     eax,0x80000000
c0028001:	83 fb 1f             	cmp    ebx,0x1f
c0028004:	7e 48                	jle    c002804e <__adddf3+0x1e3>
c0028006:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028009:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002800c:	83 fb 3f             	cmp    ebx,0x3f
c002800f:	0f 8f 9b 04 00 00    	jg     c00284b0 <__adddf3+0x645>
c0028015:	83 e3 1f             	and    ebx,0x1f
c0028018:	89 d9                	mov    ecx,ebx
c002801a:	89 c7                	mov    edi,eax
c002801c:	d3 ef                	shr    edi,cl
c002801e:	31 db                	xor    ebx,ebx
c0028020:	85 c9                	test   ecx,ecx
c0028022:	74 12                	je     c0028036 <__adddf3+0x1cb>
c0028024:	be 20 00 00 00       	mov    esi,0x20
c0028029:	29 ce                	sub    esi,ecx
c002802b:	89 f1                	mov    ecx,esi
c002802d:	d3 e0                	shl    eax,cl
c002802f:	31 db                	xor    ebx,ebx
c0028031:	85 c0                	test   eax,eax
c0028033:	0f 95 c3             	setne  bl
c0028036:	31 c0                	xor    eax,eax
c0028038:	85 d2                	test   edx,edx
c002803a:	0f 95 c0             	setne  al
c002803d:	09 c7                	or     edi,eax
c002803f:	09 fb                	or     ebx,edi
c0028041:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028044:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028047:	01 da                	add    edx,ebx
c0028049:	83 d6 00             	adc    esi,0x0
c002804c:	eb 39                	jmp    c0028087 <__adddf3+0x21c>
c002804e:	be 20 00 00 00       	mov    esi,0x20
c0028053:	29 de                	sub    esi,ebx
c0028055:	89 c7                	mov    edi,eax
c0028057:	89 f1                	mov    ecx,esi
c0028059:	d3 e7                	shl    edi,cl
c002805b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002805e:	89 d7                	mov    edi,edx
c0028060:	88 d9                	mov    cl,bl
c0028062:	d3 ef                	shr    edi,cl
c0028064:	89 f9                	mov    ecx,edi
c0028066:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028069:	09 cf                	or     edi,ecx
c002806b:	88 d9                	mov    cl,bl
c002806d:	d3 e8                	shr    eax,cl
c002806f:	89 f1                	mov    ecx,esi
c0028071:	d3 e2                	shl    edx,cl
c0028073:	85 d2                	test   edx,edx
c0028075:	0f 95 c2             	setne  dl
c0028078:	0f b6 d2             	movzx  edx,dl
c002807b:	09 d7                	or     edi,edx
c002807d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028080:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028083:	01 fa                	add    edx,edi
c0028085:	11 c6                	adc    esi,eax
c0028087:	89 f0                	mov    eax,esi
c0028089:	eb 77                	jmp    c0028102 <__adddf3+0x297>
c002808b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002808e:	46                   	inc    esi
c002808f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028092:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028098:	75 41                	jne    c00280db <__adddf3+0x270>
c002809a:	89 d3                	mov    ebx,edx
c002809c:	09 c3                	or     ebx,eax
c002809e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00280a5:	75 27                	jne    c00280ce <__adddf3+0x263>
c00280a7:	85 db                	test   ebx,ebx
c00280a9:	0f 84 fb 03 00 00    	je     c00284aa <__adddf3+0x63f>
c00280af:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280b2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00280b5:	0f 84 f5 03 00 00    	je     c00284b0 <__adddf3+0x645>
c00280bb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00280be:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00280c1:	85 c0                	test   eax,eax
c00280c3:	0f 89 91 03 00 00    	jns    c002845a <__adddf3+0x5ef>
c00280c9:	e9 85 03 00 00       	jmp    c0028453 <__adddf3+0x5e8>
c00280ce:	85 db                	test   ebx,ebx
c00280d0:	0f 85 da 03 00 00    	jne    c00284b0 <__adddf3+0x645>
c00280d6:	e9 cf 03 00 00       	jmp    c00284aa <__adddf3+0x63f>
c00280db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00280de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00280e1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280e4:	f7 d1                	not    ecx
c00280e6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00280ec:	0f 84 70 03 00 00    	je     c0028462 <__adddf3+0x5f7>
c00280f2:	d1 ea                	shr    edx,1
c00280f4:	89 c1                	mov    ecx,eax
c00280f6:	c1 e1 1f             	shl    ecx,0x1f
c00280f9:	09 ca                	or     edx,ecx
c00280fb:	d1 e8                	shr    eax,1
c00280fd:	e9 6f 03 00 00       	jmp    c0028471 <__adddf3+0x606>
c0028102:	85 c0                	test   eax,eax
c0028104:	0f 89 67 03 00 00    	jns    c0028471 <__adddf3+0x606>
c002810a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002810d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028110:	f7 d1                	not    ecx
c0028112:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028118:	0f 84 44 03 00 00    	je     c0028462 <__adddf3+0x5f7>
c002811e:	89 d1                	mov    ecx,edx
c0028120:	d1 e9                	shr    ecx,1
c0028122:	83 e2 01             	and    edx,0x1
c0028125:	09 ca                	or     edx,ecx
c0028127:	89 c1                	mov    ecx,eax
c0028129:	c1 e1 1f             	shl    ecx,0x1f
c002812c:	09 ca                	or     edx,ecx
c002812e:	d1 e8                	shr    eax,1
c0028130:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028135:	e9 37 03 00 00       	jmp    c0028471 <__adddf3+0x606>
c002813a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002813d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028143:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028146:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028149:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002814f:	29 de                	sub    esi,ebx
c0028151:	85 f6                	test   esi,esi
c0028153:	0f 8e bd 00 00 00    	jle    c0028216 <__adddf3+0x3ab>
c0028159:	85 db                	test   ebx,ebx
c002815b:	75 17                	jne    c0028174 <__adddf3+0x309>
c002815d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028160:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028163:	0f 84 47 03 00 00    	je     c00284b0 <__adddf3+0x645>
c0028169:	4e                   	dec    esi
c002816a:	75 20                	jne    c002818c <__adddf3+0x321>
c002816c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002816f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028172:	eb 5b                	jmp    c00281cf <__adddf3+0x364>
c0028174:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028177:	f7 d3                	not    ebx
c0028179:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002817f:	0f 84 2b 03 00 00    	je     c00284b0 <__adddf3+0x645>
c0028185:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002818c:	83 fe 1f             	cmp    esi,0x1f
c002818f:	7e 49                	jle    c00281da <__adddf3+0x36f>
c0028191:	83 fe 3f             	cmp    esi,0x3f
c0028194:	0f 8f 16 03 00 00    	jg     c00284b0 <__adddf3+0x645>
c002819a:	83 e6 1f             	and    esi,0x1f
c002819d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00281a0:	89 f1                	mov    ecx,esi
c00281a2:	d3 ef                	shr    edi,cl
c00281a4:	31 db                	xor    ebx,ebx
c00281a6:	85 f6                	test   esi,esi
c00281a8:	74 13                	je     c00281bd <__adddf3+0x352>
c00281aa:	b9 20 00 00 00       	mov    ecx,0x20
c00281af:	29 f1                	sub    ecx,esi
c00281b1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281b4:	d3 e6                	shl    esi,cl
c00281b6:	31 db                	xor    ebx,ebx
c00281b8:	85 f6                	test   esi,esi
c00281ba:	0f 95 c3             	setne  bl
c00281bd:	31 c9                	xor    ecx,ecx
c00281bf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00281c3:	0f 95 c1             	setne  cl
c00281c6:	09 cf                	or     edi,ecx
c00281c8:	09 fb                	or     ebx,edi
c00281ca:	29 da                	sub    edx,ebx
c00281cc:	83 d8 00             	sbb    eax,0x0
c00281cf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281d5:	e9 aa 01 00 00       	jmp    c0028384 <__adddf3+0x519>
c00281da:	bf 20 00 00 00       	mov    edi,0x20
c00281df:	29 f7                	sub    edi,esi
c00281e1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281e4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281e7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00281ea:	d3 e3                	shl    ebx,cl
c00281ec:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00281ef:	89 f1                	mov    ecx,esi
c00281f1:	d3 ef                	shr    edi,cl
c00281f3:	09 fb                	or     ebx,edi
c00281f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00281f8:	89 f1                	mov    ecx,esi
c00281fa:	d3 ef                	shr    edi,cl
c00281fc:	89 fe                	mov    esi,edi
c00281fe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028201:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028204:	d3 e7                	shl    edi,cl
c0028206:	85 ff                	test   edi,edi
c0028208:	0f 95 c1             	setne  cl
c002820b:	0f b6 c9             	movzx  ecx,cl
c002820e:	09 cb                	or     ebx,ecx
c0028210:	29 da                	sub    edx,ebx
c0028212:	19 f0                	sbb    eax,esi
c0028214:	eb b9                	jmp    c00281cf <__adddf3+0x364>
c0028216:	0f 84 cd 00 00 00    	je     c00282e9 <__adddf3+0x47e>
c002821c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002821f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028222:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028225:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028229:	75 1b                	jne    c0028246 <__adddf3+0x3db>
c002822b:	89 d6                	mov    esi,edx
c002822d:	09 c6                	or     esi,eax
c002822f:	0f 84 7b 02 00 00    	je     c00284b0 <__adddf3+0x645>
c0028235:	4b                   	dec    ebx
c0028236:	75 24                	jne    c002825c <__adddf3+0x3f1>
c0028238:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002823b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002823e:	29 d1                	sub    ecx,edx
c0028240:	19 c6                	sbb    esi,eax
c0028242:	89 ca                	mov    edx,ecx
c0028244:	eb 61                	jmp    c00282a7 <__adddf3+0x43c>
c0028246:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028249:	f7 d6                	not    esi
c002824b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028251:	0f 84 59 02 00 00    	je     c00284b0 <__adddf3+0x645>
c0028257:	0d 00 00 00 80       	or     eax,0x80000000
c002825c:	83 fb 1f             	cmp    ebx,0x1f
c002825f:	7e 4d                	jle    c00282ae <__adddf3+0x443>
c0028261:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028264:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028267:	83 fb 3f             	cmp    ebx,0x3f
c002826a:	0f 8f 40 02 00 00    	jg     c00284b0 <__adddf3+0x645>
c0028270:	83 e3 1f             	and    ebx,0x1f
c0028273:	89 d9                	mov    ecx,ebx
c0028275:	89 c7                	mov    edi,eax
c0028277:	d3 ef                	shr    edi,cl
c0028279:	31 db                	xor    ebx,ebx
c002827b:	85 c9                	test   ecx,ecx
c002827d:	74 12                	je     c0028291 <__adddf3+0x426>
c002827f:	be 20 00 00 00       	mov    esi,0x20
c0028284:	29 ce                	sub    esi,ecx
c0028286:	89 f1                	mov    ecx,esi
c0028288:	d3 e0                	shl    eax,cl
c002828a:	31 db                	xor    ebx,ebx
c002828c:	85 c0                	test   eax,eax
c002828e:	0f 95 c3             	setne  bl
c0028291:	31 c0                	xor    eax,eax
c0028293:	85 d2                	test   edx,edx
c0028295:	0f 95 c0             	setne  al
c0028298:	09 c7                	or     edi,eax
c002829a:	09 fb                	or     ebx,edi
c002829c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002829f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00282a2:	29 da                	sub    edx,ebx
c00282a4:	83 de 00             	sbb    esi,0x0
c00282a7:	89 f0                	mov    eax,esi
c00282a9:	e9 d6 00 00 00       	jmp    c0028384 <__adddf3+0x519>
c00282ae:	be 20 00 00 00       	mov    esi,0x20
c00282b3:	29 de                	sub    esi,ebx
c00282b5:	89 c7                	mov    edi,eax
c00282b7:	89 f1                	mov    ecx,esi
c00282b9:	d3 e7                	shl    edi,cl
c00282bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00282be:	89 d7                	mov    edi,edx
c00282c0:	88 d9                	mov    cl,bl
c00282c2:	d3 ef                	shr    edi,cl
c00282c4:	89 f9                	mov    ecx,edi
c00282c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282c9:	09 cf                	or     edi,ecx
c00282cb:	88 d9                	mov    cl,bl
c00282cd:	d3 e8                	shr    eax,cl
c00282cf:	89 f1                	mov    ecx,esi
c00282d1:	d3 e2                	shl    edx,cl
c00282d3:	85 d2                	test   edx,edx
c00282d5:	0f 95 c2             	setne  dl
c00282d8:	0f b6 d2             	movzx  edx,dl
c00282db:	09 d7                	or     edi,edx
c00282dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00282e3:	29 fa                	sub    edx,edi
c00282e5:	19 c6                	sbb    esi,eax
c00282e7:	eb be                	jmp    c00282a7 <__adddf3+0x43c>
c00282e9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00282ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282ef:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00282f5:	75 6a                	jne    c0028361 <__adddf3+0x4f6>
c00282f7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00282fb:	75 58                	jne    c0028355 <__adddf3+0x4ea>
c00282fd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028300:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028303:	89 d6                	mov    esi,edx
c0028305:	09 c6                	or     esi,eax
c0028307:	75 17                	jne    c0028320 <__adddf3+0x4b5>
c0028309:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002830c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002830f:	85 db                	test   ebx,ebx
c0028311:	0f 85 99 01 00 00    	jne    c00284b0 <__adddf3+0x645>
c0028317:	31 ff                	xor    edi,edi
c0028319:	31 c9                	xor    ecx,ecx
c002831b:	e9 90 01 00 00       	jmp    c00284b0 <__adddf3+0x645>
c0028320:	85 db                	test   ebx,ebx
c0028322:	0f 84 88 01 00 00    	je     c00284b0 <__adddf3+0x645>
c0028328:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002832b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002832e:	85 c0                	test   eax,eax
c0028330:	79 10                	jns    c0028342 <__adddf3+0x4d7>
c0028332:	31 c9                	xor    ecx,ecx
c0028334:	f7 da                	neg    edx
c0028336:	0f 95 c1             	setne  cl
c0028339:	01 c8                	add    eax,ecx
c002833b:	f7 d8                	neg    eax
c002833d:	e9 2f 01 00 00       	jmp    c0028471 <__adddf3+0x606>
c0028342:	31 ff                	xor    edi,edi
c0028344:	31 c9                	xor    ecx,ecx
c0028346:	89 c3                	mov    ebx,eax
c0028348:	09 d3                	or     ebx,edx
c002834a:	0f 84 60 01 00 00    	je     c00284b0 <__adddf3+0x645>
c0028350:	e9 05 01 00 00       	jmp    c002845a <__adddf3+0x5ef>
c0028355:	31 ff                	xor    edi,edi
c0028357:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002835c:	e9 4f 01 00 00       	jmp    c00284b0 <__adddf3+0x645>
c0028361:	89 c1                	mov    ecx,eax
c0028363:	89 d0                	mov    eax,edx
c0028365:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028368:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002836b:	89 ca                	mov    edx,ecx
c002836d:	85 c9                	test   ecx,ecx
c002836f:	79 2c                	jns    c002839d <__adddf3+0x532>
c0028371:	31 c9                	xor    ecx,ecx
c0028373:	f7 d8                	neg    eax
c0028375:	0f 95 c1             	setne  cl
c0028378:	01 ca                	add    edx,ecx
c002837a:	f7 da                	neg    edx
c002837c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002837f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028382:	eb 19                	jmp    c002839d <__adddf3+0x532>
c0028384:	85 c0                	test   eax,eax
c0028386:	0f 89 e5 00 00 00    	jns    c0028471 <__adddf3+0x606>
c002838c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028391:	89 c1                	mov    ecx,eax
c0028393:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028396:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028399:	89 d0                	mov    eax,edx
c002839b:	89 ca                	mov    edx,ecx
c002839d:	85 d2                	test   edx,edx
c002839f:	74 59                	je     c00283fa <__adddf3+0x58f>
c00283a1:	0f bd da             	bsr    ebx,edx
c00283a4:	83 f3 1f             	xor    ebx,0x1f
c00283a7:	88 d9                	mov    cl,bl
c00283a9:	d3 e2                	shl    edx,cl
c00283ab:	bf 20 00 00 00       	mov    edi,0x20
c00283b0:	89 f9                	mov    ecx,edi
c00283b2:	29 d9                	sub    ecx,ebx
c00283b4:	89 c6                	mov    esi,eax
c00283b6:	d3 ee                	shr    esi,cl
c00283b8:	09 d6                	or     esi,edx
c00283ba:	88 d9                	mov    cl,bl
c00283bc:	d3 e0                	shl    eax,cl
c00283be:	89 c2                	mov    edx,eax
c00283c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283c3:	25 ff 07 00 00       	and    eax,0x7ff
c00283c8:	39 d8                	cmp    eax,ebx
c00283ca:	7f 22                	jg     c00283ee <__adddf3+0x583>
c00283cc:	29 c3                	sub    ebx,eax
c00283ce:	43                   	inc    ebx
c00283cf:	88 d9                	mov    cl,bl
c00283d1:	d3 ea                	shr    edx,cl
c00283d3:	29 df                	sub    edi,ebx
c00283d5:	89 f9                	mov    ecx,edi
c00283d7:	89 f0                	mov    eax,esi
c00283d9:	d3 e0                	shl    eax,cl
c00283db:	09 c2                	or     edx,eax
c00283dd:	89 f0                	mov    eax,esi
c00283df:	88 d9                	mov    cl,bl
c00283e1:	d3 e8                	shr    eax,cl
c00283e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283e6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00283ec:	eb 6f                	jmp    c002845d <__adddf3+0x5f2>
c00283ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283f1:	29 d8                	sub    eax,ebx
c00283f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283f6:	89 f0                	mov    eax,esi
c00283f8:	eb 59                	jmp    c0028453 <__adddf3+0x5e8>
c00283fa:	85 c0                	test   eax,eax
c00283fc:	74 6a                	je     c0028468 <__adddf3+0x5fd>
c00283fe:	0f bd c8             	bsr    ecx,eax
c0028401:	83 f1 1f             	xor    ecx,0x1f
c0028404:	d3 e0                	shl    eax,cl
c0028406:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028409:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002840f:	83 c1 20             	add    ecx,0x20
c0028412:	39 cb                	cmp    ebx,ecx
c0028414:	7f 35                	jg     c002844b <__adddf3+0x5e0>
c0028416:	29 d9                	sub    ecx,ebx
c0028418:	8d 71 01             	lea    esi,[ecx+0x1]
c002841b:	83 fe 1f             	cmp    esi,0x1f
c002841e:	7e 09                	jle    c0028429 <__adddf3+0x5be>
c0028420:	83 e9 1f             	sub    ecx,0x1f
c0028423:	d3 e8                	shr    eax,cl
c0028425:	89 c3                	mov    ebx,eax
c0028427:	eb 11                	jmp    c002843a <__adddf3+0x5cf>
c0028429:	b9 20 00 00 00       	mov    ecx,0x20
c002842e:	29 f1                	sub    ecx,esi
c0028430:	89 c3                	mov    ebx,eax
c0028432:	d3 e3                	shl    ebx,cl
c0028434:	89 f1                	mov    ecx,esi
c0028436:	d3 e8                	shr    eax,cl
c0028438:	89 c2                	mov    edx,eax
c002843a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002843d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028442:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028445:	89 d0                	mov    eax,edx
c0028447:	89 da                	mov    edx,ebx
c0028449:	eb 26                	jmp    c0028471 <__adddf3+0x606>
c002844b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002844e:	29 cf                	sub    edi,ecx
c0028450:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028453:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028458:	eb 17                	jmp    c0028471 <__adddf3+0x606>
c002845a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002845d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028460:	eb 0f                	jmp    c0028471 <__adddf3+0x606>
c0028462:	31 d2                	xor    edx,edx
c0028464:	31 c0                	xor    eax,eax
c0028466:	eb 09                	jmp    c0028471 <__adddf3+0x606>
c0028468:	89 c2                	mov    edx,eax
c002846a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028471:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028474:	c1 e1 14             	shl    ecx,0x14
c0028477:	89 c3                	mov    ebx,eax
c0028479:	c1 eb 0b             	shr    ebx,0xb
c002847c:	09 d9                	or     ecx,ebx
c002847e:	89 d3                	mov    ebx,edx
c0028480:	c1 eb 0b             	shr    ebx,0xb
c0028483:	c1 e0 15             	shl    eax,0x15
c0028486:	09 d8                	or     eax,ebx
c0028488:	89 c7                	mov    edi,eax
c002848a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028490:	0f 95 c0             	setne  al
c0028493:	89 c6                	mov    esi,eax
c0028495:	09 f3                	or     ebx,esi
c0028497:	83 e3 01             	and    ebx,0x1
c002849a:	c1 ea 0a             	shr    edx,0xa
c002849d:	21 da                	and    edx,ebx
c002849f:	89 f8                	mov    eax,edi
c00284a1:	01 d0                	add    eax,edx
c00284a3:	83 d1 00             	adc    ecx,0x0
c00284a6:	89 c7                	mov    edi,eax
c00284a8:	eb 06                	jmp    c00284b0 <__adddf3+0x645>
c00284aa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00284ad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00284b0:	89 f8                	mov    eax,edi
c00284b2:	89 ca                	mov    edx,ecx
c00284b4:	83 c4 24             	add    esp,0x24
c00284b7:	5b                   	pop    ebx
c00284b8:	5e                   	pop    esi
c00284b9:	5f                   	pop    edi
c00284ba:	5d                   	pop    ebp
c00284bb:	c3                   	ret    

c00284bc <__subdf3>:
c00284bc:	55                   	push   ebp
c00284bd:	89 e5                	mov    ebp,esp
c00284bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00284c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00284c5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00284cb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00284ce:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00284d1:	5d                   	pop    ebp
c00284d2:	e9 94 f9 ff ff       	jmp    c0027e6b <__adddf3>

c00284d7 <__negdf2>:
c00284d7:	55                   	push   ebp
c00284d8:	89 e5                	mov    ebp,esp
c00284da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00284dd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00284e0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00284e6:	5d                   	pop    ebp
c00284e7:	c3                   	ret    

c00284e8 <__muldf3>:
c00284e8:	55                   	push   ebp
c00284e9:	89 e5                	mov    ebp,esp
c00284eb:	57                   	push   edi
c00284ec:	56                   	push   esi
c00284ed:	53                   	push   ebx
c00284ee:	83 ec 24             	sub    esp,0x24
c00284f1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00284f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00284f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00284fd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028500:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028503:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028506:	89 c8                	mov    eax,ecx
c0028508:	c1 f8 14             	sar    eax,0x14
c002850b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002850e:	89 f8                	mov    eax,edi
c0028510:	89 fb                	mov    ebx,edi
c0028512:	c1 e3 0b             	shl    ebx,0xb
c0028515:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028518:	c1 e1 0b             	shl    ecx,0xb
c002851b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028521:	c1 e8 15             	shr    eax,0x15
c0028524:	09 c1                	or     ecx,eax
c0028526:	89 d6                	mov    esi,edx
c0028528:	89 d0                	mov    eax,edx
c002852a:	c1 f8 14             	sar    eax,0x14
c002852d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028530:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028533:	89 c3                	mov    ebx,eax
c0028535:	c1 e3 0b             	shl    ebx,0xb
c0028538:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002853b:	c1 e6 0b             	shl    esi,0xb
c002853e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028544:	c1 e8 15             	shr    eax,0x15
c0028547:	09 c6                	or     esi,eax
c0028549:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002854c:	25 ff 07 00 00       	and    eax,0x7ff
c0028551:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028554:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028557:	25 ff 07 00 00       	and    eax,0x7ff
c002855c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002855f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028562:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028565:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002856c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002856f:	40                   	inc    eax
c0028570:	a9 fe 07 00 00       	test   eax,0x7fe
c0028575:	0f 85 8d 00 00 00    	jne    c0028608 <__muldf3+0x120>
c002857b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002857e:	09 c8                	or     eax,ecx
c0028580:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028584:	74 44                	je     c00285ca <__muldf3+0xe2>
c0028586:	85 c0                	test   eax,eax
c0028588:	0f 85 31 02 00 00    	jne    c00287bf <__muldf3+0x2d7>
c002858e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028591:	40                   	inc    eax
c0028592:	a9 fe 07 00 00       	test   eax,0x7fe
c0028597:	75 13                	jne    c00285ac <__muldf3+0xc4>
c0028599:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002859c:	09 f1                	or     ecx,esi
c002859e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00285a2:	74 22                	je     c00285c6 <__muldf3+0xde>
c00285a4:	85 c9                	test   ecx,ecx
c00285a6:	0f 85 0d 02 00 00    	jne    c00287b9 <__muldf3+0x2d1>
c00285ac:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00285b0:	0f 89 09 02 00 00    	jns    c00287bf <__muldf3+0x2d7>
c00285b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00285b9:	05 00 00 00 80       	add    eax,0x80000000
c00285be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285c1:	e9 f9 01 00 00       	jmp    c00287bf <__muldf3+0x2d7>
c00285c6:	85 c9                	test   ecx,ecx
c00285c8:	eb 2e                	jmp    c00285f8 <__muldf3+0x110>
c00285ca:	85 c0                	test   eax,eax
c00285cc:	74 20                	je     c00285ee <__muldf3+0x106>
c00285ce:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00285d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285d4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285d7:	c1 ef 1f             	shr    edi,0x1f
c00285da:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00285dd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00285e0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00285e3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00285e6:	09 f9                	or     ecx,edi
c00285e8:	78 1e                	js     c0028608 <__muldf3+0x120>
c00285ea:	89 c3                	mov    ebx,eax
c00285ec:	eb e0                	jmp    c00285ce <__muldf3+0xe6>
c00285ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00285f1:	f7 d0                	not    eax
c00285f3:	a9 ff 07 00 00       	test   eax,0x7ff
c00285f8:	75 b2                	jne    c00285ac <__muldf3+0xc4>
c00285fa:	31 ff                	xor    edi,edi
c00285fc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028603:	e9 b7 01 00 00       	jmp    c00287bf <__muldf3+0x2d7>
c0028608:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002860b:	40                   	inc    eax
c002860c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028611:	75 57                	jne    c002866a <__muldf3+0x182>
c0028613:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028616:	09 f0                	or     eax,esi
c0028618:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002861c:	74 23                	je     c0028641 <__muldf3+0x159>
c002861e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028622:	0f 89 91 01 00 00    	jns    c00287b9 <__muldf3+0x2d1>
c0028628:	85 c0                	test   eax,eax
c002862a:	0f 85 89 01 00 00    	jne    c00287b9 <__muldf3+0x2d1>
c0028630:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028633:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028639:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002863c:	e9 7e 01 00 00       	jmp    c00287bf <__muldf3+0x2d7>
c0028641:	85 c0                	test   eax,eax
c0028643:	75 0c                	jne    c0028651 <__muldf3+0x169>
c0028645:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028649:	0f 89 6a 01 00 00    	jns    c00287b9 <__muldf3+0x2d1>
c002864f:	eb df                	jmp    c0028630 <__muldf3+0x148>
c0028651:	01 f6                	add    esi,esi
c0028653:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028656:	c1 ea 1f             	shr    edx,0x1f
c0028659:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002865c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002865f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028662:	09 d6                	or     esi,edx
c0028664:	78 04                	js     c002866a <__muldf3+0x182>
c0028666:	89 c3                	mov    ebx,eax
c0028668:	eb e7                	jmp    c0028651 <__muldf3+0x169>
c002866a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028670:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028676:	89 c8                	mov    eax,ecx
c0028678:	f7 e6                	mul    esi
c002867a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002867d:	89 c7                	mov    edi,eax
c002867f:	89 c8                	mov    eax,ecx
c0028681:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028684:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028687:	89 c1                	mov    ecx,eax
c0028689:	89 f0                	mov    eax,esi
c002868b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002868e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028691:	89 c6                	mov    esi,eax
c0028693:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028696:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028699:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002869c:	31 c0                	xor    eax,eax
c002869e:	01 f1                	add    ecx,esi
c00286a0:	0f 92 c0             	setb   al
c00286a3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00286a6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00286a9:	83 d6 00             	adc    esi,0x0
c00286ac:	01 c7                	add    edi,eax
c00286ae:	83 d6 00             	adc    esi,0x0
c00286b1:	01 ca                	add    edx,ecx
c00286b3:	0f 92 c1             	setb   cl
c00286b6:	0f b6 c9             	movzx  ecx,cl
c00286b9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00286bc:	83 d6 00             	adc    esi,0x0
c00286bf:	01 cf                	add    edi,ecx
c00286c1:	83 d6 00             	adc    esi,0x0
c00286c4:	31 c9                	xor    ecx,ecx
c00286c6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00286c9:	0f 95 c1             	setne  cl
c00286cc:	09 cf                	or     edi,ecx
c00286ce:	85 f6                	test   esi,esi
c00286d0:	78 0c                	js     c00286de <__muldf3+0x1f6>
c00286d2:	01 f6                	add    esi,esi
c00286d4:	89 f8                	mov    eax,edi
c00286d6:	c1 e8 1f             	shr    eax,0x1f
c00286d9:	09 c6                	or     esi,eax
c00286db:	01 ff                	add    edi,edi
c00286dd:	4b                   	dec    ebx
c00286de:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00286e4:	0f 8f 85 00 00 00    	jg     c002876f <__muldf3+0x287>
c00286ea:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00286f0:	85 db                	test   ebx,ebx
c00286f2:	0f 8f 84 00 00 00    	jg     c002877c <__muldf3+0x294>
c00286f8:	83 fb cc             	cmp    ebx,0xffffffcc
c00286fb:	7c 79                	jl     c0028776 <__muldf3+0x28e>
c00286fd:	ba 01 00 00 00       	mov    edx,0x1
c0028702:	29 da                	sub    edx,ebx
c0028704:	81 ce 00 00 00 80    	or     esi,0x80000000
c002870a:	83 fa 1f             	cmp    edx,0x1f
c002870d:	7e 30                	jle    c002873f <__muldf3+0x257>
c002870f:	83 fa 20             	cmp    edx,0x20
c0028712:	75 0b                	jne    c002871f <__muldf3+0x237>
c0028714:	31 c0                	xor    eax,eax
c0028716:	85 ff                	test   edi,edi
c0028718:	0f 95 c0             	setne  al
c002871b:	89 c7                	mov    edi,eax
c002871d:	eb 1a                	jmp    c0028739 <__muldf3+0x251>
c002871f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028722:	89 f0                	mov    eax,esi
c0028724:	d3 e0                	shl    eax,cl
c0028726:	09 f8                	or     eax,edi
c0028728:	0f 95 c0             	setne  al
c002872b:	0f b6 c0             	movzx  eax,al
c002872e:	89 c7                	mov    edi,eax
c0028730:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028735:	29 d9                	sub    ecx,ebx
c0028737:	d3 ee                	shr    esi,cl
c0028739:	09 f7                	or     edi,esi
c002873b:	31 db                	xor    ebx,ebx
c002873d:	eb 3b                	jmp    c002877a <__muldf3+0x292>
c002873f:	83 c3 1f             	add    ebx,0x1f
c0028742:	89 f0                	mov    eax,esi
c0028744:	88 d9                	mov    cl,bl
c0028746:	d3 e0                	shl    eax,cl
c0028748:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002874b:	89 f8                	mov    eax,edi
c002874d:	88 d1                	mov    cl,dl
c002874f:	d3 e8                	shr    eax,cl
c0028751:	89 c1                	mov    ecx,eax
c0028753:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028756:	09 c8                	or     eax,ecx
c0028758:	88 d9                	mov    cl,bl
c002875a:	d3 e7                	shl    edi,cl
c002875c:	31 db                	xor    ebx,ebx
c002875e:	85 ff                	test   edi,edi
c0028760:	0f 95 c3             	setne  bl
c0028763:	89 df                	mov    edi,ebx
c0028765:	09 c7                	or     edi,eax
c0028767:	88 d1                	mov    cl,dl
c0028769:	d3 ee                	shr    esi,cl
c002876b:	31 db                	xor    ebx,ebx
c002876d:	eb 0d                	jmp    c002877c <__muldf3+0x294>
c002876f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028774:	eb 02                	jmp    c0028778 <__muldf3+0x290>
c0028776:	31 db                	xor    ebx,ebx
c0028778:	31 ff                	xor    edi,edi
c002877a:	31 f6                	xor    esi,esi
c002877c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002877f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028782:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028787:	09 c3                	or     ebx,eax
c0028789:	c1 e3 14             	shl    ebx,0x14
c002878c:	89 f0                	mov    eax,esi
c002878e:	c1 e8 0b             	shr    eax,0xb
c0028791:	09 c3                	or     ebx,eax
c0028793:	89 f8                	mov    eax,edi
c0028795:	c1 e8 0b             	shr    eax,0xb
c0028798:	c1 e6 15             	shl    esi,0x15
c002879b:	09 c6                	or     esi,eax
c002879d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00287a3:	0f 95 c1             	setne  cl
c00287a6:	09 c8                	or     eax,ecx
c00287a8:	83 e0 01             	and    eax,0x1
c00287ab:	c1 ef 0a             	shr    edi,0xa
c00287ae:	21 c7                	and    edi,eax
c00287b0:	01 f7                	add    edi,esi
c00287b2:	83 d3 00             	adc    ebx,0x0
c00287b5:	89 da                	mov    edx,ebx
c00287b7:	eb 03                	jmp    c00287bc <__muldf3+0x2d4>
c00287b9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00287bc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00287bf:	89 f8                	mov    eax,edi
c00287c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00287c4:	83 c4 24             	add    esp,0x24
c00287c7:	5b                   	pop    ebx
c00287c8:	5e                   	pop    esi
c00287c9:	5f                   	pop    edi
c00287ca:	5d                   	pop    ebp
c00287cb:	c3                   	ret    

c00287cc <__divdf3>:
c00287cc:	55                   	push   ebp
c00287cd:	89 e5                	mov    ebp,esp
c00287cf:	57                   	push   edi
c00287d0:	56                   	push   esi
c00287d1:	53                   	push   ebx
c00287d2:	83 ec 2c             	sub    esp,0x2c
c00287d5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00287d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00287db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00287de:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00287e1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00287e4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00287e7:	89 ce                	mov    esi,ecx
c00287e9:	89 c8                	mov    eax,ecx
c00287eb:	c1 f8 14             	sar    eax,0x14
c00287ee:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00287f1:	89 f8                	mov    eax,edi
c00287f3:	89 fb                	mov    ebx,edi
c00287f5:	c1 e3 0b             	shl    ebx,0xb
c00287f8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00287fb:	c1 e6 0b             	shl    esi,0xb
c00287fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028804:	c1 e8 15             	shr    eax,0x15
c0028807:	09 c6                	or     esi,eax
c0028809:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002880c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002880f:	89 c2                	mov    edx,eax
c0028811:	c1 fa 14             	sar    edx,0x14
c0028814:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028817:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002881a:	89 de                	mov    esi,ebx
c002881c:	c1 e6 0b             	shl    esi,0xb
c002881f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028822:	c1 e0 0b             	shl    eax,0xb
c0028825:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002882a:	c1 eb 15             	shr    ebx,0x15
c002882d:	09 d8                	or     eax,ebx
c002882f:	89 c2                	mov    edx,eax
c0028831:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028834:	25 ff 07 00 00       	and    eax,0x7ff
c0028839:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002883c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002883f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028845:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028848:	29 d8                	sub    eax,ebx
c002884a:	05 ff 03 00 00       	add    eax,0x3ff
c002884f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028852:	46                   	inc    esi
c0028853:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028859:	0f 85 a5 00 00 00    	jne    c0028904 <__divdf3+0x138>
c002885f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028862:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028865:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028869:	74 2a                	je     c0028895 <__divdf3+0xc9>
c002886b:	85 f6                	test   esi,esi
c002886d:	0f 85 cc 02 00 00    	jne    c0028b3f <__divdf3+0x373>
c0028873:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028876:	40                   	inc    eax
c0028877:	a9 fe 07 00 00       	test   eax,0x7fe
c002887c:	75 26                	jne    c00288a4 <__divdf3+0xd8>
c002887e:	85 db                	test   ebx,ebx
c0028880:	74 22                	je     c00288a4 <__divdf3+0xd8>
c0028882:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028885:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028888:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002888b:	09 d0                	or     eax,edx
c002888d:	0f 85 ac 02 00 00    	jne    c0028b3f <__divdf3+0x373>
c0028893:	eb 63                	jmp    c00288f8 <__divdf3+0x12c>
c0028895:	85 f6                	test   esi,esi
c0028897:	75 22                	jne    c00288bb <__divdf3+0xef>
c0028899:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002889c:	40                   	inc    eax
c002889d:	a9 fe 07 00 00       	test   eax,0x7fe
c00288a2:	74 36                	je     c00288da <__divdf3+0x10e>
c00288a4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00288a8:	0f 89 91 02 00 00    	jns    c0028b3f <__divdf3+0x373>
c00288ae:	89 f8                	mov    eax,edi
c00288b0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00288b6:	e9 80 02 00 00       	jmp    c0028b3b <__divdf3+0x36f>
c00288bb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00288be:	01 f6                	add    esi,esi
c00288c0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00288c3:	c1 ef 1f             	shr    edi,0x1f
c00288c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00288c9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00288cc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00288cf:	09 f7                	or     edi,esi
c00288d1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00288d4:	78 2e                	js     c0028904 <__divdf3+0x138>
c00288d6:	89 c8                	mov    eax,ecx
c00288d8:	eb e1                	jmp    c00288bb <__divdf3+0xef>
c00288da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00288dd:	09 d0                	or     eax,edx
c00288df:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00288e3:	74 0f                	je     c00288f4 <__divdf3+0x128>
c00288e5:	85 c0                	test   eax,eax
c00288e7:	74 bb                	je     c00288a4 <__divdf3+0xd8>
c00288e9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00288ec:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00288ef:	e9 4b 02 00 00       	jmp    c0028b3f <__divdf3+0x373>
c00288f4:	85 c0                	test   eax,eax
c00288f6:	75 ac                	jne    c00288a4 <__divdf3+0xd8>
c00288f8:	31 ff                	xor    edi,edi
c00288fa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00288ff:	e9 3b 02 00 00       	jmp    c0028b3f <__divdf3+0x373>
c0028904:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028907:	8d 4f 01             	lea    ecx,[edi+0x1]
c002890a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028910:	75 6b                	jne    c002897d <__divdf3+0x1b1>
c0028912:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028915:	09 d6                	or     esi,edx
c0028917:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002891b:	74 28                	je     c0028945 <__divdf3+0x179>
c002891d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028920:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028923:	85 f6                	test   esi,esi
c0028925:	0f 85 14 02 00 00    	jne    c0028b3f <__divdf3+0x373>
c002892b:	31 ff                	xor    edi,edi
c002892d:	31 c9                	xor    ecx,ecx
c002892f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028932:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028935:	0f 89 04 02 00 00    	jns    c0028b3f <__divdf3+0x373>
c002893b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028940:	e9 fa 01 00 00       	jmp    c0028b3f <__divdf3+0x373>
c0028945:	85 f6                	test   esi,esi
c0028947:	75 1b                	jne    c0028964 <__divdf3+0x198>
c0028949:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002894c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002894f:	25 00 00 00 80       	and    eax,0x80000000
c0028954:	31 c9                	xor    ecx,ecx
c0028956:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002895b:	89 cf                	mov    edi,ecx
c002895d:	89 c1                	mov    ecx,eax
c002895f:	e9 db 01 00 00       	jmp    c0028b3f <__divdf3+0x373>
c0028964:	01 d2                	add    edx,edx
c0028966:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028969:	c1 eb 1f             	shr    ebx,0x1f
c002896c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002896f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028972:	8d 48 01             	lea    ecx,[eax+0x1]
c0028975:	09 da                	or     edx,ebx
c0028977:	78 04                	js     c002897d <__divdf3+0x1b1>
c0028979:	89 c8                	mov    eax,ecx
c002897b:	eb e7                	jmp    c0028964 <__divdf3+0x198>
c002897d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028980:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028986:	81 ca 00 00 00 80    	or     edx,0x80000000
c002898c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002898f:	39 d6                	cmp    esi,edx
c0028991:	77 0d                	ja     c00289a0 <__divdf3+0x1d4>
c0028993:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028996:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028999:	72 1b                	jb     c00289b6 <__divdf3+0x1ea>
c002899b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002899e:	75 16                	jne    c00289b6 <__divdf3+0x1ea>
c00289a0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00289a3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00289a6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00289a9:	83 de 00             	sbb    esi,0x0
c00289ac:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00289af:	ba 01 00 00 00       	mov    edx,0x1
c00289b4:	eb 02                	jmp    c00289b8 <__divdf3+0x1ec>
c00289b6:	31 d2                	xor    edx,edx
c00289b8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00289bf:	31 ff                	xor    edi,edi
c00289c1:	01 ff                	add    edi,edi
c00289c3:	89 d1                	mov    ecx,edx
c00289c5:	c1 e9 1f             	shr    ecx,0x1f
c00289c8:	09 cf                	or     edi,ecx
c00289ca:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00289cd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00289d0:	89 da                	mov    edx,ebx
c00289d2:	89 f3                	mov    ebx,esi
c00289d4:	8d 34 36             	lea    esi,[esi+esi*1]
c00289d7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289da:	c1 e9 1f             	shr    ecx,0x1f
c00289dd:	09 ce                	or     esi,ecx
c00289df:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289e2:	01 c9                	add    ecx,ecx
c00289e4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00289e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00289ea:	85 db                	test   ebx,ebx
c00289ec:	78 29                	js     c0028a17 <__divdf3+0x24b>
c00289ee:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00289f1:	72 07                	jb     c00289fa <__divdf3+0x22e>
c00289f3:	75 3c                	jne    c0028a31 <__divdf3+0x265>
c00289f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00289f8:	77 37                	ja     c0028a31 <__divdf3+0x265>
c00289fa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00289fd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028a00:	31 d2                	xor    edx,edx
c0028a02:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028a05:	0f 97 c2             	seta   dl
c0028a08:	29 d6                	sub    esi,edx
c0028a0a:	89 d9                	mov    ecx,ebx
c0028a0c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028a0f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028a12:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028a15:	eb 17                	jmp    c0028a2e <__divdf3+0x262>
c0028a17:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028a1a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a1d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028a20:	0f 97 c1             	seta   cl
c0028a23:	0f b6 c9             	movzx  ecx,cl
c0028a26:	29 ce                	sub    esi,ecx
c0028a28:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028a2b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028a2e:	83 ca 01             	or     edx,0x1
c0028a31:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028a34:	75 8b                	jne    c00289c1 <__divdf3+0x1f5>
c0028a36:	c1 e7 09             	shl    edi,0x9
c0028a39:	89 d1                	mov    ecx,edx
c0028a3b:	c1 e9 17             	shr    ecx,0x17
c0028a3e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028a41:	09 f3                	or     ebx,esi
c0028a43:	0f 95 c3             	setne  bl
c0028a46:	0f b6 db             	movzx  ebx,bl
c0028a49:	c1 e2 09             	shl    edx,0x9
c0028a4c:	09 d3                	or     ebx,edx
c0028a4e:	89 ca                	mov    edx,ecx
c0028a50:	09 fa                	or     edx,edi
c0028a52:	78 0c                	js     c0028a60 <__divdf3+0x294>
c0028a54:	01 d2                	add    edx,edx
c0028a56:	89 d9                	mov    ecx,ebx
c0028a58:	c1 e9 1f             	shr    ecx,0x1f
c0028a5b:	09 ca                	or     edx,ecx
c0028a5d:	01 db                	add    ebx,ebx
c0028a5f:	48                   	dec    eax
c0028a60:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028a65:	0f 8f 83 00 00 00    	jg     c0028aee <__divdf3+0x322>
c0028a6b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028a71:	85 c0                	test   eax,eax
c0028a73:	0f 8f 82 00 00 00    	jg     c0028afb <__divdf3+0x32f>
c0028a79:	83 f8 cc             	cmp    eax,0xffffffcc
c0028a7c:	7c 77                	jl     c0028af5 <__divdf3+0x329>
c0028a7e:	be 01 00 00 00       	mov    esi,0x1
c0028a83:	29 c6                	sub    esi,eax
c0028a85:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028a8b:	83 fe 1f             	cmp    esi,0x1f
c0028a8e:	7e 2f                	jle    c0028abf <__divdf3+0x2f3>
c0028a90:	83 fe 20             	cmp    esi,0x20
c0028a93:	75 0a                	jne    c0028a9f <__divdf3+0x2d3>
c0028a95:	85 db                	test   ebx,ebx
c0028a97:	0f 95 c3             	setne  bl
c0028a9a:	0f b6 db             	movzx  ebx,bl
c0028a9d:	eb 1a                	jmp    c0028ab9 <__divdf3+0x2ed>
c0028a9f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028aa2:	89 d7                	mov    edi,edx
c0028aa4:	d3 e7                	shl    edi,cl
c0028aa6:	89 f9                	mov    ecx,edi
c0028aa8:	09 d9                	or     ecx,ebx
c0028aaa:	0f 95 c3             	setne  bl
c0028aad:	0f b6 db             	movzx  ebx,bl
c0028ab0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028ab5:	29 c1                	sub    ecx,eax
c0028ab7:	d3 ea                	shr    edx,cl
c0028ab9:	09 d3                	or     ebx,edx
c0028abb:	31 c0                	xor    eax,eax
c0028abd:	eb 3a                	jmp    c0028af9 <__divdf3+0x32d>
c0028abf:	83 c0 1f             	add    eax,0x1f
c0028ac2:	89 d7                	mov    edi,edx
c0028ac4:	88 c1                	mov    cl,al
c0028ac6:	d3 e7                	shl    edi,cl
c0028ac8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028acb:	89 df                	mov    edi,ebx
c0028acd:	89 f1                	mov    ecx,esi
c0028acf:	d3 ef                	shr    edi,cl
c0028ad1:	89 f9                	mov    ecx,edi
c0028ad3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028ad6:	09 cf                	or     edi,ecx
c0028ad8:	88 c1                	mov    cl,al
c0028ada:	d3 e3                	shl    ebx,cl
c0028adc:	85 db                	test   ebx,ebx
c0028ade:	0f 95 c3             	setne  bl
c0028ae1:	0f b6 db             	movzx  ebx,bl
c0028ae4:	09 fb                	or     ebx,edi
c0028ae6:	89 f1                	mov    ecx,esi
c0028ae8:	d3 ea                	shr    edx,cl
c0028aea:	31 c0                	xor    eax,eax
c0028aec:	eb 0d                	jmp    c0028afb <__divdf3+0x32f>
c0028aee:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028af3:	eb 02                	jmp    c0028af7 <__divdf3+0x32b>
c0028af5:	31 c0                	xor    eax,eax
c0028af7:	31 db                	xor    ebx,ebx
c0028af9:	31 d2                	xor    edx,edx
c0028afb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028afe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028b01:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028b07:	09 c8                	or     eax,ecx
c0028b09:	c1 e0 14             	shl    eax,0x14
c0028b0c:	89 d1                	mov    ecx,edx
c0028b0e:	c1 e9 0b             	shr    ecx,0xb
c0028b11:	09 c8                	or     eax,ecx
c0028b13:	89 c6                	mov    esi,eax
c0028b15:	89 d9                	mov    ecx,ebx
c0028b17:	c1 e9 0b             	shr    ecx,0xb
c0028b1a:	c1 e2 15             	shl    edx,0x15
c0028b1d:	09 ca                	or     edx,ecx
c0028b1f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028b25:	0f 95 c0             	setne  al
c0028b28:	09 c1                	or     ecx,eax
c0028b2a:	83 e1 01             	and    ecx,0x1
c0028b2d:	c1 eb 0a             	shr    ebx,0xa
c0028b30:	21 cb                	and    ebx,ecx
c0028b32:	01 d3                	add    ebx,edx
c0028b34:	89 d8                	mov    eax,ebx
c0028b36:	83 d6 00             	adc    esi,0x0
c0028b39:	89 f2                	mov    edx,esi
c0028b3b:	89 c7                	mov    edi,eax
c0028b3d:	89 d1                	mov    ecx,edx
c0028b3f:	89 f8                	mov    eax,edi
c0028b41:	89 ca                	mov    edx,ecx
c0028b43:	83 c4 2c             	add    esp,0x2c
c0028b46:	5b                   	pop    ebx
c0028b47:	5e                   	pop    esi
c0028b48:	5f                   	pop    edi
c0028b49:	5d                   	pop    ebp
c0028b4a:	c3                   	ret    

c0028b4b <__floatsidf>:
c0028b4b:	55                   	push   ebp
c0028b4c:	89 e5                	mov    ebp,esp
c0028b4e:	56                   	push   esi
c0028b4f:	53                   	push   ebx
c0028b50:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b53:	85 db                	test   ebx,ebx
c0028b55:	7e 15                	jle    c0028b6c <__floatsidf+0x21>
c0028b57:	0f bd cb             	bsr    ecx,ebx
c0028b5a:	83 f1 1f             	xor    ecx,0x1f
c0028b5d:	d3 e3                	shl    ebx,cl
c0028b5f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b65:	b8 1e 04 00 00       	mov    eax,0x41e
c0028b6a:	eb 21                	jmp    c0028b8d <__floatsidf+0x42>
c0028b6c:	b8 00 00 00 00       	mov    eax,0x0
c0028b71:	ba 00 00 00 00       	mov    edx,0x0
c0028b76:	74 2a                	je     c0028ba2 <__floatsidf+0x57>
c0028b78:	f7 db                	neg    ebx
c0028b7a:	0f bd cb             	bsr    ecx,ebx
c0028b7d:	83 f1 1f             	xor    ecx,0x1f
c0028b80:	d3 e3                	shl    ebx,cl
c0028b82:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b88:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028b8d:	29 c8                	sub    eax,ecx
c0028b8f:	c1 e0 14             	shl    eax,0x14
c0028b92:	89 c1                	mov    ecx,eax
c0028b94:	89 de                	mov    esi,ebx
c0028b96:	c1 ee 0b             	shr    esi,0xb
c0028b99:	09 f1                	or     ecx,esi
c0028b9b:	89 ca                	mov    edx,ecx
c0028b9d:	c1 e3 15             	shl    ebx,0x15
c0028ba0:	89 d8                	mov    eax,ebx
c0028ba2:	5b                   	pop    ebx
c0028ba3:	5e                   	pop    esi
c0028ba4:	5d                   	pop    ebp
c0028ba5:	c3                   	ret    

c0028ba6 <__floatunsidf>:
c0028ba6:	55                   	push   ebp
c0028ba7:	89 e5                	mov    ebp,esp
c0028ba9:	56                   	push   esi
c0028baa:	53                   	push   ebx
c0028bab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028bae:	85 db                	test   ebx,ebx
c0028bb0:	74 2a                	je     c0028bdc <__floatunsidf+0x36>
c0028bb2:	0f bd cb             	bsr    ecx,ebx
c0028bb5:	83 f1 1f             	xor    ecx,0x1f
c0028bb8:	d3 e3                	shl    ebx,cl
c0028bba:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028bc0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028bc5:	29 c8                	sub    eax,ecx
c0028bc7:	c1 e0 14             	shl    eax,0x14
c0028bca:	89 c1                	mov    ecx,eax
c0028bcc:	89 de                	mov    esi,ebx
c0028bce:	c1 ee 0b             	shr    esi,0xb
c0028bd1:	09 f1                	or     ecx,esi
c0028bd3:	89 ca                	mov    edx,ecx
c0028bd5:	c1 e3 15             	shl    ebx,0x15
c0028bd8:	89 d8                	mov    eax,ebx
c0028bda:	eb 04                	jmp    c0028be0 <__floatunsidf+0x3a>
c0028bdc:	31 c0                	xor    eax,eax
c0028bde:	31 d2                	xor    edx,edx
c0028be0:	5b                   	pop    ebx
c0028be1:	5e                   	pop    esi
c0028be2:	5d                   	pop    ebp
c0028be3:	c3                   	ret    

c0028be4 <__fixdfsi>:
c0028be4:	55                   	push   ebp
c0028be5:	89 e5                	mov    ebp,esp
c0028be7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028bea:	89 d1                	mov    ecx,edx
c0028bec:	c1 e1 0b             	shl    ecx,0xb
c0028bef:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028bf8:	c1 e8 15             	shr    eax,0x15
c0028bfb:	09 c1                	or     ecx,eax
c0028bfd:	c1 fa 14             	sar    edx,0x14
c0028c00:	78 1f                	js     c0028c21 <__fixdfsi+0x3d>
c0028c02:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028c08:	31 c0                	xor    eax,eax
c0028c0a:	83 fa 1e             	cmp    edx,0x1e
c0028c0d:	77 40                	ja     c0028c4f <__fixdfsi+0x6b>
c0028c0f:	89 c8                	mov    eax,ecx
c0028c11:	0d 00 00 00 80       	or     eax,0x80000000
c0028c16:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c1b:	29 d1                	sub    ecx,edx
c0028c1d:	d3 e8                	shr    eax,cl
c0028c1f:	eb 2e                	jmp    c0028c4f <__fixdfsi+0x6b>
c0028c21:	31 c0                	xor    eax,eax
c0028c23:	81 c2 01 04 00 00    	add    edx,0x401
c0028c29:	78 24                	js     c0028c4f <__fixdfsi+0x6b>
c0028c2b:	83 fa 1e             	cmp    edx,0x1e
c0028c2e:	7e 09                	jle    c0028c39 <__fixdfsi+0x55>
c0028c30:	83 fa 1f             	cmp    edx,0x1f
c0028c33:	75 18                	jne    c0028c4d <__fixdfsi+0x69>
c0028c35:	85 c9                	test   ecx,ecx
c0028c37:	75 14                	jne    c0028c4d <__fixdfsi+0x69>
c0028c39:	89 c8                	mov    eax,ecx
c0028c3b:	0d 00 00 00 80       	or     eax,0x80000000
c0028c40:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c45:	29 d1                	sub    ecx,edx
c0028c47:	d3 e8                	shr    eax,cl
c0028c49:	f7 d8                	neg    eax
c0028c4b:	eb 02                	jmp    c0028c4f <__fixdfsi+0x6b>
c0028c4d:	31 c0                	xor    eax,eax
c0028c4f:	5d                   	pop    ebp
c0028c50:	c3                   	ret    

c0028c51 <__fixunsdfsi>:
c0028c51:	55                   	push   ebp
c0028c52:	89 e5                	mov    ebp,esp
c0028c54:	53                   	push   ebx
c0028c55:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028c58:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c5b:	89 d3                	mov    ebx,edx
c0028c5d:	c1 fb 14             	sar    ebx,0x14
c0028c60:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028c66:	31 c0                	xor    eax,eax
c0028c68:	83 fb 1f             	cmp    ebx,0x1f
c0028c6b:	77 1d                	ja     c0028c8a <__fixunsdfsi+0x39>
c0028c6d:	89 d0                	mov    eax,edx
c0028c6f:	c1 e0 0b             	shl    eax,0xb
c0028c72:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c77:	c1 e9 15             	shr    ecx,0x15
c0028c7a:	09 c8                	or     eax,ecx
c0028c7c:	0d 00 00 00 80       	or     eax,0x80000000
c0028c81:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c86:	29 d9                	sub    ecx,ebx
c0028c88:	d3 e8                	shr    eax,cl
c0028c8a:	5b                   	pop    ebx
c0028c8b:	5d                   	pop    ebp
c0028c8c:	c3                   	ret    

c0028c8d <__cmpdf2>:
c0028c8d:	55                   	push   ebp
c0028c8e:	89 e5                	mov    ebp,esp
c0028c90:	57                   	push   edi
c0028c91:	56                   	push   esi
c0028c92:	53                   	push   ebx
c0028c93:	83 ec 0c             	sub    esp,0xc
c0028c96:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028c99:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028c9c:	89 ca                	mov    edx,ecx
c0028c9e:	c1 ea 14             	shr    edx,0x14
c0028ca1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028ca7:	89 cb                	mov    ebx,ecx
c0028ca9:	c1 fb 1f             	sar    ebx,0x1f
c0028cac:	31 da                	xor    edx,ebx
c0028cae:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cb1:	89 df                	mov    edi,ebx
c0028cb3:	c1 e7 0b             	shl    edi,0xb
c0028cb6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028cb9:	c1 e1 0b             	shl    ecx,0xb
c0028cbc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028cc2:	c1 eb 15             	shr    ebx,0x15
c0028cc5:	09 d9                	or     ecx,ebx
c0028cc7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028cca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028ccd:	89 ce                	mov    esi,ecx
c0028ccf:	c1 ee 14             	shr    esi,0x14
c0028cd2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028cd8:	89 cb                	mov    ebx,ecx
c0028cda:	c1 fb 1f             	sar    ebx,0x1f
c0028cdd:	31 de                	xor    esi,ebx
c0028cdf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028ce2:	89 df                	mov    edi,ebx
c0028ce4:	c1 e7 0b             	shl    edi,0xb
c0028ce7:	c1 e1 0b             	shl    ecx,0xb
c0028cea:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028cf0:	c1 eb 15             	shr    ebx,0x15
c0028cf3:	09 d9                	or     ecx,ebx
c0028cf5:	89 d3                	mov    ebx,edx
c0028cf7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028cfd:	43                   	inc    ebx
c0028cfe:	83 fb 01             	cmp    ebx,0x1
c0028d01:	77 08                	ja     c0028d0b <__cmpdf2+0x7e>
c0028d03:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028d06:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028d09:	75 68                	jne    c0028d73 <__cmpdf2+0xe6>
c0028d0b:	89 f3                	mov    ebx,esi
c0028d0d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028d13:	43                   	inc    ebx
c0028d14:	83 fb 01             	cmp    ebx,0x1
c0028d17:	77 06                	ja     c0028d1f <__cmpdf2+0x92>
c0028d19:	89 fb                	mov    ebx,edi
c0028d1b:	09 cb                	or     ebx,ecx
c0028d1d:	75 54                	jne    c0028d73 <__cmpdf2+0xe6>
c0028d1f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028d22:	09 f8                	or     eax,edi
c0028d24:	09 c8                	or     eax,ecx
c0028d26:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028d29:	75 12                	jne    c0028d3d <__cmpdf2+0xb0>
c0028d2b:	8d 42 01             	lea    eax,[edx+0x1]
c0028d2e:	83 f8 01             	cmp    eax,0x1
c0028d31:	77 0a                	ja     c0028d3d <__cmpdf2+0xb0>
c0028d33:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028d36:	31 c0                	xor    eax,eax
c0028d38:	83 fb 01             	cmp    ebx,0x1
c0028d3b:	76 36                	jbe    c0028d73 <__cmpdf2+0xe6>
c0028d3d:	b8 01 00 00 00       	mov    eax,0x1
c0028d42:	39 f2                	cmp    edx,esi
c0028d44:	7f 2d                	jg     c0028d73 <__cmpdf2+0xe6>
c0028d46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028d4b:	7c 26                	jl     c0028d73 <__cmpdf2+0xe6>
c0028d4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d50:	77 07                	ja     c0028d59 <__cmpdf2+0xcc>
c0028d52:	72 16                	jb     c0028d6a <__cmpdf2+0xdd>
c0028d54:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028d57:	76 0a                	jbe    c0028d63 <__cmpdf2+0xd6>
c0028d59:	89 d0                	mov    eax,edx
c0028d5b:	c1 f8 1f             	sar    eax,0x1f
c0028d5e:	83 c8 01             	or     eax,0x1
c0028d61:	eb 10                	jmp    c0028d73 <__cmpdf2+0xe6>
c0028d63:	b8 00 00 00 00       	mov    eax,0x0
c0028d68:	73 09                	jae    c0028d73 <__cmpdf2+0xe6>
c0028d6a:	89 d0                	mov    eax,edx
c0028d6c:	c1 f8 1f             	sar    eax,0x1f
c0028d6f:	83 e0 02             	and    eax,0x2
c0028d72:	48                   	dec    eax
c0028d73:	83 c4 0c             	add    esp,0xc
c0028d76:	5b                   	pop    ebx
c0028d77:	5e                   	pop    esi
c0028d78:	5f                   	pop    edi
c0028d79:	5d                   	pop    ebp
c0028d7a:	c3                   	ret    

c0028d7b <__eqdf2>:
c0028d7b:	55                   	push   ebp
c0028d7c:	89 e5                	mov    ebp,esp
c0028d7e:	50                   	push   eax
c0028d7f:	6a 01                	push   0x1
c0028d81:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028d84:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028d87:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028d8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028d8d:	e8 fb fe ff ff       	call   c0028c8d <__cmpdf2>
c0028d92:	83 c4 18             	add    esp,0x18
c0028d95:	c9                   	leave  
c0028d96:	c3                   	ret    

c0028d97 <__nedf2>:
c0028d97:	eb e2                	jmp    c0028d7b <__eqdf2>

c0028d99 <__gtdf2>:
c0028d99:	55                   	push   ebp
c0028d9a:	89 e5                	mov    ebp,esp
c0028d9c:	50                   	push   eax
c0028d9d:	6a ff                	push   0xffffffff
c0028d9f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028da2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028da5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028da8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028dab:	e8 dd fe ff ff       	call   c0028c8d <__cmpdf2>
c0028db0:	83 c4 18             	add    esp,0x18
c0028db3:	c9                   	leave  
c0028db4:	c3                   	ret    

c0028db5 <__gedf2>:
c0028db5:	eb e2                	jmp    c0028d99 <__gtdf2>

c0028db7 <__ltdf2>:
c0028db7:	eb c2                	jmp    c0028d7b <__eqdf2>

c0028db9 <__ledf2>:
c0028db9:	eb c0                	jmp    c0028d7b <__eqdf2>

c0028dbb <__truncdfsf2>:
c0028dbb:	55                   	push   ebp
c0028dbc:	89 e5                	mov    ebp,esp
c0028dbe:	57                   	push   edi
c0028dbf:	56                   	push   esi
c0028dc0:	53                   	push   ebx
c0028dc1:	83 ec 0c             	sub    esp,0xc
c0028dc4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028dc7:	89 d1                	mov    ecx,edx
c0028dc9:	c1 f9 14             	sar    ecx,0x14
c0028dcc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028dcf:	89 df                	mov    edi,ebx
c0028dd1:	c1 e7 0b             	shl    edi,0xb
c0028dd4:	89 d0                	mov    eax,edx
c0028dd6:	c1 e0 0b             	shl    eax,0xb
c0028dd9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028dde:	c1 eb 15             	shr    ebx,0x15
c0028de1:	09 d8                	or     eax,ebx
c0028de3:	89 cb                	mov    ebx,ecx
c0028de5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028deb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028df1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028df7:	0f 86 9e 00 00 00    	jbe    c0028e9b <__truncdfsf2+0xe0>
c0028dfd:	85 db                	test   ebx,ebx
c0028dff:	75 0a                	jne    c0028e0b <__truncdfsf2+0x50>
c0028e01:	c1 fa 17             	sar    edx,0x17
c0028e04:	30 d2                	xor    dl,dl
c0028e06:	e9 84 00 00 00       	jmp    c0028e8f <__truncdfsf2+0xd4>
c0028e0b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028e11:	83 fe 83             	cmp    esi,0xffffff83
c0028e14:	7d 4b                	jge    c0028e61 <__truncdfsf2+0xa6>
c0028e16:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028e1b:	29 f1                	sub    ecx,esi
c0028e1d:	83 f9 1f             	cmp    ecx,0x1f
c0028e20:	7f 6b                	jg     c0028e8d <__truncdfsf2+0xd2>
c0028e22:	0d 00 00 00 80       	or     eax,0x80000000
c0028e27:	89 c3                	mov    ebx,eax
c0028e29:	d3 eb                	shr    ebx,cl
c0028e2b:	be 01 00 00 00       	mov    esi,0x1
c0028e30:	d3 e6                	shl    esi,cl
c0028e32:	4e                   	dec    esi
c0028e33:	21 f0                	and    eax,esi
c0028e35:	09 f8                	or     eax,edi
c0028e37:	0f 95 c0             	setne  al
c0028e3a:	0f b6 c0             	movzx  eax,al
c0028e3d:	09 c3                	or     ebx,eax
c0028e3f:	89 d9                	mov    ecx,ebx
c0028e41:	c1 e9 08             	shr    ecx,0x8
c0028e44:	f6 c3 7f             	test   bl,0x7f
c0028e47:	0f 95 c0             	setne  al
c0028e4a:	09 c8                	or     eax,ecx
c0028e4c:	83 e0 01             	and    eax,0x1
c0028e4f:	c1 eb 07             	shr    ebx,0x7
c0028e52:	21 c3                	and    ebx,eax
c0028e54:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028e5a:	09 d1                	or     ecx,edx
c0028e5c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028e5f:	eb 76                	jmp    c0028ed7 <__truncdfsf2+0x11c>
c0028e61:	83 c6 80             	add    esi,0xffffff80
c0028e64:	7e 1d                	jle    c0028e83 <__truncdfsf2+0xc8>
c0028e66:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028e6c:	75 0b                	jne    c0028e79 <__truncdfsf2+0xbe>
c0028e6e:	09 f8                	or     eax,edi
c0028e70:	74 09                	je     c0028e7b <__truncdfsf2+0xc0>
c0028e72:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028e77:	eb 02                	jmp    c0028e7b <__truncdfsf2+0xc0>
c0028e79:	31 c0                	xor    eax,eax
c0028e7b:	c1 fa 17             	sar    edx,0x17
c0028e7e:	80 ca ff             	or     dl,0xff
c0028e81:	eb 0e                	jmp    c0028e91 <__truncdfsf2+0xd6>
c0028e83:	c1 fa 1f             	sar    edx,0x1f
c0028e86:	c1 e2 08             	shl    edx,0x8
c0028e89:	09 ca                	or     edx,ecx
c0028e8b:	eb 04                	jmp    c0028e91 <__truncdfsf2+0xd6>
c0028e8d:	31 d2                	xor    edx,edx
c0028e8f:	31 c0                	xor    eax,eax
c0028e91:	c1 e2 17             	shl    edx,0x17
c0028e94:	c1 e8 08             	shr    eax,0x8
c0028e97:	09 d0                	or     eax,edx
c0028e99:	eb 3c                	jmp    c0028ed7 <__truncdfsf2+0x11c>
c0028e9b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028ea1:	89 ca                	mov    edx,ecx
c0028ea3:	c1 fa 0b             	sar    edx,0xb
c0028ea6:	c1 e2 08             	shl    edx,0x8
c0028ea9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028eac:	31 db                	xor    ebx,ebx
c0028eae:	85 ff                	test   edi,edi
c0028eb0:	0f 95 c3             	setne  bl
c0028eb3:	09 d8                	or     eax,ebx
c0028eb5:	89 c3                	mov    ebx,eax
c0028eb7:	c1 eb 08             	shr    ebx,0x8
c0028eba:	a8 7f                	test   al,0x7f
c0028ebc:	0f 95 c2             	setne  dl
c0028ebf:	89 d6                	mov    esi,edx
c0028ec1:	09 de                	or     esi,ebx
c0028ec3:	83 e6 01             	and    esi,0x1
c0028ec6:	c1 e8 07             	shr    eax,0x7
c0028ec9:	21 f0                	and    eax,esi
c0028ecb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028ece:	09 ca                	or     edx,ecx
c0028ed0:	c1 e2 17             	shl    edx,0x17
c0028ed3:	09 da                	or     edx,ebx
c0028ed5:	01 d0                	add    eax,edx
c0028ed7:	83 c4 0c             	add    esp,0xc
c0028eda:	5b                   	pop    ebx
c0028edb:	5e                   	pop    esi
c0028edc:	5f                   	pop    edi
c0028edd:	5d                   	pop    ebp
c0028ede:	c3                   	ret    

c0028edf <__extendsfdf2>:
c0028edf:	55                   	push   ebp
c0028ee0:	89 e5                	mov    ebp,esp
c0028ee2:	57                   	push   edi
c0028ee3:	56                   	push   esi
c0028ee4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028ee7:	89 d1                	mov    ecx,edx
c0028ee9:	c1 f9 17             	sar    ecx,0x17
c0028eec:	c1 e2 08             	shl    edx,0x8
c0028eef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028ef5:	89 c8                	mov    eax,ecx
c0028ef7:	80 e4 f8             	and    ah,0xf8
c0028efa:	8d 71 01             	lea    esi,[ecx+0x1]
c0028efd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028f03:	75 27                	jne    c0028f2c <__extendsfdf2+0x4d>
c0028f05:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028f0b:	75 18                	jne    c0028f25 <__extendsfdf2+0x46>
c0028f0d:	85 d2                	test   edx,edx
c0028f0f:	74 20                	je     c0028f31 <__extendsfdf2+0x52>
c0028f11:	41                   	inc    ecx
c0028f12:	01 d2                	add    edx,edx
c0028f14:	79 fb                	jns    c0028f11 <__extendsfdf2+0x32>
c0028f16:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028f1c:	29 c8                	sub    eax,ecx
c0028f1e:	05 81 03 00 00       	add    eax,0x381
c0028f23:	eb 0c                	jmp    c0028f31 <__extendsfdf2+0x52>
c0028f25:	05 00 07 00 00       	add    eax,0x700
c0028f2a:	eb 05                	jmp    c0028f31 <__extendsfdf2+0x52>
c0028f2c:	05 80 03 00 00       	add    eax,0x380
c0028f31:	c1 e0 14             	shl    eax,0x14
c0028f34:	89 c1                	mov    ecx,eax
c0028f36:	89 d0                	mov    eax,edx
c0028f38:	c1 e8 0b             	shr    eax,0xb
c0028f3b:	09 c1                	or     ecx,eax
c0028f3d:	c1 e2 15             	shl    edx,0x15
c0028f40:	89 d0                	mov    eax,edx
c0028f42:	89 ca                	mov    edx,ecx
c0028f44:	5e                   	pop    esi
c0028f45:	5f                   	pop    edi
c0028f46:	5d                   	pop    ebp
c0028f47:	c3                   	ret    
c0028f48:	66 90                	xchg   ax,ax
c0028f4a:	66 90                	xchg   ax,ax
c0028f4c:	66 90                	xchg   ax,ax
c0028f4e:	66 90                	xchg   ax,ax

c0028f50 <fabs>:
c0028f50:	83 ec 0c             	sub    esp,0xc
c0028f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f57:	89 04 24             	mov    DWORD PTR [esp],eax
c0028f5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028f5e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028f63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028f67:	dd 04 24             	fld    QWORD PTR [esp]
c0028f6a:	83 c4 0c             	add    esp,0xc
c0028f6d:	c3                   	ret    
c0028f6e:	66 90                	xchg   ax,ax

c0028f70 <lrint>:
c0028f70:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028f74:	83 ec 04             	sub    esp,0x4
c0028f77:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f7a:	58                   	pop    eax
c0028f7b:	c3                   	ret    

c0028f7c <lrintf>:
c0028f7c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028f80:	83 ec 04             	sub    esp,0x4
c0028f83:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f86:	58                   	pop    eax
c0028f87:	c3                   	ret    

Disassembly of section .init:

c0028f88 <_init>:
c0028f88:	55                   	push   ebp
c0028f89:	89 e5                	mov    ebp,esp
c0028f8b:	e8 88 71 fd ff       	call   c0000118 <frame_dummy>
c0028f90:	e8 5b e0 ff ff       	call   c0026ff0 <__do_global_ctors_aux>
c0028f95:	5d                   	pop    ebp
c0028f96:	c3                   	ret    

Disassembly of section .fini:

c0028f97 <_fini>:
c0028f97:	55                   	push   ebp
c0028f98:	89 e5                	mov    ebp,esp
c0028f9a:	e8 09 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028f9f:	5d                   	pop    ebp
c0028fa0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028fa2 <Computer::~Computer()>:
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	ba c8 ab 02 c0       	mov    edx,0xc002abc8
c0028faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fae:	89 10                	mov    DWORD PTR [eax],edx
c0028fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb4:	83 ec 0c             	sub    esp,0xc
c0028fb7:	50                   	push   eax
c0028fb8:	e8 8d b1 fe ff       	call   c001414a <Device::~Device()>
c0028fbd:	83 c4 10             	add    esp,0x10
c0028fc0:	90                   	nop
c0028fc1:	83 c4 0c             	add    esp,0xc
c0028fc4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028fc6 <Computer::~Computer()>:
c0028fc6:	83 ec 0c             	sub    esp,0xc
c0028fc9:	83 ec 0c             	sub    esp,0xc
c0028fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd0:	e8 cd ff ff ff       	call   c0028fa2 <Computer::~Computer()>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	83 ec 08             	sub    esp,0x8
c0028fdb:	68 ec 01 00 00       	push   0x1ec
c0028fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe4:	e8 7a 9d fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0028fe9:	83 c4 10             	add    esp,0x10
c0028fec:	83 c4 0c             	add    esp,0xc
c0028fef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028ff0 <idleCommon()>:
c0028ff0:	83 ec 0c             	sub    esp,0xc
c0028ff3:	fa                   	cli    
c0028ff4:	ff 05 a8 24 03 c0    	inc    DWORD PTR ds:0xc00324a8
c0028ffa:	e8 9d 55 ff ff       	call   c001e59c <schedule()>
c0028fff:	a1 a8 24 03 c0       	mov    eax,ds:0xc00324a8
c0029004:	48                   	dec    eax
c0029005:	a3 a8 24 03 c0       	mov    ds:0xc00324a8,eax
c002900a:	75 01                	jne    c002900d <idleCommon()+0x1d>
c002900c:	fb                   	sti    
c002900d:	83 c4 0c             	add    esp,0xc
c0029010:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029012 <LinkedList<UnixFile>::~LinkedList()>:
c0029012:	90                   	nop
c0029013:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029014 <LinkedList<UnixFile>::LinkedList()>:
c0029014:	83 ec 0c             	sub    esp,0xc
c0029017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029025:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002902c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029030:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029045:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002904c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029050:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029057:	83 ec 0c             	sub    esp,0xc
c002905a:	68 86 ae 02 c0       	push   0xc002ae86
c002905f:	e8 df 9d fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0029064:	83 c4 10             	add    esp,0x10
c0029067:	90                   	nop
c0029068:	83 c4 0c             	add    esp,0xc
c002906b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002906c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002906c:	83 ec 0c             	sub    esp,0xc
c002906f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029074:	75 10                	jne    c0029086 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	68 a0 ae 02 c0       	push   0xc002aea0
c002907e:	e8 8a 17 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0029083:	83 c4 10             	add    esp,0x10
c0029086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908a:	8b 00                	mov    eax,DWORD PTR [eax]
c002908c:	85 c0                	test   eax,eax
c002908e:	74 34                	je     c00290c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029097:	85 c0                	test   eax,eax
c0029099:	74 29                	je     c00290c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002909b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00290b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290bb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290c2:	eb 65                	jmp    c0029129 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00290ca:	85 c0                	test   eax,eax
c00290cc:	75 4b                	jne    c0029119 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00290ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290d5:	85 c0                	test   eax,eax
c00290d7:	75 40                	jne    c0029119 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00290d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290e1:	89 10                	mov    DWORD PTR [eax],edx
c00290e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00290ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029100:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029103:	85 c0                	test   eax,eax
c0029105:	74 22                	je     c0029129 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029107:	83 ec 0c             	sub    esp,0xc
c002910a:	68 c2 ae 02 c0       	push   0xc002aec2
c002910f:	e8 f9 16 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0029114:	83 c4 10             	add    esp,0x10
c0029117:	eb 10                	jmp    c0029129 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029119:	83 ec 0c             	sub    esp,0xc
c002911c:	68 cc ae 02 c0       	push   0xc002aecc
c0029121:	e8 e7 16 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0029126:	83 c4 10             	add    esp,0x10
c0029129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029130:	8d 50 01             	lea    edx,[eax+0x1]
c0029133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029137:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002913a:	90                   	nop
c002913b:	83 c4 0c             	add    esp,0xc
c002913e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029140 <LinkedList<UnixFile>::getFirstElement()>:
c0029140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029144:	8b 00                	mov    eax,DWORD PTR [eax]
c0029146:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029148 <LinkedList<UnixFile>::removeFirst()>:
c0029148:	83 ec 0c             	sub    esp,0xc
c002914b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029151:	85 c0                	test   eax,eax
c0029153:	75 12                	jne    c0029167 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029155:	83 ec 0c             	sub    esp,0xc
c0029158:	68 d8 ae 02 c0       	push   0xc002aed8
c002915d:	e8 ab 16 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0029162:	83 c4 10             	add    esp,0x10
c0029165:	eb 7e                	jmp    c00291e5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002916e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029171:	85 c0                	test   eax,eax
c0029173:	74 10                	je     c0029185 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029175:	83 ec 0c             	sub    esp,0xc
c0029178:	68 23 af 02 c0       	push   0xc002af23
c002917d:	e8 8b 16 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0029182:	83 c4 10             	add    esp,0x10
c0029185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029189:	8b 00                	mov    eax,DWORD PTR [eax]
c002918b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002918e:	85 c0                	test   eax,eax
c0029190:	75 33                	jne    c00291c5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029196:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002919c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291ae:	83 f8 01             	cmp    eax,0x1
c00291b1:	74 21                	je     c00291d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00291b3:	83 ec 0c             	sub    esp,0xc
c00291b6:	68 fc ae 02 c0       	push   0xc002aefc
c00291bb:	e8 4d 16 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00291c0:	83 c4 10             	add    esp,0x10
c00291c3:	eb 0f                	jmp    c00291d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00291c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00291cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00291ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d2:	89 10                	mov    DWORD PTR [eax],edx
c00291d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291db:	8d 50 ff             	lea    edx,[eax-0x1]
c00291de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291e5:	83 c4 0c             	add    esp,0xc
c00291e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00291ea <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00291ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291f1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00291f2 <DriverlessDevice::~DriverlessDevice()>:
c00291f2:	ba a4 b6 02 c0       	mov    edx,0xc002b6a4
c00291f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291fb:	89 10                	mov    DWORD PTR [eax],edx
c00291fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029201:	50                   	push   eax
c0029202:	e8 43 af fe ff       	call   c001414a <Device::~Device()>
c0029207:	83 c4 04             	add    esp,0x4
c002920a:	90                   	nop
c002920b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002920c <DriverlessDevice::~DriverlessDevice()>:
c002920c:	83 ec 0c             	sub    esp,0xc
c002920f:	83 ec 0c             	sub    esp,0xc
c0029212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029216:	e8 d7 ff ff ff       	call   c00291f2 <DriverlessDevice::~DriverlessDevice()>
c002921b:	83 c4 10             	add    esp,0x10
c002921e:	83 ec 08             	sub    esp,0x8
c0029221:	68 58 01 00 00       	push   0x158
c0029226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002922a:	e8 34 9b fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c002922f:	83 c4 10             	add    esp,0x10
c0029232:	83 c4 0c             	add    esp,0xc
c0029235:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029236 <LinkedList<Device>::addElement(Device*)>:
c0029236:	83 ec 0c             	sub    esp,0xc
c0029239:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002923e:	75 10                	jne    c0029250 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029240:	83 ec 0c             	sub    esp,0xc
c0029243:	68 a0 ae 02 c0       	push   0xc002aea0
c0029248:	e8 c0 15 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c002924d:	83 c4 10             	add    esp,0x10
c0029250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029254:	8b 00                	mov    eax,DWORD PTR [eax]
c0029256:	85 c0                	test   eax,eax
c0029258:	74 3a                	je     c0029294 <LinkedList<Device>::addElement(Device*)+0x5e>
c002925a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029261:	85 c0                	test   eax,eax
c0029263:	74 2f                	je     c0029294 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029269:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002926c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029270:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002927e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029285:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029288:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029292:	eb 68                	jmp    c00292fc <LinkedList<Device>::addElement(Device*)+0xc6>
c0029294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029298:	8b 00                	mov    eax,DWORD PTR [eax]
c002929a:	85 c0                	test   eax,eax
c002929c:	75 4e                	jne    c00292ec <LinkedList<Device>::addElement(Device*)+0xb6>
c002929e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292a5:	85 c0                	test   eax,eax
c00292a7:	75 43                	jne    c00292ec <LinkedList<Device>::addElement(Device*)+0xb6>
c00292a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00292b1:	89 10                	mov    DWORD PTR [eax],edx
c00292b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00292bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00292be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292c5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00292cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292d6:	85 c0                	test   eax,eax
c00292d8:	74 22                	je     c00292fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00292da:	83 ec 0c             	sub    esp,0xc
c00292dd:	68 c2 ae 02 c0       	push   0xc002aec2
c00292e2:	e8 26 15 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00292e7:	83 c4 10             	add    esp,0x10
c00292ea:	eb 10                	jmp    c00292fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00292ec:	83 ec 0c             	sub    esp,0xc
c00292ef:	68 cc ae 02 c0       	push   0xc002aecc
c00292f4:	e8 14 15 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00292f9:	83 c4 10             	add    esp,0x10
c00292fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029300:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029303:	8d 50 01             	lea    edx,[eax+0x1]
c0029306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002930a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002930d:	90                   	nop
c002930e:	83 c4 0c             	add    esp,0xc
c0029311:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029312 <LinkedList<Device>::LinkedList()>:
c0029312:	83 ec 0c             	sub    esp,0xc
c0029315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029319:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002931f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029323:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002932a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029339:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002933f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029343:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002934a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029355:	83 ec 0c             	sub    esp,0xc
c0029358:	68 86 ae 02 c0       	push   0xc002ae86
c002935d:	e8 e1 9a fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c0029362:	83 c4 10             	add    esp,0x10
c0029365:	90                   	nop
c0029366:	83 c4 0c             	add    esp,0xc
c0029369:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002936a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002936a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002936e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029370:	85 c0                	test   eax,eax
c0029372:	75 0e                	jne    c0029382 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002937b:	85 c0                	test   eax,eax
c002937d:	75 03                	jne    c0029382 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002937f:	b0 01                	mov    al,0x1
c0029381:	c3                   	ret    
c0029382:	b0 00                	mov    al,0x0
c0029384:	90                   	nop
c0029385:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029386 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002938a:	8b 00                	mov    eax,DWORD PTR [eax]
c002938c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002938e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002938e:	83 ec 0c             	sub    esp,0xc
c0029391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029395:	8b 00                	mov    eax,DWORD PTR [eax]
c0029397:	85 c0                	test   eax,eax
c0029399:	75 15                	jne    c00293b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002939b:	83 ec 0c             	sub    esp,0xc
c002939e:	68 d8 ae 02 c0       	push   0xc002aed8
c00293a3:	e8 65 14 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00293a8:	83 c4 10             	add    esp,0x10
c00293ab:	e9 88 00 00 00       	jmp    c0029438 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00293b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00293ba:	85 c0                	test   eax,eax
c00293bc:	0f 95 c0             	setne  al
c00293bf:	84 c0                	test   al,al
c00293c1:	74 10                	je     c00293d3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00293c3:	83 ec 0c             	sub    esp,0xc
c00293c6:	68 23 af 02 c0       	push   0xc002af23
c00293cb:	e8 3d 14 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00293d0:	83 c4 10             	add    esp,0x10
c00293d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00293d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00293dc:	85 c0                	test   eax,eax
c00293de:	0f 94 c0             	sete   al
c00293e1:	84 c0                	test   al,al
c00293e3:	74 33                	je     c0029418 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00293e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029401:	83 f8 01             	cmp    eax,0x1
c0029404:	74 21                	je     c0029427 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029406:	83 ec 0c             	sub    esp,0xc
c0029409:	68 fc ae 02 c0       	push   0xc002aefc
c002940e:	e8 fa 13 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0029413:	83 c4 10             	add    esp,0x10
c0029416:	eb 0f                	jmp    c0029427 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941c:	8b 00                	mov    eax,DWORD PTR [eax]
c002941e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029425:	89 10                	mov    DWORD PTR [eax],edx
c0029427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002942e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029435:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029438:	83 c4 0c             	add    esp,0xc
c002943b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002943c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002943c:	83 ec 0c             	sub    esp,0xc
c002943f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029444:	75 10                	jne    c0029456 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029446:	83 ec 0c             	sub    esp,0xc
c0029449:	68 a0 ae 02 c0       	push   0xc002aea0
c002944e:	e8 ba 13 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0029453:	83 c4 10             	add    esp,0x10
c0029456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945a:	8b 00                	mov    eax,DWORD PTR [eax]
c002945c:	85 c0                	test   eax,eax
c002945e:	74 34                	je     c0029494 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029467:	85 c0                	test   eax,eax
c0029469:	74 29                	je     c0029494 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002946b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029472:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029476:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029481:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002948b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029492:	eb 65                	jmp    c00294f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029498:	8b 00                	mov    eax,DWORD PTR [eax]
c002949a:	85 c0                	test   eax,eax
c002949c:	75 4b                	jne    c00294e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002949e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294a5:	85 c0                	test   eax,eax
c00294a7:	75 40                	jne    c00294e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00294a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294b1:	89 10                	mov    DWORD PTR [eax],edx
c00294b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00294be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294c5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00294cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294d3:	85 c0                	test   eax,eax
c00294d5:	74 22                	je     c00294f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00294d7:	83 ec 0c             	sub    esp,0xc
c00294da:	68 c2 ae 02 c0       	push   0xc002aec2
c00294df:	e8 29 13 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00294e4:	83 c4 10             	add    esp,0x10
c00294e7:	eb 10                	jmp    c00294f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00294e9:	83 ec 0c             	sub    esp,0xc
c00294ec:	68 cc ae 02 c0       	push   0xc002aecc
c00294f1:	e8 17 13 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00294f6:	83 c4 10             	add    esp,0x10
c00294f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029500:	8d 50 01             	lea    edx,[eax+0x1]
c0029503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029507:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002950a:	90                   	nop
c002950b:	83 c4 0c             	add    esp,0xc
c002950e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029510 <ACPI::~ACPI()>:
c0029510:	83 ec 0c             	sub    esp,0xc
c0029513:	ba d0 c0 02 c0       	mov    edx,0xc002c0d0
c0029518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951c:	89 10                	mov    DWORD PTR [eax],edx
c002951e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029522:	83 ec 0c             	sub    esp,0xc
c0029525:	50                   	push   eax
c0029526:	e8 1f ac fe ff       	call   c001414a <Device::~Device()>
c002952b:	83 c4 10             	add    esp,0x10
c002952e:	90                   	nop
c002952f:	83 c4 0c             	add    esp,0xc
c0029532:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029534 <ACPI::~ACPI()>:
c0029534:	83 ec 0c             	sub    esp,0xc
c0029537:	83 ec 0c             	sub    esp,0xc
c002953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002953e:	e8 cd ff ff ff       	call   c0029510 <ACPI::~ACPI()>
c0029543:	83 c4 10             	add    esp,0x10
c0029546:	83 ec 08             	sub    esp,0x8
c0029549:	68 68 12 00 00       	push   0x1268
c002954e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029552:	e8 0c 98 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029557:	83 c4 10             	add    esp,0x10
c002955a:	83 c4 0c             	add    esp,0xc
c002955d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002955e <LinkedList<Device>::~LinkedList()>:
c002955e:	90                   	nop
c002955f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029560 <LinkedList<Device>::isEmpty()>:
c0029560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029564:	8b 00                	mov    eax,DWORD PTR [eax]
c0029566:	85 c0                	test   eax,eax
c0029568:	75 0e                	jne    c0029578 <LinkedList<Device>::isEmpty()+0x18>
c002956a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002956e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029571:	85 c0                	test   eax,eax
c0029573:	75 03                	jne    c0029578 <LinkedList<Device>::isEmpty()+0x18>
c0029575:	b0 01                	mov    al,0x1
c0029577:	c3                   	ret    
c0029578:	b0 00                	mov    al,0x0
c002957a:	90                   	nop
c002957b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002957c <LinkedList<Device>::getFirstElement()>:
c002957c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029580:	8b 00                	mov    eax,DWORD PTR [eax]
c0029582:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029584 <LinkedList<Device>::removeFirst()>:
c0029584:	83 ec 0c             	sub    esp,0xc
c0029587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958b:	8b 00                	mov    eax,DWORD PTR [eax]
c002958d:	85 c0                	test   eax,eax
c002958f:	75 15                	jne    c00295a6 <LinkedList<Device>::removeFirst()+0x22>
c0029591:	83 ec 0c             	sub    esp,0xc
c0029594:	68 d8 ae 02 c0       	push   0xc002aed8
c0029599:	e8 6f 12 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c002959e:	83 c4 10             	add    esp,0x10
c00295a1:	e9 87 00 00 00       	jmp    c002962d <LinkedList<Device>::removeFirst()+0xa9>
c00295a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295ad:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00295b3:	85 c0                	test   eax,eax
c00295b5:	74 10                	je     c00295c7 <LinkedList<Device>::removeFirst()+0x43>
c00295b7:	83 ec 0c             	sub    esp,0xc
c00295ba:	68 23 af 02 c0       	push   0xc002af23
c00295bf:	e8 49 12 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c00295c4:	83 c4 10             	add    esp,0x10
c00295c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00295cd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00295d3:	85 c0                	test   eax,eax
c00295d5:	75 33                	jne    c002960a <LinkedList<Device>::removeFirst()+0x86>
c00295d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295f3:	83 f8 01             	cmp    eax,0x1
c00295f6:	74 24                	je     c002961c <LinkedList<Device>::removeFirst()+0x98>
c00295f8:	83 ec 0c             	sub    esp,0xc
c00295fb:	68 fc ae 02 c0       	push   0xc002aefc
c0029600:	e8 08 12 ff ff       	call   c001a80d <Krnl::panic(char const*)>
c0029605:	83 c4 10             	add    esp,0x10
c0029608:	eb 12                	jmp    c002961c <LinkedList<Device>::removeFirst()+0x98>
c002960a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029610:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961a:	89 10                	mov    DWORD PTR [eax],edx
c002961c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029620:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029623:	8d 50 ff             	lea    edx,[eax-0x1]
c0029626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002962d:	83 c4 0c             	add    esp,0xc
c0029630:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029632 <CPU::~CPU()>:
c0029632:	83 ec 0c             	sub    esp,0xc
c0029635:	ba c0 c4 02 c0       	mov    edx,0xc002c4c0
c002963a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963e:	89 10                	mov    DWORD PTR [eax],edx
c0029640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029644:	83 ec 0c             	sub    esp,0xc
c0029647:	50                   	push   eax
c0029648:	e8 fd aa fe ff       	call   c001414a <Device::~Device()>
c002964d:	83 c4 10             	add    esp,0x10
c0029650:	90                   	nop
c0029651:	83 c4 0c             	add    esp,0xc
c0029654:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029656 <CPU::~CPU()>:
c0029656:	83 ec 0c             	sub    esp,0xc
c0029659:	83 ec 0c             	sub    esp,0xc
c002965c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029660:	e8 cd ff ff ff       	call   c0029632 <CPU::~CPU()>
c0029665:	83 c4 10             	add    esp,0x10
c0029668:	83 ec 08             	sub    esp,0x8
c002966b:	68 98 11 00 00       	push   0x1198
c0029670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029674:	e8 ea 96 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029679:	83 c4 10             	add    esp,0x10
c002967c:	83 c4 0c             	add    esp,0xc
c002967f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029680 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029680:	90                   	nop
c0029681:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029682 <ThreadControlBlock::ThreadControlBlock()>:
c0029682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029686:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002968d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029691:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002969c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00296a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296a7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00296ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296b2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00296b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296bd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00296c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296c5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00296c9:	90                   	nop
c00296ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00296cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00296cc:	83 ec 0c             	sub    esp,0xc
c00296cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00296e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00296ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029708:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002970f:	83 ec 0c             	sub    esp,0xc
c0029712:	68 86 ae 02 c0       	push   0xc002ae86
c0029717:	e8 27 97 fe ff       	call   c0012e43 <Dbg::kprintf(char const*, ...)>
c002971c:	83 c4 10             	add    esp,0x10
c002971f:	90                   	nop
c0029720:	83 c4 0c             	add    esp,0xc
c0029723:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029724 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029724:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029728:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002972b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002972c <Vm::_FPUState::_FPUState()>:
c002972c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029730:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029737:	90                   	nop
c0029738:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002973a <PCI::~PCI()>:
c002973a:	83 ec 0c             	sub    esp,0xc
c002973d:	ba c4 d5 02 c0       	mov    edx,0xc002d5c4
c0029742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029746:	89 10                	mov    DWORD PTR [eax],edx
c0029748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002974c:	83 ec 0c             	sub    esp,0xc
c002974f:	50                   	push   eax
c0029750:	e8 c5 a3 fe ff       	call   c0013b1a <Bus::~Bus()>
c0029755:	83 c4 10             	add    esp,0x10
c0029758:	90                   	nop
c0029759:	83 c4 0c             	add    esp,0xc
c002975c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002975e <PCI::~PCI()>:
c002975e:	83 ec 0c             	sub    esp,0xc
c0029761:	83 ec 0c             	sub    esp,0xc
c0029764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029768:	e8 cd ff ff ff       	call   c002973a <PCI::~PCI()>
c002976d:	83 c4 10             	add    esp,0x10
c0029770:	83 ec 08             	sub    esp,0x8
c0029773:	68 58 01 00 00       	push   0x158
c0029778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002977c:	e8 e2 95 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029781:	83 c4 10             	add    esp,0x10
c0029784:	83 c4 0c             	add    esp,0xc
c0029787:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029788 <IDE::~IDE()>:
c0029788:	83 ec 0c             	sub    esp,0xc
c002978b:	ba 28 d8 02 c0       	mov    edx,0xc002d828
c0029790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029794:	89 10                	mov    DWORD PTR [eax],edx
c0029796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002979a:	83 ec 0c             	sub    esp,0xc
c002979d:	50                   	push   eax
c002979e:	e8 91 ae fe ff       	call   c0014634 <HardDiskController::~HardDiskController()>
c00297a3:	83 c4 10             	add    esp,0x10
c00297a6:	90                   	nop
c00297a7:	83 c4 0c             	add    esp,0xc
c00297aa:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00297ac <IDE::~IDE()>:
c00297ac:	83 ec 0c             	sub    esp,0xc
c00297af:	83 ec 0c             	sub    esp,0xc
c00297b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297b6:	e8 cd ff ff ff       	call   c0029788 <IDE::~IDE()>
c00297bb:	83 c4 10             	add    esp,0x10
c00297be:	83 ec 08             	sub    esp,0x8
c00297c1:	68 70 02 00 00       	push   0x270
c00297c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ca:	e8 94 95 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c00297cf:	83 c4 10             	add    esp,0x10
c00297d2:	83 c4 0c             	add    esp,0xc
c00297d5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00297d6 <SATABus::~SATABus()>:
c00297d6:	83 ec 0c             	sub    esp,0xc
c00297d9:	ba 08 d9 02 c0       	mov    edx,0xc002d908
c00297de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e2:	89 10                	mov    DWORD PTR [eax],edx
c00297e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e8:	83 ec 0c             	sub    esp,0xc
c00297eb:	50                   	push   eax
c00297ec:	e8 43 ae fe ff       	call   c0014634 <HardDiskController::~HardDiskController()>
c00297f1:	83 c4 10             	add    esp,0x10
c00297f4:	90                   	nop
c00297f5:	83 c4 0c             	add    esp,0xc
c00297f8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00297fa <SATABus::~SATABus()>:
c00297fa:	83 ec 0c             	sub    esp,0xc
c00297fd:	83 ec 0c             	sub    esp,0xc
c0029800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029804:	e8 cd ff ff ff       	call   c00297d6 <SATABus::~SATABus()>
c0029809:	83 c4 10             	add    esp,0x10
c002980c:	83 ec 08             	sub    esp,0x8
c002980f:	68 64 01 00 00       	push   0x164
c0029814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029818:	e8 46 95 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c002981d:	83 c4 10             	add    esp,0x10
c0029820:	83 c4 0c             	add    esp,0xc
c0029823:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029824 <ATA::~ATA()>:
c0029824:	83 ec 0c             	sub    esp,0xc
c0029827:	ba 54 d9 02 c0       	mov    edx,0xc002d954
c002982c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029830:	89 10                	mov    DWORD PTR [eax],edx
c0029832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029836:	83 ec 0c             	sub    esp,0xc
c0029839:	50                   	push   eax
c002983a:	e8 e7 ae fe ff       	call   c0014726 <PhysicalDisk::~PhysicalDisk()>
c002983f:	83 c4 10             	add    esp,0x10
c0029842:	90                   	nop
c0029843:	83 c4 0c             	add    esp,0xc
c0029846:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029848 <ATA::~ATA()>:
c0029848:	83 ec 0c             	sub    esp,0xc
c002984b:	83 ec 0c             	sub    esp,0xc
c002984e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029852:	e8 cd ff ff ff       	call   c0029824 <ATA::~ATA()>
c0029857:	83 c4 10             	add    esp,0x10
c002985a:	83 ec 08             	sub    esp,0x8
c002985d:	68 7c 01 00 00       	push   0x17c
c0029862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029866:	e8 f8 94 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c002986b:	83 c4 10             	add    esp,0x10
c002986e:	83 c4 0c             	add    esp,0xc
c0029871:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029872 <ATAPI::~ATAPI()>:
c0029872:	83 ec 0c             	sub    esp,0xc
c0029875:	ba 8c d9 02 c0       	mov    edx,0xc002d98c
c002987a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987e:	89 10                	mov    DWORD PTR [eax],edx
c0029880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029884:	83 ec 0c             	sub    esp,0xc
c0029887:	50                   	push   eax
c0029888:	e8 99 ae fe ff       	call   c0014726 <PhysicalDisk::~PhysicalDisk()>
c002988d:	83 c4 10             	add    esp,0x10
c0029890:	90                   	nop
c0029891:	83 c4 0c             	add    esp,0xc
c0029894:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029896 <ATAPI::~ATAPI()>:
c0029896:	83 ec 0c             	sub    esp,0xc
c0029899:	83 ec 0c             	sub    esp,0xc
c002989c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298a0:	e8 cd ff ff ff       	call   c0029872 <ATAPI::~ATAPI()>
c00298a5:	83 c4 10             	add    esp,0x10
c00298a8:	83 ec 08             	sub    esp,0x8
c00298ab:	68 80 01 00 00       	push   0x180
c00298b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298b4:	e8 aa 94 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c00298b9:	83 c4 10             	add    esp,0x10
c00298bc:	83 c4 0c             	add    esp,0xc
c00298bf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00298c0 <SATA::~SATA()>:
c00298c0:	83 ec 0c             	sub    esp,0xc
c00298c3:	ba 40 da 02 c0       	mov    edx,0xc002da40
c00298c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298cc:	89 10                	mov    DWORD PTR [eax],edx
c00298ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d2:	83 ec 0c             	sub    esp,0xc
c00298d5:	50                   	push   eax
c00298d6:	e8 4b ae fe ff       	call   c0014726 <PhysicalDisk::~PhysicalDisk()>
c00298db:	83 c4 10             	add    esp,0x10
c00298de:	90                   	nop
c00298df:	83 c4 0c             	add    esp,0xc
c00298e2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00298e4 <SATA::~SATA()>:
c00298e4:	83 ec 0c             	sub    esp,0xc
c00298e7:	83 ec 0c             	sub    esp,0xc
c00298ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ee:	e8 cd ff ff ff       	call   c00298c0 <SATA::~SATA()>
c00298f3:	83 c4 10             	add    esp,0x10
c00298f6:	83 ec 08             	sub    esp,0x8
c00298f9:	68 7c 01 00 00       	push   0x17c
c00298fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029902:	e8 5c 94 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029907:	83 c4 10             	add    esp,0x10
c002990a:	83 c4 0c             	add    esp,0xc
c002990d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002990e <SATAPI::~SATAPI()>:
c002990e:	83 ec 0c             	sub    esp,0xc
c0029911:	ba 1c db 02 c0       	mov    edx,0xc002db1c
c0029916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991a:	89 10                	mov    DWORD PTR [eax],edx
c002991c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029920:	83 ec 0c             	sub    esp,0xc
c0029923:	50                   	push   eax
c0029924:	e8 fd ad fe ff       	call   c0014726 <PhysicalDisk::~PhysicalDisk()>
c0029929:	83 c4 10             	add    esp,0x10
c002992c:	90                   	nop
c002992d:	83 c4 0c             	add    esp,0xc
c0029930:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029932 <SATAPI::~SATAPI()>:
c0029932:	83 ec 0c             	sub    esp,0xc
c0029935:	83 ec 0c             	sub    esp,0xc
c0029938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002993c:	e8 cd ff ff ff       	call   c002990e <SATAPI::~SATAPI()>
c0029941:	83 c4 10             	add    esp,0x10
c0029944:	83 ec 08             	sub    esp,0x8
c0029947:	68 80 01 00 00       	push   0x180
c002994c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029950:	e8 0e 94 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029955:	83 c4 10             	add    esp,0x10
c0029958:	83 c4 0c             	add    esp,0xc
c002995b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002995c <AVX::~AVX()>:
c002995c:	83 ec 0c             	sub    esp,0xc
c002995f:	ba 5c db 02 c0       	mov    edx,0xc002db5c
c0029964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029968:	89 10                	mov    DWORD PTR [eax],edx
c002996a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002996e:	83 ec 0c             	sub    esp,0xc
c0029971:	50                   	push   eax
c0029972:	e8 33 ae fe ff       	call   c00147aa <FPU::~FPU()>
c0029977:	83 c4 10             	add    esp,0x10
c002997a:	90                   	nop
c002997b:	83 c4 0c             	add    esp,0xc
c002997e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029980 <AVX::~AVX()>:
c0029980:	83 ec 0c             	sub    esp,0xc
c0029983:	83 ec 0c             	sub    esp,0xc
c0029986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002998a:	e8 cd ff ff ff       	call   c002995c <AVX::~AVX()>
c002998f:	83 c4 10             	add    esp,0x10
c0029992:	83 ec 08             	sub    esp,0x8
c0029995:	68 58 01 00 00       	push   0x158
c002999a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002999e:	e8 c0 93 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c00299a3:	83 c4 10             	add    esp,0x10
c00299a6:	83 c4 0c             	add    esp,0xc
c00299a9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00299aa <MMX::~MMX()>:
c00299aa:	83 ec 0c             	sub    esp,0xc
c00299ad:	ba 9c db 02 c0       	mov    edx,0xc002db9c
c00299b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b6:	89 10                	mov    DWORD PTR [eax],edx
c00299b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299bc:	83 ec 0c             	sub    esp,0xc
c00299bf:	50                   	push   eax
c00299c0:	e8 e5 ad fe ff       	call   c00147aa <FPU::~FPU()>
c00299c5:	83 c4 10             	add    esp,0x10
c00299c8:	90                   	nop
c00299c9:	83 c4 0c             	add    esp,0xc
c00299cc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00299ce <MMX::~MMX()>:
c00299ce:	83 ec 0c             	sub    esp,0xc
c00299d1:	83 ec 0c             	sub    esp,0xc
c00299d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d8:	e8 cd ff ff ff       	call   c00299aa <MMX::~MMX()>
c00299dd:	83 c4 10             	add    esp,0x10
c00299e0:	83 ec 08             	sub    esp,0x8
c00299e3:	68 58 01 00 00       	push   0x158
c00299e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299ec:	e8 72 93 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c00299f1:	83 c4 10             	add    esp,0x10
c00299f4:	83 c4 0c             	add    esp,0xc
c00299f7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00299f8 <SSE::~SSE()>:
c00299f8:	83 ec 0c             	sub    esp,0xc
c00299fb:	ba dc db 02 c0       	mov    edx,0xc002dbdc
c0029a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a04:	89 10                	mov    DWORD PTR [eax],edx
c0029a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0a:	83 ec 0c             	sub    esp,0xc
c0029a0d:	50                   	push   eax
c0029a0e:	e8 97 ad fe ff       	call   c00147aa <FPU::~FPU()>
c0029a13:	83 c4 10             	add    esp,0x10
c0029a16:	90                   	nop
c0029a17:	83 c4 0c             	add    esp,0xc
c0029a1a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029a1c <SSE::~SSE()>:
c0029a1c:	83 ec 0c             	sub    esp,0xc
c0029a1f:	83 ec 0c             	sub    esp,0xc
c0029a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a26:	e8 cd ff ff ff       	call   c00299f8 <SSE::~SSE()>
c0029a2b:	83 c4 10             	add    esp,0x10
c0029a2e:	83 ec 08             	sub    esp,0x8
c0029a31:	68 58 01 00 00       	push   0x158
c0029a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a3a:	e8 24 93 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029a3f:	83 c4 10             	add    esp,0x10
c0029a42:	83 c4 0c             	add    esp,0xc
c0029a45:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029a46 <x87::~x87()>:
c0029a46:	83 ec 0c             	sub    esp,0xc
c0029a49:	ba 1c dc 02 c0       	mov    edx,0xc002dc1c
c0029a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a52:	89 10                	mov    DWORD PTR [eax],edx
c0029a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a58:	83 ec 0c             	sub    esp,0xc
c0029a5b:	50                   	push   eax
c0029a5c:	e8 49 ad fe ff       	call   c00147aa <FPU::~FPU()>
c0029a61:	83 c4 10             	add    esp,0x10
c0029a64:	90                   	nop
c0029a65:	83 c4 0c             	add    esp,0xc
c0029a68:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029a6a <x87::~x87()>:
c0029a6a:	83 ec 0c             	sub    esp,0xc
c0029a6d:	83 ec 0c             	sub    esp,0xc
c0029a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a74:	e8 cd ff ff ff       	call   c0029a46 <x87::~x87()>
c0029a79:	83 c4 10             	add    esp,0x10
c0029a7c:	83 ec 08             	sub    esp,0x8
c0029a7f:	68 58 01 00 00       	push   0x158
c0029a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a88:	e8 d6 92 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029a8d:	83 c4 10             	add    esp,0x10
c0029a90:	83 c4 0c             	add    esp,0xc
c0029a93:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029a94 <IOAPIC::~IOAPIC()>:
c0029a94:	83 ec 0c             	sub    esp,0xc
c0029a97:	ba 74 dd 02 c0       	mov    edx,0xc002dd74
c0029a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa0:	89 10                	mov    DWORD PTR [eax],edx
c0029aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa6:	83 ec 0c             	sub    esp,0xc
c0029aa9:	50                   	push   eax
c0029aaa:	e8 9b a6 fe ff       	call   c001414a <Device::~Device()>
c0029aaf:	83 c4 10             	add    esp,0x10
c0029ab2:	90                   	nop
c0029ab3:	83 c4 0c             	add    esp,0xc
c0029ab6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029ab8 <IOAPIC::~IOAPIC()>:
c0029ab8:	83 ec 0c             	sub    esp,0xc
c0029abb:	83 ec 0c             	sub    esp,0xc
c0029abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ac2:	e8 cd ff ff ff       	call   c0029a94 <IOAPIC::~IOAPIC()>
c0029ac7:	83 c4 10             	add    esp,0x10
c0029aca:	83 ec 08             	sub    esp,0x8
c0029acd:	68 68 01 00 00       	push   0x168
c0029ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ad6:	e8 88 92 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029adb:	83 c4 10             	add    esp,0x10
c0029ade:	83 c4 0c             	add    esp,0xc
c0029ae1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029ae2 <APIC::~APIC()>:
c0029ae2:	83 ec 0c             	sub    esp,0xc
c0029ae5:	ba 2c dd 02 c0       	mov    edx,0xc002dd2c
c0029aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aee:	89 10                	mov    DWORD PTR [eax],edx
c0029af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af4:	83 ec 0c             	sub    esp,0xc
c0029af7:	50                   	push   eax
c0029af8:	e8 77 b1 fe ff       	call   c0014c74 <InterruptController::~InterruptController()>
c0029afd:	83 c4 10             	add    esp,0x10
c0029b00:	90                   	nop
c0029b01:	83 c4 0c             	add    esp,0xc
c0029b04:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029b06 <APIC::~APIC()>:
c0029b06:	83 ec 0c             	sub    esp,0xc
c0029b09:	83 ec 0c             	sub    esp,0xc
c0029b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b10:	e8 cd ff ff ff       	call   c0029ae2 <APIC::~APIC()>
c0029b15:	83 c4 10             	add    esp,0x10
c0029b18:	83 ec 08             	sub    esp,0x8
c0029b1b:	68 58 21 00 00       	push   0x2158
c0029b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b24:	e8 3a 92 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029b29:	83 c4 10             	add    esp,0x10
c0029b2c:	83 c4 0c             	add    esp,0xc
c0029b2f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029b30 <PIC::~PIC()>:
c0029b30:	83 ec 0c             	sub    esp,0xc
c0029b33:	ba c4 dd 02 c0       	mov    edx,0xc002ddc4
c0029b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b3c:	89 10                	mov    DWORD PTR [eax],edx
c0029b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b42:	83 ec 0c             	sub    esp,0xc
c0029b45:	50                   	push   eax
c0029b46:	e8 29 b1 fe ff       	call   c0014c74 <InterruptController::~InterruptController()>
c0029b4b:	83 c4 10             	add    esp,0x10
c0029b4e:	90                   	nop
c0029b4f:	83 c4 0c             	add    esp,0xc
c0029b52:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029b54 <PIC::~PIC()>:
c0029b54:	83 ec 0c             	sub    esp,0xc
c0029b57:	83 ec 0c             	sub    esp,0xc
c0029b5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b5e:	e8 cd ff ff ff       	call   c0029b30 <PIC::~PIC()>
c0029b63:	83 c4 10             	add    esp,0x10
c0029b66:	83 ec 08             	sub    esp,0x8
c0029b69:	68 58 21 00 00       	push   0x2158
c0029b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b72:	e8 ec 91 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029b77:	83 c4 10             	add    esp,0x10
c0029b7a:	83 c4 0c             	add    esp,0xc
c0029b7d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029b7e <APICTimer::~APICTimer()>:
c0029b7e:	83 ec 0c             	sub    esp,0xc
c0029b81:	ba 18 de 02 c0       	mov    edx,0xc002de18
c0029b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b8a:	89 10                	mov    DWORD PTR [eax],edx
c0029b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b90:	83 ec 0c             	sub    esp,0xc
c0029b93:	50                   	push   eax
c0029b94:	e8 91 d1 fe ff       	call   c0016d2a <Timer::~Timer()>
c0029b99:	83 c4 10             	add    esp,0x10
c0029b9c:	90                   	nop
c0029b9d:	83 c4 0c             	add    esp,0xc
c0029ba0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029ba2 <APICTimer::~APICTimer()>:
c0029ba2:	83 ec 0c             	sub    esp,0xc
c0029ba5:	83 ec 0c             	sub    esp,0xc
c0029ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bac:	e8 cd ff ff ff       	call   c0029b7e <APICTimer::~APICTimer()>
c0029bb1:	83 c4 10             	add    esp,0x10
c0029bb4:	83 ec 08             	sub    esp,0x8
c0029bb7:	68 60 01 00 00       	push   0x160
c0029bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bc0:	e8 9e 91 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029bc5:	83 c4 10             	add    esp,0x10
c0029bc8:	83 c4 0c             	add    esp,0xc
c0029bcb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029bcc <PIT::~PIT()>:
c0029bcc:	83 ec 0c             	sub    esp,0xc
c0029bcf:	ba 68 de 02 c0       	mov    edx,0xc002de68
c0029bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bd8:	89 10                	mov    DWORD PTR [eax],edx
c0029bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bde:	83 ec 0c             	sub    esp,0xc
c0029be1:	50                   	push   eax
c0029be2:	e8 43 d1 fe ff       	call   c0016d2a <Timer::~Timer()>
c0029be7:	83 c4 10             	add    esp,0x10
c0029bea:	90                   	nop
c0029beb:	83 c4 0c             	add    esp,0xc
c0029bee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029bf0 <PIT::~PIT()>:
c0029bf0:	83 ec 0c             	sub    esp,0xc
c0029bf3:	83 ec 0c             	sub    esp,0xc
c0029bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bfa:	e8 cd ff ff ff       	call   c0029bcc <PIT::~PIT()>
c0029bff:	83 c4 10             	add    esp,0x10
c0029c02:	83 ec 08             	sub    esp,0x8
c0029c05:	68 5c 01 00 00       	push   0x15c
c0029c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c0e:	e8 50 91 fe ff       	call   c0012d63 <operator delete(void*, unsigned long)>
c0029c13:	83 c4 10             	add    esp,0x10
c0029c16:	83 c4 0c             	add    esp,0xc
c0029c19:	c3                   	ret    
