
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3d 98 00 00       	call   c000985d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a5 17 02 00       	call   c00217ca <_init>
c0000025:	c3                   	ret    
c0000026:	bb 76 22 02 c0       	mov    ebx,0xc0022276
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 84 22 02 c0    	cmp    ebx,0xc0022284
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 84 5e 02 c0       	mov    eax,0xc0025e84
c0000049:	3d 84 5e 02 c0       	cmp    eax,0xc0025e84
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 84 5e 02 c0       	push   0xc0025e84
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 84 5e 02 c0       	mov    eax,0xc0025e84
c0000075:	2d 84 5e 02 c0       	sub    eax,0xc0025e84
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 84 5e 02 c0       	push   0xc0025e84
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 0c 60 02 c0 00 	cmp    BYTE PTR ds:0xc002600c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 8c 22 02 c0       	mov    ebx,0xc002228c
c00000bb:	81 eb 88 22 02 c0    	sub    ebx,0xc0022288
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 88 22 02 c0       	mov    esi,0xc0022288
c00000ca:	a1 10 60 02 c0       	mov    eax,ds:0xc0026010
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 10 60 02 c0       	mov    ds:0xc0026010,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 10 60 02 c0       	mov    eax,ds:0xc0026010
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 84 5e 02 c0       	push   0xc0025e84
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 0c 60 02 c0 01 	mov    BYTE PTR ds:0xc002600c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 14 60 02 c0       	push   0xc0026014
c000012c:	68 84 5e 02 c0       	push   0xc0025e84
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 d4 56 01 00       	call   c00159a4 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 a6 c1 00 00       	call   c000c48e <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 b2 56 01 00       	call   c00159a4 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 73 5b 01 00       	call   c0015e84 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 b6 61 01 00       	call   c00164d0 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 50 64 02 c0 	lgdtd  ds:0xc0026450
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 7c 83 00 00       	jmp    c000871e <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax

c00003a4 <memcmp>:
c00003a4:	56                   	push   esi
c00003a5:	53                   	push   ebx
c00003a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003b2:	85 f6                	test   esi,esi
c00003b4:	74 1d                	je     c00003d3 <memcmp+0x2f>
c00003b6:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b8:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003bb:	38 cb                	cmp    bl,cl
c00003bd:	75 19                	jne    c00003d8 <memcmp+0x34>
c00003bf:	01 c6                	add    esi,eax
c00003c1:	eb 0a                	jmp    c00003cd <memcmp+0x29>
c00003c3:	90                   	nop
c00003c4:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c6:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003c9:	38 d9                	cmp    cl,bl
c00003cb:	75 0b                	jne    c00003d8 <memcmp+0x34>
c00003cd:	40                   	inc    eax
c00003ce:	42                   	inc    edx
c00003cf:	39 f0                	cmp    eax,esi
c00003d1:	75 f1                	jne    c00003c4 <memcmp+0x20>
c00003d3:	31 c0                	xor    eax,eax
c00003d5:	5b                   	pop    ebx
c00003d6:	5e                   	pop    esi
c00003d7:	c3                   	ret    
c00003d8:	0f b6 c1             	movzx  eax,cl
c00003db:	29 d8                	sub    eax,ebx
c00003dd:	5b                   	pop    ebx
c00003de:	5e                   	pop    esi
c00003df:	c3                   	ret    

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 80 00 00 00    	jae    c0000478 <memmove+0x98>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	74 74                	je     c0000470 <memmove+0x90>
c00003fc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ff:	8d 75 04             	lea    esi,[ebp+0x4]
c0000402:	39 cd                	cmp    ebp,ecx
c0000404:	0f 93 c1             	setae  cl
c0000407:	39 f3                	cmp    ebx,esi
c0000409:	0f 93 c0             	setae  al
c000040c:	89 c6                	mov    esi,eax
c000040e:	09 ce                	or     esi,ecx
c0000410:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000413:	89 f0                	mov    eax,esi
c0000415:	83 f9 0c             	cmp    ecx,0xc
c0000418:	0f 97 c1             	seta   cl
c000041b:	84 c8                	test   al,cl
c000041d:	74 75                	je     c0000494 <memmove+0xb4>
c000041f:	89 e9                	mov    ecx,ebp
c0000421:	09 d9                	or     ecx,ebx
c0000423:	83 e1 03             	and    ecx,0x3
c0000426:	75 6c                	jne    c0000494 <memmove+0xb4>
c0000428:	89 d7                	mov    edi,edx
c000042a:	89 d9                	mov    ecx,ebx
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	89 ee                	mov    esi,ebp
c0000431:	01 df                	add    edi,ebx
c0000433:	90                   	nop
c0000434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000436:	83 c6 04             	add    esi,0x4
c0000439:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000043c:	83 c1 04             	add    ecx,0x4
c000043f:	39 f9                	cmp    ecx,edi
c0000441:	75 f1                	jne    c0000434 <memmove+0x54>
c0000443:	89 d1                	mov    ecx,edx
c0000445:	89 d7                	mov    edi,edx
c0000447:	83 e1 fc             	and    ecx,0xfffffffc
c000044a:	29 cf                	sub    edi,ecx
c000044c:	01 cb                	add    ebx,ecx
c000044e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000452:	39 ca                	cmp    edx,ecx
c0000454:	74 1a                	je     c0000470 <memmove+0x90>
c0000456:	8a 03                	mov    al,BYTE PTR [ebx]
c0000458:	83 ff 01             	cmp    edi,0x1
c000045b:	88 06                	mov    BYTE PTR [esi],al
c000045d:	74 11                	je     c0000470 <memmove+0x90>
c000045f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000462:	83 ff 02             	cmp    edi,0x2
c0000465:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000468:	74 06                	je     c0000470 <memmove+0x90>
c000046a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000046d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000470:	5b                   	pop    ebx
c0000471:	89 e8                	mov    eax,ebp
c0000473:	5e                   	pop    esi
c0000474:	5f                   	pop    edi
c0000475:	5d                   	pop    ebp
c0000476:	c3                   	ret    
c0000477:	90                   	nop
c0000478:	76 f6                	jbe    c0000470 <memmove+0x90>
c000047a:	85 d2                	test   edx,edx
c000047c:	74 f2                	je     c0000470 <memmove+0x90>
c000047e:	4b                   	dec    ebx
c000047f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000482:	66 90                	xchg   ax,ax
c0000484:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000487:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000048a:	4a                   	dec    edx
c000048b:	75 f7                	jne    c0000484 <memmove+0xa4>
c000048d:	5b                   	pop    ebx
c000048e:	89 e8                	mov    eax,ebp
c0000490:	5e                   	pop    esi
c0000491:	5f                   	pop    edi
c0000492:	5d                   	pop    ebp
c0000493:	c3                   	ret    
c0000494:	01 ea                	add    edx,ebp
c0000496:	89 e9                	mov    ecx,ebp
c0000498:	8a 03                	mov    al,BYTE PTR [ebx]
c000049a:	41                   	inc    ecx
c000049b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000049e:	43                   	inc    ebx
c000049f:	39 d1                	cmp    ecx,edx
c00004a1:	75 f5                	jne    c0000498 <memmove+0xb8>
c00004a3:	eb cb                	jmp    c0000470 <memmove+0x90>
c00004a5:	8d 76 00             	lea    esi,[esi+0x0]

c00004a8 <memset>:
c00004a8:	57                   	push   edi
c00004a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00004ad:	85 c9                	test   ecx,ecx
c00004af:	74 0b                	je     c00004bc <memset+0x14>
c00004b1:	fc                   	cld    
c00004b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00004b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00004ba:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00004bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00004c0:	5f                   	pop    edi
c00004c1:	c3                   	ret    
c00004c2:	66 90                	xchg   ax,ax

c00004c4 <strlen>:
c00004c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00004c8:	31 c0                	xor    eax,eax
c00004ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00004cd:	74 09                	je     c00004d8 <strlen+0x14>
c00004cf:	90                   	nop
c00004d0:	40                   	inc    eax
c00004d1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00004d5:	75 f9                	jne    c00004d0 <strlen+0xc>
c00004d7:	c3                   	ret    
c00004d8:	c3                   	ret    
c00004d9:	8d 76 00             	lea    esi,[esi+0x0]

c00004dc <strpbrk>:
c00004dc:	57                   	push   edi
c00004dd:	56                   	push   esi
c00004de:	53                   	push   ebx
c00004df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00004e7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00004e9:	84 db                	test   bl,bl
c00004eb:	74 21                	je     c000050e <strpbrk+0x32>
c00004ed:	8a 07                	mov    al,BYTE PTR [edi]
c00004ef:	84 c0                	test   al,al
c00004f1:	74 14                	je     c0000507 <strpbrk+0x2b>
c00004f3:	38 d8                	cmp    al,bl
c00004f5:	74 19                	je     c0000510 <strpbrk+0x34>
c00004f7:	89 fa                	mov    edx,edi
c00004f9:	eb 05                	jmp    c0000500 <strpbrk+0x24>
c00004fb:	90                   	nop
c00004fc:	38 d9                	cmp    cl,bl
c00004fe:	74 10                	je     c0000510 <strpbrk+0x34>
c0000500:	42                   	inc    edx
c0000501:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000503:	84 c9                	test   cl,cl
c0000505:	75 f5                	jne    c00004fc <strpbrk+0x20>
c0000507:	46                   	inc    esi
c0000508:	8a 1e                	mov    bl,BYTE PTR [esi]
c000050a:	84 db                	test   bl,bl
c000050c:	75 e1                	jne    c00004ef <strpbrk+0x13>
c000050e:	31 f6                	xor    esi,esi
c0000510:	89 f0                	mov    eax,esi
c0000512:	5b                   	pop    ebx
c0000513:	5e                   	pop    esi
c0000514:	5f                   	pop    edi
c0000515:	c3                   	ret    
c0000516:	66 90                	xchg   ax,ax

c0000518 <strtok>:
c0000518:	56                   	push   esi
c0000519:	53                   	push   ebx
c000051a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000051e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000522:	85 db                	test   ebx,ebx
c0000524:	75 07                	jne    c000052d <strtok+0x15>
c0000526:	eb 2c                	jmp    c0000554 <strtok+0x3c>
c0000528:	43                   	inc    ebx
c0000529:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000052d:	56                   	push   esi
c000052e:	53                   	push   ebx
c000052f:	e8 a8 ff ff ff       	call   c00004dc <strpbrk>
c0000534:	5a                   	pop    edx
c0000535:	a3 2c 60 02 c0       	mov    ds:0xc002602c,eax
c000053a:	59                   	pop    ecx
c000053b:	39 d8                	cmp    eax,ebx
c000053d:	74 e9                	je     c0000528 <strtok+0x10>
c000053f:	85 c0                	test   eax,eax
c0000541:	74 1b                	je     c000055e <strtok+0x46>
c0000543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000546:	8d 50 01             	lea    edx,[eax+0x1]
c0000549:	89 d8                	mov    eax,ebx
c000054b:	89 15 2c 60 02 c0    	mov    DWORD PTR ds:0xc002602c,edx
c0000551:	5b                   	pop    ebx
c0000552:	5e                   	pop    esi
c0000553:	c3                   	ret    
c0000554:	8b 1d 2c 60 02 c0    	mov    ebx,DWORD PTR ds:0xc002602c
c000055a:	85 db                	test   ebx,ebx
c000055c:	75 cf                	jne    c000052d <strtok+0x15>
c000055e:	31 c0                	xor    eax,eax
c0000560:	5b                   	pop    ebx
c0000561:	5e                   	pop    esi
c0000562:	c3                   	ret    
c0000563:	90                   	nop

c0000564 <strcpy>:
c0000564:	53                   	push   ebx
c0000565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000056d:	89 c3                	mov    ebx,eax
c000056f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000571:	84 d2                	test   dl,dl
c0000573:	74 0d                	je     c0000582 <strcpy+0x1e>
c0000575:	8d 76 00             	lea    esi,[esi+0x0]
c0000578:	88 13                	mov    BYTE PTR [ebx],dl
c000057a:	41                   	inc    ecx
c000057b:	43                   	inc    ebx
c000057c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000057e:	84 d2                	test   dl,dl
c0000580:	75 f6                	jne    c0000578 <strcpy+0x14>
c0000582:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000585:	5b                   	pop    ebx
c0000586:	c3                   	ret    
c0000587:	90                   	nop

c0000588 <strncpy>:
c0000588:	55                   	push   ebp
c0000589:	57                   	push   edi
c000058a:	56                   	push   esi
c000058b:	53                   	push   ebx
c000058c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000590:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000598:	85 c0                	test   eax,eax
c000059a:	74 39                	je     c00005d5 <strncpy+0x4d>
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	8d 48 ff             	lea    ecx,[eax-0x1]
c00005a1:	8d 55 01             	lea    edx,[ebp+0x1]
c00005a4:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00005a7:	84 db                	test   bl,bl
c00005a9:	74 31                	je     c00005dc <strncpy+0x54>
c00005ab:	85 c9                	test   ecx,ecx
c00005ad:	74 26                	je     c00005d5 <strncpy+0x4d>
c00005af:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00005b2:	8d 48 fe             	lea    ecx,[eax-0x2]
c00005b5:	8d 55 02             	lea    edx,[ebp+0x2]
c00005b8:	8d 46 02             	lea    eax,[esi+0x2]
c00005bb:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00005be:	84 db                	test   bl,bl
c00005c0:	75 0f                	jne    c00005d1 <strncpy+0x49>
c00005c2:	eb 18                	jmp    c00005dc <strncpy+0x54>
c00005c4:	40                   	inc    eax
c00005c5:	42                   	inc    edx
c00005c6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00005c9:	49                   	dec    ecx
c00005ca:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00005cd:	84 db                	test   bl,bl
c00005cf:	74 0b                	je     c00005dc <strncpy+0x54>
c00005d1:	85 c9                	test   ecx,ecx
c00005d3:	75 ef                	jne    c00005c4 <strncpy+0x3c>
c00005d5:	5b                   	pop    ebx
c00005d6:	89 e8                	mov    eax,ebp
c00005d8:	5e                   	pop    esi
c00005d9:	5f                   	pop    edi
c00005da:	5d                   	pop    ebp
c00005db:	c3                   	ret    
c00005dc:	85 c9                	test   ecx,ecx
c00005de:	74 f5                	je     c00005d5 <strncpy+0x4d>
c00005e0:	fc                   	cld    
c00005e1:	31 c0                	xor    eax,eax
c00005e3:	89 d7                	mov    edi,edx
c00005e5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00005e7:	89 e8                	mov    eax,ebp
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	5f                   	pop    edi
c00005ec:	5d                   	pop    ebp
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strcmp>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00005f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00005fc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005ff:	38 d1                	cmp    cl,dl
c0000601:	75 1d                	jne    c0000620 <strcmp+0x30>
c0000603:	84 c9                	test   cl,cl
c0000605:	74 21                	je     c0000628 <strcmp+0x38>
c0000607:	b8 01 00 00 00       	mov    eax,0x1
c000060c:	eb 07                	jmp    c0000615 <strcmp+0x25>
c000060e:	66 90                	xchg   ax,ax
c0000610:	40                   	inc    eax
c0000611:	84 d2                	test   dl,dl
c0000613:	74 13                	je     c0000628 <strcmp+0x38>
c0000615:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000618:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000061c:	38 ca                	cmp    dl,cl
c000061e:	74 f0                	je     c0000610 <strcmp+0x20>
c0000620:	0f b6 c2             	movzx  eax,dl
c0000623:	5b                   	pop    ebx
c0000624:	29 c8                	sub    eax,ecx
c0000626:	5e                   	pop    esi
c0000627:	c3                   	ret    
c0000628:	31 c0                	xor    eax,eax
c000062a:	5b                   	pop    ebx
c000062b:	5e                   	pop    esi
c000062c:	c3                   	ret    
c000062d:	8d 76 00             	lea    esi,[esi+0x0]

c0000630 <strchr>:
c0000630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000634:	8a 10                	mov    dl,BYTE PTR [eax]
c0000636:	84 d2                	test   dl,dl
c0000638:	74 15                	je     c000064f <strchr+0x1f>
c000063a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000063e:	38 ca                	cmp    dl,cl
c0000640:	75 06                	jne    c0000648 <strchr+0x18>
c0000642:	eb 0e                	jmp    c0000652 <strchr+0x22>
c0000644:	38 ca                	cmp    dl,cl
c0000646:	74 09                	je     c0000651 <strchr+0x21>
c0000648:	40                   	inc    eax
c0000649:	8a 10                	mov    dl,BYTE PTR [eax]
c000064b:	84 d2                	test   dl,dl
c000064d:	75 f5                	jne    c0000644 <strchr+0x14>
c000064f:	31 c0                	xor    eax,eax
c0000651:	c3                   	ret    
c0000652:	c3                   	ret    
c0000653:	90                   	nop

c0000654 <strncmp>:
c0000654:	57                   	push   edi
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000065b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000065f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000663:	85 ff                	test   edi,edi
c0000665:	74 28                	je     c000068f <strncmp+0x3b>
c0000667:	8a 16                	mov    dl,BYTE PTR [esi]
c0000669:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066c:	38 d1                	cmp    cl,dl
c000066e:	75 28                	jne    c0000698 <strncmp+0x44>
c0000670:	8d 46 01             	lea    eax,[esi+0x1]
c0000673:	84 c9                	test   cl,cl
c0000675:	74 18                	je     c000068f <strncmp+0x3b>
c0000677:	01 fe                	add    esi,edi
c0000679:	eb 0f                	jmp    c000068a <strncmp+0x36>
c000067b:	90                   	nop
c000067c:	8a 10                	mov    dl,BYTE PTR [eax]
c000067e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000681:	38 ca                	cmp    dl,cl
c0000683:	75 13                	jne    c0000698 <strncmp+0x44>
c0000685:	40                   	inc    eax
c0000686:	84 d2                	test   dl,dl
c0000688:	74 05                	je     c000068f <strncmp+0x3b>
c000068a:	43                   	inc    ebx
c000068b:	39 c6                	cmp    esi,eax
c000068d:	75 ed                	jne    c000067c <strncmp+0x28>
c000068f:	5b                   	pop    ebx
c0000690:	31 c0                	xor    eax,eax
c0000692:	5e                   	pop    esi
c0000693:	5f                   	pop    edi
c0000694:	c3                   	ret    
c0000695:	8d 76 00             	lea    esi,[esi+0x0]
c0000698:	5b                   	pop    ebx
c0000699:	0f b6 c2             	movzx  eax,dl
c000069c:	5e                   	pop    esi
c000069d:	29 c8                	sub    eax,ecx
c000069f:	5f                   	pop    edi
c00006a0:	c3                   	ret    
c00006a1:	8d 76 00             	lea    esi,[esi+0x0]

c00006a4 <strcat>:
c00006a4:	56                   	push   esi
c00006a5:	53                   	push   ebx
c00006a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	89 c3                	mov    ebx,eax
c00006b0:	eb 04                	jmp    c00006b6 <strcat+0x12>
c00006b2:	66 90                	xchg   ax,ax
c00006b4:	89 d3                	mov    ebx,edx
c00006b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00006b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006bd:	75 f5                	jne    c00006b4 <strcat+0x10>
c00006bf:	31 d2                	xor    edx,edx
c00006c1:	8d 76 00             	lea    esi,[esi+0x0]
c00006c4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00006c7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00006ca:	42                   	inc    edx
c00006cb:	84 c9                	test   cl,cl
c00006cd:	75 f5                	jne    c00006c4 <strcat+0x20>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	c3                   	ret    
c00006d2:	66 90                	xchg   ax,ax

c00006d4 <strncat>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e2:	85 f6                	test   esi,esi
c00006e4:	74 1e                	je     c0000704 <strncat+0x30>
c00006e6:	89 c2                	mov    edx,eax
c00006e8:	42                   	inc    edx
c00006e9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strncat+0x14>
c00006ef:	01 ce                	add    esi,ecx
c00006f1:	eb 06                	jmp    c00006f9 <strncat+0x25>
c00006f3:	90                   	nop
c00006f4:	39 f1                	cmp    ecx,esi
c00006f6:	74 10                	je     c0000708 <strncat+0x34>
c00006f8:	42                   	inc    edx
c00006f9:	41                   	inc    ecx
c00006fa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006fd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000700:	84 db                	test   bl,bl
c0000702:	75 f0                	jne    c00006f4 <strncat+0x20>
c0000704:	5b                   	pop    ebx
c0000705:	5e                   	pop    esi
c0000706:	c3                   	ret    
c0000707:	90                   	nop
c0000708:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000070b:	5b                   	pop    ebx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax

c0000710 <strstr>:
c0000710:	57                   	push   edi
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000717:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000071b:	57                   	push   edi
c000071c:	e8 a3 fd ff ff       	call   c00004c4 <strlen>
c0000721:	59                   	pop    ecx
c0000722:	85 c0                	test   eax,eax
c0000724:	74 2a                	je     c0000750 <strstr+0x40>
c0000726:	89 c6                	mov    esi,eax
c0000728:	eb 12                	jmp    c000073c <strstr+0x2c>
c000072a:	66 90                	xchg   ax,ax
c000072c:	56                   	push   esi
c000072d:	57                   	push   edi
c000072e:	53                   	push   ebx
c000072f:	e8 70 fc ff ff       	call   c00003a4 <memcmp>
c0000734:	83 c4 0c             	add    esp,0xc
c0000737:	85 c0                	test   eax,eax
c0000739:	74 15                	je     c0000750 <strstr+0x40>
c000073b:	43                   	inc    ebx
c000073c:	53                   	push   ebx
c000073d:	e8 82 fd ff ff       	call   c00004c4 <strlen>
c0000742:	5a                   	pop    edx
c0000743:	39 f0                	cmp    eax,esi
c0000745:	73 e5                	jae    c000072c <strstr+0x1c>
c0000747:	5b                   	pop    ebx
c0000748:	31 c0                	xor    eax,eax
c000074a:	5e                   	pop    esi
c000074b:	5f                   	pop    edi
c000074c:	c3                   	ret    
c000074d:	8d 76 00             	lea    esi,[esi+0x0]
c0000750:	89 d8                	mov    eax,ebx
c0000752:	5b                   	pop    ebx
c0000753:	5e                   	pop    esi
c0000754:	5f                   	pop    edi
c0000755:	c3                   	ret    
c0000756:	66 90                	xchg   ax,ax

c0000758 <toupper>:
c0000758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000075c:	0f b6 d0             	movzx  edx,al
c000075f:	f6 82 a0 22 02 c0 02 	test   BYTE PTR [edx-0x3ffddd60],0x2
c0000766:	74 03                	je     c000076b <toupper+0x13>
c0000768:	83 e8 20             	sub    eax,0x20
c000076b:	c3                   	ret    

c000076c <tolower>:
c000076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000770:	0f b6 d0             	movzx  edx,al
c0000773:	f6 82 a0 22 02 c0 01 	test   BYTE PTR [edx-0x3ffddd60],0x1
c000077a:	74 03                	je     c000077f <tolower+0x13>
c000077c:	83 c0 20             	add    eax,0x20
c000077f:	c3                   	ret    

c0000780 <simple_strtoul>:
c0000780:	55                   	push   ebp
c0000781:	57                   	push   edi
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	83 ec 08             	sub    esp,0x8
c0000787:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000078f:	90                   	nop
c0000790:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000793:	f6 82 a0 22 02 c0 08 	test   BYTE PTR [edx-0x3ffddd60],0x8
c000079a:	75 05                	jne    c00007a1 <simple_strtoul+0x21>
c000079c:	80 fa 09             	cmp    dl,0x9
c000079f:	75 03                	jne    c00007a4 <simple_strtoul+0x24>
c00007a1:	41                   	inc    ecx
c00007a2:	eb ec                	jmp    c0000790 <simple_strtoul+0x10>
c00007a4:	80 fa 2d             	cmp    dl,0x2d
c00007a7:	0f 84 1b 01 00 00    	je     c00008c8 <simple_strtoul+0x148>
c00007ad:	80 fa 2b             	cmp    dl,0x2b
c00007b0:	0f 84 c2 00 00 00    	je     c0000878 <simple_strtoul+0xf8>
c00007b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00007be:	85 f6                	test   esi,esi
c00007c0:	0f 85 c3 00 00 00    	jne    c0000889 <simple_strtoul+0x109>
c00007c6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00007c8:	80 fa 30             	cmp    dl,0x30
c00007cb:	0f 84 47 01 00 00    	je     c0000918 <simple_strtoul+0x198>
c00007d1:	be 0a 00 00 00       	mov    esi,0xa
c00007d6:	84 d2                	test   dl,dl
c00007d8:	0f 84 6f 01 00 00    	je     c000094d <simple_strtoul+0x1cd>
c00007de:	31 ed                	xor    ebp,ebp
c00007e0:	31 ff                	xor    edi,edi
c00007e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00007e9:	eb 2b                	jmp    c0000816 <simple_strtoul+0x96>
c00007eb:	90                   	nop
c00007ec:	83 eb 30             	sub    ebx,0x30
c00007ef:	39 f3                	cmp    ebx,esi
c00007f1:	73 4d                	jae    c0000840 <simple_strtoul+0xc0>
c00007f3:	31 d2                	xor    edx,edx
c00007f5:	89 d8                	mov    eax,ebx
c00007f7:	f7 d0                	not    eax
c00007f9:	f7 f6                	div    esi
c00007fb:	39 f8                	cmp    eax,edi
c00007fd:	0f 82 b1 00 00 00    	jb     c00008b4 <simple_strtoul+0x134>
c0000803:	0f af fe             	imul   edi,esi
c0000806:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000080d:	01 df                	add    edi,ebx
c000080f:	41                   	inc    ecx
c0000810:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 2a                	je     c0000840 <simple_strtoul+0xc0>
c0000816:	0f b6 da             	movzx  ebx,dl
c0000819:	f6 83 a0 22 02 c0 04 	test   BYTE PTR [ebx-0x3ffddd60],0x4
c0000820:	75 ca                	jne    c00007ec <simple_strtoul+0x6c>
c0000822:	0f be d2             	movsx  edx,dl
c0000825:	52                   	push   edx
c0000826:	e8 2d ff ff ff       	call   c0000758 <toupper>
c000082b:	5b                   	pop    ebx
c000082c:	0f b6 d0             	movzx  edx,al
c000082f:	f6 82 a0 22 02 c0 01 	test   BYTE PTR [edx-0x3ffddd60],0x1
c0000836:	74 08                	je     c0000840 <simple_strtoul+0xc0>
c0000838:	8d 58 c9             	lea    ebx,[eax-0x37]
c000083b:	39 f3                	cmp    ebx,esi
c000083d:	72 b4                	jb     c00007f3 <simple_strtoul+0x73>
c000083f:	90                   	nop
c0000840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000844:	85 c0                	test   eax,eax
c0000846:	74 14                	je     c000085c <simple_strtoul+0xdc>
c0000848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000084b:	09 f8                	or     eax,edi
c000084d:	75 71                	jne    c00008c0 <simple_strtoul+0x140>
c000084f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000857:	31 ff                	xor    edi,edi
c0000859:	89 30                	mov    DWORD PTR [eax],esi
c000085b:	90                   	nop
c000085c:	4d                   	dec    ebp
c000085d:	75 05                	jne    c0000864 <simple_strtoul+0xe4>
c000085f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000864:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000869:	75 02                	jne    c000086d <simple_strtoul+0xed>
c000086b:	f7 df                	neg    edi
c000086d:	83 c4 08             	add    esp,0x8
c0000870:	89 f8                	mov    eax,edi
c0000872:	5b                   	pop    ebx
c0000873:	5e                   	pop    esi
c0000874:	5f                   	pop    edi
c0000875:	5d                   	pop    ebp
c0000876:	c3                   	ret    
c0000877:	90                   	nop
c0000878:	41                   	inc    ecx
c0000879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000881:	85 f6                	test   esi,esi
c0000883:	0f 84 3d ff ff ff    	je     c00007c6 <simple_strtoul+0x46>
c0000889:	8d 46 fe             	lea    eax,[esi-0x2]
c000088c:	83 f8 22             	cmp    eax,0x22
c000088f:	77 6a                	ja     c00008fb <simple_strtoul+0x17b>
c0000891:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000893:	83 fe 08             	cmp    esi,0x8
c0000896:	0f 84 a2 00 00 00    	je     c000093e <simple_strtoul+0x1be>
c000089c:	83 fe 10             	cmp    esi,0x10
c000089f:	0f 85 31 ff ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c00008a5:	80 fa 30             	cmp    dl,0x30
c00008a8:	74 2c                	je     c00008d6 <simple_strtoul+0x156>
c00008aa:	be 10 00 00 00       	mov    esi,0x10
c00008af:	e9 22 ff ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008b4:	bd 01 00 00 00       	mov    ebp,0x1
c00008b9:	31 ff                	xor    edi,edi
c00008bb:	e9 4f ff ff ff       	jmp    c000080f <simple_strtoul+0x8f>
c00008c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008c4:	89 08                	mov    DWORD PTR [eax],ecx
c00008c6:	eb 94                	jmp    c000085c <simple_strtoul+0xdc>
c00008c8:	41                   	inc    ecx
c00008c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d1:	e9 e8 fe ff ff       	jmp    c00007be <simple_strtoul+0x3e>
c00008d6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008da:	88 04 24             	mov    BYTE PTR [esp],al
c00008dd:	50                   	push   eax
c00008de:	e8 89 fe ff ff       	call   c000076c <tolower>
c00008e3:	5e                   	pop    esi
c00008e4:	83 f8 78             	cmp    eax,0x78
c00008e7:	0f 84 84 00 00 00    	je     c0000971 <simple_strtoul+0x1f1>
c00008ed:	41                   	inc    ecx
c00008ee:	be 10 00 00 00       	mov    esi,0x10
c00008f3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c00008f6:	e9 db fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00008ff:	85 ff                	test   edi,edi
c0000901:	74 5c                	je     c000095f <simple_strtoul+0x1df>
c0000903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000907:	85 c9                	test   ecx,ecx
c0000909:	75 4e                	jne    c0000959 <simple_strtoul+0x1d9>
c000090b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000911:	31 ff                	xor    edi,edi
c0000913:	e9 4c ff ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000918:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000091c:	88 04 24             	mov    BYTE PTR [esp],al
c000091f:	50                   	push   eax
c0000920:	e8 47 fe ff ff       	call   c000076c <tolower>
c0000925:	5d                   	pop    ebp
c0000926:	83 f8 78             	cmp    eax,0x78
c0000929:	74 3b                	je     c0000966 <simple_strtoul+0x1e6>
c000092b:	41                   	inc    ecx
c000092c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000092f:	80 fa 30             	cmp    dl,0x30
c0000932:	74 13                	je     c0000947 <simple_strtoul+0x1c7>
c0000934:	be 08 00 00 00       	mov    esi,0x8
c0000939:	e9 98 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c000093e:	80 fa 30             	cmp    dl,0x30
c0000941:	0f 85 8f fe ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c0000947:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c000094a:	41                   	inc    ecx
c000094b:	eb e7                	jmp    c0000934 <simple_strtoul+0x1b4>
c000094d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000951:	85 d2                	test   edx,edx
c0000953:	74 0a                	je     c000095f <simple_strtoul+0x1df>
c0000955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000095d:	89 30                	mov    DWORD PTR [eax],esi
c000095f:	31 ff                	xor    edi,edi
c0000961:	e9 fe fe ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000966:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000969:	83 c1 02             	add    ecx,0x2
c000096c:	e9 34 ff ff ff       	jmp    c00008a5 <simple_strtoul+0x125>
c0000971:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000974:	be 10 00 00 00       	mov    esi,0x10
c0000979:	83 c1 02             	add    ecx,0x2
c000097c:	e9 55 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>

c0000981 <largebin_index>:
c0000981:	89 c2                	mov    edx,eax
c0000983:	c1 ea 08             	shr    edx,0x8
c0000986:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098c:	77 10                	ja     c000099e <largebin_index+0x1d>
c000098e:	0f bd d2             	bsr    edx,edx
c0000991:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000994:	d3 e8                	shr    eax,cl
c0000996:	83 e0 03             	and    eax,0x3
c0000999:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099d:	c3                   	ret    
c000099e:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a3:	c3                   	ret    

c00009a4 <malloc_init_state>:
c00009a4:	53                   	push   ebx
c00009a5:	8d 50 34             	lea    edx,[eax+0x34]
c00009a8:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ae:	89 d1                	mov    ecx,edx
c00009b0:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b3:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b6:	83 c2 08             	add    edx,0x8
c00009b9:	39 da                	cmp    edx,ebx
c00009bb:	75 f3                	jne    c00009b0 <malloc_init_state+0xc>
c00009bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c9:	83 e2 03             	and    edx,0x3
c00009cc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d6:	83 ca 48             	or     edx,0x48
c00009d9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ed:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f4:	89 10                	mov    DWORD PTR [eax],edx
c00009f6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a03:	5b                   	pop    ebx
c0000a04:	c3                   	ret    

c0000a05 <malloc_consolidate>:
c0000a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a07:	85 d2                	test   edx,edx
c0000a09:	0f 84 d8 00 00 00    	je     c0000ae7 <malloc_consolidate+0xe2>
c0000a0f:	55                   	push   ebp
c0000a10:	83 e2 fd             	and    edx,0xfffffffd
c0000a13:	57                   	push   edi
c0000a14:	89 c5                	mov    ebp,eax
c0000a16:	56                   	push   esi
c0000a17:	8d 78 34             	lea    edi,[eax+0x34]
c0000a1a:	53                   	push   ebx
c0000a1b:	83 ec 10             	sub    esp,0x10
c0000a1e:	89 10                	mov    DWORD PTR [eax],edx
c0000a20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a24:	c1 ea 03             	shr    edx,0x3
c0000a27:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a32:	85 d2                	test   edx,edx
c0000a34:	0f 84 98 00 00 00    	je     c0000ad2 <malloc_consolidate+0xcd>
c0000a3a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a41:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a44:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4b:	89 f9                	mov    ecx,edi
c0000a4d:	83 e1 fe             	and    ecx,0xfffffffe
c0000a50:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a53:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a56:	83 e3 fc             	and    ebx,0xfffffffc
c0000a59:	83 e7 01             	and    edi,0x1
c0000a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5f:	75 14                	jne    c0000a75 <malloc_consolidate+0x70>
c0000a61:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a63:	29 fa                	sub    edx,edi
c0000a65:	01 f9                	add    ecx,edi
c0000a67:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a6a:	89 fb                	mov    ebx,edi
c0000a6c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a72:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a75:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a78:	74 40                	je     c0000aba <malloc_consolidate+0xb5>
c0000a7a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a80:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a84:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a87:	83 e7 01             	and    edi,0x1
c0000a8a:	75 0e                	jne    c0000a9a <malloc_consolidate+0x95>
c0000a8c:	01 d9                	add    ecx,ebx
c0000a8e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a91:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a97:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a9a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9d:	89 ce                	mov    esi,ecx
c0000a9f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa2:	83 ce 01             	or     esi,0x1
c0000aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa8:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aab:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ab2:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab5:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab8:	eb 0c                	jmp    c0000ac6 <malloc_consolidate+0xc1>
c0000aba:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abd:	83 c9 01             	or     ecx,0x1
c0000ac0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 85 6f ff ff ff    	jne    c0000a41 <malloc_consolidate+0x3c>
c0000ad2:	83 c5 04             	add    ebp,0x4
c0000ad5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad9:	0f 85 50 ff ff ff    	jne    c0000a2f <malloc_consolidate+0x2a>
c0000adf:	83 c4 10             	add    esp,0x10
c0000ae2:	5b                   	pop    ebx
c0000ae3:	5e                   	pop    esi
c0000ae4:	5f                   	pop    edi
c0000ae5:	5d                   	pop    ebp
c0000ae6:	c3                   	ret    
c0000ae7:	e9 b8 fe ff ff       	jmp    c00009a4 <malloc_init_state>

c0000aec <dlfree>:
c0000aec:	57                   	push   edi
c0000aed:	56                   	push   esi
c0000aee:	53                   	push   ebx
c0000aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af3:	85 db                	test   ebx,ebx
c0000af5:	0f 84 e2 00 00 00    	je     c0000bdd <dlfree+0xf1>
c0000afb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afe:	8b 0d 40 60 02 c0    	mov    ecx,DWORD PTR ds:0xc0026040
c0000b04:	89 f0                	mov    eax,esi
c0000b06:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b09:	83 e0 fc             	and    eax,0xfffffffc
c0000b0c:	39 c1                	cmp    ecx,eax
c0000b0e:	72 24                	jb     c0000b34 <dlfree+0x48>
c0000b10:	83 c9 03             	or     ecx,0x3
c0000b13:	c1 e8 03             	shr    eax,0x3
c0000b16:	89 0d 40 60 02 c0    	mov    DWORD PTR ds:0xc0026040,ecx
c0000b1c:	83 e8 02             	sub    eax,0x2
c0000b1f:	8b 0c 85 44 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fbc]
c0000b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b28:	89 14 85 44 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fbc],edx
c0000b2f:	e9 a9 00 00 00       	jmp    c0000bdd <dlfree+0xf1>
c0000b34:	83 e6 02             	and    esi,0x2
c0000b37:	0f 85 a0 00 00 00    	jne    c0000bdd <dlfree+0xf1>
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b43:	89 0d 40 60 02 c0    	mov    DWORD PTR ds:0xc0026040,ecx
c0000b49:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4c:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b53:	75 13                	jne    c0000b68 <dlfree+0x7c>
c0000b55:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b58:	29 da                	sub    edx,ebx
c0000b5a:	01 d8                	add    eax,ebx
c0000b5c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b62:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b65:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b68:	39 35 6c 60 02 c0    	cmp    DWORD PTR ds:0xc002606c,esi
c0000b6e:	74 40                	je     c0000bb0 <dlfree+0xc4>
c0000b70:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b74:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b77:	80 e3 01             	and    bl,0x1
c0000b7a:	75 0e                	jne    c0000b8a <dlfree+0x9e>
c0000b7c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b82:	01 c8                	add    eax,ecx
c0000b84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b8a:	8b 0d 7c 60 02 c0    	mov    ecx,DWORD PTR ds:0xc002607c
c0000b90:	c7 42 0c 74 60 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026074
c0000b97:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b9a:	89 15 7c 60 02 c0    	mov    DWORD PTR ds:0xc002607c,edx
c0000ba0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba3:	89 c1                	mov    ecx,eax
c0000ba5:	83 c9 01             	or     ecx,0x1
c0000ba8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bab:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bae:	eb 10                	jmp    c0000bc0 <dlfree+0xd4>
c0000bb0:	01 c8                	add    eax,ecx
c0000bb2:	89 c1                	mov    ecx,eax
c0000bb4:	83 c9 01             	or     ecx,0x1
c0000bb7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bba:	89 15 6c 60 02 c0    	mov    DWORD PTR ds:0xc002606c,edx
c0000bc0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc5:	76 16                	jbe    c0000bdd <dlfree+0xf1>
c0000bc7:	f6 05 40 60 02 c0 02 	test   BYTE PTR ds:0xc0026040,0x2
c0000bce:	74 0d                	je     c0000bdd <dlfree+0xf1>
c0000bd0:	5b                   	pop    ebx
c0000bd1:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0000bd6:	5e                   	pop    esi
c0000bd7:	5f                   	pop    edi
c0000bd8:	e9 28 fe ff ff       	jmp    c0000a05 <malloc_consolidate>
c0000bdd:	5b                   	pop    ebx
c0000bde:	5e                   	pop    esi
c0000bdf:	5f                   	pop    edi
c0000be0:	c3                   	ret    

c0000be1 <sYSMALLOc>:
c0000be1:	55                   	push   ebp
c0000be2:	57                   	push   edi
c0000be3:	56                   	push   esi
c0000be4:	53                   	push   ebx
c0000be5:	89 d3                	mov    ebx,edx
c0000be7:	83 ec 2c             	sub    esp,0x2c
c0000bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bee:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfe:	74 1f                	je     c0000c1f <sYSMALLOc+0x3e>
c0000c00:	89 d8                	mov    eax,ebx
c0000c02:	e8 fe fd ff ff       	call   c0000a05 <malloc_consolidate>
c0000c07:	83 ec 0c             	sub    esp,0xc
c0000c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0e:	83 e8 07             	sub    eax,0x7
c0000c11:	50                   	push   eax
c0000c12:	e8 30 02 00 00       	call   c0000e47 <dlmalloc>
c0000c17:	83 c4 10             	add    esp,0x10
c0000c1a:	e9 20 02 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c1f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c22:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c2b:	83 e0 fc             	and    eax,0xfffffffc
c0000c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c36:	83 c0 10             	add    eax,0x10
c0000c39:	01 c1                	add    ecx,eax
c0000c3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c46:	74 04                	je     c0000c4c <sYSMALLOc+0x6b>
c0000c48:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c4c:	f7 da                	neg    edx
c0000c4e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c56:	21 d1                	and    ecx,edx
c0000c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c5c:	7f 07                	jg     c0000c65 <sYSMALLOc+0x84>
c0000c5e:	31 c0                	xor    eax,eax
c0000c60:	e9 da 01 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c65:	83 ec 0c             	sub    esp,0xc
c0000c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c6c:	e8 ef 89 00 00       	call   c0009660 <sbrk>
c0000c71:	83 c4 10             	add    esp,0x10
c0000c74:	89 c6                	mov    esi,eax
c0000c76:	83 f8 ff             	cmp    eax,0xffffffff
c0000c79:	74 e3                	je     c0000c5e <sYSMALLOc+0x7d>
c0000c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c86:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c8c:	39 f1                	cmp    ecx,esi
c0000c8e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c94:	75 13                	jne    c0000ca9 <sYSMALLOc+0xc8>
c0000c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9e:	83 c8 01             	or     eax,0x1
c0000ca1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca4:	e9 3e 01 00 00       	jmp    c0000de7 <sYSMALLOc+0x206>
c0000ca9:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000caf:	88 d0                	mov    al,dl
c0000cb1:	83 e0 01             	and    eax,0x1
c0000cb4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cbd:	0f 95 c0             	setne  al
c0000cc0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc4:	39 f1                	cmp    ecx,esi
c0000cc6:	76 12                	jbe    c0000cda <sYSMALLOc+0xf9>
c0000cc8:	84 c0                	test   al,al
c0000cca:	74 0e                	je     c0000cda <sYSMALLOc+0xf9>
c0000ccc:	83 e2 fe             	and    edx,0xfffffffe
c0000ccf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd5:	e9 83 00 00 00       	jmp    c0000d5d <sYSMALLOc+0x17c>
c0000cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdf:	74 7c                	je     c0000d5d <sYSMALLOc+0x17c>
c0000ce1:	84 c0                	test   al,al
c0000ce3:	74 0c                	je     c0000cf1 <sYSMALLOc+0x110>
c0000ce5:	89 f0                	mov    eax,esi
c0000ce7:	29 c8                	sub    eax,ecx
c0000ce9:	01 e8                	add    eax,ebp
c0000ceb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cf1:	89 f2                	mov    edx,esi
c0000cf3:	83 e2 07             	and    edx,0x7
c0000cf6:	74 0c                	je     c0000d04 <sYSMALLOc+0x123>
c0000cf8:	b8 08 00 00 00       	mov    eax,0x8
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d02:	eb 04                	jmp    c0000d08 <sYSMALLOc+0x127>
c0000d04:	89 f5                	mov    ebp,esi
c0000d06:	31 c0                	xor    eax,eax
c0000d08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	01 f1                	add    ecx,esi
c0000d1b:	01 ca                	add    edx,ecx
c0000d1d:	29 c8                	sub    eax,ecx
c0000d1f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d23:	01 c2                	add    edx,eax
c0000d25:	52                   	push   edx
c0000d26:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d2a:	e8 31 89 00 00       	call   c0009660 <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	83 f8 ff             	cmp    eax,0xffffffff
c0000d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d39:	75 0f                	jne    c0000d4a <sYSMALLOc+0x169>
c0000d3b:	83 ec 0c             	sub    esp,0xc
c0000d3e:	6a 00                	push   0x0
c0000d40:	e8 1b 89 00 00       	call   c0009660 <sbrk>
c0000d45:	83 c4 10             	add    esp,0x10
c0000d48:	eb 30                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d4a:	39 c6                	cmp    esi,eax
c0000d4c:	76 33                	jbe    c0000d81 <sYSMALLOc+0x1a0>
c0000d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d52:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d59:	01 f0                	add    eax,esi
c0000d5b:	eb 1d                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d5d:	83 ec 0c             	sub    esp,0xc
c0000d60:	89 f5                	mov    ebp,esi
c0000d62:	6a 00                	push   0x0
c0000d64:	e8 f7 88 00 00       	call   c0009660 <sbrk>
c0000d69:	89 c2                	mov    edx,eax
c0000d6b:	29 f2                	sub    edx,esi
c0000d6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d7a:	31 d2                	xor    edx,edx
c0000d7c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7f:	74 66                	je     c0000de7 <sYSMALLOc+0x206>
c0000d81:	29 e8                	sub    eax,ebp
c0000d83:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d86:	01 d0                	add    eax,edx
c0000d88:	83 c8 01             	or     eax,0x1
c0000d8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d99:	74 4c                	je     c0000de7 <sYSMALLOc+0x206>
c0000d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9f:	83 e8 0c             	sub    eax,0xc
c0000da2:	83 e0 f8             	and    eax,0xfffffff8
c0000da5:	89 c2                	mov    edx,eax
c0000da7:	83 ca 01             	or     edx,0x1
c0000daa:	83 f8 0f             	cmp    eax,0xf
c0000dad:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000db0:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db8:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dc0:	76 25                	jbe    c0000de7 <sYSMALLOc+0x206>
c0000dc2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd5:	83 c7 08             	add    edi,0x8
c0000dd8:	57                   	push   edi
c0000dd9:	e8 0e fd ff ff       	call   c0000aec <dlfree>
c0000dde:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ded:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df3:	73 06                	jae    c0000dfb <sYSMALLOc+0x21a>
c0000df5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e01:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e07:	73 06                	jae    c0000e0f <sYSMALLOc+0x22e>
c0000e09:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e15:	83 e2 fc             	and    edx,0xfffffffc
c0000e18:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e1c:	0f 82 3c fe ff ff    	jb     c0000c5e <sYSMALLOc+0x7d>
c0000e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e26:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 fb                	mov    ebx,edi
c0000e33:	83 c0 08             	add    eax,0x8
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3f:	83 c4 2c             	add    esp,0x2c
c0000e42:	5b                   	pop    ebx
c0000e43:	5e                   	pop    esi
c0000e44:	5f                   	pop    edi
c0000e45:	5d                   	pop    ebp
c0000e46:	c3                   	ret    

c0000e47 <dlmalloc>:
c0000e47:	55                   	push   ebp
c0000e48:	57                   	push   edi
c0000e49:	56                   	push   esi
c0000e4a:	53                   	push   ebx
c0000e4b:	83 ec 1c             	sub    esp,0x1c
c0000e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e52:	83 f8 df             	cmp    eax,0xffffffdf
c0000e55:	0f 87 70 03 00 00    	ja     c00011cb <dlmalloc+0x384>
c0000e5b:	83 c0 0b             	add    eax,0xb
c0000e5e:	be 10 00 00 00       	mov    esi,0x10
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	76 05                	jbe    c0000e6d <dlmalloc+0x26>
c0000e68:	83 e0 f8             	and    eax,0xfffffff8
c0000e6b:	89 c6                	mov    esi,eax
c0000e6d:	8b 3d 40 60 02 c0    	mov    edi,DWORD PTR ds:0xc0026040
c0000e73:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e79:	75 17                	jne    c0000e92 <dlmalloc+0x4b>
c0000e7b:	85 ff                	test   edi,edi
c0000e7d:	0f 85 05 03 00 00    	jne    c0001188 <dlmalloc+0x341>
c0000e83:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0000e88:	e8 78 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000e8d:	e9 f6 02 00 00       	jmp    c0001188 <dlmalloc+0x341>
c0000e92:	39 f7                	cmp    edi,esi
c0000e94:	72 1f                	jb     c0000eb5 <dlmalloc+0x6e>
c0000e96:	89 f2                	mov    edx,esi
c0000e98:	c1 ea 03             	shr    edx,0x3
c0000e9b:	83 ea 02             	sub    edx,0x2
c0000e9e:	8b 04 95 44 60 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9fbc]
c0000ea5:	85 c0                	test   eax,eax
c0000ea7:	74 0c                	je     c0000eb5 <dlmalloc+0x6e>
c0000ea9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eac:	89 0c 95 44 60 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9fbc],ecx
c0000eb3:	eb 30                	jmp    c0000ee5 <dlmalloc+0x9e>
c0000eb5:	89 f0                	mov    eax,esi
c0000eb7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebd:	77 2e                	ja     c0000eed <dlmalloc+0xa6>
c0000ebf:	c1 e8 03             	shr    eax,0x3
c0000ec2:	8d 14 c5 74 60 02 c0 	lea    edx,[eax*8-0x3ffd9f8c]
c0000ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ecd:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed3:	39 c3                	cmp    ebx,eax
c0000ed5:	74 2e                	je     c0000f05 <dlmalloc+0xbe>
c0000ed7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000eda:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee5:	83 c0 08             	add    eax,0x8
c0000ee8:	e9 e0 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000eed:	e8 8f fa ff ff       	call   c0000981 <largebin_index>
c0000ef2:	83 e7 02             	and    edi,0x2
c0000ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef9:	74 0a                	je     c0000f05 <dlmalloc+0xbe>
c0000efb:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0000f00:	e8 00 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000f05:	8d 46 10             	lea    eax,[esi+0x10]
c0000f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0c:	8b 1d 80 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026080
c0000f12:	81 fb 74 60 02 c0    	cmp    ebx,0xc0026074
c0000f18:	0f 84 13 01 00 00    	je     c0001031 <dlmalloc+0x1ea>
c0000f1e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f24:	83 e7 fc             	and    edi,0xfffffffc
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 4c                	ja     c0000f7b <dlmalloc+0x134>
c0000f2f:	3d 74 60 02 c0       	cmp    eax,0xc0026074
c0000f34:	75 45                	jne    c0000f7b <dlmalloc+0x134>
c0000f36:	39 1d 70 60 02 c0    	cmp    DWORD PTR ds:0xc0026070,ebx
c0000f3c:	75 3d                	jne    c0000f7b <dlmalloc+0x134>
c0000f3e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f42:	73 37                	jae    c0000f7b <dlmalloc+0x134>
c0000f44:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f47:	89 fa                	mov    edx,edi
c0000f49:	a3 7c 60 02 c0       	mov    ds:0xc002607c,eax
c0000f4e:	a3 80 60 02 c0       	mov    ds:0xc0026080,eax
c0000f53:	a3 70 60 02 c0       	mov    ds:0xc0026070,eax
c0000f58:	29 f2                	sub    edx,esi
c0000f5a:	c7 40 08 74 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026074
c0000f61:	c7 40 0c 74 60 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026074
c0000f68:	83 ce 01             	or     esi,0x1
c0000f6b:	89 d1                	mov    ecx,edx
c0000f6d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f70:	83 c9 01             	or     ecx,0x1
c0000f73:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f76:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f79:	eb 15                	jmp    c0000f90 <dlmalloc+0x149>
c0000f7b:	a3 80 60 02 c0       	mov    ds:0xc0026080,eax
c0000f80:	39 fe                	cmp    esi,edi
c0000f82:	c7 40 08 74 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026074
c0000f89:	75 0d                	jne    c0000f98 <dlmalloc+0x151>
c0000f8b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f90:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f93:	e9 35 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000f98:	89 f8                	mov    eax,edi
c0000f9a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa0:	77 19                	ja     c0000fbb <dlmalloc+0x174>
c0000fa2:	c1 e8 03             	shr    eax,0x3
c0000fa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa8:	83 c2 0d             	add    edx,0xd
c0000fab:	8d 2c 95 38 60 02 c0 	lea    ebp,[edx*4-0x3ffd9fc8]
c0000fb2:	8b 14 95 40 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9fc0]
c0000fb9:	eb 46                	jmp    c0001001 <dlmalloc+0x1ba>
c0000fbb:	e8 c1 f9 ff ff       	call   c0000981 <largebin_index>
c0000fc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc3:	83 c2 0d             	add    edx,0xd
c0000fc6:	8d 0c 95 40 60 02 c0 	lea    ecx,[edx*4-0x3ffd9fc0]
c0000fcd:	8b 14 95 40 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9fc0]
c0000fd4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdb:	89 d5                	mov    ebp,edx
c0000fdd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe1:	74 1e                	je     c0001001 <dlmalloc+0x1ba>
c0000fe3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe9:	77 12                	ja     c0000ffd <dlmalloc+0x1b6>
c0000feb:	83 cf 01             	or     edi,0x1
c0000fee:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff1:	76 05                	jbe    c0000ff8 <dlmalloc+0x1b1>
c0000ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff6:	eb f6                	jmp    c0000fee <dlmalloc+0x1a7>
c0000ff8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffb:	eb 04                	jmp    c0001001 <dlmalloc+0x1ba>
c0000ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001001:	89 c7                	mov    edi,eax
c0001003:	88 c1                	mov    cl,al
c0001005:	c1 ff 05             	sar    edi,0x5
c0001008:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100c:	bf 01 00 00 00       	mov    edi,0x1
c0001011:	d3 e7                	shl    edi,cl
c0001013:	89 f8                	mov    eax,edi
c0001015:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001019:	09 04 bd 74 63 02 c0 	or     DWORD PTR [edi*4-0x3ffd9c8c],eax
c0001020:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001023:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001026:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001029:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102c:	e9 db fe ff ff       	jmp    c0000f0c <dlmalloc+0xc5>
c0001031:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001037:	76 78                	jbe    c00010b1 <dlmalloc+0x26a>
c0001039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103d:	8d 04 c5 74 60 02 c0 	lea    eax,[eax*8-0x3ffd9f8c]
c0001044:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001047:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104a:	39 ca                	cmp    edx,ecx
c000104c:	74 63                	je     c00010b1 <dlmalloc+0x26a>
c000104e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001051:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001054:	83 e3 fc             	and    ebx,0xfffffffc
c0001057:	39 de                	cmp    esi,ebx
c0001059:	77 52                	ja     c00010ad <dlmalloc+0x266>
c000105b:	89 df                	mov    edi,ebx
c000105d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001060:	29 f7                	sub    edi,esi
c0001062:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001065:	01 d3                	add    ebx,edx
c0001067:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106a:	83 ff 0f             	cmp    edi,0xf
c000106d:	8d 42 08             	lea    eax,[edx+0x8]
c0001070:	77 09                	ja     c000107b <dlmalloc+0x234>
c0001072:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001076:	e9 52 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000107b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107e:	83 ce 01             	or     esi,0x1
c0001081:	89 0d 7c 60 02 c0    	mov    DWORD PTR ds:0xc002607c,ecx
c0001087:	89 0d 80 60 02 c0    	mov    DWORD PTR ds:0xc0026080,ecx
c000108d:	c7 41 08 74 60 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026074
c0001094:	c7 41 0c 74 60 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026074
c000109b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109e:	89 fa                	mov    edx,edi
c00010a0:	83 ca 01             	or     edx,0x1
c00010a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a6:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a8:	e9 20 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c00010ad:	89 c2                	mov    edx,eax
c00010af:	eb 99                	jmp    c000104a <dlmalloc+0x203>
c00010b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b5:	b8 01 00 00 00       	mov    eax,0x1
c00010ba:	41                   	inc    ecx
c00010bb:	89 cb                	mov    ebx,ecx
c00010bd:	8d 14 cd 6c 60 02 c0 	lea    edx,[ecx*8-0x3ffd9f94]
c00010c4:	c1 eb 05             	shr    ebx,0x5
c00010c7:	d3 e0                	shl    eax,cl
c00010c9:	8b 3c 9d 74 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c8c]
c00010d0:	39 f8                	cmp    eax,edi
c00010d2:	77 04                	ja     c00010d8 <dlmalloc+0x291>
c00010d4:	85 c0                	test   eax,eax
c00010d6:	75 26                	jne    c00010fe <dlmalloc+0x2b7>
c00010d8:	43                   	inc    ebx
c00010d9:	83 fb 02             	cmp    ebx,0x2
c00010dc:	0f 87 a6 00 00 00    	ja     c0001188 <dlmalloc+0x341>
c00010e2:	8b 3c 9d 74 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c8c]
c00010e9:	85 ff                	test   edi,edi
c00010eb:	74 eb                	je     c00010d8 <dlmalloc+0x291>
c00010ed:	89 d8                	mov    eax,ebx
c00010ef:	c1 e0 06             	shl    eax,0x6
c00010f2:	8d 14 85 6c 60 02 c0 	lea    edx,[eax*4-0x3ffd9f94]
c00010f9:	b8 01 00 00 00       	mov    eax,0x1
c00010fe:	85 f8                	test   eax,edi
c0001100:	75 07                	jne    c0001109 <dlmalloc+0x2c2>
c0001102:	83 c2 08             	add    edx,0x8
c0001105:	01 c0                	add    eax,eax
c0001107:	eb f5                	jmp    c00010fe <dlmalloc+0x2b7>
c0001109:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110c:	39 ca                	cmp    edx,ecx
c000110e:	75 14                	jne    c0001124 <dlmalloc+0x2dd>
c0001110:	89 c1                	mov    ecx,eax
c0001112:	83 c2 08             	add    edx,0x8
c0001115:	f7 d1                	not    ecx
c0001117:	01 c0                	add    eax,eax
c0001119:	21 cf                	and    edi,ecx
c000111b:	89 3c 9d 74 63 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9c8c],edi
c0001122:	eb ac                	jmp    c00010d0 <dlmalloc+0x289>
c0001124:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001127:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112a:	83 e0 fc             	and    eax,0xfffffffc
c000112d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001130:	89 c3                	mov    ebx,eax
c0001132:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001135:	29 f3                	sub    ebx,esi
c0001137:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113a:	83 fb 0f             	cmp    ebx,0xf
c000113d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001140:	77 09                	ja     c000114b <dlmalloc+0x304>
c0001142:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001146:	e9 82 00 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000114b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001154:	89 3d 7c 60 02 c0    	mov    DWORD PTR ds:0xc002607c,edi
c000115a:	89 3d 80 60 02 c0    	mov    DWORD PTR ds:0xc0026080,edi
c0001160:	c7 47 08 74 60 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026074
c0001167:	c7 47 0c 74 60 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026074
c000116e:	77 06                	ja     c0001176 <dlmalloc+0x32f>
c0001170:	89 3d 70 60 02 c0    	mov    DWORD PTR ds:0xc0026070,edi
c0001176:	83 ce 01             	or     esi,0x1
c0001179:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117c:	89 d9                	mov    ecx,ebx
c000117e:	83 c9 01             	or     ecx,0x1
c0001181:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001184:	89 1a                	mov    DWORD PTR [edx],ebx
c0001186:	eb 45                	jmp    c00011cd <dlmalloc+0x386>
c0001188:	a1 6c 60 02 c0       	mov    eax,ds:0xc002606c
c000118d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001193:	83 e2 fc             	and    edx,0xfffffffc
c0001196:	39 d1                	cmp    ecx,edx
c0001198:	77 1e                	ja     c00011b8 <dlmalloc+0x371>
c000119a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119d:	89 f3                	mov    ebx,esi
c000119f:	89 0d 6c 60 02 c0    	mov    DWORD PTR ds:0xc002606c,ecx
c00011a5:	83 cb 01             	or     ebx,0x1
c00011a8:	29 f2                	sub    edx,esi
c00011aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011ad:	83 ca 01             	or     edx,0x1
c00011b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b3:	e9 2d fd ff ff       	jmp    c0000ee5 <dlmalloc+0x9e>
c00011b8:	83 c4 1c             	add    esp,0x1c
c00011bb:	89 f0                	mov    eax,esi
c00011bd:	5b                   	pop    ebx
c00011be:	ba 40 60 02 c0       	mov    edx,0xc0026040
c00011c3:	5e                   	pop    esi
c00011c4:	5f                   	pop    edi
c00011c5:	5d                   	pop    ebp
c00011c6:	e9 16 fa ff ff       	jmp    c0000be1 <sYSMALLOc>
c00011cb:	31 c0                	xor    eax,eax
c00011cd:	83 c4 1c             	add    esp,0x1c
c00011d0:	5b                   	pop    ebx
c00011d1:	5e                   	pop    esi
c00011d2:	5f                   	pop    edi
c00011d3:	5d                   	pop    ebp
c00011d4:	c3                   	ret    

c00011d5 <iALLOc>:
c00011d5:	55                   	push   ebp
c00011d6:	89 c5                	mov    ebp,eax
c00011d8:	57                   	push   edi
c00011d9:	56                   	push   esi
c00011da:	53                   	push   ebx
c00011db:	83 ec 2c             	sub    esp,0x2c
c00011de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ea:	83 3d 40 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026040,0x0
c00011f1:	75 12                	jne    c0001205 <iALLOc+0x30>
c00011f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f7:	b8 40 60 02 c0       	mov    eax,0xc0026040
c00011fc:	e8 04 f8 ff ff       	call   c0000a05 <malloc_consolidate>
c0001201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120a:	74 12                	je     c000121e <iALLOc+0x49>
c000120c:	85 ed                	test   ebp,ebp
c000120e:	0f 84 64 01 00 00    	je     c0001378 <iALLOc+0x1a3>
c0001214:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121c:	eb 33                	jmp    c0001251 <iALLOc+0x7c>
c000121e:	85 ed                	test   ebp,ebp
c0001220:	75 14                	jne    c0001236 <iALLOc+0x61>
c0001222:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122a:	83 c4 2c             	add    esp,0x2c
c000122d:	5b                   	pop    ebx
c000122e:	5e                   	pop    esi
c000122f:	5f                   	pop    edi
c0001230:	5d                   	pop    ebp
c0001231:	e9 11 fc ff ff       	jmp    c0000e47 <dlmalloc>
c0001236:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001245:	83 f8 0f             	cmp    eax,0xf
c0001248:	76 07                	jbe    c0001251 <iALLOc+0x7c>
c000124a:	83 e0 f8             	and    eax,0xfffffff8
c000124d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001251:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001256:	75 09                	jne    c0001261 <iALLOc+0x8c>
c0001258:	89 d0                	mov    eax,edx
c000125a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125d:	31 f6                	xor    esi,esi
c000125f:	eb 3b                	jmp    c000129c <iALLOc+0xc7>
c0001261:	8b 02                	mov    eax,DWORD PTR [edx]
c0001263:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126b:	83 c0 0b             	add    eax,0xb
c000126e:	83 f8 0f             	cmp    eax,0xf
c0001271:	76 07                	jbe    c000127a <iALLOc+0xa5>
c0001273:	83 e0 f8             	and    eax,0xfffffff8
c0001276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127e:	0f af f5             	imul   esi,ebp
c0001281:	eb 25                	jmp    c00012a8 <iALLOc+0xd3>
c0001283:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001285:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001288:	bb 10 00 00 00       	mov    ebx,0x10
c000128d:	83 f9 0f             	cmp    ecx,0xf
c0001290:	76 05                	jbe    c0001297 <iALLOc+0xc2>
c0001292:	83 e1 f8             	and    ecx,0xfffffff8
c0001295:	89 cb                	mov    ebx,ecx
c0001297:	01 de                	add    esi,ebx
c0001299:	83 c0 04             	add    eax,0x4
c000129c:	39 c7                	cmp    edi,eax
c000129e:	75 e3                	jne    c0001283 <iALLOc+0xae>
c00012a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ac:	8b 1d 94 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026394
c00012b2:	83 ec 0c             	sub    esp,0xc
c00012b5:	c7 05 94 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026394,0x0
c00012bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c7:	50                   	push   eax
c00012c8:	e8 7a fb ff ff       	call   c0000e47 <dlmalloc>
c00012cd:	83 c4 10             	add    esp,0x10
c00012d0:	89 1d 94 63 02 c0    	mov    DWORD PTR ds:0xc0026394,ebx
c00012d6:	85 c0                	test   eax,eax
c00012d8:	0f 84 92 00 00 00    	je     c0001370 <iALLOc+0x19b>
c00012de:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e1:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e4:	83 e3 fc             	and    ebx,0xfffffffc
c00012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012eb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f0:	74 1e                	je     c0001310 <iALLOc+0x13b>
c00012f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f6:	89 d9                	mov    ecx,ebx
c00012f8:	52                   	push   edx
c00012f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fd:	83 e9 04             	sub    ecx,0x4
c0001300:	51                   	push   ecx
c0001301:	6a 00                	push   0x0
c0001303:	50                   	push   eax
c0001304:	e8 9f f1 ff ff       	call   c00004a8 <memset>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001315:	75 14                	jne    c000132b <iALLOc+0x156>
c0001317:	8d 04 37             	lea    eax,[edi+esi*1]
c000131a:	29 f3                	sub    ebx,esi
c000131c:	8d 48 08             	lea    ecx,[eax+0x8]
c000131f:	83 cb 01             	or     ebx,0x1
c0001322:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001329:	89 f3                	mov    ebx,esi
c000132b:	31 c0                	xor    eax,eax
c000132d:	4d                   	dec    ebp
c000132e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001331:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001335:	39 c5                	cmp    ebp,eax
c0001337:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133a:	74 2c                	je     c0001368 <iALLOc+0x193>
c000133c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001340:	85 c9                	test   ecx,ecx
c0001342:	75 15                	jne    c0001359 <iALLOc+0x184>
c0001344:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001347:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134a:	b9 10 00 00 00       	mov    ecx,0x10
c000134f:	83 fe 0f             	cmp    esi,0xf
c0001352:	76 05                	jbe    c0001359 <iALLOc+0x184>
c0001354:	83 e6 f8             	and    esi,0xfffffff8
c0001357:	89 f1                	mov    ecx,esi
c0001359:	89 ce                	mov    esi,ecx
c000135b:	29 cb                	sub    ebx,ecx
c000135d:	83 ce 01             	or     esi,0x1
c0001360:	40                   	inc    eax
c0001361:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001364:	01 cf                	add    edi,ecx
c0001366:	eb c6                	jmp    c000132e <iALLOc+0x159>
c0001368:	83 cb 01             	or     ebx,0x1
c000136b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136e:	eb 08                	jmp    c0001378 <iALLOc+0x1a3>
c0001370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137c:	83 c4 2c             	add    esp,0x2c
c000137f:	5b                   	pop    ebx
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	c3                   	ret    

c0001384 <dlrealloc>:
c0001384:	55                   	push   ebp
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 1c             	sub    esp,0x1c
c000138b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001393:	85 db                	test   ebx,ebx
c0001395:	75 10                	jne    c00013a7 <dlrealloc+0x23>
c0001397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139b:	83 c4 1c             	add    esp,0x1c
c000139e:	5b                   	pop    ebx
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 a0 fa ff ff       	jmp    c0000e47 <dlmalloc>
c00013a7:	83 f8 df             	cmp    eax,0xffffffdf
c00013aa:	76 07                	jbe    c00013b3 <dlrealloc+0x2f>
c00013ac:	31 db                	xor    ebx,ebx
c00013ae:	e9 6a 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c00013b3:	83 c0 0b             	add    eax,0xb
c00013b6:	bd 10 00 00 00       	mov    ebp,0x10
c00013bb:	83 f8 0f             	cmp    eax,0xf
c00013be:	76 05                	jbe    c00013c5 <dlrealloc+0x41>
c00013c0:	83 e0 f8             	and    eax,0xfffffff8
c00013c3:	89 c5                	mov    ebp,eax
c00013c5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00013cb:	89 c6                	mov    esi,eax
c00013cd:	83 e6 fc             	and    esi,0xfffffffc
c00013d0:	a8 02                	test   al,0x2
c00013d2:	75 d8                	jne    c00013ac <dlrealloc+0x28>
c00013d4:	39 f5                	cmp    ebp,esi
c00013d6:	0f 86 04 01 00 00    	jbe    c00014e0 <dlrealloc+0x15c>
c00013dc:	8d 14 37             	lea    edx,[edi+esi*1]
c00013df:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e2:	39 15 6c 60 02 c0    	cmp    DWORD PTR ds:0xc002606c,edx
c00013e8:	75 33                	jne    c000141d <dlrealloc+0x99>
c00013ea:	83 e1 fc             	and    ecx,0xfffffffc
c00013ed:	01 f1                	add    ecx,esi
c00013ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00013f6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fa:	77 49                	ja     c0001445 <dlrealloc+0xc1>
c00013fc:	01 ef                	add    edi,ebp
c00013fe:	83 e0 01             	and    eax,0x1
c0001401:	09 e8                	or     eax,ebp
c0001403:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001406:	89 3d 6c 60 02 c0    	mov    DWORD PTR ds:0xc002606c,edi
c000140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001410:	29 e8                	sub    eax,ebp
c0001412:	83 c8 01             	or     eax,0x1
c0001415:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001418:	e9 00 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c000141d:	89 c8                	mov    eax,ecx
c000141f:	83 e0 fe             	and    eax,0xfffffffe
c0001422:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001427:	75 1c                	jne    c0001445 <dlrealloc+0xc1>
c0001429:	83 e1 fc             	and    ecx,0xfffffffc
c000142c:	01 f1                	add    ecx,esi
c000142e:	39 cd                	cmp    ebp,ecx
c0001430:	77 13                	ja     c0001445 <dlrealloc+0xc1>
c0001432:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001435:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001438:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143e:	89 ce                	mov    esi,ecx
c0001440:	e9 9b 00 00 00       	jmp    c00014e0 <dlrealloc+0x15c>
c0001445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001449:	8d 45 f9             	lea    eax,[ebp-0x7]
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	50                   	push   eax
c0001450:	e8 f2 f9 ff ff       	call   c0000e47 <dlmalloc>
c0001455:	83 c4 10             	add    esp,0x10
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 4c ff ff ff    	je     c00013ac <dlrealloc+0x28>
c0001460:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 ca                	cmp    edx,ecx
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf1>
c000146b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 6b                	jmp    c00014e0 <dlrealloc+0x15c>
c0001475:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001478:	83 f9 27             	cmp    ecx,0x27
c000147b:	76 08                	jbe    c0001485 <dlrealloc+0x101>
c000147d:	89 de                	mov    esi,ebx
c000147f:	89 c7                	mov    edi,eax
c0001481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001483:	eb 43                	jmp    c00014c8 <dlrealloc+0x144>
c0001485:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001487:	83 f9 13             	cmp    ecx,0x13
c000148a:	89 10                	mov    DWORD PTR [eax],edx
c000148c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000148f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001492:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001495:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001498:	76 2e                	jbe    c00014c8 <dlrealloc+0x144>
c000149a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000149d:	83 f9 1b             	cmp    ecx,0x1b
c00014a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00014a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00014a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00014a9:	76 1d                	jbe    c00014c8 <dlrealloc+0x144>
c00014ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00014ae:	83 f9 23             	cmp    ecx,0x23
c00014b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00014b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00014b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00014ba:	76 0c                	jbe    c00014c8 <dlrealloc+0x144>
c00014bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00014bf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00014c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00014c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00014c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014cc:	83 ec 0c             	sub    esp,0xc
c00014cf:	53                   	push   ebx
c00014d0:	e8 17 f6 ff ff       	call   c0000aec <dlfree>
c00014d5:	83 c4 10             	add    esp,0x10
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	89 c3                	mov    ebx,eax
c00014de:	eb 3d                	jmp    c000151d <dlrealloc+0x199>
c00014e0:	89 f2                	mov    edx,esi
c00014e2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014e5:	29 ea                	sub    edx,ebp
c00014e7:	83 e1 01             	and    ecx,0x1
c00014ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ed:	83 fa 0f             	cmp    edx,0xf
c00014f0:	77 0b                	ja     c00014fd <dlrealloc+0x179>
c00014f2:	09 ce                	or     esi,ecx
c00014f4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014f7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fb:	eb 20                	jmp    c000151d <dlrealloc+0x199>
c00014fd:	01 ef                	add    edi,ebp
c00014ff:	83 ec 0c             	sub    esp,0xc
c0001502:	09 cd                	or     ebp,ecx
c0001504:	83 ca 01             	or     edx,0x1
c0001507:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000150a:	83 c7 08             	add    edi,0x8
c000150d:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001510:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001514:	57                   	push   edi
c0001515:	e8 d2 f5 ff ff       	call   c0000aec <dlfree>
c000151a:	83 c4 10             	add    esp,0x10
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	89 d8                	mov    eax,ebx
c0001522:	5b                   	pop    ebx
c0001523:	5e                   	pop    esi
c0001524:	5f                   	pop    edi
c0001525:	5d                   	pop    ebp
c0001526:	c3                   	ret    

c0001527 <dlmemalign>:
c0001527:	55                   	push   ebp
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 0c             	sub    esp,0xc
c000152e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001536:	83 fa 08             	cmp    edx,0x8
c0001539:	77 10                	ja     c000154b <dlmemalign+0x24>
c000153b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000153f:	83 c4 0c             	add    esp,0xc
c0001542:	5b                   	pop    ebx
c0001543:	5e                   	pop    esi
c0001544:	5f                   	pop    edi
c0001545:	5d                   	pop    ebp
c0001546:	e9 fc f8 ff ff       	jmp    c0000e47 <dlmalloc>
c000154b:	bf 10 00 00 00       	mov    edi,0x10
c0001550:	83 fa 0f             	cmp    edx,0xf
c0001553:	76 13                	jbe    c0001568 <dlmemalign+0x41>
c0001555:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001558:	85 d1                	test   ecx,edx
c000155a:	75 04                	jne    c0001560 <dlmemalign+0x39>
c000155c:	89 d7                	mov    edi,edx
c000155e:	eb 08                	jmp    c0001568 <dlmemalign+0x41>
c0001560:	39 d7                	cmp    edi,edx
c0001562:	73 04                	jae    c0001568 <dlmemalign+0x41>
c0001564:	01 ff                	add    edi,edi
c0001566:	eb f8                	jmp    c0001560 <dlmemalign+0x39>
c0001568:	83 f8 df             	cmp    eax,0xffffffdf
c000156b:	76 07                	jbe    c0001574 <dlmemalign+0x4d>
c000156d:	31 c0                	xor    eax,eax
c000156f:	e9 ce 00 00 00       	jmp    c0001642 <dlmemalign+0x11b>
c0001574:	83 c0 0b             	add    eax,0xb
c0001577:	bd 10 00 00 00       	mov    ebp,0x10
c000157c:	83 f8 0f             	cmp    eax,0xf
c000157f:	76 05                	jbe    c0001586 <dlmemalign+0x5f>
c0001581:	83 e0 f8             	and    eax,0xfffffff8
c0001584:	89 c5                	mov    ebp,eax
c0001586:	83 ec 0c             	sub    esp,0xc
c0001589:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000158d:	50                   	push   eax
c000158e:	e8 b4 f8 ff ff       	call   c0000e47 <dlmalloc>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	89 c1                	mov    ecx,eax
c0001598:	85 c0                	test   eax,eax
c000159a:	74 d1                	je     c000156d <dlmemalign+0x46>
c000159c:	31 d2                	xor    edx,edx
c000159e:	8d 70 f8             	lea    esi,[eax-0x8]
c00015a1:	f7 f7                	div    edi
c00015a3:	85 d2                	test   edx,edx
c00015a5:	74 62                	je     c0001609 <dlmemalign+0xe2>
c00015a7:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ab:	89 f8                	mov    eax,edi
c00015ad:	f7 d8                	neg    eax
c00015af:	21 c3                	and    ebx,eax
c00015b1:	83 eb 08             	sub    ebx,0x8
c00015b4:	89 d8                	mov    eax,ebx
c00015b6:	29 f0                	sub    eax,esi
c00015b8:	83 f8 0f             	cmp    eax,0xf
c00015bb:	77 02                	ja     c00015bf <dlmemalign+0x98>
c00015bd:	01 fb                	add    ebx,edi
c00015bf:	89 d8                	mov    eax,ebx
c00015c1:	29 f0                	sub    eax,esi
c00015c3:	89 c6                	mov    esi,eax
c00015c5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015c8:	89 c2                	mov    edx,eax
c00015ca:	83 e2 fc             	and    edx,0xfffffffc
c00015cd:	29 f2                	sub    edx,esi
c00015cf:	a8 02                	test   al,0x2
c00015d1:	74 10                	je     c00015e3 <dlmemalign+0xbc>
c00015d3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015d6:	83 ca 02             	or     edx,0x2
c00015d9:	8d 43 08             	lea    eax,[ebx+0x8]
c00015dc:	89 33                	mov    DWORD PTR [ebx],esi
c00015de:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015e1:	eb 5f                	jmp    c0001642 <dlmemalign+0x11b>
c00015e3:	83 ec 0c             	sub    esp,0xc
c00015e6:	89 d0                	mov    eax,edx
c00015e8:	83 c8 01             	or     eax,0x1
c00015eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015ee:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015f3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015f6:	83 e0 01             	and    eax,0x1
c00015f9:	09 f0                	or     eax,esi
c00015fb:	89 de                	mov    esi,ebx
c00015fd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001600:	51                   	push   ecx
c0001601:	e8 e6 f4 ff ff       	call   c0000aec <dlfree>
c0001606:	83 c4 10             	add    esp,0x10
c0001609:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000160c:	a8 02                	test   al,0x2
c000160e:	75 2f                	jne    c000163f <dlmemalign+0x118>
c0001610:	83 e0 fc             	and    eax,0xfffffffc
c0001613:	8d 55 10             	lea    edx,[ebp+0x10]
c0001616:	39 c2                	cmp    edx,eax
c0001618:	73 25                	jae    c000163f <dlmemalign+0x118>
c000161a:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000161d:	83 ec 0c             	sub    esp,0xc
c0001620:	29 e8                	sub    eax,ebp
c0001622:	83 c2 08             	add    edx,0x8
c0001625:	83 c8 01             	or     eax,0x1
c0001628:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000162b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000162e:	83 e0 01             	and    eax,0x1
c0001631:	09 c5                	or     ebp,eax
c0001633:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001636:	52                   	push   edx
c0001637:	e8 b0 f4 ff ff       	call   c0000aec <dlfree>
c000163c:	83 c4 10             	add    esp,0x10
c000163f:	8d 46 08             	lea    eax,[esi+0x8]
c0001642:	83 c4 0c             	add    esp,0xc
c0001645:	5b                   	pop    ebx
c0001646:	5e                   	pop    esi
c0001647:	5f                   	pop    edi
c0001648:	5d                   	pop    ebp
c0001649:	c3                   	ret    

c000164a <dlcalloc>:
c000164a:	53                   	push   ebx
c000164b:	83 ec 14             	sub    esp,0x14
c000164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001652:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001657:	50                   	push   eax
c0001658:	e8 ea f7 ff ff       	call   c0000e47 <dlmalloc>
c000165d:	83 c4 10             	add    esp,0x10
c0001660:	89 c3                	mov    ebx,eax
c0001662:	85 c0                	test   eax,eax
c0001664:	74 77                	je     c00016dd <dlcalloc+0x93>
c0001666:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 e0 fc             	and    eax,0xfffffffc
c000166e:	80 e2 02             	and    dl,0x2
c0001671:	75 5a                	jne    c00016cd <dlcalloc+0x83>
c0001673:	83 e8 04             	sub    eax,0x4
c0001676:	83 f8 27             	cmp    eax,0x27
c0001679:	76 03                	jbe    c000167e <dlcalloc+0x34>
c000167b:	51                   	push   ecx
c000167c:	eb 53                	jmp    c00016d1 <dlcalloc+0x87>
c000167e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001684:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000168b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001692:	83 f8 13             	cmp    eax,0x13
c0001695:	76 46                	jbe    c00016dd <dlcalloc+0x93>
c0001697:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000169e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016a5:	83 f8 1b             	cmp    eax,0x1b
c00016a8:	76 33                	jbe    c00016dd <dlcalloc+0x93>
c00016aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016b8:	83 f8 23             	cmp    eax,0x23
c00016bb:	76 20                	jbe    c00016dd <dlcalloc+0x93>
c00016bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016cb:	eb 10                	jmp    c00016dd <dlcalloc+0x93>
c00016cd:	83 e8 08             	sub    eax,0x8
c00016d0:	52                   	push   edx
c00016d1:	50                   	push   eax
c00016d2:	6a 00                	push   0x0
c00016d4:	53                   	push   ebx
c00016d5:	e8 ce ed ff ff       	call   c00004a8 <memset>
c00016da:	83 c4 10             	add    esp,0x10
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	83 c4 08             	add    esp,0x8
c00016e2:	5b                   	pop    ebx
c00016e3:	c3                   	ret    

c00016e4 <dlcfree>:
c00016e4:	e9 03 f4 ff ff       	jmp    c0000aec <dlfree>

c00016e9 <dlindependent_calloc>:
c00016e9:	83 ec 28             	sub    esp,0x28
c00016ec:	b9 03 00 00 00       	mov    ecx,0x3
c00016f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00016f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00016f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00016fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001705:	e8 cb fa ff ff       	call   c00011d5 <iALLOc>
c000170a:	83 c4 2c             	add    esp,0x2c
c000170d:	c3                   	ret    

c000170e <dlindependent_comalloc>:
c000170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001716:	31 c9                	xor    ecx,ecx
c0001718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000171c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001720:	e9 b0 fa ff ff       	jmp    c00011d5 <iALLOc>

c0001725 <dlvalloc>:
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	83 3d 40 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026040,0x0
c000172f:	75 0a                	jne    c000173b <dlvalloc+0x16>
c0001731:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0001736:	e8 ca f2 ff ff       	call   c0000a05 <malloc_consolidate>
c000173b:	50                   	push   eax
c000173c:	50                   	push   eax
c000173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001741:	ff 35 9c 63 02 c0    	push   DWORD PTR ds:0xc002639c
c0001747:	e8 db fd ff ff       	call   c0001527 <dlmemalign>
c000174c:	83 c4 1c             	add    esp,0x1c
c000174f:	c3                   	ret    

c0001750 <dlpvalloc>:
c0001750:	83 ec 0c             	sub    esp,0xc
c0001753:	83 3d 40 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026040,0x0
c000175a:	75 0a                	jne    c0001766 <dlpvalloc+0x16>
c000175c:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0001761:	e8 9f f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001766:	a1 9c 63 02 c0       	mov    eax,ds:0xc002639c
c000176b:	89 c1                	mov    ecx,eax
c000176d:	52                   	push   edx
c000176e:	f7 d9                	neg    ecx
c0001770:	52                   	push   edx
c0001771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001775:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001779:	21 ca                	and    edx,ecx
c000177b:	52                   	push   edx
c000177c:	50                   	push   eax
c000177d:	e8 a5 fd ff ff       	call   c0001527 <dlmemalign>
c0001782:	83 c4 1c             	add    esp,0x1c
c0001785:	c3                   	ret    

c0001786 <dlmalloc_trim>:
c0001786:	b8 40 60 02 c0       	mov    eax,0xc0026040
c000178b:	e8 75 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001790:	31 c0                	xor    eax,eax
c0001792:	c3                   	ret    

c0001793 <dlmalloc_usable_size>:
c0001793:	53                   	push   ebx
c0001794:	31 c0                	xor    eax,eax
c0001796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000179a:	85 c9                	test   ecx,ecx
c000179c:	74 24                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c000179e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017a1:	f6 c2 02             	test   dl,0x2
c00017a4:	74 08                	je     c00017ae <dlmalloc_usable_size+0x1b>
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	8d 42 f8             	lea    eax,[edx-0x8]
c00017ac:	eb 14                	jmp    c00017c2 <dlmalloc_usable_size+0x2f>
c00017ae:	89 d3                	mov    ebx,edx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	83 e3 fe             	and    ebx,0xfffffffe
c00017b5:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ba:	74 06                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c00017bc:	83 e2 fc             	and    edx,0xfffffffc
c00017bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00017c2:	5b                   	pop    ebx
c00017c3:	c3                   	ret    

c00017c4 <dlmallinfo>:
c00017c4:	55                   	push   ebp
c00017c5:	57                   	push   edi
c00017c6:	56                   	push   esi
c00017c7:	53                   	push   ebx
c00017c8:	83 ec 08             	sub    esp,0x8
c00017cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017cf:	83 3d 6c 60 02 c0 00 	cmp    DWORD PTR ds:0xc002606c,0x0
c00017d6:	75 0a                	jne    c00017e2 <dlmallinfo+0x1e>
c00017d8:	b8 40 60 02 c0       	mov    eax,0xc0026040
c00017dd:	e8 23 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c00017e2:	a1 6c 60 02 c0       	mov    eax,ds:0xc002606c
c00017e7:	31 ed                	xor    ebp,ebp
c00017e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017ec:	31 c9                	xor    ecx,ecx
c00017ee:	83 e0 fc             	and    eax,0xfffffffc
c00017f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00017f5:	31 c0                	xor    eax,eax
c00017f7:	8b 14 85 44 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fbc]
c00017fe:	85 d2                	test   edx,edx
c0001800:	74 0e                	je     c0001810 <dlmallinfo+0x4c>
c0001802:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001805:	45                   	inc    ebp
c0001806:	83 e6 fc             	and    esi,0xfffffffc
c0001809:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000180c:	01 f1                	add    ecx,esi
c000180e:	eb ee                	jmp    c00017fe <dlmallinfo+0x3a>
c0001810:	40                   	inc    eax
c0001811:	83 f8 0a             	cmp    eax,0xa
c0001814:	75 e1                	jne    c00017f7 <dlmallinfo+0x33>
c0001816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000181a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001821:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001824:	b8 74 60 02 c0       	mov    eax,0xc0026074
c0001829:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000182c:	39 f0                	cmp    eax,esi
c000182e:	74 10                	je     c0001840 <dlmallinfo+0x7c>
c0001830:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001833:	ff 04 24             	inc    DWORD PTR [esp]
c0001836:	83 e7 fc             	and    edi,0xfffffffc
c0001839:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000183c:	01 fa                	add    edx,edi
c000183e:	eb ec                	jmp    c000182c <dlmallinfo+0x68>
c0001840:	83 c0 08             	add    eax,0x8
c0001843:	3d 6c 63 02 c0       	cmp    eax,0xc002636c
c0001848:	75 df                	jne    c0001829 <dlmallinfo+0x65>
c000184a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000184d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001850:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001853:	a1 a8 63 02 c0       	mov    eax,ds:0xc00263a8
c0001858:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000185b:	89 03                	mov    DWORD PTR [ebx],eax
c000185d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001860:	8b 35 90 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026390
c0001866:	29 d0                	sub    eax,edx
c0001868:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000186e:	8b 35 a4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263a4
c0001874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001878:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000187b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000187e:	8b 35 b4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263b4
c0001884:	89 d8                	mov    eax,ebx
c0001886:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001889:	83 c4 08             	add    esp,0x8
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c2 04 00             	ret    0x4

c0001893 <dlmalloc_stats>:
c0001893:	83 ec 30             	sub    esp,0x30
c0001896:	8d 44 24 08          	lea    eax,[esp+0x8]
c000189a:	50                   	push   eax
c000189b:	e8 24 ff ff ff       	call   c00017c4 <dlmallinfo>
c00018a0:	83 c4 30             	add    esp,0x30
c00018a3:	c3                   	ret    

c00018a4 <dlmallopt>:
c00018a4:	56                   	push   esi
c00018a5:	b8 40 60 02 c0       	mov    eax,0xc0026040
c00018aa:	53                   	push   ebx
c00018ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018b3:	e8 4d f1 ff ff       	call   c0000a05 <malloc_consolidate>
c00018b8:	8d 46 04             	lea    eax,[esi+0x4]
c00018bb:	83 f8 05             	cmp    eax,0x5
c00018be:	77 67                	ja     c0001927 <dlmallopt+0x83>
c00018c0:	ff 24 85 a4 23 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddc5c]
c00018c7:	83 fb 50             	cmp    ebx,0x50
c00018ca:	77 5b                	ja     c0001927 <dlmallopt+0x83>
c00018cc:	ba 08 00 00 00       	mov    edx,0x8
c00018d1:	85 db                	test   ebx,ebx
c00018d3:	74 12                	je     c00018e7 <dlmallopt+0x43>
c00018d5:	83 c3 0b             	add    ebx,0xb
c00018d8:	ba 10 00 00 00       	mov    edx,0x10
c00018dd:	83 fb 0f             	cmp    ebx,0xf
c00018e0:	76 05                	jbe    c00018e7 <dlmallopt+0x43>
c00018e2:	89 da                	mov    edx,ebx
c00018e4:	83 e2 f8             	and    edx,0xfffffff8
c00018e7:	a1 40 60 02 c0       	mov    eax,ds:0xc0026040
c00018ec:	83 e0 03             	and    eax,0x3
c00018ef:	09 d0                	or     eax,edx
c00018f1:	a3 40 60 02 c0       	mov    ds:0xc0026040,eax
c00018f6:	eb 31                	jmp    c0001929 <dlmallopt+0x85>
c00018f8:	89 1d 84 63 02 c0    	mov    DWORD PTR ds:0xc0026384,ebx
c00018fe:	eb 06                	jmp    c0001906 <dlmallopt+0x62>
c0001900:	89 1d 88 63 02 c0    	mov    DWORD PTR ds:0xc0026388,ebx
c0001906:	be 01 00 00 00       	mov    esi,0x1
c000190b:	eb 1c                	jmp    c0001929 <dlmallopt+0x85>
c000190d:	89 1d 8c 63 02 c0    	mov    DWORD PTR ds:0xc002638c,ebx
c0001913:	eb f1                	jmp    c0001906 <dlmallopt+0x62>
c0001915:	31 f6                	xor    esi,esi
c0001917:	85 db                	test   ebx,ebx
c0001919:	75 0e                	jne    c0001929 <dlmallopt+0x85>
c000191b:	c7 05 94 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026394,0x0
c0001925:	eb df                	jmp    c0001906 <dlmallopt+0x62>
c0001927:	31 f6                	xor    esi,esi
c0001929:	89 f0                	mov    eax,esi
c000192b:	5b                   	pop    ebx
c000192c:	5e                   	pop    esi
c000192d:	c3                   	ret    

c000192e <disk_status>:
c000192e:	31 c0                	xor    eax,eax
c0001930:	c3                   	ret    

c0001931 <disk_initialize>:
c0001931:	31 c0                	xor    eax,eax
c0001933:	c3                   	ret    

c0001934 <disk_read>:
c0001934:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001939:	0f b6 04 85 e0 9a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6520]
c0001941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001945:	e9 d2 95 01 00       	jmp    c001af1c <fatWrapperReadDisk>

c000194a <disk_write>:
c000194a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194f:	0f b6 04 85 e0 9a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6520]
c0001957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000195b:	e9 04 96 01 00       	jmp    c001af64 <fatWrapperWriteDisk>

c0001960 <disk_ioctl>:
c0001960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001969:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196e:	0f b6 04 85 e0 9a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6520]
c0001976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000197a:	e9 2d 96 01 00       	jmp    c001afac <fatWrapperIoctl>

c000197f <ld_word>:
c000197f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001983:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001986:	c1 e2 08             	shl    edx,0x8
c0001989:	09 d0                	or     eax,edx
c000198b:	c3                   	ret    

c000198c <ld_dword>:
c000198c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001990:	89 d1                	mov    ecx,edx
c0001992:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001996:	c1 e1 08             	shl    ecx,0x8
c0001999:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199c:	09 ca                	or     edx,ecx
c000199e:	c1 e2 08             	shl    edx,0x8
c00019a1:	09 d0                	or     eax,edx
c00019a3:	c3                   	ret    

c00019a4 <ld_qword>:
c00019a4:	57                   	push   edi
c00019a5:	56                   	push   esi
c00019a6:	53                   	push   ebx
c00019a7:	31 db                	xor    ebx,ebx
c00019a9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019ac:	89 df                	mov    edi,ebx
c00019ae:	89 ce                	mov    esi,ecx
c00019b0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019b4:	0f a4 f7 08          	shld   edi,esi,0x8
c00019b8:	c1 e6 08             	shl    esi,0x8
c00019bb:	09 f2                	or     edx,esi
c00019bd:	89 d6                	mov    esi,edx
c00019bf:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019d9:	c1 e6 08             	shl    esi,0x8
c00019dc:	89 fb                	mov    ebx,edi
c00019de:	09 f2                	or     edx,esi
c00019e0:	89 d1                	mov    ecx,edx
c00019e2:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019e6:	c1 e1 08             	shl    ecx,0x8
c00019e9:	89 da                	mov    edx,ebx
c00019eb:	09 c8                	or     eax,ecx
c00019ed:	5b                   	pop    ebx
c00019ee:	5e                   	pop    esi
c00019ef:	5f                   	pop    edi
c00019f0:	c3                   	ret    

c00019f1 <st_word>:
c00019f1:	66 89 10             	mov    WORD PTR [eax],dx
c00019f4:	c3                   	ret    

c00019f5 <st_dword>:
c00019f5:	89 10                	mov    DWORD PTR [eax],edx
c00019f7:	c3                   	ret    

c00019f8 <st_qword>:
c00019f8:	89 10                	mov    DWORD PTR [eax],edx
c00019fa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00019fd:	c3                   	ret    

c00019fe <mem_cpy>:
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 10                	je     c0001a12 <mem_cpy+0x14>
c0001a02:	57                   	push   edi
c0001a03:	01 c1                	add    ecx,eax
c0001a05:	56                   	push   esi
c0001a06:	89 c7                	mov    edi,eax
c0001a08:	89 d6                	mov    esi,edx
c0001a0a:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0b:	39 f9                	cmp    ecx,edi
c0001a0d:	75 fb                	jne    c0001a0a <mem_cpy+0xc>
c0001a0f:	5e                   	pop    esi
c0001a10:	5f                   	pop    edi
c0001a11:	c3                   	ret    
c0001a12:	c3                   	ret    

c0001a13 <mem_set>:
c0001a13:	01 c1                	add    ecx,eax
c0001a15:	40                   	inc    eax
c0001a16:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a19:	39 c8                	cmp    eax,ecx
c0001a1b:	75 f8                	jne    c0001a15 <mem_set+0x2>
c0001a1d:	c3                   	ret    

c0001a1e <mem_cmp>:
c0001a1e:	57                   	push   edi
c0001a1f:	56                   	push   esi
c0001a20:	89 c6                	mov    esi,eax
c0001a22:	53                   	push   ebx
c0001a23:	46                   	inc    esi
c0001a24:	42                   	inc    edx
c0001a25:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a29:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a2d:	29 fb                	sub    ebx,edi
c0001a2f:	89 cf                	mov    edi,ecx
c0001a31:	29 f7                	sub    edi,esi
c0001a33:	01 c7                	add    edi,eax
c0001a35:	74 04                	je     c0001a3b <mem_cmp+0x1d>
c0001a37:	85 db                	test   ebx,ebx
c0001a39:	74 e8                	je     c0001a23 <mem_cmp+0x5>
c0001a3b:	89 d8                	mov    eax,ebx
c0001a3d:	5b                   	pop    ebx
c0001a3e:	5e                   	pop    esi
c0001a3f:	5f                   	pop    edi
c0001a40:	c3                   	ret    

c0001a41 <chk_chr>:
c0001a41:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a44:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a47:	74 07                	je     c0001a50 <chk_chr+0xf>
c0001a49:	39 d1                	cmp    ecx,edx
c0001a4b:	74 03                	je     c0001a50 <chk_chr+0xf>
c0001a4d:	40                   	inc    eax
c0001a4e:	eb f1                	jmp    c0001a41 <chk_chr>
c0001a50:	89 c8                	mov    eax,ecx
c0001a52:	c3                   	ret    

c0001a53 <dbc_1st>:
c0001a53:	31 c0                	xor    eax,eax
c0001a55:	c3                   	ret    

c0001a56 <dbc_2nd>:
c0001a56:	31 c0                	xor    eax,eax
c0001a58:	c3                   	ret    

c0001a59 <tchar2uni>:
c0001a59:	57                   	push   edi
c0001a5a:	89 c7                	mov    edi,eax
c0001a5c:	56                   	push   esi
c0001a5d:	53                   	push   ebx
c0001a5e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a60:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a62:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a65:	84 c9                	test   cl,cl
c0001a67:	78 0a                	js     c0001a73 <tchar2uni+0x1a>
c0001a69:	0f b6 d1             	movzx  edx,cl
c0001a6c:	89 f3                	mov    ebx,esi
c0001a6e:	e9 9f 00 00 00       	jmp    c0001b12 <tchar2uni+0xb9>
c0001a73:	88 ca                	mov    dl,cl
c0001a75:	83 e2 e0             	and    edx,0xffffffe0
c0001a78:	80 fa c0             	cmp    dl,0xc0
c0001a7b:	75 0c                	jne    c0001a89 <tchar2uni+0x30>
c0001a7d:	89 ca                	mov    edx,ecx
c0001a7f:	b9 01 00 00 00       	mov    ecx,0x1
c0001a84:	83 e2 1f             	and    edx,0x1f
c0001a87:	eb 2e                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a89:	88 ca                	mov    dl,cl
c0001a8b:	83 e2 f0             	and    edx,0xfffffff0
c0001a8e:	80 fa e0             	cmp    dl,0xe0
c0001a91:	75 0c                	jne    c0001a9f <tchar2uni+0x46>
c0001a93:	89 ca                	mov    edx,ecx
c0001a95:	b9 02 00 00 00       	mov    ecx,0x2
c0001a9a:	83 e2 0f             	and    edx,0xf
c0001a9d:	eb 18                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a9f:	88 ca                	mov    dl,cl
c0001aa1:	83 e2 f8             	and    edx,0xfffffff8
c0001aa4:	88 d0                	mov    al,dl
c0001aa6:	83 ca ff             	or     edx,0xffffffff
c0001aa9:	3c f0                	cmp    al,0xf0
c0001aab:	75 6c                	jne    c0001b19 <tchar2uni+0xc0>
c0001aad:	89 ca                	mov    edx,ecx
c0001aaf:	b9 03 00 00 00       	mov    ecx,0x3
c0001ab4:	83 e2 07             	and    edx,0x7
c0001ab7:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001abb:	46                   	inc    esi
c0001abc:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001abf:	88 c8                	mov    al,cl
c0001ac1:	83 e0 c0             	and    eax,0xffffffc0
c0001ac4:	3c 80                	cmp    al,0x80
c0001ac6:	75 4e                	jne    c0001b16 <tchar2uni+0xbd>
c0001ac8:	c1 e2 06             	shl    edx,0x6
c0001acb:	83 e1 3f             	and    ecx,0x3f
c0001ace:	09 ca                	or     edx,ecx
c0001ad0:	39 de                	cmp    esi,ebx
c0001ad2:	75 e7                	jne    c0001abb <tchar2uni+0x62>
c0001ad4:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ad7:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001add:	77 37                	ja     c0001b16 <tchar2uni+0xbd>
c0001adf:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ae5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001aeb:	76 29                	jbe    c0001b16 <tchar2uni+0xbd>
c0001aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001af3:	76 1d                	jbe    c0001b12 <tchar2uni+0xb9>
c0001af5:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001afb:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b01:	c1 e1 06             	shl    ecx,0x6
c0001b04:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b0a:	09 ca                	or     edx,ecx
c0001b0c:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b12:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b14:	eb 03                	jmp    c0001b19 <tchar2uni+0xc0>
c0001b16:	83 ca ff             	or     edx,0xffffffff
c0001b19:	5b                   	pop    ebx
c0001b1a:	89 d0                	mov    eax,edx
c0001b1c:	5e                   	pop    esi
c0001b1d:	5f                   	pop    edi
c0001b1e:	c3                   	ret    

c0001b1f <put_utf>:
c0001b1f:	53                   	push   ebx
c0001b20:	83 f8 7f             	cmp    eax,0x7f
c0001b23:	89 c3                	mov    ebx,eax
c0001b25:	b0 00                	mov    al,0x0
c0001b27:	77 11                	ja     c0001b3a <put_utf+0x1b>
c0001b29:	85 c9                	test   ecx,ecx
c0001b2b:	0f 84 e5 00 00 00    	je     c0001c16 <put_utf+0xf7>
c0001b31:	88 1a                	mov    BYTE PTR [edx],bl
c0001b33:	b0 01                	mov    al,0x1
c0001b35:	e9 dc 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b3a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b40:	77 23                	ja     c0001b65 <put_utf+0x46>
c0001b42:	83 f9 01             	cmp    ecx,0x1
c0001b45:	0f 86 cb 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b4b:	89 d8                	mov    eax,ebx
c0001b4d:	83 e3 3f             	and    ebx,0x3f
c0001b50:	c1 e8 06             	shr    eax,0x6
c0001b53:	83 cb 80             	or     ebx,0xffffff80
c0001b56:	83 c8 c0             	or     eax,0xffffffc0
c0001b59:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b5c:	88 02                	mov    BYTE PTR [edx],al
c0001b5e:	b0 02                	mov    al,0x2
c0001b60:	e9 b1 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b65:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b6b:	77 40                	ja     c0001bad <put_utf+0x8e>
c0001b6d:	83 f9 02             	cmp    ecx,0x2
c0001b70:	0f 86 a0 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b76:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b7c:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b82:	0f 86 8e 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b88:	89 d8                	mov    eax,ebx
c0001b8a:	c1 e8 0c             	shr    eax,0xc
c0001b8d:	83 c8 e0             	or     eax,0xffffffe0
c0001b90:	88 02                	mov    BYTE PTR [edx],al
c0001b92:	89 d8                	mov    eax,ebx
c0001b94:	83 e3 3f             	and    ebx,0x3f
c0001b97:	c1 e8 06             	shr    eax,0x6
c0001b9a:	83 cb 80             	or     ebx,0xffffff80
c0001b9d:	83 e0 3f             	and    eax,0x3f
c0001ba0:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ba3:	83 c8 80             	or     eax,0xffffff80
c0001ba6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ba9:	b0 03                	mov    al,0x3
c0001bab:	eb 69                	jmp    c0001c16 <put_utf+0xf7>
c0001bad:	83 f9 03             	cmp    ecx,0x3
c0001bb0:	76 64                	jbe    c0001c16 <put_utf+0xf7>
c0001bb2:	89 d9                	mov    ecx,ebx
c0001bb4:	0f b7 c3             	movzx  eax,bx
c0001bb7:	66 31 c9             	xor    cx,cx
c0001bba:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bc0:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bc6:	c1 e9 06             	shr    ecx,0x6
c0001bc9:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bcf:	77 43                	ja     c0001c14 <put_utf+0xf5>
c0001bd1:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001bd7:	77 3b                	ja     c0001c14 <put_utf+0xf5>
c0001bd9:	09 cb                	or     ebx,ecx
c0001bdb:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001be1:	89 d8                	mov    eax,ebx
c0001be3:	c1 e8 12             	shr    eax,0x12
c0001be6:	83 c8 f0             	or     eax,0xfffffff0
c0001be9:	88 02                	mov    BYTE PTR [edx],al
c0001beb:	89 d8                	mov    eax,ebx
c0001bed:	c1 e8 0c             	shr    eax,0xc
c0001bf0:	83 e0 3f             	and    eax,0x3f
c0001bf3:	83 c8 80             	or     eax,0xffffff80
c0001bf6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bf9:	89 d8                	mov    eax,ebx
c0001bfb:	83 e3 3f             	and    ebx,0x3f
c0001bfe:	c1 e8 06             	shr    eax,0x6
c0001c01:	83 cb 80             	or     ebx,0xffffff80
c0001c04:	83 e0 3f             	and    eax,0x3f
c0001c07:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c0a:	83 c8 80             	or     eax,0xffffff80
c0001c0d:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c10:	b0 04                	mov    al,0x4
c0001c12:	eb 02                	jmp    c0001c16 <put_utf+0xf7>
c0001c14:	31 c0                	xor    eax,eax
c0001c16:	5b                   	pop    ebx
c0001c17:	c3                   	ret    

c0001c18 <clst2sect>:
c0001c18:	89 c1                	mov    ecx,eax
c0001c1a:	83 ea 02             	sub    edx,0x2
c0001c1d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c20:	83 e8 02             	sub    eax,0x2
c0001c23:	39 d0                	cmp    eax,edx
c0001c25:	76 0d                	jbe    c0001c34 <clst2sect+0x1c>
c0001c27:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c2b:	f7 e2                	mul    edx
c0001c2d:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c30:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c33:	c3                   	ret    
c0001c34:	31 c0                	xor    eax,eax
c0001c36:	31 d2                	xor    edx,edx
c0001c38:	c3                   	ret    

c0001c39 <clmt_clust>:
c0001c39:	57                   	push   edi
c0001c3a:	89 cf                	mov    edi,ecx
c0001c3c:	56                   	push   esi
c0001c3d:	89 d6                	mov    esi,edx
c0001c3f:	53                   	push   ebx
c0001c40:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c44:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c47:	89 f2                	mov    edx,esi
c0001c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c4b:	c1 ef 09             	shr    edi,0x9
c0001c4e:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c52:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c55:	89 f9                	mov    ecx,edi
c0001c57:	31 ff                	xor    edi,edi
c0001c59:	57                   	push   edi
c0001c5a:	56                   	push   esi
c0001c5b:	51                   	push   ecx
c0001c5c:	52                   	push   edx
c0001c5d:	e8 4e f9 01 00       	call   c00215b0 <__udivdi3>
c0001c62:	83 c4 10             	add    esp,0x10
c0001c65:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c67:	85 d2                	test   edx,edx
c0001c69:	74 10                	je     c0001c7b <clmt_clust+0x42>
c0001c6b:	39 d0                	cmp    eax,edx
c0001c6d:	72 07                	jb     c0001c76 <clmt_clust+0x3d>
c0001c6f:	29 d0                	sub    eax,edx
c0001c71:	83 c3 08             	add    ebx,0x8
c0001c74:	eb ef                	jmp    c0001c65 <clmt_clust+0x2c>
c0001c76:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c79:	89 c2                	mov    edx,eax
c0001c7b:	5b                   	pop    ebx
c0001c7c:	89 d0                	mov    eax,edx
c0001c7e:	5e                   	pop    esi
c0001c7f:	5f                   	pop    edi
c0001c80:	c3                   	ret    

c0001c81 <pick_lfn>:
c0001c81:	55                   	push   ebp
c0001c82:	57                   	push   edi
c0001c83:	56                   	push   esi
c0001c84:	89 d6                	mov    esi,edx
c0001c86:	53                   	push   ebx
c0001c87:	89 c3                	mov    ebx,eax
c0001c89:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c8c:	e8 ee fc ff ff       	call   c000197f <ld_word>
c0001c91:	66 85 c0             	test   ax,ax
c0001c94:	74 04                	je     c0001c9a <pick_lfn+0x19>
c0001c96:	31 c0                	xor    eax,eax
c0001c98:	eb 5c                	jmp    c0001cf6 <pick_lfn+0x75>
c0001c9a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001c9d:	bd 01 00 00 00       	mov    ebp,0x1
c0001ca2:	83 e1 bf             	and    ecx,0xffffffbf
c0001ca5:	31 ff                	xor    edi,edi
c0001ca7:	49                   	dec    ecx
c0001ca8:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cab:	0f b6 87 c0 24 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddb40]
c0001cb2:	01 f0                	add    eax,esi
c0001cb4:	e8 c6 fc ff ff       	call   c000197f <ld_word>
c0001cb9:	66 85 ed             	test   bp,bp
c0001cbc:	74 11                	je     c0001ccf <pick_lfn+0x4e>
c0001cbe:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cc4:	77 d0                	ja     c0001c96 <pick_lfn+0x15>
c0001cc6:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cca:	89 c5                	mov    ebp,eax
c0001ccc:	41                   	inc    ecx
c0001ccd:	eb 04                	jmp    c0001cd3 <pick_lfn+0x52>
c0001ccf:	66 40                	inc    ax
c0001cd1:	75 c3                	jne    c0001c96 <pick_lfn+0x15>
c0001cd3:	47                   	inc    edi
c0001cd4:	83 ff 0d             	cmp    edi,0xd
c0001cd7:	75 d2                	jne    c0001cab <pick_lfn+0x2a>
c0001cd9:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cdc:	74 13                	je     c0001cf1 <pick_lfn+0x70>
c0001cde:	66 85 ed             	test   bp,bp
c0001ce1:	74 0e                	je     c0001cf1 <pick_lfn+0x70>
c0001ce3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ce9:	77 ab                	ja     c0001c96 <pick_lfn+0x15>
c0001ceb:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001cf1:	b8 01 00 00 00       	mov    eax,0x1
c0001cf6:	5b                   	pop    ebx
c0001cf7:	5e                   	pop    esi
c0001cf8:	5f                   	pop    edi
c0001cf9:	5d                   	pop    ebp
c0001cfa:	c3                   	ret    

c0001cfb <put_lfn>:
c0001cfb:	55                   	push   ebp
c0001cfc:	31 ed                	xor    ebp,ebp
c0001cfe:	57                   	push   edi
c0001cff:	89 d7                	mov    edi,edx
c0001d01:	56                   	push   esi
c0001d02:	31 f6                	xor    esi,esi
c0001d04:	53                   	push   ebx
c0001d05:	83 ec 08             	sub    esp,0x8
c0001d08:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d0b:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d13:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d19:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1f:	31 d2                	xor    edx,edx
c0001d21:	e8 cb fc ff ff       	call   c00019f1 <st_word>
c0001d26:	0f b6 d9             	movzx  ebx,cl
c0001d29:	4b                   	dec    ebx
c0001d2a:	6b db 0d             	imul   ebx,ebx,0xd
c0001d2d:	66 83 fe ff          	cmp    si,0xffff
c0001d31:	74 08                	je     c0001d3b <put_lfn+0x40>
c0001d33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d36:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d3a:	43                   	inc    ebx
c0001d3b:	0f b6 85 c0 24 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddb40]
c0001d42:	0f b7 d6             	movzx  edx,si
c0001d45:	01 f8                	add    eax,edi
c0001d47:	e8 a5 fc ff ff       	call   c00019f1 <st_word>
c0001d4c:	66 85 f6             	test   si,si
c0001d4f:	75 03                	jne    c0001d54 <put_lfn+0x59>
c0001d51:	83 ce ff             	or     esi,0xffffffff
c0001d54:	45                   	inc    ebp
c0001d55:	83 fd 0d             	cmp    ebp,0xd
c0001d58:	75 d3                	jne    c0001d2d <put_lfn+0x32>
c0001d5a:	66 46                	inc    si
c0001d5c:	74 0a                	je     c0001d68 <put_lfn+0x6d>
c0001d5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d61:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d66:	75 09                	jne    c0001d71 <put_lfn+0x76>
c0001d68:	88 c8                	mov    al,cl
c0001d6a:	83 c8 40             	or     eax,0x40
c0001d6d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d75:	88 07                	mov    BYTE PTR [edi],al
c0001d77:	83 c4 08             	add    esp,0x8
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <gen_numname>:
c0001d7f:	57                   	push   edi
c0001d80:	89 cf                	mov    edi,ecx
c0001d82:	56                   	push   esi
c0001d83:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d88:	53                   	push   ebx
c0001d89:	89 c6                	mov    esi,eax
c0001d8b:	83 ec 10             	sub    esp,0x10
c0001d8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001d92:	e8 67 fc ff ff       	call   c00019fe <mem_cpy>
c0001d97:	83 fb 05             	cmp    ebx,0x5
c0001d9a:	76 2d                	jbe    c0001dc9 <gen_numname+0x4a>
c0001d9c:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001d9f:	66 85 c0             	test   ax,ax
c0001da2:	74 25                	je     c0001dc9 <gen_numname+0x4a>
c0001da4:	83 c7 02             	add    edi,0x2
c0001da7:	ba 10 00 00 00       	mov    edx,0x10
c0001dac:	01 db                	add    ebx,ebx
c0001dae:	89 c1                	mov    ecx,eax
c0001db0:	66 d1 e8             	shr    ax,1
c0001db3:	83 e1 01             	and    ecx,0x1
c0001db6:	01 cb                	add    ebx,ecx
c0001db8:	0f ba e3 10          	bt     ebx,0x10
c0001dbc:	73 06                	jae    c0001dc4 <gen_numname+0x45>
c0001dbe:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dc4:	4a                   	dec    edx
c0001dc5:	75 e5                	jne    c0001dac <gen_numname+0x2d>
c0001dc7:	eb d3                	jmp    c0001d9c <gen_numname+0x1d>
c0001dc9:	b8 07 00 00 00       	mov    eax,0x7
c0001dce:	88 d9                	mov    cl,bl
c0001dd0:	83 e1 0f             	and    ecx,0xf
c0001dd3:	8d 51 30             	lea    edx,[ecx+0x30]
c0001dd6:	80 fa 39             	cmp    dl,0x39
c0001dd9:	76 03                	jbe    c0001dde <gen_numname+0x5f>
c0001ddb:	8d 51 37             	lea    edx,[ecx+0x37]
c0001dde:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001de1:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001de5:	89 da                	mov    edx,ebx
c0001de7:	c1 ea 04             	shr    edx,0x4
c0001dea:	83 fb 0f             	cmp    ebx,0xf
c0001ded:	76 06                	jbe    c0001df5 <gen_numname+0x76>
c0001def:	89 c8                	mov    eax,ecx
c0001df1:	89 d3                	mov    ebx,edx
c0001df3:	eb d9                	jmp    c0001dce <gen_numname+0x4f>
c0001df5:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001dfa:	31 d2                	xor    edx,edx
c0001dfc:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001dff:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e02:	39 ca                	cmp    edx,ecx
c0001e04:	73 18                	jae    c0001e1e <gen_numname+0x9f>
c0001e06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e09:	3c 20                	cmp    al,0x20
c0001e0b:	74 11                	je     c0001e1e <gen_numname+0x9f>
c0001e0d:	e8 41 fc ff ff       	call   c0001a53 <dbc_1st>
c0001e12:	85 c0                	test   eax,eax
c0001e14:	74 05                	je     c0001e1b <gen_numname+0x9c>
c0001e16:	39 d3                	cmp    ebx,edx
c0001e18:	74 04                	je     c0001e1e <gen_numname+0x9f>
c0001e1a:	42                   	inc    edx
c0001e1b:	42                   	inc    edx
c0001e1c:	eb e1                	jmp    c0001dff <gen_numname+0x80>
c0001e1e:	b0 20                	mov    al,0x20
c0001e20:	83 f9 07             	cmp    ecx,0x7
c0001e23:	77 05                	ja     c0001e2a <gen_numname+0xab>
c0001e25:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e29:	41                   	inc    ecx
c0001e2a:	42                   	inc    edx
c0001e2b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e2f:	83 fa 07             	cmp    edx,0x7
c0001e32:	76 ea                	jbe    c0001e1e <gen_numname+0x9f>
c0001e34:	83 c4 10             	add    esp,0x10
c0001e37:	5b                   	pop    ebx
c0001e38:	5e                   	pop    esi
c0001e39:	5f                   	pop    edi
c0001e3a:	c3                   	ret    

c0001e3b <sum_sfn>:
c0001e3b:	31 c9                	xor    ecx,ecx
c0001e3d:	31 d2                	xor    edx,edx
c0001e3f:	d0 ca                	ror    dl,1
c0001e41:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e44:	41                   	inc    ecx
c0001e45:	83 f9 0b             	cmp    ecx,0xb
c0001e48:	75 f5                	jne    c0001e3f <sum_sfn+0x4>
c0001e4a:	88 d0                	mov    al,dl
c0001e4c:	c3                   	ret    

c0001e4d <xdir_sum>:
c0001e4d:	56                   	push   esi
c0001e4e:	31 c9                	xor    ecx,ecx
c0001e50:	53                   	push   ebx
c0001e51:	31 d2                	xor    edx,edx
c0001e53:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e57:	43                   	inc    ebx
c0001e58:	c1 e3 05             	shl    ebx,0x5
c0001e5b:	83 fa 02             	cmp    edx,0x2
c0001e5e:	74 0b                	je     c0001e6b <xdir_sum+0x1e>
c0001e60:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e64:	66 d1 c9             	ror    cx,1
c0001e67:	01 f1                	add    ecx,esi
c0001e69:	eb 05                	jmp    c0001e70 <xdir_sum+0x23>
c0001e6b:	ba 03 00 00 00       	mov    edx,0x3
c0001e70:	42                   	inc    edx
c0001e71:	39 d3                	cmp    ebx,edx
c0001e73:	77 e6                	ja     c0001e5b <xdir_sum+0xe>
c0001e75:	89 c8                	mov    eax,ecx
c0001e77:	5b                   	pop    ebx
c0001e78:	5e                   	pop    esi
c0001e79:	c3                   	ret    

c0001e7a <xsum32>:
c0001e7a:	d1 ca                	ror    edx,1
c0001e7c:	0f b6 c0             	movzx  eax,al
c0001e7f:	01 d0                	add    eax,edx
c0001e81:	c3                   	ret    

c0001e82 <get_xfileinfo>:
c0001e82:	55                   	push   ebp
c0001e83:	31 c9                	xor    ecx,ecx
c0001e85:	57                   	push   edi
c0001e86:	bd 40 00 00 00       	mov    ebp,0x40
c0001e8b:	56                   	push   esi
c0001e8c:	31 ff                	xor    edi,edi
c0001e8e:	53                   	push   ebx
c0001e8f:	89 c6                	mov    esi,eax
c0001e91:	83 ec 0c             	sub    esp,0xc
c0001e94:	89 d3                	mov    ebx,edx
c0001e96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001e9d:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001ea1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001ea4:	76 6d                	jbe    c0001f13 <get_xfileinfo+0x91>
c0001ea6:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001eac:	76 0b                	jbe    c0001eb9 <get_xfileinfo+0x37>
c0001eae:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001eb2:	bf 01 00 00 00       	mov    edi,0x1
c0001eb7:	eb 63                	jmp    c0001f1c <get_xfileinfo+0x9a>
c0001eb9:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ebf:	75 03                	jne    c0001ec4 <get_xfileinfo+0x42>
c0001ec1:	83 c5 02             	add    ebp,0x2
c0001ec4:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ec7:	83 c5 02             	add    ebp,0x2
c0001eca:	e8 b0 fa ff ff       	call   c000197f <ld_word>
c0001ecf:	ff 04 24             	inc    DWORD PTR [esp]
c0001ed2:	66 85 c9             	test   cx,cx
c0001ed5:	75 0d                	jne    c0001ee4 <get_xfileinfo+0x62>
c0001ed7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001edd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ee2:	76 2b                	jbe    c0001f0f <get_xfileinfo+0x8d>
c0001ee4:	c1 e1 10             	shl    ecx,0x10
c0001ee7:	ba ff 00 00 00       	mov    edx,0xff
c0001eec:	0f b7 c0             	movzx  eax,ax
c0001eef:	29 fa                	sub    edx,edi
c0001ef1:	09 c8                	or     eax,ecx
c0001ef3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001ef7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001efb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001eff:	e8 1b fc ff ff       	call   c0001b1f <put_utf>
c0001f04:	84 c0                	test   al,al
c0001f06:	74 a6                	je     c0001eae <get_xfileinfo+0x2c>
c0001f08:	0f b6 c0             	movzx  eax,al
c0001f0b:	01 c7                	add    edi,eax
c0001f0d:	31 c0                	xor    eax,eax
c0001f0f:	89 c1                	mov    ecx,eax
c0001f11:	eb 8a                	jmp    c0001e9d <get_xfileinfo+0x1b>
c0001f13:	85 ff                	test   edi,edi
c0001f15:	74 97                	je     c0001eae <get_xfileinfo+0x2c>
c0001f17:	66 85 c9             	test   cx,cx
c0001f1a:	75 92                	jne    c0001eae <get_xfileinfo+0x2c>
c0001f1c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f21:	31 c0                	xor    eax,eax
c0001f23:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f27:	31 d2                	xor    edx,edx
c0001f29:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f2c:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f2f:	80 e1 10             	and    cl,0x10
c0001f32:	75 08                	jne    c0001f3c <get_xfileinfo+0xba>
c0001f34:	8d 46 38             	lea    eax,[esi+0x38]
c0001f37:	e8 68 fa ff ff       	call   c00019a4 <ld_qword>
c0001f3c:	89 03                	mov    DWORD PTR [ebx],eax
c0001f3e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f41:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f44:	e8 36 fa ff ff       	call   c000197f <ld_word>
c0001f49:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f4d:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f50:	e8 2a fa ff ff       	call   c000197f <ld_word>
c0001f55:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f59:	83 c4 0c             	add    esp,0xc
c0001f5c:	5b                   	pop    ebx
c0001f5d:	5e                   	pop    esi
c0001f5e:	5f                   	pop    edi
c0001f5f:	5d                   	pop    ebp
c0001f60:	c3                   	ret    

c0001f61 <get_ldnumber>:
c0001f61:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f63:	85 d2                	test   edx,edx
c0001f65:	74 14                	je     c0001f7b <get_ldnumber+0x1a>
c0001f67:	56                   	push   esi
c0001f68:	53                   	push   ebx
c0001f69:	89 d3                	mov    ebx,edx
c0001f6b:	43                   	inc    ebx
c0001f6c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f6f:	80 f9 1f             	cmp    cl,0x1f
c0001f72:	76 0d                	jbe    c0001f81 <get_ldnumber+0x20>
c0001f74:	80 f9 3a             	cmp    cl,0x3a
c0001f77:	75 f2                	jne    c0001f6b <get_ldnumber+0xa>
c0001f79:	eb 0a                	jmp    c0001f85 <get_ldnumber+0x24>
c0001f7b:	83 c9 ff             	or     ecx,0xffffffff
c0001f7e:	89 c8                	mov    eax,ecx
c0001f80:	c3                   	ret    
c0001f81:	31 c9                	xor    ecx,ecx
c0001f83:	eb 24                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001f85:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f88:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f8b:	80 f9 09             	cmp    cl,0x9
c0001f8e:	77 16                	ja     c0001fa6 <get_ldnumber+0x45>
c0001f90:	83 c2 02             	add    edx,0x2
c0001f93:	83 c9 ff             	or     ecx,0xffffffff
c0001f96:	39 d3                	cmp    ebx,edx
c0001f98:	75 0f                	jne    c0001fa9 <get_ldnumber+0x48>
c0001f9a:	89 f2                	mov    edx,esi
c0001f9c:	89 18                	mov    DWORD PTR [eax],ebx
c0001f9e:	0f be ca             	movsx  ecx,dl
c0001fa1:	83 e9 30             	sub    ecx,0x30
c0001fa4:	eb 03                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001fa6:	83 c9 ff             	or     ecx,0xffffffff
c0001fa9:	89 c8                	mov    eax,ecx
c0001fab:	5b                   	pop    ebx
c0001fac:	5e                   	pop    esi
c0001fad:	c3                   	ret    

c0001fae <crc32>:
c0001fae:	56                   	push   esi
c0001faf:	89 d6                	mov    esi,edx
c0001fb1:	53                   	push   ebx
c0001fb2:	b2 01                	mov    dl,0x1
c0001fb4:	bb 08 00 00 00       	mov    ebx,0x8
c0001fb9:	89 f1                	mov    ecx,esi
c0001fbb:	84 d1                	test   cl,dl
c0001fbd:	0f 95 c1             	setne  cl
c0001fc0:	0f b6 c9             	movzx  ecx,cl
c0001fc3:	31 c1                	xor    ecx,eax
c0001fc5:	89 c8                	mov    eax,ecx
c0001fc7:	d1 e8                	shr    eax,1
c0001fc9:	80 e1 01             	and    cl,0x1
c0001fcc:	74 05                	je     c0001fd3 <crc32+0x25>
c0001fce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fd3:	d1 e2                	shl    edx,1
c0001fd5:	4b                   	dec    ebx
c0001fd6:	75 e1                	jne    c0001fb9 <crc32+0xb>
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	c3                   	ret    

c0001fdb <test_gpt_header>:
c0001fdb:	55                   	push   ebp
c0001fdc:	b9 10 00 00 00       	mov    ecx,0x10
c0001fe1:	57                   	push   edi
c0001fe2:	ba c0 23 02 c0       	mov    edx,0xc00223c0
c0001fe7:	56                   	push   esi
c0001fe8:	31 ff                	xor    edi,edi
c0001fea:	53                   	push   ebx
c0001feb:	89 c3                	mov    ebx,eax
c0001fed:	e8 2c fa ff ff       	call   c0001a1e <mem_cmp>
c0001ff2:	85 c0                	test   eax,eax
c0001ff4:	75 55                	jne    c000204b <test_gpt_header+0x70>
c0001ff6:	89 c7                	mov    edi,eax
c0001ff8:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0001ffd:	83 ce ff             	or     esi,0xffffffff
c0002000:	31 d2                	xor    edx,edx
c0002002:	83 fd 03             	cmp    ebp,0x3
c0002005:	76 05                	jbe    c000200c <test_gpt_header+0x31>
c0002007:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000200c:	89 f0                	mov    eax,esi
c000200e:	45                   	inc    ebp
c000200f:	e8 9a ff ff ff       	call   c0001fae <crc32>
c0002014:	83 fd 4c             	cmp    ebp,0x4c
c0002017:	89 c6                	mov    esi,eax
c0002019:	75 e5                	jne    c0002000 <test_gpt_header+0x25>
c000201b:	8d 43 10             	lea    eax,[ebx+0x10]
c000201e:	f7 d6                	not    esi
c0002020:	e8 67 f9 ff ff       	call   c000198c <ld_dword>
c0002025:	39 c6                	cmp    esi,eax
c0002027:	75 22                	jne    c000204b <test_gpt_header+0x70>
c0002029:	8d 43 54             	lea    eax,[ebx+0x54]
c000202c:	e8 5b f9 ff ff       	call   c000198c <ld_dword>
c0002031:	83 c0 80             	add    eax,0xffffff80
c0002034:	75 15                	jne    c000204b <test_gpt_header+0x70>
c0002036:	8d 43 50             	lea    eax,[ebx+0x50]
c0002039:	e8 4e f9 ff ff       	call   c000198c <ld_dword>
c000203e:	3d 80 00 00 00       	cmp    eax,0x80
c0002043:	0f 96 c0             	setbe  al
c0002046:	0f b6 c0             	movzx  eax,al
c0002049:	89 c7                	mov    edi,eax
c000204b:	5b                   	pop    ebx
c000204c:	89 f8                	mov    eax,edi
c000204e:	5e                   	pop    esi
c000204f:	5f                   	pop    edi
c0002050:	5d                   	pop    ebp
c0002051:	c3                   	ret    

c0002052 <make_rand>:
c0002052:	56                   	push   esi
c0002053:	85 c0                	test   eax,eax
c0002055:	53                   	push   ebx
c0002056:	75 05                	jne    c000205d <make_rand+0xb>
c0002058:	b8 01 00 00 00       	mov    eax,0x1
c000205d:	01 d1                	add    ecx,edx
c000205f:	bb 08 00 00 00       	mov    ebx,0x8
c0002064:	89 c6                	mov    esi,eax
c0002066:	d1 e8                	shr    eax,1
c0002068:	83 e6 01             	and    esi,0x1
c000206b:	85 f6                	test   esi,esi
c000206d:	74 05                	je     c0002074 <make_rand+0x22>
c000206f:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002074:	4b                   	dec    ebx
c0002075:	75 ed                	jne    c0002064 <make_rand+0x12>
c0002077:	42                   	inc    edx
c0002078:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000207b:	39 ca                	cmp    edx,ecx
c000207d:	75 e0                	jne    c000205f <make_rand+0xd>
c000207f:	5b                   	pop    ebx
c0002080:	5e                   	pop    esi
c0002081:	c3                   	ret    

c0002082 <validate>:
c0002082:	56                   	push   esi
c0002083:	53                   	push   ebx
c0002084:	89 d6                	mov    esi,edx
c0002086:	51                   	push   ecx
c0002087:	85 c0                	test   eax,eax
c0002089:	75 09                	jne    c0002094 <validate+0x12>
c000208b:	b8 09 00 00 00       	mov    eax,0x9
c0002090:	31 c9                	xor    ecx,ecx
c0002092:	eb 2f                	jmp    c00020c3 <validate+0x41>
c0002094:	89 c3                	mov    ebx,eax
c0002096:	8b 00                	mov    eax,DWORD PTR [eax]
c0002098:	85 c0                	test   eax,eax
c000209a:	74 ef                	je     c000208b <validate+0x9>
c000209c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000209f:	74 ea                	je     c000208b <validate+0x9>
c00020a1:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020a5:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020a9:	75 e0                	jne    c000208b <validate+0x9>
c00020ab:	83 ec 0c             	sub    esp,0xc
c00020ae:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020b2:	50                   	push   eax
c00020b3:	e8 76 f8 ff ff       	call   c000192e <disk_status>
c00020b8:	83 c4 10             	add    esp,0x10
c00020bb:	a8 01                	test   al,0x1
c00020bd:	75 cc                	jne    c000208b <validate+0x9>
c00020bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020c1:	31 c0                	xor    eax,eax
c00020c3:	89 0e                	mov    DWORD PTR [esi],ecx
c00020c5:	5a                   	pop    edx
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	c3                   	ret    

c00020c9 <sync_window>:
c00020c9:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020cd:	0f 84 85 00 00 00    	je     c0002158 <sync_window+0x8f>
c00020d3:	55                   	push   ebp
c00020d4:	8d 68 54             	lea    ebp,[eax+0x54]
c00020d7:	57                   	push   edi
c00020d8:	56                   	push   esi
c00020d9:	53                   	push   ebx
c00020da:	89 c3                	mov    ebx,eax
c00020dc:	83 ec 28             	sub    esp,0x28
c00020df:	6a 01                	push   0x1
c00020e1:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020e4:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020e7:	55                   	push   ebp
c00020e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020ec:	50                   	push   eax
c00020ed:	e8 58 f8 ff ff       	call   c000194a <disk_write>
c00020f2:	83 c4 20             	add    esp,0x20
c00020f5:	ba 01 00 00 00       	mov    edx,0x1
c00020fa:	85 c0                	test   eax,eax
c00020fc:	75 50                	jne    c000214e <sync_window+0x85>
c00020fe:	31 ff                	xor    edi,edi
c0002100:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002103:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002107:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000210b:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000210e:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002111:	89 c6                	mov    esi,eax
c0002113:	89 d7                	mov    edi,edx
c0002115:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002118:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000211c:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000211f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002123:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002127:	73 23                	jae    c000214c <sync_window+0x83>
c0002129:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000212d:	75 1d                	jne    c000214c <sync_window+0x83>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	6a 01                	push   0x1
c0002134:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002138:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000213c:	52                   	push   edx
c000213d:	50                   	push   eax
c000213e:	55                   	push   ebp
c000213f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002143:	50                   	push   eax
c0002144:	e8 01 f8 ff ff       	call   c000194a <disk_write>
c0002149:	83 c4 20             	add    esp,0x20
c000214c:	31 d2                	xor    edx,edx
c000214e:	83 c4 1c             	add    esp,0x1c
c0002151:	89 d0                	mov    eax,edx
c0002153:	5b                   	pop    ebx
c0002154:	5e                   	pop    esi
c0002155:	5f                   	pop    edi
c0002156:	5d                   	pop    ebp
c0002157:	c3                   	ret    
c0002158:	31 d2                	xor    edx,edx
c000215a:	89 d0                	mov    eax,edx
c000215c:	c3                   	ret    

c000215d <move_window>:
c000215d:	56                   	push   esi
c000215e:	53                   	push   ebx
c000215f:	89 c3                	mov    ebx,eax
c0002161:	83 ec 14             	sub    esp,0x14
c0002164:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002167:	75 07                	jne    c0002170 <move_window+0x13>
c0002169:	31 f6                	xor    esi,esi
c000216b:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000216e:	74 59                	je     c00021c9 <move_window+0x6c>
c0002170:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002174:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002178:	89 d8                	mov    eax,ebx
c000217a:	e8 4a ff ff ff       	call   c00020c9 <sync_window>
c000217f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002183:	89 c6                	mov    esi,eax
c0002185:	85 c0                	test   eax,eax
c0002187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000218b:	75 3c                	jne    c00021c9 <move_window+0x6c>
c000218d:	83 ec 0c             	sub    esp,0xc
c0002190:	8d 43 54             	lea    eax,[ebx+0x54]
c0002193:	6a 01                	push   0x1
c0002195:	51                   	push   ecx
c0002196:	52                   	push   edx
c0002197:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000219b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000219f:	50                   	push   eax
c00021a0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021a4:	50                   	push   eax
c00021a5:	e8 8a f7 ff ff       	call   c0001934 <disk_read>
c00021aa:	83 c4 20             	add    esp,0x20
c00021ad:	85 c0                	test   eax,eax
c00021af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021b7:	74 0a                	je     c00021c3 <move_window+0x66>
c00021b9:	83 ca ff             	or     edx,0xffffffff
c00021bc:	be 01 00 00 00       	mov    esi,0x1
c00021c1:	89 d1                	mov    ecx,edx
c00021c3:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021c6:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021c9:	89 f0                	mov    eax,esi
c00021cb:	83 c4 14             	add    esp,0x14
c00021ce:	5b                   	pop    ebx
c00021cf:	5e                   	pop    esi
c00021d0:	c3                   	ret    

c00021d1 <check_fs>:
c00021d1:	53                   	push   ebx
c00021d2:	89 c3                	mov    ebx,eax
c00021d4:	83 ec 08             	sub    esp,0x8
c00021d7:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021db:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021e2:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021e9:	e8 6f ff ff ff       	call   c000215d <move_window>
c00021ee:	ba 04 00 00 00       	mov    edx,0x4
c00021f3:	85 c0                	test   eax,eax
c00021f5:	0f 85 89 00 00 00    	jne    c0002284 <check_fs+0xb3>
c00021fb:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002201:	e8 79 f7 ff ff       	call   c000197f <ld_word>
c0002206:	ba 03 00 00 00       	mov    edx,0x3
c000220b:	66 3d 55 aa          	cmp    ax,0xaa55
c000220f:	75 73                	jne    c0002284 <check_fs+0xb3>
c0002211:	ba e0 24 02 c0       	mov    edx,0xc00224e0
c0002216:	8d 43 54             	lea    eax,[ebx+0x54]
c0002219:	b9 0b 00 00 00       	mov    ecx,0xb
c000221e:	e8 fb f7 ff ff       	call   c0001a1e <mem_cmp>
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	74 58                	je     c0002284 <check_fs+0xb3>
c000222c:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000222f:	8d 50 18             	lea    edx,[eax+0x18]
c0002232:	80 fa 01             	cmp    dl,0x1
c0002235:	76 09                	jbe    c0002240 <check_fs+0x6f>
c0002237:	ba 02 00 00 00       	mov    edx,0x2
c000223c:	3c eb                	cmp    al,0xeb
c000223e:	75 44                	jne    c0002284 <check_fs+0xb3>
c0002240:	ba 38 4d 02 c0       	mov    edx,0xc0024d38
c0002245:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000224b:	b9 03 00 00 00       	mov    ecx,0x3
c0002250:	e8 c9 f7 ff ff       	call   c0001a1e <mem_cmp>
c0002255:	31 d2                	xor    edx,edx
c0002257:	85 c0                	test   eax,eax
c0002259:	74 29                	je     c0002284 <check_fs+0xb3>
c000225b:	ba ec 24 02 c0       	mov    edx,0xc00224ec
c0002260:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002266:	b9 05 00 00 00       	mov    ecx,0x5
c000226b:	e8 ae f7 ff ff       	call   c0001a1e <mem_cmp>
c0002270:	31 d2                	xor    edx,edx
c0002272:	85 c0                	test   eax,eax
c0002274:	74 0e                	je     c0002284 <check_fs+0xb3>
c0002276:	31 d2                	xor    edx,edx
c0002278:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000227f:	0f 95 c2             	setne  dl
c0002282:	01 d2                	add    edx,edx
c0002284:	89 d0                	mov    eax,edx
c0002286:	83 c4 08             	add    esp,0x8
c0002289:	5b                   	pop    ebx
c000228a:	c3                   	ret    

c000228b <find_volume>:
c000228b:	55                   	push   ebp
c000228c:	31 c9                	xor    ecx,ecx
c000228e:	57                   	push   edi
c000228f:	56                   	push   esi
c0002290:	89 d6                	mov    esi,edx
c0002292:	53                   	push   ebx
c0002293:	31 d2                	xor    edx,edx
c0002295:	83 ec 3c             	sub    esp,0x3c
c0002298:	89 c3                	mov    ebx,eax
c000229a:	e8 32 ff ff ff       	call   c00021d1 <check_fs>
c000229f:	83 f8 02             	cmp    eax,0x2
c00022a2:	74 0e                	je     c00022b2 <find_volume+0x27>
c00022a4:	0f 87 5d 01 00 00    	ja     c0002407 <find_volume+0x17c>
c00022aa:	85 f6                	test   esi,esi
c00022ac:	0f 84 55 01 00 00    	je     c0002407 <find_volume+0x17c>
c00022b2:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022b9:	0f 85 dd 00 00 00    	jne    c000239c <find_volume+0x111>
c00022bf:	31 c9                	xor    ecx,ecx
c00022c1:	ba 01 00 00 00       	mov    edx,0x1
c00022c6:	89 d8                	mov    eax,ebx
c00022c8:	e8 90 fe ff ff       	call   c000215d <move_window>
c00022cd:	85 c0                	test   eax,eax
c00022cf:	74 0a                	je     c00022db <find_volume+0x50>
c00022d1:	b8 04 00 00 00       	mov    eax,0x4
c00022d6:	e9 2c 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022db:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022de:	89 e8                	mov    eax,ebp
c00022e0:	e8 f6 fc ff ff       	call   c0001fdb <test_gpt_header>
c00022e5:	85 c0                	test   eax,eax
c00022e7:	75 0a                	jne    c00022f3 <find_volume+0x68>
c00022e9:	b8 03 00 00 00       	mov    eax,0x3
c00022ee:	e9 14 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022f3:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00022f9:	e8 8e f6 ff ff       	call   c000198c <ld_dword>
c00022fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002302:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002308:	e8 97 f6 ff ff       	call   c00019a4 <ld_qword>
c000230d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002315:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000231d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002325:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002329:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000232d:	74 ba                	je     c00022e9 <find_volume+0x5e>
c000232f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002333:	31 c9                	xor    ecx,ecx
c0002335:	c1 e7 07             	shl    edi,0x7
c0002338:	89 d8                	mov    eax,ebx
c000233a:	89 fa                	mov    edx,edi
c000233c:	c1 ea 09             	shr    edx,0x9
c000233f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002343:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002347:	e8 11 fe ff ff       	call   c000215d <move_window>
c000234c:	85 c0                	test   eax,eax
c000234e:	75 81                	jne    c00022d1 <find_volume+0x46>
c0002350:	81 e7 80 01 00 00    	and    edi,0x180
c0002356:	b9 10 00 00 00       	mov    ecx,0x10
c000235b:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000235f:	ba d0 24 02 c0       	mov    edx,0xc00224d0
c0002364:	e8 b5 f6 ff ff       	call   c0001a1e <mem_cmp>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 29                	jne    c0002396 <find_volume+0x10b>
c000236d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002371:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002375:	e8 2a f6 ff ff       	call   c00019a4 <ld_qword>
c000237a:	89 d1                	mov    ecx,edx
c000237c:	89 c2                	mov    edx,eax
c000237e:	89 d8                	mov    eax,ebx
c0002380:	e8 4c fe ff ff       	call   c00021d1 <check_fs>
c0002385:	85 f6                	test   esi,esi
c0002387:	75 07                	jne    c0002390 <find_volume+0x105>
c0002389:	83 f8 01             	cmp    eax,0x1
c000238c:	77 08                	ja     c0002396 <find_volume+0x10b>
c000238e:	eb 77                	jmp    c0002407 <find_volume+0x17c>
c0002390:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002394:	74 71                	je     c0002407 <find_volume+0x17c>
c0002396:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000239a:	eb 89                	jmp    c0002325 <find_volume+0x9a>
c000239c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023a0:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023a6:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023b0:	89 cd                	mov    ebp,ecx
c00023b2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023b6:	89 f8                	mov    eax,edi
c00023b8:	83 c7 10             	add    edi,0x10
c00023bb:	e8 cc f5 ff ff       	call   c000198c <ld_dword>
c00023c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023c4:	89 01                	mov    DWORD PTR [ecx],eax
c00023c6:	83 c1 04             	add    ecx,0x4
c00023c9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023cd:	75 e3                	jne    c00023b2 <find_volume+0x127>
c00023cf:	31 ff                	xor    edi,edi
c00023d1:	85 f6                	test   esi,esi
c00023d3:	74 03                	je     c00023d8 <find_volume+0x14d>
c00023d5:	8d 7e ff             	lea    edi,[esi-0x1]
c00023d8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023dc:	85 d2                	test   edx,edx
c00023de:	74 14                	je     c00023f4 <find_volume+0x169>
c00023e0:	31 c9                	xor    ecx,ecx
c00023e2:	89 d8                	mov    eax,ebx
c00023e4:	e8 e8 fd ff ff       	call   c00021d1 <check_fs>
c00023e9:	83 f8 01             	cmp    eax,0x1
c00023ec:	76 19                	jbe    c0002407 <find_volume+0x17c>
c00023ee:	85 f6                	test   esi,esi
c00023f0:	74 0f                	je     c0002401 <find_volume+0x176>
c00023f2:	eb 13                	jmp    c0002407 <find_volume+0x17c>
c00023f4:	85 f6                	test   esi,esi
c00023f6:	0f 85 ed fe ff ff    	jne    c00022e9 <find_volume+0x5e>
c00023fc:	b8 03 00 00 00       	mov    eax,0x3
c0002401:	47                   	inc    edi
c0002402:	83 ff 03             	cmp    edi,0x3
c0002405:	76 d1                	jbe    c00023d8 <find_volume+0x14d>
c0002407:	83 c4 3c             	add    esp,0x3c
c000240a:	5b                   	pop    ebx
c000240b:	5e                   	pop    esi
c000240c:	5f                   	pop    edi
c000240d:	5d                   	pop    ebp
c000240e:	c3                   	ret    

c000240f <mount_volume>:
c000240f:	55                   	push   ebp
c0002410:	57                   	push   edi
c0002411:	89 cf                	mov    edi,ecx
c0002413:	56                   	push   esi
c0002414:	53                   	push   ebx
c0002415:	bb 0b 00 00 00       	mov    ebx,0xb
c000241a:	83 ec 3c             	sub    esp,0x3c
c000241d:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002423:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002427:	e8 35 fb ff ff       	call   c0001f61 <get_ldnumber>
c000242c:	85 c0                	test   eax,eax
c000242e:	0f 88 3a 05 00 00    	js     c000296e <mount_volume+0x55f>
c0002434:	8b 2c 85 e0 63 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9c20]
c000243b:	89 c6                	mov    esi,eax
c000243d:	bb 0c 00 00 00       	mov    ebx,0xc
c0002442:	85 ed                	test   ebp,ebp
c0002444:	0f 84 24 05 00 00    	je     c000296e <mount_volume+0x55f>
c000244a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000244e:	83 e7 fe             	and    edi,0xfffffffe
c0002451:	89 2a                	mov    DWORD PTR [edx],ebp
c0002453:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002457:	74 32                	je     c000248b <mount_volume+0x7c>
c0002459:	83 ec 0c             	sub    esp,0xc
c000245c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002460:	50                   	push   eax
c0002461:	e8 c8 f4 ff ff       	call   c000192e <disk_status>
c0002466:	83 c4 10             	add    esp,0x10
c0002469:	a8 01                	test   al,0x1
c000246b:	75 1e                	jne    c000248b <mount_volume+0x7c>
c000246d:	31 db                	xor    ebx,ebx
c000246f:	89 f9                	mov    ecx,edi
c0002471:	84 c9                	test   cl,cl
c0002473:	0f 84 f5 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002479:	a8 04                	test   al,0x4
c000247b:	0f 84 ed 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002481:	bb 0a 00 00 00       	mov    ebx,0xa
c0002486:	e9 e3 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c000248b:	83 ec 0c             	sub    esp,0xc
c000248e:	89 f0                	mov    eax,esi
c0002490:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002494:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002497:	0f b6 f0             	movzx  esi,al
c000249a:	bb 03 00 00 00       	mov    ebx,0x3
c000249f:	56                   	push   esi
c00024a0:	e8 8c f4 ff ff       	call   c0001931 <disk_initialize>
c00024a5:	83 c4 10             	add    esp,0x10
c00024a8:	a8 01                	test   al,0x1
c00024aa:	0f 85 be 04 00 00    	jne    c000296e <mount_volume+0x55f>
c00024b0:	89 f9                	mov    ecx,edi
c00024b2:	84 c9                	test   cl,cl
c00024b4:	74 04                	je     c00024ba <mount_volume+0xab>
c00024b6:	a8 04                	test   al,0x4
c00024b8:	75 c7                	jne    c0002481 <mount_volume+0x72>
c00024ba:	31 d2                	xor    edx,edx
c00024bc:	89 e8                	mov    eax,ebp
c00024be:	e8 c8 fd ff ff       	call   c000228b <find_volume>
c00024c3:	83 f8 04             	cmp    eax,0x4
c00024c6:	75 0a                	jne    c00024d2 <mount_volume+0xc3>
c00024c8:	bb 01 00 00 00       	mov    ebx,0x1
c00024cd:	e9 9c 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024d2:	83 f8 01             	cmp    eax,0x1
c00024d5:	76 0a                	jbe    c00024e1 <mount_volume+0xd2>
c00024d7:	bb 0d 00 00 00       	mov    ebx,0xd
c00024dc:	e9 8d 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024e1:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024e4:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024ef:	75 17                	jne    c0002508 <mount_volume+0xf9>
c00024f1:	b8 0b 00 00 00       	mov    eax,0xb
c00024f6:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00024fb:	75 da                	jne    c00024d7 <mount_volume+0xc8>
c00024fd:	40                   	inc    eax
c00024fe:	83 f8 40             	cmp    eax,0x40
c0002501:	75 f3                	jne    c00024f6 <mount_volume+0xe7>
c0002503:	e9 5a 02 00 00       	jmp    c0002762 <mount_volume+0x353>
c0002508:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000250b:	e8 6f f4 ff ff       	call   c000197f <ld_word>
c0002510:	66 3d 00 02          	cmp    ax,0x200
c0002514:	75 c1                	jne    c00024d7 <mount_volume+0xc8>
c0002516:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002519:	e8 61 f4 ff ff       	call   c000197f <ld_word>
c000251e:	0f b7 c0             	movzx  eax,ax
c0002521:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002525:	85 c0                	test   eax,eax
c0002527:	75 0c                	jne    c0002535 <mount_volume+0x126>
c0002529:	8d 45 78             	lea    eax,[ebp+0x78]
c000252c:	e8 5b f4 ff ff       	call   c000198c <ld_dword>
c0002531:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002539:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000253c:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000253f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002543:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002546:	48                   	dec    eax
c0002547:	3c 01                	cmp    al,0x1
c0002549:	77 8c                	ja     c00024d7 <mount_volume+0xc8>
c000254b:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000254f:	89 c3                	mov    ebx,eax
c0002551:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002555:	66 85 c0             	test   ax,ax
c0002558:	0f 84 79 ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c000255e:	8d 40 ff             	lea    eax,[eax-0x1]
c0002561:	85 d8                	test   eax,ebx
c0002563:	0f 85 6e ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002569:	8d 45 65             	lea    eax,[ebp+0x65]
c000256c:	e8 0e f4 ff ff       	call   c000197f <ld_word>
c0002571:	89 c7                	mov    edi,eax
c0002573:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002577:	a8 0f                	test   al,0xf
c0002579:	0f 85 58 ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c000257f:	8d 45 67             	lea    eax,[ebp+0x67]
c0002582:	e8 f8 f3 ff ff       	call   c000197f <ld_word>
c0002587:	0f b7 f0             	movzx  esi,ax
c000258a:	85 f6                	test   esi,esi
c000258c:	75 0a                	jne    c0002598 <mount_volume+0x189>
c000258e:	8d 45 74             	lea    eax,[ebp+0x74]
c0002591:	e8 f6 f3 ff ff       	call   c000198c <ld_dword>
c0002596:	89 c6                	mov    esi,eax
c0002598:	8d 45 62             	lea    eax,[ebp+0x62]
c000259b:	e8 df f3 ff ff       	call   c000197f <ld_word>
c00025a0:	66 85 c0             	test   ax,ax
c00025a3:	0f 84 2e ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c00025a9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025ae:	0f b7 c8             	movzx  ecx,ax
c00025b1:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025ba:	89 fa                	mov    edx,edi
c00025bc:	66 c1 ea 04          	shr    dx,0x4
c00025c0:	0f b7 d2             	movzx  edx,dx
c00025c3:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025c7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025ce:	39 c6                	cmp    esi,eax
c00025d0:	0f 82 01 ff ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025d6:	29 c6                	sub    esi,eax
c00025d8:	31 d2                	xor    edx,edx
c00025da:	89 f0                	mov    eax,esi
c00025dc:	f7 f3                	div    ebx
c00025de:	39 de                	cmp    esi,ebx
c00025e0:	0f 82 f1 fe ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025e6:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025eb:	0f 87 e6 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00025f1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025f6:	0f 86 63 03 00 00    	jbe    c000295f <mount_volume+0x550>
c00025fc:	bb 03 00 00 00       	mov    ebx,0x3
c0002601:	8d 70 02             	lea    esi,[eax+0x2]
c0002604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000260c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000260f:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002612:	31 d2                	xor    edx,edx
c0002614:	89 c8                	mov    eax,ecx
c0002616:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002619:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000261d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002621:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002625:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002629:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000262c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000262f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002633:	31 d2                	xor    edx,edx
c0002635:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002639:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000263d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002640:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002643:	83 fb 03             	cmp    ebx,0x3
c0002646:	75 2b                	jne    c0002673 <mount_volume+0x264>
c0002648:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000264b:	e8 2f f3 ff ff       	call   c000197f <ld_word>
c0002650:	66 09 c7             	or     di,ax
c0002653:	0f 85 7e fe ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002659:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000265f:	c1 e6 02             	shl    esi,0x2
c0002662:	e8 25 f3 ff ff       	call   c000198c <ld_dword>
c0002667:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000266e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002671:	eb 30                	jmp    c00026a3 <mount_volume+0x294>
c0002673:	66 85 ff             	test   di,di
c0002676:	0f 84 5b fe ff ff    	je     c00024d7 <mount_volume+0xc8>
c000267c:	31 d2                	xor    edx,edx
c000267e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002682:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002686:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000268a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000268d:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002690:	83 fb 02             	cmp    ebx,0x2
c0002693:	75 04                	jne    c0002699 <mount_volume+0x28a>
c0002695:	01 f6                	add    esi,esi
c0002697:	eb 0a                	jmp    c00026a3 <mount_volume+0x294>
c0002699:	8d 04 76             	lea    eax,[esi+esi*2]
c000269c:	83 e6 01             	and    esi,0x1
c000269f:	d1 e8                	shr    eax,1
c00026a1:	01 c6                	add    esi,eax
c00026a3:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026a9:	c1 ee 09             	shr    esi,0x9
c00026ac:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026b0:	0f 87 21 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00026b6:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026bd:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026c4:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026c8:	83 fb 03             	cmp    ebx,0x3
c00026cb:	75 7a                	jne    c0002747 <mount_volume+0x338>
c00026cd:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026d3:	e8 a7 f2 ff ff       	call   c000197f <ld_word>
c00026d8:	66 48                	dec    ax
c00026da:	75 6b                	jne    c0002747 <mount_volume+0x338>
c00026dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026e4:	83 c2 01             	add    edx,0x1
c00026e7:	89 e8                	mov    eax,ebp
c00026e9:	83 d1 00             	adc    ecx,0x0
c00026ec:	e8 6c fa ff ff       	call   c000215d <move_window>
c00026f1:	85 c0                	test   eax,eax
c00026f3:	75 52                	jne    c0002747 <mount_volume+0x338>
c00026f5:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00026f9:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00026ff:	e8 7b f2 ff ff       	call   c000197f <ld_word>
c0002704:	66 3d 55 aa          	cmp    ax,0xaa55
c0002708:	75 3d                	jne    c0002747 <mount_volume+0x338>
c000270a:	8d 45 54             	lea    eax,[ebp+0x54]
c000270d:	e8 7a f2 ff ff       	call   c000198c <ld_dword>
c0002712:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002717:	75 2e                	jne    c0002747 <mount_volume+0x338>
c0002719:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000271f:	e8 68 f2 ff ff       	call   c000198c <ld_dword>
c0002724:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002729:	75 1c                	jne    c0002747 <mount_volume+0x338>
c000272b:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002731:	e8 56 f2 ff ff       	call   c000198c <ld_dword>
c0002736:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002739:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000273f:	e8 48 f2 ff ff       	call   c000198c <ld_dword>
c0002744:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002747:	66 a1 c0 63 02 c0    	mov    ax,ds:0xc00263c0
c000274d:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002750:	40                   	inc    eax
c0002751:	31 db                	xor    ebx,ebx
c0002753:	66 a3 c0 63 02 c0    	mov    ds:0xc00263c0,ax
c0002759:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000275d:	e9 0c 02 00 00       	jmp    c000296e <mount_volume+0x55f>
c0002762:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002768:	e8 12 f2 ff ff       	call   c000197f <ld_word>
c000276d:	66 3d 00 01          	cmp    ax,0x100
c0002771:	0f 85 60 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002777:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000277e:	0f 85 53 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002784:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000278a:	e8 15 f2 ff ff       	call   c00019a4 <ld_qword>
c000278f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002793:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002797:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000279d:	e8 ea f1 ff ff       	call   c000198c <ld_dword>
c00027a2:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027a5:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ab:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ae:	fe c8                	dec    al
c00027b0:	0f 85 21 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c00027b6:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027bd:	bb 01 00 00 00       	mov    ebx,0x1
c00027c2:	d3 e3                	shl    ebx,cl
c00027c4:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027c8:	66 85 db             	test   bx,bx
c00027cb:	0f 84 06 fd ff ff    	je     c00024d7 <mount_volume+0xc8>
c00027d1:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027d7:	e8 b0 f1 ff ff       	call   c000198c <ld_dword>
c00027dc:	89 c6                	mov    esi,eax
c00027de:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027e3:	0f 87 ee fc ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00027e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027ed:	8d 40 02             	lea    eax,[eax+0x2]
c00027f0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027f3:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00027f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027fa:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fd:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002803:	e8 84 f1 ff ff       	call   c000198c <ld_dword>
c0002808:	31 d2                	xor    edx,edx
c000280a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002812:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002816:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000281a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002820:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002826:	e8 61 f1 ff ff       	call   c000198c <ld_dword>
c000282b:	31 d2                	xor    edx,edx
c000282d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002831:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002835:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002839:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000283c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000283f:	0f b7 c3             	movzx  eax,bx
c0002842:	31 d2                	xor    edx,edx
c0002844:	0f af f0             	imul   esi,eax
c0002847:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000284b:	89 f0                	mov    eax,esi
c000284d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002851:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002855:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002859:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000285d:	39 c1                	cmp    ecx,eax
c000285f:	89 df                	mov    edi,ebx
c0002861:	19 d7                	sbb    edi,edx
c0002863:	0f 82 6e fc ff ff    	jb     c00024d7 <mount_volume+0xc8>
c0002869:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000286f:	31 db                	xor    ebx,ebx
c0002871:	e8 16 f1 ff ff       	call   c000198c <ld_dword>
c0002876:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000287d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002880:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002888:	85 db                	test   ebx,ebx
c000288a:	75 39                	jne    c00028c5 <mount_volume+0x4b6>
c000288c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002890:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002894:	0f 86 3d fc ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c000289a:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000289d:	31 ff                	xor    edi,edi
c000289f:	89 e8                	mov    eax,ebp
c00028a1:	e8 72 f3 ff ff       	call   c0001c18 <clst2sect>
c00028a6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028aa:	01 c6                	add    esi,eax
c00028ac:	89 e8                	mov    eax,ebp
c00028ae:	11 d7                	adc    edi,edx
c00028b0:	89 f2                	mov    edx,esi
c00028b2:	89 f9                	mov    ecx,edi
c00028b4:	e8 a4 f8 ff ff       	call   c000215d <move_window>
c00028b9:	85 c0                	test   eax,eax
c00028bb:	0f 85 07 fc ff ff    	jne    c00024c8 <mount_volume+0xb9>
c00028c1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028c5:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028ca:	74 0b                	je     c00028d7 <mount_volume+0x4c8>
c00028cc:	83 c3 20             	add    ebx,0x20
c00028cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028d5:	eb b1                	jmp    c0002888 <mount_volume+0x479>
c00028d7:	8d 75 54             	lea    esi,[ebp+0x54]
c00028da:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028de:	e8 a9 f0 ff ff       	call   c000198c <ld_dword>
c00028e3:	89 c3                	mov    ebx,eax
c00028e5:	83 f8 01             	cmp    eax,0x1
c00028e8:	0f 86 e9 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028ee:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00028f1:	0f 86 e0 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028f7:	8d 53 fe             	lea    edx,[ebx-0x2]
c00028fa:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00028fe:	0f af c2             	imul   eax,edx
c0002901:	31 d2                	xor    edx,edx
c0002903:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002906:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002909:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000290c:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000290f:	31 c9                	xor    ecx,ecx
c0002911:	89 da                	mov    edx,ebx
c0002913:	89 e8                	mov    eax,ebp
c0002915:	c1 ea 07             	shr    edx,0x7
c0002918:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000291b:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000291e:	e8 3a f8 ff ff       	call   c000215d <move_window>
c0002923:	85 c0                	test   eax,eax
c0002925:	0f 85 9d fb ff ff    	jne    c00024c8 <mount_volume+0xb9>
c000292b:	89 d8                	mov    eax,ebx
c000292d:	83 e0 7f             	and    eax,0x7f
c0002930:	8d 04 86             	lea    eax,[esi+eax*4]
c0002933:	e8 54 f0 ff ff       	call   c000198c <ld_dword>
c0002938:	83 f8 ff             	cmp    eax,0xffffffff
c000293b:	74 0a                	je     c0002947 <mount_volume+0x538>
c000293d:	43                   	inc    ebx
c000293e:	39 d8                	cmp    eax,ebx
c0002940:	74 cd                	je     c000290f <mount_volume+0x500>
c0002942:	e9 90 fb ff ff       	jmp    c00024d7 <mount_volume+0xc8>
c0002947:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000294e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002955:	bb 04 00 00 00       	mov    ebx,0x4
c000295a:	e9 e8 fd ff ff       	jmp    c0002747 <mount_volume+0x338>
c000295f:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002964:	19 db                	sbb    ebx,ebx
c0002966:	83 c3 02             	add    ebx,0x2
c0002969:	e9 93 fc ff ff       	jmp    c0002601 <mount_volume+0x1f2>
c000296e:	83 c4 3c             	add    esp,0x3c
c0002971:	89 d8                	mov    eax,ebx
c0002973:	5b                   	pop    ebx
c0002974:	5e                   	pop    esi
c0002975:	5f                   	pop    edi
c0002976:	5d                   	pop    ebp
c0002977:	c3                   	ret    

c0002978 <find_bitmap>:
c0002978:	55                   	push   ebp
c0002979:	57                   	push   edi
c000297a:	89 c7                	mov    edi,eax
c000297c:	56                   	push   esi
c000297d:	8d 72 fe             	lea    esi,[edx-0x2]
c0002980:	53                   	push   ebx
c0002981:	83 ec 1c             	sub    esp,0x1c
c0002984:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002987:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000298b:	83 e8 02             	sub    eax,0x2
c000298e:	39 f0                	cmp    eax,esi
c0002990:	77 02                	ja     c0002994 <find_bitmap+0x1c>
c0002992:	31 f6                	xor    esi,esi
c0002994:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002998:	89 f3                	mov    ebx,esi
c000299a:	31 ed                	xor    ebp,ebp
c000299c:	31 c9                	xor    ecx,ecx
c000299e:	89 da                	mov    edx,ebx
c00029a0:	89 f8                	mov    eax,edi
c00029a2:	c1 ea 0c             	shr    edx,0xc
c00029a5:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029a8:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ab:	e8 ad f7 ff ff       	call   c000215d <move_window>
c00029b0:	85 c0                	test   eax,eax
c00029b2:	75 68                	jne    c0002a1c <find_bitmap+0xa4>
c00029b4:	89 da                	mov    edx,ebx
c00029b6:	89 d9                	mov    ecx,ebx
c00029b8:	c1 ea 03             	shr    edx,0x3
c00029bb:	83 e1 07             	and    ecx,0x7
c00029be:	b8 01 00 00 00       	mov    eax,0x1
c00029c3:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029c9:	d3 e0                	shl    eax,cl
c00029cb:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029ce:	83 e9 02             	sub    ecx,0x2
c00029d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029d5:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029d9:	43                   	inc    ebx
c00029da:	21 c1                	and    ecx,eax
c00029dc:	d1 e0                	shl    eax,1
c00029de:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029e2:	77 09                	ja     c00029ed <find_bitmap+0x75>
c00029e4:	31 db                	xor    ebx,ebx
c00029e6:	ba 00 02 00 00       	mov    edx,0x200
c00029eb:	31 c0                	xor    eax,eax
c00029ed:	84 c9                	test   cl,cl
c00029ef:	75 10                	jne    c0002a01 <find_bitmap+0x89>
c00029f1:	45                   	inc    ebp
c00029f2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00029f6:	75 0f                	jne    c0002a07 <find_bitmap+0x8f>
c00029f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029fc:	83 c0 02             	add    eax,0x2
c00029ff:	eb 22                	jmp    c0002a23 <find_bitmap+0xab>
c0002a01:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a05:	31 ed                	xor    ebp,ebp
c0002a07:	39 de                	cmp    esi,ebx
c0002a09:	74 16                	je     c0002a21 <find_bitmap+0xa9>
c0002a0b:	84 c0                	test   al,al
c0002a0d:	75 c6                	jne    c00029d5 <find_bitmap+0x5d>
c0002a0f:	42                   	inc    edx
c0002a10:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a16:	77 84                	ja     c000299c <find_bitmap+0x24>
c0002a18:	b0 01                	mov    al,0x1
c0002a1a:	eb b9                	jmp    c00029d5 <find_bitmap+0x5d>
c0002a1c:	83 c8 ff             	or     eax,0xffffffff
c0002a1f:	eb 02                	jmp    c0002a23 <find_bitmap+0xab>
c0002a21:	31 c0                	xor    eax,eax
c0002a23:	83 c4 1c             	add    esp,0x1c
c0002a26:	5b                   	pop    ebx
c0002a27:	5e                   	pop    esi
c0002a28:	5f                   	pop    edi
c0002a29:	5d                   	pop    ebp
c0002a2a:	c3                   	ret    

c0002a2b <change_bitmap>:
c0002a2b:	55                   	push   ebp
c0002a2c:	89 cd                	mov    ebp,ecx
c0002a2e:	57                   	push   edi
c0002a2f:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a32:	56                   	push   esi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	53                   	push   ebx
c0002a36:	89 c8                	mov    eax,ecx
c0002a38:	83 ec 1c             	sub    esp,0x1c
c0002a3b:	31 d2                	xor    edx,edx
c0002a3d:	89 ce                	mov    esi,ecx
c0002a3f:	c1 e8 0c             	shr    eax,0xc
c0002a42:	bb 01 00 00 00       	mov    ebx,0x1
c0002a47:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a4a:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a4d:	c1 ee 03             	shr    esi,0x3
c0002a50:	83 e1 07             	and    ecx,0x7
c0002a53:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a59:	d3 e3                	shl    ebx,cl
c0002a5b:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a5f:	89 c1                	mov    ecx,eax
c0002a61:	89 d3                	mov    ebx,edx
c0002a63:	83 c1 01             	add    ecx,0x1
c0002a66:	83 d3 00             	adc    ebx,0x0
c0002a69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a71:	89 d1                	mov    ecx,edx
c0002a73:	89 c2                	mov    edx,eax
c0002a75:	89 f8                	mov    eax,edi
c0002a77:	e8 e1 f6 ff ff       	call   c000215d <move_window>
c0002a7c:	89 c1                	mov    ecx,eax
c0002a7e:	85 c0                	test   eax,eax
c0002a80:	75 48                	jne    c0002aca <change_bitmap+0x9f>
c0002a82:	31 d2                	xor    edx,edx
c0002a84:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a88:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a8c:	0f 95 c2             	setne  dl
c0002a8f:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002a93:	74 3c                	je     c0002ad1 <change_bitmap+0xa6>
c0002a95:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002a99:	4d                   	dec    ebp
c0002a9a:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002a9e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002aa2:	74 32                	je     c0002ad6 <change_bitmap+0xab>
c0002aa4:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002aa8:	75 d8                	jne    c0002a82 <change_bitmap+0x57>
c0002aaa:	8d 46 01             	lea    eax,[esi+0x1]
c0002aad:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ab2:	89 c3                	mov    ebx,eax
c0002ab4:	31 f6                	xor    esi,esi
c0002ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002abe:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ac4:	74 99                	je     c0002a5f <change_bitmap+0x34>
c0002ac6:	89 de                	mov    esi,ebx
c0002ac8:	eb b8                	jmp    c0002a82 <change_bitmap+0x57>
c0002aca:	b9 01 00 00 00       	mov    ecx,0x1
c0002acf:	eb 05                	jmp    c0002ad6 <change_bitmap+0xab>
c0002ad1:	b9 02 00 00 00       	mov    ecx,0x2
c0002ad6:	83 c4 1c             	add    esp,0x1c
c0002ad9:	89 c8                	mov    eax,ecx
c0002adb:	5b                   	pop    ebx
c0002adc:	5e                   	pop    esi
c0002add:	5f                   	pop    edi
c0002ade:	5d                   	pop    ebp
c0002adf:	c3                   	ret    

c0002ae0 <put_fat>:
c0002ae0:	83 fa 01             	cmp    edx,0x1
c0002ae3:	0f 86 7b 01 00 00    	jbe    c0002c64 <put_fat+0x184>
c0002ae9:	55                   	push   ebp
c0002aea:	57                   	push   edi
c0002aeb:	89 cf                	mov    edi,ecx
c0002aed:	56                   	push   esi
c0002aee:	b9 02 00 00 00       	mov    ecx,0x2
c0002af3:	53                   	push   ebx
c0002af4:	89 c6                	mov    esi,eax
c0002af6:	83 ec 1c             	sub    esp,0x1c
c0002af9:	89 d3                	mov    ebx,edx
c0002afb:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002afe:	0f 86 68 01 00 00    	jbe    c0002c6c <put_fat+0x18c>
c0002b04:	8a 00                	mov    al,BYTE PTR [eax]
c0002b06:	3c 02                	cmp    al,0x2
c0002b08:	0f 84 c7 00 00 00    	je     c0002bd5 <put_fat+0xf5>
c0002b0e:	77 09                	ja     c0002b19 <put_fat+0x39>
c0002b10:	fe c8                	dec    al
c0002b12:	74 17                	je     c0002b2b <put_fat+0x4b>
c0002b14:	e9 53 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b19:	b9 02 00 00 00       	mov    ecx,0x2
c0002b1e:	3c 04                	cmp    al,0x4
c0002b20:	0f 86 e1 00 00 00    	jbe    c0002c07 <put_fat+0x127>
c0002b26:	e9 41 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b2b:	89 d5                	mov    ebp,edx
c0002b2d:	31 c9                	xor    ecx,ecx
c0002b2f:	d1 ed                	shr    ebp,1
c0002b31:	89 f0                	mov    eax,esi
c0002b33:	01 d5                	add    ebp,edx
c0002b35:	89 ea                	mov    edx,ebp
c0002b37:	c1 ea 09             	shr    edx,0x9
c0002b3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b40:	e8 18 f6 ff ff       	call   c000215d <move_window>
c0002b45:	89 c1                	mov    ecx,eax
c0002b47:	85 c0                	test   eax,eax
c0002b49:	0f 85 1d 01 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002b4f:	8d 46 54             	lea    eax,[esi+0x54]
c0002b52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b56:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b59:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b63:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b67:	89 f8                	mov    eax,edi
c0002b69:	83 e3 01             	and    ebx,0x1
c0002b6c:	74 0d                	je     c0002b7b <put_fat+0x9b>
c0002b6e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b71:	89 fa                	mov    edx,edi
c0002b73:	83 e0 0f             	and    eax,0xf
c0002b76:	c1 e2 04             	shl    edx,0x4
c0002b79:	09 d0                	or     eax,edx
c0002b7b:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b82:	31 c9                	xor    ecx,ecx
c0002b84:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b88:	c1 ea 09             	shr    edx,0x9
c0002b8b:	89 f0                	mov    eax,esi
c0002b8d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b90:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b93:	e8 c5 f5 ff ff       	call   c000215d <move_window>
c0002b98:	89 c1                	mov    ecx,eax
c0002b9a:	85 c0                	test   eax,eax
c0002b9c:	0f 85 ca 00 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002ba2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ba6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bac:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bb0:	85 db                	test   ebx,ebx
c0002bb2:	74 07                	je     c0002bbb <put_fat+0xdb>
c0002bb4:	c1 ef 04             	shr    edi,0x4
c0002bb7:	89 fa                	mov    edx,edi
c0002bb9:	eb 0e                	jmp    c0002bc9 <put_fat+0xe9>
c0002bbb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bbe:	c1 ef 08             	shr    edi,0x8
c0002bc1:	83 e2 f0             	and    edx,0xfffffff0
c0002bc4:	83 e7 0f             	and    edi,0xf
c0002bc7:	09 fa                	or     edx,edi
c0002bc9:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bcc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bd0:	e9 97 00 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002bd5:	31 c9                	xor    ecx,ecx
c0002bd7:	c1 ea 08             	shr    edx,0x8
c0002bda:	89 f0                	mov    eax,esi
c0002bdc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bdf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002be2:	e8 76 f5 ff ff       	call   c000215d <move_window>
c0002be7:	89 c1                	mov    ecx,eax
c0002be9:	85 c0                	test   eax,eax
c0002beb:	75 7f                	jne    c0002c6c <put_fat+0x18c>
c0002bed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bf1:	01 db                	add    ebx,ebx
c0002bf3:	0f b7 d7             	movzx  edx,di
c0002bf6:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bfc:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c00:	e8 ec ed ff ff       	call   c00019f1 <st_word>
c0002c05:	eb 53                	jmp    c0002c5a <put_fat+0x17a>
c0002c07:	31 c9                	xor    ecx,ecx
c0002c09:	c1 ea 07             	shr    edx,0x7
c0002c0c:	89 f0                	mov    eax,esi
c0002c0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c14:	e8 44 f5 ff ff       	call   c000215d <move_window>
c0002c19:	89 c1                	mov    ecx,eax
c0002c1b:	85 c0                	test   eax,eax
c0002c1d:	75 4d                	jne    c0002c6c <put_fat+0x18c>
c0002c1f:	c1 e3 02             	shl    ebx,0x2
c0002c22:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c2b:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c2f:	74 1c                	je     c0002c4d <put_fat+0x16d>
c0002c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c35:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c3b:	89 d8                	mov    eax,ebx
c0002c3d:	e8 4a ed ff ff       	call   c000198c <ld_dword>
c0002c42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c46:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c4b:	09 c7                	or     edi,eax
c0002c4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c51:	89 fa                	mov    edx,edi
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	e8 9b ed ff ff       	call   c00019f5 <st_dword>
c0002c5a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c62:	eb 08                	jmp    c0002c6c <put_fat+0x18c>
c0002c64:	b9 02 00 00 00       	mov    ecx,0x2
c0002c69:	89 c8                	mov    eax,ecx
c0002c6b:	c3                   	ret    
c0002c6c:	83 c4 1c             	add    esp,0x1c
c0002c6f:	89 c8                	mov    eax,ecx
c0002c71:	5b                   	pop    ebx
c0002c72:	5e                   	pop    esi
c0002c73:	5f                   	pop    edi
c0002c74:	5d                   	pop    ebp
c0002c75:	c3                   	ret    

c0002c76 <fill_last_frag>:
c0002c76:	57                   	push   edi
c0002c77:	89 cf                	mov    edi,ecx
c0002c79:	56                   	push   esi
c0002c7a:	89 d6                	mov    esi,edx
c0002c7c:	53                   	push   ebx
c0002c7d:	89 c3                	mov    ebx,eax
c0002c7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c82:	85 c0                	test   eax,eax
c0002c84:	74 21                	je     c0002ca7 <fill_last_frag+0x31>
c0002c86:	89 f9                	mov    ecx,edi
c0002c88:	83 f8 01             	cmp    eax,0x1
c0002c8b:	76 05                	jbe    c0002c92 <fill_last_frag+0x1c>
c0002c8d:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c90:	29 c1                	sub    ecx,eax
c0002c92:	8d 56 01             	lea    edx,[esi+0x1]
c0002c95:	29 c2                	sub    edx,eax
c0002c97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002c99:	e8 42 fe ff ff       	call   c0002ae0 <put_fat>
c0002c9e:	85 c0                	test   eax,eax
c0002ca0:	75 05                	jne    c0002ca7 <fill_last_frag+0x31>
c0002ca2:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002ca5:	eb d8                	jmp    c0002c7f <fill_last_frag+0x9>
c0002ca7:	5b                   	pop    ebx
c0002ca8:	5e                   	pop    esi
c0002ca9:	5f                   	pop    edi
c0002caa:	c3                   	ret    

c0002cab <fill_first_frag>:
c0002cab:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002caf:	75 2d                	jne    c0002cde <fill_first_frag+0x33>
c0002cb1:	57                   	push   edi
c0002cb2:	56                   	push   esi
c0002cb3:	53                   	push   ebx
c0002cb4:	89 c3                	mov    ebx,eax
c0002cb6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cb9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cbc:	01 d7                	add    edi,edx
c0002cbe:	39 fa                	cmp    edx,edi
c0002cc0:	74 14                	je     c0002cd6 <fill_first_frag+0x2b>
c0002cc2:	8d 72 01             	lea    esi,[edx+0x1]
c0002cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cc7:	89 f1                	mov    ecx,esi
c0002cc9:	e8 12 fe ff ff       	call   c0002ae0 <put_fat>
c0002cce:	89 f2                	mov    edx,esi
c0002cd0:	85 c0                	test   eax,eax
c0002cd2:	74 ea                	je     c0002cbe <fill_first_frag+0x13>
c0002cd4:	eb 0b                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cd6:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002cda:	31 c0                	xor    eax,eax
c0002cdc:	eb 03                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cde:	31 c0                	xor    eax,eax
c0002ce0:	c3                   	ret    
c0002ce1:	5b                   	pop    ebx
c0002ce2:	5e                   	pop    esi
c0002ce3:	5f                   	pop    edi
c0002ce4:	c3                   	ret    

c0002ce5 <get_fat>:
c0002ce5:	83 fa 01             	cmp    edx,0x1
c0002ce8:	0f 86 db 01 00 00    	jbe    c0002ec9 <get_fat+0x1e4>
c0002cee:	55                   	push   ebp
c0002cef:	b9 01 00 00 00       	mov    ecx,0x1
c0002cf4:	57                   	push   edi
c0002cf5:	56                   	push   esi
c0002cf6:	53                   	push   ebx
c0002cf7:	83 ec 1c             	sub    esp,0x1c
c0002cfa:	8b 38                	mov    edi,DWORD PTR [eax]
c0002cfc:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002cff:	0f 86 cc 01 00 00    	jbe    c0002ed1 <get_fat+0x1ec>
c0002d05:	89 c3                	mov    ebx,eax
c0002d07:	89 d6                	mov    esi,edx
c0002d09:	8a 07                	mov    al,BYTE PTR [edi]
c0002d0b:	3c 02                	cmp    al,0x2
c0002d0d:	0f 84 99 00 00 00    	je     c0002dac <get_fat+0xc7>
c0002d13:	77 09                	ja     c0002d1e <get_fat+0x39>
c0002d15:	fe c8                	dec    al
c0002d17:	74 1a                	je     c0002d33 <get_fat+0x4e>
c0002d19:	e9 b3 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d1e:	3c 03                	cmp    al,0x3
c0002d20:	0f 84 b5 00 00 00    	je     c0002ddb <get_fat+0xf6>
c0002d26:	3c 04                	cmp    al,0x4
c0002d28:	0f 84 e3 00 00 00    	je     c0002e11 <get_fat+0x12c>
c0002d2e:	e9 9e 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d33:	89 d3                	mov    ebx,edx
c0002d35:	31 c9                	xor    ecx,ecx
c0002d37:	d1 eb                	shr    ebx,1
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	01 d3                	add    ebx,edx
c0002d3d:	89 da                	mov    edx,ebx
c0002d3f:	c1 ea 09             	shr    edx,0x9
c0002d42:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d45:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d48:	e8 10 f4 ff ff       	call   c000215d <move_window>
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 08                	je     c0002d59 <get_fat+0x74>
c0002d51:	83 c9 ff             	or     ecx,0xffffffff
c0002d54:	e9 78 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d59:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d5c:	31 c9                	xor    ecx,ecx
c0002d5e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d64:	89 ea                	mov    edx,ebp
c0002d66:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d6a:	c1 ea 09             	shr    edx,0x9
c0002d6d:	89 f8                	mov    eax,edi
c0002d6f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d72:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d75:	e8 e3 f3 ff ff       	call   c000215d <move_window>
c0002d7a:	85 c0                	test   eax,eax
c0002d7c:	75 d3                	jne    c0002d51 <get_fat+0x6c>
c0002d7e:	0f b6 c3             	movzx  eax,bl
c0002d81:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d87:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d8c:	c1 e3 08             	shl    ebx,0x8
c0002d8f:	09 c3                	or     ebx,eax
c0002d91:	89 d9                	mov    ecx,ebx
c0002d93:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002d99:	83 e6 01             	and    esi,0x1
c0002d9c:	0f 84 2f 01 00 00    	je     c0002ed1 <get_fat+0x1ec>
c0002da2:	89 d9                	mov    ecx,ebx
c0002da4:	c1 e9 04             	shr    ecx,0x4
c0002da7:	e9 25 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002dac:	31 c9                	xor    ecx,ecx
c0002dae:	c1 ea 08             	shr    edx,0x8
c0002db1:	89 f8                	mov    eax,edi
c0002db3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002db6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002db9:	e8 9f f3 ff ff       	call   c000215d <move_window>
c0002dbe:	85 c0                	test   eax,eax
c0002dc0:	75 8f                	jne    c0002d51 <get_fat+0x6c>
c0002dc2:	01 f6                	add    esi,esi
c0002dc4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dce:	e8 ac eb ff ff       	call   c000197f <ld_word>
c0002dd3:	0f b7 c8             	movzx  ecx,ax
c0002dd6:	e9 f6 00 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f8                	mov    eax,edi
c0002de2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002de5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002de8:	e8 70 f3 ff ff       	call   c000215d <move_window>
c0002ded:	85 c0                	test   eax,eax
c0002def:	0f 85 5c ff ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002df5:	c1 e6 02             	shl    esi,0x2
c0002df8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002dfe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e02:	e8 85 eb ff ff       	call   c000198c <ld_dword>
c0002e07:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e0c:	e9 b4 00 00 00       	jmp    c0002ec5 <get_fat+0x1e0>
c0002e11:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e14:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e17:	89 d1                	mov    ecx,edx
c0002e19:	09 c1                	or     ecx,eax
c0002e1b:	74 06                	je     c0002e23 <get_fat+0x13e>
c0002e1d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e21:	75 0f                	jne    c0002e32 <get_fat+0x14d>
c0002e23:	b9 01 00 00 00       	mov    ecx,0x1
c0002e28:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e2c:	0f 85 9f 00 00 00    	jne    c0002ed1 <get_fat+0x1ec>
c0002e32:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e36:	89 f5                	mov    ebp,esi
c0002e38:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e3d:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e40:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e43:	80 f9 02             	cmp    cl,0x2
c0002e46:	75 35                	jne    c0002e7d <get_fat+0x198>
c0002e48:	83 c0 ff             	add    eax,0xffffffff
c0002e4b:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e50:	83 d2 ff             	adc    edx,0xffffffff
c0002e53:	31 db                	xor    ebx,ebx
c0002e55:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e59:	53                   	push   ebx
c0002e5a:	c1 ea 09             	shr    edx,0x9
c0002e5d:	51                   	push   ecx
c0002e5e:	52                   	push   edx
c0002e5f:	50                   	push   eax
c0002e60:	e8 4b e7 01 00       	call   c00215b0 <__udivdi3>
c0002e65:	83 c4 10             	add    esp,0x10
c0002e68:	b9 01 00 00 00       	mov    ecx,0x1
c0002e6d:	39 c5                	cmp    ebp,eax
c0002e6f:	77 60                	ja     c0002ed1 <get_fat+0x1ec>
c0002e71:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e76:	74 59                	je     c0002ed1 <get_fat+0x1ec>
c0002e78:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e7b:	eb 54                	jmp    c0002ed1 <get_fat+0x1ec>
c0002e7d:	80 f9 03             	cmp    cl,0x3
c0002e80:	75 05                	jne    c0002e87 <get_fat+0x1a2>
c0002e82:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e85:	77 f1                	ja     c0002e78 <get_fat+0x193>
c0002e87:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e8c:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e90:	75 3f                	jne    c0002ed1 <get_fat+0x1ec>
c0002e92:	31 c9                	xor    ecx,ecx
c0002e94:	89 f2                	mov    edx,esi
c0002e96:	89 f8                	mov    eax,edi
c0002e98:	c1 ea 07             	shr    edx,0x7
c0002e9b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 b7 f2 ff ff       	call   c000215d <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 a3 fe ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 cc ea ff ff       	call   c000198c <ld_dword>
c0002ec0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ec5:	89 c1                	mov    ecx,eax
c0002ec7:	eb 08                	jmp    c0002ed1 <get_fat+0x1ec>
c0002ec9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ece:	89 c8                	mov    eax,ecx
c0002ed0:	c3                   	ret    
c0002ed1:	83 c4 1c             	add    esp,0x1c
c0002ed4:	89 c8                	mov    eax,ecx
c0002ed6:	5b                   	pop    ebx
c0002ed7:	5e                   	pop    esi
c0002ed8:	5f                   	pop    edi
c0002ed9:	5d                   	pop    ebp
c0002eda:	c3                   	ret    

c0002edb <dir_sdi>:
c0002edb:	55                   	push   ebp
c0002edc:	57                   	push   edi
c0002edd:	56                   	push   esi
c0002ede:	53                   	push   ebx
c0002edf:	89 c3                	mov    ebx,eax
c0002ee1:	83 ec 1c             	sub    esp,0x1c
c0002ee4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee6:	31 c0                	xor    eax,eax
c0002ee8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002eeb:	0f 94 c0             	sete   al
c0002eee:	48                   	dec    eax
c0002eef:	25 00 00 20 f0       	and    eax,0xf0200000
c0002ef4:	05 00 00 00 10       	add    eax,0x10000000
c0002ef9:	39 d0                	cmp    eax,edx
c0002efb:	77 0a                	ja     c0002f07 <dir_sdi+0x2c>
c0002efd:	b8 02 00 00 00       	mov    eax,0x2
c0002f02:	e9 c4 00 00 00       	jmp    c0002fcb <dir_sdi+0xf0>
c0002f07:	89 d6                	mov    esi,edx
c0002f09:	f6 c2 1f             	test   dl,0x1f
c0002f0c:	75 ef                	jne    c0002efd <dir_sdi+0x22>
c0002f0e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f11:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f14:	85 c9                	test   ecx,ecx
c0002f16:	75 2d                	jne    c0002f45 <dir_sdi+0x6a>
c0002f18:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f1b:	77 1b                	ja     c0002f38 <dir_sdi+0x5d>
c0002f1d:	89 f2                	mov    edx,esi
c0002f1f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f23:	c1 ea 05             	shr    edx,0x5
c0002f26:	39 c2                	cmp    edx,eax
c0002f28:	73 d3                	jae    c0002efd <dir_sdi+0x22>
c0002f2a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f2d:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f30:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f33:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f36:	eb 4b                	jmp    c0002f83 <dir_sdi+0xa8>
c0002f38:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3b:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f3f:	85 c0                	test   eax,eax
c0002f41:	74 da                	je     c0002f1d <dir_sdi+0x42>
c0002f43:	89 c1                	mov    ecx,eax
c0002f45:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f49:	c1 e5 09             	shl    ebp,0x9
c0002f4c:	89 ca                	mov    edx,ecx
c0002f4e:	39 ee                	cmp    esi,ebp
c0002f50:	72 1c                	jb     c0002f6e <dir_sdi+0x93>
c0002f52:	89 d8                	mov    eax,ebx
c0002f54:	e8 8c fd ff ff       	call   c0002ce5 <get_fat>
c0002f59:	89 c1                	mov    ecx,eax
c0002f5b:	83 f8 ff             	cmp    eax,0xffffffff
c0002f5e:	74 66                	je     c0002fc6 <dir_sdi+0xeb>
c0002f60:	83 f8 01             	cmp    eax,0x1
c0002f63:	76 98                	jbe    c0002efd <dir_sdi+0x22>
c0002f65:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f68:	76 93                	jbe    c0002efd <dir_sdi+0x22>
c0002f6a:	29 ee                	sub    esi,ebp
c0002f6c:	eb de                	jmp    c0002f4c <dir_sdi+0x71>
c0002f6e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f72:	89 f8                	mov    eax,edi
c0002f74:	e8 9f ec ff ff       	call   c0001c18 <clst2sect>
c0002f79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f7d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f80:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f83:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f86:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f89:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f8c:	89 d1                	mov    ecx,edx
c0002f8e:	09 c1                	or     ecx,eax
c0002f90:	0f 84 67 ff ff ff    	je     c0002efd <dir_sdi+0x22>
c0002f96:	89 f1                	mov    ecx,esi
c0002f98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fa0:	c1 e9 09             	shr    ecx,0x9
c0002fa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fa7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fab:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002faf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb2:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fb8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fbb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fbf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fc2:	31 c0                	xor    eax,eax
c0002fc4:	eb 05                	jmp    c0002fcb <dir_sdi+0xf0>
c0002fc6:	b8 01 00 00 00       	mov    eax,0x1
c0002fcb:	83 c4 1c             	add    esp,0x1c
c0002fce:	5b                   	pop    ebx
c0002fcf:	5e                   	pop    esi
c0002fd0:	5f                   	pop    edi
c0002fd1:	5d                   	pop    ebp
c0002fd2:	c3                   	ret    

c0002fd3 <create_chain>:
c0002fd3:	55                   	push   ebp
c0002fd4:	89 c5                	mov    ebp,eax
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	85 d2                	test   edx,edx
c0002fde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002fe2:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe4:	75 0e                	jne    c0002ff4 <create_chain+0x21>
c0002fe6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002fe9:	85 ff                	test   edi,edi
c0002feb:	74 39                	je     c0003026 <create_chain+0x53>
c0002fed:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002ff0:	77 39                	ja     c000302b <create_chain+0x58>
c0002ff2:	eb 32                	jmp    c0003026 <create_chain+0x53>
c0002ff4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff8:	e8 e8 fc ff ff       	call   c0002ce5 <get_fat>
c0002ffd:	89 c3                	mov    ebx,eax
c0002fff:	83 f8 01             	cmp    eax,0x1
c0003002:	77 0a                	ja     c000300e <create_chain+0x3b>
c0003004:	bb 01 00 00 00       	mov    ebx,0x1
c0003009:	e9 ba 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c000300e:	83 f8 ff             	cmp    eax,0xffffffff
c0003011:	0f 84 62 01 00 00    	je     c0003179 <create_chain+0x1a6>
c0003017:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000301a:	0f 87 a8 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003020:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003024:	eb 05                	jmp    c000302b <create_chain+0x58>
c0003026:	bf 01 00 00 00       	mov    edi,0x1
c000302b:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000302f:	75 07                	jne    c0003038 <create_chain+0x65>
c0003031:	31 db                	xor    ebx,ebx
c0003033:	e9 90 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c0003038:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000303b:	75 74                	jne    c00030b1 <create_chain+0xde>
c000303d:	b9 01 00 00 00       	mov    ecx,0x1
c0003042:	89 fa                	mov    edx,edi
c0003044:	89 f0                	mov    eax,esi
c0003046:	e8 2d f9 ff ff       	call   c0002978 <find_bitmap>
c000304b:	89 c3                	mov    ebx,eax
c000304d:	8d 40 ff             	lea    eax,[eax-0x1]
c0003050:	83 f8 fd             	cmp    eax,0xfffffffd
c0003053:	0f 87 6f 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003059:	83 ec 0c             	sub    esp,0xc
c000305c:	b9 01 00 00 00       	mov    ecx,0x1
c0003061:	6a 01                	push   0x1
c0003063:	89 da                	mov    edx,ebx
c0003065:	89 f0                	mov    eax,esi
c0003067:	e8 bf f9 ff ff       	call   c0002a2b <change_bitmap>
c000306c:	83 c4 10             	add    esp,0x10
c000306f:	83 f8 02             	cmp    eax,0x2
c0003072:	74 90                	je     c0003004 <create_chain+0x31>
c0003074:	83 f8 01             	cmp    eax,0x1
c0003077:	0f 84 fc 00 00 00    	je     c0003179 <create_chain+0x1a6>
c000307d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003082:	75 09                	jne    c000308d <create_chain+0xba>
c0003084:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003088:	e9 0c 01 00 00       	jmp    c0003199 <create_chain+0x1c6>
c000308d:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003091:	0f 85 e7 00 00 00    	jne    c000317e <create_chain+0x1ab>
c0003097:	8d 57 01             	lea    edx,[edi+0x1]
c000309a:	39 da                	cmp    edx,ebx
c000309c:	0f 84 f7 00 00 00    	je     c0003199 <create_chain+0x1c6>
c00030a2:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030a5:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030a9:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030ac:	e9 cd 00 00 00       	jmp    c000317e <create_chain+0x1ab>
c00030b1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030b5:	75 41                	jne    c00030f8 <create_chain+0x125>
c00030b7:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030ba:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030bd:	77 05                	ja     c00030c4 <create_chain+0xf1>
c00030bf:	bb 02 00 00 00       	mov    ebx,0x2
c00030c4:	89 da                	mov    edx,ebx
c00030c6:	89 e8                	mov    eax,ebp
c00030c8:	e8 18 fc ff ff       	call   c0002ce5 <get_fat>
c00030cd:	83 f8 01             	cmp    eax,0x1
c00030d0:	0f 84 2e ff ff ff    	je     c0003004 <create_chain+0x31>
c00030d6:	83 f8 ff             	cmp    eax,0xffffffff
c00030d9:	0f 84 9a 00 00 00    	je     c0003179 <create_chain+0x1a6>
c00030df:	85 c0                	test   eax,eax
c00030e1:	74 11                	je     c00030f4 <create_chain+0x121>
c00030e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030e6:	83 f8 01             	cmp    eax,0x1
c00030e9:	76 0d                	jbe    c00030f8 <create_chain+0x125>
c00030eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ee:	76 08                	jbe    c00030f8 <create_chain+0x125>
c00030f0:	89 c7                	mov    edi,eax
c00030f2:	eb 04                	jmp    c00030f8 <create_chain+0x125>
c00030f4:	85 db                	test   ebx,ebx
c00030f6:	75 38                	jne    c0003130 <create_chain+0x15d>
c00030f8:	89 fb                	mov    ebx,edi
c00030fa:	43                   	inc    ebx
c00030fb:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030fe:	77 0e                	ja     c000310e <create_chain+0x13b>
c0003100:	83 ff 01             	cmp    edi,0x1
c0003103:	0f 86 28 ff ff ff    	jbe    c0003031 <create_chain+0x5e>
c0003109:	bb 02 00 00 00       	mov    ebx,0x2
c000310e:	89 da                	mov    edx,ebx
c0003110:	89 e8                	mov    eax,ebp
c0003112:	e8 ce fb ff ff       	call   c0002ce5 <get_fat>
c0003117:	85 c0                	test   eax,eax
c0003119:	74 15                	je     c0003130 <create_chain+0x15d>
c000311b:	83 f8 01             	cmp    eax,0x1
c000311e:	0f 84 e0 fe ff ff    	je     c0003004 <create_chain+0x31>
c0003124:	40                   	inc    eax
c0003125:	74 52                	je     c0003179 <create_chain+0x1a6>
c0003127:	39 fb                	cmp    ebx,edi
c0003129:	75 cf                	jne    c00030fa <create_chain+0x127>
c000312b:	e9 01 ff ff ff       	jmp    c0003031 <create_chain+0x5e>
c0003130:	83 c9 ff             	or     ecx,0xffffffff
c0003133:	89 da                	mov    edx,ebx
c0003135:	89 f0                	mov    eax,esi
c0003137:	e8 a4 f9 ff ff       	call   c0002ae0 <put_fat>
c000313c:	85 c0                	test   eax,eax
c000313e:	75 32                	jne    c0003172 <create_chain+0x19f>
c0003140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003145:	74 11                	je     c0003158 <create_chain+0x185>
c0003147:	89 d9                	mov    ecx,ebx
c0003149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000314d:	89 f0                	mov    eax,esi
c000314f:	e8 8c f9 ff ff       	call   c0002ae0 <put_fat>
c0003154:	85 c0                	test   eax,eax
c0003156:	75 1a                	jne    c0003172 <create_chain+0x19f>
c0003158:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000315b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315e:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003161:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003164:	39 d0                	cmp    eax,edx
c0003166:	77 04                	ja     c000316c <create_chain+0x199>
c0003168:	48                   	dec    eax
c0003169:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000316c:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003170:	eb 56                	jmp    c00031c8 <create_chain+0x1f5>
c0003172:	48                   	dec    eax
c0003173:	0f 85 8b fe ff ff    	jne    c0003004 <create_chain+0x31>
c0003179:	83 cb ff             	or     ebx,0xffffffff
c000317c:	eb 4a                	jmp    c00031c8 <create_chain+0x1f5>
c000317e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003182:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003185:	41                   	inc    ecx
c0003186:	39 d9                	cmp    ecx,ebx
c0003188:	75 19                	jne    c00031a3 <create_chain+0x1d0>
c000318a:	b9 02 00 00 00       	mov    ecx,0x2
c000318f:	85 d2                	test   edx,edx
c0003191:	74 03                	je     c0003196 <create_chain+0x1c3>
c0003193:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003196:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003199:	85 c0                	test   eax,eax
c000319b:	0f 85 63 fe ff ff    	jne    c0003004 <create_chain+0x31>
c00031a1:	eb b5                	jmp    c0003158 <create_chain+0x185>
c00031a3:	85 d2                	test   edx,edx
c00031a5:	75 07                	jne    c00031ae <create_chain+0x1db>
c00031a7:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031ae:	89 d9                	mov    ecx,ebx
c00031b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031b4:	89 e8                	mov    eax,ebp
c00031b6:	e8 bb fa ff ff       	call   c0002c76 <fill_last_frag>
c00031bb:	85 c0                	test   eax,eax
c00031bd:	75 b3                	jne    c0003172 <create_chain+0x19f>
c00031bf:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031c6:	eb 90                	jmp    c0003158 <create_chain+0x185>
c00031c8:	83 c4 1c             	add    esp,0x1c
c00031cb:	89 d8                	mov    eax,ebx
c00031cd:	5b                   	pop    ebx
c00031ce:	5e                   	pop    esi
c00031cf:	5f                   	pop    edi
c00031d0:	5d                   	pop    ebp
c00031d1:	c3                   	ret    

c00031d2 <remove_chain>:
c00031d2:	55                   	push   ebp
c00031d3:	57                   	push   edi
c00031d4:	56                   	push   esi
c00031d5:	53                   	push   ebx
c00031d6:	83 ec 1c             	sub    esp,0x1c
c00031d9:	83 fa 01             	cmp    edx,0x1
c00031dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031e0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031e2:	77 0a                	ja     c00031ee <remove_chain+0x1c>
c00031e4:	b8 02 00 00 00       	mov    eax,0x2
c00031e9:	e9 24 01 00 00       	jmp    c0003312 <remove_chain+0x140>
c00031ee:	89 d6                	mov    esi,edx
c00031f0:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00031f3:	76 ef                	jbe    c00031e4 <remove_chain+0x12>
c00031f5:	89 c7                	mov    edi,eax
c00031f7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00031fc:	75 06                	jne    c0003204 <remove_chain+0x32>
c00031fe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003202:	eb 54                	jmp    c0003258 <remove_chain+0x86>
c0003204:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003207:	75 06                	jne    c000320f <remove_chain+0x3d>
c0003209:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000320d:	74 ef                	je     c00031fe <remove_chain+0x2c>
c000320f:	83 c9 ff             	or     ecx,0xffffffff
c0003212:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 c3 f8 ff ff       	call   c0002ae0 <put_fat>
c000321d:	85 c0                	test   eax,eax
c000321f:	74 dd                	je     c00031fe <remove_chain+0x2c>
c0003221:	e9 ec 00 00 00       	jmp    c0003312 <remove_chain+0x140>
c0003226:	83 f8 01             	cmp    eax,0x1
c0003229:	74 b9                	je     c00031e4 <remove_chain+0x12>
c000322b:	83 f8 ff             	cmp    eax,0xffffffff
c000322e:	74 6d                	je     c000329d <remove_chain+0xcb>
c0003230:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003233:	75 6f                	jne    c00032a4 <remove_chain+0xd2>
c0003235:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003238:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000323b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000323e:	39 d0                	cmp    eax,edx
c0003240:	73 08                	jae    c000324a <remove_chain+0x78>
c0003242:	40                   	inc    eax
c0003243:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003247:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000324a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000324d:	39 e9                	cmp    ecx,ebp
c000324f:	75 64                	jne    c00032b5 <remove_chain+0xe3>
c0003251:	89 ee                	mov    esi,ebp
c0003253:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003256:	76 0f                	jbe    c0003267 <remove_chain+0x95>
c0003258:	89 f2                	mov    edx,esi
c000325a:	89 f8                	mov    eax,edi
c000325c:	e8 84 fa ff ff       	call   c0002ce5 <get_fat>
c0003261:	89 c5                	mov    ebp,eax
c0003263:	85 c0                	test   eax,eax
c0003265:	75 bf                	jne    c0003226 <remove_chain+0x54>
c0003267:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000326a:	0f 85 a0 00 00 00    	jne    c0003310 <remove_chain+0x13e>
c0003270:	eb 6c                	jmp    c00032de <remove_chain+0x10c>
c0003272:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003275:	84 c0                	test   al,al
c0003277:	75 7d                	jne    c00032f6 <remove_chain+0x124>
c0003279:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000327c:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003280:	0f 84 86 00 00 00    	je     c000330c <remove_chain+0x13a>
c0003286:	89 da                	mov    edx,ebx
c0003288:	89 f8                	mov    eax,edi
c000328a:	e8 56 fa ff ff       	call   c0002ce5 <get_fat>
c000328f:	83 f8 01             	cmp    eax,0x1
c0003292:	0f 86 4c ff ff ff    	jbe    c00031e4 <remove_chain+0x12>
c0003298:	83 f8 ff             	cmp    eax,0xffffffff
c000329b:	75 4e                	jne    c00032eb <remove_chain+0x119>
c000329d:	b8 01 00 00 00       	mov    eax,0x1
c00032a2:	eb 6e                	jmp    c0003312 <remove_chain+0x140>
c00032a4:	31 c9                	xor    ecx,ecx
c00032a6:	89 f2                	mov    edx,esi
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 31 f8 ff ff       	call   c0002ae0 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 82                	je     c0003235 <remove_chain+0x63>
c00032b3:	eb 5d                	jmp    c0003312 <remove_chain+0x140>
c00032b5:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b8:	75 1b                	jne    c00032d5 <remove_chain+0x103>
c00032ba:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032be:	89 d8                	mov    eax,ebx
c00032c0:	83 ec 0c             	sub    esp,0xc
c00032c3:	6a 00                	push   0x0
c00032c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032c9:	e8 5d f7 ff ff       	call   c0002a2b <change_bitmap>
c00032ce:	83 c4 10             	add    esp,0x10
c00032d1:	85 c0                	test   eax,eax
c00032d3:	75 3d                	jne    c0003312 <remove_chain+0x140>
c00032d5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032d9:	e9 73 ff ff ff       	jmp    c0003251 <remove_chain+0x7f>
c00032de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032e3:	75 8d                	jne    c0003272 <remove_chain+0xa0>
c00032e5:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032e9:	eb 25                	jmp    c0003310 <remove_chain+0x13e>
c00032eb:	8d 53 01             	lea    edx,[ebx+0x1]
c00032ee:	89 c3                	mov    ebx,eax
c00032f0:	39 c2                	cmp    edx,eax
c00032f2:	74 88                	je     c000327c <remove_chain+0xaa>
c00032f4:	eb 1a                	jmp    c0003310 <remove_chain+0x13e>
c00032f6:	3c 03                	cmp    al,0x3
c00032f8:	75 16                	jne    c0003310 <remove_chain+0x13e>
c00032fa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00032fd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003301:	77 0d                	ja     c0003310 <remove_chain+0x13e>
c0003303:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003306:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000330a:	72 04                	jb     c0003310 <remove_chain+0x13e>
c000330c:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003310:	31 c0                	xor    eax,eax
c0003312:	83 c4 1c             	add    esp,0x1c
c0003315:	5b                   	pop    ebx
c0003316:	5e                   	pop    esi
c0003317:	5f                   	pop    edi
c0003318:	5d                   	pop    ebp
c0003319:	c3                   	ret    

c000331a <dir_clear>:
c000331a:	55                   	push   ebp
c000331b:	57                   	push   edi
c000331c:	56                   	push   esi
c000331d:	89 c6                	mov    esi,eax
c000331f:	53                   	push   ebx
c0003320:	83 ec 1c             	sub    esp,0x1c
c0003323:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003327:	e8 9d ed ff ff       	call   c00020c9 <sync_window>
c000332c:	85 c0                	test   eax,eax
c000332e:	0f 85 de 00 00 00    	jne    c0003412 <dir_clear+0xf8>
c0003334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003338:	89 f0                	mov    eax,esi
c000333a:	8d 6e 54             	lea    ebp,[esi+0x54]
c000333d:	e8 d6 e8 ff ff       	call   c0001c18 <clst2sect>
c0003342:	b9 00 02 00 00       	mov    ecx,0x200
c0003347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000334b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000334f:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003352:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003355:	89 e8                	mov    eax,ebp
c0003357:	31 d2                	xor    edx,edx
c0003359:	e8 b5 e6 ff ff       	call   c0001a13 <mem_set>
c000335e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003362:	c1 e3 09             	shl    ebx,0x9
c0003365:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000336b:	76 1f                	jbe    c000338c <dir_clear+0x72>
c000336d:	bb 00 80 00 00       	mov    ebx,0x8000
c0003372:	eb 18                	jmp    c000338c <dir_clear+0x72>
c0003374:	83 ec 0c             	sub    esp,0xc
c0003377:	53                   	push   ebx
c0003378:	e8 6b 50 00 00       	call   c00083e8 <ff_memalloc>
c000337d:	83 c4 10             	add    esp,0x10
c0003380:	89 c7                	mov    edi,eax
c0003382:	85 c0                	test   eax,eax
c0003384:	0f 85 8f 00 00 00    	jne    c0003419 <dir_clear+0xff>
c000338a:	d1 eb                	shr    ebx,1
c000338c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003392:	77 e0                	ja     c0003374 <dir_clear+0x5a>
c0003394:	31 db                	xor    ebx,ebx
c0003396:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000339a:	39 d8                	cmp    eax,ebx
c000339c:	76 66                	jbe    c0003404 <dir_clear+0xea>
c000339e:	83 ec 0c             	sub    esp,0xc
c00033a1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033a5:	6a 01                	push   0x1
c00033a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033af:	55                   	push   ebp
c00033b0:	50                   	push   eax
c00033b1:	e8 94 e5 ff ff       	call   c000194a <disk_write>
c00033b6:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033bb:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033c0:	83 c4 20             	add    esp,0x20
c00033c3:	85 c0                	test   eax,eax
c00033c5:	75 3d                	jne    c0003404 <dir_clear+0xea>
c00033c7:	43                   	inc    ebx
c00033c8:	eb cc                	jmp    c0003396 <dir_clear+0x7c>
c00033ca:	83 ec 0c             	sub    esp,0xc
c00033cd:	31 d2                	xor    edx,edx
c00033cf:	55                   	push   ebp
c00033d0:	89 d8                	mov    eax,ebx
c00033d2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033d6:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033da:	52                   	push   edx
c00033db:	50                   	push   eax
c00033dc:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033e0:	57                   	push   edi
c00033e1:	50                   	push   eax
c00033e2:	e8 63 e5 ff ff       	call   c000194a <disk_write>
c00033e7:	83 c4 20             	add    esp,0x20
c00033ea:	85 c0                	test   eax,eax
c00033ec:	75 0a                	jne    c00033f8 <dir_clear+0xde>
c00033ee:	01 eb                	add    ebx,ebp
c00033f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033f4:	39 d8                	cmp    eax,ebx
c00033f6:	77 d2                	ja     c00033ca <dir_clear+0xb0>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	57                   	push   edi
c00033fc:	e8 ff 4f 00 00       	call   c0008400 <ff_memfree>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003408:	39 d8                	cmp    eax,ebx
c000340a:	0f 95 c0             	setne  al
c000340d:	0f b6 c0             	movzx  eax,al
c0003410:	eb 19                	jmp    c000342b <dir_clear+0x111>
c0003412:	b8 01 00 00 00       	mov    eax,0x1
c0003417:	eb 12                	jmp    c000342b <dir_clear+0x111>
c0003419:	89 d9                	mov    ecx,ebx
c000341b:	31 d2                	xor    edx,edx
c000341d:	c1 eb 09             	shr    ebx,0x9
c0003420:	e8 ee e5 ff ff       	call   c0001a13 <mem_set>
c0003425:	89 dd                	mov    ebp,ebx
c0003427:	31 db                	xor    ebx,ebx
c0003429:	eb c5                	jmp    c00033f0 <dir_clear+0xd6>
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	5b                   	pop    ebx
c000342f:	5e                   	pop    esi
c0003430:	5f                   	pop    edi
c0003431:	5d                   	pop    ebp
c0003432:	c3                   	ret    

c0003433 <dir_next>:
c0003433:	55                   	push   ebp
c0003434:	57                   	push   edi
c0003435:	56                   	push   esi
c0003436:	53                   	push   ebx
c0003437:	89 c3                	mov    ebx,eax
c0003439:	83 ec 1c             	sub    esp,0x1c
c000343c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000343e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003442:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003445:	8d 78 20             	lea    edi,[eax+0x20]
c0003448:	31 c0                	xor    eax,eax
c000344a:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000344e:	0f 94 c0             	sete   al
c0003451:	48                   	dec    eax
c0003452:	25 00 00 20 f0       	and    eax,0xf0200000
c0003457:	05 00 00 00 10       	add    eax,0x10000000
c000345c:	39 f8                	cmp    eax,edi
c000345e:	77 0e                	ja     c000346e <dir_next+0x3b>
c0003460:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003467:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000346e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003471:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003474:	b8 04 00 00 00       	mov    eax,0x4
c0003479:	89 ce                	mov    esi,ecx
c000347b:	09 d6                	or     esi,edx
c000347d:	0f 84 da 00 00 00    	je     c000355d <dir_next+0x12a>
c0003483:	89 f8                	mov    eax,edi
c0003485:	25 ff 01 00 00       	and    eax,0x1ff
c000348a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000348e:	0f 85 b9 00 00 00    	jne    c000354d <dir_next+0x11a>
c0003494:	83 c2 01             	add    edx,0x1
c0003497:	83 d1 00             	adc    ecx,0x0
c000349a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000349d:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034a3:	85 d2                	test   edx,edx
c00034a5:	75 29                	jne    c00034d0 <dir_next+0x9d>
c00034a7:	89 fa                	mov    edx,edi
c00034a9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034ad:	c1 ea 05             	shr    edx,0x5
c00034b0:	39 c2                	cmp    edx,eax
c00034b2:	0f 82 95 00 00 00    	jb     c000354d <dir_next+0x11a>
c00034b8:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034bf:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034c6:	b8 04 00 00 00       	mov    eax,0x4
c00034cb:	e9 8d 00 00 00       	jmp    c000355d <dir_next+0x12a>
c00034d0:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034d4:	89 f9                	mov    ecx,edi
c00034d6:	48                   	dec    eax
c00034d7:	c1 e9 09             	shr    ecx,0x9
c00034da:	85 c8                	test   eax,ecx
c00034dc:	75 6f                	jne    c000354d <dir_next+0x11a>
c00034de:	89 d8                	mov    eax,ebx
c00034e0:	e8 00 f8 ff ff       	call   c0002ce5 <get_fat>
c00034e5:	89 c6                	mov    esi,eax
c00034e7:	83 f8 01             	cmp    eax,0x1
c00034ea:	77 07                	ja     c00034f3 <dir_next+0xc0>
c00034ec:	b8 02 00 00 00       	mov    eax,0x2
c00034f1:	eb 6a                	jmp    c000355d <dir_next+0x12a>
c00034f3:	83 f8 ff             	cmp    eax,0xffffffff
c00034f6:	75 07                	jne    c00034ff <dir_next+0xcc>
c00034f8:	b8 01 00 00 00       	mov    eax,0x1
c00034fd:	eb 5e                	jmp    c000355d <dir_next+0x12a>
c00034ff:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003502:	77 37                	ja     c000353b <dir_next+0x108>
c0003504:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003509:	74 ad                	je     c00034b8 <dir_next+0x85>
c000350b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000350e:	89 d8                	mov    eax,ebx
c0003510:	e8 be fa ff ff       	call   c0002fd3 <create_chain>
c0003515:	89 c6                	mov    esi,eax
c0003517:	b8 07 00 00 00       	mov    eax,0x7
c000351c:	85 f6                	test   esi,esi
c000351e:	74 3d                	je     c000355d <dir_next+0x12a>
c0003520:	83 fe 01             	cmp    esi,0x1
c0003523:	74 c7                	je     c00034ec <dir_next+0xb9>
c0003525:	83 fe ff             	cmp    esi,0xffffffff
c0003528:	74 ce                	je     c00034f8 <dir_next+0xc5>
c000352a:	89 f2                	mov    edx,esi
c000352c:	89 e8                	mov    eax,ebp
c000352e:	e8 e7 fd ff ff       	call   c000331a <dir_clear>
c0003533:	85 c0                	test   eax,eax
c0003535:	75 c1                	jne    c00034f8 <dir_next+0xc5>
c0003537:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000353b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000353e:	89 f2                	mov    edx,esi
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 d1 e6 ff ff       	call   c0001c18 <clst2sect>
c0003547:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000354a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000354d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003551:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003554:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003558:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000355b:	31 c0                	xor    eax,eax
c000355d:	83 c4 1c             	add    esp,0x1c
c0003560:	5b                   	pop    ebx
c0003561:	5e                   	pop    esi
c0003562:	5f                   	pop    edi
c0003563:	5d                   	pop    ebp
c0003564:	c3                   	ret    

c0003565 <load_xdir>:
c0003565:	55                   	push   ebp
c0003566:	57                   	push   edi
c0003567:	56                   	push   esi
c0003568:	89 c6                	mov    esi,eax
c000356a:	53                   	push   ebx
c000356b:	83 ec 1c             	sub    esp,0x1c
c000356e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003570:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003573:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003576:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003579:	e8 df eb ff ff       	call   c000215d <move_window>
c000357e:	89 c3                	mov    ebx,eax
c0003580:	85 c0                	test   eax,eax
c0003582:	0f 85 0c 01 00 00    	jne    c0003694 <load_xdir+0x12f>
c0003588:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000358b:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000358e:	0f 85 fb 00 00 00    	jne    c000368f <load_xdir+0x12a>
c0003594:	89 f8                	mov    eax,edi
c0003596:	b9 20 00 00 00       	mov    ecx,0x20
c000359b:	e8 5e e4 ff ff       	call   c00019fe <mem_cpy>
c00035a0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035a4:	40                   	inc    eax
c00035a5:	c1 e0 05             	shl    eax,0x5
c00035a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035ac:	83 e8 60             	sub    eax,0x60
c00035af:	3d 00 02 00 00       	cmp    eax,0x200
c00035b4:	0f 87 d5 00 00 00    	ja     c000368f <load_xdir+0x12a>
c00035ba:	31 d2                	xor    edx,edx
c00035bc:	89 f0                	mov    eax,esi
c00035be:	e8 70 fe ff ff       	call   c0003433 <dir_next>
c00035c3:	89 c3                	mov    ebx,eax
c00035c5:	83 f8 04             	cmp    eax,0x4
c00035c8:	0f 84 c1 00 00 00    	je     c000368f <load_xdir+0x12a>
c00035ce:	85 c0                	test   eax,eax
c00035d0:	0f 85 be 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035d6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035d9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00035de:	e8 7a eb ff ff       	call   c000215d <move_window>
c00035e3:	89 c3                	mov    ebx,eax
c00035e5:	85 c0                	test   eax,eax
c00035e7:	0f 85 a7 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035ed:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035f0:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00035f3:	0f 85 96 00 00 00    	jne    c000368f <load_xdir+0x12a>
c00035f9:	8d 47 20             	lea    eax,[edi+0x20]
c00035fc:	b9 20 00 00 00       	mov    ecx,0x20
c0003601:	e8 f8 e3 ff ff       	call   c00019fe <mem_cpy>
c0003606:	31 d2                	xor    edx,edx
c0003608:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000360c:	b9 0f 00 00 00       	mov    ecx,0xf
c0003611:	83 c0 2c             	add    eax,0x2c
c0003614:	f7 f1                	div    ecx
c0003616:	c1 e0 05             	shl    eax,0x5
c0003619:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000361d:	77 70                	ja     c000368f <load_xdir+0x12a>
c000361f:	bd 40 00 00 00       	mov    ebp,0x40
c0003624:	31 d2                	xor    edx,edx
c0003626:	89 f0                	mov    eax,esi
c0003628:	e8 06 fe ff ff       	call   c0003433 <dir_next>
c000362d:	89 c3                	mov    ebx,eax
c000362f:	83 f8 04             	cmp    eax,0x4
c0003632:	74 5b                	je     c000368f <load_xdir+0x12a>
c0003634:	85 c0                	test   eax,eax
c0003636:	75 5c                	jne    c0003694 <load_xdir+0x12f>
c0003638:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003640:	e8 18 eb ff ff       	call   c000215d <move_window>
c0003645:	89 c3                	mov    ebx,eax
c0003647:	85 c0                	test   eax,eax
c0003649:	75 49                	jne    c0003694 <load_xdir+0x12f>
c000364b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364e:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003651:	75 3c                	jne    c000368f <load_xdir+0x12a>
c0003653:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003659:	77 0d                	ja     c0003668 <load_xdir+0x103>
c000365b:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000365e:	b9 20 00 00 00       	mov    ecx,0x20
c0003663:	e8 96 e3 ff ff       	call   c00019fe <mem_cpy>
c0003668:	83 c5 20             	add    ebp,0x20
c000366b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000366f:	77 b3                	ja     c0003624 <load_xdir+0xbf>
c0003671:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003677:	77 1b                	ja     c0003694 <load_xdir+0x12f>
c0003679:	89 f8                	mov    eax,edi
c000367b:	e8 cd e7 ff ff       	call   c0001e4d <xdir_sum>
c0003680:	89 c1                	mov    ecx,eax
c0003682:	8d 47 02             	lea    eax,[edi+0x2]
c0003685:	e8 f5 e2 ff ff       	call   c000197f <ld_word>
c000368a:	66 39 c1             	cmp    cx,ax
c000368d:	74 05                	je     c0003694 <load_xdir+0x12f>
c000368f:	bb 02 00 00 00       	mov    ebx,0x2
c0003694:	83 c4 1c             	add    esp,0x1c
c0003697:	89 d8                	mov    eax,ebx
c0003699:	5b                   	pop    ebx
c000369a:	5e                   	pop    esi
c000369b:	5f                   	pop    edi
c000369c:	5d                   	pop    ebp
c000369d:	c3                   	ret    

c000369e <load_obj_xdir>:
c000369e:	53                   	push   ebx
c000369f:	89 c3                	mov    ebx,eax
c00036a1:	83 ec 08             	sub    esp,0x8
c00036a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00036a6:	89 03                	mov    DWORD PTR [ebx],eax
c00036a8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036ae:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b1:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036be:	30 c0                	xor    al,al
c00036c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036c7:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036cf:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036d2:	e8 04 f8 ff ff       	call   c0002edb <dir_sdi>
c00036d7:	85 c0                	test   eax,eax
c00036d9:	75 0b                	jne    c00036e6 <load_obj_xdir+0x48>
c00036db:	89 d8                	mov    eax,ebx
c00036dd:	83 c4 08             	add    esp,0x8
c00036e0:	5b                   	pop    ebx
c00036e1:	e9 7f fe ff ff       	jmp    c0003565 <load_xdir>
c00036e6:	83 c4 08             	add    esp,0x8
c00036e9:	5b                   	pop    ebx
c00036ea:	c3                   	ret    

c00036eb <dir_read>:
c00036eb:	55                   	push   ebp
c00036ec:	bd 04 00 00 00       	mov    ebp,0x4
c00036f1:	57                   	push   edi
c00036f2:	56                   	push   esi
c00036f3:	be ff ff ff ff       	mov    esi,0xffffffff
c00036f8:	53                   	push   ebx
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 ec 1c             	sub    esp,0x1c
c00036fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003702:	8b 38                	mov    edi,DWORD PTR [eax]
c0003704:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003709:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000370c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000370f:	89 c8                	mov    eax,ecx
c0003711:	09 d0                	or     eax,edx
c0003713:	0f 84 25 01 00 00    	je     c000383e <dir_read+0x153>
c0003719:	89 f8                	mov    eax,edi
c000371b:	e8 3d ea ff ff       	call   c000215d <move_window>
c0003720:	89 c5                	mov    ebp,eax
c0003722:	85 c0                	test   eax,eax
c0003724:	0f 85 23 01 00 00    	jne    c000384d <dir_read+0x162>
c000372a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000372d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000372f:	84 c9                	test   cl,cl
c0003731:	0f 84 11 01 00 00    	je     c0003848 <dir_read+0x15d>
c0003737:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000373a:	75 48                	jne    c0003784 <dir_read+0x99>
c000373c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003741:	74 10                	je     c0003753 <dir_read+0x68>
c0003743:	80 f9 83             	cmp    cl,0x83
c0003746:	0f 85 dd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000374c:	31 ed                	xor    ebp,ebp
c000374e:	e9 08 01 00 00       	jmp    c000385b <dir_read+0x170>
c0003753:	80 f9 85             	cmp    cl,0x85
c0003756:	0f 85 cd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000375c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000375f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003762:	89 d8                	mov    eax,ebx
c0003764:	e8 fc fd ff ff       	call   c0003565 <load_xdir>
c0003769:	89 c5                	mov    ebp,eax
c000376b:	85 c0                	test   eax,eax
c000376d:	0f 85 da 00 00 00    	jne    c000384d <dir_read+0x162>
c0003773:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003776:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003779:	83 e0 3f             	and    eax,0x3f
c000377c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000377f:	e9 d7 00 00 00       	jmp    c000385b <dir_read+0x170>
c0003784:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003787:	83 e0 3f             	and    eax,0x3f
c000378a:	80 f9 2e             	cmp    cl,0x2e
c000378d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003791:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003794:	0f 84 8a 00 00 00    	je     c0003824 <dir_read+0x139>
c000379a:	80 f9 e5             	cmp    cl,0xe5
c000379d:	0f 84 81 00 00 00    	je     c0003824 <dir_read+0x139>
c00037a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037a7:	83 e0 1f             	and    eax,0x1f
c00037aa:	83 f8 08             	cmp    eax,0x8
c00037ad:	0f 94 c0             	sete   al
c00037b0:	0f b6 c0             	movzx  eax,al
c00037b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037b7:	75 6b                	jne    c0003824 <dir_read+0x139>
c00037b9:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037be:	75 44                	jne    c0003804 <dir_read+0x119>
c00037c0:	f6 c1 40             	test   cl,0x40
c00037c3:	74 12                	je     c00037d7 <dir_read+0xec>
c00037c5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037c8:	83 e1 bf             	and    ecx,0xffffffbf
c00037cb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037cf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037d2:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037d5:	eb 06                	jmp    c00037dd <dir_read+0xf2>
c00037d7:	89 f0                	mov    eax,esi
c00037d9:	38 c8                	cmp    al,cl
c00037db:	75 47                	jne    c0003824 <dir_read+0x139>
c00037dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037e1:	be ff ff ff ff       	mov    esi,0xffffffff
c00037e6:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037e9:	75 3e                	jne    c0003829 <dir_read+0x13e>
c00037eb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037ef:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00037f2:	e8 8a e4 ff ff       	call   c0001c81 <pick_lfn>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	74 2e                	je     c0003829 <dir_read+0x13e>
c00037fb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00037ff:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003802:	eb 25                	jmp    c0003829 <dir_read+0x13e>
c0003804:	89 f0                	mov    eax,esi
c0003806:	84 c0                	test   al,al
c0003808:	75 11                	jne    c000381b <dir_read+0x130>
c000380a:	89 d0                	mov    eax,edx
c000380c:	e8 2a e6 ff ff       	call   c0001e3b <sum_sfn>
c0003811:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003815:	0f 84 31 ff ff ff    	je     c000374c <dir_read+0x61>
c000381b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003822:	eb 37                	jmp    c000385b <dir_read+0x170>
c0003824:	be ff ff ff ff       	mov    esi,0xffffffff
c0003829:	31 d2                	xor    edx,edx
c000382b:	89 d8                	mov    eax,ebx
c000382d:	e8 01 fc ff ff       	call   c0003433 <dir_next>
c0003832:	89 c5                	mov    ebp,eax
c0003834:	85 c0                	test   eax,eax
c0003836:	0f 84 cd fe ff ff    	je     c0003709 <dir_read+0x1e>
c000383c:	eb 0f                	jmp    c000384d <dir_read+0x162>
c000383e:	85 ed                	test   ebp,ebp
c0003840:	0f 84 06 ff ff ff    	je     c000374c <dir_read+0x61>
c0003846:	eb 05                	jmp    c000384d <dir_read+0x162>
c0003848:	bd 04 00 00 00       	mov    ebp,0x4
c000384d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003854:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000385b:	83 c4 1c             	add    esp,0x1c
c000385e:	89 e8                	mov    eax,ebp
c0003860:	5b                   	pop    ebx
c0003861:	5e                   	pop    esi
c0003862:	5f                   	pop    edi
c0003863:	5d                   	pop    ebp
c0003864:	c3                   	ret    

c0003865 <dir_alloc>:
c0003865:	55                   	push   ebp
c0003866:	89 d5                	mov    ebp,edx
c0003868:	57                   	push   edi
c0003869:	31 d2                	xor    edx,edx
c000386b:	56                   	push   esi
c000386c:	53                   	push   ebx
c000386d:	89 c3                	mov    ebx,eax
c000386f:	83 ec 0c             	sub    esp,0xc
c0003872:	8b 38                	mov    edi,DWORD PTR [eax]
c0003874:	e8 62 f6 ff ff       	call   c0002edb <dir_sdi>
c0003879:	85 c0                	test   eax,eax
c000387b:	75 4e                	jne    c00038cb <dir_alloc+0x66>
c000387d:	31 f6                	xor    esi,esi
c000387f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003882:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003885:	89 f8                	mov    eax,edi
c0003887:	e8 d1 e8 ff ff       	call   c000215d <move_window>
c000388c:	85 c0                	test   eax,eax
c000388e:	75 3b                	jne    c00038cb <dir_alloc+0x66>
c0003890:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003893:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003896:	8a 12                	mov    dl,BYTE PTR [edx]
c0003898:	75 07                	jne    c00038a1 <dir_alloc+0x3c>
c000389a:	f7 d2                	not    edx
c000389c:	c0 ea 07             	shr    dl,0x7
c000389f:	eb 0d                	jmp    c00038ae <dir_alloc+0x49>
c00038a1:	84 d2                	test   dl,dl
c00038a3:	0f 94 c1             	sete   cl
c00038a6:	80 fa e5             	cmp    dl,0xe5
c00038a9:	0f 94 c2             	sete   dl
c00038ac:	09 ca                	or     edx,ecx
c00038ae:	84 d2                	test   dl,dl
c00038b0:	74 07                	je     c00038b9 <dir_alloc+0x54>
c00038b2:	46                   	inc    esi
c00038b3:	39 ee                	cmp    esi,ebp
c00038b5:	75 04                	jne    c00038bb <dir_alloc+0x56>
c00038b7:	eb 1c                	jmp    c00038d5 <dir_alloc+0x70>
c00038b9:	31 f6                	xor    esi,esi
c00038bb:	ba 01 00 00 00       	mov    edx,0x1
c00038c0:	89 d8                	mov    eax,ebx
c00038c2:	e8 6c fb ff ff       	call   c0003433 <dir_next>
c00038c7:	85 c0                	test   eax,eax
c00038c9:	74 b4                	je     c000387f <dir_alloc+0x1a>
c00038cb:	83 f8 04             	cmp    eax,0x4
c00038ce:	75 05                	jne    c00038d5 <dir_alloc+0x70>
c00038d0:	b8 07 00 00 00       	mov    eax,0x7
c00038d5:	83 c4 0c             	add    esp,0xc
c00038d8:	5b                   	pop    ebx
c00038d9:	5e                   	pop    esi
c00038da:	5f                   	pop    edi
c00038db:	5d                   	pop    ebp
c00038dc:	c3                   	ret    

c00038dd <store_xdir>:
c00038dd:	55                   	push   ebp
c00038de:	57                   	push   edi
c00038df:	89 c7                	mov    edi,eax
c00038e1:	56                   	push   esi
c00038e2:	53                   	push   ebx
c00038e3:	83 ec 0c             	sub    esp,0xc
c00038e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038e8:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038eb:	89 e8                	mov    eax,ebp
c00038ed:	e8 5b e5 ff ff       	call   c0001e4d <xdir_sum>
c00038f2:	0f b7 d0             	movzx  edx,ax
c00038f5:	8d 45 02             	lea    eax,[ebp+0x2]
c00038f8:	e8 f4 e0 ff ff       	call   c00019f1 <st_word>
c00038fd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003901:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003904:	89 f8                	mov    eax,edi
c0003906:	e8 d0 f5 ff ff       	call   c0002edb <dir_sdi>
c000390b:	89 c6                	mov    esi,eax
c000390d:	85 f6                	test   esi,esi
c000390f:	75 3d                	jne    c000394e <store_xdir+0x71>
c0003911:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003914:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003917:	8b 07                	mov    eax,DWORD PTR [edi]
c0003919:	e8 3f e8 ff ff       	call   c000215d <move_window>
c000391e:	89 c6                	mov    esi,eax
c0003920:	85 c0                	test   eax,eax
c0003922:	75 2a                	jne    c000394e <store_xdir+0x71>
c0003924:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003927:	b9 20 00 00 00       	mov    ecx,0x20
c000392c:	89 ea                	mov    edx,ebp
c000392e:	e8 cb e0 ff ff       	call   c00019fe <mem_cpy>
c0003933:	8b 07                	mov    eax,DWORD PTR [edi]
c0003935:	85 db                	test   ebx,ebx
c0003937:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000393b:	74 11                	je     c000394e <store_xdir+0x71>
c000393d:	31 d2                	xor    edx,edx
c000393f:	89 f8                	mov    eax,edi
c0003941:	83 c5 20             	add    ebp,0x20
c0003944:	e8 ea fa ff ff       	call   c0003433 <dir_next>
c0003949:	4b                   	dec    ebx
c000394a:	89 c6                	mov    esi,eax
c000394c:	eb bf                	jmp    c000390d <store_xdir+0x30>
c000394e:	89 f0                	mov    eax,esi
c0003950:	83 fe 02             	cmp    esi,0x2
c0003953:	76 05                	jbe    c000395a <store_xdir+0x7d>
c0003955:	b8 02 00 00 00       	mov    eax,0x2
c000395a:	83 c4 0c             	add    esp,0xc
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <dir_remove>:
c0003962:	57                   	push   edi
c0003963:	56                   	push   esi
c0003964:	53                   	push   ebx
c0003965:	89 c3                	mov    ebx,eax
c0003967:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000396a:	8b 30                	mov    esi,DWORD PTR [eax]
c000396c:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000396f:	83 fa ff             	cmp    edx,0xffffffff
c0003972:	74 09                	je     c000397d <dir_remove+0x1b>
c0003974:	e8 62 f5 ff ff       	call   c0002edb <dir_sdi>
c0003979:	85 c0                	test   eax,eax
c000397b:	75 41                	jne    c00039be <dir_remove+0x5c>
c000397d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003980:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003983:	89 f0                	mov    eax,esi
c0003985:	e8 d3 e7 ff ff       	call   c000215d <move_window>
c000398a:	85 c0                	test   eax,eax
c000398c:	75 26                	jne    c00039b4 <dir_remove+0x52>
c000398e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003991:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003994:	75 05                	jne    c000399b <dir_remove+0x39>
c0003996:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003999:	eb 03                	jmp    c000399e <dir_remove+0x3c>
c000399b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000399e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039a2:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039a5:	73 17                	jae    c00039be <dir_remove+0x5c>
c00039a7:	31 d2                	xor    edx,edx
c00039a9:	89 d8                	mov    eax,ebx
c00039ab:	e8 83 fa ff ff       	call   c0003433 <dir_next>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 c9                	je     c000397d <dir_remove+0x1b>
c00039b4:	83 f8 04             	cmp    eax,0x4
c00039b7:	75 05                	jne    c00039be <dir_remove+0x5c>
c00039b9:	b8 02 00 00 00       	mov    eax,0x2
c00039be:	5b                   	pop    ebx
c00039bf:	5e                   	pop    esi
c00039c0:	5f                   	pop    edi
c00039c1:	c3                   	ret    

c00039c2 <create_name>:
c00039c2:	55                   	push   ebp
c00039c3:	89 d5                	mov    ebp,edx
c00039c5:	57                   	push   edi
c00039c6:	89 c7                	mov    edi,eax
c00039c8:	56                   	push   esi
c00039c9:	31 f6                	xor    esi,esi
c00039cb:	53                   	push   ebx
c00039cc:	83 ec 3c             	sub    esp,0x3c
c00039cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039de:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039e2:	e8 72 e0 ff ff       	call   c0001a59 <tchar2uni>
c00039e7:	89 c3                	mov    ebx,eax
c00039e9:	83 f8 ff             	cmp    eax,0xffffffff
c00039ec:	75 0a                	jne    c00039f8 <create_name+0x36>
c00039ee:	b8 06 00 00 00       	mov    eax,0x6
c00039f3:	e9 9e 02 00 00       	jmp    c0003c96 <create_name+0x2d4>
c00039f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00039fd:	76 0c                	jbe    c0003a0b <create_name+0x49>
c00039ff:	c1 e8 10             	shr    eax,0x10
c0003a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a06:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a0a:	46                   	inc    esi
c0003a0b:	66 83 fb 1f          	cmp    bx,0x1f
c0003a0f:	76 4f                	jbe    c0003a60 <create_name+0x9e>
c0003a11:	66 83 fb 5c          	cmp    bx,0x5c
c0003a15:	74 35                	je     c0003a4c <create_name+0x8a>
c0003a17:	66 83 fb 2f          	cmp    bx,0x2f
c0003a1b:	74 2f                	je     c0003a4c <create_name+0x8a>
c0003a1d:	66 83 fb 7f          	cmp    bx,0x7f
c0003a21:	77 11                	ja     c0003a34 <create_name+0x72>
c0003a23:	0f b7 d3             	movzx  edx,bx
c0003a26:	b8 f2 24 02 c0       	mov    eax,0xc00224f2
c0003a2b:	e8 11 e0 ff ff       	call   c0001a41 <chk_chr>
c0003a30:	85 c0                	test   eax,eax
c0003a32:	75 ba                	jne    c00039ee <create_name+0x2c>
c0003a34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a3a:	77 b2                	ja     c00039ee <create_name+0x2c>
c0003a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a40:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a44:	46                   	inc    esi
c0003a45:	eb 97                	jmp    c00039de <create_name+0x1c>
c0003a47:	40                   	inc    eax
c0003a48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a50:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a52:	80 fa 2f             	cmp    dl,0x2f
c0003a55:	74 f0                	je     c0003a47 <create_name+0x85>
c0003a57:	80 fa 5c             	cmp    dl,0x5c
c0003a5a:	74 eb                	je     c0003a47 <create_name+0x85>
c0003a5c:	31 db                	xor    ebx,ebx
c0003a5e:	eb 02                	jmp    c0003a62 <create_name+0xa0>
c0003a60:	b3 04                	mov    bl,0x4
c0003a62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a66:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a69:	85 f6                	test   esi,esi
c0003a6b:	74 18                	je     c0003a85 <create_name+0xc3>
c0003a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a71:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a76:	66 83 f8 20          	cmp    ax,0x20
c0003a7a:	74 06                	je     c0003a82 <create_name+0xc0>
c0003a7c:	66 83 f8 2e          	cmp    ax,0x2e
c0003a80:	75 03                	jne    c0003a85 <create_name+0xc3>
c0003a82:	4e                   	dec    esi
c0003a83:	eb e4                	jmp    c0003a69 <create_name+0xa7>
c0003a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a89:	31 ed                	xor    ebp,ebp
c0003a8b:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003a91:	85 f6                	test   esi,esi
c0003a93:	0f 84 55 ff ff ff    	je     c00039ee <create_name+0x2c>
c0003a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a9d:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aa0:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003aa4:	66 83 f8 20          	cmp    ax,0x20
c0003aa8:	75 04                	jne    c0003aae <create_name+0xec>
c0003aaa:	89 d5                	mov    ebp,edx
c0003aac:	eb eb                	jmp    c0003a99 <create_name+0xd7>
c0003aae:	85 ed                	test   ebp,ebp
c0003ab0:	75 06                	jne    c0003ab8 <create_name+0xf6>
c0003ab2:	66 83 f8 2e          	cmp    ax,0x2e
c0003ab6:	75 08                	jne    c0003ac0 <create_name+0xfe>
c0003ab8:	83 cb 03             	or     ebx,0x3
c0003abb:	eb 03                	jmp    c0003ac0 <create_name+0xfe>
c0003abd:	4e                   	dec    esi
c0003abe:	74 0c                	je     c0003acc <create_name+0x10a>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003aca:	75 f1                	jne    c0003abd <create_name+0xfb>
c0003acc:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ad1:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ad4:	ba 20 00 00 00       	mov    edx,0x20
c0003ad9:	e8 35 df ff ff       	call   c0001a13 <mem_set>
c0003ade:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ae6:	31 c9                	xor    ecx,ecx
c0003ae8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003aed:	8d 45 01             	lea    eax,[ebp+0x1]
c0003af0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af8:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003afc:	66 85 ed             	test   bp,bp
c0003aff:	0f 84 30 01 00 00    	je     c0003c35 <create_name+0x273>
c0003b05:	66 83 fd 20          	cmp    bp,0x20
c0003b09:	74 10                	je     c0003b1b <create_name+0x159>
c0003b0b:	66 83 fd 2e          	cmp    bp,0x2e
c0003b0f:	75 13                	jne    c0003b24 <create_name+0x162>
c0003b11:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b15:	0f 84 6b 01 00 00    	je     c0003c86 <create_name+0x2c4>
c0003b1b:	83 cb 03             	or     ebx,0x3
c0003b1e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b22:	eb c9                	jmp    c0003aed <create_name+0x12b>
c0003b24:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b28:	73 0b                	jae    c0003b35 <create_name+0x173>
c0003b2a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b2e:	75 47                	jne    c0003b77 <create_name+0x1b5>
c0003b30:	e9 51 01 00 00       	jmp    c0003c86 <create_name+0x2c4>
c0003b35:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b3a:	75 10                	jne    c0003b4c <create_name+0x18a>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b47:	e9 e9 00 00 00       	jmp    c0003c35 <create_name+0x273>
c0003b4c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b50:	74 0d                	je     c0003b5f <create_name+0x19d>
c0003b52:	83 cb 03             	or     ebx,0x3
c0003b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b59:	0f 87 d6 00 00 00    	ja     c0003c35 <create_name+0x273>
c0003b5f:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b64:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b68:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b70:	b9 08 00 00 00       	mov    ecx,0x8
c0003b75:	eb a7                	jmp    c0003b1e <create_name+0x15c>
c0003b77:	66 83 fd 7f          	cmp    bp,0x7f
c0003b7b:	76 68                	jbe    c0003be5 <create_name+0x223>
c0003b7d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b81:	88 da                	mov    dl,bl
c0003b83:	83 ca 02             	or     edx,0x2
c0003b86:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b8a:	50                   	push   eax
c0003b8b:	50                   	push   eax
c0003b8c:	68 b5 01 00 00       	push   0x1b5
c0003b91:	55                   	push   ebp
c0003b92:	e8 81 48 00 00       	call   c0008418 <ff_uni2oem>
c0003b97:	83 c4 10             	add    esp,0x10
c0003b9a:	89 c5                	mov    ebp,eax
c0003b9c:	a8 80                	test   al,0x80
c0003b9e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ba6:	74 0c                	je     c0003bb4 <create_name+0x1f2>
c0003ba8:	83 e5 7f             	and    ebp,0x7f
c0003bab:	0f b6 ad 40 24 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffddbc0]
c0003bb2:	eb 2a                	jmp    c0003bde <create_name+0x21c>
c0003bb4:	66 3d ff 00          	cmp    ax,0xff
c0003bb8:	76 24                	jbe    c0003bde <create_name+0x21c>
c0003bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bbe:	48                   	dec    eax
c0003bbf:	39 c8                	cmp    eax,ecx
c0003bc1:	77 0c                	ja     c0003bcf <create_name+0x20d>
c0003bc3:	83 cb 03             	or     ebx,0x3
c0003bc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bca:	e9 4f ff ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003bcf:	89 e8                	mov    eax,ebp
c0003bd1:	88 d3                	mov    bl,dl
c0003bd3:	66 c1 e8 08          	shr    ax,0x8
c0003bd7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bdb:	41                   	inc    ecx
c0003bdc:	eb 4b                	jmp    c0003c29 <create_name+0x267>
c0003bde:	88 d3                	mov    bl,dl
c0003be0:	66 85 ed             	test   bp,bp
c0003be3:	74 19                	je     c0003bfe <create_name+0x23c>
c0003be5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003be9:	0f b7 d5             	movzx  edx,bp
c0003bec:	b8 fb 24 02 c0       	mov    eax,0xc00224fb
c0003bf1:	e8 4b de ff ff       	call   c0001a41 <chk_chr>
c0003bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 0a                	je     c0003c08 <create_name+0x246>
c0003bfe:	83 cb 03             	or     ebx,0x3
c0003c01:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c06:	eb 21                	jmp    c0003c29 <create_name+0x267>
c0003c08:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c0b:	66 83 f8 19          	cmp    ax,0x19
c0003c0f:	77 07                	ja     c0003c18 <create_name+0x256>
c0003c11:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c16:	eb 11                	jmp    c0003c29 <create_name+0x267>
c0003c18:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c1b:	66 83 f8 19          	cmp    ax,0x19
c0003c1f:	77 08                	ja     c0003c29 <create_name+0x267>
c0003c21:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c26:	83 ed 20             	sub    ebp,0x20
c0003c29:	89 e8                	mov    eax,ebp
c0003c2b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c2f:	41                   	inc    ecx
c0003c30:	e9 e9 fe ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003c35:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c39:	75 04                	jne    c0003c3f <create_name+0x27d>
c0003c3b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c3f:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c44:	75 05                	jne    c0003c4b <create_name+0x289>
c0003c46:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c4f:	83 e0 0c             	and    eax,0xc
c0003c52:	3c 0c                	cmp    al,0xc
c0003c54:	74 0b                	je     c0003c61 <create_name+0x29f>
c0003c56:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5a:	83 e0 03             	and    eax,0x3
c0003c5d:	3c 03                	cmp    al,0x3
c0003c5f:	75 05                	jne    c0003c66 <create_name+0x2a4>
c0003c61:	83 cb 02             	or     ebx,0x2
c0003c64:	eb 19                	jmp    c0003c7f <create_name+0x2bd>
c0003c66:	f6 c3 02             	test   bl,0x2
c0003c69:	75 14                	jne    c0003c7f <create_name+0x2bd>
c0003c6b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c70:	74 03                	je     c0003c75 <create_name+0x2b3>
c0003c72:	83 cb 10             	or     ebx,0x10
c0003c75:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c7a:	74 03                	je     c0003c7f <create_name+0x2bd>
c0003c7c:	83 cb 08             	or     ebx,0x8
c0003c7f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c82:	31 c0                	xor    eax,eax
c0003c84:	eb 10                	jmp    c0003c96 <create_name+0x2d4>
c0003c86:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c8b:	0f 85 ce fe ff ff    	jne    c0003b5f <create_name+0x19d>
c0003c91:	e9 a6 fe ff ff       	jmp    c0003b3c <create_name+0x17a>
c0003c96:	83 c4 3c             	add    esp,0x3c
c0003c99:	5b                   	pop    ebx
c0003c9a:	5e                   	pop    esi
c0003c9b:	5f                   	pop    edi
c0003c9c:	5d                   	pop    ebp
c0003c9d:	c3                   	ret    

c0003c9e <xname_sum>:
c0003c9e:	56                   	push   esi
c0003c9f:	53                   	push   ebx
c0003ca0:	89 c6                	mov    esi,eax
c0003ca2:	51                   	push   ecx
c0003ca3:	31 db                	xor    ebx,ebx
c0003ca5:	83 c6 02             	add    esi,0x2
c0003ca8:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cac:	66 85 c0             	test   ax,ax
c0003caf:	74 1f                	je     c0003cd0 <xname_sum+0x32>
c0003cb1:	83 ec 0c             	sub    esp,0xc
c0003cb4:	66 d1 cb             	ror    bx,1
c0003cb7:	50                   	push   eax
c0003cb8:	e8 67 48 00 00       	call   c0008524 <ff_wtoupper>
c0003cbd:	83 c4 10             	add    esp,0x10
c0003cc0:	0f b6 d0             	movzx  edx,al
c0003cc3:	66 c1 e8 08          	shr    ax,0x8
c0003cc7:	01 d3                	add    ebx,edx
c0003cc9:	66 d1 cb             	ror    bx,1
c0003ccc:	01 c3                	add    ebx,eax
c0003cce:	eb d5                	jmp    c0003ca5 <xname_sum+0x7>
c0003cd0:	89 d8                	mov    eax,ebx
c0003cd2:	5a                   	pop    edx
c0003cd3:	5b                   	pop    ebx
c0003cd4:	5e                   	pop    esi
c0003cd5:	c3                   	ret    

c0003cd6 <create_xdir>:
c0003cd6:	55                   	push   ebp
c0003cd7:	b9 40 00 00 00       	mov    ecx,0x40
c0003cdc:	57                   	push   edi
c0003cdd:	bd 01 00 00 00       	mov    ebp,0x1
c0003ce2:	56                   	push   esi
c0003ce3:	31 ff                	xor    edi,edi
c0003ce5:	53                   	push   ebx
c0003ce6:	be 40 00 00 00       	mov    esi,0x40
c0003ceb:	89 c3                	mov    ebx,eax
c0003ced:	83 ec 1c             	sub    esp,0x1c
c0003cf0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003cf4:	31 d2                	xor    edx,edx
c0003cf6:	e8 18 dd ff ff       	call   c0001a13 <mem_set>
c0003cfb:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003cfe:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d02:	31 c9                	xor    ecx,ecx
c0003d04:	8d 46 01             	lea    eax,[esi+0x1]
c0003d07:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d0b:	83 c6 02             	add    esi,0x2
c0003d0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d12:	66 85 ed             	test   bp,bp
c0003d15:	74 12                	je     c0003d29 <create_xdir+0x53>
c0003d17:	0f b6 c1             	movzx  eax,cl
c0003d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d1e:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d22:	66 83 fd 01          	cmp    bp,0x1
c0003d26:	80 d9 ff             	sbb    cl,0xff
c0003d29:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d2c:	0f b7 d5             	movzx  edx,bp
c0003d2f:	83 c6 02             	add    esi,0x2
c0003d32:	e8 ba dc ff ff       	call   c00019f1 <st_word>
c0003d37:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d3d:	75 d3                	jne    c0003d12 <create_xdir+0x3c>
c0003d3f:	8d 47 01             	lea    eax,[edi+0x1]
c0003d42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d4a:	0f b6 c1             	movzx  eax,cl
c0003d4d:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d52:	74 07                	je     c0003d5b <create_xdir+0x85>
c0003d54:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d59:	eb a9                	jmp    c0003d04 <create_xdir+0x2e>
c0003d5b:	8d 47 02             	lea    eax,[edi+0x2]
c0003d5e:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d61:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d64:	89 d0                	mov    eax,edx
c0003d66:	e8 33 ff ff ff       	call   c0003c9e <xname_sum>
c0003d6b:	83 c4 1c             	add    esp,0x1c
c0003d6e:	0f b7 d0             	movzx  edx,ax
c0003d71:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d74:	5b                   	pop    ebx
c0003d75:	5e                   	pop    esi
c0003d76:	5f                   	pop    edi
c0003d77:	5d                   	pop    ebp
c0003d78:	e9 74 dc ff ff       	jmp    c00019f1 <st_word>

c0003d7d <cmp_lfn>:
c0003d7d:	55                   	push   ebp
c0003d7e:	57                   	push   edi
c0003d7f:	89 d7                	mov    edi,edx
c0003d81:	56                   	push   esi
c0003d82:	53                   	push   ebx
c0003d83:	83 ec 1c             	sub    esp,0x1c
c0003d86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d8d:	e8 ed db ff ff       	call   c000197f <ld_word>
c0003d92:	66 85 c0             	test   ax,ax
c0003d95:	74 07                	je     c0003d9e <cmp_lfn+0x21>
c0003d97:	31 c0                	xor    eax,eax
c0003d99:	e9 9a 00 00 00       	jmp    c0003e38 <cmp_lfn+0xbb>
c0003d9e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003da0:	bd 01 00 00 00       	mov    ebp,0x1
c0003da5:	83 e3 3f             	and    ebx,0x3f
c0003da8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003db0:	4b                   	dec    ebx
c0003db1:	6b db 0d             	imul   ebx,ebx,0xd
c0003db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003db8:	0f b6 80 c0 24 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddb40]
c0003dbf:	01 f8                	add    eax,edi
c0003dc1:	e8 b9 db ff ff       	call   c000197f <ld_word>
c0003dc6:	66 85 ed             	test   bp,bp
c0003dc9:	89 c6                	mov    esi,eax
c0003dcb:	74 3c                	je     c0003e09 <cmp_lfn+0x8c>
c0003dcd:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003dd3:	77 c2                	ja     c0003d97 <cmp_lfn+0x1a>
c0003dd5:	83 ec 0c             	sub    esp,0xc
c0003dd8:	0f b7 c0             	movzx  eax,ax
c0003ddb:	50                   	push   eax
c0003ddc:	e8 43 47 00 00       	call   c0008524 <ff_wtoupper>
c0003de1:	89 c5                	mov    ebp,eax
c0003de3:	8d 43 01             	lea    eax,[ebx+0x1]
c0003de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003dea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dee:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003df2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003df5:	e8 2a 47 00 00       	call   c0008524 <ff_wtoupper>
c0003dfa:	83 c4 10             	add    esp,0x10
c0003dfd:	39 c5                	cmp    ebp,eax
c0003dff:	75 96                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e01:	89 f5                	mov    ebp,esi
c0003e03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e07:	eb 04                	jmp    c0003e0d <cmp_lfn+0x90>
c0003e09:	66 46                	inc    si
c0003e0b:	75 8a                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e0d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e11:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e16:	75 9c                	jne    c0003db4 <cmp_lfn+0x37>
c0003e18:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e1b:	74 16                	je     c0003e33 <cmp_lfn+0xb6>
c0003e1d:	66 85 ed             	test   bp,bp
c0003e20:	74 11                	je     c0003e33 <cmp_lfn+0xb6>
c0003e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e26:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e2b:	0f 94 c0             	sete   al
c0003e2e:	0f b6 c0             	movzx  eax,al
c0003e31:	eb 05                	jmp    c0003e38 <cmp_lfn+0xbb>
c0003e33:	b8 01 00 00 00       	mov    eax,0x1
c0003e38:	83 c4 1c             	add    esp,0x1c
c0003e3b:	5b                   	pop    ebx
c0003e3c:	5e                   	pop    esi
c0003e3d:	5f                   	pop    edi
c0003e3e:	5d                   	pop    ebp
c0003e3f:	c3                   	ret    

c0003e40 <dir_find>:
c0003e40:	55                   	push   ebp
c0003e41:	31 d2                	xor    edx,edx
c0003e43:	57                   	push   edi
c0003e44:	56                   	push   esi
c0003e45:	53                   	push   ebx
c0003e46:	89 c3                	mov    ebx,eax
c0003e48:	83 ec 1c             	sub    esp,0x1c
c0003e4b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e4d:	e8 89 f0 ff ff       	call   c0002edb <dir_sdi>
c0003e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e55:	85 c0                	test   eax,eax
c0003e57:	0f 85 9e 01 00 00    	jne    c0003ffb <dir_find+0x1bb>
c0003e5d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e60:	0f 85 8d 00 00 00    	jne    c0003ef3 <dir_find+0xb3>
c0003e66:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e69:	e8 30 fe ff ff       	call   c0003c9e <xname_sum>
c0003e6e:	89 c7                	mov    edi,eax
c0003e70:	31 d2                	xor    edx,edx
c0003e72:	89 d8                	mov    eax,ebx
c0003e74:	e8 72 f8 ff ff       	call   c00036eb <dir_read>
c0003e79:	85 c0                	test   eax,eax
c0003e7b:	0f 85 5e 01 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003e81:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e84:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e87:	e8 f3 da ff ff       	call   c000197f <ld_word>
c0003e8c:	66 39 f8             	cmp    ax,di
c0003e8f:	75 df                	jne    c0003e70 <dir_find+0x30>
c0003e91:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003e94:	31 ed                	xor    ebp,ebp
c0003e96:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003e9a:	ba 40 00 00 00       	mov    edx,0x40
c0003e9f:	89 e9                	mov    ecx,ebp
c0003ea1:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003ea5:	0f 84 42 01 00 00    	je     c0003fed <dir_find+0x1ad>
c0003eab:	f6 c2 1f             	test   dl,0x1f
c0003eae:	75 03                	jne    c0003eb3 <dir_find+0x73>
c0003eb0:	83 c2 02             	add    edx,0x2
c0003eb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003eb7:	89 d0                	mov    eax,edx
c0003eb9:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ebc:	e8 be da ff ff       	call   c000197f <ld_word>
c0003ec1:	83 ec 0c             	sub    esp,0xc
c0003ec4:	0f b7 c0             	movzx  eax,ax
c0003ec7:	50                   	push   eax
c0003ec8:	e8 57 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ed1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ed4:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0003edb:	e8 44 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ee0:	83 c4 10             	add    esp,0x10
c0003ee3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ee7:	75 87                	jne    c0003e70 <dir_find+0x30>
c0003ee9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003eed:	45                   	inc    ebp
c0003eee:	83 c2 02             	add    edx,0x2
c0003ef1:	eb ac                	jmp    c0003e9f <dir_find+0x5f>
c0003ef3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003efa:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003eff:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f04:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f07:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f0a:	89 f0                	mov    eax,esi
c0003f0c:	e8 4c e2 ff ff       	call   c000215d <move_window>
c0003f11:	85 c0                	test   eax,eax
c0003f13:	0f 85 c6 00 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003f19:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f1c:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f1f:	84 c9                	test   cl,cl
c0003f21:	0f 84 bd 00 00 00    	je     c0003fe4 <dir_find+0x1a4>
c0003f27:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f2a:	88 d0                	mov    al,dl
c0003f2c:	83 e0 3f             	and    eax,0x3f
c0003f2f:	80 f9 e5             	cmp    cl,0xe5
c0003f32:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f35:	0f 84 87 00 00 00    	je     c0003fc2 <dir_find+0x182>
c0003f3b:	80 e2 08             	and    dl,0x8
c0003f3e:	74 06                	je     c0003f46 <dir_find+0x106>
c0003f40:	3c 0f                	cmp    al,0xf
c0003f42:	75 7e                	jne    c0003fc2 <dir_find+0x182>
c0003f44:	eb 04                	jmp    c0003f4a <dir_find+0x10a>
c0003f46:	3c 0f                	cmp    al,0xf
c0003f48:	75 4c                	jne    c0003f96 <dir_find+0x156>
c0003f4a:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f4e:	75 7e                	jne    c0003fce <dir_find+0x18e>
c0003f50:	f6 c1 40             	test   cl,0x40
c0003f53:	74 12                	je     c0003f67 <dir_find+0x127>
c0003f55:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f58:	83 e1 bf             	and    ecx,0xffffffbf
c0003f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f5f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f62:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f65:	eb 06                	jmp    c0003f6d <dir_find+0x12d>
c0003f67:	89 f8                	mov    eax,edi
c0003f69:	38 c8                	cmp    al,cl
c0003f6b:	75 5c                	jne    c0003fc9 <dir_find+0x189>
c0003f6d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f71:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f76:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f79:	75 53                	jne    c0003fce <dir_find+0x18e>
c0003f7b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f7f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f82:	89 ea                	mov    edx,ebp
c0003f84:	e8 f4 fd ff ff       	call   c0003d7d <cmp_lfn>
c0003f89:	85 c0                	test   eax,eax
c0003f8b:	74 41                	je     c0003fce <dir_find+0x18e>
c0003f8d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003f91:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003f94:	eb 38                	jmp    c0003fce <dir_find+0x18e>
c0003f96:	89 f8                	mov    eax,edi
c0003f98:	84 c0                	test   al,al
c0003f9a:	75 0d                	jne    c0003fa9 <dir_find+0x169>
c0003f9c:	89 e8                	mov    eax,ebp
c0003f9e:	e8 98 de ff ff       	call   c0001e3b <sum_sfn>
c0003fa3:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fa7:	74 52                	je     c0003ffb <dir_find+0x1bb>
c0003fa9:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fad:	75 13                	jne    c0003fc2 <dir_find+0x182>
c0003faf:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fb2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fb7:	89 e8                	mov    eax,ebp
c0003fb9:	e8 60 da ff ff       	call   c0001a1e <mem_cmp>
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	74 39                	je     c0003ffb <dir_find+0x1bb>
c0003fc2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fce:	31 d2                	xor    edx,edx
c0003fd0:	89 d8                	mov    eax,ebx
c0003fd2:	e8 5c f4 ff ff       	call   c0003433 <dir_next>
c0003fd7:	85 c0                	test   eax,eax
c0003fd9:	0f 84 25 ff ff ff    	je     c0003f04 <dir_find+0xc4>
c0003fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe2:	eb 17                	jmp    c0003ffb <dir_find+0x1bb>
c0003fe4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003feb:	eb 0e                	jmp    c0003ffb <dir_find+0x1bb>
c0003fed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ff0:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0003ff5:	0f 85 75 fe ff ff    	jne    c0003e70 <dir_find+0x30>
c0003ffb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003ffe:	83 c4 1c             	add    esp,0x1c
c0004001:	5b                   	pop    ebx
c0004002:	5e                   	pop    esi
c0004003:	5f                   	pop    edi
c0004004:	5d                   	pop    ebp
c0004005:	c3                   	ret    

c0004006 <dir_register>:
c0004006:	55                   	push   ebp
c0004007:	57                   	push   edi
c0004008:	56                   	push   esi
c0004009:	be 06 00 00 00       	mov    esi,0x6
c000400e:	53                   	push   ebx
c000400f:	83 ec 6c             	sub    esp,0x6c
c0004012:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004016:	0f 85 62 02 00 00    	jne    c000427e <dir_register+0x278>
c000401c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000401e:	31 ff                	xor    edi,edi
c0004020:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004023:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004028:	74 03                	je     c000402d <dir_register+0x27>
c000402a:	47                   	inc    edi
c000402b:	eb f6                	jmp    c0004023 <dir_register+0x1d>
c000402d:	89 c3                	mov    ebx,eax
c000402f:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004033:	0f 85 e1 00 00 00    	jne    c000411a <dir_register+0x114>
c0004039:	83 c7 0e             	add    edi,0xe
c000403c:	b9 0f 00 00 00       	mov    ecx,0xf
c0004041:	89 f8                	mov    eax,edi
c0004043:	31 d2                	xor    edx,edx
c0004045:	f7 f1                	div    ecx
c0004047:	8d 50 02             	lea    edx,[eax+0x2]
c000404a:	89 c7                	mov    edi,eax
c000404c:	89 d8                	mov    eax,ebx
c000404e:	e8 12 f8 ff ff       	call   c0003865 <dir_alloc>
c0004053:	89 c6                	mov    esi,eax
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 21 02 00 00    	jne    c000427e <dir_register+0x278>
c000405d:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004063:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004066:	c1 e7 05             	shl    edi,0x5
c0004069:	29 f8                	sub    eax,edi
c000406b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000406e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004071:	a8 04                	test   al,0x4
c0004073:	0f 84 91 00 00 00    	je     c000410a <dir_register+0x104>
c0004079:	83 e0 fb             	and    eax,0xfffffffb
c000407c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000407f:	89 d8                	mov    eax,ebx
c0004081:	e8 25 ec ff ff       	call   c0002cab <fill_first_frag>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 85 ee 01 00 00    	jne    c000427c <dir_register+0x276>
c000408e:	83 c9 ff             	or     ecx,0xffffffff
c0004091:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004094:	89 d8                	mov    eax,ebx
c0004096:	e8 db eb ff ff       	call   c0002c76 <fill_last_frag>
c000409b:	85 c0                	test   eax,eax
c000409d:	0f 85 d9 01 00 00    	jne    c000427c <dir_register+0x276>
c00040a3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040a7:	74 61                	je     c000410a <dir_register+0x104>
c00040a9:	89 da                	mov    edx,ebx
c00040ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040af:	e8 ea f5 ff ff       	call   c000369e <load_obj_xdir>
c00040b4:	85 c0                	test   eax,eax
c00040b6:	0f 85 c0 01 00 00    	jne    c000427c <dir_register+0x276>
c00040bc:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040c0:	31 c9                	xor    ecx,ecx
c00040c2:	c1 e2 09             	shl    edx,0x9
c00040c5:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040c8:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040cb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040ce:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040d4:	83 c0 38             	add    eax,0x38
c00040d7:	e8 1c d9 ff ff       	call   c00019f8 <st_qword>
c00040dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040e2:	83 c0 28             	add    eax,0x28
c00040e5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040e8:	e8 0b d9 ff ff       	call   c00019f8 <st_qword>
c00040ed:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00040f3:	83 c8 01             	or     eax,0x1
c00040f6:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00040f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040fd:	e8 db f7 ff ff       	call   c00038dd <store_xdir>
c0004102:	85 c0                	test   eax,eax
c0004104:	0f 85 72 01 00 00    	jne    c000427c <dir_register+0x276>
c000410a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000410d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004110:	e8 c1 fb ff ff       	call   c0003cd6 <create_xdir>
c0004115:	e9 64 01 00 00       	jmp    c000427e <dir_register+0x278>
c000411a:	8d 40 3c             	lea    eax,[eax+0x3c]
c000411d:	b9 0c 00 00 00       	mov    ecx,0xc
c0004122:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004126:	89 c2                	mov    edx,eax
c0004128:	8d 44 24 14          	lea    eax,[esp+0x14]
c000412c:	e8 cd d8 ff ff       	call   c00019fe <mem_cpy>
c0004131:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004136:	74 58                	je     c0004190 <dir_register+0x18a>
c0004138:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000413c:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004144:	83 ec 0c             	sub    esp,0xc
c0004147:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000414a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000414e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004152:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004156:	e8 24 dc ff ff       	call   c0001d7f <gen_numname>
c000415b:	89 d8                	mov    eax,ebx
c000415d:	e8 de fc ff ff       	call   c0003e40 <dir_find>
c0004162:	83 c4 10             	add    esp,0x10
c0004165:	89 c6                	mov    esi,eax
c0004167:	85 c0                	test   eax,eax
c0004169:	75 15                	jne    c0004180 <dir_register+0x17a>
c000416b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000416f:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004174:	75 ce                	jne    c0004144 <dir_register+0x13e>
c0004176:	be 07 00 00 00       	mov    esi,0x7
c000417b:	e9 fe 00 00 00       	jmp    c000427e <dir_register+0x278>
c0004180:	83 f8 04             	cmp    eax,0x4
c0004183:	0f 85 f5 00 00 00    	jne    c000427e <dir_register+0x278>
c0004189:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000418d:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004190:	b9 01 00 00 00       	mov    ecx,0x1
c0004195:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000419a:	74 0f                	je     c00041ab <dir_register+0x1a5>
c000419c:	b9 0d 00 00 00       	mov    ecx,0xd
c00041a1:	8d 47 0c             	lea    eax,[edi+0xc]
c00041a4:	31 d2                	xor    edx,edx
c00041a6:	f7 f1                	div    ecx
c00041a8:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ab:	89 ca                	mov    edx,ecx
c00041ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b1:	89 d8                	mov    eax,ebx
c00041b3:	e8 ad f6 ff ff       	call   c0003865 <dir_alloc>
c00041b8:	89 c6                	mov    esi,eax
c00041ba:	85 c0                	test   eax,eax
c00041bc:	0f 85 bc 00 00 00    	jne    c000427e <dir_register+0x278>
c00041c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041c6:	49                   	dec    ecx
c00041c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041cb:	74 6a                	je     c0004237 <dir_register+0x231>
c00041cd:	89 c8                	mov    eax,ecx
c00041cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041d2:	c1 e0 05             	shl    eax,0x5
c00041d5:	29 c2                	sub    edx,eax
c00041d7:	89 d8                	mov    eax,ebx
c00041d9:	e8 fd ec ff ff       	call   c0002edb <dir_sdi>
c00041de:	89 c6                	mov    esi,eax
c00041e0:	85 c0                	test   eax,eax
c00041e2:	0f 85 96 00 00 00    	jne    c000427e <dir_register+0x278>
c00041e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041ec:	e8 4a dc ff ff       	call   c0001e3b <sum_sfn>
c00041f1:	0f b6 f8             	movzx  edi,al
c00041f4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041fa:	89 e8                	mov    eax,ebp
c00041fc:	e8 5c df ff ff       	call   c000215d <move_window>
c0004201:	89 c6                	mov    esi,eax
c0004203:	85 c0                	test   eax,eax
c0004205:	75 77                	jne    c000427e <dir_register+0x278>
c0004207:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000420c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004215:	57                   	push   edi
c0004216:	e8 e0 da ff ff       	call   c0001cfb <put_lfn>
c000421b:	31 d2                	xor    edx,edx
c000421d:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004221:	89 d8                	mov    eax,ebx
c0004223:	e8 0b f2 ff ff       	call   c0003433 <dir_next>
c0004228:	83 c4 10             	add    esp,0x10
c000422b:	89 c6                	mov    esi,eax
c000422d:	85 c0                	test   eax,eax
c000422f:	75 4d                	jne    c000427e <dir_register+0x278>
c0004231:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004235:	75 bd                	jne    c00041f4 <dir_register+0x1ee>
c0004237:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000423a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000423d:	89 e8                	mov    eax,ebp
c000423f:	e8 19 df ff ff       	call   c000215d <move_window>
c0004244:	89 c6                	mov    esi,eax
c0004246:	85 c0                	test   eax,eax
c0004248:	75 34                	jne    c000427e <dir_register+0x278>
c000424a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000424d:	b9 20 00 00 00       	mov    ecx,0x20
c0004252:	31 d2                	xor    edx,edx
c0004254:	e8 ba d7 ff ff       	call   c0001a13 <mem_set>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004260:	b9 0b 00 00 00       	mov    ecx,0xb
c0004265:	e8 94 d7 ff ff       	call   c00019fe <mem_cpy>
c000426a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000426d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004270:	83 e0 18             	and    eax,0x18
c0004273:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004276:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000427a:	eb 02                	jmp    c000427e <dir_register+0x278>
c000427c:	89 c6                	mov    esi,eax
c000427e:	83 c4 6c             	add    esp,0x6c
c0004281:	89 f0                	mov    eax,esi
c0004283:	5b                   	pop    ebx
c0004284:	5e                   	pop    esi
c0004285:	5f                   	pop    edi
c0004286:	5d                   	pop    ebp
c0004287:	c3                   	ret    

c0004288 <sync_fs>:
c0004288:	56                   	push   esi
c0004289:	53                   	push   ebx
c000428a:	53                   	push   ebx
c000428b:	89 c3                	mov    ebx,eax
c000428d:	e8 37 de ff ff       	call   c00020c9 <sync_window>
c0004292:	85 c0                	test   eax,eax
c0004294:	0f 85 b1 00 00 00    	jne    c000434b <sync_fs+0xc3>
c000429a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000429d:	0f 85 8e 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042a3:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042a7:	0f 85 84 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042ad:	b9 00 02 00 00       	mov    ecx,0x200
c00042b2:	8d 73 54             	lea    esi,[ebx+0x54]
c00042b5:	31 d2                	xor    edx,edx
c00042b7:	89 f0                	mov    eax,esi
c00042b9:	e8 55 d7 ff ff       	call   c0001a13 <mem_set>
c00042be:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042c4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042c9:	e8 23 d7 ff ff       	call   c00019f1 <st_word>
c00042ce:	ba 52 52 61 41       	mov    edx,0x41615252
c00042d3:	89 f0                	mov    eax,esi
c00042d5:	e8 1b d7 ff ff       	call   c00019f5 <st_dword>
c00042da:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042e0:	ba 72 72 41 61       	mov    edx,0x61417272
c00042e5:	e8 0b d7 ff ff       	call   c00019f5 <st_dword>
c00042ea:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042ed:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00042f3:	e8 fd d6 ff ff       	call   c00019f5 <st_dword>
c00042f8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00042fb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004301:	e8 ef d6 ff ff       	call   c00019f5 <st_dword>
c0004306:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004309:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000430c:	83 c0 01             	add    eax,0x1
c000430f:	83 d2 00             	adc    edx,0x0
c0004312:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004315:	83 ec 0c             	sub    esp,0xc
c0004318:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000431b:	6a 01                	push   0x1
c000431d:	52                   	push   edx
c000431e:	50                   	push   eax
c000431f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004323:	56                   	push   esi
c0004324:	50                   	push   eax
c0004325:	e8 20 d6 ff ff       	call   c000194a <disk_write>
c000432a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000432e:	83 c4 20             	add    esp,0x20
c0004331:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004335:	51                   	push   ecx
c0004336:	6a 00                	push   0x0
c0004338:	6a 00                	push   0x0
c000433a:	50                   	push   eax
c000433b:	e8 20 d6 ff ff       	call   c0001960 <disk_ioctl>
c0004340:	83 c4 10             	add    esp,0x10
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 95 c0             	setne  al
c0004348:	0f b6 c0             	movzx  eax,al
c000434b:	5a                   	pop    edx
c000434c:	5b                   	pop    ebx
c000434d:	5e                   	pop    esi
c000434e:	c3                   	ret    

c000434f <create_partition>:
c000434f:	55                   	push   ebp
c0004350:	0f b6 c0             	movzx  eax,al
c0004353:	57                   	push   edi
c0004354:	56                   	push   esi
c0004355:	53                   	push   ebx
c0004356:	83 ec 60             	sub    esp,0x60
c0004359:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000435d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004361:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004365:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004369:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000436d:	50                   	push   eax
c000436e:	6a 01                	push   0x1
c0004370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004374:	e8 e7 d5 ff ff       	call   c0001960 <disk_ioctl>
c0004379:	83 c4 10             	add    esp,0x10
c000437c:	85 c0                	test   eax,eax
c000437e:	74 0a                	je     c000438a <create_partition+0x3b>
c0004380:	b8 01 00 00 00       	mov    eax,0x1
c0004385:	e9 67 05 00 00       	jmp    c00048f1 <create_partition+0x5a2>
c000438a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000438e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004392:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004396:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000439a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000439f:	0f 86 ed 03 00 00    	jbe    c0004792 <create_partition+0x443>
c00043a5:	83 c0 df             	add    eax,0xffffffdf
c00043a8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043b0:	83 d2 ff             	adc    edx,0xffffffff
c00043b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043c3:	83 c0 bd             	add    eax,0xffffffbd
c00043c6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043cd:	83 d2 ff             	adc    edx,0xffffffff
c00043d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043d8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043e0:	be 22 00 00 00       	mov    esi,0x22
c00043e5:	31 ff                	xor    edi,edi
c00043e7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043ef:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00043f7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00043ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004403:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004409:	75 0e                	jne    c0004419 <create_partition+0xca>
c000440b:	b9 00 02 00 00       	mov    ecx,0x200
c0004410:	31 d2                	xor    edx,edx
c0004412:	89 d8                	mov    eax,ebx
c0004414:	e8 fa d5 ff ff       	call   c0001a13 <mem_set>
c0004419:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000441d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004425:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004428:	0f 84 23 01 00 00    	je     c0004551 <create_partition+0x202>
c000442e:	89 f0                	mov    eax,esi
c0004430:	89 fa                	mov    edx,edi
c0004432:	05 ff 07 00 00       	add    eax,0x7ff
c0004437:	83 d2 00             	adc    edx,0x0
c000443a:	89 c1                	mov    ecx,eax
c000443c:	89 d7                	mov    edi,edx
c000443e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004444:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004448:	89 ce                	mov    esi,ecx
c000444a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000444e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004452:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004456:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004459:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000445d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004460:	b8 64 00 00 00       	mov    eax,0x64
c0004465:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004468:	b8 00 00 00 00       	mov    eax,0x0
c000446d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004471:	72 41                	jb     c00044b4 <create_partition+0x165>
c0004473:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000447b:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000447f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004484:	01 c1                	add    ecx,eax
c0004486:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000448a:	f7 24 24             	mul    DWORD PTR [esp]
c000448d:	6a 00                	push   0x0
c000448f:	01 ca                	add    edx,ecx
c0004491:	6a 64                	push   0x64
c0004493:	52                   	push   edx
c0004494:	50                   	push   eax
c0004495:	e8 16 d1 01 00       	call   c00215b0 <__udivdi3>
c000449a:	83 c4 10             	add    esp,0x10
c000449d:	05 ff 07 00 00       	add    eax,0x7ff
c00044a2:	83 d2 00             	adc    edx,0x0
c00044a5:	89 c1                	mov    ecx,eax
c00044a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ab:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044b1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044bb:	01 f0                	add    eax,esi
c00044bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044c1:	11 fa                	adc    edx,edi
c00044c3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044c7:	19 d1                	sbb    ecx,edx
c00044c9:	73 2e                	jae    c00044f9 <create_partition+0x1aa>
c00044cb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044cf:	89 f8                	mov    eax,edi
c00044d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044d8:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044dc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044e4:	73 6b                	jae    c0004551 <create_partition+0x202>
c00044e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044ee:	29 f0                	sub    eax,esi
c00044f0:	19 fa                	sbb    edx,edi
c00044f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fd:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004500:	74 4f                	je     c0004551 <create_partition+0x202>
c0004502:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004505:	b9 10 00 00 00       	mov    ecx,0x10
c000450a:	ba d0 24 02 c0       	mov    edx,0xc00224d0
c000450f:	e8 ea d4 ff ff       	call   c00019fe <mem_cpy>
c0004514:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004518:	b9 10 00 00 00       	mov    ecx,0x10
c000451d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004521:	e8 2c db ff ff       	call   c0002052 <make_rand>
c0004526:	89 f2                	mov    edx,esi
c0004528:	89 f9                	mov    ecx,edi
c000452a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000452e:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004532:	e8 c1 d4 ff ff       	call   c00019f8 <st_qword>
c0004537:	03 34 24             	add    esi,DWORD PTR [esp]
c000453a:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000453e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004542:	89 f2                	mov    edx,esi
c0004544:	89 f9                	mov    ecx,edi
c0004546:	83 c2 ff             	add    edx,0xffffffff
c0004549:	83 d1 ff             	adc    ecx,0xffffffff
c000454c:	e8 a7 d4 ff ff       	call   c00019f8 <st_qword>
c0004551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004555:	83 e8 80             	sub    eax,0xffffff80
c0004558:	89 c5                	mov    ebp,eax
c000455a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000455e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004564:	75 6b                	jne    c00045d1 <create_partition+0x282>
c0004566:	45                   	inc    ebp
c0004567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000456b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004570:	e8 39 da ff ff       	call   c0001fae <crc32>
c0004575:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000457b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000457f:	75 e5                	jne    c0004566 <create_partition+0x217>
c0004581:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004585:	31 d2                	xor    edx,edx
c0004587:	83 ec 0c             	sub    esp,0xc
c000458a:	c1 ed 09             	shr    ebp,0x9
c000458d:	6a 01                	push   0x1
c000458f:	8d 45 02             	lea    eax,[ebp+0x2]
c0004592:	52                   	push   edx
c0004593:	50                   	push   eax
c0004594:	53                   	push   ebx
c0004595:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004599:	e8 ac d3 ff ff       	call   c000194a <disk_write>
c000459e:	83 c4 20             	add    esp,0x20
c00045a1:	85 c0                	test   eax,eax
c00045a3:	0f 85 d7 fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045a9:	83 ec 0c             	sub    esp,0xc
c00045ac:	31 d2                	xor    edx,edx
c00045ae:	6a 01                	push   0x1
c00045b0:	89 e8                	mov    eax,ebp
c00045b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045b6:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045ba:	52                   	push   edx
c00045bb:	50                   	push   eax
c00045bc:	53                   	push   ebx
c00045bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045c1:	e8 84 d3 ff ff       	call   c000194a <disk_write>
c00045c6:	83 c4 20             	add    esp,0x20
c00045c9:	85 c0                	test   eax,eax
c00045cb:	0f 85 af fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045d9:	3d 00 40 00 00       	cmp    eax,0x4000
c00045de:	74 0d                	je     c00045ed <create_partition+0x29e>
c00045e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e8:	e9 12 fe ff ff       	jmp    c00043ff <create_partition+0xb0>
c00045ed:	31 d2                	xor    edx,edx
c00045ef:	b9 00 02 00 00       	mov    ecx,0x200
c00045f4:	89 d8                	mov    eax,ebx
c00045f6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00045f9:	e8 15 d4 ff ff       	call   c0001a13 <mem_set>
c00045fe:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004601:	b9 10 00 00 00       	mov    ecx,0x10
c0004606:	ba c0 23 02 c0       	mov    edx,0xc00223c0
c000460b:	89 d8                	mov    eax,ebx
c000460d:	e8 ec d3 ff ff       	call   c00019fe <mem_cpy>
c0004612:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004616:	8d 43 58             	lea    eax,[ebx+0x58]
c0004619:	f7 d2                	not    edx
c000461b:	e8 d5 d3 ff ff       	call   c00019f5 <st_dword>
c0004620:	8d 43 18             	lea    eax,[ebx+0x18]
c0004623:	31 c9                	xor    ecx,ecx
c0004625:	89 04 24             	mov    DWORD PTR [esp],eax
c0004628:	ba 01 00 00 00       	mov    edx,0x1
c000462d:	e8 c6 d3 ff ff       	call   c00019f8 <st_qword>
c0004632:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004636:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000463a:	83 c2 ff             	add    edx,0xffffffff
c000463d:	89 e8                	mov    eax,ebp
c000463f:	83 d1 ff             	adc    ecx,0xffffffff
c0004642:	e8 b1 d3 ff ff       	call   c00019f8 <st_qword>
c0004647:	31 c9                	xor    ecx,ecx
c0004649:	8d 43 28             	lea    eax,[ebx+0x28]
c000464c:	ba 22 00 00 00       	mov    edx,0x22
c0004651:	e8 a2 d3 ff ff       	call   c00019f8 <st_qword>
c0004656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000465a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000465e:	83 c2 de             	add    edx,0xffffffde
c0004661:	8d 43 30             	lea    eax,[ebx+0x30]
c0004664:	83 d1 ff             	adc    ecx,0xffffffff
c0004667:	31 f6                	xor    esi,esi
c0004669:	e8 8a d3 ff ff       	call   c00019f8 <st_qword>
c000466e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004671:	ba 80 00 00 00       	mov    edx,0x80
c0004676:	e8 7a d3 ff ff       	call   c00019f5 <st_dword>
c000467b:	8d 43 50             	lea    eax,[ebx+0x50]
c000467e:	ba 80 00 00 00       	mov    edx,0x80
c0004683:	e8 6d d3 ff ff       	call   c00019f5 <st_dword>
c0004688:	ba 02 00 00 00       	mov    edx,0x2
c000468d:	89 f8                	mov    eax,edi
c000468f:	e8 61 d3 ff ff       	call   c00019f5 <st_dword>
c0004694:	8d 53 38             	lea    edx,[ebx+0x38]
c0004697:	b9 10 00 00 00       	mov    ecx,0x10
c000469c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046a0:	e8 ad d9 ff ff       	call   c0002052 <make_rand>
c00046a5:	83 c8 ff             	or     eax,0xffffffff
c00046a8:	46                   	inc    esi
c00046a9:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046ae:	e8 fb d8 ff ff       	call   c0001fae <crc32>
c00046b3:	83 fe 5c             	cmp    esi,0x5c
c00046b6:	75 f0                	jne    c00046a8 <create_partition+0x359>
c00046b8:	f7 d0                	not    eax
c00046ba:	8d 73 10             	lea    esi,[ebx+0x10]
c00046bd:	89 c2                	mov    edx,eax
c00046bf:	89 f0                	mov    eax,esi
c00046c1:	e8 2f d3 ff ff       	call   c00019f5 <st_dword>
c00046c6:	83 ec 0c             	sub    esp,0xc
c00046c9:	6a 01                	push   0x1
c00046cb:	6a 00                	push   0x0
c00046cd:	6a 01                	push   0x1
c00046cf:	53                   	push   ebx
c00046d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046d4:	e8 71 d2 ff ff       	call   c000194a <disk_write>
c00046d9:	83 c4 20             	add    esp,0x20
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 9c fc ff ff    	jne    c0004380 <create_partition+0x31>
c00046e4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046e8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046ec:	83 c2 ff             	add    edx,0xffffffff
c00046ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046f2:	83 d1 ff             	adc    ecx,0xffffffff
c00046f5:	e8 fe d2 ff ff       	call   c00019f8 <st_qword>
c00046fa:	ba 01 00 00 00       	mov    edx,0x1
c00046ff:	31 c9                	xor    ecx,ecx
c0004701:	89 e8                	mov    eax,ebp
c0004703:	e8 f0 d2 ff ff       	call   c00019f8 <st_qword>
c0004708:	89 f8                	mov    eax,edi
c000470a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000470e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004712:	31 ff                	xor    edi,edi
c0004714:	e8 df d2 ff ff       	call   c00019f8 <st_qword>
c0004719:	89 f0                	mov    eax,esi
c000471b:	31 d2                	xor    edx,edx
c000471d:	e8 d3 d2 ff ff       	call   c00019f5 <st_dword>
c0004722:	83 c8 ff             	or     eax,0xffffffff
c0004725:	47                   	inc    edi
c0004726:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000472b:	e8 7e d8 ff ff       	call   c0001fae <crc32>
c0004730:	83 ff 5c             	cmp    edi,0x5c
c0004733:	75 f0                	jne    c0004725 <create_partition+0x3d6>
c0004735:	f7 d0                	not    eax
c0004737:	89 c2                	mov    edx,eax
c0004739:	89 f0                	mov    eax,esi
c000473b:	e8 b5 d2 ff ff       	call   c00019f5 <st_dword>
c0004740:	83 ec 0c             	sub    esp,0xc
c0004743:	6a 01                	push   0x1
c0004745:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004749:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000474d:	83 c0 ff             	add    eax,0xffffffff
c0004750:	83 d2 ff             	adc    edx,0xffffffff
c0004753:	52                   	push   edx
c0004754:	50                   	push   eax
c0004755:	53                   	push   ebx
c0004756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000475a:	e8 eb d1 ff ff       	call   c000194a <disk_write>
c000475f:	83 c4 20             	add    esp,0x20
c0004762:	85 c0                	test   eax,eax
c0004764:	0f 85 16 fc ff ff    	jne    c0004380 <create_partition+0x31>
c000476a:	31 d2                	xor    edx,edx
c000476c:	89 d8                	mov    eax,ebx
c000476e:	b9 00 02 00 00       	mov    ecx,0x200
c0004773:	e8 9b d2 ff ff       	call   c0001a13 <mem_set>
c0004778:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000477e:	b9 10 00 00 00       	mov    ecx,0x10
c0004783:	ba d0 23 02 c0       	mov    edx,0xc00223d0
c0004788:	e8 71 d2 ff ff       	call   c00019fe <mem_cpy>
c000478d:	e9 21 01 00 00       	jmp    c00048b3 <create_partition+0x564>
c0004792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004796:	b9 05 00 00 00       	mov    ecx,0x5
c000479b:	89 04 24             	mov    DWORD PTR [esp],eax
c000479e:	bf 08 00 00 00       	mov    edi,0x8
c00047a3:	89 f8                	mov    eax,edi
c00047a5:	31 d2                	xor    edx,edx
c00047a7:	0f b6 f0             	movzx  esi,al
c00047aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047ad:	f7 f6                	div    esi
c00047af:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047b4:	76 0a                	jbe    c00047c0 <create_partition+0x471>
c00047b6:	d1 e7                	shl    edi,1
c00047b8:	49                   	dec    ecx
c00047b9:	75 e8                	jne    c00047a3 <create_partition+0x454>
c00047bb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047c0:	b9 00 02 00 00       	mov    ecx,0x200
c00047c5:	31 d2                	xor    edx,edx
c00047c7:	89 d8                	mov    eax,ebx
c00047c9:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047cf:	e8 3f d2 ff ff       	call   c0001a13 <mem_set>
c00047d4:	b9 64 00 00 00       	mov    ecx,0x64
c00047d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047dc:	31 d2                	xor    edx,edx
c00047de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047e6:	f7 f1                	div    ecx
c00047e8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047f1:	89 f8                	mov    eax,edi
c00047f3:	0f b6 c0             	movzx  eax,al
c00047f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00047fa:	e9 80 00 00 00       	jmp    c000487f <create_partition+0x530>
c00047ff:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004802:	29 cf                	sub    edi,ecx
c0004804:	89 ca                	mov    edx,ecx
c0004806:	89 f0                	mov    eax,esi
c0004808:	bd 3f 00 00 00       	mov    ebp,0x3f
c000480d:	e8 e3 d1 ff ff       	call   c00019f5 <st_dword>
c0004812:	8d 46 04             	lea    eax,[esi+0x4]
c0004815:	89 fa                	mov    edx,edi
c0004817:	83 c6 10             	add    esi,0x10
c000481a:	e8 d6 d1 ff ff       	call   c00019f5 <st_dword>
c000481f:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004823:	31 d2                	xor    edx,edx
c0004825:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004828:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000482c:	89 c8                	mov    eax,ecx
c000482e:	01 f9                	add    ecx,edi
c0004830:	f7 f5                	div    ebp
c0004832:	89 d5                	mov    ebp,edx
c0004834:	31 d2                	xor    edx,edx
c0004836:	45                   	inc    ebp
c0004837:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000483b:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000483e:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004841:	89 c2                	mov    edx,eax
c0004843:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004846:	c1 ea 02             	shr    edx,0x2
c0004849:	83 e2 c0             	and    edx,0xffffffc0
c000484c:	09 ea                	or     edx,ebp
c000484e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004853:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004856:	31 d2                	xor    edx,edx
c0004858:	f7 f5                	div    ebp
c000485a:	89 d7                	mov    edi,edx
c000485c:	31 d2                	xor    edx,edx
c000485e:	47                   	inc    edi
c000485f:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004863:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004866:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004869:	89 c5                	mov    ebp,eax
c000486b:	c1 ed 02             	shr    ebp,0x2
c000486e:	83 e5 c0             	and    ebp,0xffffffc0
c0004871:	09 ef                	or     edi,ebp
c0004873:	89 fa                	mov    edx,edi
c0004875:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004878:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000487d:	74 34                	je     c00048b3 <create_partition+0x564>
c000487f:	85 c9                	test   ecx,ecx
c0004881:	74 30                	je     c00048b3 <create_partition+0x564>
c0004883:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004886:	76 2b                	jbe    c00048b3 <create_partition+0x564>
c0004888:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000488c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004890:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004893:	83 ff 64             	cmp    edi,0x64
c0004896:	76 4b                	jbe    c00048e3 <create_partition+0x594>
c0004898:	89 f8                	mov    eax,edi
c000489a:	01 c8                	add    eax,ecx
c000489c:	0f 82 5d ff ff ff    	jb     c00047ff <create_partition+0x4b0>
c00048a2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048a5:	0f 87 54 ff ff ff    	ja     c00047ff <create_partition+0x4b0>
c00048ab:	85 ff                	test   edi,edi
c00048ad:	0f 85 51 ff ff ff    	jne    c0004804 <create_partition+0x4b5>
c00048b3:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048b9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048be:	e8 2e d1 ff ff       	call   c00019f1 <st_word>
c00048c3:	83 ec 0c             	sub    esp,0xc
c00048c6:	6a 01                	push   0x1
c00048c8:	6a 00                	push   0x0
c00048ca:	6a 00                	push   0x0
c00048cc:	53                   	push   ebx
c00048cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048d1:	e8 74 d0 ff ff       	call   c000194a <disk_write>
c00048d6:	83 c4 20             	add    esp,0x20
c00048d9:	85 c0                	test   eax,eax
c00048db:	0f 95 c0             	setne  al
c00048de:	0f b6 c0             	movzx  eax,al
c00048e1:	eb 0e                	jmp    c00048f1 <create_partition+0x5a2>
c00048e3:	74 07                	je     c00048ec <create_partition+0x59d>
c00048e5:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048ea:	eb ac                	jmp    c0004898 <create_partition+0x549>
c00048ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ef:	eb a7                	jmp    c0004898 <create_partition+0x549>
c00048f1:	83 c4 5c             	add    esp,0x5c
c00048f4:	5b                   	pop    ebx
c00048f5:	5e                   	pop    esi
c00048f6:	5f                   	pop    edi
c00048f7:	5d                   	pop    ebp
c00048f8:	c3                   	ret    

c00048f9 <get_fileinfo>:
c00048f9:	55                   	push   ebp
c00048fa:	57                   	push   edi
c00048fb:	56                   	push   esi
c00048fc:	53                   	push   ebx
c00048fd:	83 ec 1c             	sub    esp,0x1c
c0004900:	8b 30                	mov    esi,DWORD PTR [eax]
c0004902:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004906:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000490a:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000490d:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004910:	0f 84 dc 01 00 00    	je     c0004af2 <get_fileinfo+0x1f9>
c0004916:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004919:	75 0f                	jne    c000492a <get_fileinfo+0x31>
c000491b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000491e:	83 c4 1c             	add    esp,0x1c
c0004921:	5b                   	pop    ebx
c0004922:	5e                   	pop    esi
c0004923:	5f                   	pop    edi
c0004924:	5d                   	pop    ebp
c0004925:	e9 58 d5 ff ff       	jmp    c0001e82 <get_xfileinfo>
c000492a:	89 d3                	mov    ebx,edx
c000492c:	89 c6                	mov    esi,eax
c000492e:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004932:	74 6a                	je     c000499e <get_fileinfo+0xa5>
c0004934:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000493c:	31 ed                	xor    ebp,ebp
c000493e:	31 ff                	xor    edi,edi
c0004940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004944:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000494b:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000494f:	66 85 d2             	test   dx,dx
c0004952:	74 3e                	je     c0004992 <get_fileinfo+0x99>
c0004954:	66 85 ed             	test   bp,bp
c0004957:	75 0c                	jne    c0004965 <get_fileinfo+0x6c>
c0004959:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000495f:	66 3d ff 07          	cmp    ax,0x7ff
c0004963:	76 22                	jbe    c0004987 <get_fileinfo+0x8e>
c0004965:	b9 ff 00 00 00       	mov    ecx,0xff
c000496a:	89 e8                	mov    eax,ebp
c000496c:	29 f9                	sub    ecx,edi
c000496e:	c1 e0 10             	shl    eax,0x10
c0004971:	09 d0                	or     eax,edx
c0004973:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004977:	e8 a3 d1 ff ff       	call   c0001b1f <put_utf>
c000497c:	84 c0                	test   al,al
c000497e:	74 10                	je     c0004990 <get_fileinfo+0x97>
c0004980:	0f b6 c0             	movzx  eax,al
c0004983:	31 d2                	xor    edx,edx
c0004985:	01 c7                	add    edi,eax
c0004987:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000498c:	89 d5                	mov    ebp,edx
c000498e:	eb b0                	jmp    c0004940 <get_fileinfo+0x47>
c0004990:	31 ff                	xor    edi,edi
c0004992:	66 85 ed             	test   bp,bp
c0004995:	74 02                	je     c0004999 <get_fileinfo+0xa0>
c0004997:	31 ff                	xor    edi,edi
c0004999:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000499e:	31 ff                	xor    edi,edi
c00049a0:	31 c9                	xor    ecx,ecx
c00049a2:	83 f9 0a             	cmp    ecx,0xa
c00049a5:	0f 87 ad 00 00 00    	ja     c0004a58 <get_fileinfo+0x15f>
c00049ab:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049ae:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049b1:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049b5:	66 83 fa 20          	cmp    dx,0x20
c00049b9:	0f 84 92 00 00 00    	je     c0004a51 <get_fileinfo+0x158>
c00049bf:	66 83 fa 05          	cmp    dx,0x5
c00049c3:	75 05                	jne    c00049ca <get_fileinfo+0xd1>
c00049c5:	ba e5 00 00 00       	mov    edx,0xe5
c00049ca:	83 ff 0b             	cmp    edi,0xb
c00049cd:	77 0b                	ja     c00049da <get_fileinfo+0xe1>
c00049cf:	83 fd 09             	cmp    ebp,0x9
c00049d2:	75 06                	jne    c00049da <get_fileinfo+0xe1>
c00049d4:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049d9:	47                   	inc    edi
c00049da:	0f b7 c2             	movzx  eax,dx
c00049dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049e1:	e8 6d d0 ff ff       	call   c0001a53 <dbc_1st>
c00049e6:	85 c0                	test   eax,eax
c00049e8:	74 2f                	je     c0004a19 <get_fileinfo+0x120>
c00049ea:	83 fd 08             	cmp    ebp,0x8
c00049ed:	74 2a                	je     c0004a19 <get_fileinfo+0x120>
c00049ef:	83 fd 0b             	cmp    ebp,0xb
c00049f2:	74 25                	je     c0004a19 <get_fileinfo+0x120>
c00049f4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049f7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00049fb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00049ff:	e8 52 d0 ff ff       	call   c0001a56 <dbc_2nd>
c0004a04:	85 c0                	test   eax,eax
c0004a06:	74 11                	je     c0004a19 <get_fileinfo+0x120>
c0004a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a11:	c1 e2 08             	shl    edx,0x8
c0004a14:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a17:	09 c2                	or     edx,eax
c0004a19:	0f b7 d2             	movzx  edx,dx
c0004a1c:	50                   	push   eax
c0004a1d:	50                   	push   eax
c0004a1e:	68 b5 01 00 00       	push   0x1b5
c0004a23:	52                   	push   edx
c0004a24:	e8 87 3a 00 00       	call   c00084b0 <ff_oem2uni>
c0004a29:	83 c4 10             	add    esp,0x10
c0004a2c:	66 85 c0             	test   ax,ax
c0004a2f:	75 04                	jne    c0004a35 <get_fileinfo+0x13c>
c0004a31:	31 ff                	xor    edi,edi
c0004a33:	eb 23                	jmp    c0004a58 <get_fileinfo+0x15f>
c0004a35:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a3a:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a3e:	29 f9                	sub    ecx,edi
c0004a40:	0f b7 c0             	movzx  eax,ax
c0004a43:	e8 d7 d0 ff ff       	call   c0001b1f <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 e5                	je     c0004a31 <get_fileinfo+0x138>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	01 c7                	add    edi,eax
c0004a51:	89 e9                	mov    ecx,ebp
c0004a53:	e9 4a ff ff ff       	jmp    c00049a2 <get_fileinfo+0xa9>
c0004a58:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a5d:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a61:	75 54                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004a63:	85 ff                	test   edi,edi
c0004a65:	75 0b                	jne    c0004a72 <get_fileinfo+0x179>
c0004a67:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a6b:	ba 01 00 00 00       	mov    edx,0x1
c0004a70:	eb 33                	jmp    c0004aa5 <get_fileinfo+0x1ac>
c0004a72:	b1 08                	mov    cl,0x8
c0004a74:	31 d2                	xor    edx,edx
c0004a76:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a7c:	84 c0                	test   al,al
c0004a7e:	74 25                	je     c0004aa5 <get_fileinfo+0x1ac>
c0004a80:	66 83 f8 2e          	cmp    ax,0x2e
c0004a84:	74 16                	je     c0004a9c <get_fileinfo+0x1a3>
c0004a86:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a89:	66 83 ff 19          	cmp    di,0x19
c0004a8d:	77 0f                	ja     c0004a9e <get_fileinfo+0x1a5>
c0004a8f:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004a92:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004a95:	74 07                	je     c0004a9e <get_fileinfo+0x1a5>
c0004a97:	83 c0 20             	add    eax,0x20
c0004a9a:	eb 02                	jmp    c0004a9e <get_fileinfo+0x1a5>
c0004a9c:	b1 10                	mov    cl,0x10
c0004a9e:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004aa2:	42                   	inc    edx
c0004aa3:	eb d1                	jmp    c0004a76 <get_fileinfo+0x17d>
c0004aa5:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004aaa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aad:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ab1:	75 04                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004ab3:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ab7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aba:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004abd:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	83 c0 1c             	add    eax,0x1c
c0004ac6:	e8 c1 ce ff ff       	call   c000198c <ld_dword>
c0004acb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ad2:	89 03                	mov    DWORD PTR [ebx],eax
c0004ad4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad7:	83 c0 16             	add    eax,0x16
c0004ada:	e8 a0 ce ff ff       	call   c000197f <ld_word>
c0004adf:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 18             	add    eax,0x18
c0004ae9:	e8 91 ce ff ff       	call   c000197f <ld_word>
c0004aee:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	c3                   	ret    

c0004afa <ld_clust.isra.0>:
c0004afa:	56                   	push   esi
c0004afb:	89 c6                	mov    esi,eax
c0004afd:	53                   	push   ebx
c0004afe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b01:	89 d3                	mov    ebx,edx
c0004b03:	e8 77 ce ff ff       	call   c000197f <ld_word>
c0004b08:	0f b7 c8             	movzx  ecx,ax
c0004b0b:	89 f0                	mov    eax,esi
c0004b0d:	3c 03                	cmp    al,0x3
c0004b0f:	75 0d                	jne    c0004b1e <ld_clust.isra.0+0x24>
c0004b11:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b14:	e8 66 ce ff ff       	call   c000197f <ld_word>
c0004b19:	c1 e0 10             	shl    eax,0x10
c0004b1c:	09 c1                	or     ecx,eax
c0004b1e:	89 c8                	mov    eax,ecx
c0004b20:	5b                   	pop    ebx
c0004b21:	5e                   	pop    esi
c0004b22:	c3                   	ret    

c0004b23 <st_clust.isra.1>:
c0004b23:	56                   	push   esi
c0004b24:	89 c6                	mov    esi,eax
c0004b26:	53                   	push   ebx
c0004b27:	89 d3                	mov    ebx,edx
c0004b29:	0f b7 d1             	movzx  edx,cx
c0004b2c:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b2f:	e8 bd ce ff ff       	call   c00019f1 <st_word>
c0004b34:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b37:	75 0f                	jne    c0004b48 <st_clust.isra.1+0x25>
c0004b39:	c1 e9 10             	shr    ecx,0x10
c0004b3c:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b3f:	89 ca                	mov    edx,ecx
c0004b41:	5b                   	pop    ebx
c0004b42:	5e                   	pop    esi
c0004b43:	e9 a9 ce ff ff       	jmp    c00019f1 <st_word>
c0004b48:	5b                   	pop    ebx
c0004b49:	5e                   	pop    esi
c0004b4a:	c3                   	ret    

c0004b4b <init_alloc_info.isra.2>:
c0004b4b:	56                   	push   esi
c0004b4c:	53                   	push   ebx
c0004b4d:	89 c6                	mov    esi,eax
c0004b4f:	89 d3                	mov    ebx,edx
c0004b51:	51                   	push   ecx
c0004b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b54:	83 c0 34             	add    eax,0x34
c0004b57:	e8 30 ce ff ff       	call   c000198c <ld_dword>
c0004b5c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b61:	83 c0 38             	add    eax,0x38
c0004b64:	e8 3b ce ff ff       	call   c00019a4 <ld_qword>
c0004b69:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b6c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b71:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b7b:	83 e0 02             	and    eax,0x2
c0004b7e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b81:	5b                   	pop    ebx
c0004b82:	5b                   	pop    ebx
c0004b83:	5e                   	pop    esi
c0004b84:	c3                   	ret    

c0004b85 <follow_path>:
c0004b85:	56                   	push   esi
c0004b86:	53                   	push   ebx
c0004b87:	89 c3                	mov    ebx,eax
c0004b89:	83 ec 14             	sub    esp,0x14
c0004b8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b90:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b96:	8a 10                	mov    dl,BYTE PTR [eax]
c0004b98:	80 fa 5c             	cmp    dl,0x5c
c0004b9b:	75 07                	jne    c0004ba4 <follow_path+0x1f>
c0004b9d:	40                   	inc    eax
c0004b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ba2:	eb ee                	jmp    c0004b92 <follow_path+0xd>
c0004ba4:	80 fa 2f             	cmp    dl,0x2f
c0004ba7:	74 f4                	je     c0004b9d <follow_path+0x18>
c0004ba9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bb7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bba:	77 52                	ja     c0004c0e <follow_path+0x89>
c0004bbc:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bc0:	31 d2                	xor    edx,edx
c0004bc2:	89 d8                	mov    eax,ebx
c0004bc4:	e8 12 e3 ff ff       	call   c0002edb <dir_sdi>
c0004bc9:	eb 7c                	jmp    c0004c47 <follow_path+0xc2>
c0004bcb:	89 d8                	mov    eax,ebx
c0004bcd:	e8 6e f2 ff ff       	call   c0003e40 <dir_find>
c0004bd2:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bd5:	85 c0                	test   eax,eax
c0004bd7:	75 46                	jne    c0004c1f <follow_path+0x9a>
c0004bd9:	80 e2 04             	and    dl,0x4
c0004bdc:	75 69                	jne    c0004c47 <follow_path+0xc2>
c0004bde:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004be2:	74 5e                	je     c0004c42 <follow_path+0xbd>
c0004be4:	8a 06                	mov    al,BYTE PTR [esi]
c0004be6:	3c 04                	cmp    al,0x4
c0004be8:	75 41                	jne    c0004c2b <follow_path+0xa6>
c0004bea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bed:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004bf1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004bf4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004bf7:	30 c0                	xor    al,al
c0004bf9:	09 d0                	or     eax,edx
c0004bfb:	89 da                	mov    edx,ebx
c0004bfd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c00:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c03:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c06:	8d 46 10             	lea    eax,[esi+0x10]
c0004c09:	e8 3d ff ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004c0e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c12:	89 d8                	mov    eax,ebx
c0004c14:	e8 a9 ed ff ff       	call   c00039c2 <create_name>
c0004c19:	85 c0                	test   eax,eax
c0004c1b:	74 ae                	je     c0004bcb <follow_path+0x46>
c0004c1d:	eb 28                	jmp    c0004c47 <follow_path+0xc2>
c0004c1f:	83 f8 04             	cmp    eax,0x4
c0004c22:	75 23                	jne    c0004c47 <follow_path+0xc2>
c0004c24:	80 e2 04             	and    dl,0x4
c0004c27:	74 19                	je     c0004c42 <follow_path+0xbd>
c0004c29:	eb 1c                	jmp    c0004c47 <follow_path+0xc2>
c0004c2b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c2e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c34:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c38:	e8 bd fe ff ff       	call   c0004afa <ld_clust.isra.0>
c0004c3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c40:	eb cc                	jmp    c0004c0e <follow_path+0x89>
c0004c42:	b8 05 00 00 00       	mov    eax,0x5
c0004c47:	83 c4 14             	add    esp,0x14
c0004c4a:	5b                   	pop    ebx
c0004c4b:	5e                   	pop    esi
c0004c4c:	c3                   	ret    

c0004c4d <f_mount>:
c0004c4d:	53                   	push   ebx
c0004c4e:	83 ec 18             	sub    esp,0x18
c0004c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c55:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c61:	e8 fb d2 ff ff       	call   c0001f61 <get_ldnumber>
c0004c66:	89 c2                	mov    edx,eax
c0004c68:	b8 0b 00 00 00       	mov    eax,0xb
c0004c6d:	85 d2                	test   edx,edx
c0004c6f:	78 39                	js     c0004caa <f_mount+0x5d>
c0004c71:	8b 04 95 e0 63 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9c20]
c0004c78:	85 c0                	test   eax,eax
c0004c7a:	74 03                	je     c0004c7f <f_mount+0x32>
c0004c7c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	74 03                	je     c0004c8a <f_mount+0x3d>
c0004c87:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c8e:	89 04 95 e0 63 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9c20],eax
c0004c95:	31 c0                	xor    eax,eax
c0004c97:	84 db                	test   bl,bl
c0004c99:	74 0f                	je     c0004caa <f_mount+0x5d>
c0004c9b:	31 c9                	xor    ecx,ecx
c0004c9d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ca1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ca5:	e8 65 d7 ff ff       	call   c000240f <mount_volume>
c0004caa:	83 c4 18             	add    esp,0x18
c0004cad:	5b                   	pop    ebx
c0004cae:	c3                   	ret    

c0004caf <f_open>:
c0004caf:	55                   	push   ebp
c0004cb0:	bd 09 00 00 00       	mov    ebp,0x9
c0004cb5:	57                   	push   edi
c0004cb6:	56                   	push   esi
c0004cb7:	53                   	push   ebx
c0004cb8:	83 ec 7c             	sub    esp,0x7c
c0004cbb:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cc2:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cc9:	85 db                	test   ebx,ebx
c0004ccb:	0f 84 10 04 00 00    	je     c00050e1 <f_open+0x432>
c0004cd1:	89 fe                	mov    esi,edi
c0004cd3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cd7:	83 e6 3f             	and    esi,0x3f
c0004cda:	89 f0                	mov    eax,esi
c0004cdc:	0f b6 c8             	movzx  ecx,al
c0004cdf:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ce6:	e8 24 d7 ff ff       	call   c000240f <mount_volume>
c0004ceb:	89 c5                	mov    ebp,eax
c0004ced:	85 c0                	test   eax,eax
c0004cef:	0f 85 e6 03 00 00    	jne    c00050db <f_open+0x42c>
c0004cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cf9:	bd 11 00 00 00       	mov    ebp,0x11
c0004cfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d02:	83 ec 0c             	sub    esp,0xc
c0004d05:	68 60 04 00 00       	push   0x460
c0004d0a:	e8 d9 36 00 00       	call   c00083e8 <ff_memalloc>
c0004d0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d1b:	0f 84 c0 03 00 00    	je     c00050e1 <f_open+0x432>
c0004d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d29:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d2f:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d35:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d40:	e8 40 fe ff ff       	call   c0004b85 <follow_path>
c0004d45:	89 c5                	mov    ebp,eax
c0004d47:	85 c0                	test   eax,eax
c0004d49:	75 0c                	jne    c0004d57 <f_open+0xa8>
c0004d4b:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d50:	79 05                	jns    c0004d57 <f_open+0xa8>
c0004d52:	bd 06 00 00 00       	mov    ebp,0x6
c0004d57:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d5d:	0f 84 84 01 00 00    	je     c0004ee7 <f_open+0x238>
c0004d63:	85 ed                	test   ebp,ebp
c0004d65:	74 20                	je     c0004d87 <f_open+0xd8>
c0004d67:	83 fd 04             	cmp    ebp,0x4
c0004d6a:	0f 85 58 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d70:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d74:	83 ce 08             	or     esi,0x8
c0004d77:	e8 8a f2 ff ff       	call   c0004006 <dir_register>
c0004d7c:	89 c5                	mov    ebp,eax
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	74 2f                	je     c0004db1 <f_open+0x102>
c0004d82:	e9 41 03 00 00       	jmp    c00050c8 <f_open+0x419>
c0004d87:	bd 07 00 00 00       	mov    ebp,0x7
c0004d8c:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d91:	0f 85 31 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d97:	bd 08 00 00 00       	mov    ebp,0x8
c0004d9c:	f7 c7 04 00 00 00    	test   edi,0x4
c0004da2:	0f 85 20 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004da8:	83 e7 08             	and    edi,0x8
c0004dab:	0f 84 65 01 00 00    	je     c0004f16 <f_open+0x267>
c0004db1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004db5:	8a 02                	mov    al,BYTE PTR [edx]
c0004db7:	3c 04                	cmp    al,0x4
c0004db9:	0f 85 97 00 00 00    	jne    c0004e56 <f_open+0x1a7>
c0004dbf:	8d 42 10             	lea    eax,[edx+0x10]
c0004dc2:	89 13                	mov    DWORD PTR [ebx],edx
c0004dc4:	89 da                	mov    edx,ebx
c0004dc6:	e8 80 fd ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004dcb:	31 d2                	xor    edx,edx
c0004dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd1:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004dd6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dd9:	83 c0 02             	add    eax,0x2
c0004ddc:	e8 32 cc ff ff       	call   c0001a13 <mem_set>
c0004de1:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004de6:	31 d2                	xor    edx,edx
c0004de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004def:	83 c0 26             	add    eax,0x26
c0004df2:	e8 1c cc ff ff       	call   c0001a13 <mem_set>
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004dfe:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e07:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e0a:	83 c0 08             	add    eax,0x8
c0004e0d:	e8 e3 cb ff ff       	call   c00019f5 <st_dword>
c0004e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e21:	e8 b7 ea ff ff       	call   c00038dd <store_xdir>
c0004e26:	89 c5                	mov    ebp,eax
c0004e28:	85 c0                	test   eax,eax
c0004e2a:	0f 85 98 02 00 00    	jne    c00050c8 <f_open+0x419>
c0004e30:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e33:	85 d2                	test   edx,edx
c0004e35:	0f 84 db 00 00 00    	je     c0004f16 <f_open+0x267>
c0004e3b:	31 c9                	xor    ecx,ecx
c0004e3d:	89 d8                	mov    eax,ebx
c0004e3f:	e8 8e e3 ff ff       	call   c00031d2 <remove_chain>
c0004e44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e4d:	48                   	dec    eax
c0004e4e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e51:	e9 b8 00 00 00       	jmp    c0004f0e <f_open+0x25f>
c0004e56:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e5a:	89 ea                	mov    edx,ebp
c0004e5c:	e8 99 fc ff ff       	call   c0004afa <ld_clust.isra.0>
c0004e61:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e66:	89 c7                	mov    edi,eax
c0004e68:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e6b:	e8 85 cb ff ff       	call   c00019f5 <st_dword>
c0004e70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e74:	31 c9                	xor    ecx,ecx
c0004e76:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e82:	e8 9c fc ff ff       	call   c0004b23 <st_clust.isra.1>
c0004e87:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e8b:	31 d2                	xor    edx,edx
c0004e8d:	83 c0 1c             	add    eax,0x1c
c0004e90:	e8 60 cb ff ff       	call   c00019f5 <st_dword>
c0004e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e99:	85 ff                	test   edi,edi
c0004e9b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9f:	74 75                	je     c0004f16 <f_open+0x267>
c0004ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea5:	31 c9                	xor    ecx,ecx
c0004ea7:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eaa:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004eb5:	89 fa                	mov    edx,edi
c0004eb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ebb:	e8 12 e3 ff ff       	call   c00031d2 <remove_chain>
c0004ec0:	89 c5                	mov    ebp,eax
c0004ec2:	85 c0                	test   eax,eax
c0004ec4:	0f 85 fe 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004ece:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed6:	4f                   	dec    edi
c0004ed7:	e8 81 d2 ff ff       	call   c000215d <move_window>
c0004edc:	89 c5                	mov    ebp,eax
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ee5:	eb 27                	jmp    c0004f0e <f_open+0x25f>
c0004ee7:	85 ed                	test   ebp,ebp
c0004ee9:	0f 85 d9 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eef:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004ef3:	bd 04 00 00 00       	mov    ebp,0x4
c0004ef8:	a8 10                	test   al,0x10
c0004efa:	0f 85 c8 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f00:	83 e7 02             	and    edi,0x2
c0004f03:	74 11                	je     c0004f16 <f_open+0x267>
c0004f05:	bd 07 00 00 00       	mov    ebp,0x7
c0004f0a:	a8 01                	test   al,0x1
c0004f0c:	eb 02                	jmp    c0004f10 <f_open+0x261>
c0004f0e:	85 ed                	test   ebp,ebp
c0004f10:	0f 85 b2 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f16:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f1c:	74 03                	je     c0004f21 <f_open+0x272>
c0004f1e:	83 ce 40             	or     esi,0x40
c0004f21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f25:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f28:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f2b:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f2e:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f31:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f35:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f38:	8a 02                	mov    al,BYTE PTR [edx]
c0004f3a:	3c 04                	cmp    al,0x4
c0004f3c:	75 2a                	jne    c0004f68 <f_open+0x2b9>
c0004f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f42:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f4e:	30 c0                	xor    al,al
c0004f50:	09 c8                	or     eax,ecx
c0004f52:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f55:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f59:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f5c:	8d 42 10             	lea    eax,[edx+0x10]
c0004f5f:	89 da                	mov    edx,ebx
c0004f61:	e8 e5 fb ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004f66:	eb 1c                	jmp    c0004f84 <f_open+0x2d5>
c0004f68:	89 fa                	mov    edx,edi
c0004f6a:	e8 8b fb ff ff       	call   c0004afa <ld_clust.isra.0>
c0004f6f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f72:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f75:	e8 12 ca ff ff       	call   c000198c <ld_dword>
c0004f7a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f81:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f88:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f8f:	89 03                	mov    DWORD PTR [ebx],eax
c0004f91:	31 d2                	xor    edx,edx
c0004f93:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004f97:	b9 00 02 00 00       	mov    ecx,0x200
c0004f9c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004fa0:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fa4:	89 f0                	mov    eax,esi
c0004fa6:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fad:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fb0:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fb7:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fba:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fc1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fcc:	e8 42 ca ff ff       	call   c0001a13 <mem_set>
c0004fd1:	83 e6 20             	and    esi,0x20
c0004fd4:	75 07                	jne    c0004fdd <f_open+0x32e>
c0004fd6:	31 ed                	xor    ebp,ebp
c0004fd8:	e9 eb 00 00 00       	jmp    c00050c8 <f_open+0x419>
c0004fdd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fe0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fef:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0004ff3:	74 e1                	je     c0004fd6 <f_open+0x327>
c0004ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ffd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005000:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500a:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000500e:	31 ff                	xor    edi,edi
c0005010:	c1 e5 09             	shl    ebp,0x9
c0005013:	89 ee                	mov    esi,ebp
c0005015:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005019:	89 f8                	mov    eax,edi
c000501b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000501f:	73 22                	jae    c0005043 <f_open+0x394>
c0005021:	89 d8                	mov    eax,ebx
c0005023:	e8 bd dc ff ff       	call   c0002ce5 <get_fat>
c0005028:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000502c:	89 c2                	mov    edx,eax
c000502e:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005032:	83 f8 01             	cmp    eax,0x1
c0005035:	76 10                	jbe    c0005047 <f_open+0x398>
c0005037:	83 f8 ff             	cmp    eax,0xffffffff
c000503a:	75 d9                	jne    c0005015 <f_open+0x366>
c000503c:	bd 01 00 00 00       	mov    ebp,0x1
c0005041:	eb 09                	jmp    c000504c <f_open+0x39d>
c0005043:	31 ed                	xor    ebp,ebp
c0005045:	eb 05                	jmp    c000504c <f_open+0x39d>
c0005047:	bd 02 00 00 00       	mov    ebp,0x2
c000504c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000504f:	85 ed                	test   ebp,ebp
c0005051:	75 75                	jne    c00050c8 <f_open+0x419>
c0005053:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005057:	25 ff 01 00 00       	and    eax,0x1ff
c000505c:	0f 84 74 ff ff ff    	je     c0004fd6 <f_open+0x327>
c0005062:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005066:	bd 02 00 00 00       	mov    ebp,0x2
c000506b:	89 c8                	mov    eax,ecx
c000506d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005071:	e8 a2 cb ff ff       	call   c0001c18 <clst2sect>
c0005076:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000507a:	89 d7                	mov    edi,edx
c000507c:	09 c7                	or     edi,eax
c000507e:	74 48                	je     c00050c8 <f_open+0x419>
c0005080:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005084:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005088:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005090:	0f ac fe 09          	shrd   esi,edi,0x9
c0005094:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005098:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000509c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000509f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050a3:	83 ec 0c             	sub    esp,0xc
c00050a6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050a9:	6a 01                	push   0x1
c00050ab:	52                   	push   edx
c00050ac:	50                   	push   eax
c00050ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050b5:	50                   	push   eax
c00050b6:	e8 79 c8 ff ff       	call   c0001934 <disk_read>
c00050bb:	83 c4 20             	add    esp,0x20
c00050be:	85 c0                	test   eax,eax
c00050c0:	0f 95 c0             	setne  al
c00050c3:	0f b6 c0             	movzx  eax,al
c00050c6:	89 c5                	mov    ebp,eax
c00050c8:	83 ec 0c             	sub    esp,0xc
c00050cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050cf:	e8 2c 33 00 00       	call   c0008400 <ff_memfree>
c00050d4:	83 c4 10             	add    esp,0x10
c00050d7:	85 ed                	test   ebp,ebp
c00050d9:	74 06                	je     c00050e1 <f_open+0x432>
c00050db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050e1:	83 c4 7c             	add    esp,0x7c
c00050e4:	89 e8                	mov    eax,ebp
c00050e6:	5b                   	pop    ebx
c00050e7:	5e                   	pop    esi
c00050e8:	5f                   	pop    edi
c00050e9:	5d                   	pop    ebp
c00050ea:	c3                   	ret    

c00050eb <f_read>:
c00050eb:	55                   	push   ebp
c00050ec:	57                   	push   edi
c00050ed:	56                   	push   esi
c00050ee:	53                   	push   ebx
c00050ef:	83 ec 2c             	sub    esp,0x2c
c00050f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00050f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00050fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005100:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005104:	89 d8                	mov    eax,ebx
c0005106:	e8 77 cf ff ff       	call   c0002082 <validate>
c000510b:	89 c5                	mov    ebp,eax
c000510d:	85 c0                	test   eax,eax
c000510f:	0f 85 4c 02 00 00    	jne    c0005361 <f_read+0x276>
c0005115:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005119:	85 ed                	test   ebp,ebp
c000511b:	0f 85 40 02 00 00    	jne    c0005361 <f_read+0x276>
c0005121:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005125:	0f 84 31 02 00 00    	je     c000535c <f_read+0x271>
c000512b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000512e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005131:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005134:	bf 00 00 00 00       	mov    edi,0x0
c0005139:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000513c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005140:	89 d1                	mov    ecx,edx
c0005142:	19 f9                	sbb    ecx,edi
c0005144:	0f 83 cf 00 00 00    	jae    c0005219 <f_read+0x12e>
c000514a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000514e:	e9 c6 00 00 00       	jmp    c0005219 <f_read+0x12e>
c0005153:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005156:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005159:	89 d0                	mov    eax,edx
c000515b:	25 ff 01 00 00       	and    eax,0x1ff
c0005160:	0f 85 c9 01 00 00    	jne    c000532f <f_read+0x244>
c0005166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516a:	89 d6                	mov    esi,edx
c000516c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005170:	89 cf                	mov    edi,ecx
c0005172:	48                   	dec    eax
c0005173:	0f ac fe 09          	shrd   esi,edi,0x9
c0005177:	21 f0                	and    eax,esi
c0005179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000517d:	0f 84 a6 00 00 00    	je     c0005229 <f_read+0x13e>
c0005183:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005187:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000518a:	89 c8                	mov    eax,ecx
c000518c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000518f:	e8 84 ca ff ff       	call   c0001c18 <clst2sect>
c0005194:	89 d7                	mov    edi,edx
c0005196:	09 c7                	or     edi,eax
c0005198:	0f 84 b4 00 00 00    	je     c0005252 <f_read+0x167>
c000519e:	31 ff                	xor    edi,edi
c00051a0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051a4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051a7:	01 c6                	add    esi,eax
c00051a9:	11 d7                	adc    edi,edx
c00051ab:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051b3:	0f 86 fd 00 00 00    	jbe    c00052b6 <f_read+0x1cb>
c00051b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051c1:	c1 e8 09             	shr    eax,0x9
c00051c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00051c7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051cb:	03 14 24             	add    edx,DWORD PTR [esp]
c00051ce:	39 c2                	cmp    edx,eax
c00051d0:	76 07                	jbe    c00051d9 <f_read+0xee>
c00051d2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d9:	83 ec 0c             	sub    esp,0xc
c00051dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051e0:	57                   	push   edi
c00051e1:	56                   	push   esi
c00051e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051ea:	50                   	push   eax
c00051eb:	e8 44 c7 ff ff       	call   c0001934 <disk_read>
c00051f0:	83 c4 20             	add    esp,0x20
c00051f3:	85 c0                	test   eax,eax
c00051f5:	75 6e                	jne    c0005265 <f_read+0x17a>
c00051f7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00051fb:	78 7e                	js     c000527b <f_read+0x190>
c00051fd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005200:	c1 e6 09             	shl    esi,0x9
c0005203:	31 ff                	xor    edi,edi
c0005205:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005209:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000520d:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005211:	01 30                	add    DWORD PTR [eax],esi
c0005213:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005216:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005219:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000521e:	0f 85 2f ff ff ff    	jne    c0005153 <f_read+0x68>
c0005224:	e9 38 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005229:	89 c8                	mov    eax,ecx
c000522b:	09 d0                	or     eax,edx
c000522d:	75 05                	jne    c0005234 <f_read+0x149>
c000522f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005232:	eb 19                	jmp    c000524d <f_read+0x162>
c0005234:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005238:	74 09                	je     c0005243 <f_read+0x158>
c000523a:	89 d8                	mov    eax,ebx
c000523c:	e8 f8 c9 ff ff       	call   c0001c39 <clmt_clust>
c0005241:	eb 0a                	jmp    c000524d <f_read+0x162>
c0005243:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005246:	89 d8                	mov    eax,ebx
c0005248:	e8 98 da ff ff       	call   c0002ce5 <get_fat>
c000524d:	83 f8 01             	cmp    eax,0x1
c0005250:	77 0e                	ja     c0005260 <f_read+0x175>
c0005252:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005256:	bd 02 00 00 00       	mov    ebp,0x2
c000525b:	e9 01 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005260:	83 f8 ff             	cmp    eax,0xffffffff
c0005263:	75 0e                	jne    c0005273 <f_read+0x188>
c0005265:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005269:	bd 01 00 00 00       	mov    ebp,0x1
c000526e:	e9 ee 00 00 00       	jmp    c0005361 <f_read+0x276>
c0005273:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005276:	e9 08 ff ff ff       	jmp    c0005183 <f_read+0x98>
c000527b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000527e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005281:	29 f0                	sub    eax,esi
c0005283:	19 fa                	sbb    edx,edi
c0005285:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005288:	89 d7                	mov    edi,edx
c000528a:	ba 00 00 00 00       	mov    edx,0x0
c000528f:	89 f9                	mov    ecx,edi
c0005291:	19 d1                	sbb    ecx,edx
c0005293:	0f 83 64 ff ff ff    	jae    c00051fd <f_read+0x112>
c0005299:	89 c7                	mov    edi,eax
c000529b:	8d 53 50             	lea    edx,[ebx+0x50]
c000529e:	c1 e7 09             	shl    edi,0x9
c00052a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052a5:	b9 00 02 00 00       	mov    ecx,0x200
c00052aa:	01 f8                	add    eax,edi
c00052ac:	e8 4d c7 ff ff       	call   c00019fe <mem_cpy>
c00052b1:	e9 47 ff ff ff       	jmp    c00051fd <f_read+0x112>
c00052b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00052bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052c3:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052c7:	75 05                	jne    c00052ce <f_read+0x1e3>
c00052c9:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052cc:	74 5b                	je     c0005329 <f_read+0x23e>
c00052ce:	8d 43 50             	lea    eax,[ebx+0x50]
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052d9:	79 2a                	jns    c0005305 <f_read+0x21a>
c00052db:	83 ec 0c             	sub    esp,0xc
c00052de:	6a 01                	push   0x1
c00052e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052f0:	50                   	push   eax
c00052f1:	e8 54 c6 ff ff       	call   c000194a <disk_write>
c00052f6:	83 c4 20             	add    esp,0x20
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 64 ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005301:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	6a 01                	push   0x1
c000530a:	57                   	push   edi
c000530b:	56                   	push   esi
c000530c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005310:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005314:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005318:	50                   	push   eax
c0005319:	e8 16 c6 ff ff       	call   c0001934 <disk_read>
c000531e:	83 c4 20             	add    esp,0x20
c0005321:	85 c0                	test   eax,eax
c0005323:	0f 85 3c ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005329:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000532c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000532f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005332:	ba 00 02 00 00       	mov    edx,0x200
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005340:	29 c2                	sub    edx,eax
c0005342:	39 d6                	cmp    esi,edx
c0005344:	76 02                	jbe    c0005348 <f_read+0x25d>
c0005346:	89 d6                	mov    esi,edx
c0005348:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000534c:	89 f1                	mov    ecx,esi
c000534e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005352:	e8 a7 c6 ff ff       	call   c00019fe <mem_cpy>
c0005357:	e9 a7 fe ff ff       	jmp    c0005203 <f_read+0x118>
c000535c:	bd 07 00 00 00       	mov    ebp,0x7
c0005361:	83 c4 2c             	add    esp,0x2c
c0005364:	89 e8                	mov    eax,ebp
c0005366:	5b                   	pop    ebx
c0005367:	5e                   	pop    esi
c0005368:	5f                   	pop    edi
c0005369:	5d                   	pop    ebp
c000536a:	c3                   	ret    

c000536b <f_write>:
c000536b:	55                   	push   ebp
c000536c:	57                   	push   edi
c000536d:	56                   	push   esi
c000536e:	53                   	push   ebx
c000536f:	83 ec 2c             	sub    esp,0x2c
c0005372:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005376:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000537a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005380:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005384:	89 d8                	mov    eax,ebx
c0005386:	e8 f7 cc ff ff       	call   c0002082 <validate>
c000538b:	89 c5                	mov    ebp,eax
c000538d:	85 c0                	test   eax,eax
c000538f:	0f 85 86 02 00 00    	jne    c000561b <f_write+0x2b0>
c0005395:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005399:	85 ed                	test   ebp,ebp
c000539b:	0f 85 7a 02 00 00    	jne    c000561b <f_write+0x2b0>
c00053a1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053a5:	0f 84 6b 02 00 00    	je     c0005616 <f_write+0x2ab>
c00053ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053af:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053b2:	0f 84 43 01 00 00    	je     c00054fb <f_write+0x190>
c00053b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053bb:	89 c1                	mov    ecx,eax
c00053bd:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053c1:	0f 83 34 01 00 00    	jae    c00054fb <f_write+0x190>
c00053c7:	f7 d0                	not    eax
c00053c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053cd:	e9 29 01 00 00       	jmp    c00054fb <f_write+0x190>
c00053d2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053d5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053d8:	89 d0                	mov    eax,edx
c00053da:	25 ff 01 00 00       	and    eax,0x1ff
c00053df:	0f 85 00 02 00 00    	jne    c00055e5 <f_write+0x27a>
c00053e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e9:	89 d6                	mov    esi,edx
c00053eb:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053ef:	89 cf                	mov    edi,ecx
c00053f1:	48                   	dec    eax
c00053f2:	0f ac fe 09          	shrd   esi,edi,0x9
c00053f6:	21 f0                	and    eax,esi
c00053f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053fc:	0f 84 06 01 00 00    	je     c0005508 <f_write+0x19d>
c0005402:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005406:	0f 88 6e 01 00 00    	js     c000557a <f_write+0x20f>
c000540c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005410:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005413:	89 c8                	mov    eax,ecx
c0005415:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005419:	e8 fa c7 ff ff       	call   c0001c18 <clst2sect>
c000541e:	89 d1                	mov    ecx,edx
c0005420:	09 c1                	or     ecx,eax
c0005422:	0f 84 1c 01 00 00    	je     c0005544 <f_write+0x1d9>
c0005428:	31 ff                	xor    edi,edi
c000542a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000542e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005432:	01 c6                	add    esi,eax
c0005434:	11 d7                	adc    edi,edx
c0005436:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000543e:	0f 86 63 01 00 00    	jbe    c00055a7 <f_write+0x23c>
c0005444:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000544c:	c1 e8 09             	shr    eax,0x9
c000544f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005453:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005457:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000545b:	39 c2                	cmp    edx,eax
c000545d:	76 08                	jbe    c0005467 <f_write+0xfc>
c000545f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005467:	83 ec 0c             	sub    esp,0xc
c000546a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000546e:	57                   	push   edi
c000546f:	56                   	push   esi
c0005470:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005474:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005478:	50                   	push   eax
c0005479:	e8 cc c4 ff ff       	call   c000194a <disk_write>
c000547e:	83 c4 20             	add    esp,0x20
c0005481:	85 c0                	test   eax,eax
c0005483:	0f 85 ce 00 00 00    	jne    c0005557 <f_write+0x1ec>
c0005489:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000548f:	29 f0                	sub    eax,esi
c0005491:	19 fa                	sbb    edx,edi
c0005493:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005497:	89 d7                	mov    edi,edx
c0005499:	ba 00 00 00 00       	mov    edx,0x0
c000549e:	89 f9                	mov    ecx,edi
c00054a0:	19 d1                	sbb    ecx,edx
c00054a2:	73 1c                	jae    c00054c0 <f_write+0x155>
c00054a4:	89 c7                	mov    edi,eax
c00054a6:	b9 00 02 00 00       	mov    ecx,0x200
c00054ab:	c1 e7 09             	shl    edi,0x9
c00054ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00054b1:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054b5:	89 fa                	mov    edx,edi
c00054b7:	e8 42 c5 ff ff       	call   c00019fe <mem_cpy>
c00054bc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054c0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054cb:	31 ff                	xor    edi,edi
c00054cd:	01 30                	add    DWORD PTR [eax],esi
c00054cf:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054d3:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054da:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054e0:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054e3:	89 c1                	mov    ecx,eax
c00054e5:	39 f2                	cmp    edx,esi
c00054e7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054ea:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054ed:	19 f9                	sbb    ecx,edi
c00054ef:	73 04                	jae    c00054f5 <f_write+0x18a>
c00054f1:	89 f2                	mov    edx,esi
c00054f3:	89 f8                	mov    eax,edi
c00054f5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00054f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 cc fe ff ff    	jne    c00053d2 <f_write+0x67>
c0005506:	eb 2e                	jmp    c0005536 <f_write+0x1cb>
c0005508:	89 c8                	mov    eax,ecx
c000550a:	09 d0                	or     eax,edx
c000550c:	75 0b                	jne    c0005519 <f_write+0x1ae>
c000550e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005511:	31 d2                	xor    edx,edx
c0005513:	85 c0                	test   eax,eax
c0005515:	75 28                	jne    c000553f <f_write+0x1d4>
c0005517:	eb 12                	jmp    c000552b <f_write+0x1c0>
c0005519:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551d:	74 09                	je     c0005528 <f_write+0x1bd>
c000551f:	89 d8                	mov    eax,ebx
c0005521:	e8 13 c7 ff ff       	call   c0001c39 <clmt_clust>
c0005526:	eb 0a                	jmp    c0005532 <f_write+0x1c7>
c0005528:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000552b:	89 d8                	mov    eax,ebx
c000552d:	e8 a1 da ff ff       	call   c0002fd3 <create_chain>
c0005532:	85 c0                	test   eax,eax
c0005534:	75 09                	jne    c000553f <f_write+0x1d4>
c0005536:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000553a:	e9 dc 00 00 00       	jmp    c000561b <f_write+0x2b0>
c000553f:	83 f8 01             	cmp    eax,0x1
c0005542:	75 0e                	jne    c0005552 <f_write+0x1e7>
c0005544:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005548:	bd 02 00 00 00       	mov    ebp,0x2
c000554d:	e9 c9 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005552:	83 f8 ff             	cmp    eax,0xffffffff
c0005555:	75 0e                	jne    c0005565 <f_write+0x1fa>
c0005557:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000555b:	bd 01 00 00 00       	mov    ebp,0x1
c0005560:	e9 b6 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005565:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005568:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000556c:	0f 85 90 fe ff ff    	jne    c0005402 <f_write+0x97>
c0005572:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005575:	e9 88 fe ff ff       	jmp    c0005402 <f_write+0x97>
c000557a:	83 ec 0c             	sub    esp,0xc
c000557d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005580:	6a 01                	push   0x1
c0005582:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005585:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005588:	50                   	push   eax
c0005589:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000558d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005591:	50                   	push   eax
c0005592:	e8 b3 c3 ff ff       	call   c000194a <disk_write>
c0005597:	83 c4 20             	add    esp,0x20
c000559a:	85 c0                	test   eax,eax
c000559c:	75 b9                	jne    c0005557 <f_write+0x1ec>
c000559e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055a2:	e9 65 fe ff ff       	jmp    c000540c <f_write+0xa1>
c00055a7:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055aa:	75 05                	jne    c00055b1 <f_write+0x246>
c00055ac:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055af:	74 2e                	je     c00055df <f_write+0x274>
c00055b1:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b7:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055ba:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055bd:	73 20                	jae    c00055df <f_write+0x274>
c00055bf:	83 ec 0c             	sub    esp,0xc
c00055c2:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c5:	6a 01                	push   0x1
c00055c7:	57                   	push   edi
c00055c8:	56                   	push   esi
c00055c9:	50                   	push   eax
c00055ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ce:	50                   	push   eax
c00055cf:	e8 60 c3 ff ff       	call   c0001934 <disk_read>
c00055d4:	83 c4 20             	add    esp,0x20
c00055d7:	85 c0                	test   eax,eax
c00055d9:	0f 85 78 ff ff ff    	jne    c0005557 <f_write+0x1ec>
c00055df:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055e2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e8:	ba 00 02 00 00       	mov    edx,0x200
c00055ed:	25 ff 01 00 00       	and    eax,0x1ff
c00055f2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055f6:	29 c2                	sub    edx,eax
c00055f8:	39 d6                	cmp    esi,edx
c00055fa:	76 02                	jbe    c00055fe <f_write+0x293>
c00055fc:	89 d6                	mov    esi,edx
c00055fe:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005602:	89 f1                	mov    ecx,esi
c0005604:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005608:	e8 f1 c3 ff ff       	call   c00019fe <mem_cpy>
c000560d:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005611:	e9 b1 fe ff ff       	jmp    c00054c7 <f_write+0x15c>
c0005616:	bd 07 00 00 00       	mov    ebp,0x7
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 e8                	mov    eax,ebp
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_sync>:
c0005625:	56                   	push   esi
c0005626:	53                   	push   ebx
c0005627:	83 ec 64             	sub    esp,0x64
c000562a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000562e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005632:	89 d8                	mov    eax,ebx
c0005634:	e8 49 ca ff ff       	call   c0002082 <validate>
c0005639:	85 c0                	test   eax,eax
c000563b:	0f 85 ba 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005641:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005644:	f6 c2 40             	test   dl,0x40
c0005647:	0f 84 ae 01 00 00    	je     c00057fb <f_sync+0x1d6>
c000564d:	84 d2                	test   dl,dl
c000564f:	79 33                	jns    c0005684 <f_sync+0x5f>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000565c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565f:	50                   	push   eax
c0005660:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005664:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005668:	50                   	push   eax
c0005669:	e8 dc c2 ff ff       	call   c000194a <disk_write>
c000566e:	83 c4 20             	add    esp,0x20
c0005671:	89 c2                	mov    edx,eax
c0005673:	b8 01 00 00 00       	mov    eax,0x1
c0005678:	85 d2                	test   edx,edx
c000567a:	0f 85 7b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005680:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005688:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000568b:	0f 85 11 01 00 00    	jne    c00057a2 <f_sync+0x17d>
c0005691:	89 d8                	mov    eax,ebx
c0005693:	e8 13 d6 ff ff       	call   c0002cab <fill_first_frag>
c0005698:	85 c0                	test   eax,eax
c000569a:	0f 85 5b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056a0:	83 c9 ff             	or     ecx,0xffffffff
c00056a3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056a6:	89 d8                	mov    eax,ebx
c00056a8:	e8 c9 d5 ff ff       	call   c0002c76 <fill_last_frag>
c00056ad:	85 c0                	test   eax,eax
c00056af:	0f 85 46 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056b5:	83 ec 0c             	sub    esp,0xc
c00056b8:	68 60 04 00 00       	push   0x460
c00056bd:	e8 26 2d 00 00       	call   c00083e8 <ff_memalloc>
c00056c2:	83 c4 10             	add    esp,0x10
c00056c5:	89 c6                	mov    esi,eax
c00056c7:	b8 11 00 00 00       	mov    eax,0x11
c00056cc:	85 f6                	test   esi,esi
c00056ce:	0f 84 27 01 00 00    	je     c00057fb <f_sync+0x1d6>
c00056d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056d8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056de:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056e1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056e4:	89 da                	mov    edx,ebx
c00056e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056ea:	e8 af df ff ff       	call   c000369e <load_obj_xdir>
c00056ef:	85 c0                	test   eax,eax
c00056f1:	0f 85 95 00 00 00    	jne    c000578c <f_sync+0x167>
c00056f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056fb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00056fe:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005702:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005705:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005708:	83 ca 01             	or     edx,0x1
c000570b:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000570e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005711:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005714:	83 c0 34             	add    eax,0x34
c0005717:	e8 d9 c2 ff ff       	call   c00019f5 <st_dword>
c000571c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005720:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005723:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005726:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005729:	83 c0 38             	add    eax,0x38
c000572c:	e8 c7 c2 ff ff       	call   c00019f8 <st_qword>
c0005731:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000573e:	83 c0 28             	add    eax,0x28
c0005741:	e8 b2 c2 ff ff       	call   c00019f8 <st_qword>
c0005746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000574a:	ba 00 00 21 50       	mov    edx,0x50210000
c000574f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005752:	83 c0 0c             	add    eax,0xc
c0005755:	e8 9b c2 ff ff       	call   c00019f5 <st_dword>
c000575a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005761:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005765:	31 d2                	xor    edx,edx
c0005767:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000576a:	83 c0 10             	add    eax,0x10
c000576d:	e8 83 c2 ff ff       	call   c00019f5 <st_dword>
c0005772:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005776:	e8 62 e1 ff ff       	call   c00038dd <store_xdir>
c000577b:	85 c0                	test   eax,eax
c000577d:	75 0d                	jne    c000578c <f_sync+0x167>
c000577f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005783:	e8 00 eb ff ff       	call   c0004288 <sync_fs>
c0005788:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000578c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005790:	83 ec 0c             	sub    esp,0xc
c0005793:	56                   	push   esi
c0005794:	e8 67 2c 00 00       	call   c0008400 <ff_memfree>
c0005799:	83 c4 10             	add    esp,0x10
c000579c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057a0:	eb 59                	jmp    c00057fb <f_sync+0x1d6>
c00057a2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057a5:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057a8:	e8 b0 c9 ff ff       	call   c000215d <move_window>
c00057ad:	85 c0                	test   eax,eax
c00057af:	75 4a                	jne    c00057fb <f_sync+0x1d6>
c00057b1:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057b4:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057b8:	89 f2                	mov    edx,esi
c00057ba:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057bf:	e8 5f f3 ff ff       	call   c0004b23 <st_clust.isra.1>
c00057c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c7:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057ca:	e8 26 c2 ff ff       	call   c00019f5 <st_dword>
c00057cf:	8d 46 16             	lea    eax,[esi+0x16]
c00057d2:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d7:	e8 19 c2 ff ff       	call   c00019f5 <st_dword>
c00057dc:	8d 46 12             	lea    eax,[esi+0x12]
c00057df:	31 d2                	xor    edx,edx
c00057e1:	e8 0b c2 ff ff       	call   c00019f1 <st_word>
c00057e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f2:	e8 91 ea ff ff       	call   c0004288 <sync_fs>
c00057f7:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057fb:	83 c4 64             	add    esp,0x64
c00057fe:	5b                   	pop    ebx
c00057ff:	5e                   	pop    esi
c0005800:	c3                   	ret    

c0005801 <f_close>:
c0005801:	53                   	push   ebx
c0005802:	83 ec 24             	sub    esp,0x24
c0005805:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005809:	53                   	push   ebx
c000580a:	e8 16 fe ff ff       	call   c0005625 <f_sync>
c000580f:	83 c4 10             	add    esp,0x10
c0005812:	85 c0                	test   eax,eax
c0005814:	75 15                	jne    c000582b <f_close+0x2a>
c0005816:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000581a:	89 d8                	mov    eax,ebx
c000581c:	e8 61 c8 ff ff       	call   c0002082 <validate>
c0005821:	85 c0                	test   eax,eax
c0005823:	75 06                	jne    c000582b <f_close+0x2a>
c0005825:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000582b:	83 c4 18             	add    esp,0x18
c000582e:	5b                   	pop    ebx
c000582f:	c3                   	ret    

c0005830 <f_lseek>:
c0005830:	55                   	push   ebp
c0005831:	57                   	push   edi
c0005832:	56                   	push   esi
c0005833:	53                   	push   ebx
c0005834:	83 ec 3c             	sub    esp,0x3c
c0005837:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000583b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000583f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005843:	89 04 24             	mov    DWORD PTR [esp],eax
c0005846:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000584a:	89 d8                	mov    eax,ebx
c000584c:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005850:	e8 2d c8 ff ff       	call   c0002082 <validate>
c0005855:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005859:	85 c0                	test   eax,eax
c000585b:	0f 85 7a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005861:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005865:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005869:	85 c0                	test   eax,eax
c000586b:	0f 85 6a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005871:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005875:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005878:	74 0c                	je     c0005886 <f_lseek+0x56>
c000587a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000587d:	85 c0                	test   eax,eax
c000587f:	75 1f                	jne    c00058a0 <f_lseek+0x70>
c0005881:	e9 b5 01 00 00       	jmp    c0005a3b <f_lseek+0x20b>
c0005886:	83 c9 ff             	or     ecx,0xffffffff
c0005889:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000588c:	89 d8                	mov    eax,ebx
c000588e:	e8 e3 d3 ff ff       	call   c0002c76 <fill_last_frag>
c0005893:	85 c0                	test   eax,eax
c0005895:	74 e3                	je     c000587a <f_lseek+0x4a>
c0005897:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000589b:	e9 3b 04 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058a0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058a5:	0f 85 ac 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058ab:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058af:	0f 85 a2 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058b5:	8d 78 04             	lea    edi,[eax+0x4]
c00058b8:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00058bd:	be 02 00 00 00       	mov    esi,0x2
c00058c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c6:	85 ed                	test   ebp,ebp
c00058c8:	74 73                	je     c000593d <f_lseek+0x10d>
c00058ca:	89 e9                	mov    ecx,ebp
c00058cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058d3:	ff 04 24             	inc    DWORD PTR [esp]
c00058d6:	89 ca                	mov    edx,ecx
c00058d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	e8 02 d4 ff ff       	call   c0002ce5 <get_fat>
c00058e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058e7:	83 f8 01             	cmp    eax,0x1
c00058ea:	77 11                	ja     c00058fd <f_lseek+0xcd>
c00058ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058f0:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00058f8:	e9 de 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058fd:	83 f8 ff             	cmp    eax,0xffffffff
c0005900:	75 11                	jne    c0005913 <f_lseek+0xe3>
c0005902:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005906:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000590e:	e9 c8 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005913:	8d 51 01             	lea    edx,[ecx+0x1]
c0005916:	89 c1                	mov    ecx,eax
c0005918:	39 c2                	cmp    edx,eax
c000591a:	74 b7                	je     c00058d3 <f_lseek+0xa3>
c000591c:	83 c6 02             	add    esi,0x2
c000591f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005923:	72 0b                	jb     c0005930 <f_lseek+0x100>
c0005925:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005928:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000592b:	89 0f                	mov    DWORD PTR [edi],ecx
c000592d:	83 c7 08             	add    edi,0x8
c0005930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005934:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005937:	76 04                	jbe    c000593d <f_lseek+0x10d>
c0005939:	89 c5                	mov    ebp,eax
c000593b:	eb 8d                	jmp    c00058ca <f_lseek+0x9a>
c000593d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005940:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005944:	89 30                	mov    DWORD PTR [eax],esi
c0005946:	0f 87 87 03 00 00    	ja     c0005cd3 <f_lseek+0x4a3>
c000594c:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005952:	e9 84 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005957:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000595a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000595d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005961:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005969:	39 04 24             	cmp    DWORD PTR [esp],eax
c000596c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005970:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005974:	73 0f                	jae    c0005985 <f_lseek+0x155>
c0005976:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005979:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000597d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000598d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005990:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005997:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000599b:	0f 84 3a 03 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059a1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059a9:	83 c6 ff             	add    esi,0xffffffff
c00059ac:	89 d8                	mov    eax,ebx
c00059ae:	83 d7 ff             	adc    edi,0xffffffff
c00059b1:	89 f2                	mov    edx,esi
c00059b3:	89 f9                	mov    ecx,edi
c00059b5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00059bc:	e8 78 c2 ff ff       	call   c0001c39 <clmt_clust>
c00059c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059c5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059c8:	89 c2                	mov    edx,eax
c00059ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059ce:	89 c8                	mov    eax,ecx
c00059d0:	e8 43 c2 ff ff       	call   c0001c18 <clst2sect>
c00059d5:	89 d7                	mov    edi,edx
c00059d7:	09 c7                	or     edi,eax
c00059d9:	0f 84 0d ff ff ff    	je     c00058ec <f_lseek+0xbc>
c00059df:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059e3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059e9:	0f 84 ec 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00059f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059f7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00059fa:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c00059fe:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a02:	4d                   	dec    ebp
c0005a03:	31 ff                	xor    edi,edi
c0005a05:	21 ee                	and    esi,ebp
c0005a07:	01 c6                	add    esi,eax
c0005a09:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a0c:	11 d7                	adc    edi,edx
c0005a0e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a11:	39 fa                	cmp    edx,edi
c0005a13:	75 08                	jne    c0005a1d <f_lseek+0x1ed>
c0005a15:	39 f0                	cmp    eax,esi
c0005a17:	0f 84 be 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c0005a1d:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a20:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a24:	0f 89 80 02 00 00    	jns    c0005caa <f_lseek+0x47a>
c0005a2a:	83 ec 0c             	sub    esp,0xc
c0005a2d:	6a 01                	push   0x1
c0005a2f:	52                   	push   edx
c0005a30:	50                   	push   eax
c0005a31:	55                   	push   ebp
c0005a32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a36:	e9 5a 02 00 00       	jmp    c0005c95 <f_lseek+0x465>
c0005a3b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a3f:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a42:	74 16                	je     c0005a5a <f_lseek+0x22a>
c0005a44:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a49:	76 0f                	jbe    c0005a5a <f_lseek+0x22a>
c0005a4b:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a52:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a5d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a60:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a63:	89 c7                	mov    edi,eax
c0005a65:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a69:	73 0d                	jae    c0005a78 <f_lseek+0x248>
c0005a6b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a6f:	75 07                	jne    c0005a78 <f_lseek+0x248>
c0005a71:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a7b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a7e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a82:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a89:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a90:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005a93:	75 09                	jne    c0005a9e <f_lseek+0x26e>
c0005a95:	31 f6                	xor    esi,esi
c0005a97:	31 ff                	xor    edi,edi
c0005a99:	e9 af 01 00 00       	jmp    c0005c4d <f_lseek+0x41d>
c0005a9e:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005aa2:	89 d7                	mov    edi,edx
c0005aa4:	c1 e1 09             	shl    ecx,0x9
c0005aa7:	09 c7                	or     edi,eax
c0005aa9:	89 cd                	mov    ebp,ecx
c0005aab:	74 6d                	je     c0005b1a <f_lseek+0x2ea>
c0005aad:	83 c0 ff             	add    eax,0xffffffff
c0005ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab4:	83 d2 ff             	adc    edx,0xffffffff
c0005ab7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005aba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005abe:	83 c0 ff             	add    eax,0xffffffff
c0005ac1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ac5:	83 d2 ff             	adc    edx,0xffffffff
c0005ac8:	31 ff                	xor    edi,edi
c0005aca:	57                   	push   edi
c0005acb:	51                   	push   ecx
c0005acc:	52                   	push   edx
c0005acd:	50                   	push   eax
c0005ace:	e8 dd ba 01 00       	call   c00215b0 <__udivdi3>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ada:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ade:	57                   	push   edi
c0005adf:	55                   	push   ebp
c0005ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae8:	e8 c3 ba 01 00       	call   c00215b0 <__udivdi3>
c0005aed:	83 c4 10             	add    esp,0x10
c0005af0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005af4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005af8:	19 d1                	sbb    ecx,edx
c0005afa:	72 1e                	jb     c0005b1a <f_lseek+0x2ea>
c0005afc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b00:	89 e9                	mov    ecx,ebp
c0005b02:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b05:	f7 d9                	neg    ecx
c0005b07:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b0a:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b0e:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b11:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b14:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b18:	eb 28                	jmp    c0005b42 <f_lseek+0x312>
c0005b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	75 1e                	jne    c0005b3f <f_lseek+0x30f>
c0005b21:	31 d2                	xor    edx,edx
c0005b23:	89 d8                	mov    eax,ebx
c0005b25:	e8 a9 d4 ff ff       	call   c0002fd3 <create_chain>
c0005b2a:	83 f8 01             	cmp    eax,0x1
c0005b2d:	0f 84 b9 fd ff ff    	je     c00058ec <f_lseek+0xbc>
c0005b33:	83 f8 ff             	cmp    eax,0xffffffff
c0005b36:	0f 84 c6 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005b3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b3f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b42:	85 c0                	test   eax,eax
c0005b44:	0f 84 4b ff ff ff    	je     c0005a95 <f_lseek+0x265>
c0005b4a:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b4e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b56:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b5d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b60:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b63:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b67:	0f 83 9d 00 00 00    	jae    c0005c0a <f_lseek+0x3da>
c0005b6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b71:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b75:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b78:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b7c:	01 f2                	add    edx,esi
c0005b7e:	11 f9                	adc    ecx,edi
c0005b80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b88:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b8b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b8e:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005b91:	f6 c1 02             	test   cl,0x2
c0005b94:	74 35                	je     c0005bcb <f_lseek+0x39b>
c0005b96:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005b9a:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005b9d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ba0:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ba4:	73 16                	jae    c0005bbc <f_lseek+0x38c>
c0005ba6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005baa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bae:	88 ca                	mov    dl,cl
c0005bb0:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bb3:	83 ca 40             	or     edx,0x40
c0005bb6:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bb9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bbc:	89 c2                	mov    edx,eax
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 0e d4 ff ff       	call   c0002fd3 <create_chain>
c0005bc5:	85 c0                	test   eax,eax
c0005bc7:	75 0b                	jne    c0005bd4 <f_lseek+0x3a4>
c0005bc9:	eb 30                	jmp    c0005bfb <f_lseek+0x3cb>
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 11 d1 ff ff       	call   c0002ce5 <get_fat>
c0005bd4:	83 f8 ff             	cmp    eax,0xffffffff
c0005bd7:	0f 84 25 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005bdd:	83 f8 01             	cmp    eax,0x1
c0005be0:	0f 86 06 fd ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005be6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bea:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bed:	0f 86 f9 fc ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005bf3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bf6:	e9 5b ff ff ff       	jmp    c0005b56 <f_lseek+0x326>
c0005bfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c02:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c0a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c0d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c11:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c14:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c17:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c20:	0f 84 6f fe ff ff    	je     c0005a95 <f_lseek+0x265>
c0005c26:	89 c2                	mov    edx,eax
c0005c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c2c:	e8 e7 bf ff ff       	call   c0001c18 <clst2sect>
c0005c31:	89 d7                	mov    edi,edx
c0005c33:	09 c7                	or     edi,eax
c0005c35:	0f 84 b1 fc ff ff    	je     c00058ec <f_lseek+0xbc>
c0005c3b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c3f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c42:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c46:	c1 ef 09             	shr    edi,0x9
c0005c49:	01 c6                	add    esi,eax
c0005c4b:	11 d7                	adc    edi,edx
c0005c4d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c50:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c56:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c59:	19 d1                	sbb    ecx,edx
c0005c5b:	73 0a                	jae    c0005c67 <f_lseek+0x437>
c0005c5d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c60:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c63:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c67:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c6c:	74 6d                	je     c0005cdb <f_lseek+0x4ab>
c0005c6e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c71:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c74:	39 fa                	cmp    edx,edi
c0005c76:	75 04                	jne    c0005c7c <f_lseek+0x44c>
c0005c78:	39 f0                	cmp    eax,esi
c0005c7a:	74 5f                	je     c0005cdb <f_lseek+0x4ab>
c0005c7c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c7f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c83:	79 25                	jns    c0005caa <f_lseek+0x47a>
c0005c85:	83 ec 0c             	sub    esp,0xc
c0005c88:	6a 01                	push   0x1
c0005c8a:	52                   	push   edx
c0005c8b:	50                   	push   eax
c0005c8c:	55                   	push   ebp
c0005c8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c95:	50                   	push   eax
c0005c96:	e8 af bc ff ff       	call   c000194a <disk_write>
c0005c9b:	83 c4 20             	add    esp,0x20
c0005c9e:	85 c0                	test   eax,eax
c0005ca0:	0f 85 5c fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ca6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005caa:	83 ec 0c             	sub    esp,0xc
c0005cad:	6a 01                	push   0x1
c0005caf:	57                   	push   edi
c0005cb0:	56                   	push   esi
c0005cb1:	55                   	push   ebp
c0005cb2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cb6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cba:	50                   	push   eax
c0005cbb:	e8 74 bc ff ff       	call   c0001934 <disk_read>
c0005cc0:	83 c4 20             	add    esp,0x20
c0005cc3:	85 c0                	test   eax,eax
c0005cc5:	0f 85 37 fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ccb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005cd1:	eb 08                	jmp    c0005cdb <f_lseek+0x4ab>
c0005cd3:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cdf:	83 c4 3c             	add    esp,0x3c
c0005ce2:	5b                   	pop    ebx
c0005ce3:	5e                   	pop    esi
c0005ce4:	5f                   	pop    edi
c0005ce5:	5d                   	pop    ebp
c0005ce6:	c3                   	ret    

c0005ce7 <f_opendir>:
c0005ce7:	56                   	push   esi
c0005ce8:	b8 09 00 00 00       	mov    eax,0x9
c0005ced:	53                   	push   ebx
c0005cee:	83 ec 24             	sub    esp,0x24
c0005cf1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005cf5:	85 db                	test   ebx,ebx
c0005cf7:	0f 84 e6 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005cfd:	31 c9                	xor    ecx,ecx
c0005cff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d03:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d07:	e8 03 c7 ff ff       	call   c000240f <mount_volume>
c0005d0c:	85 c0                	test   eax,eax
c0005d0e:	0f 85 c9 00 00 00    	jne    c0005ddd <f_opendir+0xf6>
c0005d14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d18:	83 ec 0c             	sub    esp,0xc
c0005d1b:	89 03                	mov    DWORD PTR [ebx],eax
c0005d1d:	68 60 04 00 00       	push   0x460
c0005d22:	e8 c1 26 00 00       	call   c00083e8 <ff_memalloc>
c0005d27:	83 c4 10             	add    esp,0x10
c0005d2a:	89 c6                	mov    esi,eax
c0005d2c:	b8 11 00 00 00       	mov    eax,0x11
c0005d31:	85 f6                	test   esi,esi
c0005d33:	0f 84 aa 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d3d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d43:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d4d:	89 d8                	mov    eax,ebx
c0005d4f:	e8 31 ee ff ff       	call   c0004b85 <follow_path>
c0005d54:	85 c0                	test   eax,eax
c0005d56:	75 61                	jne    c0005db9 <f_opendir+0xd2>
c0005d58:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d5c:	78 46                	js     c0005da4 <f_opendir+0xbd>
c0005d5e:	b8 05 00 00 00       	mov    eax,0x5
c0005d63:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d67:	74 50                	je     c0005db9 <f_opendir+0xd2>
c0005d69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d6d:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d6f:	3c 04                	cmp    al,0x4
c0005d71:	75 26                	jne    c0005d99 <f_opendir+0xb2>
c0005d73:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d79:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d7c:	30 d2                	xor    dl,dl
c0005d7e:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d82:	09 c2                	or     edx,eax
c0005d84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d87:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d8a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d8d:	89 da                	mov    edx,ebx
c0005d8f:	8d 41 10             	lea    eax,[ecx+0x10]
c0005d92:	e8 b4 ed ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0005d97:	eb 0b                	jmp    c0005da4 <f_opendir+0xbd>
c0005d99:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005d9c:	e8 59 ed ff ff       	call   c0004afa <ld_clust.isra.0>
c0005da1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005da8:	31 d2                	xor    edx,edx
c0005daa:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dae:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005db2:	89 d8                	mov    eax,ebx
c0005db4:	e8 22 d1 ff ff       	call   c0002edb <dir_sdi>
c0005db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dbd:	83 ec 0c             	sub    esp,0xc
c0005dc0:	56                   	push   esi
c0005dc1:	e8 3a 26 00 00       	call   c0008400 <ff_memfree>
c0005dc6:	83 c4 10             	add    esp,0x10
c0005dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dcd:	83 f8 04             	cmp    eax,0x4
c0005dd0:	74 06                	je     c0005dd8 <f_opendir+0xf1>
c0005dd2:	85 c0                	test   eax,eax
c0005dd4:	74 0d                	je     c0005de3 <f_opendir+0xfc>
c0005dd6:	eb 05                	jmp    c0005ddd <f_opendir+0xf6>
c0005dd8:	b8 05 00 00 00       	mov    eax,0x5
c0005ddd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005de3:	83 c4 24             	add    esp,0x24
c0005de6:	5b                   	pop    ebx
c0005de7:	5e                   	pop    esi
c0005de8:	c3                   	ret    

c0005de9 <f_closedir>:
c0005de9:	53                   	push   ebx
c0005dea:	83 ec 18             	sub    esp,0x18
c0005ded:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005df1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 86 c2 ff ff       	call   c0002082 <validate>
c0005dfc:	85 c0                	test   eax,eax
c0005dfe:	75 06                	jne    c0005e06 <f_closedir+0x1d>
c0005e00:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e06:	83 c4 18             	add    esp,0x18
c0005e09:	5b                   	pop    ebx
c0005e0a:	c3                   	ret    

c0005e0b <f_readdir>:
c0005e0b:	57                   	push   edi
c0005e0c:	56                   	push   esi
c0005e0d:	53                   	push   ebx
c0005e0e:	83 ec 20             	sub    esp,0x20
c0005e11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e19:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e1d:	89 d8                	mov    eax,ebx
c0005e1f:	e8 5e c2 ff ff       	call   c0002082 <validate>
c0005e24:	85 c0                	test   eax,eax
c0005e26:	75 77                	jne    c0005e9f <f_readdir+0x94>
c0005e28:	85 ff                	test   edi,edi
c0005e2a:	75 0b                	jne    c0005e37 <f_readdir+0x2c>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	89 d8                	mov    eax,ebx
c0005e30:	e8 a6 d0 ff ff       	call   c0002edb <dir_sdi>
c0005e35:	eb 68                	jmp    c0005e9f <f_readdir+0x94>
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	68 60 04 00 00       	push   0x460
c0005e3f:	e8 a4 25 00 00       	call   c00083e8 <ff_memalloc>
c0005e44:	83 c4 10             	add    esp,0x10
c0005e47:	89 c6                	mov    esi,eax
c0005e49:	b8 11 00 00 00       	mov    eax,0x11
c0005e4e:	85 f6                	test   esi,esi
c0005e50:	74 4d                	je     c0005e9f <f_readdir+0x94>
c0005e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e56:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e5c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e5f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e62:	31 d2                	xor    edx,edx
c0005e64:	89 d8                	mov    eax,ebx
c0005e66:	e8 80 d8 ff ff       	call   c00036eb <dir_read>
c0005e6b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e70:	75 19                	jne    c0005e8b <f_readdir+0x80>
c0005e72:	89 fa                	mov    edx,edi
c0005e74:	89 d8                	mov    eax,ebx
c0005e76:	e8 7e ea ff ff       	call   c00048f9 <get_fileinfo>
c0005e7b:	31 d2                	xor    edx,edx
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 af d5 ff ff       	call   c0003433 <dir_next>
c0005e84:	83 f8 04             	cmp    eax,0x4
c0005e87:	75 02                	jne    c0005e8b <f_readdir+0x80>
c0005e89:	31 c0                	xor    eax,eax
c0005e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e8f:	83 ec 0c             	sub    esp,0xc
c0005e92:	56                   	push   esi
c0005e93:	e8 68 25 00 00       	call   c0008400 <ff_memfree>
c0005e98:	83 c4 10             	add    esp,0x10
c0005e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e9f:	83 c4 20             	add    esp,0x20
c0005ea2:	5b                   	pop    ebx
c0005ea3:	5e                   	pop    esi
c0005ea4:	5f                   	pop    edi
c0005ea5:	c3                   	ret    

c0005ea6 <f_stat>:
c0005ea6:	57                   	push   edi
c0005ea7:	31 c9                	xor    ecx,ecx
c0005ea9:	56                   	push   esi
c0005eaa:	53                   	push   ebx
c0005eab:	83 ec 50             	sub    esp,0x50
c0005eae:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005eb2:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005eb6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005eba:	e8 50 c5 ff ff       	call   c000240f <mount_volume>
c0005ebf:	89 c3                	mov    ebx,eax
c0005ec1:	85 c0                	test   eax,eax
c0005ec3:	75 67                	jne    c0005f2c <f_stat+0x86>
c0005ec5:	83 ec 0c             	sub    esp,0xc
c0005ec8:	bb 11 00 00 00       	mov    ebx,0x11
c0005ecd:	68 60 04 00 00       	push   0x460
c0005ed2:	e8 11 25 00 00       	call   c00083e8 <ff_memalloc>
c0005ed7:	83 c4 10             	add    esp,0x10
c0005eda:	89 c6                	mov    esi,eax
c0005edc:	85 c0                	test   eax,eax
c0005ede:	74 4c                	je     c0005f2c <f_stat+0x86>
c0005ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ee4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eea:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005eed:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005ef4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ef8:	e8 88 ec ff ff       	call   c0004b85 <follow_path>
c0005efd:	89 c3                	mov    ebx,eax
c0005eff:	85 c0                	test   eax,eax
c0005f01:	75 1d                	jne    c0005f20 <f_stat+0x7a>
c0005f03:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f08:	78 11                	js     c0005f1b <f_stat+0x75>
c0005f0a:	85 ff                	test   edi,edi
c0005f0c:	74 12                	je     c0005f20 <f_stat+0x7a>
c0005f0e:	89 fa                	mov    edx,edi
c0005f10:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f14:	e8 e0 e9 ff ff       	call   c00048f9 <get_fileinfo>
c0005f19:	eb 05                	jmp    c0005f20 <f_stat+0x7a>
c0005f1b:	bb 06 00 00 00       	mov    ebx,0x6
c0005f20:	83 ec 0c             	sub    esp,0xc
c0005f23:	56                   	push   esi
c0005f24:	e8 d7 24 00 00       	call   c0008400 <ff_memfree>
c0005f29:	83 c4 10             	add    esp,0x10
c0005f2c:	83 c4 50             	add    esp,0x50
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	5b                   	pop    ebx
c0005f32:	5e                   	pop    esi
c0005f33:	5f                   	pop    edi
c0005f34:	c3                   	ret    

c0005f35 <f_getfree>:
c0005f35:	55                   	push   ebp
c0005f36:	31 c9                	xor    ecx,ecx
c0005f38:	57                   	push   edi
c0005f39:	56                   	push   esi
c0005f3a:	53                   	push   ebx
c0005f3b:	83 ec 5c             	sub    esp,0x5c
c0005f3e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f42:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f46:	e8 c4 c4 ff ff       	call   c000240f <mount_volume>
c0005f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f4f:	85 c0                	test   eax,eax
c0005f51:	0f 85 9d 01 00 00    	jne    c00060f4 <f_getfree+0x1bf>
c0005f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f5b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f5f:	89 02                	mov    DWORD PTR [edx],eax
c0005f61:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f67:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f6a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f6e:	39 f2                	cmp    edx,esi
c0005f70:	77 0b                	ja     c0005f7d <f_getfree+0x48>
c0005f72:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f76:	89 10                	mov    DWORD PTR [eax],edx
c0005f78:	e9 77 01 00 00       	jmp    c00060f4 <f_getfree+0x1bf>
c0005f7d:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f7f:	80 fa 01             	cmp    dl,0x1
c0005f82:	75 3a                	jne    c0005fbe <f_getfree+0x89>
c0005f84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f88:	be 02 00 00 00       	mov    esi,0x2
c0005f8d:	31 db                	xor    ebx,ebx
c0005f8f:	89 f2                	mov    edx,esi
c0005f91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005f95:	e8 4b cd ff ff       	call   c0002ce5 <get_fat>
c0005f9a:	83 f8 ff             	cmp    eax,0xffffffff
c0005f9d:	0f 84 28 01 00 00    	je     c00060cb <f_getfree+0x196>
c0005fa3:	83 f8 01             	cmp    eax,0x1
c0005fa6:	0f 84 29 01 00 00    	je     c00060d5 <f_getfree+0x1a0>
c0005fac:	83 d3 00             	adc    ebx,0x0
c0005faf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb3:	46                   	inc    esi
c0005fb4:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fb7:	77 d6                	ja     c0005f8f <f_getfree+0x5a>
c0005fb9:	e9 25 01 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c0005fbe:	80 fa 04             	cmp    dl,0x4
c0005fc1:	0f 85 88 00 00 00    	jne    c000604f <f_getfree+0x11a>
c0005fc7:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fca:	31 ed                	xor    ebp,ebp
c0005fcc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fcf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fd7:	31 db                	xor    ebx,ebx
c0005fd9:	85 ed                	test   ebp,ebp
c0005fdb:	75 3f                	jne    c000601c <f_getfree+0xe7>
c0005fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005fe5:	83 c0 01             	add    eax,0x1
c0005fe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005fec:	83 d2 00             	adc    edx,0x0
c0005fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ff3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005fff:	e8 59 c1 ff ff       	call   c000215d <move_window>
c0006004:	85 c0                	test   eax,eax
c0006006:	0f 85 d3 00 00 00    	jne    c00060df <f_getfree+0x1aa>
c000600c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006010:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006014:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006018:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000601c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006020:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006023:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006027:	89 cf                	mov    edi,ecx
c0006029:	85 f6                	test   esi,esi
c000602b:	74 12                	je     c000603f <f_getfree+0x10a>
c000602d:	88 c1                	mov    cl,al
c000602f:	83 e1 01             	and    ecx,0x1
c0006032:	80 f9 01             	cmp    cl,0x1
c0006035:	83 d3 00             	adc    ebx,0x0
c0006038:	d0 e8                	shr    al,1
c000603a:	4e                   	dec    esi
c000603b:	39 fe                	cmp    esi,edi
c000603d:	75 ea                	jne    c0006029 <f_getfree+0xf4>
c000603f:	45                   	inc    ebp
c0006040:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006046:	85 f6                	test   esi,esi
c0006048:	75 8f                	jne    c0005fd9 <f_getfree+0xa4>
c000604a:	e9 94 00 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c000604f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006052:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006055:	31 f6                	xor    esi,esi
c0006057:	31 db                	xor    ebx,ebx
c0006059:	85 f6                	test   esi,esi
c000605b:	75 1b                	jne    c0006078 <f_getfree+0x143>
c000605d:	89 d7                	mov    edi,edx
c000605f:	89 cd                	mov    ebp,ecx
c0006061:	83 c7 01             	add    edi,0x1
c0006064:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006068:	83 d5 00             	adc    ebp,0x0
c000606b:	e8 ed c0 ff ff       	call   c000215d <move_window>
c0006070:	85 c0                	test   eax,eax
c0006072:	75 6b                	jne    c00060df <f_getfree+0x1aa>
c0006074:	89 fa                	mov    edx,edi
c0006076:	89 e9                	mov    ecx,ebp
c0006078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006080:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006084:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006087:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000608b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608f:	75 11                	jne    c00060a2 <f_getfree+0x16d>
c0006091:	e8 e9 b8 ff ff       	call   c000197f <ld_word>
c0006096:	66 83 f8 01          	cmp    ax,0x1
c000609a:	83 d3 00             	adc    ebx,0x0
c000609d:	83 c6 02             	add    esi,0x2
c00060a0:	eb 13                	jmp    c00060b5 <f_getfree+0x180>
c00060a2:	e8 e5 b8 ff ff       	call   c000198c <ld_dword>
c00060a7:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060ac:	83 f8 01             	cmp    eax,0x1
c00060af:	83 d3 00             	adc    ebx,0x0
c00060b2:	83 c6 04             	add    esi,0x4
c00060b5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060c3:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060c7:	75 90                	jne    c0006059 <f_getfree+0x124>
c00060c9:	eb 18                	jmp    c00060e3 <f_getfree+0x1ae>
c00060cb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060d3:	eb 0e                	jmp    c00060e3 <f_getfree+0x1ae>
c00060d5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060dd:	eb 04                	jmp    c00060e3 <f_getfree+0x1ae>
c00060df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060e7:	89 18                	mov    DWORD PTR [eax],ebx
c00060e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ed:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060f0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00060f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f8:	83 c4 5c             	add    esp,0x5c
c00060fb:	5b                   	pop    ebx
c00060fc:	5e                   	pop    esi
c00060fd:	5f                   	pop    edi
c00060fe:	5d                   	pop    ebp
c00060ff:	c3                   	ret    

c0006100 <f_truncate>:
c0006100:	56                   	push   esi
c0006101:	53                   	push   ebx
c0006102:	83 ec 14             	sub    esp,0x14
c0006105:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006109:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000610d:	89 d8                	mov    eax,ebx
c000610f:	e8 6e bf ff ff       	call   c0002082 <validate>
c0006114:	89 c6                	mov    esi,eax
c0006116:	85 c0                	test   eax,eax
c0006118:	0f 85 d2 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000611e:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006122:	85 f6                	test   esi,esi
c0006124:	0f 85 c6 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000612a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000612e:	0f 84 b7 00 00 00    	je     c00061eb <f_truncate+0xeb>
c0006134:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006137:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000613a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000613d:	89 d1                	mov    ecx,edx
c000613f:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006142:	0f 83 a8 00 00 00    	jae    c00061f0 <f_truncate+0xf0>
c0006148:	09 c2                	or     edx,eax
c000614a:	75 15                	jne    c0006161 <f_truncate+0x61>
c000614c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	89 d8                	mov    eax,ebx
c0006153:	e8 7a d0 ff ff       	call   c00031d2 <remove_chain>
c0006158:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000615f:	eb 35                	jmp    c0006196 <f_truncate+0x96>
c0006161:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006164:	89 d8                	mov    eax,ebx
c0006166:	e8 7a cb ff ff       	call   c0002ce5 <get_fat>
c000616b:	89 c2                	mov    edx,eax
c000616d:	b8 01 00 00 00       	mov    eax,0x1
c0006172:	83 fa ff             	cmp    edx,0xffffffff
c0006175:	74 1f                	je     c0006196 <f_truncate+0x96>
c0006177:	b8 02 00 00 00       	mov    eax,0x2
c000617c:	83 fa 01             	cmp    edx,0x1
c000617f:	74 15                	je     c0006196 <f_truncate+0x96>
c0006181:	31 c0                	xor    eax,eax
c0006183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006187:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000618a:	76 0a                	jbe    c0006196 <f_truncate+0x96>
c000618c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000618f:	89 d8                	mov    eax,ebx
c0006191:	e8 3c d0 ff ff       	call   c00031d2 <remove_chain>
c0006196:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006199:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000619c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000619f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061a2:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061a5:	83 ca 40             	or     edx,0x40
c00061a8:	85 c0                	test   eax,eax
c00061aa:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061ad:	75 35                	jne    c00061e4 <f_truncate+0xe4>
c00061af:	84 d2                	test   dl,dl
c00061b1:	79 3d                	jns    c00061f0 <f_truncate+0xf0>
c00061b3:	83 ec 0c             	sub    esp,0xc
c00061b6:	8d 43 50             	lea    eax,[ebx+0x50]
c00061b9:	6a 01                	push   0x1
c00061bb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061c1:	50                   	push   eax
c00061c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061ca:	50                   	push   eax
c00061cb:	e8 7a b7 ff ff       	call   c000194a <disk_write>
c00061d0:	83 c4 20             	add    esp,0x20
c00061d3:	85 c0                	test   eax,eax
c00061d5:	75 08                	jne    c00061df <f_truncate+0xdf>
c00061d7:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061db:	31 f6                	xor    esi,esi
c00061dd:	eb 11                	jmp    c00061f0 <f_truncate+0xf0>
c00061df:	b8 01 00 00 00       	mov    eax,0x1
c00061e4:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061e7:	89 c6                	mov    esi,eax
c00061e9:	eb 05                	jmp    c00061f0 <f_truncate+0xf0>
c00061eb:	be 07 00 00 00       	mov    esi,0x7
c00061f0:	89 f0                	mov    eax,esi
c00061f2:	83 c4 14             	add    esp,0x14
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	c3                   	ret    

c00061f8 <f_unlink>:
c00061f8:	56                   	push   esi
c00061f9:	b9 02 00 00 00       	mov    ecx,0x2
c00061fe:	53                   	push   ebx
c00061ff:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006205:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006209:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006210:	e8 fa c1 ff ff       	call   c000240f <mount_volume>
c0006215:	85 c0                	test   eax,eax
c0006217:	0f 85 55 01 00 00    	jne    c0006372 <f_unlink+0x17a>
c000621d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006221:	83 ec 0c             	sub    esp,0xc
c0006224:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006228:	68 60 04 00 00       	push   0x460
c000622d:	e8 b6 21 00 00       	call   c00083e8 <ff_memalloc>
c0006232:	83 c4 10             	add    esp,0x10
c0006235:	89 c3                	mov    ebx,eax
c0006237:	b8 11 00 00 00       	mov    eax,0x11
c000623c:	85 db                	test   ebx,ebx
c000623e:	0f 84 2e 01 00 00    	je     c0006372 <f_unlink+0x17a>
c0006244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006248:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000624e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006251:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006254:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000625b:	8d 44 24 48          	lea    eax,[esp+0x48]
c000625f:	e8 21 e9 ff ff       	call   c0004b85 <follow_path>
c0006264:	85 c0                	test   eax,eax
c0006266:	0f 85 f2 00 00 00    	jne    c000635e <f_unlink+0x166>
c000626c:	b8 06 00 00 00       	mov    eax,0x6
c0006271:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006279:	0f 88 df 00 00 00    	js     c000635e <f_unlink+0x166>
c000627f:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006284:	74 0a                	je     c0006290 <f_unlink+0x98>
c0006286:	b8 07 00 00 00       	mov    eax,0x7
c000628b:	e9 ce 00 00 00       	jmp    c000635e <f_unlink+0x166>
c0006290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006294:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006298:	8a 02                	mov    al,BYTE PTR [edx]
c000629a:	3c 04                	cmp    al,0x4
c000629c:	75 12                	jne    c00062b0 <f_unlink+0xb8>
c000629e:	8d 42 10             	lea    eax,[edx+0x10]
c00062a1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062a5:	e8 a1 e8 ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c00062aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062ae:	eb 0e                	jmp    c00062be <f_unlink+0xc6>
c00062b0:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062b7:	e8 3e e8 ff ff       	call   c0004afa <ld_clust.isra.0>
c00062bc:	89 c6                	mov    esi,eax
c00062be:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062c3:	75 12                	jne    c00062d7 <f_unlink+0xdf>
c00062c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062c9:	e8 94 d6 ff ff       	call   c0003962 <dir_remove>
c00062ce:	85 c0                	test   eax,eax
c00062d0:	74 6c                	je     c000633e <f_unlink+0x146>
c00062d2:	e9 87 00 00 00       	jmp    c000635e <f_unlink+0x166>
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062e2:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062e9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062ec:	75 21                	jne    c000630f <f_unlink+0x117>
c00062ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00062f6:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00062fd:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006304:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006308:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000630f:	31 d2                	xor    edx,edx
c0006311:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006318:	e8 be cb ff ff       	call   c0002edb <dir_sdi>
c000631d:	85 c0                	test   eax,eax
c000631f:	75 3d                	jne    c000635e <f_unlink+0x166>
c0006321:	31 d2                	xor    edx,edx
c0006323:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000632a:	e8 bc d3 ff ff       	call   c00036eb <dir_read>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 84 4f ff ff ff    	je     c0006286 <f_unlink+0x8e>
c0006337:	83 f8 04             	cmp    eax,0x4
c000633a:	75 22                	jne    c000635e <f_unlink+0x166>
c000633c:	eb 87                	jmp    c00062c5 <f_unlink+0xcd>
c000633e:	85 f6                	test   esi,esi
c0006340:	75 0b                	jne    c000634d <f_unlink+0x155>
c0006342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006346:	e8 3d df ff ff       	call   c0004288 <sync_fs>
c000634b:	eb 11                	jmp    c000635e <f_unlink+0x166>
c000634d:	31 c9                	xor    ecx,ecx
c000634f:	89 f2                	mov    edx,esi
c0006351:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006355:	e8 78 ce ff ff       	call   c00031d2 <remove_chain>
c000635a:	85 c0                	test   eax,eax
c000635c:	74 e4                	je     c0006342 <f_unlink+0x14a>
c000635e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006362:	83 ec 0c             	sub    esp,0xc
c0006365:	53                   	push   ebx
c0006366:	e8 95 20 00 00       	call   c0008400 <ff_memfree>
c000636b:	83 c4 10             	add    esp,0x10
c000636e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006372:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006378:	5b                   	pop    ebx
c0006379:	5e                   	pop    esi
c000637a:	c3                   	ret    

c000637b <f_mkdir>:
c000637b:	57                   	push   edi
c000637c:	b9 02 00 00 00       	mov    ecx,0x2
c0006381:	56                   	push   esi
c0006382:	53                   	push   ebx
c0006383:	83 c4 80             	add    esp,0xffffff80
c0006386:	8d 54 24 08          	lea    edx,[esp+0x8]
c000638a:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006391:	e8 79 c0 ff ff       	call   c000240f <mount_volume>
c0006396:	89 c3                	mov    ebx,eax
c0006398:	85 c0                	test   eax,eax
c000639a:	0f 85 fe 01 00 00    	jne    c000659e <f_mkdir+0x223>
c00063a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063a4:	bb 11 00 00 00       	mov    ebx,0x11
c00063a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063ad:	83 ec 0c             	sub    esp,0xc
c00063b0:	68 60 04 00 00       	push   0x460
c00063b5:	e8 2e 20 00 00       	call   c00083e8 <ff_memalloc>
c00063ba:	83 c4 10             	add    esp,0x10
c00063bd:	89 c7                	mov    edi,eax
c00063bf:	85 c0                	test   eax,eax
c00063c1:	0f 84 d7 01 00 00    	je     c000659e <f_mkdir+0x223>
c00063c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cb:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063d1:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063de:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063e2:	e8 9e e7 ff ff       	call   c0004b85 <follow_path>
c00063e7:	89 c3                	mov    ebx,eax
c00063e9:	85 c0                	test   eax,eax
c00063eb:	74 3e                	je     c000642b <f_mkdir+0xb0>
c00063ed:	83 f8 04             	cmp    eax,0x4
c00063f0:	75 3e                	jne    c0006430 <f_mkdir+0xb5>
c00063f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063f6:	31 d2                	xor    edx,edx
c00063f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006400:	e8 ce cb ff ff       	call   c0002fd3 <create_chain>
c0006405:	89 c6                	mov    esi,eax
c0006407:	85 c0                	test   eax,eax
c0006409:	74 0c                	je     c0006417 <f_mkdir+0x9c>
c000640b:	bb 02 00 00 00       	mov    ebx,0x2
c0006410:	83 f8 01             	cmp    eax,0x1
c0006413:	74 07                	je     c000641c <f_mkdir+0xa1>
c0006415:	eb 2a                	jmp    c0006441 <f_mkdir+0xc6>
c0006417:	bb 07 00 00 00       	mov    ebx,0x7
c000641c:	31 c9                	xor    ecx,ecx
c000641e:	89 f2                	mov    edx,esi
c0006420:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006424:	e8 a9 cd ff ff       	call   c00031d2 <remove_chain>
c0006429:	eb 05                	jmp    c0006430 <f_mkdir+0xb5>
c000642b:	bb 08 00 00 00       	mov    ebx,0x8
c0006430:	83 ec 0c             	sub    esp,0xc
c0006433:	57                   	push   edi
c0006434:	e8 c7 1f 00 00       	call   c0008400 <ff_memfree>
c0006439:	83 c4 10             	add    esp,0x10
c000643c:	e9 5d 01 00 00       	jmp    c000659e <f_mkdir+0x223>
c0006441:	bb 01 00 00 00       	mov    ebx,0x1
c0006446:	83 f8 ff             	cmp    eax,0xffffffff
c0006449:	74 d1                	je     c000641c <f_mkdir+0xa1>
c000644b:	89 f2                	mov    edx,esi
c000644d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006451:	e8 c4 ce ff ff       	call   c000331a <dir_clear>
c0006456:	89 c3                	mov    ebx,eax
c0006458:	85 c0                	test   eax,eax
c000645a:	75 c0                	jne    c000641c <f_mkdir+0xa1>
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006463:	74 69                	je     c00064ce <f_mkdir+0x153>
c0006465:	b9 0b 00 00 00       	mov    ecx,0xb
c000646a:	83 c0 54             	add    eax,0x54
c000646d:	ba 20 00 00 00       	mov    edx,0x20
c0006472:	e8 9c b5 ff ff       	call   c0001a13 <mem_set>
c0006477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006480:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006484:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006488:	83 c0 6a             	add    eax,0x6a
c000648b:	e8 65 b5 ff ff       	call   c00019f5 <st_dword>
c0006490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006494:	89 f1                	mov    ecx,esi
c0006496:	8d 50 54             	lea    edx,[eax+0x54]
c0006499:	e8 85 e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c000649e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a2:	b9 20 00 00 00       	mov    ecx,0x20
c00064a7:	8d 50 54             	lea    edx,[eax+0x54]
c00064aa:	83 c0 74             	add    eax,0x74
c00064ad:	e8 4c b5 ff ff       	call   c00019fe <mem_cpy>
c00064b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064ba:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064be:	8d 50 74             	lea    edx,[eax+0x74]
c00064c1:	e8 5d e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c00064c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ca:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064ce:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064d2:	e8 2f db ff ff       	call   c0004006 <dir_register>
c00064d7:	89 c3                	mov    ebx,eax
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 3b ff ff ff    	jne    c000641c <f_mkdir+0xa1>
c00064e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e8:	75 74                	jne    c000655e <f_mkdir+0x1e3>
c00064ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064ed:	ba 00 00 21 50       	mov    edx,0x50210000
c00064f2:	83 c0 0c             	add    eax,0xc
c00064f5:	e8 fb b4 ff ff       	call   c00019f5 <st_dword>
c00064fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fe:	89 f2                	mov    edx,esi
c0006500:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006503:	83 c0 34             	add    eax,0x34
c0006506:	e8 ea b4 ff ff       	call   c00019f5 <st_dword>
c000650b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006513:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006516:	c1 e2 09             	shl    edx,0x9
c0006519:	83 c0 38             	add    eax,0x38
c000651c:	e8 d4 b4 ff ff       	call   c00019f5 <st_dword>
c0006521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006525:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006529:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000652c:	c1 e2 09             	shl    edx,0x9
c000652f:	83 c0 28             	add    eax,0x28
c0006532:	e8 be b4 ff ff       	call   c00019f5 <st_dword>
c0006537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000653e:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006542:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006545:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006549:	8d 44 24 34          	lea    eax,[esp+0x34]
c000654d:	e8 8b d3 ff ff       	call   c00038dd <store_xdir>
c0006552:	89 c3                	mov    ebx,eax
c0006554:	85 c0                	test   eax,eax
c0006556:	0f 85 d4 fe ff ff    	jne    c0006430 <f_mkdir+0xb5>
c000655c:	eb 30                	jmp    c000658e <f_mkdir+0x213>
c000655e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006562:	ba 00 00 21 50       	mov    edx,0x50210000
c0006567:	83 c0 16             	add    eax,0x16
c000656a:	e8 86 b4 ff ff       	call   c00019f5 <st_dword>
c000656f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006573:	89 f1                	mov    ecx,esi
c0006575:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006579:	e8 a5 e5 ff ff       	call   c0004b23 <st_clust.isra.1>
c000657e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006582:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000658e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006592:	e8 f1 dc ff ff       	call   c0004288 <sync_fs>
c0006597:	89 c3                	mov    ebx,eax
c0006599:	e9 92 fe ff ff       	jmp    c0006430 <f_mkdir+0xb5>
c000659e:	83 ec 80             	sub    esp,0xffffff80
c00065a1:	89 d8                	mov    eax,ebx
c00065a3:	5b                   	pop    ebx
c00065a4:	5e                   	pop    esi
c00065a5:	5f                   	pop    edi
c00065a6:	c3                   	ret    

c00065a7 <f_rename>:
c00065a7:	55                   	push   ebp
c00065a8:	57                   	push   edi
c00065a9:	56                   	push   esi
c00065aa:	53                   	push   ebx
c00065ab:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065b1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065b8:	e8 a4 b9 ff ff       	call   c0001f61 <get_ldnumber>
c00065bd:	b9 02 00 00 00       	mov    ecx,0x2
c00065c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065c6:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065cd:	e8 3d be ff ff       	call   c000240f <mount_volume>
c00065d2:	85 c0                	test   eax,eax
c00065d4:	0f 85 b5 02 00 00    	jne    c000688f <f_rename+0x2e8>
c00065da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065de:	83 ec 0c             	sub    esp,0xc
c00065e1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065e5:	68 60 04 00 00       	push   0x460
c00065ea:	e8 f9 1d 00 00       	call   c00083e8 <ff_memalloc>
c00065ef:	83 c4 10             	add    esp,0x10
c00065f2:	89 c3                	mov    ebx,eax
c00065f4:	b8 11 00 00 00       	mov    eax,0x11
c00065f9:	85 db                	test   ebx,ebx
c00065fb:	0f 84 8e 02 00 00    	je     c000688f <f_rename+0x2e8>
c0006601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006605:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000660b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000660e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006611:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006618:	8d 44 24 58          	lea    eax,[esp+0x58]
c000661c:	e8 64 e5 ff ff       	call   c0004b85 <follow_path>
c0006621:	85 c0                	test   eax,eax
c0006623:	0f 85 52 02 00 00    	jne    c000687b <f_rename+0x2d4>
c0006629:	b8 06 00 00 00       	mov    eax,0x6
c000662e:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006636:	0f 85 3f 02 00 00    	jne    c000687b <f_rename+0x2d4>
c000663c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006640:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006643:	0f 85 05 01 00 00    	jne    c000674e <f_rename+0x1a7>
c0006649:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000664c:	b9 40 00 00 00       	mov    ecx,0x40
c0006651:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006655:	e8 a4 b3 ff ff       	call   c00019fe <mem_cpy>
c000665a:	b9 4c 00 00 00       	mov    ecx,0x4c
c000665f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006663:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000666a:	e8 8f b3 ff ff       	call   c00019fe <mem_cpy>
c000666f:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006676:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000667d:	e8 03 e5 ff ff       	call   c0004b85 <follow_path>
c0006682:	85 c0                	test   eax,eax
c0006684:	75 29                	jne    c00066af <f_rename+0x108>
c0006686:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000668a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006691:	74 0a                	je     c000669d <f_rename+0xf6>
c0006693:	b8 08 00 00 00       	mov    eax,0x8
c0006698:	e9 de 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000669d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066a4:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ab:	75 e6                	jne    c0006693 <f_rename+0xec>
c00066ad:	eb 09                	jmp    c00066b8 <f_rename+0x111>
c00066af:	83 f8 04             	cmp    eax,0x4
c00066b2:	0f 85 c3 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066b8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066bf:	e8 42 d9 ff ff       	call   c0004006 <dir_register>
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 af 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066d3:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066d6:	89 c5                	mov    ebp,eax
c00066d8:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066df:	8d 46 24             	lea    eax,[esi+0x24]
c00066e2:	e8 98 b2 ff ff       	call   c000197f <ld_word>
c00066e7:	b9 40 00 00 00       	mov    ecx,0x40
c00066ec:	89 c7                	mov    edi,eax
c00066ee:	8d 54 24 18          	lea    edx,[esp+0x18]
c00066f2:	89 f0                	mov    eax,esi
c00066f4:	e8 05 b3 ff ff       	call   c00019fe <mem_cpy>
c00066f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066fd:	89 e9                	mov    ecx,ebp
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006705:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006710:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006713:	0f b7 d7             	movzx  edx,di
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	83 c0 24             	add    eax,0x24
c000671c:	e8 d0 b2 ff ff       	call   c00019f1 <st_word>
c0006721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006725:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006728:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000672b:	a8 10                	test   al,0x10
c000672d:	75 06                	jne    c0006735 <f_rename+0x18e>
c000672f:	83 c8 20             	or     eax,0x20
c0006732:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006735:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673c:	e8 9c d1 ff ff       	call   c00038dd <store_xdir>
c0006741:	85 c0                	test   eax,eax
c0006743:	0f 84 1c 01 00 00    	je     c0006865 <f_rename+0x2be>
c0006749:	e9 2d 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000674e:	b9 20 00 00 00       	mov    ecx,0x20
c0006753:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000675a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000675e:	e8 9b b2 ff ff       	call   c00019fe <mem_cpy>
c0006763:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006768:	8d 54 24 58          	lea    edx,[esp+0x58]
c000676c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006773:	e8 86 b2 ff ff       	call   c00019fe <mem_cpy>
c0006778:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000677f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006786:	e8 fa e3 ff ff       	call   c0004b85 <follow_path>
c000678b:	85 c0                	test   eax,eax
c000678d:	75 27                	jne    c00067b6 <f_rename+0x20f>
c000678f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006793:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000679a:	0f 85 f3 fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067a0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067a7:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067ae:	0f 85 df fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067b4:	eb 09                	jmp    c00067bf <f_rename+0x218>
c00067b6:	83 f8 04             	cmp    eax,0x4
c00067b9:	0f 85 bc 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067bf:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c6:	e8 3b d8 ff ff       	call   c0004006 <dir_register>
c00067cb:	85 c0                	test   eax,eax
c00067cd:	0f 85 a8 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067d3:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067da:	b9 13 00 00 00       	mov    ecx,0x13
c00067df:	8d 46 0d             	lea    eax,[esi+0xd]
c00067e2:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067e6:	e8 13 b2 ff ff       	call   c00019fe <mem_cpy>
c00067eb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067ef:	a8 10                	test   al,0x10
c00067f1:	75 03                	jne    c00067f6 <f_rename+0x24f>
c00067f3:	83 c8 20             	or     eax,0x20
c00067f6:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00067f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006801:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006805:	74 5e                	je     c0006865 <f_rename+0x2be>
c0006807:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000680e:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006812:	74 51                	je     c0006865 <f_rename+0x2be>
c0006814:	89 f2                	mov    edx,esi
c0006816:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000681a:	8a 07                	mov    al,BYTE PTR [edi]
c000681c:	e8 d9 e2 ff ff       	call   c0004afa <ld_clust.isra.0>
c0006821:	89 c2                	mov    edx,eax
c0006823:	89 f8                	mov    eax,edi
c0006825:	e8 ee b3 ff ff       	call   c0001c18 <clst2sect>
c000682a:	89 c6                	mov    esi,eax
c000682c:	89 d1                	mov    ecx,edx
c000682e:	b8 02 00 00 00       	mov    eax,0x2
c0006833:	09 f2                	or     edx,esi
c0006835:	74 44                	je     c000687b <f_rename+0x2d4>
c0006837:	89 f2                	mov    edx,esi
c0006839:	89 f8                	mov    eax,edi
c000683b:	e8 1d b9 ff ff       	call   c000215d <move_window>
c0006840:	85 c0                	test   eax,eax
c0006842:	75 37                	jne    c000687b <f_rename+0x2d4>
c0006844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006848:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000684c:	75 17                	jne    c0006865 <f_rename+0x2be>
c000684e:	8d 50 74             	lea    edx,[eax+0x74]
c0006851:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006858:	e8 c6 e2 ff ff       	call   c0004b23 <st_clust.isra.1>
c000685d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006861:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006865:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006869:	e8 f4 d0 ff ff       	call   c0003962 <dir_remove>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 09                	jne    c000687b <f_rename+0x2d4>
c0006872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006876:	e8 0d da ff ff       	call   c0004288 <sync_fs>
c000687b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000687f:	83 ec 0c             	sub    esp,0xc
c0006882:	53                   	push   ebx
c0006883:	e8 78 1b 00 00       	call   c0008400 <ff_memfree>
c0006888:	83 c4 10             	add    esp,0x10
c000688b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000688f:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006895:	5b                   	pop    ebx
c0006896:	5e                   	pop    esi
c0006897:	5f                   	pop    edi
c0006898:	5d                   	pop    ebp
c0006899:	c3                   	ret    

c000689a <f_chmod>:
c000689a:	57                   	push   edi
c000689b:	b9 02 00 00 00       	mov    ecx,0x2
c00068a0:	56                   	push   esi
c00068a1:	53                   	push   ebx
c00068a2:	83 ec 60             	sub    esp,0x60
c00068a5:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068a9:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068ad:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068b1:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068b5:	e8 55 bb ff ff       	call   c000240f <mount_volume>
c00068ba:	85 c0                	test   eax,eax
c00068bc:	0f 85 af 00 00 00    	jne    c0006971 <f_chmod+0xd7>
c00068c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068c6:	83 ec 0c             	sub    esp,0xc
c00068c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068cd:	68 60 04 00 00       	push   0x460
c00068d2:	e8 11 1b 00 00       	call   c00083e8 <ff_memalloc>
c00068d7:	83 c4 10             	add    esp,0x10
c00068da:	89 c6                	mov    esi,eax
c00068dc:	b8 11 00 00 00       	mov    eax,0x11
c00068e1:	85 f6                	test   esi,esi
c00068e3:	0f 84 88 00 00 00    	je     c0006971 <f_chmod+0xd7>
c00068e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068ed:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00068f3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00068f6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00068fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006901:	e8 7f e2 ff ff       	call   c0004b85 <follow_path>
c0006906:	85 c0                	test   eax,eax
c0006908:	75 53                	jne    c000695d <f_chmod+0xc3>
c000690a:	b8 06 00 00 00       	mov    eax,0x6
c000690f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006914:	75 47                	jne    c000695d <f_chmod+0xc3>
c0006916:	89 f9                	mov    ecx,edi
c0006918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000691c:	83 e1 27             	and    ecx,0x27
c000691f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006922:	75 1d                	jne    c0006941 <f_chmod+0xa7>
c0006924:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006927:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692a:	21 cb                	and    ebx,ecx
c000692c:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692f:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006932:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006936:	e8 a2 cf ff ff       	call   c00038dd <store_xdir>
c000693b:	85 c0                	test   eax,eax
c000693d:	75 1e                	jne    c000695d <f_chmod+0xc3>
c000693f:	eb 13                	jmp    c0006954 <f_chmod+0xba>
c0006941:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006945:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006948:	21 cb                	and    ebx,ecx
c000694a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000694d:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006950:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	e8 2b d9 ff ff       	call   c0004288 <sync_fs>
c000695d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006961:	83 ec 0c             	sub    esp,0xc
c0006964:	56                   	push   esi
c0006965:	e8 96 1a 00 00       	call   c0008400 <ff_memfree>
c000696a:	83 c4 10             	add    esp,0x10
c000696d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006971:	83 c4 60             	add    esp,0x60
c0006974:	5b                   	pop    ebx
c0006975:	5e                   	pop    esi
c0006976:	5f                   	pop    edi
c0006977:	c3                   	ret    

c0006978 <f_utime>:
c0006978:	56                   	push   esi
c0006979:	b9 02 00 00 00       	mov    ecx,0x2
c000697e:	53                   	push   ebx
c000697f:	83 ec 64             	sub    esp,0x64
c0006982:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006986:	8d 54 24 10          	lea    edx,[esp+0x10]
c000698a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000698e:	e8 7c ba ff ff       	call   c000240f <mount_volume>
c0006993:	85 c0                	test   eax,eax
c0006995:	0f 85 b5 00 00 00    	jne    c0006a50 <f_utime+0xd8>
c000699b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699f:	83 ec 0c             	sub    esp,0xc
c00069a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069a6:	68 60 04 00 00       	push   0x460
c00069ab:	e8 38 1a 00 00       	call   c00083e8 <ff_memalloc>
c00069b0:	83 c4 10             	add    esp,0x10
c00069b3:	89 c3                	mov    ebx,eax
c00069b5:	b8 11 00 00 00       	mov    eax,0x11
c00069ba:	85 db                	test   ebx,ebx
c00069bc:	0f 84 8e 00 00 00    	je     c0006a50 <f_utime+0xd8>
c00069c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069c6:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069cc:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069d2:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069da:	e8 a6 e1 ff ff       	call   c0004b85 <follow_path>
c00069df:	85 c0                	test   eax,eax
c00069e1:	75 59                	jne    c0006a3c <f_utime+0xc4>
c00069e3:	b8 06 00 00 00       	mov    eax,0x6
c00069e8:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069ed:	75 4d                	jne    c0006a3c <f_utime+0xc4>
c00069ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f3:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c00069f7:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c00069fb:	c1 e2 10             	shl    edx,0x10
c00069fe:	09 ca                	or     edx,ecx
c0006a00:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a03:	75 1a                	jne    c0006a1f <f_utime+0xa7>
c0006a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a08:	83 c0 0c             	add    eax,0xc
c0006a0b:	e8 e5 af ff ff       	call   c00019f5 <st_dword>
c0006a10:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a14:	e8 c4 ce ff ff       	call   c00038dd <store_xdir>
c0006a19:	85 c0                	test   eax,eax
c0006a1b:	75 1f                	jne    c0006a3c <f_utime+0xc4>
c0006a1d:	eb 14                	jmp    c0006a33 <f_utime+0xbb>
c0006a1f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a23:	83 c0 16             	add    eax,0x16
c0006a26:	e8 ca af ff ff       	call   c00019f5 <st_dword>
c0006a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a2f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a37:	e8 4c d8 ff ff       	call   c0004288 <sync_fs>
c0006a3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a40:	83 ec 0c             	sub    esp,0xc
c0006a43:	53                   	push   ebx
c0006a44:	e8 b7 19 00 00       	call   c0008400 <ff_memfree>
c0006a49:	83 c4 10             	add    esp,0x10
c0006a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a50:	83 c4 64             	add    esp,0x64
c0006a53:	5b                   	pop    ebx
c0006a54:	5e                   	pop    esi
c0006a55:	c3                   	ret    

c0006a56 <f_getlabel>:
c0006a56:	55                   	push   ebp
c0006a57:	31 c9                	xor    ecx,ecx
c0006a59:	57                   	push   edi
c0006a5a:	56                   	push   esi
c0006a5b:	53                   	push   ebx
c0006a5c:	83 ec 6c             	sub    esp,0x6c
c0006a5f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a63:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a6a:	e8 a0 b9 ff ff       	call   c000240f <mount_volume>
c0006a6f:	89 c6                	mov    esi,eax
c0006a71:	85 c0                	test   eax,eax
c0006a73:	0f 85 c1 01 00 00    	jne    c0006c3a <f_getlabel+0x1e4>
c0006a79:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a81:	0f 84 5f 01 00 00    	je     c0006be6 <f_getlabel+0x190>
c0006a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8b:	31 d2                	xor    edx,edx
c0006a8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006a91:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006a99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9d:	e8 39 c4 ff ff       	call   c0002edb <dir_sdi>
c0006aa2:	85 c0                	test   eax,eax
c0006aa4:	0f 85 2d 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006aaa:	ba 01 00 00 00       	mov    edx,0x1
c0006aaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab3:	e8 33 cc ff ff       	call   c00036eb <dir_read>
c0006ab8:	85 c0                	test   eax,eax
c0006aba:	0f 85 17 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac7:	74 09                	je     c0006ad2 <f_getlabel+0x7c>
c0006ac9:	31 db                	xor    ebx,ebx
c0006acb:	31 c9                	xor    ecx,ecx
c0006acd:	e9 c8 00 00 00       	jmp    c0006b9a <f_getlabel+0x144>
c0006ad2:	31 ed                	xor    ebp,ebp
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	31 ff                	xor    edi,edi
c0006ad8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006adc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ae0:	39 fa                	cmp    edx,edi
c0006ae2:	76 4b                	jbe    c0006b2f <f_getlabel+0xd9>
c0006ae4:	47                   	inc    edi
c0006ae5:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ae8:	01 d0                	add    eax,edx
c0006aea:	e8 90 ae ff ff       	call   c000197f <ld_word>
c0006aef:	66 85 ed             	test   bp,bp
c0006af2:	75 0d                	jne    c0006b01 <f_getlabel+0xab>
c0006af4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006afa:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006aff:	76 28                	jbe    c0006b29 <f_getlabel+0xd3>
c0006b01:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b08:	89 e9                	mov    ecx,ebp
c0006b0a:	01 da                	add    edx,ebx
c0006b0c:	c1 e1 10             	shl    ecx,0x10
c0006b0f:	0f b7 c0             	movzx  eax,ax
c0006b12:	09 c8                	or     eax,ecx
c0006b14:	b9 04 00 00 00       	mov    ecx,0x4
c0006b19:	e8 01 b0 ff ff       	call   c0001b1f <put_utf>
c0006b1e:	84 c0                	test   al,al
c0006b20:	74 0b                	je     c0006b2d <f_getlabel+0xd7>
c0006b22:	0f b6 c0             	movzx  eax,al
c0006b25:	01 c3                	add    ebx,eax
c0006b27:	31 c0                	xor    eax,eax
c0006b29:	89 c5                	mov    ebp,eax
c0006b2b:	eb ab                	jmp    c0006ad8 <f_getlabel+0x82>
c0006b2d:	31 db                	xor    ebx,ebx
c0006b2f:	66 85 ed             	test   bp,bp
c0006b32:	74 02                	je     c0006b36 <f_getlabel+0xe0>
c0006b34:	31 db                	xor    ebx,ebx
c0006b36:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b3d:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b41:	e9 a0 00 00 00       	jmp    c0006be6 <f_getlabel+0x190>
c0006b46:	83 ff 0b             	cmp    edi,0xb
c0006b49:	74 11                	je     c0006b5c <f_getlabel+0x106>
c0006b4b:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b54:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b57:	c1 e0 08             	shl    eax,0x8
c0006b5a:	09 c2                	or     edx,eax
c0006b5c:	0f b7 d2             	movzx  edx,dx
c0006b5f:	50                   	push   eax
c0006b60:	50                   	push   eax
c0006b61:	68 b5 01 00 00       	push   0x1b5
c0006b66:	52                   	push   edx
c0006b67:	e8 44 19 00 00       	call   c00084b0 <ff_oem2uni>
c0006b6c:	83 c4 10             	add    esp,0x10
c0006b6f:	66 85 c0             	test   ax,ax
c0006b72:	74 46                	je     c0006bba <f_getlabel+0x164>
c0006b74:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b7b:	0f b7 c0             	movzx  eax,ax
c0006b7e:	01 da                	add    edx,ebx
c0006b80:	b9 04 00 00 00       	mov    ecx,0x4
c0006b85:	e8 95 af ff ff       	call   c0001b1f <put_utf>
c0006b8a:	84 c0                	test   al,al
c0006b8c:	74 2c                	je     c0006bba <f_getlabel+0x164>
c0006b8e:	0f b6 c0             	movzx  eax,al
c0006b91:	01 c3                	add    ebx,eax
c0006b93:	83 ff 0b             	cmp    edi,0xb
c0006b96:	74 24                	je     c0006bbc <f_getlabel+0x166>
c0006b98:	89 f9                	mov    ecx,edi
c0006b9a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006b9e:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ba1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ba6:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006baf:	e8 9f ae ff ff       	call   c0001a53 <dbc_1st>
c0006bb4:	85 c0                	test   eax,eax
c0006bb6:	74 a4                	je     c0006b5c <f_getlabel+0x106>
c0006bb8:	eb 8c                	jmp    c0006b46 <f_getlabel+0xf0>
c0006bba:	31 db                	xor    ebx,ebx
c0006bbc:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bc3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bc6:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bcd:	74 17                	je     c0006be6 <f_getlabel+0x190>
c0006bcf:	4b                   	dec    ebx
c0006bd0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006bd3:	74 ee                	je     c0006bc3 <f_getlabel+0x16d>
c0006bd5:	eb 0f                	jmp    c0006be6 <f_getlabel+0x190>
c0006bd7:	83 f8 04             	cmp    eax,0x4
c0006bda:	75 5c                	jne    c0006c38 <f_getlabel+0x1e2>
c0006bdc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006be3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006be6:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bee:	74 4a                	je     c0006c3a <f_getlabel+0x1e4>
c0006bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006bf7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006bfa:	e8 5e b5 ff ff       	call   c000215d <move_window>
c0006bff:	89 c6                	mov    esi,eax
c0006c01:	85 c0                	test   eax,eax
c0006c03:	75 35                	jne    c0006c3a <f_getlabel+0x1e4>
c0006c05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c09:	b8 43 00 00 00       	mov    eax,0x43
c0006c0e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c10:	80 f9 03             	cmp    cl,0x3
c0006c13:	74 0f                	je     c0006c24 <f_getlabel+0x1ce>
c0006c15:	31 c0                	xor    eax,eax
c0006c17:	80 f9 04             	cmp    cl,0x4
c0006c1a:	0f 94 c0             	sete   al
c0006c1d:	48                   	dec    eax
c0006c1e:	83 e0 c3             	and    eax,0xffffffc3
c0006c21:	83 c0 64             	add    eax,0x64
c0006c24:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c28:	e8 5f ad ff ff       	call   c000198c <ld_dword>
c0006c2d:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c34:	89 07                	mov    DWORD PTR [edi],eax
c0006c36:	eb 02                	jmp    c0006c3a <f_getlabel+0x1e4>
c0006c38:	89 c6                	mov    esi,eax
c0006c3a:	83 c4 6c             	add    esp,0x6c
c0006c3d:	89 f0                	mov    eax,esi
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	5f                   	pop    edi
c0006c42:	5d                   	pop    ebp
c0006c43:	c3                   	ret    

c0006c44 <f_setlabel>:
c0006c44:	56                   	push   esi
c0006c45:	b9 02 00 00 00       	mov    ecx,0x2
c0006c4a:	53                   	push   ebx
c0006c4b:	83 ec 74             	sub    esp,0x74
c0006c4e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c52:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c59:	e8 b1 b7 ff ff       	call   c000240f <mount_volume>
c0006c5e:	89 c6                	mov    esi,eax
c0006c60:	85 c0                	test   eax,eax
c0006c62:	0f 85 41 02 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006c68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c6f:	0f 85 8e 00 00 00    	jne    c0006d03 <f_setlabel+0xbf>
c0006c75:	b9 16 00 00 00       	mov    ecx,0x16
c0006c7a:	31 d2                	xor    edx,edx
c0006c7c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c80:	31 db                	xor    ebx,ebx
c0006c82:	e8 8c ad ff ff       	call   c0001a13 <mem_set>
c0006c87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c8e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006c91:	0f 86 0a 01 00 00    	jbe    c0006da1 <f_setlabel+0x15d>
c0006c97:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c9e:	e8 b6 ad ff ff       	call   c0001a59 <tchar2uni>
c0006ca3:	89 c6                	mov    esi,eax
c0006ca5:	3d ff ff 00 00       	cmp    eax,0xffff
c0006caa:	76 2a                	jbe    c0006cd6 <f_setlabel+0x92>
c0006cac:	83 f8 ff             	cmp    eax,0xffffffff
c0006caf:	74 05                	je     c0006cb6 <f_setlabel+0x72>
c0006cb1:	83 fb 09             	cmp    ebx,0x9
c0006cb4:	76 0a                	jbe    c0006cc0 <f_setlabel+0x7c>
c0006cb6:	be 06 00 00 00       	mov    esi,0x6
c0006cbb:	e9 e9 01 00 00       	jmp    c0006ea9 <f_setlabel+0x265>
c0006cc0:	89 c2                	mov    edx,eax
c0006cc2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cc6:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cc9:	c1 ea 10             	shr    edx,0x10
c0006ccc:	01 c8                	add    eax,ecx
c0006cce:	43                   	inc    ebx
c0006ccf:	e8 1d ad ff ff       	call   c00019f1 <st_word>
c0006cd4:	eb 04                	jmp    c0006cda <f_setlabel+0x96>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	74 dc                	je     c0006cb6 <f_setlabel+0x72>
c0006cda:	89 f2                	mov    edx,esi
c0006cdc:	b8 17 24 02 c0       	mov    eax,0xc0022417
c0006ce1:	e8 5b ad ff ff       	call   c0001a41 <chk_chr>
c0006ce6:	85 c0                	test   eax,eax
c0006ce8:	75 cc                	jne    c0006cb6 <f_setlabel+0x72>
c0006cea:	83 fb 0a             	cmp    ebx,0xa
c0006ced:	77 c7                	ja     c0006cb6 <f_setlabel+0x72>
c0006cef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cf2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cf6:	0f b7 d6             	movzx  edx,si
c0006cf9:	01 c8                	add    eax,ecx
c0006cfb:	43                   	inc    ebx
c0006cfc:	e8 f0 ac ff ff       	call   c00019f1 <st_word>
c0006d01:	eb 84                	jmp    c0006c87 <f_setlabel+0x43>
c0006d03:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d08:	ba 20 00 00 00       	mov    edx,0x20
c0006d0d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d11:	31 db                	xor    ebx,ebx
c0006d13:	e8 fb ac ff ff       	call   c0001a13 <mem_set>
c0006d18:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d1f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d22:	76 60                	jbe    c0006d84 <f_setlabel+0x140>
c0006d24:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2b:	e8 29 ad ff ff       	call   c0001a59 <tchar2uni>
c0006d30:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d35:	0f 87 7b ff ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006d3b:	83 ec 0c             	sub    esp,0xc
c0006d3e:	50                   	push   eax
c0006d3f:	e8 e0 17 00 00       	call   c0008524 <ff_wtoupper>
c0006d44:	5a                   	pop    edx
c0006d45:	59                   	pop    ecx
c0006d46:	68 b5 01 00 00       	push   0x1b5
c0006d4b:	50                   	push   eax
c0006d4c:	e8 c7 16 00 00       	call   c0008418 <ff_uni2oem>
c0006d51:	83 c4 10             	add    esp,0x10
c0006d54:	89 c6                	mov    esi,eax
c0006d56:	66 85 c0             	test   ax,ax
c0006d59:	0f 84 57 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d5f:	0f b7 d0             	movzx  edx,ax
c0006d62:	b8 10 24 02 c0       	mov    eax,0xc0022410
c0006d67:	e8 d5 ac ff ff       	call   c0001a41 <chk_chr>
c0006d6c:	85 c0                	test   eax,eax
c0006d6e:	0f 85 42 ff ff ff    	jne    c0006cb6 <f_setlabel+0x72>
c0006d74:	66 81 fe ff 00       	cmp    si,0xff
c0006d79:	0f 87 14 01 00 00    	ja     c0006e93 <f_setlabel+0x24f>
c0006d7f:	e9 fa 00 00 00       	jmp    c0006e7e <f_setlabel+0x23a>
c0006d84:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d89:	0f 84 27 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d8f:	85 db                	test   ebx,ebx
c0006d91:	74 0e                	je     c0006da1 <f_setlabel+0x15d>
c0006d93:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006d96:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006d9b:	75 04                	jne    c0006da1 <f_setlabel+0x15d>
c0006d9d:	89 c3                	mov    ebx,eax
c0006d9f:	eb ee                	jmp    c0006d8f <f_setlabel+0x14b>
c0006da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006da5:	31 d2                	xor    edx,edx
c0006da7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006db3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006db7:	e8 1f c1 ff ff       	call   c0002edb <dir_sdi>
c0006dbc:	89 c6                	mov    esi,eax
c0006dbe:	85 c0                	test   eax,eax
c0006dc0:	0f 85 e3 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006dc6:	ba 01 00 00 00       	mov    edx,0x1
c0006dcb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dcf:	e8 17 c9 ff ff       	call   c00036eb <dir_read>
c0006dd4:	85 c0                	test   eax,eax
c0006dd6:	75 21                	jne    c0006df9 <f_setlabel+0x1b5>
c0006dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ddc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006de0:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006de3:	74 5d                	je     c0006e42 <f_setlabel+0x1fe>
c0006de5:	85 db                	test   ebx,ebx
c0006de7:	74 0b                	je     c0006df4 <f_setlabel+0x1b0>
c0006de9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006df2:	eb 70                	jmp    c0006e64 <f_setlabel+0x220>
c0006df4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006df7:	eb 70                	jmp    c0006e69 <f_setlabel+0x225>
c0006df9:	83 f8 04             	cmp    eax,0x4
c0006dfc:	75 7c                	jne    c0006e7a <f_setlabel+0x236>
c0006dfe:	85 db                	test   ebx,ebx
c0006e00:	0f 84 a3 00 00 00    	je     c0006ea9 <f_setlabel+0x265>
c0006e06:	ba 01 00 00 00       	mov    edx,0x1
c0006e0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e0f:	e8 51 ca ff ff       	call   c0003865 <dir_alloc>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	85 c0                	test   eax,eax
c0006e18:	0f 85 8b 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006e1e:	31 d2                	xor    edx,edx
c0006e20:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e24:	b9 20 00 00 00       	mov    ecx,0x20
c0006e29:	e8 e5 ab ff ff       	call   c0001a13 <mem_set>
c0006e2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e32:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e39:	75 18                	jne    c0006e53 <f_setlabel+0x20f>
c0006e3b:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e3e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e42:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e45:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e4e:	83 c0 02             	add    eax,0x2
c0006e51:	eb 9b                	jmp    c0006dee <f_setlabel+0x1aa>
c0006e53:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e57:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e5c:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	e8 95 ab ff ff       	call   c00019fe <mem_cpy>
c0006e69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e6d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e75:	e8 0e d4 ff ff       	call   c0004288 <sync_fs>
c0006e7a:	89 c6                	mov    esi,eax
c0006e7c:	eb 2b                	jmp    c0006ea9 <f_setlabel+0x265>
c0006e7e:	83 fb 0a             	cmp    ebx,0xa
c0006e81:	0f 87 2f fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e87:	89 f0                	mov    eax,esi
c0006e89:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e8d:	43                   	inc    ebx
c0006e8e:	e9 85 fe ff ff       	jmp    c0006d18 <f_setlabel+0xd4>
c0006e93:	83 fb 09             	cmp    ebx,0x9
c0006e96:	0f 87 1a fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e9c:	89 f0                	mov    eax,esi
c0006e9e:	66 c1 e8 08          	shr    ax,0x8
c0006ea2:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ea6:	43                   	inc    ebx
c0006ea7:	eb de                	jmp    c0006e87 <f_setlabel+0x243>
c0006ea9:	89 f0                	mov    eax,esi
c0006eab:	83 c4 74             	add    esp,0x74
c0006eae:	5b                   	pop    ebx
c0006eaf:	5e                   	pop    esi
c0006eb0:	c3                   	ret    

c0006eb1 <f_expand>:
c0006eb1:	55                   	push   ebp
c0006eb2:	57                   	push   edi
c0006eb3:	56                   	push   esi
c0006eb4:	53                   	push   ebx
c0006eb5:	83 ec 3c             	sub    esp,0x3c
c0006eb8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006ebc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0006ec0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006ec4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ec8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ecc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0006ed4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006ed8:	89 d8                	mov    eax,ebx
c0006eda:	e8 a3 b1 ff ff       	call   c0002082 <validate>
c0006edf:	89 c5                	mov    ebp,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 f4 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ee9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eed:	85 ed                	test   ebp,ebp
c0006eef:	0f 85 e8 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006efd:	75 0a                	jne    c0006f09 <f_expand+0x58>
c0006eff:	bd 07 00 00 00       	mov    ebp,0x7
c0006f04:	e9 d4 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006f09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0006f0c:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c0006f0f:	75 ee                	jne    c0006eff <f_expand+0x4e>
c0006f11:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006f15:	74 e8                	je     c0006eff <f_expand+0x4e>
c0006f17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0006f1b:	8a 0e                	mov    cl,BYTE PTR [esi]
c0006f1d:	80 f9 04             	cmp    cl,0x4
c0006f20:	74 07                	je     c0006f29 <f_expand+0x78>
c0006f22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006f27:	77 d6                	ja     c0006eff <f_expand+0x4e>
c0006f29:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0006f2d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0006f31:	c1 e0 09             	shl    eax,0x9
c0006f34:	8d 50 ff             	lea    edx,[eax-0x1]
c0006f37:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0006f3b:	0f 95 c2             	setne  dl
c0006f3e:	0f b6 d2             	movzx  edx,dl
c0006f41:	89 d7                	mov    edi,edx
c0006f43:	31 d2                	xor    edx,edx
c0006f45:	52                   	push   edx
c0006f46:	50                   	push   eax
c0006f47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4f:	e8 5c a6 01 00       	call   c00215b0 <__udivdi3>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	01 f8                	add    eax,edi
c0006f59:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0006f5d:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0006f60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f64:	83 ff 01             	cmp    edi,0x1
c0006f67:	76 05                	jbe    c0006f6e <f_expand+0xbd>
c0006f69:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0006f6c:	77 05                	ja     c0006f73 <f_expand+0xc2>
c0006f6e:	bf 02 00 00 00       	mov    edi,0x2
c0006f73:	80 f9 04             	cmp    cl,0x4
c0006f76:	75 19                	jne    c0006f91 <f_expand+0xe0>
c0006f78:	89 f0                	mov    eax,esi
c0006f7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006f7e:	89 fa                	mov    edx,edi
c0006f80:	e8 f3 b9 ff ff       	call   c0002978 <find_bitmap>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	85 c0                	test   eax,eax
c0006f89:	0f 84 70 ff ff ff    	je     c0006eff <f_expand+0x4e>
c0006f8f:	eb 7f                	jmp    c0007010 <f_expand+0x15f>
c0006f91:	89 fe                	mov    esi,edi
c0006f93:	89 f9                	mov    ecx,edi
c0006f95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006f9d:	89 ca                	mov    edx,ecx
c0006f9f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006fa3:	89 d8                	mov    eax,ebx
c0006fa5:	e8 3b bd ff ff       	call   c0002ce5 <get_fat>
c0006faa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006fb2:	41                   	inc    ecx
c0006fb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006fb7:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0006fba:	77 05                	ja     c0006fc1 <f_expand+0x110>
c0006fbc:	b9 02 00 00 00       	mov    ecx,0x2
c0006fc1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0006fc6:	74 3e                	je     c0007006 <f_expand+0x155>
c0006fc8:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0006fcd:	75 0a                	jne    c0006fd9 <f_expand+0x128>
c0006fcf:	bd 01 00 00 00       	mov    ebp,0x1
c0006fd4:	e9 04 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006fd9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0006fde:	75 13                	jne    c0006ff3 <f_expand+0x142>
c0006fe0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006fe4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006fe8:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0006fec:	75 0f                	jne    c0006ffd <f_expand+0x14c>
c0006fee:	e9 ce 00 00 00       	jmp    c00070c1 <f_expand+0x210>
c0006ff3:	89 ce                	mov    esi,ecx
c0006ff5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006ffd:	39 f9                	cmp    ecx,edi
c0006fff:	75 9c                	jne    c0006f9d <f_expand+0xec>
c0007001:	e9 f9 fe ff ff       	jmp    c0006eff <f_expand+0x4e>
c0007006:	bd 02 00 00 00       	mov    ebp,0x2
c000700b:	e9 cd 00 00 00       	jmp    c00070dd <f_expand+0x22c>
c0007010:	83 f8 ff             	cmp    eax,0xffffffff
c0007013:	74 ba                	je     c0006fcf <f_expand+0x11e>
c0007015:	8d 7e ff             	lea    edi,[esi-0x1]
c0007018:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000701c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007020:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007025:	74 51                	je     c0007078 <f_expand+0x1c7>
c0007027:	83 ec 0c             	sub    esp,0xc
c000702a:	89 f2                	mov    edx,esi
c000702c:	6a 01                	push   0x1
c000702e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007032:	e8 f4 b9 ff ff       	call   c0002a2b <change_bitmap>
c0007037:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000703b:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000703f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 2e                	je     c0007078 <f_expand+0x1c7>
c000704a:	eb 71                	jmp    c00070bd <f_expand+0x20c>
c000704c:	83 c9 ff             	or     ecx,0xffffffff
c000704f:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007054:	74 03                	je     c0007059 <f_expand+0x1a8>
c0007056:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007059:	89 fa                	mov    edx,edi
c000705b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000705f:	e8 7c ba ff ff       	call   c0002ae0 <put_fat>
c0007064:	85 c0                	test   eax,eax
c0007066:	75 55                	jne    c00070bd <f_expand+0x20c>
c0007068:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000706c:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007070:	47                   	inc    edi
c0007071:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007076:	75 d4                	jne    c000704c <f_expand+0x19b>
c0007078:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000707c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007080:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007085:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007088:	74 53                	je     c00070dd <f_expand+0x22c>
c000708a:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c000708d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007091:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007095:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000709d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00070a0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00070a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00070a6:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00070a9:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00070ac:	39 ca                	cmp    edx,ecx
c00070ae:	77 2d                	ja     c00070dd <f_expand+0x22c>
c00070b0:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00070b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00070b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00070bb:	eb 20                	jmp    c00070dd <f_expand+0x22c>
c00070bd:	89 c5                	mov    ebp,eax
c00070bf:	eb 1c                	jmp    c00070dd <f_expand+0x22c>
c00070c1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00070c6:	74 0c                	je     c00070d4 <f_expand+0x223>
c00070c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070cc:	89 f7                	mov    edi,esi
c00070ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00070d2:	eb 9d                	jmp    c0007071 <f_expand+0x1c0>
c00070d4:	8d 46 ff             	lea    eax,[esi-0x1]
c00070d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070db:	eb 9b                	jmp    c0007078 <f_expand+0x1c7>
c00070dd:	83 c4 3c             	add    esp,0x3c
c00070e0:	89 e8                	mov    eax,ebp
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	5f                   	pop    edi
c00070e5:	5d                   	pop    ebp
c00070e6:	c3                   	ret    

c00070e7 <f_forward>:
c00070e7:	55                   	push   ebp
c00070e8:	57                   	push   edi
c00070e9:	56                   	push   esi
c00070ea:	53                   	push   ebx
c00070eb:	83 ec 2c             	sub    esp,0x2c
c00070ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00070f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007100:	89 d8                	mov    eax,ebx
c0007102:	e8 7b af ff ff       	call   c0002082 <validate>
c0007107:	89 c5                	mov    ebp,eax
c0007109:	85 c0                	test   eax,eax
c000710b:	0f 85 aa 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c0007111:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007115:	85 ed                	test   ebp,ebp
c0007117:	0f 85 9e 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c000711d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007121:	0f 84 8f 01 00 00    	je     c00072b6 <f_forward+0x1cf>
c0007127:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000712a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000712d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007130:	bf 00 00 00 00       	mov    edi,0x0
c0007135:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007138:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000713c:	89 d1                	mov    ecx,edx
c000713e:	19 f9                	sbb    ecx,edi
c0007140:	0f 83 cf 00 00 00    	jae    c0007215 <f_forward+0x12e>
c0007146:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000714a:	e9 c6 00 00 00       	jmp    c0007215 <f_forward+0x12e>
c000714f:	50                   	push   eax
c0007150:	50                   	push   eax
c0007151:	6a 00                	push   0x0
c0007153:	6a 00                	push   0x0
c0007155:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007159:	83 c4 10             	add    esp,0x10
c000715c:	85 c0                	test   eax,eax
c000715e:	0f 84 57 01 00 00    	je     c00072bb <f_forward+0x1d4>
c0007164:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007167:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000716b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000716e:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007172:	89 d7                	mov    edi,edx
c0007174:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007177:	89 c6                	mov    esi,eax
c0007179:	0f ac fe 09          	shrd   esi,edi,0x9
c000717d:	21 ce                	and    esi,ecx
c000717f:	89 c1                	mov    ecx,eax
c0007181:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007187:	0f 84 98 00 00 00    	je     c0007225 <f_forward+0x13e>
c000718d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007191:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007194:	89 c8                	mov    eax,ecx
c0007196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000719a:	e8 79 aa ff ff       	call   c0001c18 <clst2sect>
c000719f:	89 d7                	mov    edi,edx
c00071a1:	09 c7                	or     edi,eax
c00071a3:	0f 84 9e 00 00 00    	je     c0007247 <f_forward+0x160>
c00071a9:	31 ff                	xor    edi,edi
c00071ab:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00071ae:	01 c6                	add    esi,eax
c00071b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00071b4:	11 d7                	adc    edi,edx
c00071b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00071b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00071bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00071c0:	39 fa                	cmp    edx,edi
c00071c2:	0f 85 a2 00 00 00    	jne    c000726a <f_forward+0x183>
c00071c8:	39 f0                	cmp    eax,esi
c00071ca:	0f 85 9a 00 00 00    	jne    c000726a <f_forward+0x183>
c00071d0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d3:	ba 00 02 00 00       	mov    edx,0x200
c00071d8:	25 ff 01 00 00       	and    eax,0x1ff
c00071dd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00071e1:	29 c2                	sub    edx,eax
c00071e3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00071e6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00071e9:	39 d1                	cmp    ecx,edx
c00071eb:	76 02                	jbe    c00071ef <f_forward+0x108>
c00071ed:	89 d1                	mov    ecx,edx
c00071ef:	8d 73 50             	lea    esi,[ebx+0x50]
c00071f2:	52                   	push   edx
c00071f3:	01 c6                	add    esi,eax
c00071f5:	52                   	push   edx
c00071f6:	51                   	push   ecx
c00071f7:	56                   	push   esi
c00071f8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	85 c0                	test   eax,eax
c0007201:	74 44                	je     c0007247 <f_forward+0x160>
c0007203:	31 ff                	xor    edi,edi
c0007205:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007208:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000720b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000720f:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007213:	01 07                	add    DWORD PTR [edi],eax
c0007215:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000721a:	0f 85 2f ff ff ff    	jne    c000714f <f_forward+0x68>
c0007220:	e9 96 00 00 00       	jmp    c00072bb <f_forward+0x1d4>
c0007225:	85 f6                	test   esi,esi
c0007227:	0f 85 60 ff ff ff    	jne    c000718d <f_forward+0xa6>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	75 05                	jne    c0007238 <f_forward+0x151>
c0007233:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007236:	eb 0a                	jmp    c0007242 <f_forward+0x15b>
c0007238:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000723b:	89 d8                	mov    eax,ebx
c000723d:	e8 a3 ba ff ff       	call   c0002ce5 <get_fat>
c0007242:	83 f8 01             	cmp    eax,0x1
c0007245:	77 0b                	ja     c0007252 <f_forward+0x16b>
c0007247:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000724b:	bd 02 00 00 00       	mov    ebp,0x2
c0007250:	eb 69                	jmp    c00072bb <f_forward+0x1d4>
c0007252:	83 f8 ff             	cmp    eax,0xffffffff
c0007255:	75 0b                	jne    c0007262 <f_forward+0x17b>
c0007257:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000725b:	bd 01 00 00 00       	mov    ebp,0x1
c0007260:	eb 59                	jmp    c00072bb <f_forward+0x1d4>
c0007262:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007265:	e9 23 ff ff ff       	jmp    c000718d <f_forward+0xa6>
c000726a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000726e:	79 20                	jns    c0007290 <f_forward+0x1a9>
c0007270:	83 ec 0c             	sub    esp,0xc
c0007273:	6a 01                	push   0x1
c0007275:	52                   	push   edx
c0007276:	50                   	push   eax
c0007277:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000727b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000727f:	50                   	push   eax
c0007280:	e8 c5 a6 ff ff       	call   c000194a <disk_write>
c0007285:	83 c4 20             	add    esp,0x20
c0007288:	85 c0                	test   eax,eax
c000728a:	75 cb                	jne    c0007257 <f_forward+0x170>
c000728c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007290:	83 ec 0c             	sub    esp,0xc
c0007293:	6a 01                	push   0x1
c0007295:	57                   	push   edi
c0007296:	56                   	push   esi
c0007297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000729b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000729f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00072a3:	50                   	push   eax
c00072a4:	e8 8b a6 ff ff       	call   c0001934 <disk_read>
c00072a9:	83 c4 20             	add    esp,0x20
c00072ac:	85 c0                	test   eax,eax
c00072ae:	0f 84 1c ff ff ff    	je     c00071d0 <f_forward+0xe9>
c00072b4:	eb a1                	jmp    c0007257 <f_forward+0x170>
c00072b6:	bd 07 00 00 00       	mov    ebp,0x7
c00072bb:	83 c4 2c             	add    esp,0x2c
c00072be:	89 e8                	mov    eax,ebp
c00072c0:	5b                   	pop    ebx
c00072c1:	5e                   	pop    esi
c00072c2:	5f                   	pop    edi
c00072c3:	5d                   	pop    ebp
c00072c4:	c3                   	ret    

c00072c5 <f_mkfs>:
c00072c5:	55                   	push   ebp
c00072c6:	57                   	push   edi
c00072c7:	56                   	push   esi
c00072c8:	53                   	push   ebx
c00072c9:	bb 0b 00 00 00       	mov    ebx,0xb
c00072ce:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00072d4:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00072db:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00072e2:	e8 7a ac ff ff       	call   c0001f61 <get_ldnumber>
c00072e7:	85 c0                	test   eax,eax
c00072e9:	0f 88 ec 10 00 00    	js     c00083db <f_mkfs+0x1116>
c00072ef:	8b 14 85 e0 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9c20]
c00072f6:	85 d2                	test   edx,edx
c00072f8:	74 03                	je     c00072fd <f_mkfs+0x38>
c00072fa:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00072fd:	85 f6                	test   esi,esi
c00072ff:	75 05                	jne    c0007306 <f_mkfs+0x41>
c0007301:	be 00 24 02 c0       	mov    esi,0xc0022400
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	0f b6 c0             	movzx  eax,al
c000730c:	bb 03 00 00 00       	mov    ebx,0x3
c0007311:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007319:	e8 13 a6 ff ff       	call   c0001931 <disk_initialize>
c000731e:	83 c4 10             	add    esp,0x10
c0007321:	a8 01                	test   al,0x1
c0007323:	0f 85 b2 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007329:	bb 0a 00 00 00       	mov    ebx,0xa
c000732e:	a8 04                	test   al,0x4
c0007330:	0f 85 a5 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007336:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007339:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000733d:	85 c0                	test   eax,eax
c000733f:	75 20                	jne    c0007361 <f_mkfs+0x9c>
c0007341:	51                   	push   ecx
c0007342:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007346:	50                   	push   eax
c0007347:	6a 03                	push   0x3
c0007349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734d:	e8 0e a6 ff ff       	call   c0001960 <disk_ioctl>
c0007352:	83 c4 10             	add    esp,0x10
c0007355:	85 c0                	test   eax,eax
c0007357:	74 08                	je     c0007361 <f_mkfs+0x9c>
c0007359:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007361:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007365:	8d 42 ff             	lea    eax,[edx-0x1]
c0007368:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000736d:	77 04                	ja     c0007373 <f_mkfs+0xae>
c000736f:	85 c2                	test   edx,eax
c0007371:	74 08                	je     c000737b <f_mkfs+0xb6>
c0007373:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000737b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000737e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007382:	48                   	dec    eax
c0007383:	3c 01                	cmp    al,0x1
c0007385:	76 05                	jbe    c000738c <f_mkfs+0xc7>
c0007387:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000738c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000738f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007393:	48                   	dec    eax
c0007394:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007399:	77 07                	ja     c00073a2 <f_mkfs+0xdd>
c000739b:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00073a0:	74 08                	je     c00073aa <f_mkfs+0xe5>
c00073a2:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00073aa:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00073ad:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00073b3:	77 07                	ja     c00073bc <f_mkfs+0xf7>
c00073b5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00073b8:	85 d8                	test   eax,ebx
c00073ba:	74 02                	je     c00073be <f_mkfs+0xf9>
c00073bc:	31 db                	xor    ebx,ebx
c00073be:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00073c9:	77 0a                	ja     c00073d5 <f_mkfs+0x110>
c00073cb:	bb 11 00 00 00       	mov    ebx,0x11
c00073d0:	e9 06 10 00 00       	jmp    c00083db <f_mkfs+0x1116>
c00073d5:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00073dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00073de:	85 ed                	test   ebp,ebp
c00073e0:	75 1e                	jne    c0007400 <f_mkfs+0x13b>
c00073e2:	83 ec 0c             	sub    esp,0xc
c00073e5:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00073ec:	25 00 fe ff ff       	and    eax,0xfffffe00
c00073f1:	50                   	push   eax
c00073f2:	e8 f1 0f 00 00       	call   c00083e8 <ff_memalloc>
c00073f7:	83 c4 10             	add    esp,0x10
c00073fa:	89 c5                	mov    ebp,eax
c00073fc:	85 c0                	test   eax,eax
c00073fe:	74 cb                	je     c00073cb <f_mkfs+0x106>
c0007400:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007408:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007410:	52                   	push   edx
c0007411:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007415:	50                   	push   eax
c0007416:	6a 01                	push   0x1
c0007418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741c:	e8 3f a5 ff ff       	call   c0001960 <disk_ioctl>
c0007421:	83 c4 10             	add    esp,0x10
c0007424:	85 c0                	test   eax,eax
c0007426:	0f 85 4a 0f 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000742c:	89 f1                	mov    ecx,esi
c000742e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007436:	83 e1 0f             	and    ecx,0xf
c0007439:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007441:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007445:	83 e6 08             	and    esi,0x8
c0007448:	75 56                	jne    c00074a0 <f_mkfs+0x1db>
c000744a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000744e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007452:	83 ff 00             	cmp    edi,0x0
c0007455:	76 20                	jbe    c0007477 <f_mkfs+0x1b2>
c0007457:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000745c:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007464:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000746a:	83 d7 ff             	adc    edi,0xffffffff
c000746d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007471:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007475:	eb 21                	jmp    c0007498 <f_mkfs+0x1d3>
c0007477:	ba 3f 00 00 00       	mov    edx,0x3f
c000747c:	39 f2                	cmp    edx,esi
c000747e:	19 f8                	sbb    eax,edi
c0007480:	73 1e                	jae    c00074a0 <f_mkfs+0x1db>
c0007482:	83 c6 c1             	add    esi,0xffffffc1
c0007485:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000748d:	83 d7 ff             	adc    edi,0xffffffff
c0007490:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007494:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007498:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00074a4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00074a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00074ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074af:	31 c0                	xor    eax,eax
c00074b1:	ba 7f 00 00 00       	mov    edx,0x7f
c00074b6:	89 c7                	mov    edi,eax
c00074b8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00074bb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00074bf:	0f 83 c5 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c00074c5:	89 df                	mov    edi,ebx
c00074c7:	c1 ef 09             	shr    edi,0x9
c00074ca:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00074ce:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00074d5:	c1 ef 09             	shr    edi,0x9
c00074d8:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00074dd:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00074e1:	74 29                	je     c000750c <f_mkfs+0x247>
c00074e3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00074e9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00074ee:	0f 97 c2             	seta   dl
c00074f1:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00074f4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00074f8:	0f 92 c0             	setb   al
c00074fb:	08 c2                	or     dl,al
c00074fd:	75 5b                	jne    c000755a <f_mkfs+0x295>
c00074ff:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007503:	83 e0 07             	and    eax,0x7
c0007506:	3c 04                	cmp    al,0x4
c0007508:	74 50                	je     c000755a <f_mkfs+0x295>
c000750a:	eb 1b                	jmp    c0007527 <f_mkfs+0x262>
c000750c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007511:	0f 87 73 0a 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007517:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000751d:	76 08                	jbe    c0007527 <f_mkfs+0x262>
c000751f:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007527:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000752b:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000752f:	83 e0 01             	and    eax,0x1
c0007532:	80 e1 02             	and    cl,0x2
c0007535:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007539:	74 0d                	je     c0007548 <f_mkfs+0x283>
c000753b:	84 c0                	test   al,al
c000753d:	0f 84 53 09 00 00    	je     c0007e96 <f_mkfs+0xbd1>
c0007543:	e9 12 08 00 00       	jmp    c0007d5a <f_mkfs+0xa95>
c0007548:	bb 13 00 00 00       	mov    ebx,0x13
c000754d:	84 c0                	test   al,al
c000754f:	0f 85 05 08 00 00    	jne    c0007d5a <f_mkfs+0xa95>
c0007555:	e9 39 0e 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c000755a:	31 c0                	xor    eax,eax
c000755c:	ba ff 0f 00 00       	mov    edx,0xfff
c0007561:	89 c7                	mov    edi,eax
c0007563:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007566:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756a:	0f 83 1a 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c0007570:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007576:	77 39                	ja     c00075b1 <f_mkfs+0x2ec>
c0007578:	ba ff ff 07 00       	mov    edx,0x7ffff
c000757d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007585:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007588:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000758c:	73 08                	jae    c0007596 <f_mkfs+0x2d1>
c000758e:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007596:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000759b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000759e:	b8 00 00 00 00       	mov    eax,0x0
c00075a3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a7:	73 08                	jae    c00075b1 <f_mkfs+0x2ec>
c00075a9:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00075b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b9:	83 c0 20             	add    eax,0x20
c00075bc:	83 d2 00             	adc    edx,0x0
c00075bf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075c3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00075c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075cb:	31 d2                	xor    edx,edx
c00075cd:	31 ff                	xor    edi,edi
c00075cf:	52                   	push   edx
c00075d0:	89 fb                	mov    ebx,edi
c00075d2:	50                   	push   eax
c00075d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075db:	e8 d0 9f 01 00       	call   c00215b0 <__udivdi3>
c00075e0:	83 c4 10             	add    esp,0x10
c00075e3:	c1 e0 02             	shl    eax,0x2
c00075e6:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00075ea:	05 07 02 00 00       	add    eax,0x207
c00075ef:	89 f1                	mov    ecx,esi
c00075f1:	c1 e8 09             	shr    eax,0x9
c00075f4:	83 c1 ff             	add    ecx,0xffffffff
c00075f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00075fb:	83 d3 ff             	adc    ebx,0xffffffff
c00075fe:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007602:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007606:	31 d2                	xor    edx,edx
c0007608:	01 c8                	add    eax,ecx
c000760a:	11 da                	adc    edx,ebx
c000760c:	89 c1                	mov    ecx,eax
c000760e:	f7 de                	neg    esi
c0007610:	89 d0                	mov    eax,edx
c0007612:	83 d7 00             	adc    edi,0x0
c0007615:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007619:	f7 df                	neg    edi
c000761b:	21 f1                	and    ecx,esi
c000761d:	21 f8                	and    eax,edi
c000761f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007623:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007627:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000762b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000762f:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007636:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000763a:	0f ac d0 01          	shrd   eax,edx,0x1
c000763e:	89 df                	mov    edi,ebx
c0007640:	d1 ea                	shr    edx,1
c0007642:	39 c1                	cmp    ecx,eax
c0007644:	19 d7                	sbb    edi,edx
c0007646:	0f 83 3e 09 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c000764c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007650:	31 d2                	xor    edx,edx
c0007652:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007656:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000765e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007661:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007665:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007669:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000766d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007671:	83 f8 0f             	cmp    eax,0xf
c0007674:	0f 86 10 09 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c000767a:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007682:	0f 87 02 09 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007688:	31 d2                	xor    edx,edx
c000768a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000768e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007696:	83 c0 07             	add    eax,0x7
c0007699:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00076a1:	c1 e8 03             	shr    eax,0x3
c00076a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00076ab:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00076af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076b3:	c1 e0 09             	shl    eax,0x9
c00076b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ba:	48                   	dec    eax
c00076bb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076bf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00076c3:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00076c7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076cb:	31 d2                	xor    edx,edx
c00076cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00076d1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00076d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076dc:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00076e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00076e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00076e9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076ed:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00076f1:	31 ff                	xor    edi,edi
c00076f3:	31 f6                	xor    esi,esi
c00076f5:	31 db                	xor    ebx,ebx
c00076f7:	85 ff                	test   edi,edi
c00076f9:	74 05                	je     c0007700 <f_mkfs+0x43b>
c00076fb:	4f                   	dec    edi
c00076fc:	74 44                	je     c0007742 <f_mkfs+0x47d>
c00076fe:	eb 4f                	jmp    c000774f <f_mkfs+0x48a>
c0007700:	83 ec 0c             	sub    esp,0xc
c0007703:	0f b7 c3             	movzx  eax,bx
c0007706:	50                   	push   eax
c0007707:	e8 18 0e 00 00       	call   c0008524 <ff_wtoupper>
c000770c:	83 c4 10             	add    esp,0x10
c000770f:	89 c1                	mov    ecx,eax
c0007711:	8d 53 01             	lea    edx,[ebx+0x1]
c0007714:	66 39 c3             	cmp    bx,ax
c0007717:	75 3e                	jne    c0007757 <f_mkfs+0x492>
c0007719:	be 01 00 00 00       	mov    esi,0x1
c000771e:	89 df                	mov    edi,ebx
c0007720:	66 01 f7             	add    di,si
c0007723:	75 07                	jne    c000772c <f_mkfs+0x467>
c0007725:	83 fe 7f             	cmp    esi,0x7f
c0007728:	77 31                	ja     c000775b <f_mkfs+0x496>
c000772a:	eb 16                	jmp    c0007742 <f_mkfs+0x47d>
c000772c:	83 ec 0c             	sub    esp,0xc
c000772f:	0f b7 ff             	movzx  edi,di
c0007732:	57                   	push   edi
c0007733:	e8 ec 0d 00 00       	call   c0008524 <ff_wtoupper>
c0007738:	83 c4 10             	add    esp,0x10
c000773b:	39 c7                	cmp    edi,eax
c000773d:	75 e6                	jne    c0007725 <f_mkfs+0x460>
c000773f:	46                   	inc    esi
c0007740:	eb dc                	jmp    c000771e <f_mkfs+0x459>
c0007742:	31 c0                	xor    eax,eax
c0007744:	89 d9                	mov    ecx,ebx
c0007746:	4e                   	dec    esi
c0007747:	0f 95 c0             	setne  al
c000774a:	43                   	inc    ebx
c000774b:	89 c7                	mov    edi,eax
c000774d:	eb 14                	jmp    c0007763 <f_mkfs+0x49e>
c000774f:	89 f1                	mov    ecx,esi
c0007751:	01 f3                	add    ebx,esi
c0007753:	31 ff                	xor    edi,edi
c0007755:	eb 0c                	jmp    c0007763 <f_mkfs+0x49e>
c0007757:	89 d3                	mov    ebx,edx
c0007759:	eb 08                	jmp    c0007763 <f_mkfs+0x49e>
c000775b:	bf 02 00 00 00       	mov    edi,0x2
c0007760:	83 c9 ff             	or     ecx,0xffffffff
c0007763:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007767:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000776a:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000776e:	0f b6 c1             	movzx  eax,cl
c0007771:	e8 04 a7 ff ff       	call   c0001e7a <xsum32>
c0007776:	66 c1 e9 08          	shr    cx,0x8
c000777a:	89 c2                	mov    edx,eax
c000777c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000777f:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007783:	0f b7 c1             	movzx  eax,cx
c0007786:	e8 ef a6 ff ff       	call   c0001e7a <xsum32>
c000778b:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007790:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007794:	66 85 db             	test   bx,bx
c0007797:	74 1f                	je     c00077b8 <f_mkfs+0x4f3>
c0007799:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000779c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00077a3:	83 c0 02             	add    eax,0x2
c00077a6:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00077ac:	39 c2                	cmp    edx,eax
c00077ae:	74 08                	je     c00077b8 <f_mkfs+0x4f3>
c00077b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00077b3:	e9 3f ff ff ff       	jmp    c00076f7 <f_mkfs+0x432>
c00077b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077bb:	83 ec 0c             	sub    esp,0xc
c00077be:	05 01 02 00 00       	add    eax,0x201
c00077c3:	c1 e8 09             	shr    eax,0x9
c00077c6:	50                   	push   eax
c00077c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00077cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077cf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077d3:	55                   	push   ebp
c00077d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d8:	e8 6d a1 ff ff       	call   c000194a <disk_write>
c00077dd:	83 c4 20             	add    esp,0x20
c00077e0:	85 c0                	test   eax,eax
c00077e2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00077e5:	0f 85 8b 0b 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00077eb:	89 d0                	mov    eax,edx
c00077ed:	31 d2                	xor    edx,edx
c00077ef:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00077f3:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077f7:	66 85 db             	test   bx,bx
c00077fa:	74 04                	je     c0007800 <f_mkfs+0x53b>
c00077fc:	31 c0                	xor    eax,eax
c00077fe:	eb b0                	jmp    c00077b0 <f_mkfs+0x4eb>
c0007800:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007804:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007808:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000780c:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007812:	31 d2                	xor    edx,edx
c0007814:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000781f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007823:	c1 eb 09             	shr    ebx,0x9
c0007826:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000782d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007831:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007835:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007839:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000783d:	8d 70 01             	lea    esi,[eax+0x1]
c0007840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007848:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000784f:	31 d2                	xor    edx,edx
c0007851:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007856:	89 04 24             	mov    DWORD PTR [esp],eax
c0007859:	89 c1                	mov    ecx,eax
c000785b:	89 e8                	mov    eax,ebp
c000785d:	e8 b1 a1 ff ff       	call   c0001a13 <mem_set>
c0007862:	31 c0                	xor    eax,eax
c0007864:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007867:	76 10                	jbe    c0007879 <f_mkfs+0x5b4>
c0007869:	83 fe 07             	cmp    esi,0x7
c000786c:	76 0b                	jbe    c0007879 <f_mkfs+0x5b4>
c000786e:	40                   	inc    eax
c000786f:	83 ee 08             	sub    esi,0x8
c0007872:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007877:	eb eb                	jmp    c0007864 <f_mkfs+0x59f>
c0007879:	b2 01                	mov    dl,0x1
c000787b:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000787f:	85 f6                	test   esi,esi
c0007881:	74 0c                	je     c000788f <f_mkfs+0x5ca>
c0007883:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007886:	76 07                	jbe    c000788f <f_mkfs+0x5ca>
c0007888:	08 11                	or     BYTE PTR [ecx],dl
c000788a:	4e                   	dec    esi
c000788b:	d1 e2                	shl    edx,1
c000788d:	eb f0                	jmp    c000787f <f_mkfs+0x5ba>
c000788f:	89 df                	mov    edi,ebx
c0007891:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007895:	76 04                	jbe    c000789b <f_mkfs+0x5d6>
c0007897:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000789b:	83 ec 0c             	sub    esp,0xc
c000789e:	57                   	push   edi
c000789f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a7:	55                   	push   ebp
c00078a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ac:	e8 99 a0 ff ff       	call   c000194a <disk_write>
c00078b1:	83 c4 20             	add    esp,0x20
c00078b4:	85 c0                	test   eax,eax
c00078b6:	0f 85 ba 0a 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00078bc:	31 d2                	xor    edx,edx
c00078be:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00078c2:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00078c6:	29 fb                	sub    ebx,edi
c00078c8:	0f 85 7a ff ff ff    	jne    c0007848 <f_mkfs+0x583>
c00078ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00078d2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00078da:	31 f6                	xor    esi,esi
c00078dc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078e0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	89 e8                	mov    eax,ebp
c00078e7:	e8 27 a1 ff ff       	call   c0001a13 <mem_set>
c00078ec:	31 c9                	xor    ecx,ecx
c00078ee:	85 db                	test   ebx,ebx
c00078f0:	75 40                	jne    c0007932 <f_mkfs+0x66d>
c00078f2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00078f7:	89 e8                	mov    eax,ebp
c00078f9:	bb 02 00 00 00       	mov    ebx,0x2
c00078fe:	e8 f2 a0 ff ff       	call   c00019f5 <st_dword>
c0007903:	8d 45 04             	lea    eax,[ebp+0x4]
c0007906:	83 ca ff             	or     edx,0xffffffff
c0007909:	e8 e7 a0 ff ff       	call   c00019f5 <st_dword>
c000790e:	b9 08 00 00 00       	mov    ecx,0x8
c0007913:	eb 1d                	jmp    c0007932 <f_mkfs+0x66d>
c0007915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007918:	76 3b                	jbe    c0007955 <f_mkfs+0x690>
c000791a:	43                   	inc    ebx
c000791b:	83 fe 01             	cmp    esi,0x1
c000791e:	89 da                	mov    edx,ebx
c0007920:	77 03                	ja     c0007925 <f_mkfs+0x660>
c0007922:	83 ca ff             	or     edx,0xffffffff
c0007925:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007929:	4e                   	dec    esi
c000792a:	e8 c6 a0 ff ff       	call   c00019f5 <st_dword>
c000792f:	83 c1 04             	add    ecx,0x4
c0007932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007936:	85 f6                	test   esi,esi
c0007938:	75 db                	jne    c0007915 <f_mkfs+0x650>
c000793a:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000793f:	77 14                	ja     c0007955 <f_mkfs+0x690>
c0007941:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007945:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000794c:	85 f6                	test   esi,esi
c000794e:	74 05                	je     c0007955 <f_mkfs+0x690>
c0007950:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007953:	77 dd                	ja     c0007932 <f_mkfs+0x66d>
c0007955:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007959:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000795d:	39 cf                	cmp    edi,ecx
c000795f:	76 02                	jbe    c0007963 <f_mkfs+0x69e>
c0007961:	89 cf                	mov    edi,ecx
c0007963:	83 ec 0c             	sub    esp,0xc
c0007966:	57                   	push   edi
c0007967:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796f:	55                   	push   ebp
c0007970:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007974:	e8 d1 9f ff ff       	call   c000194a <disk_write>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 f2 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007984:	31 d2                	xor    edx,edx
c0007986:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000798a:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000798e:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007992:	0f 85 48 ff ff ff    	jne    c00078e0 <f_mkfs+0x61b>
c0007998:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000799b:	31 d2                	xor    edx,edx
c000799d:	89 e8                	mov    eax,ebp
c000799f:	31 ff                	xor    edi,edi
c00079a1:	e8 6d a0 ff ff       	call   c0001a13 <mem_set>
c00079a6:	8d 45 34             	lea    eax,[ebp+0x34]
c00079a9:	ba 02 00 00 00       	mov    edx,0x2
c00079ae:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00079b2:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00079b6:	e8 3a a0 ff ff       	call   c00019f5 <st_dword>
c00079bb:	8d 45 38             	lea    eax,[ebp+0x38]
c00079be:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00079c2:	e8 2e a0 ff ff       	call   c00019f5 <st_dword>
c00079c7:	8d 45 44             	lea    eax,[ebp+0x44]
c00079ca:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00079ce:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00079d2:	e8 1e a0 ff ff       	call   c00019f5 <st_dword>
c00079d7:	8d 45 54             	lea    eax,[ebp+0x54]
c00079da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00079de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079e2:	83 c2 02             	add    edx,0x2
c00079e5:	e8 0b a0 ff ff       	call   c00019f5 <st_dword>
c00079ea:	8d 45 58             	lea    eax,[ebp+0x58]
c00079ed:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00079f1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00079f5:	e8 fb 9f ff ff       	call   c00019f5 <st_dword>
c00079fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079fe:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a03:	89 c6                	mov    esi,eax
c0007a05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a09:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a10:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a14:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a1b:	39 cb                	cmp    ebx,ecx
c0007a1d:	76 02                	jbe    c0007a21 <f_mkfs+0x75c>
c0007a1f:	89 cb                	mov    ebx,ecx
c0007a21:	83 ec 0c             	sub    esp,0xc
c0007a24:	53                   	push   ebx
c0007a25:	57                   	push   edi
c0007a26:	56                   	push   esi
c0007a27:	55                   	push   ebp
c0007a28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2c:	e8 19 9f ff ff       	call   c000194a <disk_write>
c0007a31:	83 c4 20             	add    esp,0x20
c0007a34:	85 c0                	test   eax,eax
c0007a36:	0f 85 3a 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007a3c:	31 d2                	xor    edx,edx
c0007a3e:	b9 00 02 00 00       	mov    ecx,0x200
c0007a43:	89 e8                	mov    eax,ebp
c0007a45:	e8 c9 9f ff ff       	call   c0001a13 <mem_set>
c0007a4a:	31 d2                	xor    edx,edx
c0007a4c:	01 de                	add    esi,ebx
c0007a4e:	11 d7                	adc    edi,edx
c0007a50:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007a53:	75 bf                	jne    c0007a14 <f_mkfs+0x74f>
c0007a55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007a59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007a5d:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007a65:	b9 00 02 00 00       	mov    ecx,0x200
c0007a6a:	31 d2                	xor    edx,edx
c0007a6c:	89 e8                	mov    eax,ebp
c0007a6e:	e8 a0 9f ff ff       	call   c0001a13 <mem_set>
c0007a73:	b9 0b 00 00 00       	mov    ecx,0xb
c0007a78:	ba e0 24 02 c0       	mov    edx,0xc00224e0
c0007a7d:	89 e8                	mov    eax,ebp
c0007a7f:	e8 7a 9f ff ff       	call   c00019fe <mem_cpy>
c0007a84:	8d 45 40             	lea    eax,[ebp+0x40]
c0007a87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007a8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007a8f:	e8 64 9f ff ff       	call   c00019f8 <st_qword>
c0007a94:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007a98:	8d 45 48             	lea    eax,[ebp+0x48]
c0007a9b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007a9f:	e8 54 9f ff ff       	call   c00019f8 <st_qword>
c0007aa4:	8d 45 50             	lea    eax,[ebp+0x50]
c0007aa7:	ba 20 00 00 00       	mov    edx,0x20
c0007aac:	e8 44 9f ff ff       	call   c00019f5 <st_dword>
c0007ab1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ab5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ab9:	e8 37 9f ff ff       	call   c00019f5 <st_dword>
c0007abe:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007ac2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ac6:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007aca:	e8 26 9f ff ff       	call   c00019f5 <st_dword>
c0007acf:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ad2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ad6:	e8 1a 9f ff ff       	call   c00019f5 <st_dword>
c0007adb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007adf:	8d 50 02             	lea    edx,[eax+0x2]
c0007ae2:	8d 45 60             	lea    eax,[ebp+0x60]
c0007ae5:	e8 0b 9f ff ff       	call   c00019f5 <st_dword>
c0007aea:	8d 45 64             	lea    eax,[ebp+0x64]
c0007aed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007af2:	e8 fe 9e ff ff       	call   c00019f5 <st_dword>
c0007af7:	8d 45 68             	lea    eax,[ebp+0x68]
c0007afa:	ba 00 01 00 00       	mov    edx,0x100
c0007aff:	e8 ed 9e ff ff       	call   c00019f1 <st_word>
c0007b04:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b08:	b8 0a 00 00 00       	mov    eax,0xa
c0007b0d:	48                   	dec    eax
c0007b0e:	74 05                	je     c0007b15 <f_mkfs+0x850>
c0007b10:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b13:	eb f8                	jmp    c0007b0d <f_mkfs+0x848>
c0007b15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b19:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b21:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b25:	74 05                	je     c0007b2c <f_mkfs+0x867>
c0007b27:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b2a:	eb f5                	jmp    c0007b21 <f_mkfs+0x85c>
c0007b2c:	8d 45 78             	lea    eax,[ebp+0x78]
c0007b2f:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007b34:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007b3a:	31 db                	xor    ebx,ebx
c0007b3c:	e8 b0 9e ff ff       	call   c00019f1 <st_word>
c0007b41:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007b47:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007b4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b4f:	e8 9d 9e ff ff       	call   c00019f1 <st_word>
c0007b54:	31 c9                	xor    ecx,ecx
c0007b56:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007b59:	83 f8 01             	cmp    eax,0x1
c0007b5c:	76 13                	jbe    c0007b71 <f_mkfs+0x8ac>
c0007b5e:	83 f9 70             	cmp    ecx,0x70
c0007b61:	74 0e                	je     c0007b71 <f_mkfs+0x8ac>
c0007b63:	89 da                	mov    edx,ebx
c0007b65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007b6a:	e8 0b a3 ff ff       	call   c0001e7a <xsum32>
c0007b6f:	89 c3                	mov    ebx,eax
c0007b71:	41                   	inc    ecx
c0007b72:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b78:	75 dc                	jne    c0007b56 <f_mkfs+0x891>
c0007b7a:	89 f0                	mov    eax,esi
c0007b7c:	89 fa                	mov    edx,edi
c0007b7e:	83 c0 01             	add    eax,0x1
c0007b81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007b85:	83 d2 00             	adc    edx,0x0
c0007b88:	83 ec 0c             	sub    esp,0xc
c0007b8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007b8f:	6a 01                	push   0x1
c0007b91:	57                   	push   edi
c0007b92:	56                   	push   esi
c0007b93:	55                   	push   ebp
c0007b94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b98:	e8 ad 9d ff ff       	call   c000194a <disk_write>
c0007b9d:	83 c4 20             	add    esp,0x20
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	0f 85 ce 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007ba8:	31 d2                	xor    edx,edx
c0007baa:	b9 00 02 00 00       	mov    ecx,0x200
c0007baf:	89 e8                	mov    eax,ebp
c0007bb1:	e8 5d 9e ff ff       	call   c0001a13 <mem_set>
c0007bb6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bbe:	e8 2e 9e ff ff       	call   c00019f1 <st_word>
c0007bc3:	89 f0                	mov    eax,esi
c0007bc5:	89 fa                	mov    edx,edi
c0007bc7:	83 c0 09             	add    eax,0x9
c0007bca:	83 d2 00             	adc    edx,0x0
c0007bcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007bd4:	31 c9                	xor    ecx,ecx
c0007bd6:	41                   	inc    ecx
c0007bd7:	89 da                	mov    edx,ebx
c0007bd9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007bde:	e8 97 a2 ff ff       	call   c0001e7a <xsum32>
c0007be3:	89 c3                	mov    ebx,eax
c0007be5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007beb:	75 e9                	jne    c0007bd6 <f_mkfs+0x911>
c0007bed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007bf5:	83 c0 01             	add    eax,0x1
c0007bf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007bfc:	83 d2 00             	adc    edx,0x0
c0007bff:	83 ec 0c             	sub    esp,0xc
c0007c02:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c06:	6a 01                	push   0x1
c0007c08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c10:	55                   	push   ebp
c0007c11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c15:	e8 30 9d ff ff       	call   c000194a <disk_write>
c0007c1a:	83 c4 20             	add    esp,0x20
c0007c1d:	85 c0                	test   eax,eax
c0007c1f:	0f 85 51 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007c25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c29:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c2d:	75 09                	jne    c0007c38 <f_mkfs+0x973>
c0007c2f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c32:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007c36:	74 12                	je     c0007c4a <f_mkfs+0x985>
c0007c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c3c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007c48:	eb 8a                	jmp    c0007bd4 <f_mkfs+0x90f>
c0007c4a:	31 d2                	xor    edx,edx
c0007c4c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 bb 9d ff ff       	call   c0001a13 <mem_set>
c0007c58:	83 c6 0b             	add    esi,0xb
c0007c5b:	83 d7 00             	adc    edi,0x0
c0007c5e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007c62:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007c66:	31 c9                	xor    ecx,ecx
c0007c68:	41                   	inc    ecx
c0007c69:	89 da                	mov    edx,ebx
c0007c6b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c70:	e8 05 a2 ff ff       	call   c0001e7a <xsum32>
c0007c75:	89 c3                	mov    ebx,eax
c0007c77:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c7d:	75 e9                	jne    c0007c68 <f_mkfs+0x9a3>
c0007c7f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007c82:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007c86:	83 c6 01             	add    esi,0x1
c0007c89:	83 d7 00             	adc    edi,0x0
c0007c8c:	83 ec 0c             	sub    esp,0xc
c0007c8f:	6a 01                	push   0x1
c0007c91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c99:	55                   	push   ebp
c0007c9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c9e:	e8 a7 9c ff ff       	call   c000194a <disk_write>
c0007ca3:	83 c4 20             	add    esp,0x20
c0007ca6:	85 c0                	test   eax,eax
c0007ca8:	0f 85 c8 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007cae:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007cb2:	75 06                	jne    c0007cba <f_mkfs+0x9f5>
c0007cb4:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007cb8:	74 09                	je     c0007cc3 <f_mkfs+0x9fe>
c0007cba:	89 34 24             	mov    DWORD PTR [esp],esi
c0007cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007cc1:	eb a3                	jmp    c0007c66 <f_mkfs+0x9a1>
c0007cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cc7:	89 da                	mov    edx,ebx
c0007cc9:	01 e8                	add    eax,ebp
c0007ccb:	e8 25 9d ff ff       	call   c00019f5 <st_dword>
c0007cd0:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007cd5:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007cdd:	75 e4                	jne    c0007cc3 <f_mkfs+0x9fe>
c0007cdf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ce2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ce6:	83 c6 02             	add    esi,0x2
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	83 ec 0c             	sub    esp,0xc
c0007cef:	6a 01                	push   0x1
c0007cf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf9:	55                   	push   ebp
c0007cfa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cfe:	e8 47 9c ff ff       	call   c000194a <disk_write>
c0007d03:	83 c4 20             	add    esp,0x20
c0007d06:	85 c0                	test   eax,eax
c0007d08:	0f 85 68 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007d0e:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d13:	74 0d                	je     c0007d22 <f_mkfs+0xa5d>
c0007d15:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d1d:	e9 43 fd ff ff       	jmp    c0007a65 <f_mkfs+0x7a0>
c0007d22:	b1 07                	mov    cl,0x7
c0007d24:	e9 e3 05 00 00       	jmp    c000830c <f_mkfs+0x1047>
c0007d29:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007d2e:	0f 85 4f 02 00 00    	jne    c0007f83 <f_mkfs+0xcbe>
c0007d34:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d39:	0f 86 22 02 00 00    	jbe    c0007f61 <f_mkfs+0xc9c>
c0007d3f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d44:	0f 85 81 06 00 00    	jne    c00083cb <f_mkfs+0x1106>
c0007d4a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d51:	83 f8 40             	cmp    eax,0x40
c0007d54:	0f 87 51 06 00 00    	ja     c00083ab <f_mkfs+0x10e6>
c0007d5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d5e:	85 ff                	test   edi,edi
c0007d60:	75 1c                	jne    c0007d7e <f_mkfs+0xab9>
c0007d62:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d65:	ba e0 23 02 c0       	mov    edx,0xc00223e0
c0007d6a:	c1 e9 0c             	shr    ecx,0xc
c0007d6d:	bf 01 00 00 00       	mov    edi,0x1
c0007d72:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d75:	66 85 c0             	test   ax,ax
c0007d78:	0f 85 95 01 00 00    	jne    c0007f13 <f_mkfs+0xc4e>
c0007d7e:	31 d2                	xor    edx,edx
c0007d80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d83:	f7 f7                	div    edi
c0007d85:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d8a:	0f 86 95 01 00 00    	jbe    c0007f25 <f_mkfs+0xc60>
c0007d90:	83 c0 02             	add    eax,0x2
c0007d93:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007d98:	01 c0                	add    eax,eax
c0007d9a:	05 ff 01 00 00       	add    eax,0x1ff
c0007d9f:	be 01 00 00 00       	mov    esi,0x1
c0007da4:	c1 e8 09             	shr    eax,0x9
c0007da7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007dab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007daf:	c1 e0 05             	shl    eax,0x5
c0007db2:	c1 e8 09             	shr    eax,0x9
c0007db5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007db9:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007dbe:	31 d2                	xor    edx,edx
c0007dc0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007dc4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007dc8:	89 f0                	mov    eax,esi
c0007dca:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007dce:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007dd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007dd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007dda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007dde:	31 d2                	xor    edx,edx
c0007de0:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007de5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007de9:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ded:	31 db                	xor    ebx,ebx
c0007def:	01 c8                	add    eax,ecx
c0007df1:	11 da                	adc    edx,ebx
c0007df3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007df7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007dfb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007dff:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e03:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e07:	f7 da                	neg    edx
c0007e09:	21 d1                	and    ecx,edx
c0007e0b:	29 d9                	sub    ecx,ebx
c0007e0d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e12:	0f 85 20 01 00 00    	jne    c0007f38 <f_mkfs+0xc73>
c0007e18:	31 db                	xor    ebx,ebx
c0007e1a:	01 ce                	add    esi,ecx
c0007e1c:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e20:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e24:	31 d2                	xor    edx,edx
c0007e26:	89 f8                	mov    eax,edi
c0007e28:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e2c:	c1 e0 04             	shl    eax,0x4
c0007e2f:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007e33:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007e37:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007e3b:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007e3f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007e42:	19 d3                	sbb    ebx,edx
c0007e44:	0f 82 40 01 00 00    	jb     c0007f8a <f_mkfs+0xcc5>
c0007e4a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e51:	89 c8                	mov    eax,ecx
c0007e53:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007e58:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007e5c:	29 f0                	sub    eax,esi
c0007e5e:	29 d0                	sub    eax,edx
c0007e60:	31 d2                	xor    edx,edx
c0007e62:	f7 f7                	div    edi
c0007e64:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e69:	89 c3                	mov    ebx,eax
c0007e6b:	0f 85 b8 fe ff ff    	jne    c0007d29 <f_mkfs+0xa64>
c0007e71:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e76:	0f 87 1d 01 00 00    	ja     c0007f99 <f_mkfs+0xcd4>
c0007e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e81:	0f 85 03 01 00 00    	jne    c0007f8a <f_mkfs+0xcc5>
c0007e87:	83 ff 01             	cmp    edi,0x1
c0007e8a:	0f 86 fa 00 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c0007e90:	d1 ef                	shr    edi,1
c0007e92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007e96:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007e9a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e9d:	85 db                	test   ebx,ebx
c0007e9f:	75 2d                	jne    c0007ece <f_mkfs+0xc09>
c0007ea1:	89 cb                	mov    ebx,ecx
c0007ea3:	ba f0 23 02 c0       	mov    edx,0xc00223f0
c0007ea8:	c1 eb 11             	shr    ebx,0x11
c0007eab:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007eb3:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007eb6:	66 85 c0             	test   ax,ax
c0007eb9:	74 11                	je     c0007ecc <f_mkfs+0xc07>
c0007ebb:	83 c2 02             	add    edx,0x2
c0007ebe:	39 d8                	cmp    eax,ebx
c0007ec0:	77 0a                	ja     c0007ecc <f_mkfs+0xc07>
c0007ec2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007ec6:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007eca:	eb e7                	jmp    c0007eb3 <f_mkfs+0xbee>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	31 d2                	xor    edx,edx
c0007ed0:	89 c8                	mov    eax,ecx
c0007ed2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007ed6:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007edd:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007ee2:	c1 ea 09             	shr    edx,0x9
c0007ee5:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007eea:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007eee:	0f 87 96 00 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007ef4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ef8:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f00:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f04:	be 20 00 00 00       	mov    esi,0x20
c0007f09:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f0e:	e9 a6 fe ff ff       	jmp    c0007db9 <f_mkfs+0xaf4>
c0007f13:	83 c2 02             	add    edx,0x2
c0007f16:	39 c8                	cmp    eax,ecx
c0007f18:	0f 87 60 fe ff ff    	ja     c0007d7e <f_mkfs+0xab9>
c0007f1e:	01 ff                	add    edi,edi
c0007f20:	e9 4d fe ff ff       	jmp    c0007d72 <f_mkfs+0xaad>
c0007f25:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f28:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f2d:	40                   	inc    eax
c0007f2e:	d1 e8                	shr    eax,1
c0007f30:	83 c0 03             	add    eax,0x3
c0007f33:	e9 62 fe ff ff       	jmp    c0007d9a <f_mkfs+0xad5>
c0007f38:	31 d2                	xor    edx,edx
c0007f3a:	89 c8                	mov    eax,ecx
c0007f3c:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f40:	85 d2                	test   edx,edx
c0007f42:	74 0c                	je     c0007f50 <f_mkfs+0xc8b>
c0007f44:	49                   	dec    ecx
c0007f45:	46                   	inc    esi
c0007f46:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007f4b:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007f50:	89 c8                	mov    eax,ecx
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f58:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007f5c:	e9 c3 fe ff ff       	jmp    c0007e24 <f_mkfs+0xb5f>
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	77 31                	ja     c0007f99 <f_mkfs+0xcd4>
c0007f68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f6d:	75 1b                	jne    c0007f8a <f_mkfs+0xcc5>
c0007f6f:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f76:	3d 80 00 00 00       	cmp    eax,0x80
c0007f7b:	0f 86 d9 fd ff ff    	jbe    c0007d5a <f_mkfs+0xa95>
c0007f81:	eb 07                	jmp    c0007f8a <f_mkfs+0xcc5>
c0007f83:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f88:	76 0a                	jbe    c0007f94 <f_mkfs+0xccf>
c0007f8a:	bb 0e 00 00 00       	mov    ebx,0xe
c0007f8f:	e9 ff 03 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c0007f94:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f99:	31 d2                	xor    edx,edx
c0007f9b:	b9 00 02 00 00       	mov    ecx,0x200
c0007fa0:	89 e8                	mov    eax,ebp
c0007fa2:	e8 6c 9a ff ff       	call   c0001a13 <mem_set>
c0007fa7:	b9 0b 00 00 00       	mov    ecx,0xb
c0007fac:	ba 02 25 02 c0       	mov    edx,0xc0022502
c0007fb1:	89 e8                	mov    eax,ebp
c0007fb3:	e8 46 9a ff ff       	call   c00019fe <mem_cpy>
c0007fb8:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007fbb:	ba 00 02 00 00       	mov    edx,0x200
c0007fc0:	e8 2c 9a ff ff       	call   c00019f1 <st_word>
c0007fc5:	89 f8                	mov    eax,edi
c0007fc7:	0f b7 d6             	movzx  edx,si
c0007fca:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007fcd:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007fd0:	e8 1c 9a ff ff       	call   c00019f1 <st_word>
c0007fd5:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007fd9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fde:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007fe1:	75 08                	jne    c0007feb <f_mkfs+0xd26>
c0007fe3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007feb:	8d 45 11             	lea    eax,[ebp+0x11]
c0007fee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ff2:	e8 fa 99 ff ff       	call   c00019f1 <st_word>
c0007ff7:	b8 ff ff 00 00       	mov    eax,0xffff
c0007ffc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008000:	39 d0                	cmp    eax,edx
c0008002:	b8 00 00 00 00       	mov    eax,0x0
c0008007:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000800b:	72 0a                	jb     c0008017 <f_mkfs+0xd52>
c000800d:	8d 45 13             	lea    eax,[ebp+0x13]
c0008010:	e8 dc 99 ff ff       	call   c00019f1 <st_word>
c0008015:	eb 08                	jmp    c000801f <f_mkfs+0xd5a>
c0008017:	8d 45 20             	lea    eax,[ebp+0x20]
c000801a:	e8 d6 99 ff ff       	call   c00019f5 <st_dword>
c000801f:	8d 45 18             	lea    eax,[ebp+0x18]
c0008022:	ba 3f 00 00 00       	mov    edx,0x3f
c0008027:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000802b:	e8 c1 99 ff ff       	call   c00019f1 <st_word>
c0008030:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008033:	ba ff 00 00 00       	mov    edx,0xff
c0008038:	e8 b4 99 ff ff       	call   c00019f1 <st_word>
c000803d:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008044:	e8 ac 99 ff ff       	call   c00019f5 <st_dword>
c0008049:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804e:	75 57                	jne    c00080a7 <f_mkfs+0xde2>
c0008050:	8d 45 43             	lea    eax,[ebp+0x43]
c0008053:	ba 00 00 21 50       	mov    edx,0x50210000
c0008058:	e8 98 99 ff ff       	call   c00019f5 <st_dword>
c000805d:	8d 45 24             	lea    eax,[ebp+0x24]
c0008060:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008064:	e8 8c 99 ff ff       	call   c00019f5 <st_dword>
c0008069:	8d 45 2c             	lea    eax,[ebp+0x2c]
c000806c:	ba 02 00 00 00       	mov    edx,0x2
c0008071:	e8 7f 99 ff ff       	call   c00019f5 <st_dword>
c0008076:	8d 45 30             	lea    eax,[ebp+0x30]
c0008079:	ba 01 00 00 00       	mov    edx,0x1
c000807e:	e8 6e 99 ff ff       	call   c00019f1 <st_word>
c0008083:	8d 45 32             	lea    eax,[ebp+0x32]
c0008086:	ba 06 00 00 00       	mov    edx,0x6
c000808b:	e8 61 99 ff ff       	call   c00019f1 <st_word>
c0008090:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008094:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008098:	8d 45 47             	lea    eax,[ebp+0x47]
c000809b:	b9 13 00 00 00       	mov    ecx,0x13
c00080a0:	ba 0e 25 02 c0       	mov    edx,0xc002250e
c00080a5:	eb 2f                	jmp    c00080d6 <f_mkfs+0xe11>
c00080a7:	8d 45 27             	lea    eax,[ebp+0x27]
c00080aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00080af:	e8 41 99 ff ff       	call   c00019f5 <st_dword>
c00080b4:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00080b9:	8d 45 16             	lea    eax,[ebp+0x16]
c00080bc:	e8 30 99 ff ff       	call   c00019f1 <st_word>
c00080c1:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00080c5:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00080c9:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00080cc:	b9 13 00 00 00       	mov    ecx,0x13
c00080d1:	ba 22 25 02 c0       	mov    edx,0xc0022522
c00080d6:	e8 23 99 ff ff       	call   c00019fe <mem_cpy>
c00080db:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00080e1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00080e6:	89 f0                	mov    eax,esi
c00080e8:	e8 04 99 ff ff       	call   c00019f1 <st_word>
c00080ed:	83 ec 0c             	sub    esp,0xc
c00080f0:	6a 01                	push   0x1
c00080f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080fa:	55                   	push   ebp
c00080fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ff:	e8 46 98 ff ff       	call   c000194a <disk_write>
c0008104:	83 c4 20             	add    esp,0x20
c0008107:	85 c0                	test   eax,eax
c0008109:	0f 85 67 02 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000810f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008114:	0f 85 b7 00 00 00    	jne    c00081d1 <f_mkfs+0xf0c>
c000811a:	83 ec 0c             	sub    esp,0xc
c000811d:	6a 01                	push   0x1
c000811f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008123:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008127:	83 c0 06             	add    eax,0x6
c000812a:	83 d2 00             	adc    edx,0x0
c000812d:	52                   	push   edx
c000812e:	50                   	push   eax
c000812f:	55                   	push   ebp
c0008130:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008134:	e8 11 98 ff ff       	call   c000194a <disk_write>
c0008139:	83 c4 20             	add    esp,0x20
c000813c:	b9 00 02 00 00       	mov    ecx,0x200
c0008141:	31 d2                	xor    edx,edx
c0008143:	89 e8                	mov    eax,ebp
c0008145:	e8 c9 98 ff ff       	call   c0001a13 <mem_set>
c000814a:	ba 52 52 61 41       	mov    edx,0x41615252
c000814f:	89 e8                	mov    eax,ebp
c0008151:	e8 9f 98 ff ff       	call   c00019f5 <st_dword>
c0008156:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c000815c:	ba 72 72 41 61       	mov    edx,0x61417272
c0008161:	e8 8f 98 ff ff       	call   c00019f5 <st_dword>
c0008166:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008169:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000816f:	e8 81 98 ff ff       	call   c00019f5 <st_dword>
c0008174:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000817a:	ba 02 00 00 00       	mov    edx,0x2
c000817f:	e8 71 98 ff ff       	call   c00019f5 <st_dword>
c0008184:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008189:	89 f0                	mov    eax,esi
c000818b:	e8 61 98 ff ff       	call   c00019f1 <st_word>
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	6a 01                	push   0x1
c0008195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008199:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000819d:	83 c0 07             	add    eax,0x7
c00081a0:	83 d2 00             	adc    edx,0x0
c00081a3:	52                   	push   edx
c00081a4:	50                   	push   eax
c00081a5:	55                   	push   ebp
c00081a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081aa:	e8 9b 97 ff ff       	call   c000194a <disk_write>
c00081af:	83 c4 14             	add    esp,0x14
c00081b2:	6a 01                	push   0x1
c00081b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	83 d2 00             	adc    edx,0x0
c00081c2:	52                   	push   edx
c00081c3:	50                   	push   eax
c00081c4:	55                   	push   ebp
c00081c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c9:	e8 7c 97 ff ff       	call   c000194a <disk_write>
c00081ce:	83 c4 20             	add    esp,0x20
c00081d1:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00081d8:	31 d2                	xor    edx,edx
c00081da:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00081e0:	31 db                	xor    ebx,ebx
c00081e2:	89 e8                	mov    eax,ebp
c00081e4:	e8 2a 98 ff ff       	call   c0001a13 <mem_set>
c00081e9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00081ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00081f5:	0f 94 c3             	sete   bl
c00081f8:	4b                   	dec    ebx
c00081f9:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00081ff:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	75 21                	jne    c000822d <f_mkfs+0xf68>
c000820c:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008211:	89 e8                	mov    eax,ebp
c0008213:	e8 dd 97 ff ff       	call   c00019f5 <st_dword>
c0008218:	8d 45 04             	lea    eax,[ebp+0x4]
c000821b:	83 ca ff             	or     edx,0xffffffff
c000821e:	e8 d2 97 ff ff       	call   c00019f5 <st_dword>
c0008223:	8d 45 08             	lea    eax,[ebp+0x8]
c0008226:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000822b:	eb 04                	jmp    c0008231 <f_mkfs+0xf6c>
c000822d:	89 da                	mov    edx,ebx
c000822f:	89 e8                	mov    eax,ebp
c0008231:	e8 bf 97 ff ff       	call   c00019f5 <st_dword>
c0008236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000823a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000823e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008242:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008246:	39 ce                	cmp    esi,ecx
c0008248:	76 02                	jbe    c000824c <f_mkfs+0xf87>
c000824a:	89 ce                	mov    esi,ecx
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	56                   	push   esi
c0008250:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008254:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008258:	55                   	push   ebp
c0008259:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825d:	e8 e8 96 ff ff       	call   c000194a <disk_write>
c0008262:	83 c4 20             	add    esp,0x20
c0008265:	85 c0                	test   eax,eax
c0008267:	0f 85 09 01 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000826d:	31 d2                	xor    edx,edx
c000826f:	b9 00 02 00 00       	mov    ecx,0x200
c0008274:	89 e8                	mov    eax,ebp
c0008276:	e8 98 97 ff ff       	call   c0001a13 <mem_set>
c000827b:	31 d2                	xor    edx,edx
c000827d:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008281:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008285:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008289:	75 b3                	jne    c000823e <f_mkfs+0xf79>
c000828b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000828e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008295:	40                   	inc    eax
c0008296:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000829a:	0f 87 65 ff ff ff    	ja     c0008205 <f_mkfs+0xf40>
c00082a0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082a5:	74 04                	je     c00082ab <f_mkfs+0xfe6>
c00082a7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00082ab:	89 fb                	mov    ebx,edi
c00082ad:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00082b1:	76 04                	jbe    c00082b7 <f_mkfs+0xff2>
c00082b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082b7:	83 ec 0c             	sub    esp,0xc
c00082ba:	53                   	push   ebx
c00082bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c3:	55                   	push   ebp
c00082c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082c8:	e8 7d 96 ff ff       	call   c000194a <disk_write>
c00082cd:	83 c4 20             	add    esp,0x20
c00082d0:	85 c0                	test   eax,eax
c00082d2:	0f 85 9e 00 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00082d8:	31 d2                	xor    edx,edx
c00082da:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00082de:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082e2:	29 df                	sub    edi,ebx
c00082e4:	75 c5                	jne    c00082ab <f_mkfs+0xfe6>
c00082e6:	b1 0c                	mov    cl,0xc
c00082e8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082ed:	74 1d                	je     c000830c <f_mkfs+0x1047>
c00082ef:	b8 ff ff 00 00       	mov    eax,0xffff
c00082f4:	b1 06                	mov    cl,0x6
c00082f6:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00082fa:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00082fe:	72 0c                	jb     c000830c <f_mkfs+0x1047>
c0008300:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008305:	0f 94 c1             	sete   cl
c0008308:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000830c:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008311:	75 4c                	jne    c000835f <f_mkfs+0x109a>
c0008313:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008317:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000831b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008322:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008329:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008334:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000833f:	0f b6 c9             	movzx  ecx,cl
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	55                   	push   ebp
c0008346:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000834d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008351:	e8 f9 bf ff ff       	call   c000434f <create_partition>
c0008356:	83 c4 10             	add    esp,0x10
c0008359:	89 c3                	mov    ebx,eax
c000835b:	85 c0                	test   eax,eax
c000835d:	75 34                	jne    c0008393 <f_mkfs+0x10ce>
c000835f:	31 db                	xor    ebx,ebx
c0008361:	50                   	push   eax
c0008362:	6a 00                	push   0x0
c0008364:	6a 00                	push   0x0
c0008366:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000836a:	e8 f1 95 ff ff       	call   c0001960 <disk_ioctl>
c000836f:	83 c4 10             	add    esp,0x10
c0008372:	85 c0                	test   eax,eax
c0008374:	74 1d                	je     c0008393 <f_mkfs+0x10ce>
c0008376:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000837e:	75 0c                	jne    c000838c <f_mkfs+0x10c7>
c0008380:	83 ec 0c             	sub    esp,0xc
c0008383:	55                   	push   ebp
c0008384:	e8 77 00 00 00       	call   c0008400 <ff_memfree>
c0008389:	83 c4 10             	add    esp,0x10
c000838c:	bb 01 00 00 00       	mov    ebx,0x1
c0008391:	eb 48                	jmp    c00083db <f_mkfs+0x1116>
c0008393:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000839b:	75 3e                	jne    c00083db <f_mkfs+0x1116>
c000839d:	83 ec 0c             	sub    esp,0xc
c00083a0:	55                   	push   ebp
c00083a1:	e8 5a 00 00 00       	call   c0008400 <ff_memfree>
c00083a6:	83 c4 10             	add    esp,0x10
c00083a9:	eb 30                	jmp    c00083db <f_mkfs+0x1116>
c00083ab:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083b0:	0f 85 eb fa ff ff    	jne    c0007ea1 <f_mkfs+0xbdc>
c00083b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083ba:	81 ff 80 00 00 00    	cmp    edi,0x80
c00083c0:	0f 86 b8 f9 ff ff    	jbe    c0007d7e <f_mkfs+0xab9>
c00083c6:	e9 bf fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083cb:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083d0:	0f 85 c0 fa ff ff    	jne    c0007e96 <f_mkfs+0xbd1>
c00083d6:	e9 af fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083db:	81 c4 9c 00 00 00    	add    esp,0x9c
c00083e1:	89 d8                	mov    eax,ebx
c00083e3:	5b                   	pop    ebx
c00083e4:	5e                   	pop    esi
c00083e5:	5f                   	pop    edi
c00083e6:	5d                   	pop    ebp
c00083e7:	c3                   	ret    

c00083e8 <ff_memalloc>:
c00083e8:	83 ec 0c             	sub    esp,0xc
c00083eb:	83 ec 0c             	sub    esp,0xc
c00083ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083f2:	e8 a0 13 00 00       	call   c0009797 <malloc>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 c4 0c             	add    esp,0xc
c00083fd:	c3                   	ret    
c00083fe:	66 90                	xchg   ax,ax

c0008400 <ff_memfree>:
c0008400:	83 ec 0c             	sub    esp,0xc
c0008403:	83 ec 0c             	sub    esp,0xc
c0008406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000840a:	e8 98 13 00 00       	call   c00097a7 <free>
c000840f:	83 c4 10             	add    esp,0x10
c0008412:	90                   	nop
c0008413:	83 c4 0c             	add    esp,0xc
c0008416:	c3                   	ret    
c0008417:	90                   	nop

c0008418 <ff_uni2oem>:
c0008418:	83 ec 14             	sub    esp,0x14
c000841b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000841f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008423:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000842a:	c7 44 24 0c 40 28 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022840
c0008432:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008437:	77 0b                	ja     c0008444 <ff_uni2oem+0x2c>
c0008439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000843d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008442:	eb 60                	jmp    c00084a4 <ff_uni2oem+0x8c>
c0008444:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000844c:	77 56                	ja     c00084a4 <ff_uni2oem+0x8c>
c000844e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008454:	75 4e                	jne    c00084a4 <ff_uni2oem+0x8c>
c0008456:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000845d:	eb 0d                	jmp    c000846c <ff_uni2oem+0x54>
c000845f:	90                   	nop
c0008460:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008465:	40                   	inc    eax
c0008466:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000846b:	90                   	nop
c000846c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008472:	77 1c                	ja     c0008490 <ff_uni2oem+0x78>
c0008474:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008479:	01 c0                	add    eax,eax
c000847b:	89 c2                	mov    edx,eax
c000847d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008481:	01 d0                	add    eax,edx
c0008483:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008486:	0f b7 c0             	movzx  eax,ax
c0008489:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000848d:	75 d1                	jne    c0008460 <ff_uni2oem+0x48>
c000848f:	90                   	nop
c0008490:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008495:	83 e8 80             	sub    eax,0xffffff80
c0008498:	25 ff 00 00 00       	and    eax,0xff
c000849d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084a2:	66 90                	xchg   ax,ax
c00084a4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084a9:	83 c4 14             	add    esp,0x14
c00084ac:	c3                   	ret    
c00084ad:	8d 76 00             	lea    esi,[esi+0x0]

c00084b0 <ff_oem2uni>:
c00084b0:	83 ec 18             	sub    esp,0x18
c00084b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00084b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084bb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00084c0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084c4:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00084cb:	c7 44 24 10 40 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022840
c00084d3:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00084d9:	77 0d                	ja     c00084e8 <ff_oem2uni+0x38>
c00084db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084df:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00084e4:	eb 32                	jmp    c0008518 <ff_oem2uni+0x68>
c00084e6:	66 90                	xchg   ax,ax
c00084e8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084ee:	75 28                	jne    c0008518 <ff_oem2uni+0x68>
c00084f0:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00084f7:	77 1f                	ja     c0008518 <ff_oem2uni+0x68>
c00084f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00084fe:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008503:	01 c0                	add    eax,eax
c0008505:	89 c2                	mov    edx,eax
c0008507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000850b:	01 d0                	add    eax,edx
c000850d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008510:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008515:	8d 76 00             	lea    esi,[esi+0x0]
c0008518:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000851d:	83 c4 18             	add    esp,0x18
c0008520:	c3                   	ret    
c0008521:	8d 76 00             	lea    esi,[esi+0x0]

c0008524 <ff_wtoupper>:
c0008524:	83 ec 10             	sub    esp,0x10
c0008527:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000852f:	0f 87 4f 01 00 00    	ja     c0008684 <ff_wtoupper+0x160>
c0008535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008539:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000853e:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008545:	77 09                	ja     c0008550 <ff_wtoupper+0x2c>
c0008547:	b8 40 26 02 c0       	mov    eax,0xc0022640
c000854c:	eb 0a                	jmp    c0008558 <ff_wtoupper+0x34>
c000854e:	66 90                	xchg   ax,ax
c0008550:	b8 80 25 02 c0       	mov    eax,0xc0022580
c0008555:	8d 76 00             	lea    esi,[esi+0x0]
c0008558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000855c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008560:	8d 50 02             	lea    edx,[eax+0x2]
c0008563:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008567:	66 8b 00             	mov    ax,WORD PTR [eax]
c000856a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000856f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008575:	0f 84 fd 00 00 00    	je     c0008678 <ff_wtoupper+0x154>
c000857b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008580:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008585:	0f 82 ed 00 00 00    	jb     c0008678 <ff_wtoupper+0x154>
c000858b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000858f:	8d 50 02             	lea    edx,[eax+0x2]
c0008592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008596:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008599:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000859e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085a3:	66 c1 e8 08          	shr    ax,0x8
c00085a7:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00085ac:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00085b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00085b8:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00085bd:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00085c2:	01 ca                	add    edx,ecx
c00085c4:	39 d0                	cmp    eax,edx
c00085c6:	0f 8d 8c 00 00 00    	jge    c0008658 <ff_wtoupper+0x134>
c00085cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085d1:	83 f8 08             	cmp    eax,0x8
c00085d4:	0f 87 9a 00 00 00    	ja     c0008674 <ff_wtoupper+0x150>
c00085da:	8b 04 85 40 25 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddac0]
c00085e1:	ff e0                	jmp    eax
c00085e3:	90                   	nop
c00085e4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00085e9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00085ee:	29 c2                	sub    edx,eax
c00085f0:	89 d0                	mov    eax,edx
c00085f2:	01 c0                	add    eax,eax
c00085f4:	89 c2                	mov    edx,eax
c00085f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fa:	01 d0                	add    eax,edx
c00085fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008604:	eb 4e                	jmp    c0008654 <ff_wtoupper+0x130>
c0008606:	66 90                	xchg   ax,ax
c0008608:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000860d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008611:	83 e0 01             	and    eax,0x1
c0008614:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008619:	eb 39                	jmp    c0008654 <ff_wtoupper+0x130>
c000861b:	90                   	nop
c000861c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008622:	eb 30                	jmp    c0008654 <ff_wtoupper+0x130>
c0008624:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000862a:	eb 28                	jmp    c0008654 <ff_wtoupper+0x130>
c000862c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008632:	eb 20                	jmp    c0008654 <ff_wtoupper+0x130>
c0008634:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000863a:	eb 18                	jmp    c0008654 <ff_wtoupper+0x130>
c000863c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008642:	eb 10                	jmp    c0008654 <ff_wtoupper+0x130>
c0008644:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000864a:	eb 08                	jmp    c0008654 <ff_wtoupper+0x130>
c000864c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008653:	90                   	nop
c0008654:	eb 1e                	jmp    c0008674 <ff_wtoupper+0x150>
c0008656:	66 90                	xchg   ax,ax
c0008658:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000865e:	0f 85 f8 fe ff ff    	jne    c000855c <ff_wtoupper+0x38>
c0008664:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008669:	01 c0                	add    eax,eax
c000866b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000866f:	e9 e8 fe ff ff       	jmp    c000855c <ff_wtoupper+0x38>
c0008674:	90                   	nop
c0008675:	8d 76 00             	lea    esi,[esi+0x0]
c0008678:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000867d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008681:	8d 76 00             	lea    esi,[esi+0x0]
c0008684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008688:	83 c4 10             	add    esp,0x10
c000868b:	c3                   	ret    

c000868c <CPU::current()>:
c000868c:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0008691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008697:	c3                   	ret    

c0008698 <operator new(unsigned long)>:
c0008698:	e9 fa 10 00 00       	jmp    c0009797 <malloc>

c000869d <operator delete(void*)>:
c000869d:	e9 15 11 00 00       	jmp    c00097b7 <rfree>

c00086a2 <disableIRQs()>:
c00086a2:	fa                   	cli    
c00086a3:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00086a9:	c3                   	ret    

c00086aa <enableIRQs()>:
c00086aa:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00086af:	48                   	dec    eax
c00086b0:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00086b5:	75 01                	jne    c00086b8 <enableIRQs()+0xe>
c00086b7:	fb                   	sti    
c00086b8:	c3                   	ret    

c00086b9 <lockScheduler()>:
c00086b9:	fa                   	cli    
c00086ba:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00086c0:	c3                   	ret    

c00086c1 <unlockScheduler()>:
c00086c1:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00086c6:	48                   	dec    eax
c00086c7:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00086cc:	75 01                	jne    c00086cf <unlockScheduler()+0xe>
c00086ce:	fb                   	sti    
c00086cf:	c3                   	ret    

c00086d0 <lockStuff()>:
c00086d0:	fa                   	cli    
c00086d1:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00086d7:	ff 05 24 99 02 c0    	inc    DWORD PTR ds:0xc0029924
c00086dd:	c3                   	ret    

c00086de <unlockStuff()>:
c00086de:	83 ec 0c             	sub    esp,0xc
c00086e1:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c00086e6:	48                   	dec    eax
c00086e7:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c00086ec:	75 18                	jne    c0008706 <unlockStuff()+0x28>
c00086ee:	83 3d 20 99 02 c0 00 	cmp    DWORD PTR ds:0xc0029920,0x0
c00086f5:	74 0f                	je     c0008706 <unlockStuff()+0x28>
c00086f7:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c0008701:	e8 ea d9 00 00       	call   c00160f0 <schedule()>
c0008706:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000870b:	48                   	dec    eax
c000870c:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0008711:	75 01                	jne    c0008714 <unlockStuff()+0x36>
c0008713:	fb                   	sti    
c0008714:	83 c4 0c             	add    esp,0xc
c0008717:	c3                   	ret    

c0008718 <Virt::getAKernelVAS()>:
c0008718:	a1 34 65 02 c0       	mov    eax,ds:0xc0026534
c000871d:	c3                   	ret    

c000871e <__not_memcpy>:
c000871e:	57                   	push   edi
c000871f:	56                   	push   esi
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008728:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000872c:	89 c7                	mov    edi,eax
c000872e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008730:	5e                   	pop    esi
c0008731:	5f                   	pop    edi
c0008732:	c3                   	ret    
c0008733:	90                   	nop

c0008734 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008734:	83 ec 0c             	sub    esp,0xc
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	68 40 29 02 c0       	push   0xc0022940
c000873f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008743:	e8 a8 7e ff ff       	call   c00005f0 <strcmp>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	0f 94 c0             	sete   al
c0008750:	84 c0                	test   al,al
c0008752:	74 0c                	je     c0008760 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008754:	b8 48 64 02 c0       	mov    eax,0xc0026448
c0008759:	e9 ea 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000875e:	66 90                	xchg   ax,ax
c0008760:	83 ec 08             	sub    esp,0x8
c0008763:	68 49 29 02 c0       	push   0xc0022949
c0008768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000876c:	e8 7f 7e ff ff       	call   c00005f0 <strcmp>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	85 c0                	test   eax,eax
c0008776:	0f 94 c0             	sete   al
c0008779:	84 c0                	test   al,al
c000877b:	74 0b                	je     c0008788 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c000877d:	b8 b0 15 02 c0       	mov    eax,0xc00215b0
c0008782:	e9 c1 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008787:	90                   	nop
c0008788:	83 ec 08             	sub    esp,0x8
c000878b:	68 53 29 02 c0       	push   0xc0022953
c0008790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008794:	e8 57 7e ff ff       	call   c00005f0 <strcmp>
c0008799:	83 c4 10             	add    esp,0x10
c000879c:	85 c0                	test   eax,eax
c000879e:	0f 94 c0             	sete   al
c00087a1:	84 c0                	test   al,al
c00087a3:	74 0b                	je     c00087b0 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c00087a5:	b8 e4 12 02 c0       	mov    eax,0xc00212e4
c00087aa:	e9 99 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087af:	90                   	nop
c00087b0:	83 ec 08             	sub    esp,0x8
c00087b3:	68 5c 29 02 c0       	push   0xc002295c
c00087b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087bc:	e8 2f 7e ff ff       	call   c00005f0 <strcmp>
c00087c1:	83 c4 10             	add    esp,0x10
c00087c4:	85 c0                	test   eax,eax
c00087c6:	0f 94 c0             	sete   al
c00087c9:	84 c0                	test   al,al
c00087cb:	74 07                	je     c00087d4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00087cd:	b8 b0 16 02 c0       	mov    eax,0xc00216b0
c00087d2:	eb 74                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087d4:	83 ec 08             	sub    esp,0x8
c00087d7:	68 66 29 02 c0       	push   0xc0022966
c00087dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087e0:	e8 0b 7e ff ff       	call   c00005f0 <strcmp>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	85 c0                	test   eax,eax
c00087ea:	0f 94 c0             	sete   al
c00087ed:	84 c0                	test   al,al
c00087ef:	74 07                	je     c00087f8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00087f1:	b8 30 14 02 c0       	mov    eax,0xc0021430
c00087f6:	eb 50                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087f8:	83 ec 08             	sub    esp,0x8
c00087fb:	68 6f 29 02 c0       	push   0xc002296f
c0008800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008804:	e8 e7 7d ff ff       	call   c00005f0 <strcmp>
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	85 c0                	test   eax,eax
c000880e:	0f 94 c0             	sete   al
c0008811:	84 c0                	test   al,al
c0008813:	74 07                	je     c000881c <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008815:	b8 4c 64 02 c0       	mov    eax,0xc002644c
c000881a:	eb 2c                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000881c:	83 ec 08             	sub    esp,0x8
c000881f:	68 7c 29 02 c0       	push   0xc002297c
c0008824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008828:	e8 c3 7d ff ff       	call   c00005f0 <strcmp>
c000882d:	83 c4 10             	add    esp,0x10
c0008830:	85 c0                	test   eax,eax
c0008832:	0f 94 c0             	sete   al
c0008835:	84 c0                	test   al,al
c0008837:	74 07                	je     c0008840 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008839:	b8 4d 64 02 c0       	mov    eax,0xc002644d
c000883e:	eb 08                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008840:	b8 00 00 00 00       	mov    eax,0x0
c0008845:	8d 76 00             	lea    esi,[esi+0x0]
c0008848:	83 c4 0c             	add    esp,0xc
c000884b:	c3                   	ret    

c000884c <Computer::close(int, int, void*)>:
c000884c:	57                   	push   edi
c000884d:	56                   	push   esi
c000884e:	53                   	push   ebx
c000884f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008853:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008857:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000885b:	83 ec 0c             	sub    esp,0xc
c000885e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008864:	e8 bf 54 00 00       	call   c000dd28 <Device::closeAll()>
c0008869:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000886f:	83 c4 10             	add    esp,0x10
c0008872:	8b 10                	mov    edx,DWORD PTR [eax]
c0008874:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008878:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008880:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008884:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008888:	5b                   	pop    ebx
c0008889:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000888c:	5e                   	pop    esi
c000888d:	5f                   	pop    edi
c000888e:	ff e0                	jmp    eax

c0008890 <Krnl::firstTask()>:
c0008890:	53                   	push   ebx
c0008891:	83 ec 14             	sub    esp,0x14
c0008894:	68 89 29 02 c0       	push   0xc0022989
c0008899:	e8 53 0f 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000889e:	fb                   	sti    
c000889f:	c7 04 24 a0 29 02 c0 	mov    DWORD PTR [esp],0xc00229a0
c00088a6:	e8 46 0f 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00088ab:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00088b2:	e8 e0 0e 00 00       	call   c0009797 <malloc>
c00088b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00088be:	89 c3                	mov    ebx,eax
c00088c0:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c00088c6:	68 b9 29 02 c0       	push   0xc00229b9
c00088cb:	6a 01                	push   0x1
c00088cd:	50                   	push   eax
c00088ce:	e8 f9 d3 00 00       	call   c0015ccc <Process::Process(bool, char const*, Process*, char**)>
c00088d3:	83 c4 20             	add    esp,0x20
c00088d6:	68 ff 00 00 00       	push   0xff
c00088db:	6a 00                	push   0x0
c00088dd:	68 e1 91 00 c0       	push   0xc00091e1
c00088e2:	53                   	push   ebx
c00088e3:	e8 ec d5 00 00       	call   c0015ed4 <Process::createThread(void (*)(void*), void*, int)>
c00088e8:	6a 7a                	push   0x7a
c00088ea:	6a 00                	push   0x0
c00088ec:	68 18 69 01 c0       	push   0xc0016918
c00088f1:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c00088f7:	e8 d8 d5 00 00       	call   c0015ed4 <Process::createThread(void (*)(void*), void*, int)>
c00088fc:	83 c4 14             	add    esp,0x14
c00088ff:	a3 08 99 02 c0       	mov    ds:0xc0029908,eax
c0008904:	68 b8 2a 02 c0       	push   0xc0022ab8
c0008909:	c6 05 4d 64 02 c0 01 	mov    BYTE PTR ds:0xc002644d,0x1
c0008910:	e8 dc 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008915:	e8 d9 e3 00 00       	call   c0016cf3 <Vm::initialise8086()>
c000891a:	e8 99 41 00 00       	call   c000cab8 <Fs::initVFS()>
c000891f:	c7 04 24 c6 29 02 c0 	mov    DWORD PTR [esp],0xc00229c6
c0008926:	e8 c6 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000892b:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0008930:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008936:	8b 10                	mov    edx,DWORD PTR [eax]
c0008938:	6a 00                	push   0x0
c000893a:	6a 00                	push   0x0
c000893c:	6a 00                	push   0x0
c000893e:	50                   	push   eax
c000893f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008942:	83 c4 14             	add    esp,0x14
c0008945:	68 b8 2a 02 c0       	push   0xc0022ab8
c000894a:	e8 a2 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000894f:	e8 ec bb 00 00       	call   c0014540 <Sys::loadSyscalls()>
c0008954:	e8 29 a0 00 00       	call   c0012982 <Krnl::loadSystemEnv()>
c0008959:	e8 7b a4 00 00       	call   c0012dd9 <Krnl::setupPowerManager()>
c000895e:	83 c4 0c             	add    esp,0xc
c0008961:	6a 3a                	push   0x3a
c0008963:	68 e0 29 02 c0       	push   0xc00229e0
c0008968:	68 e9 29 02 c0       	push   0xc00229e9
c000896d:	e8 91 a9 00 00       	call   c0013303 <Reg::readIntWithDefault(char*, char*, int)>
c0008972:	89 04 24             	mov    DWORD PTR [esp],eax
c0008975:	e8 9a 4c 00 00       	call   c000d614 <User::loadClockSettings(int)>
c000897a:	c7 04 24 dc 2a 02 c0 	mov    DWORD PTR [esp],0xc0022adc
c0008981:	e8 6b 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008986:	58                   	pop    eax
c0008987:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000898c:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008992:	e8 51 53 00 00       	call   c000dce8 <Device::loadDriversForAll()>
c0008997:	c7 04 24 f1 29 02 c0 	mov    DWORD PTR [esp],0xc00229f1
c000899e:	e8 4e 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00089a3:	e8 42 9b 00 00       	call   c00124ea <Krnl::startCPUs()>
c00089a8:	c7 04 24 0b 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a0b
c00089af:	e8 3d 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00089b4:	5a                   	pop    edx
c00089b5:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c00089bb:	59                   	pop    ecx
c00089bc:	6a 01                	push   0x1
c00089be:	68 1c 2a 02 c0       	push   0xc0022a1c
c00089c3:	e8 48 cd 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c00089c8:	5a                   	pop    edx
c00089c9:	59                   	pop    ecx
c00089ca:	53                   	push   ebx
c00089cb:	50                   	push   eax
c00089cc:	e8 70 cf 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	83 ec 0c             	sub    esp,0xc
c00089d7:	6a 02                	push   0x2
c00089d9:	e8 0a d9 00 00       	call   c00162e8 <blockTask(TaskState)>
c00089de:	83 c4 10             	add    esp,0x10
c00089e1:	eb f1                	jmp    c00089d4 <Krnl::firstTask()+0x144>
c00089e3:	90                   	nop

c00089e4 <Computer::Computer()>:
c00089e4:	83 ec 0c             	sub    esp,0xc
c00089e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089eb:	83 ec 08             	sub    esp,0x8
c00089ee:	68 38 2a 02 c0       	push   0xc0022a38
c00089f3:	50                   	push   eax
c00089f4:	e8 a9 53 00 00       	call   c000dda2 <Device::Device(char const*)>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	ba 4c 2b 02 c0       	mov    edx,0xc0022b4c
c0008a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a05:	89 10                	mov    DWORD PTR [eax],edx
c0008a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a19:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008a2d:	83 ca 04             	or     edx,0x4
c0008a30:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a40:	0f b6 d0             	movzx  edx,al
c0008a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a47:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a58:	0f b6 d0             	movzx  edx,al
c0008a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a68:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a6e:	8d 50 01             	lea    edx,[eax+0x1]
c0008a71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008a75:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008a7b:	0f b6 d0             	movzx  edx,al
c0008a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a82:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008a86:	83 e1 3f             	and    ecx,0x3f
c0008a89:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a97:	0f b6 d0             	movzx  edx,al
c0008a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a9e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aa9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008aaf:	0f b6 d0             	movzx  edx,al
c0008ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008abf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ac5:	8d 50 01             	lea    edx,[eax+0x1]
c0008ac8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008acc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ad2:	0f b6 d0             	movzx  edx,al
c0008ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008add:	83 e1 3f             	and    ecx,0x3f
c0008ae0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008aee:	0f b6 d0             	movzx  edx,al
c0008af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008af5:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008b06:	0f b6 d0             	movzx  edx,al
c0008b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008b1c:	8d 50 01             	lea    edx,[eax+0x1]
c0008b1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008b23:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008b29:	0f b6 d0             	movzx  edx,al
c0008b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b30:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008b34:	83 e1 3f             	and    ecx,0x3f
c0008b37:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008b3b:	90                   	nop
c0008b3c:	83 c4 0c             	add    esp,0xc
c0008b3f:	c3                   	ret    

c0008b40 <Computer::setBootMessage(char const*)>:
c0008b40:	c3                   	ret    
c0008b41:	90                   	nop

c0008b42 <Computer::detectFeatures()>:
c0008b42:	55                   	push   ebp
c0008b43:	57                   	push   edi
c0008b44:	56                   	push   esi
c0008b45:	53                   	push   ebx
c0008b46:	83 ec 1c             	sub    esp,0x1c
c0008b49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b4d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008b57:	e8 bd 76 ff ff       	call   c0000219 <detectCPUID>
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b64:	0f 95 c2             	setne  dl
c0008b67:	83 e0 fd             	and    eax,0xfffffffd
c0008b6a:	d1 e2                	shl    edx,1
c0008b6c:	09 d0                	or     eax,edx
c0008b6e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008b74:	a8 02                	test   al,0x2
c0008b76:	75 46                	jne    c0008bbe <Computer::detectFeatures()+0x7c>
c0008b78:	f6 05 61 64 02 c0 04 	test   BYTE PTR ds:0xc0026461,0x4
c0008b7f:	74 07                	je     c0008b88 <Computer::detectFeatures()+0x46>
c0008b81:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008b88:	e8 e9 86 01 00       	call   c0021276 <x87Detect>
c0008b8d:	83 e0 01             	and    eax,0x1
c0008b90:	c1 e0 04             	shl    eax,0x4
c0008b93:	88 c2                	mov    dl,al
c0008b95:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b9b:	83 e0 ef             	and    eax,0xffffffef
c0008b9e:	09 d0                	or     eax,edx
c0008ba0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ba6:	a8 10                	test   al,0x10
c0008ba8:	0f 85 2a 01 00 00    	jne    c0008cd8 <Computer::detectFeatures()+0x196>
c0008bae:	84 c0                	test   al,al
c0008bb0:	0f 88 45 01 00 00    	js     c0008cfb <Computer::detectFeatures()+0x1b9>
c0008bb6:	83 c4 1c             	add    esp,0x1c
c0008bb9:	5b                   	pop    ebx
c0008bba:	5e                   	pop    esi
c0008bbb:	5f                   	pop    edi
c0008bbc:	5d                   	pop    ebp
c0008bbd:	c3                   	ret    
c0008bbe:	83 ec 0c             	sub    esp,0xc
c0008bc1:	6a 20                	push   0x20
c0008bc3:	e8 3c 8b 00 00       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c0008bc8:	83 e0 01             	and    eax,0x1
c0008bcb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008bd2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008bd8:	83 e0 f7             	and    eax,0xfffffff7
c0008bdb:	09 d0                	or     eax,edx
c0008bdd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008be3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008bea:	e8 15 8b 00 00       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c0008bef:	83 e0 01             	and    eax,0x1
c0008bf2:	88 c2                	mov    dl,al
c0008bf4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008bfa:	83 e0 fe             	and    eax,0xfffffffe
c0008bfd:	09 d0                	or     eax,edx
c0008bff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008c05:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008c0c:	e8 f3 8a 00 00       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c0008c11:	c1 e0 07             	shl    eax,0x7
c0008c14:	88 c2                	mov    dl,al
c0008c16:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008c1c:	83 e0 7f             	and    eax,0x7f
c0008c1f:	09 d0                	or     eax,edx
c0008c21:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008c27:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008c2e:	e8 d1 8a 00 00       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c0008c33:	83 c4 10             	add    esp,0x10
c0008c36:	83 e0 01             	and    eax,0x1
c0008c39:	c1 e0 05             	shl    eax,0x5
c0008c3c:	88 c2                	mov    dl,al
c0008c3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c44:	83 e0 df             	and    eax,0xffffffdf
c0008c47:	09 d0                	or     eax,edx
c0008c49:	f7 05 60 64 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026460,0x401
c0008c53:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c59:	0f 84 c2 00 00 00    	je     c0008d21 <Computer::detectFeatures()+0x1df>
c0008c5f:	83 e0 fe             	and    eax,0xfffffffe
c0008c62:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c68:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c6e:	88 c2                	mov    dl,al
c0008c70:	83 e2 09             	and    edx,0x9
c0008c73:	fe ca                	dec    dl
c0008c75:	75 09                	jne    c0008c80 <Computer::detectFeatures()+0x13e>
c0008c77:	83 e0 fe             	and    eax,0xfffffffe
c0008c7a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c80:	83 ec 0c             	sub    esp,0xc
c0008c83:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008c87:	50                   	push   eax
c0008c88:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008c8c:	55                   	push   ebp
c0008c8d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008c91:	57                   	push   edi
c0008c92:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008c96:	56                   	push   esi
c0008c97:	68 00 00 00 80       	push   0x80000000
c0008c9c:	e8 df 89 00 00       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ca1:	83 c4 20             	add    esp,0x20
c0008ca4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008cab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008caf:	0f 86 c3 fe ff ff    	jbe    c0008b78 <Computer::detectFeatures()+0x36>
c0008cb5:	83 ec 0c             	sub    esp,0xc
c0008cb8:	50                   	push   eax
c0008cb9:	55                   	push   ebp
c0008cba:	57                   	push   edi
c0008cbb:	56                   	push   esi
c0008cbc:	68 01 00 00 80       	push   0x80000001
c0008cc1:	e8 ba 89 00 00       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008cc6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008cd0:	83 c4 20             	add    esp,0x20
c0008cd3:	e9 a0 fe ff ff       	jmp    c0008b78 <Computer::detectFeatures()+0x36>
c0008cd8:	e8 53 85 01 00       	call   c0021230 <absolutelyNoChanceInHell>
c0008cdd:	88 c2                	mov    dl,al
c0008cdf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ce5:	c1 e2 07             	shl    edx,0x7
c0008ce8:	83 e0 7f             	and    eax,0x7f
c0008ceb:	09 d0                	or     eax,edx
c0008ced:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008cf3:	84 c0                	test   al,al
c0008cf5:	0f 89 bb fe ff ff    	jns    c0008bb6 <Computer::detectFeatures()+0x74>
c0008cfb:	e8 b0 82 01 00       	call   c0020fb0 <avxDetect>
c0008d00:	83 e0 01             	and    eax,0x1
c0008d03:	c1 e0 05             	shl    eax,0x5
c0008d06:	88 c2                	mov    dl,al
c0008d08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008d0e:	83 e0 df             	and    eax,0xffffffdf
c0008d11:	09 d0                	or     eax,edx
c0008d13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	5b                   	pop    ebx
c0008d1d:	5e                   	pop    esi
c0008d1e:	5f                   	pop    edi
c0008d1f:	5d                   	pop    ebp
c0008d20:	c3                   	ret    
c0008d21:	83 ec 0c             	sub    esp,0xc
c0008d24:	68 00 02 00 00       	push   0x200
c0008d29:	e8 d6 89 00 00       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	83 e0 01             	and    eax,0x1
c0008d34:	88 c2                	mov    dl,al
c0008d36:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3c:	83 e0 fe             	and    eax,0xfffffffe
c0008d3f:	09 d0                	or     eax,edx
c0008d41:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d47:	e9 1c ff ff ff       	jmp    c0008c68 <Computer::detectFeatures()+0x126>

c0008d4c <Computer::displayFeatures()>:
c0008d4c:	c3                   	ret    
c0008d4d:	90                   	nop

c0008d4e <Computer::rdmsr(unsigned int)>:
c0008d4e:	83 ec 0c             	sub    esp,0xc
c0008d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d5c:	74 0a                	je     c0008d68 <Computer::rdmsr(unsigned int)+0x1a>
c0008d5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d62:	0f 32                	rdmsr  
c0008d64:	83 c4 0c             	add    esp,0xc
c0008d67:	c3                   	ret    
c0008d68:	83 ec 0c             	sub    esp,0xc
c0008d6b:	68 41 2a 02 c0       	push   0xc0022a41
c0008d70:	e8 16 9d 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	eb e4                	jmp    c0008d5e <Computer::rdmsr(unsigned int)+0x10>

c0008d7a <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008d7a:	57                   	push   edi
c0008d7b:	56                   	push   esi
c0008d7c:	52                   	push   edx
c0008d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d81:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008d85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008d89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d90:	74 0e                	je     c0008da0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008d92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d96:	89 f0                	mov    eax,esi
c0008d98:	89 fa                	mov    edx,edi
c0008d9a:	0f 30                	wrmsr  
c0008d9c:	58                   	pop    eax
c0008d9d:	5e                   	pop    esi
c0008d9e:	5f                   	pop    edi
c0008d9f:	c3                   	ret    
c0008da0:	83 ec 0c             	sub    esp,0xc
c0008da3:	68 47 2a 02 c0       	push   0xc0022a47
c0008da8:	e8 de 9c 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0008dad:	83 c4 10             	add    esp,0x10
c0008db0:	eb e0                	jmp    c0008d92 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008db2 <Computer::shutdown()>:
c0008db2:	83 ec 0c             	sub    esp,0xc
c0008db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008db9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dbb:	6a 00                	push   0x0
c0008dbd:	6a 00                	push   0x0
c0008dbf:	6a 00                	push   0x0
c0008dc1:	50                   	push   eax
c0008dc2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008dc5:	83 c4 1c             	add    esp,0x1c
c0008dc8:	c3                   	ret    
c0008dc9:	90                   	nop

c0008dca <Computer::restart()>:
c0008dca:	83 ec 0c             	sub    esp,0xc
c0008dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dd3:	6a 00                	push   0x0
c0008dd5:	6a 00                	push   0x0
c0008dd7:	6a 01                	push   0x1
c0008dd9:	50                   	push   eax
c0008dda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008ddd:	83 c4 1c             	add    esp,0x1c
c0008de0:	c3                   	ret    
c0008de1:	90                   	nop

c0008de2 <Computer::sleep()>:
c0008de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008dec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008df0:	e9 67 83 00 00       	jmp    c001115c <ACPI::sleep()>
c0008df5:	90                   	nop

c0008df6 <Computer::nmiEnabled()>:
c0008df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dfa:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008e00:	c3                   	ret    
c0008e01:	90                   	nop

c0008e02 <Computer::readCMOS(unsigned char)>:
c0008e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008e0d:	19 c0                	sbb    eax,eax
c0008e0f:	83 e0 80             	and    eax,0xffffff80
c0008e12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008e16:	e6 70                	out    0x70,al
c0008e18:	e4 71                	in     al,0x71
c0008e1a:	c3                   	ret    
c0008e1b:	90                   	nop

c0008e1c <Computer::enableNMI(bool)>:
c0008e1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e24:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008e2a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008e32:	eb ce                	jmp    c0008e02 <Computer::readCMOS(unsigned char)>

c0008e34 <Computer::open(int, int, void*)>:
c0008e34:	56                   	push   esi
c0008e35:	53                   	push   ebx
c0008e36:	83 ec 10             	sub    esp,0x10
c0008e39:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e3d:	68 fc 2a 02 c0       	push   0xc0022afc
c0008e42:	e8 aa 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008e47:	f6 05 60 64 02 c0 04 	test   BYTE PTR ds:0xc0026460,0x4
c0008e4e:	c7 04 24 4d 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a4d
c0008e55:	0f 94 05 e0 5a 02 c0 	sete   BYTE PTR ds:0xc0025ae0
c0008e5c:	e8 90 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008e61:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0008e68:	e8 2a 09 00 00       	call   c0009797 <malloc>
c0008e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e70:	89 c6                	mov    esi,eax
c0008e72:	e8 9d 7b 00 00       	call   c0010a14 <ACPI::ACPI()>
c0008e77:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0008e7d:	58                   	pop    eax
c0008e7e:	5a                   	pop    edx
c0008e7f:	56                   	push   esi
c0008e80:	53                   	push   ebx
c0008e81:	e8 18 4d 00 00       	call   c000db9e <Device::addChild(Device*)>
c0008e86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008e89:	e8 b4 fc ff ff       	call   c0008b42 <Computer::detectFeatures()>
c0008e8e:	59                   	pop    ecx
c0008e8f:	5e                   	pop    esi
c0008e90:	6a 01                	push   0x1
c0008e92:	53                   	push   ebx
c0008e93:	e8 84 ff ff ff       	call   c0008e1c <Computer::enableNMI(bool)>
c0008e98:	c7 04 24 f1 29 02 c0 	mov    DWORD PTR [esp],0xc00229f1
c0008e9f:	e8 4d 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008ea4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0008eab:	e8 e7 08 00 00       	call   c0009797 <malloc>
c0008eb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008eb3:	89 c6                	mov    esi,eax
c0008eb5:	e8 02 89 00 00       	call   c00117bc <CPU::CPU()>
c0008eba:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0008ec0:	58                   	pop    eax
c0008ec1:	5a                   	pop    edx
c0008ec2:	56                   	push   esi
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 d5 4c 00 00       	call   c000db9e <Device::addChild(Device*)>
c0008ec9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0008ecf:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008ed5:	6a 00                	push   0x0
c0008ed7:	6a 00                	push   0x0
c0008ed9:	50                   	push   eax
c0008eda:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008edd:	83 c4 14             	add    esp,0x14
c0008ee0:	68 20 2b 02 c0       	push   0xc0022b20
c0008ee5:	e8 07 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008eea:	e8 8f 05 01 00       	call   c001947e <Hal::initialiseCoprocessor()>
c0008eef:	c7 04 24 65 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a65
c0008ef6:	e8 f6 08 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008efb:	c7 04 24 90 88 00 c0 	mov    DWORD PTR [esp],0xc0008890
c0008f02:	e8 e1 d0 00 00       	call   c0015fe8 <setupMultitasking(void (*)())>
c0008f07:	83 c4 14             	add    esp,0x14
c0008f0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0008f0f:	5b                   	pop    ebx
c0008f10:	5e                   	pop    esi
c0008f11:	c3                   	ret    

c0008f12 <Computer::disableNMI()>:
c0008f12:	6a 00                	push   0x0
c0008f14:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0008f18:	e8 ff fe ff ff       	call   c0008e1c <Computer::enableNMI(bool)>
c0008f1d:	58                   	pop    eax
c0008f1e:	5a                   	pop    edx
c0008f1f:	c3                   	ret    

c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0008f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f24:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f2b:	19 c0                	sbb    eax,eax
c0008f2d:	83 e0 80             	and    eax,0xffffff80
c0008f30:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008f34:	e6 70                	out    0x70,al
c0008f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f3a:	e6 71                	out    0x71,al
c0008f3c:	c3                   	ret    
c0008f3d:	90                   	nop

c0008f3e <Computer::handleNMI()>:
c0008f3e:	56                   	push   esi
c0008f3f:	53                   	push   ebx
c0008f40:	83 ec 10             	sub    esp,0x10
c0008f43:	e4 92                	in     al,0x92
c0008f45:	89 c6                	mov    esi,eax
c0008f47:	e4 61                	in     al,0x61
c0008f49:	68 80 2a 02 c0       	push   0xc0022a80
c0008f4e:	88 c3                	mov    bl,al
c0008f50:	e8 cc 37 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	83 e6 10             	and    esi,0x10
c0008f5b:	75 0d                	jne    c0008f6a <Computer::handleNMI()+0x2c>
c0008f5d:	f6 c3 40             	test   bl,0x40
c0008f60:	75 1d                	jne    c0008f7f <Computer::handleNMI()+0x41>
c0008f62:	84 db                	test   bl,bl
c0008f64:	78 2d                	js     c0008f93 <Computer::handleNMI()+0x55>
c0008f66:	58                   	pop    eax
c0008f67:	5b                   	pop    ebx
c0008f68:	5e                   	pop    esi
c0008f69:	c3                   	ret    
c0008f6a:	83 ec 0c             	sub    esp,0xc
c0008f6d:	68 91 2a 02 c0       	push   0xc0022a91
c0008f72:	e8 14 9b 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	f6 c3 40             	test   bl,0x40
c0008f7d:	74 e3                	je     c0008f62 <Computer::handleNMI()+0x24>
c0008f7f:	83 ec 0c             	sub    esp,0xc
c0008f82:	68 9e 2a 02 c0       	push   0xc0022a9e
c0008f87:	e8 ff 9a 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	84 db                	test   bl,bl
c0008f91:	79 d3                	jns    c0008f66 <Computer::handleNMI()+0x28>
c0008f93:	c7 44 24 10 a8 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022aa8
c0008f9b:	5a                   	pop    edx
c0008f9c:	5b                   	pop    ebx
c0008f9d:	5e                   	pop    esi
c0008f9e:	e9 e8 9a 00 00       	jmp    c0012a8b <Krnl::panic(char const*)>
c0008fa3:	90                   	nop

c0008fa4 <Computer::setDiskActivityLight(int, bool)>:
c0008fa4:	56                   	push   esi
c0008fa5:	53                   	push   ebx
c0008fa6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008faa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0008faf:	77 1b                	ja     c0008fcc <Computer::setDiskActivityLight(int, bool)+0x28>
c0008fb1:	e4 92                	in     al,0x92
c0008fb3:	bb 40 00 00 00       	mov    ebx,0x40
c0008fb8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0008fbc:	89 da                	mov    edx,ebx
c0008fbe:	d3 e2                	shl    edx,cl
c0008fc0:	89 f1                	mov    ecx,esi
c0008fc2:	f7 d2                	not    edx
c0008fc4:	d3 e3                	shl    ebx,cl
c0008fc6:	21 d0                	and    eax,edx
c0008fc8:	09 d8                	or     eax,ebx
c0008fca:	e6 92                	out    0x92,al
c0008fcc:	5b                   	pop    ebx
c0008fcd:	5e                   	pop    esi
c0008fce:	c3                   	ret    
c0008fcf:	90                   	nop

c0008fd0 <GDTEntry::setBase(unsigned int)>:
c0008fd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008fd8:	89 c1                	mov    ecx,eax
c0008fda:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0008fde:	c1 e9 10             	shr    ecx,0x10
c0008fe1:	c1 e8 18             	shr    eax,0x18
c0008fe4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0008fe7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0008fea:	c3                   	ret    
c0008feb:	90                   	nop

c0008fec <GDTEntry::setLimit(unsigned int)>:
c0008fec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008ff4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0008ff7:	66 89 01             	mov    WORD PTR [ecx],ax
c0008ffa:	83 e2 f0             	and    edx,0xfffffff0
c0008ffd:	c1 e8 10             	shr    eax,0x10
c0009000:	83 e0 0f             	and    eax,0xf
c0009003:	09 d0                	or     eax,edx
c0009005:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009008:	c3                   	ret    
c0009009:	90                   	nop

c000900a <GDT::GDT()>:
c000900a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000900e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009018:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000901e:	90                   	nop
c000901f:	c3                   	ret    

c0009020 <GDT::addEntry(GDTEntry)>:
c0009020:	53                   	push   ebx
c0009021:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009025:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009029:	8b 02                	mov    eax,DWORD PTR [edx]
c000902b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000902f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009033:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009037:	8d 48 01             	lea    ecx,[eax+0x1]
c000903a:	c1 e0 03             	shl    eax,0x3
c000903d:	89 0a                	mov    DWORD PTR [edx],ecx
c000903f:	5b                   	pop    ebx
c0009040:	c3                   	ret    
c0009041:	90                   	nop

c0009042 <GDT::getNumberOfEntries()>:
c0009042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009046:	8b 00                	mov    eax,DWORD PTR [eax]
c0009048:	c3                   	ret    
c0009049:	90                   	nop

c000904a <GDT::flush()>:
c000904a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000904e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009050:	83 c0 04             	add    eax,0x4
c0009053:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000905a:	a3 52 64 02 c0       	mov    ds:0xc0026452,eax
c000905f:	66 89 15 50 64 02 c0 	mov    WORD PTR ds:0xc0026450,dx
c0009066:	e9 12 73 ff ff       	jmp    c000037d <loadGDT>
c000906b:	90                   	nop

c000906c <GDT::setup()>:
c000906c:	57                   	push   edi
c000906d:	56                   	push   esi
c000906e:	53                   	push   ebx
c000906f:	83 ec 40             	sub    esp,0x40
c0009072:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009076:	6a 00                	push   0x0
c0009078:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000907c:	56                   	push   esi
c000907d:	e8 4e ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c0009082:	6a 00                	push   0x0
c0009084:	56                   	push   esi
c0009085:	e8 62 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c000908a:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009092:	6a 00                	push   0x0
c0009094:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009098:	56                   	push   esi
c0009099:	e8 32 ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c000909e:	68 ff ff ff 00       	push   0xffffff
c00090a3:	56                   	push   esi
c00090a4:	e8 43 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c00090a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00090ad:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00090b2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00090b7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00090bb:	83 c4 20             	add    esp,0x20
c00090be:	6a 00                	push   0x0
c00090c0:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00090c4:	56                   	push   esi
c00090c5:	e8 06 ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c00090ca:	68 ff ff ff 00       	push   0xffffff
c00090cf:	56                   	push   esi
c00090d0:	e8 17 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c00090d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00090d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00090dd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00090e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00090e5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00090ee:	0d 00 92 c0 00       	or     eax,0xc09200
c00090f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00090f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090fb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00090ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009107:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000910b:	89 fa                	mov    edx,edi
c000910d:	80 cc 60             	or     ah,0x60
c0009110:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009116:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000911a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000911e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009122:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009126:	80 cc 60             	or     ah,0x60
c0009129:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000912d:	89 f8                	mov    eax,edi
c000912f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009134:	09 d0                	or     eax,edx
c0009136:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000913a:	89 c7                	mov    edi,eax
c000913c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009140:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009144:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009148:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009156:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000915b:	09 d0                	or     eax,edx
c000915d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009161:	83 c4 0c             	add    esp,0xc
c0009164:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009168:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000916c:	53                   	push   ebx
c000916d:	e8 ae fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009172:	83 c4 0c             	add    esp,0xc
c0009175:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009179:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000917d:	53                   	push   ebx
c000917e:	e8 9d fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009183:	83 c4 0c             	add    esp,0xc
c0009186:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000918a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000918e:	53                   	push   ebx
c000918f:	e8 8c fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009194:	83 c4 0c             	add    esp,0xc
c0009197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000919b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000919f:	53                   	push   ebx
c00091a0:	e8 7b fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091a5:	83 c4 0c             	add    esp,0xc
c00091a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00091ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00091b0:	53                   	push   ebx
c00091b1:	e8 6a fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091b6:	83 c4 0c             	add    esp,0xc
c00091b9:	57                   	push   edi
c00091ba:	56                   	push   esi
c00091bb:	53                   	push   ebx
c00091bc:	e8 5f fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091c1:	83 c4 0c             	add    esp,0xc
c00091c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091cc:	53                   	push   ebx
c00091cd:	e8 4e fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00091d5:	e8 70 fe ff ff       	call   c000904a <GDT::flush()>
c00091da:	83 c4 50             	add    esp,0x50
c00091dd:	5b                   	pop    ebx
c00091de:	5e                   	pop    esi
c00091df:	5f                   	pop    edi
c00091e0:	c3                   	ret    

c00091e1 <idleFunction(void*)>:
c00091e1:	83 ec 0c             	sub    esp,0xc
c00091e4:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00091e9:	48                   	dec    eax
c00091ea:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00091ef:	75 01                	jne    c00091f2 <idleFunction(void*)+0x11>
c00091f1:	fb                   	sti    
c00091f2:	f4                   	hlt    
c00091f3:	e8 3a 86 01 00       	call   c0021832 <idleCommon()>
c00091f8:	eb f8                	jmp    c00091f2 <idleFunction(void*)+0x11>
c00091fa:	66 90                	xchg   ax,ax

c00091fc <IDTEntry::IDTEntry(bool)>:
c00091fc:	83 ec 04             	sub    esp,0x4
c00091ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009203:	88 04 24             	mov    BYTE PTR [esp],al
c0009206:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000920a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009214:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000921c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000921f:	83 e2 f0             	and    edx,0xfffffff0
c0009222:	83 ca 0e             	or     edx,0xe
c0009225:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009228:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000922c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000922f:	83 e2 ef             	and    edx,0xffffffef
c0009232:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009235:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009239:	74 05                	je     c0009240 <IDTEntry::IDTEntry(bool)+0x44>
c000923b:	b2 03                	mov    dl,0x3
c000923d:	eb 05                	jmp    c0009244 <IDTEntry::IDTEntry(bool)+0x48>
c000923f:	90                   	nop
c0009240:	b2 00                	mov    dl,0x0
c0009242:	66 90                	xchg   ax,ax
c0009244:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009248:	83 e2 03             	and    edx,0x3
c000924b:	88 d1                	mov    cl,dl
c000924d:	c1 e1 05             	shl    ecx,0x5
c0009250:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009253:	83 e2 9f             	and    edx,0xffffff9f
c0009256:	09 ca                	or     edx,ecx
c0009258:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000925b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000925f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009262:	83 ca 80             	or     edx,0xffffff80
c0009265:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009268:	90                   	nop
c0009269:	83 c4 04             	add    esp,0x4
c000926c:	c3                   	ret    
c000926d:	90                   	nop

c000926e <IDTEntry::setOffset(unsigned int)>:
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009276:	66 89 02             	mov    WORD PTR [edx],ax
c0009279:	c1 e8 10             	shr    eax,0x10
c000927c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009280:	c3                   	ret    
c0009281:	90                   	nop
c0009282:	66 90                	xchg   ax,ax

c0009284 <IDT::IDT()>:
c0009284:	90                   	nop
c0009285:	c3                   	ret    

c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0009286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000928a:	83 c0 30             	add    eax,0x30
c000928d:	c3                   	ret    

c000928e <IDT::addEntry(IDTEntry, int)>:
c000928e:	53                   	push   ebx
c000928f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009297:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000929b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000929f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00092a2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00092a6:	5b                   	pop    ebx
c00092a7:	c3                   	ret    

c00092a8 <IDT::addEntry(int, void (*)(), bool)>:
c00092a8:	53                   	push   ebx
c00092a9:	83 ec 10             	sub    esp,0x10
c00092ac:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00092b1:	50                   	push   eax
c00092b2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00092b6:	53                   	push   ebx
c00092b7:	e8 40 ff ff ff       	call   c00091fc <IDTEntry::IDTEntry(bool)>
c00092bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092c0:	53                   	push   ebx
c00092c1:	e8 a8 ff ff ff       	call   c000926e <IDTEntry::setOffset(unsigned int)>
c00092c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00092ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00092d6:	e8 b3 ff ff ff       	call   c000928e <IDT::addEntry(IDTEntry, int)>
c00092db:	83 c4 30             	add    esp,0x30
c00092de:	5b                   	pop    ebx
c00092df:	c3                   	ret    

c00092e0 <IDT::flush()>:
c00092e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e4:	66 c7 05 58 64 02 c0 ff 07 	mov    WORD PTR ds:0xc0026458,0x7ff
c00092ed:	a3 5a 64 02 c0       	mov    ds:0xc002645a,eax
c00092f2:	0f 01 1d 58 64 02 c0 	lidtd  ds:0xc0026458
c00092f9:	c3                   	ret    

c00092fa <IDT::setup()>:
c00092fa:	57                   	push   edi
c00092fb:	56                   	push   esi
c00092fc:	53                   	push   ebx
c00092fd:	83 ec 10             	sub    esp,0x10
c0009300:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009304:	6a 00                	push   0x0
c0009306:	68 40 10 02 c0       	push   0xc0021040
c000930b:	6a 00                	push   0x0
c000930d:	53                   	push   ebx
c000930e:	e8 95 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009313:	6a 00                	push   0x0
c0009315:	68 50 10 02 c0       	push   0xc0021050
c000931a:	6a 01                	push   0x1
c000931c:	53                   	push   ebx
c000931d:	e8 86 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009322:	83 c4 20             	add    esp,0x20
c0009325:	6a 00                	push   0x0
c0009327:	68 5a 10 02 c0       	push   0xc002105a
c000932c:	6a 02                	push   0x2
c000932e:	53                   	push   ebx
c000932f:	e8 74 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009334:	6a 00                	push   0x0
c0009336:	68 64 10 02 c0       	push   0xc0021064
c000933b:	6a 03                	push   0x3
c000933d:	53                   	push   ebx
c000933e:	e8 65 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009343:	83 c4 20             	add    esp,0x20
c0009346:	6a 00                	push   0x0
c0009348:	68 6e 10 02 c0       	push   0xc002106e
c000934d:	6a 04                	push   0x4
c000934f:	53                   	push   ebx
c0009350:	e8 53 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009355:	6a 00                	push   0x0
c0009357:	68 78 10 02 c0       	push   0xc0021078
c000935c:	6a 05                	push   0x5
c000935e:	53                   	push   ebx
c000935f:	e8 44 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009364:	83 c4 20             	add    esp,0x20
c0009367:	6a 00                	push   0x0
c0009369:	68 82 10 02 c0       	push   0xc0021082
c000936e:	6a 06                	push   0x6
c0009370:	53                   	push   ebx
c0009371:	e8 32 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009376:	6a 00                	push   0x0
c0009378:	68 8c 10 02 c0       	push   0xc002108c
c000937d:	6a 07                	push   0x7
c000937f:	53                   	push   ebx
c0009380:	e8 23 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009385:	83 c4 20             	add    esp,0x20
c0009388:	6a 00                	push   0x0
c000938a:	68 96 10 02 c0       	push   0xc0021096
c000938f:	6a 08                	push   0x8
c0009391:	53                   	push   ebx
c0009392:	e8 11 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009397:	6a 00                	push   0x0
c0009399:	68 9e 10 02 c0       	push   0xc002109e
c000939e:	6a 09                	push   0x9
c00093a0:	53                   	push   ebx
c00093a1:	e8 02 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093a6:	83 c4 20             	add    esp,0x20
c00093a9:	6a 00                	push   0x0
c00093ab:	68 a8 10 02 c0       	push   0xc00210a8
c00093b0:	6a 0a                	push   0xa
c00093b2:	53                   	push   ebx
c00093b3:	e8 f0 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093b8:	6a 00                	push   0x0
c00093ba:	68 b0 10 02 c0       	push   0xc00210b0
c00093bf:	6a 0b                	push   0xb
c00093c1:	53                   	push   ebx
c00093c2:	e8 e1 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	68 b8 10 02 c0       	push   0xc00210b8
c00093d1:	6a 0c                	push   0xc
c00093d3:	53                   	push   ebx
c00093d4:	e8 cf fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093d9:	6a 00                	push   0x0
c00093db:	68 c0 10 02 c0       	push   0xc00210c0
c00093e0:	6a 0d                	push   0xd
c00093e2:	53                   	push   ebx
c00093e3:	e8 c0 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093e8:	83 c4 20             	add    esp,0x20
c00093eb:	6a 00                	push   0x0
c00093ed:	68 c8 10 02 c0       	push   0xc00210c8
c00093f2:	6a 0e                	push   0xe
c00093f4:	53                   	push   ebx
c00093f5:	e8 ae fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093fa:	6a 00                	push   0x0
c00093fc:	68 d0 10 02 c0       	push   0xc00210d0
c0009401:	6a 0f                	push   0xf
c0009403:	53                   	push   ebx
c0009404:	e8 9f fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009409:	83 c4 20             	add    esp,0x20
c000940c:	6a 00                	push   0x0
c000940e:	68 da 10 02 c0       	push   0xc00210da
c0009413:	6a 10                	push   0x10
c0009415:	53                   	push   ebx
c0009416:	e8 8d fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000941b:	6a 00                	push   0x0
c000941d:	68 e4 10 02 c0       	push   0xc00210e4
c0009422:	6a 11                	push   0x11
c0009424:	53                   	push   ebx
c0009425:	e8 7e fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000942a:	83 c4 20             	add    esp,0x20
c000942d:	6a 00                	push   0x0
c000942f:	68 ee 10 02 c0       	push   0xc00210ee
c0009434:	6a 12                	push   0x12
c0009436:	53                   	push   ebx
c0009437:	e8 6c fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000943c:	6a 01                	push   0x1
c000943e:	68 88 11 02 c0       	push   0xc0021188
c0009443:	6a 60                	push   0x60
c0009445:	53                   	push   ebx
c0009446:	e8 5d fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000944b:	83 c4 20             	add    esp,0x20
c000944e:	6a 00                	push   0x0
c0009450:	68 8f 11 02 c0       	push   0xc002118f
c0009455:	6a 20                	push   0x20
c0009457:	53                   	push   ebx
c0009458:	e8 4b fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000945d:	6a 00                	push   0x0
c000945f:	68 7a 11 02 c0       	push   0xc002117a
c0009464:	6a 21                	push   0x21
c0009466:	53                   	push   ebx
c0009467:	e8 3c fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000946c:	83 c4 20             	add    esp,0x20
c000946f:	6a 00                	push   0x0
c0009471:	68 81 11 02 c0       	push   0xc0021181
c0009476:	6a 22                	push   0x22
c0009478:	53                   	push   ebx
c0009479:	e8 2a fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000947e:	6a 00                	push   0x0
c0009480:	68 f8 10 02 c0       	push   0xc00210f8
c0009485:	6a 23                	push   0x23
c0009487:	53                   	push   ebx
c0009488:	e8 1b fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000948d:	83 c4 20             	add    esp,0x20
c0009490:	6a 00                	push   0x0
c0009492:	68 02 11 02 c0       	push   0xc0021102
c0009497:	6a 24                	push   0x24
c0009499:	53                   	push   ebx
c000949a:	e8 09 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000949f:	6a 00                	push   0x0
c00094a1:	68 0c 11 02 c0       	push   0xc002110c
c00094a6:	6a 25                	push   0x25
c00094a8:	53                   	push   ebx
c00094a9:	e8 fa fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094ae:	83 c4 20             	add    esp,0x20
c00094b1:	6a 00                	push   0x0
c00094b3:	68 16 11 02 c0       	push   0xc0021116
c00094b8:	6a 26                	push   0x26
c00094ba:	53                   	push   ebx
c00094bb:	e8 e8 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094c0:	6a 00                	push   0x0
c00094c2:	68 20 11 02 c0       	push   0xc0021120
c00094c7:	6a 27                	push   0x27
c00094c9:	53                   	push   ebx
c00094ca:	e8 d9 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094cf:	83 c4 20             	add    esp,0x20
c00094d2:	6a 00                	push   0x0
c00094d4:	68 2a 11 02 c0       	push   0xc002112a
c00094d9:	6a 28                	push   0x28
c00094db:	53                   	push   ebx
c00094dc:	e8 c7 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094e1:	6a 00                	push   0x0
c00094e3:	68 34 11 02 c0       	push   0xc0021134
c00094e8:	6a 29                	push   0x29
c00094ea:	53                   	push   ebx
c00094eb:	e8 b8 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094f0:	83 c4 20             	add    esp,0x20
c00094f3:	6a 00                	push   0x0
c00094f5:	68 3e 11 02 c0       	push   0xc002113e
c00094fa:	6a 2a                	push   0x2a
c00094fc:	53                   	push   ebx
c00094fd:	e8 a6 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009502:	6a 00                	push   0x0
c0009504:	68 48 11 02 c0       	push   0xc0021148
c0009509:	6a 2b                	push   0x2b
c000950b:	53                   	push   ebx
c000950c:	e8 97 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009511:	83 c4 20             	add    esp,0x20
c0009514:	6a 00                	push   0x0
c0009516:	68 52 11 02 c0       	push   0xc0021152
c000951b:	6a 2c                	push   0x2c
c000951d:	53                   	push   ebx
c000951e:	e8 85 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009523:	6a 00                	push   0x0
c0009525:	68 5c 11 02 c0       	push   0xc002115c
c000952a:	6a 2d                	push   0x2d
c000952c:	53                   	push   ebx
c000952d:	e8 76 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009532:	83 c4 20             	add    esp,0x20
c0009535:	6a 00                	push   0x0
c0009537:	68 66 11 02 c0       	push   0xc0021166
c000953c:	6a 2e                	push   0x2e
c000953e:	53                   	push   ebx
c000953f:	e8 64 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009544:	6a 00                	push   0x0
c0009546:	68 70 11 02 c0       	push   0xc0021170
c000954b:	6a 2f                	push   0x2f
c000954d:	53                   	push   ebx
c000954e:	e8 55 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009553:	83 c4 20             	add    esp,0x20
c0009556:	6a 00                	push   0x0
c0009558:	68 c6 11 02 c0       	push   0xc00211c6
c000955d:	6a 30                	push   0x30
c000955f:	53                   	push   ebx
c0009560:	e8 43 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009565:	6a 00                	push   0x0
c0009567:	68 d0 11 02 c0       	push   0xc00211d0
c000956c:	6a 31                	push   0x31
c000956e:	53                   	push   ebx
c000956f:	e8 34 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009574:	83 c4 20             	add    esp,0x20
c0009577:	6a 00                	push   0x0
c0009579:	68 da 11 02 c0       	push   0xc00211da
c000957e:	6a 32                	push   0x32
c0009580:	53                   	push   ebx
c0009581:	e8 22 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009586:	6a 00                	push   0x0
c0009588:	68 e4 11 02 c0       	push   0xc00211e4
c000958d:	6a 33                	push   0x33
c000958f:	53                   	push   ebx
c0009590:	e8 13 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009595:	83 c4 20             	add    esp,0x20
c0009598:	6a 00                	push   0x0
c000959a:	68 ee 11 02 c0       	push   0xc00211ee
c000959f:	6a 34                	push   0x34
c00095a1:	53                   	push   ebx
c00095a2:	e8 01 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095a7:	6a 00                	push   0x0
c00095a9:	68 f8 11 02 c0       	push   0xc00211f8
c00095ae:	6a 35                	push   0x35
c00095b0:	53                   	push   ebx
c00095b1:	e8 f2 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095b6:	83 c4 20             	add    esp,0x20
c00095b9:	6a 00                	push   0x0
c00095bb:	68 02 12 02 c0       	push   0xc0021202
c00095c0:	6a 36                	push   0x36
c00095c2:	53                   	push   ebx
c00095c3:	e8 e0 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095c8:	6a 00                	push   0x0
c00095ca:	68 0c 12 02 c0       	push   0xc002120c
c00095cf:	6a 37                	push   0x37
c00095d1:	53                   	push   ebx
c00095d2:	e8 d1 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095d7:	83 c4 1c             	add    esp,0x1c
c00095da:	6a 03                	push   0x3
c00095dc:	6a 02                	push   0x2
c00095de:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c00095e4:	e8 4b 25 00 00       	call   c000bb34 <VAS::allocatePages(int, int)>
c00095e9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00095f0:	89 c6                	mov    esi,eax
c00095f2:	e8 a0 01 00 00       	call   c0009797 <malloc>
c00095f7:	81 c6 00 20 00 00    	add    esi,0x2000
c00095fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0009600:	89 c7                	mov    edi,eax
c0009602:	e8 01 17 00 00       	call   c000ad08 <TSS::TSS()>
c0009607:	83 c4 0c             	add    esp,0xc
c000960a:	68 96 10 02 c0       	push   0xc0021096
c000960f:	56                   	push   esi
c0009610:	57                   	push   edi
c0009611:	e8 36 17 00 00       	call   c000ad4c <TSS::setup(unsigned long, unsigned long)>
c0009616:	89 c6                	mov    esi,eax
c0009618:	58                   	pop    eax
c0009619:	5a                   	pop    edx
c000961a:	6a 00                	push   0x0
c000961c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009620:	50                   	push   eax
c0009621:	e8 d6 fb ff ff       	call   c00091fc <IDTEntry::IDTEntry(bool)>
c0009626:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000962a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000962f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009636:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000963c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009640:	80 ce 05             	or     dh,0x5
c0009643:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009646:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000964a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000964e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009654:	e8 87 fc ff ff       	call   c00092e0 <IDT::flush()>
c0009659:	83 c4 20             	add    esp,0x20
c000965c:	5b                   	pop    ebx
c000965d:	5e                   	pop    esi
c000965e:	5f                   	pop    edi
c000965f:	c3                   	ret    

c0009660 <sbrk>:
c0009660:	55                   	push   ebp
c0009661:	57                   	push   edi
c0009662:	56                   	push   esi
c0009663:	53                   	push   ebx
c0009664:	83 ec 24             	sub    esp,0x24
c0009667:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000966b:	53                   	push   ebx
c000966c:	68 70 2b 02 c0       	push   0xc0022b70
c0009671:	e8 ab 30 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009676:	83 c4 10             	add    esp,0x10
c0009679:	85 db                	test   ebx,ebx
c000967b:	74 5f                	je     c00096dc <sbrk+0x7c>
c000967d:	78 64                	js     c00096e3 <sbrk+0x83>
c000967f:	a1 60 59 02 c0       	mov    eax,ds:0xc0025960
c0009684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009688:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000968e:	89 dd                	mov    ebp,ebx
c0009690:	78 69                	js     c00096fb <sbrk+0x9b>
c0009692:	c1 fd 0c             	sar    ebp,0xc
c0009695:	bb 00 00 00 00       	mov    ebx,0x0
c000969a:	8b 35 34 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026534
c00096a0:	8b 3d 60 59 02 c0    	mov    edi,DWORD PTR ds:0xc0025960
c00096a6:	e8 1d 05 00 00       	call   c0009bc8 <Phys::allocatePage()>
c00096ab:	68 01 04 00 00       	push   0x401
c00096b0:	57                   	push   edi
c00096b1:	50                   	push   eax
c00096b2:	56                   	push   esi
c00096b3:	e8 78 23 00 00       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c00096b8:	81 05 60 59 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0025960,0x1000
c00096c2:	43                   	inc    ebx
c00096c3:	83 c4 10             	add    esp,0x10
c00096c6:	39 dd                	cmp    ebp,ebx
c00096c8:	75 d0                	jne    c000969a <sbrk+0x3a>
c00096ca:	0f 20 d8             	mov    eax,cr3
c00096cd:	0f 22 d8             	mov    cr3,eax
c00096d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	5b                   	pop    ebx
c00096d8:	5e                   	pop    esi
c00096d9:	5f                   	pop    edi
c00096da:	5d                   	pop    ebp
c00096db:	c3                   	ret    
c00096dc:	a1 60 59 02 c0       	mov    eax,ds:0xc0025960
c00096e1:	eb f1                	jmp    c00096d4 <sbrk+0x74>
c00096e3:	83 ec 08             	sub    esp,0x8
c00096e6:	53                   	push   ebx
c00096e7:	68 9c 2b 02 c0       	push   0xc0022b9c
c00096ec:	e8 30 30 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00096f1:	83 c4 10             	add    esp,0x10
c00096f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096f9:	eb d9                	jmp    c00096d4 <sbrk+0x74>
c00096fb:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009701:	eb 8f                	jmp    c0009692 <sbrk+0x32>

c0009703 <mmap>:
c0009703:	83 ec 18             	sub    esp,0x18
c0009706:	68 8e 2b 02 c0       	push   0xc0022b8e
c000970b:	e8 7b 93 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0009710:	b8 00 00 00 00       	mov    eax,0x0
c0009715:	83 c4 1c             	add    esp,0x1c
c0009718:	c3                   	ret    

c0009719 <munmap>:
c0009719:	83 ec 18             	sub    esp,0x18
c000971c:	68 93 2b 02 c0       	push   0xc0022b93
c0009721:	e8 65 93 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0009726:	b8 00 00 00 00       	mov    eax,0x0
c000972b:	83 c4 1c             	add    esp,0x1c
c000972e:	c3                   	ret    

c000972f <liballoc_lock()>:
c000972f:	fa                   	cli    
c0009730:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0009736:	b8 00 00 00 00       	mov    eax,0x0
c000973b:	c3                   	ret    

c000973c <liballoc_unlock()>:
c000973c:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0009741:	48                   	dec    eax
c0009742:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0009747:	75 01                	jne    c000974a <liballoc_unlock()+0xe>
c0009749:	fb                   	sti    
c000974a:	b8 00 00 00 00       	mov    eax,0x0
c000974f:	c3                   	ret    

c0009750 <liballoc_alloc(int)>:
c0009750:	83 ec 10             	sub    esp,0x10
c0009753:	6a 01                	push   0x1
c0009755:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009759:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c000975f:	e8 d0 23 00 00       	call   c000bb34 <VAS::allocatePages(int, int)>
c0009764:	83 c4 1c             	add    esp,0x1c
c0009767:	c3                   	ret    

c0009768 <liballoc_free(void*, int)>:
c0009768:	83 ec 14             	sub    esp,0x14
c000976b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000976f:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c0009775:	e8 62 20 00 00       	call   c000b7dc <VAS::freeAllocatedPages(unsigned long)>
c000977a:	b8 00 00 00 00       	mov    eax,0x0
c000977f:	83 c4 1c             	add    esp,0x1c
c0009782:	c3                   	ret    

c0009783 <realloc>:
c0009783:	83 ec 14             	sub    esp,0x14
c0009786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000978a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000978e:	e8 f1 7b ff ff       	call   c0001384 <dlrealloc>
c0009793:	83 c4 1c             	add    esp,0x1c
c0009796:	c3                   	ret    

c0009797 <malloc>:
c0009797:	83 ec 18             	sub    esp,0x18
c000979a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979e:	e8 a4 76 ff ff       	call   c0000e47 <dlmalloc>
c00097a3:	83 c4 1c             	add    esp,0x1c
c00097a6:	c3                   	ret    

c00097a7 <free>:
c00097a7:	83 ec 18             	sub    esp,0x18
c00097aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097ae:	e8 39 73 ff ff       	call   c0000aec <dlfree>
c00097b3:	83 c4 1c             	add    esp,0x1c
c00097b6:	c3                   	ret    

c00097b7 <rfree>:
c00097b7:	83 ec 18             	sub    esp,0x18
c00097ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097be:	e8 29 73 ff ff       	call   c0000aec <dlfree>
c00097c3:	83 c4 1c             	add    esp,0x1c
c00097c6:	c3                   	ret    

c00097c7 <calloc>:
c00097c7:	56                   	push   esi
c00097c8:	53                   	push   ebx
c00097c9:	83 ec 10             	sub    esp,0x10
c00097cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00097d0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00097d5:	53                   	push   ebx
c00097d6:	e8 bc ff ff ff       	call   c0009797 <malloc>
c00097db:	89 c6                	mov    esi,eax
c00097dd:	83 c4 0c             	add    esp,0xc
c00097e0:	53                   	push   ebx
c00097e1:	6a 00                	push   0x0
c00097e3:	50                   	push   eax
c00097e4:	e8 bf 6c ff ff       	call   c00004a8 <memset>
c00097e9:	89 f0                	mov    eax,esi
c00097eb:	83 c4 14             	add    esp,0x14
c00097ee:	5b                   	pop    ebx
c00097ef:	5e                   	pop    esi
c00097f0:	c3                   	ret    

c00097f1 <Krnl::setBootMessage(char const*)>:
c00097f1:	57                   	push   edi
c00097f2:	56                   	push   esi
c00097f3:	53                   	push   ebx
c00097f4:	81 ec a4 00 00 00    	sub    esp,0xa4
c00097fa:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009801:	68 9e 00 00 00       	push   0x9e
c0009806:	6a 00                	push   0x0
c0009808:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000980c:	56                   	push   esi
c000980d:	e8 96 6c ff ff       	call   c00004a8 <memset>
c0009812:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009815:	e8 aa 6c ff ff       	call   c00004c4 <strlen>
c000981a:	ba 50 00 00 00       	mov    edx,0x50
c000981f:	83 c4 10             	add    esp,0x10
c0009822:	29 c2                	sub    edx,eax
c0009824:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009828:	d1 ea                	shr    edx,1
c000982a:	84 c0                	test   al,al
c000982c:	74 19                	je     c0009847 <Krnl::setBootMessage(char const*)+0x56>
c000982e:	01 d2                	add    edx,edx
c0009830:	43                   	inc    ebx
c0009831:	01 f2                	add    edx,esi
c0009833:	80 cc 0f             	or     ah,0xf
c0009836:	83 c2 02             	add    edx,0x2
c0009839:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000983d:	43                   	inc    ebx
c000983e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009843:	84 c0                	test   al,al
c0009845:	75 ec                	jne    c0009833 <Krnl::setBootMessage(char const*)+0x42>
c0009847:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000984c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009851:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009853:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009859:	5b                   	pop    ebx
c000985a:	5e                   	pop    esi
c000985b:	5f                   	pop    edi
c000985c:	c3                   	ret    

c000985d <kernel_main>:
c000985d:	57                   	push   edi
c000985e:	bf f9 03 00 00       	mov    edi,0x3f9
c0009863:	56                   	push   esi
c0009864:	89 fa                	mov    edx,edi
c0009866:	53                   	push   ebx
c0009867:	31 f6                	xor    esi,esi
c0009869:	83 ec 2c             	sub    esp,0x2c
c000986c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009871:	a3 60 64 02 c0       	mov    ds:0xc0026460,eax
c0009876:	89 f0                	mov    eax,esi
c0009878:	ee                   	out    dx,al
c0009879:	bb fb 03 00 00       	mov    ebx,0x3fb
c000987e:	b0 80                	mov    al,0x80
c0009880:	89 da                	mov    edx,ebx
c0009882:	ee                   	out    dx,al
c0009883:	b1 03                	mov    cl,0x3
c0009885:	ba f8 03 00 00       	mov    edx,0x3f8
c000988a:	88 c8                	mov    al,cl
c000988c:	ee                   	out    dx,al
c000988d:	89 f0                	mov    eax,esi
c000988f:	89 fa                	mov    edx,edi
c0009891:	ee                   	out    dx,al
c0009892:	88 c8                	mov    al,cl
c0009894:	89 da                	mov    edx,ebx
c0009896:	ee                   	out    dx,al
c0009897:	b0 c7                	mov    al,0xc7
c0009899:	ba fa 03 00 00       	mov    edx,0x3fa
c000989e:	ee                   	out    dx,al
c000989f:	b0 0b                	mov    al,0xb
c00098a1:	ba fc 03 00 00       	mov    edx,0x3fc
c00098a6:	ee                   	out    dx,al
c00098a7:	68 cc 2b 02 c0       	push   0xc0022bcc
c00098ac:	e8 70 2e 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00098b1:	0f b6 05 80 59 02 c0 	movzx  eax,BYTE PTR ds:0xc0025980
c00098b8:	83 c4 10             	add    esp,0x10
c00098bb:	84 c0                	test   al,al
c00098bd:	74 6c                	je     c000992b <kernel_main+0xce>
c00098bf:	31 db                	xor    ebx,ebx
c00098c1:	bf 0a 00 00 00       	mov    edi,0xa
c00098c6:	be 05 00 00 00       	mov    esi,0x5
c00098cb:	31 c9                	xor    ecx,ecx
c00098cd:	eb 2a                	jmp    c00098f9 <kernel_main+0x9c>
c00098cf:	3c 0d                	cmp    al,0xd
c00098d1:	74 1a                	je     c00098ed <kernel_main+0x90>
c00098d3:	3c 0a                	cmp    al,0xa
c00098d5:	74 40                	je     c0009917 <kernel_main+0xba>
c00098d7:	8d 14 b6             	lea    edx,[esi+esi*4]
c00098da:	80 cc 0e             	or     ah,0xe
c00098dd:	c1 e2 04             	shl    edx,0x4
c00098e0:	01 ca                	add    edx,ecx
c00098e2:	41                   	inc    ecx
c00098e3:	01 fa                	add    edx,edi
c00098e5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c00098ed:	43                   	inc    ebx
c00098ee:	0f b6 83 80 59 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda680]
c00098f5:	84 c0                	test   al,al
c00098f7:	74 32                	je     c000992b <kernel_main+0xce>
c00098f9:	80 b9 b6 59 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda64a],0xdb
c0009900:	75 cd                	jne    c00098cf <kernel_main+0x72>
c0009902:	0f b6 91 b5 59 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda64b]
c0009909:	83 e2 fe             	and    edx,0xfffffffe
c000990c:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009912:	75 bb                	jne    c00098cf <kernel_main+0x72>
c0009914:	47                   	inc    edi
c0009915:	eb b8                	jmp    c00098cf <kernel_main+0x72>
c0009917:	43                   	inc    ebx
c0009918:	46                   	inc    esi
c0009919:	31 c9                	xor    ecx,ecx
c000991b:	0f b6 83 80 59 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda680]
c0009922:	bf 0a 00 00 00       	mov    edi,0xa
c0009927:	84 c0                	test   al,al
c0009929:	75 ce                	jne    c00098f9 <kernel_main+0x9c>
c000992b:	83 ec 0c             	sub    esp,0xc
c000992e:	68 e4 2b 02 c0       	push   0xc0022be4
c0009933:	e8 b9 fe ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0009938:	a1 24 05 00 00       	mov    eax,ds:0x524
c000993d:	05 ff 0f 00 00       	add    eax,0xfff
c0009942:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009947:	89 04 24             	mov    DWORD PTR [esp],eax
c000994a:	e8 f8 03 00 00       	call   c0009d47 <Phys::physicalMemorySetup(unsigned int)>
c000994f:	e8 30 1c 00 00       	call   c000b584 <Virt::virtualMemorySetup()>
c0009954:	58                   	pop    eax
c0009955:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009959:	53                   	push   ebx
c000995a:	e8 fd 27 00 00       	call   c000c15c <VAS::VAS()>
c000995f:	89 1d 34 65 02 c0    	mov    DWORD PTR ds:0xc0026534,ebx
c0009965:	e8 b6 66 ff ff       	call   c0000020 <callGlobalConstructors>
c000996a:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009971:	e8 21 fe ff ff       	call   c0009797 <malloc>
c0009976:	89 04 24             	mov    DWORD PTR [esp],eax
c0009979:	89 c6                	mov    esi,eax
c000997b:	e8 64 f0 ff ff       	call   c00089e4 <Computer::Computer()>
c0009980:	6a 00                	push   0x0
c0009982:	89 35 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,esi
c0009988:	6a 00                	push   0x0
c000998a:	6a 00                	push   0x0
c000998c:	56                   	push   esi
c000998d:	e8 a2 f4 ff ff       	call   c0008e34 <Computer::open(int, int, void*)>
c0009992:	83 c4 14             	add    esp,0x14
c0009995:	53                   	push   ebx
c0009996:	e8 19 1f 00 00       	call   c000b8b4 <VAS::~VAS()>
c000999b:	83 c4 30             	add    esp,0x30
c000999e:	5b                   	pop    ebx
c000999f:	5e                   	pop    esi
c00099a0:	5f                   	pop    edi
c00099a1:	c3                   	ret    

c00099a2 <Phys::allocateDMA(unsigned long)>:
c00099a2:	55                   	push   ebp
c00099a3:	31 ed                	xor    ebp,ebp
c00099a5:	57                   	push   edi
c00099a6:	56                   	push   esi
c00099a7:	53                   	push   ebx
c00099a8:	31 db                	xor    ebx,ebx
c00099aa:	83 ec 28             	sub    esp,0x28
c00099ad:	68 03 2c 02 c0       	push   0xc0022c03
c00099b2:	e8 6a 2d 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00099b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00099bb:	83 c4 10             	add    esp,0x10
c00099be:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00099c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00099cc:	c1 ef 0c             	shr    edi,0xc
c00099cf:	31 c0                	xor    eax,eax
c00099d1:	eb 19                	jmp    c00099ec <Phys::allocateDMA(unsigned long)+0x4a>
c00099d3:	85 c0                	test   eax,eax
c00099d5:	75 06                	jne    c00099dd <Phys::allocateDMA(unsigned long)+0x3b>
c00099d7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00099db:	89 dd                	mov    ebp,ebx
c00099dd:	8d 70 01             	lea    esi,[eax+0x1]
c00099e0:	39 f7                	cmp    edi,esi
c00099e2:	74 3f                	je     c0009a23 <Phys::allocateDMA(unsigned long)+0x81>
c00099e4:	89 f0                	mov    eax,esi
c00099e6:	43                   	inc    ebx
c00099e7:	83 fb 0f             	cmp    ebx,0xf
c00099ea:	7f 11                	jg     c00099fd <Phys::allocateDMA(unsigned long)+0x5b>
c00099ec:	80 bb 7c 64 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9b84],0x0
c00099f3:	74 de                	je     c00099d3 <Phys::allocateDMA(unsigned long)+0x31>
c00099f5:	31 c0                	xor    eax,eax
c00099f7:	43                   	inc    ebx
c00099f8:	83 fb 0f             	cmp    ebx,0xf
c00099fb:	7e ef                	jle    c00099ec <Phys::allocateDMA(unsigned long)+0x4a>
c00099fd:	83 ec 0c             	sub    esp,0xc
c0009a00:	68 33 2c 02 c0       	push   0xc0022c33
c0009a05:	e8 17 2d 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009a0a:	c7 04 24 f0 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cf0
c0009a11:	e8 75 90 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0009a16:	83 c4 10             	add    esp,0x10
c0009a19:	31 c0                	xor    eax,eax
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	5b                   	pop    ebx
c0009a1f:	5e                   	pop    esi
c0009a20:	5f                   	pop    edi
c0009a21:	5d                   	pop    ebp
c0009a22:	c3                   	ret    
c0009a23:	89 e9                	mov    ecx,ebp
c0009a25:	c1 f9 04             	sar    ecx,0x4
c0009a28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a2c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009a30:	89 ca                	mov    edx,ecx
c0009a32:	4a                   	dec    edx
c0009a33:	79 03                	jns    c0009a38 <Phys::allocateDMA(unsigned long)+0x96>
c0009a35:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009a38:	c1 fa 04             	sar    edx,0x4
c0009a3b:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009a3f:	74 08                	je     c0009a49 <Phys::allocateDMA(unsigned long)+0xa7>
c0009a41:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009a45:	31 c0                	xor    eax,eax
c0009a47:	eb ae                	jmp    c00099f7 <Phys::allocateDMA(unsigned long)+0x55>
c0009a49:	85 f6                	test   esi,esi
c0009a4b:	74 15                	je     c0009a62 <Phys::allocateDMA(unsigned long)+0xc0>
c0009a4d:	8d 95 7c 64 02 c0    	lea    edx,[ebp-0x3ffd9b84]
c0009a53:	8d 84 05 7d 64 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9b83]
c0009a5a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009a5d:	42                   	inc    edx
c0009a5e:	39 d0                	cmp    eax,edx
c0009a60:	75 f8                	jne    c0009a5a <Phys::allocateDMA(unsigned long)+0xb8>
c0009a62:	83 ec 0c             	sub    esp,0xc
c0009a65:	01 3d 74 64 02 c0    	add    DWORD PTR ds:0xc0026474,edi
c0009a6b:	68 1c 2c 02 c0       	push   0xc0022c1c
c0009a70:	e8 ac 2c 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a7c:	85 c0                	test   eax,eax
c0009a7e:	74 23                	je     c0009aa3 <Phys::allocateDMA(unsigned long)+0x101>
c0009a80:	83 ec 0c             	sub    esp,0xc
c0009a83:	68 10 58 02 c0       	push   0xc0025810
c0009a88:	e8 94 2c 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009a8d:	c7 04 24 f0 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cf0
c0009a94:	e8 f2 8f 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0009a99:	83 c4 10             	add    esp,0x10
c0009a9c:	89 f0                	mov    eax,esi
c0009a9e:	e9 43 ff ff ff       	jmp    c00099e6 <Phys::allocateDMA(unsigned long)+0x44>
c0009aa3:	c1 e5 0c             	shl    ebp,0xc
c0009aa6:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009aac:	e9 6a ff ff ff       	jmp    c0009a1b <Phys::allocateDMA(unsigned long)+0x79>

c0009ab1 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ab1:	83 ec 18             	sub    esp,0x18
c0009ab4:	68 37 2c 02 c0       	push   0xc0022c37
c0009ab9:	e8 63 2c 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009abe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009ac2:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009acc:	c1 ea 0c             	shr    edx,0xc
c0009acf:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009ad4:	29 15 74 64 02 c0    	sub    DWORD PTR ds:0xc0026474,edx
c0009ada:	c1 e8 0c             	shr    eax,0xc
c0009add:	83 c4 10             	add    esp,0x10
c0009ae0:	85 d2                	test   edx,edx
c0009ae2:	74 0f                	je     c0009af3 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009ae4:	05 7c 64 02 c0       	add    eax,0xc002647c
c0009ae9:	01 c2                	add    edx,eax
c0009aeb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009aee:	40                   	inc    eax
c0009aef:	39 d0                	cmp    eax,edx
c0009af1:	75 f8                	jne    c0009aeb <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009af3:	83 c4 0c             	add    esp,0xc
c0009af6:	c3                   	ret    

c0009af7 <Phys::setPageState(unsigned long, bool)>:
c0009af7:	56                   	push   esi
c0009af8:	ba 01 00 00 00       	mov    edx,0x1
c0009afd:	53                   	push   ebx
c0009afe:	8b 35 c4 5a 02 c0    	mov    esi,DWORD PTR ds:0xc0025ac4
c0009b04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009b08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009b0c:	89 c8                	mov    eax,ecx
c0009b0e:	83 e1 07             	and    ecx,0x7
c0009b11:	c1 e8 03             	shr    eax,0x3
c0009b14:	d3 e3                	shl    ebx,cl
c0009b16:	01 c6                	add    esi,eax
c0009b18:	d3 e2                	shl    edx,cl
c0009b1a:	f7 d2                	not    edx
c0009b1c:	20 16                	and    BYTE PTR [esi],dl
c0009b1e:	03 05 c4 5a 02 c0    	add    eax,DWORD PTR ds:0xc0025ac4
c0009b24:	08 18                	or     BYTE PTR [eax],bl
c0009b26:	5b                   	pop    ebx
c0009b27:	5e                   	pop    esi
c0009b28:	c3                   	ret    

c0009b29 <Phys::getPageState(unsigned long)>:
c0009b29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009b2d:	8b 15 c4 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025ac4
c0009b33:	89 c8                	mov    eax,ecx
c0009b35:	83 e1 07             	and    ecx,0x7
c0009b38:	c1 e8 03             	shr    eax,0x3
c0009b3b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009b3f:	d3 f8                	sar    eax,cl
c0009b41:	83 e0 01             	and    eax,0x1
c0009b44:	c3                   	ret    

c0009b45 <Phys::freePage(unsigned long)>:
c0009b45:	53                   	push   ebx
c0009b46:	83 ec 10             	sub    esp,0x10
c0009b49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b4d:	53                   	push   ebx
c0009b4e:	68 4d 2c 02 c0       	push   0xc0022c4d
c0009b53:	e8 c9 2b 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009b58:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009b5e:	83 c4 10             	add    esp,0x10
c0009b61:	3d ff ff 00 00       	cmp    eax,0xffff
c0009b66:	76 3d                	jbe    c0009ba5 <Phys::freePage(unsigned long)+0x60>
c0009b68:	83 ec 0c             	sub    esp,0xc
c0009b6b:	c1 eb 0c             	shr    ebx,0xc
c0009b6e:	53                   	push   ebx
c0009b6f:	e8 b5 ff ff ff       	call   c0009b29 <Phys::getPageState(unsigned long)>
c0009b74:	83 c4 10             	add    esp,0x10
c0009b77:	84 c0                	test   al,al
c0009b79:	74 19                	je     c0009b94 <Phys::freePage(unsigned long)+0x4f>
c0009b7b:	83 ec 08             	sub    esp,0x8
c0009b7e:	ff 0d 74 64 02 c0    	dec    DWORD PTR ds:0xc0026474
c0009b84:	6a 00                	push   0x0
c0009b86:	53                   	push   ebx
c0009b87:	e8 6b ff ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 c4 08             	add    esp,0x8
c0009b92:	5b                   	pop    ebx
c0009b93:	c3                   	ret    
c0009b94:	c7 44 24 10 77 2c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022c77
c0009b9c:	83 c4 08             	add    esp,0x8
c0009b9f:	5b                   	pop    ebx
c0009ba0:	e9 e6 8e 00 00       	jmp    c0012a8b <Krnl::panic(char const*)>
c0009ba5:	83 ec 08             	sub    esp,0x8
c0009ba8:	53                   	push   ebx
c0009ba9:	68 60 2c 02 c0       	push   0xc0022c60
c0009bae:	e8 6e 2b 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009bb3:	58                   	pop    eax
c0009bb4:	5a                   	pop    edx
c0009bb5:	68 00 10 00 00       	push   0x1000
c0009bba:	53                   	push   ebx
c0009bbb:	e8 f1 fe ff ff       	call   c0009ab1 <Phys::freeDMA(unsigned long, unsigned long)>
c0009bc0:	83 c4 10             	add    esp,0x10
c0009bc3:	83 c4 08             	add    esp,0x8
c0009bc6:	5b                   	pop    ebx
c0009bc7:	c3                   	ret    

c0009bc8 <Phys::allocatePage()>:
c0009bc8:	56                   	push   esi
c0009bc9:	53                   	push   ebx
c0009bca:	83 ec 14             	sub    esp,0x14
c0009bcd:	8b 35 68 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026468
c0009bd3:	89 f3                	mov    ebx,esi
c0009bd5:	eb 0a                	jmp    c0009be1 <Phys::allocatePage()+0x19>
c0009bd7:	89 1d 68 64 02 c0    	mov    DWORD PTR ds:0xc0026468,ebx
c0009bdd:	39 de                	cmp    esi,ebx
c0009bdf:	74 24                	je     c0009c05 <Phys::allocatePage()+0x3d>
c0009be1:	53                   	push   ebx
c0009be2:	e8 42 ff ff ff       	call   c0009b29 <Phys::getPageState(unsigned long)>
c0009be7:	5a                   	pop    edx
c0009be8:	84 c0                	test   al,al
c0009bea:	74 69                	je     c0009c55 <Phys::allocatePage()+0x8d>
c0009bec:	43                   	inc    ebx
c0009bed:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009bf3:	75 e2                	jne    c0009bd7 <Phys::allocatePage()+0xf>
c0009bf5:	31 db                	xor    ebx,ebx
c0009bf7:	c7 05 68 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026468,0x0
c0009c01:	39 de                	cmp    esi,ebx
c0009c03:	75 dc                	jne    c0009be1 <Phys::allocatePage()+0x19>
c0009c05:	83 ec 0c             	sub    esp,0xc
c0009c08:	80 35 8c 64 02 c0 01 	xor    BYTE PTR ds:0xc002648c,0x1
c0009c0f:	68 18 2d 02 c0       	push   0xc0022d18
c0009c14:	e8 08 2b 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009c19:	58                   	pop    eax
c0009c1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009c1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c22:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009c28:	e8 83 27 00 00       	call   c000c3b0 <VAS::scanForEviction()>
c0009c2d:	83 c4 10             	add    esp,0x10
c0009c30:	85 c0                	test   eax,eax
c0009c32:	75 62                	jne    c0009c96 <Phys::allocatePage()+0xce>
c0009c34:	83 ec 0c             	sub    esp,0xc
c0009c37:	68 3c 2d 02 c0       	push   0xc0022d3c
c0009c3c:	e8 4a 8e 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0009c41:	83 c4 10             	add    esp,0x10
c0009c44:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c0009c4a:	53                   	push   ebx
c0009c4b:	e8 d9 fe ff ff       	call   c0009b29 <Phys::getPageState(unsigned long)>
c0009c50:	5a                   	pop    edx
c0009c51:	84 c0                	test   al,al
c0009c53:	75 97                	jne    c0009bec <Phys::allocatePage()+0x24>
c0009c55:	6a 01                	push   0x1
c0009c57:	53                   	push   ebx
c0009c58:	e8 9a fe ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009c5d:	5a                   	pop    edx
c0009c5e:	a1 74 64 02 c0       	mov    eax,ds:0xc0026474
c0009c63:	59                   	pop    ecx
c0009c64:	40                   	inc    eax
c0009c65:	8b 15 68 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026468
c0009c6b:	a3 74 64 02 c0       	mov    ds:0xc0026474,eax
c0009c70:	c1 e2 0c             	shl    edx,0xc
c0009c73:	52                   	push   edx
c0009c74:	ff 35 78 64 02 c0    	push   DWORD PTR ds:0xc0026478
c0009c7a:	50                   	push   eax
c0009c7b:	68 8d 2c 02 c0       	push   0xc0022c8d
c0009c80:	e8 9c 2a 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009c85:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	c1 e0 0c             	shl    eax,0xc
c0009c90:	83 c4 14             	add    esp,0x14
c0009c93:	5b                   	pop    ebx
c0009c94:	5e                   	pop    esi
c0009c95:	c3                   	ret    
c0009c96:	83 ec 08             	sub    esp,0x8
c0009c99:	89 c2                	mov    edx,eax
c0009c9b:	6a 01                	push   0x1
c0009c9d:	c1 ea 0c             	shr    edx,0xc
c0009ca0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ca4:	52                   	push   edx
c0009ca5:	e8 4d fe ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009caa:	83 c4 10             	add    esp,0x10
c0009cad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cb1:	eb dd                	jmp    c0009c90 <Phys::allocatePage()+0xc8>

c0009cb3 <Phys::allocateContiguousPages(int)>:
c0009cb3:	57                   	push   edi
c0009cb4:	56                   	push   esi
c0009cb5:	53                   	push   ebx
c0009cb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009cba:	fa                   	cli    
c0009cbb:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0009cc1:	31 db                	xor    ebx,ebx
c0009cc3:	85 db                	test   ebx,ebx
c0009cc5:	75 11                	jne    c0009cd8 <Phys::allocateContiguousPages(int)+0x25>
c0009cc7:	e8 fc fe ff ff       	call   c0009bc8 <Phys::allocatePage()>
c0009ccc:	83 fe 01             	cmp    esi,0x1
c0009ccf:	89 c7                	mov    edi,eax
c0009cd1:	74 21                	je     c0009cf4 <Phys::allocateContiguousPages(int)+0x41>
c0009cd3:	bb 01 00 00 00       	mov    ebx,0x1
c0009cd8:	e8 eb fe ff ff       	call   c0009bc8 <Phys::allocatePage()>
c0009cdd:	89 da                	mov    edx,ebx
c0009cdf:	c1 e2 0c             	shl    edx,0xc
c0009ce2:	01 fa                	add    edx,edi
c0009ce4:	39 c2                	cmp    edx,eax
c0009ce6:	74 20                	je     c0009d08 <Phys::allocateContiguousPages(int)+0x55>
c0009ce8:	bb 01 00 00 00       	mov    ebx,0x1
c0009ced:	89 c7                	mov    edi,eax
c0009cef:	83 fe 01             	cmp    esi,0x1
c0009cf2:	75 e4                	jne    c0009cd8 <Phys::allocateContiguousPages(int)+0x25>
c0009cf4:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0009cf9:	48                   	dec    eax
c0009cfa:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0009cff:	75 01                	jne    c0009d02 <Phys::allocateContiguousPages(int)+0x4f>
c0009d01:	fb                   	sti    
c0009d02:	89 f8                	mov    eax,edi
c0009d04:	5b                   	pop    ebx
c0009d05:	5e                   	pop    esi
c0009d06:	5f                   	pop    edi
c0009d07:	c3                   	ret    
c0009d08:	43                   	inc    ebx
c0009d09:	39 f3                	cmp    ebx,esi
c0009d0b:	75 b6                	jne    c0009cc3 <Phys::allocateContiguousPages(int)+0x10>
c0009d0d:	eb e5                	jmp    c0009cf4 <Phys::allocateContiguousPages(int)+0x41>

c0009d0f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009d0f:	56                   	push   esi
c0009d10:	53                   	push   ebx
c0009d11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d15:	39 1d 6c 64 02 c0    	cmp    DWORD PTR ds:0xc002646c,ebx
c0009d1b:	73 06                	jae    c0009d23 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009d1d:	89 1d 6c 64 02 c0    	mov    DWORD PTR ds:0xc002646c,ebx
c0009d23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d27:	c1 eb 0c             	shr    ebx,0xc
c0009d2a:	c1 e8 0c             	shr    eax,0xc
c0009d2d:	39 d8                	cmp    eax,ebx
c0009d2f:	73 13                	jae    c0009d44 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009d31:	6a 00                	push   0x0
c0009d33:	8d 70 01             	lea    esi,[eax+0x1]
c0009d36:	50                   	push   eax
c0009d37:	e8 bb fd ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009d3c:	5a                   	pop    edx
c0009d3d:	89 f0                	mov    eax,esi
c0009d3f:	59                   	pop    ecx
c0009d40:	39 f3                	cmp    ebx,esi
c0009d42:	75 ed                	jne    c0009d31 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009d44:	5b                   	pop    ebx
c0009d45:	5e                   	pop    esi
c0009d46:	c3                   	ret    

c0009d47 <Phys::physicalMemorySetup(unsigned int)>:
c0009d47:	55                   	push   ebp
c0009d48:	57                   	push   edi
c0009d49:	56                   	push   esi
c0009d4a:	53                   	push   ebx
c0009d4b:	31 db                	xor    ebx,ebx
c0009d4d:	83 ec 40             	sub    esp,0x40
c0009d50:	6a 10                	push   0x10
c0009d52:	6a 00                	push   0x0
c0009d54:	68 7c 64 02 c0       	push   0xc002647c
c0009d59:	e8 4a 67 ff ff       	call   c00004a8 <memset>
c0009d5e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009d62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d67:	05 00 10 00 00       	add    eax,0x1000
c0009d6c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009d70:	5a                   	pop    edx
c0009d71:	59                   	pop    ecx
c0009d72:	50                   	push   eax
c0009d73:	68 ab 2c 02 c0       	push   0xc0022cab
c0009d78:	e8 a4 29 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009d7d:	83 c4 10             	add    esp,0x10
c0009d80:	83 ec 08             	sub    esp,0x8
c0009d83:	6a 01                	push   0x1
c0009d85:	53                   	push   ebx
c0009d86:	43                   	inc    ebx
c0009d87:	e8 6b fd ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009d95:	75 e9                	jne    c0009d80 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009d97:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009d9e:	66 85 c0             	test   ax,ax
c0009da1:	0f 84 8e 01 00 00    	je     c0009f35 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009da7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009db3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009db7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009dbc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009dc0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009dc8:	eb 15                	jmp    c0009ddf <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009dca:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009dce:	83 c3 18             	add    ebx,0x18
c0009dd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dd5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009dd9:	0f 84 66 01 00 00    	je     c0009f45 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009ddf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009de2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009de5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009df0:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009df2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009df5:	01 f0                	add    eax,esi
c0009df7:	55                   	push   ebp
c0009df8:	11 fa                	adc    edx,edi
c0009dfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009dfe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009e02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e06:	56                   	push   esi
c0009e07:	68 6c 2d 02 c0       	push   0xc0022d6c
c0009e0c:	e8 10 29 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009e11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	09 f8                	or     eax,edi
c0009e1a:	0f 85 25 01 00 00    	jne    c0009f45 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009e20:	4d                   	dec    ebp
c0009e21:	75 a7                	jne    c0009dca <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e23:	ba 00 00 08 00       	mov    edx,0x80000
c0009e28:	89 c1                	mov    ecx,eax
c0009e2a:	39 f2                	cmp    edx,esi
c0009e2c:	19 f9                	sbb    ecx,edi
c0009e2e:	0f 82 a7 00 00 00    	jb     c0009edb <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009e34:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0009e38:	89 c1                	mov    ecx,eax
c0009e3a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0009e3e:	0f 83 97 00 00 00    	jae    c0009edb <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009e44:	ba 00 00 0a 00       	mov    edx,0xa0000
c0009e49:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009e4d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009e51:	39 fa                	cmp    edx,edi
c0009e53:	19 e8                	sbb    eax,ebp
c0009e55:	0f 82 9a 01 00 00    	jb     c0009ff5 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0009e5b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009e5f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009e63:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0009e69:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009e6e:	83 d5 ff             	adc    ebp,0xffffffff
c0009e71:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0009e75:	31 c0                	xor    eax,eax
c0009e77:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0009e7b:	39 fa                	cmp    edx,edi
c0009e7d:	89 c1                	mov    ecx,eax
c0009e7f:	19 e9                	sbb    ecx,ebp
c0009e81:	0f 83 43 ff ff ff    	jae    c0009dca <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e87:	be 00 00 08 00       	mov    esi,0x80000
c0009e8c:	51                   	push   ecx
c0009e8d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009e91:	57                   	push   edi
c0009e92:	56                   	push   esi
c0009e93:	68 90 2d 02 c0       	push   0xc0022d90
c0009e98:	e8 84 28 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009e9d:	5d                   	pop    ebp
c0009e9e:	58                   	pop    eax
c0009e9f:	57                   	push   edi
c0009ea0:	56                   	push   esi
c0009ea1:	e8 69 fe ff ff       	call   c0009d0f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0009ea6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009eaa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009eae:	83 c4 0c             	add    esp,0xc
c0009eb1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0009eb5:	03 05 78 64 02 c0    	add    eax,DWORD PTR ds:0xc0026478
c0009ebb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009ec2:	a3 78 64 02 c0       	mov    ds:0xc0026478,eax
c0009ec7:	52                   	push   edx
c0009ec8:	50                   	push   eax
c0009ec9:	68 d1 2c 02 c0       	push   0xc0022cd1
c0009ece:	e8 4e 28 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	e9 ef fe ff ff       	jmp    c0009dca <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009edb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0009edf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ee3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009ee7:	39 ea                	cmp    edx,ebp
c0009ee9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0009eed:	0f 82 d7 fe ff ff    	jb     c0009dca <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009ef3:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009ef8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0009efc:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0009f00:	0f 83 c4 fe ff ff    	jae    c0009dca <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009f06:	39 ee                	cmp    esi,ebp
c0009f08:	89 f8                	mov    eax,edi
c0009f0a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0009f0e:	0f 83 78 ff ff ff    	jae    c0009e8c <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009f14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f1c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f20:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f24:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0009f28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f30:	e9 57 ff ff ff       	jmp    c0009e8c <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009f35:	83 ec 0c             	sub    esp,0xc
c0009f38:	68 c3 2c 02 c0       	push   0xc0022cc3
c0009f3d:	e8 49 8b 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0009f42:	83 c4 10             	add    esp,0x10
c0009f45:	83 ec 08             	sub    esp,0x8
c0009f48:	bb 60 00 00 00       	mov    ebx,0x60
c0009f4d:	6a 00                	push   0x0
c0009f4f:	6a 06                	push   0x6
c0009f51:	e8 a1 fb ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009f56:	58                   	pop    eax
c0009f57:	5a                   	pop    edx
c0009f58:	6a 00                	push   0x0
c0009f5a:	6a 07                	push   0x7
c0009f5c:	e8 96 fb ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009f61:	83 05 78 64 02 c0 02 	add    DWORD PTR ds:0xc0026478,0x2
c0009f68:	83 c4 10             	add    esp,0x10
c0009f6b:	83 ec 08             	sub    esp,0x8
c0009f6e:	6a 00                	push   0x0
c0009f70:	53                   	push   ebx
c0009f71:	43                   	inc    ebx
c0009f72:	e8 80 fb ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009f77:	83 c4 10             	add    esp,0x10
c0009f7a:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0009f80:	75 e9                	jne    c0009f6b <Phys::physicalMemorySetup(unsigned int)+0x224>
c0009f82:	a1 78 64 02 c0       	mov    eax,ds:0xc0026478
c0009f87:	bb 40 01 00 00       	mov    ebx,0x140
c0009f8c:	83 c0 20             	add    eax,0x20
c0009f8f:	a3 78 64 02 c0       	mov    ds:0xc0026478,eax
c0009f94:	eb 22                	jmp    c0009fb8 <Phys::physicalMemorySetup(unsigned int)+0x271>
c0009f96:	83 ec 08             	sub    esp,0x8
c0009f99:	6a 00                	push   0x0
c0009f9b:	53                   	push   ebx
c0009f9c:	43                   	inc    ebx
c0009f9d:	e8 55 fb ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009fa2:	a1 78 64 02 c0       	mov    eax,ds:0xc0026478
c0009fa7:	83 c4 10             	add    esp,0x10
c0009faa:	40                   	inc    eax
c0009fab:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0009fb1:	a3 78 64 02 c0       	mov    ds:0xc0026478,eax
c0009fb6:	74 07                	je     c0009fbf <Phys::physicalMemorySetup(unsigned int)+0x278>
c0009fb8:	3d ff 03 00 00       	cmp    eax,0x3ff
c0009fbd:	7e d7                	jle    c0009f96 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0009fbf:	bb d0 01 00 00       	mov    ebx,0x1d0
c0009fc4:	3d ff 07 00 00       	cmp    eax,0x7ff
c0009fc9:	7f 22                	jg     c0009fed <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c0009fcb:	83 ec 08             	sub    esp,0x8
c0009fce:	6a 00                	push   0x0
c0009fd0:	53                   	push   ebx
c0009fd1:	43                   	inc    ebx
c0009fd2:	e8 20 fb ff ff       	call   c0009af7 <Phys::setPageState(unsigned long, bool)>
c0009fd7:	a1 78 64 02 c0       	mov    eax,ds:0xc0026478
c0009fdc:	83 c4 10             	add    esp,0x10
c0009fdf:	40                   	inc    eax
c0009fe0:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0009fe6:	a3 78 64 02 c0       	mov    ds:0xc0026478,eax
c0009feb:	75 d7                	jne    c0009fc4 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0009fed:	83 c4 3c             	add    esp,0x3c
c0009ff0:	5b                   	pop    ebx
c0009ff1:	5e                   	pop    esi
c0009ff2:	5f                   	pop    edi
c0009ff3:	5d                   	pop    ebp
c0009ff4:	c3                   	ret    
c0009ff5:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0009ffd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a005:	e9 51 fe ff ff       	jmp    c0009e5b <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a00a <Pipe::isAtty()>:
c000a00a:	31 c0                	xor    eax,eax
c000a00c:	c3                   	ret    
c000a00d:	90                   	nop

c000a00e <Pipe::~Pipe()>:
c000a00e:	83 ec 0c             	sub    esp,0xc
c000a011:	ba fc 2d 02 c0       	mov    edx,0xc0022dfc
c000a016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a01a:	89 10                	mov    DWORD PTR [eax],edx
c000a01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a020:	83 ec 0c             	sub    esp,0xc
c000a023:	50                   	push   eax
c000a024:	e8 3b 11 00 00       	call   c000b164 <UnixFile::~UnixFile()>
c000a029:	83 c4 10             	add    esp,0x10
c000a02c:	90                   	nop
c000a02d:	83 c4 0c             	add    esp,0xc
c000a030:	c3                   	ret    
c000a031:	90                   	nop

c000a032 <Pipe::~Pipe()>:
c000a032:	83 ec 0c             	sub    esp,0xc
c000a035:	83 ec 0c             	sub    esp,0xc
c000a038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a03c:	e8 cd ff ff ff       	call   c000a00e <Pipe::~Pipe()>
c000a041:	83 c4 10             	add    esp,0x10
c000a044:	83 ec 08             	sub    esp,0x8
c000a047:	6a 20                	push   0x20
c000a049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04d:	e8 ee 25 00 00       	call   c000c640 <operator delete(void*, unsigned long)>
c000a052:	83 c4 10             	add    esp,0x10
c000a055:	83 c4 0c             	add    esp,0xc
c000a058:	c3                   	ret    
c000a059:	90                   	nop

c000a05a <Pipe::write(unsigned long long, void*, int*)>:
c000a05a:	55                   	push   ebp
c000a05b:	57                   	push   edi
c000a05c:	56                   	push   esi
c000a05d:	53                   	push   ebx
c000a05e:	83 ec 1c             	sub    esp,0x1c
c000a061:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a065:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a069:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a06c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a070:	89 04 24             	mov    DWORD PTR [esp],eax
c000a073:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a077:	89 d8                	mov    eax,ebx
c000a079:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a07c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a080:	89 d6                	mov    esi,edx
c000a082:	89 d7                	mov    edi,edx
c000a084:	c1 ff 1f             	sar    edi,0x1f
c000a087:	03 34 24             	add    esi,DWORD PTR [esp]
c000a08a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a08e:	c1 f8 1f             	sar    eax,0x1f
c000a091:	39 f3                	cmp    ebx,esi
c000a093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a097:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a09b:	19 f8                	sbb    eax,edi
c000a09d:	b8 01 00 00 00       	mov    eax,0x1
c000a0a2:	72 6e                	jb     c000a112 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a0a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a0a7:	01 d0                	add    eax,edx
c000a0a9:	99                   	cdq    
c000a0aa:	f7 fb                	idiv   ebx
c000a0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0b0:	29 d3                	sub    ebx,edx
c000a0b2:	89 d7                	mov    edi,edx
c000a0b4:	89 de                	mov    esi,ebx
c000a0b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a0b9:	c1 fb 1f             	sar    ebx,0x1f
c000a0bc:	39 f2                	cmp    edx,esi
c000a0be:	19 d8                	sbb    eax,ebx
c000a0c0:	b8 00 00 00 00       	mov    eax,0x0
c000a0c5:	72 04                	jb     c000a0cb <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a0c7:	89 d0                	mov    eax,edx
c000a0c9:	29 f0                	sub    eax,esi
c000a0cb:	89 d3                	mov    ebx,edx
c000a0cd:	29 c3                	sub    ebx,eax
c000a0cf:	74 0b                	je     c000a0dc <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a0d1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a0d4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a0d8:	89 d9                	mov    ecx,ebx
c000a0da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0dc:	85 c0                	test   eax,eax
c000a0de:	74 0d                	je     c000a0ed <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a0e0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a0e4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a0e7:	89 de                	mov    esi,ebx
c000a0e9:	89 c1                	mov    ecx,eax
c000a0eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0ed:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a0f0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a0f5:	75 10                	jne    c000a107 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a0f7:	83 ec 0c             	sub    esp,0xc
c000a0fa:	68 b9 2d 02 c0       	push   0xc0022db9
c000a0ff:	e8 87 89 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000a104:	83 c4 10             	add    esp,0x10
c000a107:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a10b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a10e:	89 08                	mov    DWORD PTR [eax],ecx
c000a110:	31 c0                	xor    eax,eax
c000a112:	83 c4 1c             	add    esp,0x1c
c000a115:	5b                   	pop    ebx
c000a116:	5e                   	pop    esi
c000a117:	5f                   	pop    edi
c000a118:	5d                   	pop    ebp
c000a119:	c3                   	ret    

c000a11a <Pipe::read(unsigned long long, void*, int*)>:
c000a11a:	55                   	push   ebp
c000a11b:	57                   	push   edi
c000a11c:	56                   	push   esi
c000a11d:	53                   	push   ebx
c000a11e:	83 ec 1c             	sub    esp,0x1c
c000a121:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a125:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a129:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a12d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a130:	89 c8                	mov    eax,ecx
c000a132:	99                   	cdq    
c000a133:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a137:	74 24                	je     c000a15d <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a139:	39 f9                	cmp    ecx,edi
c000a13b:	89 d1                	mov    ecx,edx
c000a13d:	19 f1                	sbb    ecx,esi
c000a13f:	73 1c                	jae    c000a15d <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a141:	fa                   	cli    
c000a142:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c000a148:	e8 a3 bf 00 00       	call   c00160f0 <schedule()>
c000a14d:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000a152:	48                   	dec    eax
c000a153:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000a158:	75 d3                	jne    c000a12d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a15a:	fb                   	sti    
c000a15b:	eb d0                	jmp    c000a12d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a15d:	39 f8                	cmp    eax,edi
c000a15f:	89 d1                	mov    ecx,edx
c000a161:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a164:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a168:	19 f1                	sbb    ecx,esi
c000a16a:	73 07                	jae    c000a173 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a16c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a16f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a173:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a176:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a179:	29 f7                	sub    edi,esi
c000a17b:	89 f8                	mov    eax,edi
c000a17d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a181:	99                   	cdq    
c000a182:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a189:	19 d0                	sbb    eax,edx
c000a18b:	73 07                	jae    c000a194 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a18d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a194:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a197:	89 ea                	mov    edx,ebp
c000a199:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a19d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a1a2:	74 0d                	je     c000a1b1 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a1a4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a1a7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a1ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a1af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1b1:	85 d2                	test   edx,edx
c000a1b3:	74 11                	je     c000a1c6 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a1b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1b9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a1bc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a1c0:	89 d1                	mov    ecx,edx
c000a1c2:	89 c7                	mov    edi,eax
c000a1c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a1c9:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a1cc:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a1cf:	99                   	cdq    
c000a1d0:	89 f7                	mov    edi,esi
c000a1d2:	03 04 24             	add    eax,DWORD PTR [esp]
c000a1d5:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a1d9:	c1 ff 1f             	sar    edi,0x1f
c000a1dc:	57                   	push   edi
c000a1dd:	56                   	push   esi
c000a1de:	52                   	push   edx
c000a1df:	50                   	push   eax
c000a1e0:	e8 cb 74 01 00       	call   c00216b0 <__umoddi3>
c000a1e5:	83 c4 10             	add    esp,0x10
c000a1e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1eb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a1f0:	75 10                	jne    c000a202 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a1f2:	83 ec 0c             	sub    esp,0xc
c000a1f5:	68 d6 2d 02 c0       	push   0xc0022dd6
c000a1fa:	e8 8c 88 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000a1ff:	83 c4 10             	add    esp,0x10
c000a202:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a206:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a209:	89 10                	mov    DWORD PTR [eax],edx
c000a20b:	83 c4 1c             	add    esp,0x1c
c000a20e:	31 c0                	xor    eax,eax
c000a210:	5b                   	pop    ebx
c000a211:	5e                   	pop    esi
c000a212:	5f                   	pop    edi
c000a213:	5d                   	pop    ebp
c000a214:	c3                   	ret    
c000a215:	90                   	nop

c000a216 <Pipe::Pipe(int)>:
c000a216:	83 ec 0c             	sub    esp,0xc
c000a219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a21d:	83 ec 08             	sub    esp,0x8
c000a220:	6a 00                	push   0x0
c000a222:	50                   	push   eax
c000a223:	e8 5a 0d 00 00       	call   c000af82 <UnixFile::UnixFile(int)>
c000a228:	83 c4 10             	add    esp,0x10
c000a22b:	ba fc 2d 02 c0       	mov    edx,0xc0022dfc
c000a230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a234:	89 10                	mov    DWORD PTR [eax],edx
c000a236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a23a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a23e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a245:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a250:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a25b:	83 ec 0c             	sub    esp,0xc
c000a25e:	50                   	push   eax
c000a25f:	e8 33 f5 ff ff       	call   c0009797 <malloc>
c000a264:	83 c4 10             	add    esp,0x10
c000a267:	89 c2                	mov    edx,eax
c000a269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a274:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a278:	90                   	nop
c000a279:	83 c4 0c             	add    esp,0xc
c000a27c:	c3                   	ret    
c000a27d:	90                   	nop

c000a27e <VgaText::isAtty()>:
c000a27e:	b0 01                	mov    al,0x1
c000a280:	c3                   	ret    
c000a281:	90                   	nop

c000a282 <VgaText::~VgaText()>:
c000a282:	83 ec 0c             	sub    esp,0xc
c000a285:	ba 84 2e 02 c0       	mov    edx,0xc0022e84
c000a28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28e:	89 10                	mov    DWORD PTR [eax],edx
c000a290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a294:	83 ec 0c             	sub    esp,0xc
c000a297:	50                   	push   eax
c000a298:	e8 c7 0e 00 00       	call   c000b164 <UnixFile::~UnixFile()>
c000a29d:	83 c4 10             	add    esp,0x10
c000a2a0:	90                   	nop
c000a2a1:	83 c4 0c             	add    esp,0xc
c000a2a4:	c3                   	ret    
c000a2a5:	90                   	nop

c000a2a6 <VgaText::~VgaText()>:
c000a2a6:	83 ec 0c             	sub    esp,0xc
c000a2a9:	83 ec 0c             	sub    esp,0xc
c000a2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b0:	e8 cd ff ff ff       	call   c000a282 <VgaText::~VgaText()>
c000a2b5:	83 c4 10             	add    esp,0x10
c000a2b8:	83 ec 08             	sub    esp,0x8
c000a2bb:	68 b4 01 00 00       	push   0x1b4
c000a2c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c4:	e8 77 23 00 00       	call   c000c640 <operator delete(void*, unsigned long)>
c000a2c9:	83 c4 10             	add    esp,0x10
c000a2cc:	83 c4 0c             	add    esp,0xc
c000a2cf:	c3                   	ret    

c000a2d0 <VgaText::read(unsigned long long, void*, int*)>:
c000a2d0:	83 ec 10             	sub    esp,0x10
c000a2d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2df:	e8 19 47 00 00       	call   c000e9fd <readKeyboard(VgaText*, char*, unsigned long)>
c000a2e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a2e8:	89 02                	mov    DWORD PTR [edx],eax
c000a2ea:	31 c0                	xor    eax,eax
c000a2ec:	83 c4 1c             	add    esp,0x1c
c000a2ef:	c3                   	ret    

c000a2f0 <setTerminalScrollLock(bool)>:
c000a2f0:	c3                   	ret    

c000a2f1 <addToTerminalCycle(VgaText*)>:
c000a2f1:	8b 15 90 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026490
c000a2f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2fb:	85 d2                	test   edx,edx
c000a2fd:	75 09                	jne    c000a308 <addToTerminalCycle(VgaText*)+0x17>
c000a2ff:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a302:	a3 90 64 02 c0       	mov    ds:0xc0026490,eax
c000a307:	c3                   	ret    
c000a308:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a30b:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a30e:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a311:	c3                   	ret    

c000a312 <scrollTerminalScrollLock(int)>:
c000a312:	c3                   	ret    
c000a313:	90                   	nop

c000a314 <VgaText::updateTitle()>:
c000a314:	c3                   	ret    
c000a315:	90                   	nop

c000a316 <VgaText::load()>:
c000a316:	c3                   	ret    
c000a317:	90                   	nop

c000a318 <VgaText::updateCursor()>:
c000a318:	83 ec 14             	sub    esp,0x14
c000a31b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a31f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a322:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a325:	e8 5a 00 01 00       	call   c001a384 <Hal::consoleCursorUpdate(int, int)>
c000a32a:	83 c4 1c             	add    esp,0x1c
c000a32d:	c3                   	ret    

c000a32e <VgaText::doANSI_SGR(int)>:
c000a32e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a336:	85 d2                	test   edx,edx
c000a338:	75 0b                	jne    c000a345 <VgaText::doANSI_SGR(int)+0x17>
c000a33a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a33d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a340:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a343:	eb 59                	jmp    c000a39e <VgaText::doANSI_SGR(int)+0x70>
c000a345:	83 fa 07             	cmp    edx,0x7
c000a348:	75 0b                	jne    c000a355 <VgaText::doANSI_SGR(int)+0x27>
c000a34a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a34d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a350:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a353:	eb 49                	jmp    c000a39e <VgaText::doANSI_SGR(int)+0x70>
c000a355:	83 fa 1b             	cmp    edx,0x1b
c000a358:	74 e0                	je     c000a33a <VgaText::doANSI_SGR(int)+0xc>
c000a35a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a35d:	83 f9 07             	cmp    ecx,0x7
c000a360:	77 09                	ja     c000a36b <VgaText::doANSI_SGR(int)+0x3d>
c000a362:	8b 14 8d 00 5b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda500]
c000a369:	eb 20                	jmp    c000a38b <VgaText::doANSI_SGR(int)+0x5d>
c000a36b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a36e:	83 f9 07             	cmp    ecx,0x7
c000a371:	77 09                	ja     c000a37c <VgaText::doANSI_SGR(int)+0x4e>
c000a373:	8b 14 8d 00 5b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda500]
c000a37a:	eb 22                	jmp    c000a39e <VgaText::doANSI_SGR(int)+0x70>
c000a37c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a37f:	83 f9 07             	cmp    ecx,0x7
c000a382:	77 0b                	ja     c000a38f <VgaText::doANSI_SGR(int)+0x61>
c000a384:	8b 14 95 b8 59 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda648]
c000a38b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a38e:	c3                   	ret    
c000a38f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a392:	83 f9 07             	cmp    ecx,0x7
c000a395:	77 0a                	ja     c000a3a1 <VgaText::doANSI_SGR(int)+0x73>
c000a397:	8b 14 95 90 59 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda670]
c000a39e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a3a1:	c3                   	ret    

c000a3a2 <VgaText::setDefaultBgColour(VgaColour)>:
c000a3a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3aa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a3ad:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a3b0:	c3                   	ret    
c000a3b1:	90                   	nop

c000a3b2 <VgaText::setDefaultFgColour(VgaColour)>:
c000a3b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3ba:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a3bd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a3c0:	c3                   	ret    
c000a3c1:	90                   	nop

c000a3c2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a3c2:	53                   	push   ebx
c000a3c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a3cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a3cf:	51                   	push   ecx
c000a3d0:	e8 cd ff ff ff       	call   c000a3a2 <VgaText::setDefaultBgColour(VgaColour)>
c000a3d5:	58                   	pop    eax
c000a3d6:	5a                   	pop    edx
c000a3d7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a3db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a3df:	5b                   	pop    ebx
c000a3e0:	eb d0                	jmp    c000a3b2 <VgaText::setDefaultFgColour(VgaColour)>

c000a3e2 <VgaText::setTitleTextColour(VgaColour)>:
c000a3e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3ea:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a3ed:	c3                   	ret    

c000a3ee <VgaText::setTitleColour(VgaColour)>:
c000a3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a3f9:	c3                   	ret    

c000a3fa <VgaText::setTitle(char*)>:
c000a3fa:	81 44 24 04 82 00 00 00 	add    DWORD PTR [esp+0x4],0x82
c000a402:	e9 5d 61 ff ff       	jmp    c0000564 <strcpy>
c000a407:	90                   	nop

c000a408 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a408:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a40c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a411:	83 e0 0f             	and    eax,0xf
c000a414:	c1 e2 04             	shl    edx,0x4
c000a417:	09 d0                	or     eax,edx
c000a419:	c3                   	ret    

c000a41a <VgaText::scrollScreen()>:
c000a41a:	55                   	push   ebp
c000a41b:	b9 01 00 00 00       	mov    ecx,0x1
c000a420:	57                   	push   edi
c000a421:	56                   	push   esi
c000a422:	53                   	push   ebx
c000a423:	83 ec 0c             	sub    esp,0xc
c000a426:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a42a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a430:	31 ff                	xor    edi,edi
c000a432:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a435:	83 f9 17             	cmp    ecx,0x17
c000a438:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a43b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a442:	75 27                	jne    c000a46b <VgaText::scrollScreen()+0x51>
c000a444:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a447:	01 f5                	add    ebp,esi
c000a449:	f7 c7 01 00 00 00    	test   edi,0x1
c000a44f:	74 16                	je     c000a467 <VgaText::scrollScreen()+0x4d>
c000a451:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a455:	50                   	push   eax
c000a456:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a45a:	50                   	push   eax
c000a45b:	e8 a8 ff ff ff       	call   c000a408 <VgaText::combineColours(unsigned char, unsigned char)>
c000a460:	5a                   	pop    edx
c000a461:	5a                   	pop    edx
c000a462:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a465:	eb 04                	jmp    c000a46b <VgaText::scrollScreen()+0x51>
c000a467:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a46b:	47                   	inc    edi
c000a46c:	46                   	inc    esi
c000a46d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a473:	75 bd                	jne    c000a432 <VgaText::scrollScreen()+0x18>
c000a475:	41                   	inc    ecx
c000a476:	83 f9 18             	cmp    ecx,0x18
c000a479:	75 af                	jne    c000a42a <VgaText::scrollScreen()+0x10>
c000a47b:	39 1d 94 64 02 c0    	cmp    DWORD PTR ds:0xc0026494,ebx
c000a481:	75 1f                	jne    c000a4a2 <VgaText::scrollScreen()+0x88>
c000a483:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a487:	74 05                	je     c000a48e <VgaText::scrollScreen()+0x74>
c000a489:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a48c:	eb 14                	jmp    c000a4a2 <VgaText::scrollScreen()+0x88>
c000a48e:	50                   	push   eax
c000a48f:	50                   	push   eax
c000a490:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a494:	50                   	push   eax
c000a495:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a499:	50                   	push   eax
c000a49a:	e8 75 fd 00 00       	call   c001a214 <Hal::consoleScroll(int, int)>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a4a6:	83 c4 0c             	add    esp,0xc
c000a4a9:	5b                   	pop    ebx
c000a4aa:	5e                   	pop    esi
c000a4ab:	5f                   	pop    edi
c000a4ac:	5d                   	pop    ebp
c000a4ad:	e9 66 fe ff ff       	jmp    c000a318 <VgaText::updateCursor()>

c000a4b2 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a4b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a4b7:	c1 e0 08             	shl    eax,0x8
c000a4ba:	89 c2                	mov    edx,eax
c000a4bc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a4c1:	09 d0                	or     eax,edx
c000a4c3:	c3                   	ret    

c000a4c4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a4c4:	55                   	push   ebp
c000a4c5:	57                   	push   edi
c000a4c6:	56                   	push   esi
c000a4c7:	53                   	push   ebx
c000a4c8:	83 ec 1c             	sub    esp,0x1c
c000a4cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a4cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4d3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a4d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4db:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a4df:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a4e3:	0f b6 c3             	movzx  eax,bl
c000a4e6:	50                   	push   eax
c000a4e7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000a4ec:	50                   	push   eax
c000a4ed:	e8 16 ff ff ff       	call   c000a408 <VgaText::combineColours(unsigned char, unsigned char)>
c000a4f2:	5a                   	pop    edx
c000a4f3:	0f b6 c0             	movzx  eax,al
c000a4f6:	59                   	pop    ecx
c000a4f7:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000a4fc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a500:	50                   	push   eax
c000a501:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a505:	e8 a8 ff ff ff       	call   c000a4b2 <VgaText::combineCharAndColour(char, unsigned char)>
c000a50a:	5a                   	pop    edx
c000a50b:	66 6b d7 50          	imul   dx,di,0x50
c000a50f:	59                   	pop    ecx
c000a510:	01 f2                	add    edx,esi
c000a512:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a515:	0f b7 d2             	movzx  edx,dx
c000a518:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000a51c:	39 2d 94 64 02 c0    	cmp    DWORD PTR ds:0xc0026494,ebp
c000a522:	75 28                	jne    c000a54c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000a524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a528:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000a52c:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000a530:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000a534:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a53c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a540:	83 c4 1c             	add    esp,0x1c
c000a543:	5b                   	pop    ebx
c000a544:	5e                   	pop    esi
c000a545:	5f                   	pop    edi
c000a546:	5d                   	pop    ebp
c000a547:	e9 d0 fd 00 00       	jmp    c001a31c <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000a54c:	83 c4 1c             	add    esp,0x1c
c000a54f:	5b                   	pop    ebx
c000a550:	5e                   	pop    esi
c000a551:	5f                   	pop    edi
c000a552:	5d                   	pop    ebp
c000a553:	c3                   	ret    

c000a554 <VgaText::getCursorX()>:
c000a554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a558:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a55b:	c3                   	ret    

c000a55c <VgaText::getCursorY()>:
c000a55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a560:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a563:	c3                   	ret    

c000a564 <VgaText::setCursor(int, int)>:
c000a564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a568:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a56c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a56f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a573:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a576:	e9 9d fd ff ff       	jmp    c000a318 <VgaText::updateCursor()>

c000a57b <setActiveTerminal(VgaText*)>:
c000a57b:	53                   	push   ebx
c000a57c:	83 ec 08             	sub    esp,0x8
c000a57f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a583:	85 db                	test   ebx,ebx
c000a585:	75 11                	jne    c000a598 <setActiveTerminal(VgaText*)+0x1d>
c000a587:	c7 44 24 10 10 2e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022e10
c000a58f:	83 c4 08             	add    esp,0x8
c000a592:	5b                   	pop    ebx
c000a593:	e9 f3 84 00 00       	jmp    c0012a8b <Krnl::panic(char const*)>
c000a598:	a1 94 64 02 c0       	mov    eax,ds:0xc0026494
c000a59d:	85 c0                	test   eax,eax
c000a59f:	74 0c                	je     c000a5ad <setActiveTerminal(VgaText*)+0x32>
c000a5a1:	83 ec 0c             	sub    esp,0xc
c000a5a4:	50                   	push   eax
c000a5a5:	e8 6e fd ff ff       	call   c000a318 <VgaText::updateCursor()>
c000a5aa:	83 c4 10             	add    esp,0x10
c000a5ad:	89 1d 94 64 02 c0    	mov    DWORD PTR ds:0xc0026494,ebx
c000a5b3:	51                   	push   ecx
c000a5b4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a5b7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a5ba:	53                   	push   ebx
c000a5bb:	e8 a4 ff ff ff       	call   c000a564 <VgaText::setCursor(int, int)>
c000a5c0:	83 c4 10             	add    esp,0x10
c000a5c3:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a5c7:	75 07                	jne    c000a5d0 <setActiveTerminal(VgaText*)+0x55>
c000a5c9:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a5d0:	83 c4 08             	add    esp,0x8
c000a5d3:	5b                   	pop    ebx
c000a5d4:	c3                   	ret    

c000a5d5 <doTerminalCycle()>:
c000a5d5:	83 ec 18             	sub    esp,0x18
c000a5d8:	a1 90 64 02 c0       	mov    eax,ds:0xc0026490
c000a5dd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a5e0:	50                   	push   eax
c000a5e1:	a3 90 64 02 c0       	mov    ds:0xc0026490,eax
c000a5e6:	e8 90 ff ff ff       	call   c000a57b <setActiveTerminal(VgaText*)>
c000a5eb:	83 c4 1c             	add    esp,0x1c
c000a5ee:	c3                   	ret    
c000a5ef:	90                   	nop

c000a5f0 <VgaText::clearScreen()>:
c000a5f0:	57                   	push   edi
c000a5f1:	56                   	push   esi
c000a5f2:	31 f6                	xor    esi,esi
c000a5f4:	53                   	push   ebx
c000a5f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a5f9:	52                   	push   edx
c000a5fa:	6a 00                	push   0x0
c000a5fc:	6a 00                	push   0x0
c000a5fe:	53                   	push   ebx
c000a5ff:	e8 60 ff ff ff       	call   c000a564 <VgaText::setCursor(int, int)>
c000a604:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a60b:	83 c4 10             	add    esp,0x10
c000a60e:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000a611:	7e 20                	jle    c000a633 <VgaText::clearScreen()+0x43>
c000a613:	31 ff                	xor    edi,edi
c000a615:	50                   	push   eax
c000a616:	50                   	push   eax
c000a617:	56                   	push   esi
c000a618:	57                   	push   edi
c000a619:	47                   	inc    edi
c000a61a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a61d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a620:	6a 20                	push   0x20
c000a622:	53                   	push   ebx
c000a623:	e8 9c fe ff ff       	call   c000a4c4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a628:	83 c4 20             	add    esp,0x20
c000a62b:	83 ff 50             	cmp    edi,0x50
c000a62e:	75 e5                	jne    c000a615 <VgaText::clearScreen()+0x25>
c000a630:	46                   	inc    esi
c000a631:	eb db                	jmp    c000a60e <VgaText::clearScreen()+0x1e>
c000a633:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000a63a:	5b                   	pop    ebx
c000a63b:	5e                   	pop    esi
c000a63c:	5f                   	pop    edi
c000a63d:	c3                   	ret    

c000a63e <VgaText::setCursorX(int)>:
c000a63e:	83 ec 10             	sub    esp,0x10
c000a641:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a645:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a64c:	50                   	push   eax
c000a64d:	e8 12 ff ff ff       	call   c000a564 <VgaText::setCursor(int, int)>
c000a652:	83 c4 1c             	add    esp,0x1c
c000a655:	c3                   	ret    

c000a656 <VgaText::setCursorY(int)>:
c000a656:	83 ec 10             	sub    esp,0x10
c000a659:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a65d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a661:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a664:	50                   	push   eax
c000a665:	e8 fa fe ff ff       	call   c000a564 <VgaText::setCursor(int, int)>
c000a66a:	83 c4 1c             	add    esp,0x1c
c000a66d:	c3                   	ret    

c000a66e <VgaText::incrementCursor(bool)>:
c000a66e:	56                   	push   esi
c000a66f:	53                   	push   ebx
c000a670:	51                   	push   ecx
c000a671:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a675:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a679:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a67c:	40                   	inc    eax
c000a67d:	83 f8 50             	cmp    eax,0x50
c000a680:	74 05                	je     c000a687 <VgaText::incrementCursor(bool)+0x19>
c000a682:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a685:	eb 24                	jmp    c000a6ab <VgaText::incrementCursor(bool)+0x3d>
c000a687:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a68a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a691:	8d 50 01             	lea    edx,[eax+0x1]
c000a694:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a697:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a69a:	75 0f                	jne    c000a6ab <VgaText::incrementCursor(bool)+0x3d>
c000a69c:	83 ec 0c             	sub    esp,0xc
c000a69f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a6a2:	53                   	push   ebx
c000a6a3:	e8 72 fd ff ff       	call   c000a41a <VgaText::scrollScreen()>
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	89 f0                	mov    eax,esi
c000a6ad:	84 c0                	test   al,al
c000a6af:	74 0c                	je     c000a6bd <VgaText::incrementCursor(bool)+0x4f>
c000a6b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6b5:	5a                   	pop    edx
c000a6b6:	5b                   	pop    ebx
c000a6b7:	5e                   	pop    esi
c000a6b8:	e9 5b fc ff ff       	jmp    c000a318 <VgaText::updateCursor()>
c000a6bd:	58                   	pop    eax
c000a6be:	5b                   	pop    ebx
c000a6bf:	5e                   	pop    esi
c000a6c0:	c3                   	ret    
c000a6c1:	90                   	nop

c000a6c2 <VgaText::decrementCursor(bool)>:
c000a6c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a6ca:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a6cd:	85 c0                	test   eax,eax
c000a6cf:	74 04                	je     c000a6d5 <VgaText::decrementCursor(bool)+0x13>
c000a6d1:	48                   	dec    eax
c000a6d2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a6d5:	84 c9                	test   cl,cl
c000a6d7:	74 09                	je     c000a6e2 <VgaText::decrementCursor(bool)+0x20>
c000a6d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6dd:	e9 36 fc ff ff       	jmp    c000a318 <VgaText::updateCursor()>
c000a6e2:	c3                   	ret    
c000a6e3:	90                   	nop

c000a6e4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a6e4:	53                   	push   ebx
c000a6e5:	83 ec 08             	sub    esp,0x8
c000a6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a6f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a6f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a6f8:	3c 07                	cmp    al,0x7
c000a6fa:	75 21                	jne    c000a71d <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000a6fc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a704:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000a70c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000a714:	83 c4 08             	add    esp,0x8
c000a717:	5b                   	pop    ebx
c000a718:	e9 9e 2e 00 00       	jmp    c000d5bb <Krnl::beep(int, int, bool)>
c000a71d:	3c 0d                	cmp    al,0xd
c000a71f:	75 09                	jne    c000a72a <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000a721:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a728:	eb 2c                	jmp    c000a756 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000a72a:	3c 0a                	cmp    al,0xa
c000a72c:	75 31                	jne    c000a75f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a72e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a731:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a738:	8d 50 01             	lea    edx,[eax+0x1]
c000a73b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a73e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a741:	75 0f                	jne    c000a752 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000a743:	83 ec 0c             	sub    esp,0xc
c000a746:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a749:	53                   	push   ebx
c000a74a:	e8 cb fc ff ff       	call   c000a41a <VgaText::scrollScreen()>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a756:	83 c4 08             	add    esp,0x8
c000a759:	5b                   	pop    ebx
c000a75a:	e9 b9 fb ff ff       	jmp    c000a318 <VgaText::updateCursor()>
c000a75f:	3c 08                	cmp    al,0x8
c000a761:	75 25                	jne    c000a788 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000a763:	50                   	push   eax
c000a764:	50                   	push   eax
c000a765:	6a 01                	push   0x1
c000a767:	53                   	push   ebx
c000a768:	e8 55 ff ff ff       	call   c000a6c2 <VgaText::decrementCursor(bool)>
c000a76d:	5a                   	pop    edx
c000a76e:	59                   	pop    ecx
c000a76f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a772:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a775:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a778:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a77b:	6a 20                	push   0x20
c000a77d:	53                   	push   ebx
c000a77e:	e8 41 fd ff ff       	call   c000a4c4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a783:	83 c4 28             	add    esp,0x28
c000a786:	5b                   	pop    ebx
c000a787:	c3                   	ret    
c000a788:	83 ec 08             	sub    esp,0x8
c000a78b:	0f be c0             	movsx  eax,al
c000a78e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a791:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a794:	51                   	push   ecx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	53                   	push   ebx
c000a798:	e8 27 fd ff ff       	call   c000a4c4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a79d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a7a1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a7a9:	83 c4 28             	add    esp,0x28
c000a7ac:	5b                   	pop    ebx
c000a7ad:	e9 bc fe ff ff       	jmp    c000a66e <VgaText::incrementCursor(bool)>

c000a7b2 <VgaText::putchar(char)>:
c000a7b2:	56                   	push   esi
c000a7b3:	53                   	push   ebx
c000a7b4:	83 ec 14             	sub    esp,0x14
c000a7b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a7bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a7bf:	3c 5b                	cmp    al,0x5b
c000a7c1:	75 18                	jne    c000a7db <VgaText::putchar(char)+0x29>
c000a7c3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000a7c7:	74 1f                	je     c000a7e8 <VgaText::putchar(char)+0x36>
c000a7c9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000a7cf:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000a7d6:	e9 bd 00 00 00       	jmp    c000a898 <VgaText::putchar(char)+0xe6>
c000a7db:	3c 1b                	cmp    al,0x1b
c000a7dd:	75 09                	jne    c000a7e8 <VgaText::putchar(char)+0x36>
c000a7df:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000a7e3:	e9 b0 00 00 00       	jmp    c000a898 <VgaText::putchar(char)+0xe6>
c000a7e8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000a7eb:	84 c9                	test   cl,cl
c000a7ed:	0f 84 92 00 00 00    	je     c000a885 <VgaText::putchar(char)+0xd3>
c000a7f3:	8d 50 c0             	lea    edx,[eax-0x40]
c000a7f6:	80 fa 3e             	cmp    dl,0x3e
c000a7f9:	77 76                	ja     c000a871 <VgaText::putchar(char)+0xbf>
c000a7fb:	3c 6d                	cmp    al,0x6d
c000a7fd:	75 47                	jne    c000a846 <VgaText::putchar(char)+0x94>
c000a7ff:	31 f6                	xor    esi,esi
c000a801:	31 d2                	xor    edx,edx
c000a803:	31 c0                	xor    eax,eax
c000a805:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000a808:	7e 2d                	jle    c000a837 <VgaText::putchar(char)+0x85>
c000a80a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000a80f:	80 fa 3b             	cmp    dl,0x3b
c000a812:	75 17                	jne    c000a82b <VgaText::putchar(char)+0x79>
c000a814:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000a818:	50                   	push   eax
c000a819:	53                   	push   ebx
c000a81a:	e8 0f fb ff ff       	call   c000a32e <VgaText::doANSI_SGR(int)>
c000a81f:	59                   	pop    ecx
c000a820:	31 d2                	xor    edx,edx
c000a822:	58                   	pop    eax
c000a823:	31 c0                	xor    eax,eax
c000a825:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000a829:	eb 09                	jmp    c000a834 <VgaText::putchar(char)+0x82>
c000a82b:	6b c0 0a             	imul   eax,eax,0xa
c000a82e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000a832:	88 ca                	mov    dl,cl
c000a834:	46                   	inc    esi
c000a835:	eb ce                	jmp    c000a805 <VgaText::putchar(char)+0x53>
c000a837:	84 d2                	test   dl,dl
c000a839:	74 2e                	je     c000a869 <VgaText::putchar(char)+0xb7>
c000a83b:	50                   	push   eax
c000a83c:	53                   	push   ebx
c000a83d:	e8 ec fa ff ff       	call   c000a32e <VgaText::doANSI_SGR(int)>
c000a842:	58                   	pop    eax
c000a843:	5a                   	pop    edx
c000a844:	eb 23                	jmp    c000a869 <VgaText::putchar(char)+0xb7>
c000a846:	3c 4a                	cmp    al,0x4a
c000a848:	75 1f                	jne    c000a869 <VgaText::putchar(char)+0xb7>
c000a84a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000a84e:	75 19                	jne    c000a869 <VgaText::putchar(char)+0xb7>
c000a850:	83 ec 0c             	sub    esp,0xc
c000a853:	53                   	push   ebx
c000a854:	e8 97 fd ff ff       	call   c000a5f0 <VgaText::clearScreen()>
c000a859:	83 c4 0c             	add    esp,0xc
c000a85c:	6a 00                	push   0x0
c000a85e:	6a 00                	push   0x0
c000a860:	53                   	push   ebx
c000a861:	e8 fe fc ff ff       	call   c000a564 <VgaText::setCursor(int, int)>
c000a866:	83 c4 10             	add    esp,0x10
c000a869:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000a86f:	eb 27                	jmp    c000a898 <VgaText::putchar(char)+0xe6>
c000a871:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000a874:	83 fa 0e             	cmp    edx,0xe
c000a877:	7f 1f                	jg     c000a898 <VgaText::putchar(char)+0xe6>
c000a879:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a87c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000a87f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000a883:	eb 13                	jmp    c000a898 <VgaText::putchar(char)+0xe6>
c000a885:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a888:	0f be c0             	movsx  eax,al
c000a88b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a88e:	50                   	push   eax
c000a88f:	53                   	push   ebx
c000a890:	e8 4f fe ff ff       	call   c000a6e4 <VgaText::putchar(char, VgaColour, VgaColour)>
c000a895:	83 c4 10             	add    esp,0x10
c000a898:	83 c4 14             	add    esp,0x14
c000a89b:	5b                   	pop    ebx
c000a89c:	5e                   	pop    esi
c000a89d:	c3                   	ret    

c000a89e <VgaText::putx(unsigned int)>:
c000a89e:	57                   	push   edi
c000a89f:	b9 11 00 00 00       	mov    ecx,0x11
c000a8a4:	56                   	push   esi
c000a8a5:	be 1e 2e 02 c0       	mov    esi,0xc0022e1e
c000a8aa:	53                   	push   ebx
c000a8ab:	83 ec 20             	sub    esp,0x20
c000a8ae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a8b2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000a8b6:	fc                   	cld    
c000a8b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a8b9:	be 08 00 00 00       	mov    esi,0x8
c000a8be:	50                   	push   eax
c000a8bf:	50                   	push   eax
c000a8c0:	89 d8                	mov    eax,ebx
c000a8c2:	c1 e3 04             	shl    ebx,0x4
c000a8c5:	c1 e8 1c             	shr    eax,0x1c
c000a8c8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000a8cd:	50                   	push   eax
c000a8ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a8d2:	e8 db fe ff ff       	call   c000a7b2 <VgaText::putchar(char)>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	4e                   	dec    esi
c000a8db:	75 e1                	jne    c000a8be <VgaText::putx(unsigned int)+0x20>
c000a8dd:	83 c4 20             	add    esp,0x20
c000a8e0:	5b                   	pop    ebx
c000a8e1:	5e                   	pop    esi
c000a8e2:	5f                   	pop    edi
c000a8e3:	c3                   	ret    

c000a8e4 <VgaText::puts(char const*)>:
c000a8e4:	53                   	push   ebx
c000a8e5:	83 ec 08             	sub    esp,0x8
c000a8e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	84 c0                	test   al,al
c000a8f1:	74 12                	je     c000a905 <VgaText::puts(char const*)+0x21>
c000a8f3:	43                   	inc    ebx
c000a8f4:	51                   	push   ecx
c000a8f5:	51                   	push   ecx
c000a8f6:	50                   	push   eax
c000a8f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8fb:	e8 b2 fe ff ff       	call   c000a7b2 <VgaText::putchar(char)>
c000a900:	83 c4 10             	add    esp,0x10
c000a903:	eb e7                	jmp    c000a8ec <VgaText::puts(char const*)+0x8>
c000a905:	83 c4 08             	add    esp,0x8
c000a908:	5b                   	pop    ebx
c000a909:	c3                   	ret    

c000a90a <VgaText::write(unsigned long long, void*, int*)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a915:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a919:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a91d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000a924:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000a927:	39 eb                	cmp    ebx,ebp
c000a929:	74 13                	je     c000a93e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000a92b:	43                   	inc    ebx
c000a92c:	50                   	push   eax
c000a92d:	50                   	push   eax
c000a92e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000a932:	50                   	push   eax
c000a933:	56                   	push   esi
c000a934:	e8 79 fe ff ff       	call   c000a7b2 <VgaText::putchar(char)>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	eb e9                	jmp    c000a927 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000a93e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000a945:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a949:	89 38                	mov    DWORD PTR [eax],edi
c000a94b:	83 c4 0c             	add    esp,0xc
c000a94e:	31 c0                	xor    eax,eax
c000a950:	5b                   	pop    ebx
c000a951:	5e                   	pop    esi
c000a952:	5f                   	pop    edi
c000a953:	5d                   	pop    ebp
c000a954:	c3                   	ret    
c000a955:	90                   	nop

c000a956 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a956:	55                   	push   ebp
c000a957:	57                   	push   edi
c000a958:	56                   	push   esi
c000a959:	53                   	push   ebx
c000a95a:	83 ec 0c             	sub    esp,0xc
c000a95d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a961:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a966:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a96d:	50                   	push   eax
c000a96e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a973:	50                   	push   eax
c000a974:	e8 8f fa ff ff       	call   c000a408 <VgaText::combineColours(unsigned char, unsigned char)>
c000a979:	5a                   	pop    edx
c000a97a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a97f:	59                   	pop    ecx
c000a980:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a983:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a987:	0f b7 f6             	movzx  esi,si
c000a98a:	0f b6 e8             	movzx  ebp,al
c000a98d:	01 f6                	add    esi,esi
c000a98f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a992:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a995:	84 c0                	test   al,al
c000a997:	0f 84 ef 00 00 00    	je     c000aa8c <VgaText::puts(char const*, VgaColour, VgaColour)+0x136>
c000a99d:	3c 0d                	cmp    al,0xd
c000a99f:	75 0c                	jne    c000a9ad <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c000a9a1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9a8:	e9 d9 00 00 00       	jmp    c000aa86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a9ad:	3c 0a                	cmp    al,0xa
c000a9af:	75 45                	jne    c000a9f6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c000a9b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9bb:	8d 48 01             	lea    ecx,[eax+0x1]
c000a9be:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000a9c1:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000a9c4:	75 0f                	jne    c000a9d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7f>
c000a9c6:	83 ec 0c             	sub    esp,0xc
c000a9c9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9cc:	53                   	push   ebx
c000a9cd:	e8 48 fa ff ff       	call   c000a41a <VgaText::scrollScreen()>
c000a9d2:	83 c4 10             	add    esp,0x10
c000a9d5:	83 ec 0c             	sub    esp,0xc
c000a9d8:	53                   	push   ebx
c000a9d9:	e8 3a f9 ff ff       	call   c000a318 <VgaText::updateCursor()>
c000a9de:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9e3:	83 c4 10             	add    esp,0x10
c000a9e6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a9e9:	0f b7 f6             	movzx  esi,si
c000a9ec:	01 f6                	add    esi,esi
c000a9ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9f1:	e9 90 00 00 00       	jmp    c000aa86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a9f6:	3c 08                	cmp    al,0x8
c000a9f8:	75 35                	jne    c000aa2f <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c000a9fa:	51                   	push   ecx
c000a9fb:	51                   	push   ecx
c000a9fc:	6a 01                	push   0x1
c000a9fe:	53                   	push   ebx
c000a9ff:	e8 be fc ff ff       	call   c000a6c2 <VgaText::decrementCursor(bool)>
c000aa04:	5e                   	pop    esi
c000aa05:	58                   	pop    eax
c000aa06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa09:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa0c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa0f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa12:	6a 20                	push   0x20
c000aa14:	53                   	push   ebx
c000aa15:	e8 aa fa ff ff       	call   c000a4c4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa1a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa1f:	83 c4 20             	add    esp,0x20
c000aa22:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa25:	0f b7 f6             	movzx  esi,si
c000aa28:	01 f6                	add    esi,esi
c000aa2a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa2d:	eb 57                	jmp    c000aa86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000aa2f:	52                   	push   edx
c000aa30:	52                   	push   edx
c000aa31:	55                   	push   ebp
c000aa32:	50                   	push   eax
c000aa33:	e8 7a fa ff ff       	call   c000a4b2 <VgaText::combineCharAndColour(char, unsigned char)>
c000aa38:	83 c4 10             	add    esp,0x10
c000aa3b:	66 89 06             	mov    WORD PTR [esi],ax
c000aa3e:	39 1d 94 64 02 c0    	cmp    DWORD PTR ds:0xc0026494,ebx
c000aa44:	75 1d                	jne    c000aa63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c000aa46:	83 ec 0c             	sub    esp,0xc
c000aa49:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa4c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa4f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000aa53:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000aa57:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa5a:	50                   	push   eax
c000aa5b:	e8 bc f8 00 00       	call   c001a31c <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000aa60:	83 c4 20             	add    esp,0x20
c000aa63:	83 c6 02             	add    esi,0x2
c000aa66:	50                   	push   eax
c000aa67:	50                   	push   eax
c000aa68:	6a 00                	push   0x0
c000aa6a:	53                   	push   ebx
c000aa6b:	e8 fe fb ff ff       	call   c000a66e <VgaText::incrementCursor(bool)>
c000aa70:	83 c4 10             	add    esp,0x10
c000aa73:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aa77:	75 0d                	jne    c000aa86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000aa79:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa7e:	0f b7 f6             	movzx  esi,si
c000aa81:	01 f6                	add    esi,esi
c000aa83:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa86:	47                   	inc    edi
c000aa87:	e9 06 ff ff ff       	jmp    c000a992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3c>
c000aa8c:	83 ec 0c             	sub    esp,0xc
c000aa8f:	53                   	push   ebx
c000aa90:	e8 83 f8 ff ff       	call   c000a318 <VgaText::updateCursor()>
c000aa95:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aa9c:	83 c4 1c             	add    esp,0x1c
c000aa9f:	5b                   	pop    ebx
c000aaa0:	5e                   	pop    esi
c000aaa1:	5f                   	pop    edi
c000aaa2:	5d                   	pop    ebp
c000aaa3:	c3                   	ret    

c000aaa4 <VgaText::VgaText(char const*)>:
c000aaa4:	56                   	push   esi
c000aaa5:	53                   	push   ebx
c000aaa6:	83 ec 04             	sub    esp,0x4
c000aaa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaad:	83 ec 08             	sub    esp,0x8
c000aab0:	6a 00                	push   0x0
c000aab2:	50                   	push   eax
c000aab3:	e8 ca 04 00 00       	call   c000af82 <UnixFile::UnixFile(int)>
c000aab8:	83 c4 10             	add    esp,0x10
c000aabb:	ba 84 2e 02 c0       	mov    edx,0xc0022e84
c000aac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac4:	89 10                	mov    DWORD PTR [eax],edx
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000aad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000aadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000aae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000aaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000aaf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ab02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab06:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ab0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab11:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ab18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1c:	05 82 00 00 00       	add    eax,0x82
c000ab21:	83 ec 08             	sub    esp,0x8
c000ab24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab28:	50                   	push   eax
c000ab29:	e8 36 5a ff ff       	call   c0000564 <strcpy>
c000ab2e:	83 c4 10             	add    esp,0x10
c000ab31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab35:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ab3c:	83 ec 0c             	sub    esp,0xc
c000ab3f:	6a 01                	push   0x1
c000ab41:	e8 7f 08 00 00       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c000ab46:	83 c4 10             	add    esp,0x10
c000ab49:	89 c2                	mov    edx,eax
c000ab4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab52:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c000ab58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab5f:	89 c6                	mov    esi,eax
c000ab61:	e8 62 f0 ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000ab66:	68 05 0c 00 00       	push   0xc05
c000ab6b:	56                   	push   esi
c000ab6c:	50                   	push   eax
c000ab6d:	53                   	push   ebx
c000ab6e:	e8 bd 0e 00 00       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab7d:	83 ec 04             	sub    esp,0x4
c000ab80:	68 00 0f 00 00       	push   0xf00
c000ab85:	6a 00                	push   0x0
c000ab87:	50                   	push   eax
c000ab88:	e8 1b 59 ff ff       	call   c00004a8 <memset>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	83 ec 04             	sub    esp,0x4
c000ab93:	6a 00                	push   0x0
c000ab95:	6a 07                	push   0x7
c000ab97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9b:	e8 22 f8 ff ff       	call   c000a3c2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000aba0:	83 c4 10             	add    esp,0x10
c000aba3:	83 ec 04             	sub    esp,0x4
c000aba6:	6a 00                	push   0x0
c000aba8:	6a 00                	push   0x0
c000abaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abae:	e8 b1 f9 ff ff       	call   c000a564 <VgaText::setCursor(int, int)>
c000abb3:	83 c4 10             	add    esp,0x10
c000abb6:	83 ec 0c             	sub    esp,0xc
c000abb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abbd:	e8 2e fa ff ff       	call   c000a5f0 <VgaText::clearScreen()>
c000abc2:	83 c4 10             	add    esp,0x10
c000abc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc9:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000abcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd1:	05 02 01 00 00       	add    eax,0x102
c000abd6:	83 ec 04             	sub    esp,0x4
c000abd9:	6a 30                	push   0x30
c000abdb:	6a 00                	push   0x0
c000abdd:	50                   	push   eax
c000abde:	e8 c5 58 ff ff       	call   c00004a8 <memset>
c000abe3:	83 c4 10             	add    esp,0x10
c000abe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abea:	05 32 01 00 00       	add    eax,0x132
c000abef:	83 ec 04             	sub    esp,0x4
c000abf2:	68 80 00 00 00       	push   0x80
c000abf7:	6a 00                	push   0x0
c000abf9:	50                   	push   eax
c000abfa:	e8 a9 58 ff ff       	call   c00004a8 <memset>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	90                   	nop
c000ac03:	83 c4 04             	add    esp,0x4
c000ac06:	5b                   	pop    ebx
c000ac07:	5e                   	pop    esi
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <VgaText::receiveKey(unsigned char)>:
c000ac0a:	57                   	push   edi
c000ac0b:	56                   	push   esi
c000ac0c:	53                   	push   ebx
c000ac0d:	83 ec 10             	sub    esp,0x10
c000ac10:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000ac14:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ac18:	84 db                	test   bl,bl
c000ac1a:	0f 84 ba 00 00 00    	je     c000acda <VgaText::receiveKey(unsigned char)+0xd0>
c000ac20:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ac26:	80 fb 08             	cmp    bl,0x8
c000ac29:	75 2c                	jne    c000ac57 <VgaText::receiveKey(unsigned char)+0x4d>
c000ac2b:	83 ec 0c             	sub    esp,0xc
c000ac2e:	57                   	push   edi
c000ac2f:	e8 90 58 ff ff       	call   c00004c4 <strlen>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	85 c0                	test   eax,eax
c000ac39:	74 41                	je     c000ac7c <VgaText::receiveKey(unsigned char)+0x72>
c000ac3b:	50                   	push   eax
c000ac3c:	50                   	push   eax
c000ac3d:	6a 08                	push   0x8
c000ac3f:	56                   	push   esi
c000ac40:	e8 6d fb ff ff       	call   c000a7b2 <VgaText::putchar(char)>
c000ac45:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ac48:	e8 77 58 ff ff       	call   c00004c4 <strlen>
c000ac4d:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000ac55:	eb 22                	jmp    c000ac79 <VgaText::receiveKey(unsigned char)+0x6f>
c000ac57:	0f be c3             	movsx  eax,bl
c000ac5a:	52                   	push   edx
c000ac5b:	52                   	push   edx
c000ac5c:	50                   	push   eax
c000ac5d:	56                   	push   esi
c000ac5e:	e8 4f fb ff ff       	call   c000a7b2 <VgaText::putchar(char)>
c000ac63:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000ac67:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac6c:	59                   	pop    ecx
c000ac6d:	58                   	pop    eax
c000ac6e:	8d 44 24 16          	lea    eax,[esp+0x16]
c000ac72:	50                   	push   eax
c000ac73:	57                   	push   edi
c000ac74:	e8 2b 5a ff ff       	call   c00006a4 <strcat>
c000ac79:	83 c4 10             	add    esp,0x10
c000ac7c:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000ac83:	75 05                	jne    c000ac8a <VgaText::receiveKey(unsigned char)+0x80>
c000ac85:	80 fb 0a             	cmp    bl,0xa
c000ac88:	75 50                	jne    c000acda <VgaText::receiveKey(unsigned char)+0xd0>
c000ac8a:	83 ec 0c             	sub    esp,0xc
c000ac8d:	81 c6 32 01 00 00    	add    esi,0x132
c000ac93:	56                   	push   esi
c000ac94:	e8 2b 58 ff ff       	call   c00004c4 <strlen>
c000ac99:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ac9c:	89 c3                	mov    ebx,eax
c000ac9e:	e8 21 58 ff ff       	call   c00004c4 <strlen>
c000aca3:	83 c4 10             	add    esp,0x10
c000aca6:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c000acaa:	3d 80 00 00 00       	cmp    eax,0x80
c000acaf:	76 10                	jbe    c000acc1 <VgaText::receiveKey(unsigned char)+0xb7>
c000acb1:	83 ec 0c             	sub    esp,0xc
c000acb4:	68 2f 2e 02 c0       	push   0xc0022e2f
c000acb9:	e8 cd 7d 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000acbe:	83 c4 10             	add    esp,0x10
c000acc1:	50                   	push   eax
c000acc2:	50                   	push   eax
c000acc3:	57                   	push   edi
c000acc4:	56                   	push   esi
c000acc5:	e8 da 59 ff ff       	call   c00006a4 <strcat>
c000acca:	83 c4 0c             	add    esp,0xc
c000accd:	6a 30                	push   0x30
c000accf:	6a 00                	push   0x0
c000acd1:	57                   	push   edi
c000acd2:	e8 d1 57 ff ff       	call   c00004a8 <memset>
c000acd7:	83 c4 10             	add    esp,0x10
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	5b                   	pop    ebx
c000acde:	5e                   	pop    esi
c000acdf:	5f                   	pop    edi
c000ace0:	c3                   	ret    
c000ace1:	90                   	nop

c000ace2 <VgaText::doUpdate()>:
c000ace2:	c3                   	ret    

c000ace3 <newTerminal(char*)>:
c000ace3:	83 ec 28             	sub    esp,0x28
c000ace6:	68 b4 01 00 00       	push   0x1b4
c000aceb:	e8 a7 ea ff ff       	call   c0009797 <malloc>
c000acf0:	5a                   	pop    edx
c000acf1:	59                   	pop    ecx
c000acf2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000acf6:	50                   	push   eax
c000acf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000acfb:	e8 a4 fd ff ff       	call   c000aaa4 <VgaText::VgaText(char const*)>
c000ad00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ad04:	83 c4 2c             	add    esp,0x2c
c000ad07:	c3                   	ret    

c000ad08 <TSS::TSS()>:
c000ad08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ad13:	90                   	nop
c000ad14:	c3                   	ret    
c000ad15:	90                   	nop
c000ad16:	66 90                	xchg   ax,ax

c000ad18 <TSS::setESP(unsigned long)>:
c000ad18:	55                   	push   ebp
c000ad19:	89 e5                	mov    ebp,esp
c000ad1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad21:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ad24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad27:	90                   	nop
c000ad28:	5d                   	pop    ebp
c000ad29:	c3                   	ret    
c000ad2a:	66 90                	xchg   ax,ax

c000ad2c <TSS::flush()>:
c000ad2c:	55                   	push   ebp
c000ad2d:	89 e5                	mov    ebp,esp
c000ad2f:	83 ec 10             	sub    esp,0x10
c000ad32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad35:	8b 00                	mov    eax,DWORD PTR [eax]
c000ad37:	83 c8 03             	or     eax,0x3
c000ad3a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000ad3e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000ad42:	66 89 d0             	mov    ax,dx
c000ad45:	0f 00 d8             	ltr    ax
c000ad48:	90                   	nop
c000ad49:	c9                   	leave  
c000ad4a:	c3                   	ret    
c000ad4b:	90                   	nop

c000ad4c <TSS::setup(unsigned long, unsigned long)>:
c000ad4c:	55                   	push   ebp
c000ad4d:	89 e5                	mov    ebp,esp
c000ad4f:	83 ec 18             	sub    esp,0x18
c000ad52:	83 ec 0c             	sub    esp,0xc
c000ad55:	6a 68                	push   0x68
c000ad57:	e8 3b ea ff ff       	call   c0009797 <malloc>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	89 c2                	mov    edx,eax
c000ad61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad6d:	83 ec 04             	sub    esp,0x4
c000ad70:	6a 68                	push   0x68
c000ad72:	6a 00                	push   0x0
c000ad74:	50                   	push   eax
c000ad75:	e8 2e 57 ff ff       	call   c00004a8 <memset>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad83:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000ad89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad8f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000ad95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad9b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ad9e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ada1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ada4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ada7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000adad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adb3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000adb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adbf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000adc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adcb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000add1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000add4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000add7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000addd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ade0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ade3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000ade9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adef:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000adf2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000adf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adfb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000adfe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ae01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae07:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000ae0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae14:	0f 20 da             	mov    edx,cr3
c000ae17:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000ae1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000ae1d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000ae20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae26:	83 ec 08             	sub    esp,0x8
c000ae29:	50                   	push   eax
c000ae2a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000ae2d:	50                   	push   eax
c000ae2e:	e8 9d e1 ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	83 ec 08             	sub    esp,0x8
c000ae39:	6a 68                	push   0x68
c000ae3b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000ae3e:	50                   	push   eax
c000ae3f:	e8 a8 e1 ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c000ae44:	83 c4 10             	add    esp,0x10
c000ae47:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000ae4b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000ae4e:	83 e0 0f             	and    eax,0xf
c000ae51:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000ae54:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000ae57:	83 c8 40             	or     eax,0x40
c000ae5a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000ae5d:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000ae62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ae68:	05 78 01 00 00       	add    eax,0x178
c000ae6d:	83 ec 04             	sub    esp,0x4
c000ae70:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ae73:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000ae76:	50                   	push   eax
c000ae77:	e8 a4 e1 ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 c2                	mov    edx,eax
c000ae81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae84:	89 10                	mov    DWORD PTR [eax],edx
c000ae86:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000ae8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ae91:	05 78 01 00 00       	add    eax,0x178
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	50                   	push   eax
c000ae9a:	e8 ab e1 ff ff       	call   c000904a <GDT::flush()>
c000ae9f:	83 c4 10             	add    esp,0x10
c000aea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aea5:	8b 00                	mov    eax,DWORD PTR [eax]
c000aea7:	c9                   	leave  
c000aea8:	c3                   	ret    
c000aea9:	90                   	nop

c000aeaa <ReservedFilename::read(unsigned long long, void*, int*)>:
c000aeaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aeb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aeb5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000aeba:	75 08                	jne    c000aec4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000aebc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000aec2:	eb 38                	jmp    c000aefc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000aec4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000aec9:	75 17                	jne    c000aee2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000aecb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000aed0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000aed3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000aed9:	8b 10                	mov    edx,DWORD PTR [eax]
c000aedb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aedf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000aee2:	89 c1                	mov    ecx,eax
c000aee4:	83 e1 fd             	and    ecx,0xfffffffd
c000aee7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000aeed:	74 cd                	je     c000aebc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000aeef:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000aef4:	83 e0 ef             	and    eax,0xffffffef
c000aef7:	83 f8 08             	cmp    eax,0x8
c000aefa:	76 c0                	jbe    c000aebc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000aefc:	31 c0                	xor    eax,eax
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <ReservedFilename::isAtty()>:
c000af00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af04:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000af07:	31 c0                	xor    eax,eax
c000af09:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000af0f:	74 09                	je     c000af1a <ReservedFilename::isAtty()+0x1a>
c000af11:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000af17:	0f 94 c0             	sete   al
c000af1a:	c3                   	ret    
c000af1b:	90                   	nop

c000af1c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000af1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000af27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000af2b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000af30:	75 08                	jne    c000af3a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000af32:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000af38:	eb 3d                	jmp    c000af77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000af3a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000af3f:	75 17                	jne    c000af58 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000af41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000af46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000af49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000af4f:	8b 10                	mov    edx,DWORD PTR [eax]
c000af51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af55:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000af58:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000af5d:	75 04                	jne    c000af63 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000af5f:	89 0a                	mov    DWORD PTR [edx],ecx
c000af61:	eb 14                	jmp    c000af77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000af63:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000af68:	74 c8                	je     c000af32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000af6a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000af6f:	83 e0 ef             	and    eax,0xffffffef
c000af72:	83 f8 08             	cmp    eax,0x8
c000af75:	76 bb                	jbe    c000af32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000af77:	31 c0                	xor    eax,eax
c000af79:	c3                   	ret    

c000af7a <UnixFile::getFileDescriptor()>:
c000af7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000af81:	c3                   	ret    

c000af82 <UnixFile::UnixFile(int)>:
c000af82:	53                   	push   ebx
c000af83:	83 ec 28             	sub    esp,0x28
c000af86:	ba 4c 2f 02 c0       	mov    edx,0xc0022f4c
c000af8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8f:	89 10                	mov    DWORD PTR [eax],edx
c000af91:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000af99:	0f 8f 8c 01 00 00    	jg     c000b12b <UnixFile::UnixFile(int)+0x1a9>
c000af9f:	a1 40 5b 02 c0       	mov    eax,ds:0xc0025b40
c000afa4:	8d 50 01             	lea    edx,[eax+0x1]
c000afa7:	89 15 40 5b 02 c0    	mov    DWORD PTR ds:0xc0025b40,edx
c000afad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000afb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000afb4:	83 ec 08             	sub    esp,0x8
c000afb7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000afbb:	68 18 65 02 c0       	push   0xc0026518
c000afc0:	e8 d3 68 01 00       	call   c0021898 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000afc5:	83 c4 10             	add    esp,0x10
c000afc8:	a0 14 65 02 c0       	mov    al,ds:0xc0026514
c000afcd:	83 f0 01             	xor    eax,0x1
c000afd0:	84 c0                	test   al,al
c000afd2:	0f 84 54 01 00 00    	je     c000b12c <UnixFile::UnixFile(int)+0x1aa>
c000afd8:	c6 05 14 65 02 c0 01 	mov    BYTE PTR ds:0xc0026514,0x1
c000afdf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000afe7:	83 ec 0c             	sub    esp,0xc
c000afea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afee:	e8 a4 e7 ff ff       	call   c0009797 <malloc>
c000aff3:	83 c4 10             	add    esp,0x10
c000aff6:	89 c3                	mov    ebx,eax
c000aff8:	83 ec 08             	sub    esp,0x8
c000affb:	68 03 ff ff 0f       	push   0xfffff03
c000b000:	53                   	push   ebx
c000b001:	e8 2c 01 00 00       	call   c000b132 <ReservedFilename::ReservedFilename(int)>
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	89 1d 0c 65 02 c0    	mov    DWORD PTR ds:0xc002650c,ebx
c000b00f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b017:	83 ec 0c             	sub    esp,0xc
c000b01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01e:	e8 74 e7 ff ff       	call   c0009797 <malloc>
c000b023:	83 c4 10             	add    esp,0x10
c000b026:	89 c3                	mov    ebx,eax
c000b028:	83 ec 08             	sub    esp,0x8
c000b02b:	68 01 ff ff 0f       	push   0xfffff01
c000b030:	53                   	push   ebx
c000b031:	e8 fc 00 00 00       	call   c000b132 <ReservedFilename::ReservedFilename(int)>
c000b036:	83 c4 10             	add    esp,0x10
c000b039:	89 1d 10 65 02 c0    	mov    DWORD PTR ds:0xc0026510,ebx
c000b03f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b047:	83 ec 0c             	sub    esp,0xc
c000b04a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b04e:	e8 44 e7 ff ff       	call   c0009797 <malloc>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	89 c3                	mov    ebx,eax
c000b058:	83 ec 08             	sub    esp,0x8
c000b05b:	68 00 ff ff 0f       	push   0xfffff00
c000b060:	53                   	push   ebx
c000b061:	e8 cc 00 00 00       	call   c000b132 <ReservedFilename::ReservedFilename(int)>
c000b066:	83 c4 10             	add    esp,0x10
c000b069:	89 1d 04 65 02 c0    	mov    DWORD PTR ds:0xc0026504,ebx
c000b06f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b077:	83 ec 0c             	sub    esp,0xc
c000b07a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b07e:	e8 14 e7 ff ff       	call   c0009797 <malloc>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	89 c3                	mov    ebx,eax
c000b088:	83 ec 08             	sub    esp,0x8
c000b08b:	68 02 ff ff 0f       	push   0xfffff02
c000b090:	53                   	push   ebx
c000b091:	e8 9c 00 00 00       	call   c000b132 <ReservedFilename::ReservedFilename(int)>
c000b096:	83 c4 10             	add    esp,0x10
c000b099:	89 1d 08 65 02 c0    	mov    DWORD PTR ds:0xc0026508,ebx
c000b09f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b0a7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b0ac:	7f 7e                	jg     c000b12c <UnixFile::UnixFile(int)+0x1aa>
c000b0ae:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b0bd:	e8 d5 e6 ff ff       	call   c0009797 <malloc>
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	89 c3                	mov    ebx,eax
c000b0c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0cb:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b0d0:	83 ec 08             	sub    esp,0x8
c000b0d3:	50                   	push   eax
c000b0d4:	53                   	push   ebx
c000b0d5:	e8 58 00 00 00       	call   c000b132 <ReservedFilename::ReservedFilename(int)>
c000b0da:	83 c4 10             	add    esp,0x10
c000b0dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0e1:	89 1c 85 e0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b20],ebx
c000b0e8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b0f0:	83 ec 0c             	sub    esp,0xc
c000b0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0f7:	e8 9b e6 ff ff       	call   c0009797 <malloc>
c000b0fc:	83 c4 10             	add    esp,0x10
c000b0ff:	89 c3                	mov    ebx,eax
c000b101:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b105:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b10a:	83 ec 08             	sub    esp,0x8
c000b10d:	50                   	push   eax
c000b10e:	53                   	push   ebx
c000b10f:	e8 1e 00 00 00       	call   c000b132 <ReservedFilename::ReservedFilename(int)>
c000b114:	83 c4 10             	add    esp,0x10
c000b117:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b11b:	89 1c 85 a0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b60],ebx
c000b122:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b126:	e9 7c ff ff ff       	jmp    c000b0a7 <UnixFile::UnixFile(int)+0x125>
c000b12b:	90                   	nop
c000b12c:	83 c4 28             	add    esp,0x28
c000b12f:	5b                   	pop    ebx
c000b130:	c3                   	ret    
c000b131:	90                   	nop

c000b132 <ReservedFilename::ReservedFilename(int)>:
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b139:	83 ec 08             	sub    esp,0x8
c000b13c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b140:	50                   	push   eax
c000b141:	e8 3c fe ff ff       	call   c000af82 <UnixFile::UnixFile(int)>
c000b146:	83 c4 10             	add    esp,0x10
c000b149:	ba 68 2f 02 c0       	mov    edx,0xc0022f68
c000b14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b152:	89 10                	mov    DWORD PTR [eax],edx
c000b154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b158:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b15c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b15f:	90                   	nop
c000b160:	83 c4 0c             	add    esp,0xc
c000b163:	c3                   	ret    

c000b164 <UnixFile::~UnixFile()>:
c000b164:	83 ec 1c             	sub    esp,0x1c
c000b167:	ba 4c 2f 02 c0       	mov    edx,0xc0022f4c
c000b16c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b170:	89 10                	mov    DWORD PTR [eax],edx
c000b172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b179:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b17e:	7f 73                	jg     c000b1f3 <UnixFile::~UnixFile()+0x8f>
c000b180:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b188:	83 ec 0c             	sub    esp,0xc
c000b18b:	68 18 65 02 c0       	push   0xc0026518
c000b190:	e8 d7 67 01 00       	call   c002196c <LinkedList<UnixFile>::getFirstElement()>
c000b195:	83 c4 10             	add    esp,0x10
c000b198:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b19c:	83 ec 0c             	sub    esp,0xc
c000b19f:	68 18 65 02 c0       	push   0xc0026518
c000b1a4:	e8 cb 67 01 00       	call   c0021974 <LinkedList<UnixFile>::removeFirst()>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b1b0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b1b4:	74 40                	je     c000b1f6 <UnixFile::~UnixFile()+0x92>
c000b1b6:	83 ec 08             	sub    esp,0x8
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	68 18 65 02 c0       	push   0xc0026518
c000b1c2:	e8 d1 66 01 00       	call   c0021898 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b1c7:	83 c4 10             	add    esp,0x10
c000b1ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1ce:	8d 50 01             	lea    edx,[eax+0x1]
c000b1d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b1d5:	3d 88 13 00 00       	cmp    eax,0x1388
c000b1da:	0f 94 c0             	sete   al
c000b1dd:	84 c0                	test   al,al
c000b1df:	74 a7                	je     c000b188 <UnixFile::~UnixFile()+0x24>
c000b1e1:	83 ec 0c             	sub    esp,0xc
c000b1e4:	68 24 2f 02 c0       	push   0xc0022f24
c000b1e9:	e8 9d 78 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000b1ee:	83 c4 10             	add    esp,0x10
c000b1f1:	eb 95                	jmp    c000b188 <UnixFile::~UnixFile()+0x24>
c000b1f3:	90                   	nop
c000b1f4:	eb 01                	jmp    c000b1f7 <UnixFile::~UnixFile()+0x93>
c000b1f6:	90                   	nop
c000b1f7:	90                   	nop
c000b1f8:	83 c4 1c             	add    esp,0x1c
c000b1fb:	c3                   	ret    

c000b1fc <UnixFile::~UnixFile()>:
c000b1fc:	83 ec 0c             	sub    esp,0xc
c000b1ff:	83 ec 0c             	sub    esp,0xc
c000b202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b206:	e8 59 ff ff ff       	call   c000b164 <UnixFile::~UnixFile()>
c000b20b:	83 c4 10             	add    esp,0x10
c000b20e:	83 ec 08             	sub    esp,0x8
c000b211:	6a 0c                	push   0xc
c000b213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b217:	e8 24 14 00 00       	call   c000c640 <operator delete(void*, unsigned long)>
c000b21c:	83 c4 10             	add    esp,0x10
c000b21f:	83 c4 0c             	add    esp,0xc
c000b222:	c3                   	ret    
c000b223:	90                   	nop

c000b224 <ReservedFilename::~ReservedFilename()>:
c000b224:	83 ec 0c             	sub    esp,0xc
c000b227:	ba 68 2f 02 c0       	mov    edx,0xc0022f68
c000b22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b230:	89 10                	mov    DWORD PTR [eax],edx
c000b232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	50                   	push   eax
c000b23a:	e8 25 ff ff ff       	call   c000b164 <UnixFile::~UnixFile()>
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	90                   	nop
c000b243:	83 c4 0c             	add    esp,0xc
c000b246:	c3                   	ret    
c000b247:	90                   	nop

c000b248 <ReservedFilename::~ReservedFilename()>:
c000b248:	83 ec 0c             	sub    esp,0xc
c000b24b:	83 ec 0c             	sub    esp,0xc
c000b24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b252:	e8 cd ff ff ff       	call   c000b224 <ReservedFilename::~ReservedFilename()>
c000b257:	83 c4 10             	add    esp,0x10
c000b25a:	83 ec 08             	sub    esp,0x8
c000b25d:	6a 0c                	push   0xc
c000b25f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b263:	e8 d8 13 00 00       	call   c000c640 <operator delete(void*, unsigned long)>
c000b268:	83 c4 10             	add    esp,0x10
c000b26b:	83 c4 0c             	add    esp,0xc
c000b26e:	c3                   	ret    

c000b26f <getFromFileDescriptor(int)>:
c000b26f:	53                   	push   ebx
c000b270:	83 ec 08             	sub    esp,0x8
c000b273:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b277:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b27d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b283:	7f 2c                	jg     c000b2b1 <getFromFileDescriptor(int)+0x42>
c000b285:	83 ec 0c             	sub    esp,0xc
c000b288:	68 18 65 02 c0       	push   0xc0026518
c000b28d:	e8 da 66 01 00       	call   c002196c <LinkedList<UnixFile>::getFirstElement()>
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	85 c0                	test   eax,eax
c000b297:	75 04                	jne    c000b29d <getFromFileDescriptor(int)+0x2e>
c000b299:	31 c0                	xor    eax,eax
c000b29b:	eb 6e                	jmp    c000b30b <getFromFileDescriptor(int)+0x9c>
c000b29d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b2a0:	74 69                	je     c000b30b <getFromFileDescriptor(int)+0x9c>
c000b2a2:	52                   	push   edx
c000b2a3:	52                   	push   edx
c000b2a4:	50                   	push   eax
c000b2a5:	68 18 65 02 c0       	push   0xc0026518
c000b2aa:	e8 67 67 01 00       	call   c0021a16 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b2af:	eb e1                	jmp    c000b292 <getFromFileDescriptor(int)+0x23>
c000b2b1:	a1 0c 65 02 c0       	mov    eax,ds:0xc002650c
c000b2b6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b2bc:	74 4d                	je     c000b30b <getFromFileDescriptor(int)+0x9c>
c000b2be:	a1 10 65 02 c0       	mov    eax,ds:0xc0026510
c000b2c3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b2c9:	74 40                	je     c000b30b <getFromFileDescriptor(int)+0x9c>
c000b2cb:	a1 08 65 02 c0       	mov    eax,ds:0xc0026508
c000b2d0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b2d6:	74 33                	je     c000b30b <getFromFileDescriptor(int)+0x9c>
c000b2d8:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000b2dd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b2e3:	74 26                	je     c000b30b <getFromFileDescriptor(int)+0x9c>
c000b2e5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b2eb:	83 f8 08             	cmp    eax,0x8
c000b2ee:	77 09                	ja     c000b2f9 <getFromFileDescriptor(int)+0x8a>
c000b2f0:	8b 04 85 e0 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b20]
c000b2f7:	eb 12                	jmp    c000b30b <getFromFileDescriptor(int)+0x9c>
c000b2f9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b2ff:	83 fb 08             	cmp    ebx,0x8
c000b302:	77 95                	ja     c000b299 <getFromFileDescriptor(int)+0x2a>
c000b304:	8b 04 9d a0 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9b60]
c000b30b:	83 c4 08             	add    esp,0x8
c000b30e:	5b                   	pop    ebx
c000b30f:	c3                   	ret    

c000b310 <__static_initialization_and_destruction_0(int, int)>:
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b318:	75 34                	jne    c000b34e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b31a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b322:	75 2a                	jne    c000b34e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b324:	83 ec 0c             	sub    esp,0xc
c000b327:	68 18 65 02 c0       	push   0xc0026518
c000b32c:	e8 25 65 01 00       	call   c0021856 <LinkedList<UnixFile>::LinkedList()>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	83 ec 04             	sub    esp,0x4
c000b337:	68 5c 59 02 c0       	push   0xc002595c
c000b33c:	68 18 65 02 c0       	push   0xc0026518
c000b341:	68 54 18 02 c0       	push   0xc0021854
c000b346:	e8 6f 12 00 00       	call   c000c5ba <__cxa_atexit>
c000b34b:	83 c4 10             	add    esp,0x10
c000b34e:	90                   	nop
c000b34f:	83 c4 0c             	add    esp,0xc
c000b352:	c3                   	ret    

c000b353 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b353:	83 ec 0c             	sub    esp,0xc
c000b356:	83 ec 08             	sub    esp,0x8
c000b359:	68 ff ff 00 00       	push   0xffff
c000b35e:	6a 01                	push   0x1
c000b360:	e8 ab ff ff ff       	call   c000b310 <__static_initialization_and_destruction_0(int, int)>
c000b365:	83 c4 10             	add    esp,0x10
c000b368:	83 c4 0c             	add    esp,0xc
c000b36b:	c3                   	ret    

c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b36c:	53                   	push   ebx
c000b36d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b371:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b375:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b37b:	89 c8                	mov    eax,ecx
c000b37d:	d1 e8                	shr    eax,1
c000b37f:	03 05 48 5b 02 c0    	add    eax,DWORD PTR ds:0xc0025b48
c000b385:	83 e1 01             	and    ecx,0x1
c000b388:	8a 10                	mov    dl,BYTE PTR [eax]
c000b38a:	75 09                	jne    c000b395 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b38c:	83 e2 f0             	and    edx,0xfffffff0
c000b38f:	09 da                	or     edx,ebx
c000b391:	88 10                	mov    BYTE PTR [eax],dl
c000b393:	5b                   	pop    ebx
c000b394:	c3                   	ret    
c000b395:	c1 e3 04             	shl    ebx,0x4
c000b398:	83 e2 0f             	and    edx,0xf
c000b39b:	09 da                	or     edx,ebx
c000b39d:	88 10                	mov    BYTE PTR [eax],dl
c000b39f:	5b                   	pop    ebx
c000b3a0:	c3                   	ret    

c000b3a1 <Virt::getPageState(unsigned long)>:
c000b3a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a5:	8b 0d 48 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b48
c000b3ab:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b3b1:	89 d0                	mov    eax,edx
c000b3b3:	d1 e8                	shr    eax,1
c000b3b5:	83 e2 01             	and    edx,0x1
c000b3b8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b3bb:	75 04                	jne    c000b3c1 <Virt::getPageState(unsigned long)+0x20>
c000b3bd:	83 e0 0f             	and    eax,0xf
c000b3c0:	c3                   	ret    
c000b3c1:	c0 e8 04             	shr    al,0x4
c000b3c4:	c3                   	ret    

c000b3c5 <Virt::allocateKernelVirtualPages(int)>:
c000b3c5:	55                   	push   ebp
c000b3c6:	31 ed                	xor    ebp,ebp
c000b3c8:	57                   	push   edi
c000b3c9:	56                   	push   esi
c000b3ca:	53                   	push   ebx
c000b3cb:	31 db                	xor    ebx,ebx
c000b3cd:	83 ec 1c             	sub    esp,0x1c
c000b3d0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b3d4:	8b 3d 44 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025b44
c000b3da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b3df:	57                   	push   edi
c000b3e0:	e8 bc ff ff ff       	call   c000b3a1 <Virt::getPageState(unsigned long)>
c000b3e5:	5a                   	pop    edx
c000b3e6:	84 c0                	test   al,al
c000b3e8:	75 3a                	jne    c000b424 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b3ea:	85 db                	test   ebx,ebx
c000b3ec:	75 02                	jne    c000b3f0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b3ee:	89 fd                	mov    ebp,edi
c000b3f0:	43                   	inc    ebx
c000b3f1:	39 f3                	cmp    ebx,esi
c000b3f3:	74 5a                	je     c000b44f <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b3f5:	47                   	inc    edi
c000b3f6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b3fc:	76 31                	jbe    c000b42f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b3fe:	c7 05 44 5b 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025b44,0xc8000
c000b408:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b40d:	75 28                	jne    c000b437 <Virt::allocateKernelVirtualPages(int)+0x72>
c000b40f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b414:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b419:	57                   	push   edi
c000b41a:	e8 82 ff ff ff       	call   c000b3a1 <Virt::getPageState(unsigned long)>
c000b41f:	5a                   	pop    edx
c000b420:	84 c0                	test   al,al
c000b422:	74 c6                	je     c000b3ea <Virt::allocateKernelVirtualPages(int)+0x25>
c000b424:	31 db                	xor    ebx,ebx
c000b426:	47                   	inc    edi
c000b427:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b42d:	77 cf                	ja     c000b3fe <Virt::allocateKernelVirtualPages(int)+0x39>
c000b42f:	89 3d 44 5b 02 c0    	mov    DWORD PTR ds:0xc0025b44,edi
c000b435:	eb a8                	jmp    c000b3df <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b437:	83 ec 0c             	sub    esp,0xc
c000b43a:	68 7c 2f 02 c0       	push   0xc0022f7c
c000b43f:	e8 47 76 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000b444:	8b 3d 44 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025b44
c000b44a:	83 c4 10             	add    esp,0x10
c000b44d:	eb 90                	jmp    c000b3df <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b44f:	89 2d 44 5b 02 c0    	mov    DWORD PTR ds:0xc0025b44,ebp
c000b455:	4b                   	dec    ebx
c000b456:	74 5f                	je     c000b4b7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b458:	85 f6                	test   esi,esi
c000b45a:	74 3d                	je     c000b499 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b45c:	89 e8                	mov    eax,ebp
c000b45e:	31 db                	xor    ebx,ebx
c000b460:	8d 7e ff             	lea    edi,[esi-0x1]
c000b463:	eb 14                	jmp    c000b479 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b465:	6a 01                	push   0x1
c000b467:	43                   	inc    ebx
c000b468:	50                   	push   eax
c000b469:	e8 fe fe ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b46e:	58                   	pop    eax
c000b46f:	39 f3                	cmp    ebx,esi
c000b471:	5a                   	pop    edx
c000b472:	74 25                	je     c000b499 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b474:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c000b479:	8d 50 01             	lea    edx,[eax+0x1]
c000b47c:	85 db                	test   ebx,ebx
c000b47e:	89 15 44 5b 02 c0    	mov    DWORD PTR ds:0xc0025b44,edx
c000b484:	74 20                	je     c000b4a6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b486:	39 df                	cmp    edi,ebx
c000b488:	75 db                	jne    c000b465 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b48a:	6a 03                	push   0x3
c000b48c:	43                   	inc    ebx
c000b48d:	50                   	push   eax
c000b48e:	e8 d9 fe ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b493:	59                   	pop    ecx
c000b494:	39 f3                	cmp    ebx,esi
c000b496:	58                   	pop    eax
c000b497:	75 db                	jne    c000b474 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b499:	83 c4 1c             	add    esp,0x1c
c000b49c:	89 e8                	mov    eax,ebp
c000b49e:	5b                   	pop    ebx
c000b49f:	c1 e0 0c             	shl    eax,0xc
c000b4a2:	5e                   	pop    esi
c000b4a3:	5f                   	pop    edi
c000b4a4:	5d                   	pop    ebp
c000b4a5:	c3                   	ret    
c000b4a6:	6a 02                	push   0x2
c000b4a8:	bb 01 00 00 00       	mov    ebx,0x1
c000b4ad:	50                   	push   eax
c000b4ae:	e8 b9 fe ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b4b3:	58                   	pop    eax
c000b4b4:	5a                   	pop    edx
c000b4b5:	eb bd                	jmp    c000b474 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b4b7:	6a 04                	push   0x4
c000b4b9:	8d 45 01             	lea    eax,[ebp+0x1]
c000b4bc:	55                   	push   ebp
c000b4bd:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c000b4c2:	e8 a5 fe ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b4c7:	59                   	pop    ecx
c000b4c8:	89 e8                	mov    eax,ebp
c000b4ca:	5b                   	pop    ebx
c000b4cb:	c1 e0 0c             	shl    eax,0xc
c000b4ce:	83 c4 1c             	add    esp,0x1c
c000b4d1:	5b                   	pop    ebx
c000b4d2:	5e                   	pop    esi
c000b4d3:	5f                   	pop    edi
c000b4d4:	5d                   	pop    ebp
c000b4d5:	c3                   	ret    

c000b4d6 <Virt::freeSwapfilePage(unsigned long)>:
c000b4d6:	53                   	push   ebx
c000b4d7:	8b 15 30 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026530
c000b4dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4e1:	b8 01 00 00 00       	mov    eax,0x1
c000b4e6:	89 cb                	mov    ebx,ecx
c000b4e8:	d3 e0                	shl    eax,cl
c000b4ea:	c1 eb 05             	shr    ebx,0x5
c000b4ed:	f7 d0                	not    eax
c000b4ef:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b4f2:	5b                   	pop    ebx
c000b4f3:	c3                   	ret    

c000b4f4 <Virt::swapIDToSector(unsigned long)>:
c000b4f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4f8:	0f af 05 4c 5b 02 c0 	imul   eax,DWORD PTR ds:0xc0025b4c
c000b4ff:	03 05 54 5b 02 c0    	add    eax,DWORD PTR ds:0xc0025b54
c000b505:	c3                   	ret    

c000b506 <Virt::allocateSwapfilePage()>:
c000b506:	55                   	push   ebp
c000b507:	31 d2                	xor    edx,edx
c000b509:	57                   	push   edi
c000b50a:	56                   	push   esi
c000b50b:	53                   	push   ebx
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8b 0d 4c 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b4c
c000b515:	a1 50 5b 02 c0       	mov    eax,ds:0xc0025b50
c000b51a:	f7 f1                	div    ecx
c000b51c:	39 0d 50 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b50,ecx
c000b522:	72 2d                	jb     c000b551 <Virt::allocateSwapfilePage()+0x4b>
c000b524:	8b 35 30 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026530
c000b52a:	8b 16                	mov    edx,DWORD PTR [esi]
c000b52c:	f6 c2 01             	test   dl,0x1
c000b52f:	74 3c                	je     c000b56d <Virt::allocateSwapfilePage()+0x67>
c000b531:	31 c9                	xor    ecx,ecx
c000b533:	bf 01 00 00 00       	mov    edi,0x1
c000b538:	eb 12                	jmp    c000b54c <Virt::allocateSwapfilePage()+0x46>
c000b53a:	89 fd                	mov    ebp,edi
c000b53c:	89 ca                	mov    edx,ecx
c000b53e:	d3 e5                	shl    ebp,cl
c000b540:	c1 ea 05             	shr    edx,0x5
c000b543:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b546:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b548:	85 ea                	test   edx,ebp
c000b54a:	74 2a                	je     c000b576 <Virt::allocateSwapfilePage()+0x70>
c000b54c:	41                   	inc    ecx
c000b54d:	39 c8                	cmp    eax,ecx
c000b54f:	77 e9                	ja     c000b53a <Virt::allocateSwapfilePage()+0x34>
c000b551:	83 ec 0c             	sub    esp,0xc
c000b554:	68 34 31 02 c0       	push   0xc0023134
c000b559:	e8 2d 75 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	31 c9                	xor    ecx,ecx
c000b563:	83 c4 0c             	add    esp,0xc
c000b566:	89 c8                	mov    eax,ecx
c000b568:	5b                   	pop    ebx
c000b569:	5e                   	pop    esi
c000b56a:	5f                   	pop    edi
c000b56b:	5d                   	pop    ebp
c000b56c:	c3                   	ret    
c000b56d:	89 f3                	mov    ebx,esi
c000b56f:	bd 01 00 00 00       	mov    ebp,0x1
c000b574:	31 c9                	xor    ecx,ecx
c000b576:	09 ea                	or     edx,ebp
c000b578:	89 c8                	mov    eax,ecx
c000b57a:	89 13                	mov    DWORD PTR [ebx],edx
c000b57c:	83 c4 0c             	add    esp,0xc
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	5d                   	pop    ebp
c000b583:	c3                   	ret    

c000b584 <Virt::virtualMemorySetup()>:
c000b584:	53                   	push   ebx
c000b585:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b58a:	6a 0f                	push   0xf
c000b58c:	53                   	push   ebx
c000b58d:	43                   	inc    ebx
c000b58e:	e8 d9 fd ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b593:	58                   	pop    eax
c000b594:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b59a:	5a                   	pop    edx
c000b59b:	75 ed                	jne    c000b58a <Virt::virtualMemorySetup()+0x6>
c000b59d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b5a2:	6a 00                	push   0x0
c000b5a4:	53                   	push   ebx
c000b5a5:	43                   	inc    ebx
c000b5a6:	e8 c1 fd ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b5ab:	59                   	pop    ecx
c000b5ac:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b5b2:	58                   	pop    eax
c000b5b3:	75 ed                	jne    c000b5a2 <Virt::virtualMemorySetup()+0x1e>
c000b5b5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b5ba:	6a 0f                	push   0xf
c000b5bc:	53                   	push   ebx
c000b5bd:	43                   	inc    ebx
c000b5be:	e8 a9 fd ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b5c3:	58                   	pop    eax
c000b5c4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b5ca:	5a                   	pop    edx
c000b5cb:	75 ed                	jne    c000b5ba <Virt::virtualMemorySetup()+0x36>
c000b5cd:	5b                   	pop    ebx
c000b5ce:	c3                   	ret    

c000b5cf <Virt::setupPageSwapping(int)>:
c000b5cf:	53                   	push   ebx
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b5d7:	a1 c8 89 02 c0       	mov    eax,ds:0xc00289c8
c000b5dc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b5e2:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5e4:	53                   	push   ebx
c000b5e5:	c1 e3 0b             	shl    ebx,0xb
c000b5e8:	68 4b 31 02 c0       	push   0xc002314b
c000b5ed:	50                   	push   eax
c000b5ee:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b5f1:	89 1d 50 5b 02 c0    	mov    DWORD PTR ds:0xc0025b50,ebx
c000b5f7:	c6 05 58 5b 02 c0 43 	mov    BYTE PTR ds:0xc0025b58,0x43
c000b5fe:	c1 eb 08             	shr    ebx,0x8
c000b601:	a3 54 5b 02 c0       	mov    ds:0xc0025b54,eax
c000b606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b609:	c7 05 4c 5b 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0025b4c,0x8
c000b613:	e8 7f e1 ff ff       	call   c0009797 <malloc>
c000b618:	83 c4 0c             	add    esp,0xc
c000b61b:	89 c1                	mov    ecx,eax
c000b61d:	a3 30 65 02 c0       	mov    ds:0xc0026530,eax
c000b622:	31 d2                	xor    edx,edx
c000b624:	a1 50 5b 02 c0       	mov    eax,ds:0xc0025b50
c000b629:	f7 35 4c 5b 02 c0    	div    DWORD PTR ds:0xc0025b4c
c000b62f:	c1 e8 05             	shr    eax,0x5
c000b632:	50                   	push   eax
c000b633:	6a 00                	push   0x0
c000b635:	51                   	push   ecx
c000b636:	e8 6d 4e ff ff       	call   c00004a8 <memset>
c000b63b:	83 c4 18             	add    esp,0x18
c000b63e:	5b                   	pop    ebx
c000b63f:	c3                   	ret    

c000b640 <VAS::VAS(VAS*)>:
c000b640:	83 ec 0c             	sub    esp,0xc
c000b643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b647:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b652:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b659:	83 ec 0c             	sub    esp,0xc
c000b65c:	68 9c 2f 02 c0       	push   0xc0022f9c
c000b661:	e8 25 74 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000b666:	83 c4 10             	add    esp,0x10
c000b669:	90                   	nop
c000b66a:	83 c4 0c             	add    esp,0xc
c000b66d:	c3                   	ret    

c000b66e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b66e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b672:	89 c2                	mov    edx,eax
c000b674:	c1 e8 0a             	shr    eax,0xa
c000b677:	c1 ea 16             	shr    edx,0x16
c000b67a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b67f:	19 c9                	sbb    ecx,ecx
c000b681:	c1 e2 0c             	shl    edx,0xc
c000b684:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b68a:	25 fc 0f 00 00       	and    eax,0xffc
c000b68f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b696:	01 d0                	add    eax,edx
c000b698:	c3                   	ret    
c000b699:	90                   	nop

c000b69a <VAS::getPageTableEntry(unsigned long)>:
c000b69a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b69e:	89 ca                	mov    edx,ecx
c000b6a0:	c1 e9 0a             	shr    ecx,0xa
c000b6a3:	c1 ea 16             	shr    edx,0x16
c000b6a6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b6ac:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b6b2:	c1 e0 0c             	shl    eax,0xc
c000b6b5:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b6b8:	c3                   	ret    

c000b6b9 <Virt::freeKernelVirtualPages(unsigned long)>:
c000b6b9:	57                   	push   edi
c000b6ba:	56                   	push   esi
c000b6bb:	be 01 00 00 00       	mov    esi,0x1
c000b6c0:	53                   	push   ebx
c000b6c1:	83 ec 10             	sub    esp,0x10
c000b6c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b6c8:	c1 eb 0c             	shr    ebx,0xc
c000b6cb:	eb 3f                	jmp    c000b70c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b6cd:	83 ec 08             	sub    esp,0x8
c000b6d0:	57                   	push   edi
c000b6d1:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c000b6d7:	e8 be ff ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000b6dc:	83 c4 10             	add    esp,0x10
c000b6df:	8b 00                	mov    eax,DWORD PTR [eax]
c000b6e1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b6e5:	f6 c4 04             	test   ah,0x4
c000b6e8:	75 5f                	jne    c000b749 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b6ea:	80 fa 04             	cmp    dl,0x4
c000b6ed:	74 78                	je     c000b767 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b6ef:	80 fa 02             	cmp    dl,0x2
c000b6f2:	0f 84 88 00 00 00    	je     c000b780 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b6f8:	80 fa 03             	cmp    dl,0x3
c000b6fb:	0f 84 ad 00 00 00    	je     c000b7ae <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000b701:	fe ca                	dec    dl
c000b703:	0f 84 92 00 00 00    	je     c000b79b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b709:	43                   	inc    ebx
c000b70a:	31 f6                	xor    esi,esi
c000b70c:	53                   	push   ebx
c000b70d:	89 df                	mov    edi,ebx
c000b70f:	e8 8d fc ff ff       	call   c000b3a1 <Virt::getPageState(unsigned long)>
c000b714:	c1 e7 0c             	shl    edi,0xc
c000b717:	59                   	pop    ecx
c000b718:	84 c0                	test   al,al
c000b71a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000b71e:	75 ad                	jne    c000b6cd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000b720:	83 ec 0c             	sub    esp,0xc
c000b723:	68 62 31 02 c0       	push   0xc0023162
c000b728:	e8 5e 73 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000b72d:	58                   	pop    eax
c000b72e:	5a                   	pop    edx
c000b72f:	57                   	push   edi
c000b730:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c000b736:	e8 5f ff ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000b73b:	83 c4 10             	add    esp,0x10
c000b73e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b740:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b744:	f6 c4 04             	test   ah,0x4
c000b747:	74 c0                	je     c000b709 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b749:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000b74d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b752:	83 ec 0c             	sub    esp,0xc
c000b755:	50                   	push   eax
c000b756:	e8 ea e3 ff ff       	call   c0009b45 <Phys::freePage(unsigned long)>
c000b75b:	83 c4 10             	add    esp,0x10
c000b75e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b762:	80 fa 04             	cmp    dl,0x4
c000b765:	75 88                	jne    c000b6ef <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000b767:	89 f0                	mov    eax,esi
c000b769:	84 c0                	test   al,al
c000b76b:	75 47                	jne    c000b7b4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000b76d:	c7 44 24 20 c0 2f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022fc0
c000b775:	83 c4 10             	add    esp,0x10
c000b778:	5b                   	pop    ebx
c000b779:	5e                   	pop    esi
c000b77a:	5f                   	pop    edi
c000b77b:	e9 0b 73 00 00       	jmp    c0012a8b <Krnl::panic(char const*)>
c000b780:	89 f0                	mov    eax,esi
c000b782:	84 c0                	test   al,al
c000b784:	75 15                	jne    c000b79b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b786:	83 ec 0c             	sub    esp,0xc
c000b789:	68 7e 31 02 c0       	push   0xc002317e
c000b78e:	e8 f8 72 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	e9 6e ff ff ff       	jmp    c000b709 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b79b:	83 ec 08             	sub    esp,0x8
c000b79e:	6a 00                	push   0x0
c000b7a0:	53                   	push   ebx
c000b7a1:	e8 c6 fb ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	e9 5b ff ff ff       	jmp    c000b709 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b7ae:	89 f0                	mov    eax,esi
c000b7b0:	84 c0                	test   al,al
c000b7b2:	75 15                	jne    c000b7c9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000b7b4:	83 ec 08             	sub    esp,0x8
c000b7b7:	6a 00                	push   0x0
c000b7b9:	53                   	push   ebx
c000b7ba:	e8 ad fb ff ff       	call   c000b36c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7bf:	83 c4 10             	add    esp,0x10
c000b7c2:	83 c4 10             	add    esp,0x10
c000b7c5:	5b                   	pop    ebx
c000b7c6:	5e                   	pop    esi
c000b7c7:	5f                   	pop    edi
c000b7c8:	c3                   	ret    
c000b7c9:	c7 44 24 20 9a 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc002319a
c000b7d1:	83 c4 10             	add    esp,0x10
c000b7d4:	5b                   	pop    ebx
c000b7d5:	5e                   	pop    esi
c000b7d6:	5f                   	pop    edi
c000b7d7:	e9 af 72 00 00       	jmp    c0012a8b <Krnl::panic(char const*)>

c000b7dc <VAS::freeAllocatedPages(unsigned long)>:
c000b7dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7e4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000b7e8:	74 09                	je     c000b7f3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000b7ea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b7ee:	e9 c6 fe ff ff       	jmp    c000b6b9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b7f3:	c7 44 24 04 e4 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fe4
c000b7fb:	e9 21 0f 00 00       	jmp    c000c721 <Dbg::kprintf(char const*, ...)>

c000b800 <VAS::virtualToPhysical(unsigned long)>:
c000b800:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b804:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b808:	e8 8d fe ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000b80d:	5a                   	pop    edx
c000b80e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b810:	59                   	pop    ecx
c000b811:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b816:	c3                   	ret    
c000b817:	90                   	nop

c000b818 <VAS::reflagRange(unsigned long, int, int, int)>:
c000b818:	55                   	push   ebp
c000b819:	57                   	push   edi
c000b81a:	56                   	push   esi
c000b81b:	53                   	push   ebx
c000b81c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b820:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000b824:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b828:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b82c:	85 db                	test   ebx,ebx
c000b82e:	7e 22                	jle    c000b852 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000b830:	c1 e3 0c             	shl    ebx,0xc
c000b833:	01 f3                	add    ebx,esi
c000b835:	56                   	push   esi
c000b836:	81 c6 00 10 00 00    	add    esi,0x1000
c000b83c:	55                   	push   ebp
c000b83d:	e8 58 fe ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000b842:	5a                   	pop    edx
c000b843:	59                   	pop    ecx
c000b844:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b846:	21 f9                	and    ecx,edi
c000b848:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000b84c:	39 f3                	cmp    ebx,esi
c000b84e:	89 08                	mov    DWORD PTR [eax],ecx
c000b850:	75 e3                	jne    c000b835 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000b852:	5b                   	pop    ebx
c000b853:	5e                   	pop    esi
c000b854:	5f                   	pop    edi
c000b855:	5d                   	pop    ebp
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <VAS::setToWriteCombining(unsigned long, int)>:
c000b858:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000b85d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b863:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000b86a:	75 01                	jne    c000b86d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000b86c:	c3                   	ret    
c000b86d:	68 80 00 00 00       	push   0x80
c000b872:	6a ff                	push   0xffffffff
c000b874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b880:	e8 93 ff ff ff       	call   c000b818 <VAS::reflagRange(unsigned long, int, int, int)>
c000b885:	83 c4 14             	add    esp,0x14
c000b888:	c3                   	ret    
c000b889:	90                   	nop

c000b88a <VAS::mapOtherVASIn(bool, VAS*)>:
c000b88a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b88f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b893:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000b896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b89a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000b89d:	19 c0                	sbb    eax,eax
c000b89f:	83 ca 03             	or     edx,0x3
c000b8a2:	83 e0 fc             	and    eax,0xfffffffc
c000b8a5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000b8ac:	0f 20 d8             	mov    eax,cr3
c000b8af:	0f 22 d8             	mov    cr3,eax
c000b8b2:	c3                   	ret    
c000b8b3:	90                   	nop

c000b8b4 <VAS::~VAS()>:
c000b8b4:	83 ec 2c             	sub    esp,0x2c
c000b8b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b8bf:	fa                   	cli    
c000b8c0:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000b8c5:	40                   	inc    eax
c000b8c6:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000b8cb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b8d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b8d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8d5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b8db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b8df:	6a 01                	push   0x1
c000b8e1:	50                   	push   eax
c000b8e2:	e8 a3 ff ff ff       	call   c000b88a <VAS::mapOtherVASIn(bool, VAS*)>
c000b8e7:	83 c4 0c             	add    esp,0xc
c000b8ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b8f2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000b8fa:	0f 8f d4 00 00 00    	jg     c000b9d4 <VAS::~VAS()+0x120>
c000b900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b907:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b90b:	c1 e2 02             	shl    edx,0x2
c000b90e:	01 d0                	add    eax,edx
c000b910:	8b 00                	mov    eax,DWORD PTR [eax]
c000b912:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b91a:	83 e0 01             	and    eax,0x1
c000b91d:	0f 84 a8 00 00 00    	je     c000b9cb <VAS::~VAS()+0x117>
c000b923:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b92b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000b933:	7f 72                	jg     c000b9a7 <VAS::~VAS()+0xf3>
c000b935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b939:	c1 e0 0a             	shl    eax,0xa
c000b93c:	89 c2                	mov    edx,eax
c000b93e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b942:	01 d0                	add    eax,edx
c000b944:	c1 e0 0c             	shl    eax,0xc
c000b947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b94b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b950:	8b 00                	mov    eax,DWORD PTR [eax]
c000b952:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b955:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b95f:	6a 01                	push   0x1
c000b961:	50                   	push   eax
c000b962:	e8 07 fd ff ff       	call   c000b66e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000b967:	83 c4 0c             	add    esp,0xc
c000b96a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b972:	8b 00                	mov    eax,DWORD PTR [eax]
c000b974:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b97c:	25 01 04 00 00       	and    eax,0x401
c000b981:	3d 01 04 00 00       	cmp    eax,0x401
c000b986:	75 19                	jne    c000b9a1 <VAS::~VAS()+0xed>
c000b988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b98c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b991:	83 ec 0c             	sub    esp,0xc
c000b994:	50                   	push   eax
c000b995:	e8 ab e1 ff ff       	call   c0009b45 <Phys::freePage(unsigned long)>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9a1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b9a5:	eb 84                	jmp    c000b92b <VAS::~VAS()+0x77>
c000b9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ab:	25 00 04 00 00       	and    eax,0x400
c000b9b0:	74 19                	je     c000b9cb <VAS::~VAS()+0x117>
c000b9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b9bb:	83 ec 0c             	sub    esp,0xc
c000b9be:	50                   	push   eax
c000b9bf:	e8 81 e1 ff ff       	call   c0009b45 <Phys::freePage(unsigned long)>
c000b9c4:	83 c4 10             	add    esp,0x10
c000b9c7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9cb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b9cf:	e9 1e ff ff ff       	jmp    c000b8f2 <VAS::~VAS()+0x3e>
c000b9d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9db:	83 ec 0c             	sub    esp,0xc
c000b9de:	50                   	push   eax
c000b9df:	e8 d5 fc ff ff       	call   c000b6b9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b9e4:	83 c4 10             	add    esp,0x10
c000b9e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	50                   	push   eax
c000b9f2:	e8 4e e1 ff ff       	call   c0009b45 <Phys::freePage(unsigned long)>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba02:	c1 e0 02             	shl    eax,0x2
c000ba05:	83 ec 08             	sub    esp,0x8
c000ba08:	50                   	push   eax
c000ba09:	68 08 30 02 c0       	push   0xc0023008
c000ba0e:	e8 0e 0d 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000ba1b:	48                   	dec    eax
c000ba1c:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000ba21:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000ba26:	85 c0                	test   eax,eax
c000ba28:	75 01                	jne    c000ba2b <VAS::~VAS()+0x177>
c000ba2a:	fb                   	sti    
c000ba2b:	90                   	nop
c000ba2c:	83 c4 2c             	add    esp,0x2c
c000ba2f:	c3                   	ret    

c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000ba30:	55                   	push   ebp
c000ba31:	57                   	push   edi
c000ba32:	56                   	push   esi
c000ba33:	53                   	push   ebx
c000ba34:	83 ec 1c             	sub    esp,0x1c
c000ba37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ba3b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ba3f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000ba45:	77 0b                	ja     c000ba52 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000ba47:	0f 20 d8             	mov    eax,cr3
c000ba4a:	0f 20 d8             	mov    eax,cr3
c000ba4d:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000ba50:	75 47                	jne    c000ba99 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000ba52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ba56:	09 d8                	or     eax,ebx
c000ba58:	a9 ff 0f 00 00       	test   eax,0xfff
c000ba5d:	75 57                	jne    c000bab6 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000ba5f:	89 de                	mov    esi,ebx
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c1 ee 16             	shr    esi,0x16
c000ba67:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000ba6e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000ba72:	74 54                	je     c000bac8 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000ba74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ba78:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000ba7e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ba82:	c1 e6 0c             	shl    esi,0xc
c000ba85:	c1 eb 0a             	shr    ebx,0xa
c000ba88:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000ba8e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000ba91:	83 c4 1c             	add    esp,0x1c
c000ba94:	5b                   	pop    ebx
c000ba95:	5e                   	pop    esi
c000ba96:	5f                   	pop    edi
c000ba97:	5d                   	pop    ebp
c000ba98:	c3                   	ret    
c000ba99:	83 ec 0c             	sub    esp,0xc
c000ba9c:	68 28 30 02 c0       	push   0xc0023028
c000baa1:	e8 7b 0c 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000baad:	09 d8                	or     eax,ebx
c000baaf:	a9 ff 0f 00 00       	test   eax,0xfff
c000bab4:	74 a9                	je     c000ba5f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000bab6:	83 ec 0c             	sub    esp,0xc
c000bab9:	68 90 30 02 c0       	push   0xc0023090
c000babe:	e8 c8 6f 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000bac3:	83 c4 10             	add    esp,0x10
c000bac6:	eb 97                	jmp    c000ba5f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000bac8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bacc:	e8 f7 e0 ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000bad1:	83 ec 0c             	sub    esp,0xc
c000bad4:	89 c5                	mov    ebp,eax
c000bad6:	8b 0d 34 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026534
c000badc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bae0:	6a 01                	push   0x1
c000bae2:	e8 de f8 ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c000bae7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000baee:	6a 01                	push   0x1
c000baf0:	50                   	push   eax
c000baf1:	55                   	push   ebp
c000baf2:	81 cd 07 04 00 00    	or     ebp,0x407
c000baf8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bafc:	51                   	push   ecx
c000bafd:	e8 26 02 00 00       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bb02:	83 c4 1c             	add    esp,0x1c
c000bb05:	68 00 10 00 00       	push   0x1000
c000bb0a:	6a 00                	push   0x0
c000bb0c:	50                   	push   eax
c000bb0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb11:	e8 92 49 ff ff       	call   c00004a8 <memset>
c000bb16:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bb1a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bb1d:	e8 97 fb ff ff       	call   c000b6b9 <Virt::freeKernelVirtualPages(unsigned long)>
c000bb22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb26:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bb29:	83 c4 10             	add    esp,0x10
c000bb2c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000bb2f:	e9 40 ff ff ff       	jmp    c000ba74 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000bb34 <VAS::allocatePages(int, int)>:
c000bb34:	55                   	push   ebp
c000bb35:	57                   	push   edi
c000bb36:	56                   	push   esi
c000bb37:	53                   	push   ebx
c000bb38:	83 ec 1c             	sub    esp,0x1c
c000bb3b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bb3f:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000bb44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb4a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000bb50:	83 e0 01             	and    eax,0x1
c000bb53:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bb57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bb5b:	0f 85 cc 00 00 00    	jne    c000bc2d <VAS::allocatePages(int, int)+0xf9>
c000bb61:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bb64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bb68:	85 c0                	test   eax,eax
c000bb6a:	0f 84 a1 00 00 00    	je     c000bc11 <VAS::allocatePages(int, int)+0xdd>
c000bb70:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bb74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bb78:	c1 e6 0c             	shl    esi,0xc
c000bb7b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bb7f:	85 c0                	test   eax,eax
c000bb81:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bb84:	7e 33                	jle    c000bbb9 <VAS::allocatePages(int, int)+0x85>
c000bb86:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb8a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bb8e:	81 cd 00 04 00 00    	or     ebp,0x400
c000bb94:	e8 2f e0 ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000bb99:	55                   	push   ebp
c000bb9a:	53                   	push   ebx
c000bb9b:	50                   	push   eax
c000bb9c:	57                   	push   edi
c000bb9d:	e8 8e fe ff ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bba2:	83 c4 10             	add    esp,0x10
c000bba5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bbaa:	74 03                	je     c000bbaf <VAS::allocatePages(int, int)+0x7b>
c000bbac:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bbaf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bbb5:	39 de                	cmp    esi,ebx
c000bbb7:	75 db                	jne    c000bb94 <VAS::allocatePages(int, int)+0x60>
c000bbb9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bbbe:	75 12                	jne    c000bbd2 <VAS::allocatePages(int, int)+0x9e>
c000bbc0:	0f 20 d8             	mov    eax,cr3
c000bbc3:	0f 22 d8             	mov    cr3,eax
c000bbc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbca:	83 c4 1c             	add    esp,0x1c
c000bbcd:	5b                   	pop    ebx
c000bbce:	5e                   	pop    esi
c000bbcf:	5f                   	pop    edi
c000bbd0:	5d                   	pop    ebp
c000bbd1:	c3                   	ret    
c000bbd2:	c1 ee 0a             	shr    esi,0xa
c000bbd5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bbd9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bbdf:	c1 eb 0a             	shr    ebx,0xa
c000bbe2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bbe8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bbee:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bbf4:	39 c3                	cmp    ebx,eax
c000bbf6:	77 ce                	ja     c000bbc6 <VAS::allocatePages(int, int)+0x92>
c000bbf8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bbfb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc01:	39 d8                	cmp    eax,ebx
c000bc03:	73 f3                	jae    c000bbf8 <VAS::allocatePages(int, int)+0xc4>
c000bc05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc09:	83 c4 1c             	add    esp,0x1c
c000bc0c:	5b                   	pop    ebx
c000bc0d:	5e                   	pop    esi
c000bc0e:	5f                   	pop    edi
c000bc0f:	5d                   	pop    ebp
c000bc10:	c3                   	ret    
c000bc11:	83 ec 0c             	sub    esp,0xc
c000bc14:	68 b4 30 02 c0       	push   0xc00230b4
c000bc19:	e8 6d 6e 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000bc1e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bc21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bc25:	83 c4 10             	add    esp,0x10
c000bc28:	e9 43 ff ff ff       	jmp    c000bb70 <VAS::allocatePages(int, int)+0x3c>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bc34:	e8 8c f7 ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c000bc39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bc3d:	83 c4 10             	add    esp,0x10
c000bc40:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bc45:	0f 87 9b 00 00 00    	ja     c000bce6 <VAS::allocatePages(int, int)+0x1b2>
c000bc4b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bc4f:	85 d2                	test   edx,edx
c000bc51:	7e 3c                	jle    c000bc8f <VAS::allocatePages(int, int)+0x15b>
c000bc53:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bc57:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bc5b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc5f:	c1 e5 0c             	shl    ebp,0xc
c000bc62:	81 ce 00 04 00 00    	or     esi,0x400
c000bc68:	01 dd                	add    ebp,ebx
c000bc6a:	e8 59 df ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000bc6f:	56                   	push   esi
c000bc70:	53                   	push   ebx
c000bc71:	50                   	push   eax
c000bc72:	57                   	push   edi
c000bc73:	e8 b8 fd ff ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bc78:	83 c4 10             	add    esp,0x10
c000bc7b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc80:	74 03                	je     c000bc85 <VAS::allocatePages(int, int)+0x151>
c000bc82:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc85:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc8b:	39 dd                	cmp    ebp,ebx
c000bc8d:	75 db                	jne    c000bc6a <VAS::allocatePages(int, int)+0x136>
c000bc8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc94:	0f 84 26 ff ff ff    	je     c000bbc0 <VAS::allocatePages(int, int)+0x8c>
c000bc9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bca2:	89 d3                	mov    ebx,edx
c000bca4:	c1 e0 0c             	shl    eax,0xc
c000bca7:	c1 eb 0a             	shr    ebx,0xa
c000bcaa:	01 d0                	add    eax,edx
c000bcac:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bcb2:	c1 e8 0a             	shr    eax,0xa
c000bcb5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bcbb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bcc0:	2d 00 00 40 00       	sub    eax,0x400000
c000bcc5:	39 c3                	cmp    ebx,eax
c000bcc7:	0f 87 f9 fe ff ff    	ja     c000bbc6 <VAS::allocatePages(int, int)+0x92>
c000bccd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bcd0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bcd6:	39 d8                	cmp    eax,ebx
c000bcd8:	73 f3                	jae    c000bccd <VAS::allocatePages(int, int)+0x199>
c000bcda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcde:	83 c4 1c             	add    esp,0x1c
c000bce1:	5b                   	pop    ebx
c000bce2:	5e                   	pop    esi
c000bce3:	5f                   	pop    edi
c000bce4:	5d                   	pop    ebp
c000bce5:	c3                   	ret    
c000bce6:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000bceb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bcf1:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000bcf8:	0f 84 4d ff ff ff    	je     c000bc4b <VAS::allocatePages(int, int)+0x117>
c000bcfe:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000bd06:	e9 40 ff ff ff       	jmp    c000bc4b <VAS::allocatePages(int, int)+0x117>
c000bd0b:	90                   	nop

c000bd0c <VAS::setCPUSpecific(unsigned long)>:
c000bd0c:	83 ec 0c             	sub    esp,0xc
c000bd0f:	6a 05                	push   0x5
c000bd11:	68 00 00 40 c2       	push   0xc2400000
c000bd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd1e:	e8 0d fd ff ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bd23:	83 c4 1c             	add    esp,0x1c
c000bd26:	c3                   	ret    
c000bd27:	90                   	nop

c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000bd28:	55                   	push   ebp
c000bd29:	57                   	push   edi
c000bd2a:	56                   	push   esi
c000bd2b:	53                   	push   ebx
c000bd2c:	83 ec 1c             	sub    esp,0x1c
c000bd2f:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000bd34:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd38:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bd3e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bd42:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000bd48:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000bd4c:	83 e0 01             	and    eax,0x1
c000bd4f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bd53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd57:	85 c0                	test   eax,eax
c000bd59:	7e 39                	jle    c000bd94 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000bd5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd5f:	89 f3                	mov    ebx,esi
c000bd61:	c1 e0 0c             	shl    eax,0xc
c000bd64:	01 f0                	add    eax,esi
c000bd66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd6a:	55                   	push   ebp
c000bd6b:	53                   	push   ebx
c000bd6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd70:	29 f0                	sub    eax,esi
c000bd72:	01 d8                	add    eax,ebx
c000bd74:	50                   	push   eax
c000bd75:	57                   	push   edi
c000bd76:	e8 b5 fc ff ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bd83:	74 03                	je     c000bd88 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000bd85:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bd88:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bd8e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000bd92:	75 d6                	jne    c000bd6a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000bd94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bd99:	75 10                	jne    c000bdab <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000bd9b:	0f 20 d8             	mov    eax,cr3
c000bd9e:	0f 22 d8             	mov    cr3,eax
c000bda1:	83 c4 1c             	add    esp,0x1c
c000bda4:	89 f0                	mov    eax,esi
c000bda6:	5b                   	pop    ebx
c000bda7:	5e                   	pop    esi
c000bda8:	5f                   	pop    edi
c000bda9:	5d                   	pop    ebp
c000bdaa:	c3                   	ret    
c000bdab:	89 f3                	mov    ebx,esi
c000bdad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bdb1:	c1 eb 0a             	shr    ebx,0xa
c000bdb4:	c1 e0 0c             	shl    eax,0xc
c000bdb7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bdbd:	01 f0                	add    eax,esi
c000bdbf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bdc5:	c1 e8 0a             	shr    eax,0xa
c000bdc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bdcd:	2d 00 00 40 00       	sub    eax,0x400000
c000bdd2:	39 c3                	cmp    ebx,eax
c000bdd4:	77 cb                	ja     c000bda1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000bdd6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bdd9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bddf:	39 d8                	cmp    eax,ebx
c000bde1:	73 f3                	jae    c000bdd6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000bde3:	83 c4 1c             	add    esp,0x1c
c000bde6:	89 f0                	mov    eax,esi
c000bde8:	5b                   	pop    ebx
c000bde9:	5e                   	pop    esi
c000bdea:	5f                   	pop    edi
c000bdeb:	5d                   	pop    ebp
c000bdec:	c3                   	ret    
c000bded:	90                   	nop

c000bdee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000bdee:	55                   	push   ebp
c000bdef:	57                   	push   edi
c000bdf0:	56                   	push   esi
c000bdf1:	53                   	push   ebx
c000bdf2:	83 ec 1c             	sub    esp,0x1c
c000bdf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdf9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bdfd:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000be01:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000be05:	a9 ff 0f 00 00       	test   eax,0xfff
c000be0a:	75 4a                	jne    c000be56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000be0c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000be10:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be13:	c1 eb 16             	shr    ebx,0x16
c000be16:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000be1d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000be21:	74 4d                	je     c000be70 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000be23:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000be2b:	c1 e8 0a             	shr    eax,0xa
c000be2e:	80 fa 01             	cmp    dl,0x1
c000be31:	19 d2                	sbb    edx,edx
c000be33:	c1 e3 0c             	shl    ebx,0xc
c000be36:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000be3a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000be40:	25 fc 0f 00 00       	and    eax,0xffc
c000be45:	01 d8                	add    eax,ebx
c000be47:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000be4e:	83 c4 1c             	add    esp,0x1c
c000be51:	5b                   	pop    ebx
c000be52:	5e                   	pop    esi
c000be53:	5f                   	pop    edi
c000be54:	5d                   	pop    ebp
c000be55:	c3                   	ret    
c000be56:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be5a:	83 ec 0c             	sub    esp,0xc
c000be5d:	68 e0 30 02 c0       	push   0xc00230e0
c000be62:	e8 24 6c 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be6e:	eb 9c                	jmp    c000be0c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000be70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be74:	e8 4f dd ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000be79:	83 ec 0c             	sub    esp,0xc
c000be7c:	89 c5                	mov    ebp,eax
c000be7e:	8b 0d 34 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026534
c000be84:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be88:	6a 01                	push   0x1
c000be8a:	e8 36 f5 ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c000be8f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be96:	6a 01                	push   0x1
c000be98:	50                   	push   eax
c000be99:	55                   	push   ebp
c000be9a:	81 cd 07 04 00 00    	or     ebp,0x407
c000bea0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bea4:	51                   	push   ecx
c000bea5:	e8 7e fe ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000beaa:	83 c4 1c             	add    esp,0x1c
c000bead:	68 00 10 00 00       	push   0x1000
c000beb2:	6a 00                	push   0x0
c000beb4:	50                   	push   eax
c000beb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000beb9:	e8 ea 45 ff ff       	call   c00004a8 <memset>
c000bebe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bec2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bec5:	e8 ef f7 ff ff       	call   c000b6b9 <Virt::freeKernelVirtualPages(unsigned long)>
c000beca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000becd:	83 c4 10             	add    esp,0x10
c000bed0:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000bed3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bed7:	e9 47 ff ff ff       	jmp    c000be23 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000bedc <VAS::VAS(bool)>:
c000bedc:	53                   	push   ebx
c000bedd:	83 ec 28             	sub    esp,0x28
c000bee0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bee4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000bee8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000beec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bef7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000befe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf02:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000bf06:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000bf09:	e8 ba dc ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000bf0e:	89 c2                	mov    edx,eax
c000bf10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf14:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000bf17:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c000bf1d:	83 ec 0c             	sub    esp,0xc
c000bf20:	6a 01                	push   0x1
c000bf22:	e8 9e f4 ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c000bf27:	83 c4 10             	add    esp,0x10
c000bf2a:	89 c2                	mov    edx,eax
c000bf2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf30:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf33:	83 ec 0c             	sub    esp,0xc
c000bf36:	6a 03                	push   0x3
c000bf38:	6a 01                	push   0x1
c000bf3a:	52                   	push   edx
c000bf3b:	50                   	push   eax
c000bf3c:	53                   	push   ebx
c000bf3d:	e8 e6 fd ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bf42:	83 c4 20             	add    esp,0x20
c000bf45:	89 c2                	mov    edx,eax
c000bf47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf4b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000bf4e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf56:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000bf5e:	7f 1c                	jg     c000bf7c <VAS::VAS(bool)+0xa0>
c000bf60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf6b:	c1 e2 02             	shl    edx,0x2
c000bf6e:	01 d0                	add    eax,edx
c000bf70:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000bf76:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf7a:	eb da                	jmp    c000bf56 <VAS::VAS(bool)+0x7a>
c000bf7c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000bf84:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000bf8c:	7f 7a                	jg     c000c008 <VAS::VAS(bool)+0x12c>
c000bf8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf92:	2d 00 02 00 00       	sub    eax,0x200
c000bf97:	c1 e0 0c             	shl    eax,0xc
c000bf9a:	83 c8 03             	or     eax,0x3
c000bf9d:	89 c2                	mov    edx,eax
c000bf9f:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000bfa4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfaa:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000bfb0:	83 e0 10             	and    eax,0x10
c000bfb3:	84 c0                	test   al,al
c000bfb5:	74 07                	je     c000bfbe <VAS::VAS(bool)+0xe2>
c000bfb7:	b8 00 01 00 00       	mov    eax,0x100
c000bfbc:	eb 05                	jmp    c000bfc3 <VAS::VAS(bool)+0xe7>
c000bfbe:	b8 00 00 00 00       	mov    eax,0x0
c000bfc3:	09 d0                	or     eax,edx
c000bfc5:	89 c1                	mov    ecx,eax
c000bfc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bfce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bfd2:	c1 e2 02             	shl    edx,0x2
c000bfd5:	01 d0                	add    eax,edx
c000bfd7:	89 ca                	mov    edx,ecx
c000bfd9:	89 10                	mov    DWORD PTR [eax],edx
c000bfdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfdf:	2d 40 03 00 00       	sub    eax,0x340
c000bfe4:	83 f8 7f             	cmp    eax,0x7f
c000bfe7:	77 16                	ja     c000bfff <VAS::VAS(bool)+0x123>
c000bfe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bff0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bff4:	c1 e2 02             	shl    edx,0x2
c000bff7:	01 d0                	add    eax,edx
c000bff9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000bfff:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c003:	e9 7c ff ff ff       	jmp    c000bf84 <VAS::VAS(bool)+0xa8>
c000c008:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c00d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c013:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c019:	83 e0 10             	and    eax,0x10
c000c01c:	84 c0                	test   al,al
c000c01e:	74 07                	je     c000c027 <VAS::VAS(bool)+0x14b>
c000c020:	b8 03 41 00 00       	mov    eax,0x4103
c000c025:	eb 05                	jmp    c000c02c <VAS::VAS(bool)+0x150>
c000c027:	b8 03 40 00 00       	mov    eax,0x4003
c000c02c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c030:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c033:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c039:	89 02                	mov    DWORD PTR [edx],eax
c000c03b:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c040:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c046:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c04c:	83 ec 08             	sub    esp,0x8
c000c04f:	50                   	push   eax
c000c050:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c054:	e8 b3 fc ff ff       	call   c000bd0c <VAS::setCPUSpecific(unsigned long)>
c000c059:	83 c4 10             	add    esp,0x10
c000c05c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c060:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c063:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c068:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c06e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c074:	83 e0 10             	and    eax,0x10
c000c077:	84 c0                	test   al,al
c000c079:	74 07                	je     c000c082 <VAS::VAS(bool)+0x1a6>
c000c07b:	b8 00 01 00 00       	mov    eax,0x100
c000c080:	eb 05                	jmp    c000c087 <VAS::VAS(bool)+0x1ab>
c000c082:	b8 00 00 00 00       	mov    eax,0x0
c000c087:	09 c2                	or     edx,eax
c000c089:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c08d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c090:	05 fc 0f 00 00       	add    eax,0xffc
c000c095:	83 ca 03             	or     edx,0x3
c000c098:	89 10                	mov    DWORD PTR [eax],edx
c000c09a:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c09f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0a5:	83 ec 0c             	sub    esp,0xc
c000c0a8:	50                   	push   eax
c000c0a9:	e8 f0 1d 00 00       	call   c000de9e <Device::getName()>
c000c0ae:	83 c4 10             	add    esp,0x10
c000c0b1:	83 ec 08             	sub    esp,0x8
c000c0b4:	68 b4 31 02 c0       	push   0xc00231b4
c000c0b9:	50                   	push   eax
c000c0ba:	e8 31 45 ff ff       	call   c00005f0 <strcmp>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	0f 94 c0             	sete   al
c000c0c7:	84 c0                	test   al,al
c000c0c9:	0f 84 87 00 00 00    	je     c000c156 <VAS::VAS(bool)+0x27a>
c000c0cf:	fa                   	cli    
c000c0d0:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000c0d5:	40                   	inc    eax
c000c0d6:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000c0db:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c0e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0e6:	05 7c 09 00 00       	add    eax,0x97c
c000c0eb:	83 ec 0c             	sub    esp,0xc
c000c0ee:	50                   	push   eax
c000c0ef:	e8 92 d1 ff ff       	call   c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0fc:	89 c3                	mov    ebx,eax
c000c0fe:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c103:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c109:	05 7c 09 00 00       	add    eax,0x97c
c000c10e:	83 ec 0c             	sub    esp,0xc
c000c111:	50                   	push   eax
c000c112:	e8 6f d1 ff ff       	call   c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c117:	83 c4 10             	add    esp,0x10
c000c11a:	83 ec 08             	sub    esp,0x8
c000c11d:	50                   	push   eax
c000c11e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c122:	e8 73 f5 ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000c127:	83 c4 10             	add    esp,0x10
c000c12a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c12c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c131:	6a 11                	push   0x11
c000c133:	53                   	push   ebx
c000c134:	50                   	push   eax
c000c135:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c139:	e8 f2 f8 ff ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000c146:	48                   	dec    eax
c000c147:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000c14c:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000c151:	85 c0                	test   eax,eax
c000c153:	75 01                	jne    c000c156 <VAS::VAS(bool)+0x27a>
c000c155:	fb                   	sti    
c000c156:	90                   	nop
c000c157:	83 c4 28             	add    esp,0x28
c000c15a:	5b                   	pop    ebx
c000c15b:	c3                   	ret    

c000c15c <VAS::VAS()>:
c000c15c:	53                   	push   ebx
c000c15d:	83 ec 18             	sub    esp,0x18
c000c160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c164:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c16b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c16f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c17a:	a3 34 65 02 c0       	mov    ds:0xc0026534,eax
c000c17f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c183:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000c187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000c18e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c192:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000c199:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000c1a1:	83 ec 0c             	sub    esp,0xc
c000c1a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1a8:	e8 ea d5 ff ff       	call   c0009797 <malloc>
c000c1ad:	83 c4 10             	add    esp,0x10
c000c1b0:	89 c3                	mov    ebx,eax
c000c1b2:	83 ec 08             	sub    esp,0x8
c000c1b5:	6a 01                	push   0x1
c000c1b7:	53                   	push   ebx
c000c1b8:	e8 1f fd ff ff       	call   c000bedc <VAS::VAS(bool)>
c000c1bd:	83 c4 10             	add    esp,0x10
c000c1c0:	89 1d 2c 65 02 c0    	mov    DWORD PTR ds:0xc002652c,ebx
c000c1c6:	90                   	nop
c000c1c7:	83 c4 18             	add    esp,0x18
c000c1ca:	5b                   	pop    ebx
c000c1cb:	c3                   	ret    

c000c1cc <VAS::evict(unsigned long)>:
c000c1cc:	55                   	push   ebp
c000c1cd:	57                   	push   edi
c000c1ce:	56                   	push   esi
c000c1cf:	53                   	push   ebx
c000c1d0:	83 ec 1c             	sub    esp,0x1c
c000c1d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1d7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c1db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1df:	e8 22 f3 ff ff       	call   c000b506 <Virt::allocateSwapfilePage()>
c000c1e4:	89 c7                	mov    edi,eax
c000c1e6:	a1 4c 5b 02 c0       	mov    eax,ds:0xc0025b4c
c000c1eb:	85 c0                	test   eax,eax
c000c1ed:	7e 3d                	jle    c000c22c <VAS::evict(unsigned long)+0x60>
c000c1ef:	89 ee                	mov    esi,ebp
c000c1f1:	31 db                	xor    ebx,ebx
c000c1f3:	83 ec 0c             	sub    esp,0xc
c000c1f6:	57                   	push   edi
c000c1f7:	e8 f8 f2 ff ff       	call   c000b4f4 <Virt::swapIDToSector(unsigned long)>
c000c1fc:	89 34 24             	mov    DWORD PTR [esp],esi
c000c1ff:	01 d8                	add    eax,ebx
c000c201:	6a 01                	push   0x1
c000c203:	31 d2                	xor    edx,edx
c000c205:	43                   	inc    ebx
c000c206:	52                   	push   edx
c000c207:	81 c6 00 02 00 00    	add    esi,0x200
c000c20d:	50                   	push   eax
c000c20e:	0f be 05 58 5b 02 c0 	movsx  eax,BYTE PTR ds:0xc0025b58
c000c215:	ff 34 85 bc 88 02 c0 	push   DWORD PTR [eax*4-0x3ffd7744]
c000c21c:	e8 15 2d 00 00       	call   c000ef36 <LogicalDisk::write(unsigned long long, int, void*)>
c000c221:	83 c4 20             	add    esp,0x20
c000c224:	39 1d 4c 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b4c,ebx
c000c22a:	7f c7                	jg     c000c1f3 <VAS::evict(unsigned long)+0x27>
c000c22c:	83 ec 08             	sub    esp,0x8
c000c22f:	c1 e7 0b             	shl    edi,0xb
c000c232:	55                   	push   ebp
c000c233:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c237:	e8 5e f4 ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000c23c:	8b 10                	mov    edx,DWORD PTR [eax]
c000c23e:	89 d3                	mov    ebx,edx
c000c240:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c246:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c24c:	09 d7                	or     edi,edx
c000c24e:	89 38                	mov    DWORD PTR [eax],edi
c000c250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c253:	ff 05 28 65 02 c0    	inc    DWORD PTR ds:0xc0026528
c000c259:	e8 e7 d8 ff ff       	call   c0009b45 <Phys::freePage(unsigned long)>
c000c25e:	0f 20 d8             	mov    eax,cr3
c000c261:	0f 22 d8             	mov    cr3,eax
c000c264:	ff 35 28 65 02 c0    	push   DWORD PTR ds:0xc0026528
c000c26a:	55                   	push   ebp
c000c26b:	53                   	push   ebx
c000c26c:	68 04 31 02 c0       	push   0xc0023104
c000c271:	e8 ab 04 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c276:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000c27b:	c7 44 24 50 c2 31 02 c0 	mov    DWORD PTR [esp+0x50],0xc00231c2
c000c283:	8d 50 01             	lea    edx,[eax+0x1]
c000c286:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c28a:	89 15 24 65 02 c0    	mov    DWORD PTR ds:0xc0026524,edx
c000c290:	83 c4 3c             	add    esp,0x3c
c000c293:	5b                   	pop    ebx
c000c294:	5e                   	pop    esi
c000c295:	5f                   	pop    edi
c000c296:	5d                   	pop    ebp
c000c297:	e9 85 04 00 00       	jmp    c000c721 <Dbg::kprintf(char const*, ...)>

c000c29c <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c29c:	55                   	push   ebp
c000c29d:	57                   	push   edi
c000c29e:	56                   	push   esi
c000c29f:	53                   	push   ebx
c000c2a0:	83 ec 14             	sub    esp,0x14
c000c2a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a7:	68 d3 31 02 c0       	push   0xc00231d3
c000c2ac:	e8 70 04 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c2b1:	83 c4 10             	add    esp,0x10
c000c2b4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c2b8:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c2be:	74 20                	je     c000c2e0 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c2c0:	83 ec 08             	sub    esp,0x8
c000c2c3:	55                   	push   ebp
c000c2c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2c8:	e8 cd f3 ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000c2cd:	83 c4 10             	add    esp,0x10
c000c2d0:	89 c3                	mov    ebx,eax
c000c2d2:	85 c0                	test   eax,eax
c000c2d4:	74 0a                	je     c000c2e0 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c2d6:	8b 38                	mov    edi,DWORD PTR [eax]
c000c2d8:	f7 c7 01 00 00 00    	test   edi,0x1
c000c2de:	74 0a                	je     c000c2ea <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c2e0:	31 c0                	xor    eax,eax
c000c2e2:	83 c4 0c             	add    esp,0xc
c000c2e5:	5b                   	pop    ebx
c000c2e6:	5e                   	pop    esi
c000c2e7:	5f                   	pop    edi
c000c2e8:	5d                   	pop    ebp
c000c2e9:	c3                   	ret    
c000c2ea:	e8 d9 d8 ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000c2ef:	c1 ef 0b             	shr    edi,0xb
c000c2f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c2f4:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c2fa:	09 c2                	or     edx,eax
c000c2fc:	81 ca 01 08 00 00    	or     edx,0x801
c000c302:	89 13                	mov    DWORD PTR [ebx],edx
c000c304:	8b 0d 4c 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b4c
c000c30a:	85 c9                	test   ecx,ecx
c000c30c:	7e 3d                	jle    c000c34b <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c30e:	89 ee                	mov    esi,ebp
c000c310:	31 db                	xor    ebx,ebx
c000c312:	83 ec 0c             	sub    esp,0xc
c000c315:	57                   	push   edi
c000c316:	e8 d9 f1 ff ff       	call   c000b4f4 <Virt::swapIDToSector(unsigned long)>
c000c31b:	89 34 24             	mov    DWORD PTR [esp],esi
c000c31e:	01 d8                	add    eax,ebx
c000c320:	6a 01                	push   0x1
c000c322:	31 d2                	xor    edx,edx
c000c324:	43                   	inc    ebx
c000c325:	52                   	push   edx
c000c326:	81 c6 00 02 00 00    	add    esi,0x200
c000c32c:	50                   	push   eax
c000c32d:	0f be 05 58 5b 02 c0 	movsx  eax,BYTE PTR ds:0xc0025b58
c000c334:	ff 34 85 bc 88 02 c0 	push   DWORD PTR [eax*4-0x3ffd7744]
c000c33b:	e8 8a 2b 00 00       	call   c000eeca <LogicalDisk::read(unsigned long long, int, void*)>
c000c340:	83 c4 20             	add    esp,0x20
c000c343:	39 1d 4c 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b4c,ebx
c000c349:	7f c7                	jg     c000c312 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c34b:	a1 28 65 02 c0       	mov    eax,ds:0xc0026528
c000c350:	48                   	dec    eax
c000c351:	52                   	push   edx
c000c352:	a3 28 65 02 c0       	mov    ds:0xc0026528,eax
c000c357:	50                   	push   eax
c000c358:	55                   	push   ebp
c000c359:	68 e6 31 02 c0       	push   0xc00231e6
c000c35e:	e8 be 03 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c363:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c366:	e8 6b f1 ff ff       	call   c000b4d6 <Virt::freeSwapfilePage(unsigned long)>
c000c36b:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	48                   	dec    eax
c000c374:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000c379:	85 c0                	test   eax,eax
c000c37b:	74 1d                	je     c000c39a <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c37d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c381:	25 ff 0f 00 00       	and    eax,0xfff
c000c386:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c38b:	77 10                	ja     c000c39d <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c38d:	0f 20 d8             	mov    eax,cr3
c000c390:	0f 22 d8             	mov    cr3,eax
c000c393:	b0 01                	mov    al,0x1
c000c395:	e9 48 ff ff ff       	jmp    c000c2e2 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c39a:	fb                   	sti    
c000c39b:	eb e0                	jmp    c000c37d <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c39d:	83 ec 0c             	sub    esp,0xc
c000c3a0:	68 fb 31 02 c0       	push   0xc00231fb
c000c3a5:	e8 77 03 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c3aa:	83 c4 10             	add    esp,0x10
c000c3ad:	eb de                	jmp    c000c38d <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c3af:	90                   	nop

c000c3b0 <VAS::scanForEviction()>:
c000c3b0:	57                   	push   edi
c000c3b1:	31 ff                	xor    edi,edi
c000c3b3:	56                   	push   esi
c000c3b4:	53                   	push   ebx
c000c3b5:	83 ec 10             	sub    esp,0x10
c000c3b8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c3bc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c3bf:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c3c5:	75 0e                	jne    c000c3d5 <VAS::scanForEviction()+0x25>
c000c3c7:	89 da                	mov    edx,ebx
c000c3c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c3cc:	c1 ea 16             	shr    edx,0x16
c000c3cf:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c3d3:	74 4e                	je     c000c423 <VAS::scanForEviction()+0x73>
c000c3d5:	53                   	push   ebx
c000c3d6:	56                   	push   esi
c000c3d7:	e8 be f2 ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000c3dc:	5a                   	pop    edx
c000c3dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000c3df:	59                   	pop    ecx
c000c3e0:	89 d1                	mov    ecx,edx
c000c3e2:	81 e1 01 08 00 00    	and    ecx,0x801
c000c3e8:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c3ee:	74 3e                	je     c000c42e <VAS::scanForEviction()+0x7e>
c000c3f0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3f6:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c3fc:	76 2b                	jbe    c000c429 <VAS::scanForEviction()+0x79>
c000c3fe:	47                   	inc    edi
c000c3ff:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c406:	83 ff 03             	cmp    edi,0x3
c000c409:	74 32                	je     c000c43d <VAS::scanForEviction()+0x8d>
c000c40b:	31 db                	xor    ebx,ebx
c000c40d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c413:	75 c0                	jne    c000c3d5 <VAS::scanForEviction()+0x25>
c000c415:	89 da                	mov    edx,ebx
c000c417:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c41a:	c1 ea 16             	shr    edx,0x16
c000c41d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c421:	75 b2                	jne    c000c3d5 <VAS::scanForEviction()+0x25>
c000c423:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c429:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c42c:	eb 91                	jmp    c000c3bf <VAS::scanForEviction()+0xf>
c000c42e:	f6 c2 20             	test   dl,0x20
c000c431:	74 13                	je     c000c446 <VAS::scanForEviction()+0x96>
c000c433:	83 e2 df             	and    edx,0xffffffdf
c000c436:	89 10                	mov    DWORD PTR [eax],edx
c000c438:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c43b:	eb b3                	jmp    c000c3f0 <VAS::scanForEviction()+0x40>
c000c43d:	83 c4 10             	add    esp,0x10
c000c440:	31 c0                	xor    eax,eax
c000c442:	5b                   	pop    ebx
c000c443:	5e                   	pop    esi
c000c444:	5f                   	pop    edi
c000c445:	c3                   	ret    
c000c446:	83 ec 08             	sub    esp,0x8
c000c449:	89 d0                	mov    eax,edx
c000c44b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c450:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c454:	53                   	push   ebx
c000c455:	68 0b 32 02 c0       	push   0xc002320b
c000c45a:	e8 c2 02 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c45f:	58                   	pop    eax
c000c460:	5a                   	pop    edx
c000c461:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c464:	56                   	push   esi
c000c465:	e8 62 fd ff ff       	call   c000c1cc <VAS::evict(unsigned long)>
c000c46a:	59                   	pop    ecx
c000c46b:	5b                   	pop    ebx
c000c46c:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c46f:	68 1f 32 02 c0       	push   0xc002321f
c000c474:	e8 a8 02 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c479:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c480:	83 c4 10             	add    esp,0x10
c000c483:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c487:	83 c4 10             	add    esp,0x10
c000c48a:	5b                   	pop    ebx
c000c48b:	5e                   	pop    esi
c000c48c:	5f                   	pop    edi
c000c48d:	c3                   	ret    

c000c48e <mapVASFirstTime>:
c000c48e:	55                   	push   ebp
c000c48f:	57                   	push   edi
c000c490:	56                   	push   esi
c000c491:	53                   	push   ebx
c000c492:	83 ec 0c             	sub    esp,0xc
c000c495:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c49a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c49d:	4a                   	dec    edx
c000c49e:	0f 84 fe 00 00 00    	je     c000c5a2 <mapVASFirstTime+0x114>
c000c4a4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c4a7:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c4aa:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c4af:	c1 e5 15             	shl    ebp,0x15
c000c4b2:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c4b7:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c4bd:	29 eb                	sub    ebx,ebp
c000c4bf:	29 ef                	sub    edi,ebp
c000c4c1:	83 ec 08             	sub    esp,0x8
c000c4c4:	53                   	push   ebx
c000c4c5:	68 4b 32 02 c0       	push   0xc002324b
c000c4ca:	e8 52 02 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c4cf:	e8 f4 d6 ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000c4d4:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c4db:	6a 01                	push   0x1
c000c4dd:	53                   	push   ebx
c000c4de:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c4e4:	50                   	push   eax
c000c4e5:	56                   	push   esi
c000c4e6:	e8 3d f8 ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4eb:	83 c4 20             	add    esp,0x20
c000c4ee:	39 fb                	cmp    ebx,edi
c000c4f0:	75 cf                	jne    c000c4c1 <mapVASFirstTime+0x33>
c000c4f2:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c4f7:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c4fc:	29 eb                	sub    ebx,ebp
c000c4fe:	29 ef                	sub    edi,ebp
c000c500:	83 ec 08             	sub    esp,0x8
c000c503:	53                   	push   ebx
c000c504:	68 67 32 02 c0       	push   0xc0023267
c000c509:	e8 13 02 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c50e:	58                   	pop    eax
c000c50f:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c513:	5a                   	pop    edx
c000c514:	19 c0                	sbb    eax,eax
c000c516:	83 e0 04             	and    eax,0x4
c000c519:	05 03 04 00 00       	add    eax,0x403
c000c51e:	50                   	push   eax
c000c51f:	68 7b 32 02 c0       	push   0xc002327b
c000c524:	e8 f8 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c529:	e8 9a d6 ff ff       	call   c0009bc8 <Phys::allocatePage()>
c000c52e:	59                   	pop    ecx
c000c52f:	89 c5                	mov    ebp,eax
c000c531:	58                   	pop    eax
c000c532:	55                   	push   ebp
c000c533:	68 89 32 02 c0       	push   0xc0023289
c000c538:	e8 e4 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c53d:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c541:	19 d2                	sbb    edx,edx
c000c543:	83 e2 04             	and    edx,0x4
c000c546:	81 c2 03 04 00 00    	add    edx,0x403
c000c54c:	89 14 24             	mov    DWORD PTR [esp],edx
c000c54f:	6a 01                	push   0x1
c000c551:	53                   	push   ebx
c000c552:	55                   	push   ebp
c000c553:	56                   	push   esi
c000c554:	e8 cf f7 ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c559:	83 c4 18             	add    esp,0x18
c000c55c:	53                   	push   ebx
c000c55d:	56                   	push   esi
c000c55e:	e8 37 f1 ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c000c563:	5a                   	pop    edx
c000c564:	59                   	pop    ecx
c000c565:	ff 30                	push   DWORD PTR [eax]
c000c567:	68 a5 32 02 c0       	push   0xc00232a5
c000c56c:	e8 b0 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c571:	0f 20 d8             	mov    eax,cr3
c000c574:	83 c4 0c             	add    esp,0xc
c000c577:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c57d:	56                   	push   esi
c000c57e:	50                   	push   eax
c000c57f:	68 b0 32 02 c0       	push   0xc00232b0
c000c584:	e8 98 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c589:	83 c4 10             	add    esp,0x10
c000c58c:	39 df                	cmp    edi,ebx
c000c58e:	0f 85 6c ff ff ff    	jne    c000c500 <mapVASFirstTime+0x72>
c000c594:	0f 20 d8             	mov    eax,cr3
c000c597:	0f 22 d8             	mov    cr3,eax
c000c59a:	83 c4 0c             	add    esp,0xc
c000c59d:	5b                   	pop    ebx
c000c59e:	5e                   	pop    esi
c000c59f:	5f                   	pop    edi
c000c5a0:	5d                   	pop    ebp
c000c5a1:	c3                   	ret    
c000c5a2:	83 ec 0c             	sub    esp,0xc
c000c5a5:	68 32 32 02 c0       	push   0xc0023232
c000c5aa:	e8 72 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	83 c4 0c             	add    esp,0xc
c000c5b5:	5b                   	pop    ebx
c000c5b6:	5e                   	pop    esi
c000c5b7:	5f                   	pop    edi
c000c5b8:	5d                   	pop    ebp
c000c5b9:	c3                   	ret    

c000c5ba <__cxa_atexit>:
c000c5ba:	31 c0                	xor    eax,eax
c000c5bc:	c3                   	ret    

c000c5bd <__cxa_finalize>:
c000c5bd:	c3                   	ret    

c000c5be <__stack_chk_fail>:
c000c5be:	55                   	push   ebp
c000c5bf:	89 e5                	mov    ebp,esp
c000c5c1:	83 ec 14             	sub    esp,0x14
c000c5c4:	68 c8 32 02 c0       	push   0xc00232c8
c000c5c9:	e8 53 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c5ce:	58                   	pop    eax
c000c5cf:	5a                   	pop    edx
c000c5d0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c5d3:	68 18 33 02 c0       	push   0xc0023318
c000c5d8:	e8 44 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c5dd:	59                   	pop    ecx
c000c5de:	58                   	pop    eax
c000c5df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5e2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c5e5:	68 18 33 02 c0       	push   0xc0023318
c000c5ea:	e8 32 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c5ef:	5a                   	pop    edx
c000c5f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f3:	59                   	pop    ecx
c000c5f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5f6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c5f9:	68 18 33 02 c0       	push   0xc0023318
c000c5fe:	e8 1e 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c603:	5a                   	pop    edx
c000c604:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c607:	59                   	pop    ecx
c000c608:	8b 00                	mov    eax,DWORD PTR [eax]
c000c60a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c60c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c60f:	68 18 33 02 c0       	push   0xc0023318
c000c614:	e8 08 01 00 00       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000c619:	c7 04 24 20 33 02 c0 	mov    DWORD PTR [esp],0xc0023320
c000c620:	e8 66 64 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000c625:	83 c4 10             	add    esp,0x10
c000c628:	c9                   	leave  
c000c629:	c3                   	ret    

c000c62a <__cxa_pure_virtual>:
c000c62a:	83 ec 18             	sub    esp,0x18
c000c62d:	68 38 33 02 c0       	push   0xc0023338
c000c632:	e8 54 64 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000c637:	83 c4 1c             	add    esp,0x1c
c000c63a:	c3                   	ret    

c000c63b <operator new[](unsigned long)>:
c000c63b:	e9 57 d1 ff ff       	jmp    c0009797 <malloc>

c000c640 <operator delete(void*, unsigned long)>:
c000c640:	e9 72 d1 ff ff       	jmp    c00097b7 <rfree>

c000c645 <operator delete[](void*)>:
c000c645:	e9 6d d1 ff ff       	jmp    c00097b7 <rfree>

c000c64a <operator delete[](void*, unsigned long)>:
c000c64a:	e9 68 d1 ff ff       	jmp    c00097b7 <rfree>

c000c64f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c64f:	55                   	push   ebp
c000c650:	b9 11 00 00 00       	mov    ecx,0x11
c000c655:	57                   	push   edi
c000c656:	56                   	push   esi
c000c657:	be 1e 2e 02 c0       	mov    esi,0xc0022e1e
c000c65c:	53                   	push   ebx
c000c65d:	83 ec 20             	sub    esp,0x20
c000c660:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c664:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c668:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c66c:	fc                   	cld    
c000c66d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c66f:	89 ee                	mov    esi,ebp
c000c671:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c675:	eb 02                	jmp    c000c679 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c677:	89 c6                	mov    esi,eax
c000c679:	31 d2                	xor    edx,edx
c000c67b:	41                   	inc    ecx
c000c67c:	89 f0                	mov    eax,esi
c000c67e:	f7 f3                	div    ebx
c000c680:	39 de                	cmp    esi,ebx
c000c682:	73 f3                	jae    c000c677 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c684:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c687:	eb 02                	jmp    c000c68b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c689:	89 c5                	mov    ebp,eax
c000c68b:	31 d2                	xor    edx,edx
c000c68d:	49                   	dec    ecx
c000c68e:	89 e8                	mov    eax,ebp
c000c690:	f7 f3                	div    ebx
c000c692:	39 dd                	cmp    ebp,ebx
c000c694:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c698:	88 11                	mov    BYTE PTR [ecx],dl
c000c69a:	73 ed                	jae    c000c689 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c69c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c6a0:	83 c4 20             	add    esp,0x20
c000c6a3:	5b                   	pop    ebx
c000c6a4:	5e                   	pop    esi
c000c6a5:	5f                   	pop    edi
c000c6a6:	5d                   	pop    ebp
c000c6a7:	c3                   	ret    

c000c6a8 <Dbg::logc(char)>:
c000c6a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c6ac:	f6 05 60 64 02 c0 10 	test   BYTE PTR ds:0xc0026460,0x10
c000c6b3:	75 12                	jne    c000c6c7 <Dbg::logc(char)+0x1f>
c000c6b5:	ba fd 03 00 00       	mov    edx,0x3fd
c000c6ba:	ec                   	in     al,dx
c000c6bb:	a8 20                	test   al,0x20
c000c6bd:	74 fb                	je     c000c6ba <Dbg::logc(char)+0x12>
c000c6bf:	ba f8 03 00 00       	mov    edx,0x3f8
c000c6c4:	88 c8                	mov    al,cl
c000c6c6:	ee                   	out    dx,al
c000c6c7:	c3                   	ret    

c000c6c8 <Dbg::logs(char*)>:
c000c6c8:	53                   	push   ebx
c000c6c9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c6cd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c6d0:	84 c0                	test   al,al
c000c6d2:	74 0f                	je     c000c6e3 <Dbg::logs(char*)+0x1b>
c000c6d4:	50                   	push   eax
c000c6d5:	43                   	inc    ebx
c000c6d6:	e8 cd ff ff ff       	call   c000c6a8 <Dbg::logc(char)>
c000c6db:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c6de:	5a                   	pop    edx
c000c6df:	84 c0                	test   al,al
c000c6e1:	75 f1                	jne    c000c6d4 <Dbg::logs(char*)+0xc>
c000c6e3:	5b                   	pop    ebx
c000c6e4:	c3                   	ret    

c000c6e5 <Dbg::logWriteInt(unsigned int)>:
c000c6e5:	83 ec 10             	sub    esp,0x10
c000c6e8:	6a 0a                	push   0xa
c000c6ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c6ee:	50                   	push   eax
c000c6ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f3:	e8 57 ff ff ff       	call   c000c64f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c6f8:	50                   	push   eax
c000c6f9:	e8 ca ff ff ff       	call   c000c6c8 <Dbg::logs(char*)>
c000c6fe:	83 c4 20             	add    esp,0x20
c000c701:	c3                   	ret    

c000c702 <Dbg::logWriteIntBase(unsigned int, int)>:
c000c702:	83 ec 10             	sub    esp,0x10
c000c705:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c709:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c70d:	50                   	push   eax
c000c70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c712:	e8 38 ff ff ff       	call   c000c64f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c717:	50                   	push   eax
c000c718:	e8 ab ff ff ff       	call   c000c6c8 <Dbg::logs(char*)>
c000c71d:	83 c4 20             	add    esp,0x20
c000c720:	c3                   	ret    

c000c721 <Dbg::kprintf(char const*, ...)>:
c000c721:	55                   	push   ebp
c000c722:	57                   	push   edi
c000c723:	56                   	push   esi
c000c724:	53                   	push   ebx
c000c725:	83 ec 0c             	sub    esp,0xc
c000c728:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c72c:	f6 05 60 64 02 c0 10 	test   BYTE PTR ds:0xc0026460,0x10
c000c733:	74 08                	je     c000c73d <Dbg::kprintf(char const*, ...)+0x1c>
c000c735:	83 c4 0c             	add    esp,0xc
c000c738:	5b                   	pop    ebx
c000c739:	5e                   	pop    esi
c000c73a:	5f                   	pop    edi
c000c73b:	5d                   	pop    ebp
c000c73c:	c3                   	ret    
c000c73d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000c741:	31 db                	xor    ebx,ebx
c000c743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c747:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000c74a:	84 c0                	test   al,al
c000c74c:	74 e7                	je     c000c735 <Dbg::kprintf(char const*, ...)+0x14>
c000c74e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c751:	3c 25                	cmp    al,0x25
c000c753:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c756:	75 44                	jne    c000c79c <Dbg::kprintf(char const*, ...)+0x7b>
c000c758:	83 c3 02             	add    ebx,0x2
c000c75b:	8a 07                	mov    al,BYTE PTR [edi]
c000c75d:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000c760:	83 e8 25             	sub    eax,0x25
c000c763:	3c 53                	cmp    al,0x53
c000c765:	0f 87 c9 00 00 00    	ja     c000c834 <Dbg::kprintf(char const*, ...)+0x113>
c000c76b:	0f b6 c0             	movzx  eax,al
c000c76e:	ff 24 85 4c 33 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdccb4]
c000c775:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c779:	89 c8                	mov    eax,ecx
c000c77b:	83 c1 04             	add    ecx,0x4
c000c77e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c782:	ff 30                	push   DWORD PTR [eax]
c000c784:	e8 5c ff ff ff       	call   c000c6e5 <Dbg::logWriteInt(unsigned int)>
c000c789:	5f                   	pop    edi
c000c78a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000c78e:	84 c0                	test   al,al
c000c790:	74 a3                	je     c000c735 <Dbg::kprintf(char const*, ...)+0x14>
c000c792:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c795:	3c 25                	cmp    al,0x25
c000c797:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c79a:	74 bc                	je     c000c758 <Dbg::kprintf(char const*, ...)+0x37>
c000c79c:	50                   	push   eax
c000c79d:	89 eb                	mov    ebx,ebp
c000c79f:	e8 04 ff ff ff       	call   c000c6a8 <Dbg::logc(char)>
c000c7a4:	89 fd                	mov    ebp,edi
c000c7a6:	58                   	pop    eax
c000c7a7:	eb e1                	jmp    c000c78a <Dbg::kprintf(char const*, ...)+0x69>
c000c7a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c7ad:	89 c8                	mov    eax,ecx
c000c7af:	83 c1 04             	add    ecx,0x4
c000c7b2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c7b6:	ff 30                	push   DWORD PTR [eax]
c000c7b8:	e8 0b ff ff ff       	call   c000c6c8 <Dbg::logs(char*)>
c000c7bd:	58                   	pop    eax
c000c7be:	eb ca                	jmp    c000c78a <Dbg::kprintf(char const*, ...)+0x69>
c000c7c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7c4:	89 d0                	mov    eax,edx
c000c7c6:	83 c2 04             	add    edx,0x4
c000c7c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7cd:	ff 30                	push   DWORD PTR [eax]
c000c7cf:	e8 11 ff ff ff       	call   c000c6e5 <Dbg::logWriteInt(unsigned int)>
c000c7d4:	58                   	pop    eax
c000c7d5:	eb b3                	jmp    c000c78a <Dbg::kprintf(char const*, ...)+0x69>
c000c7d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7db:	89 d0                	mov    eax,edx
c000c7dd:	83 c2 04             	add    edx,0x4
c000c7e0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000c7e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7e7:	50                   	push   eax
c000c7e8:	e8 bb fe ff ff       	call   c000c6a8 <Dbg::logc(char)>
c000c7ed:	58                   	pop    eax
c000c7ee:	eb 9a                	jmp    c000c78a <Dbg::kprintf(char const*, ...)+0x69>
c000c7f0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c7f4:	89 c8                	mov    eax,ecx
c000c7f6:	83 c1 04             	add    ecx,0x4
c000c7f9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c7fd:	6a 10                	push   0x10
c000c7ff:	ff 30                	push   DWORD PTR [eax]
c000c801:	e8 fc fe ff ff       	call   c000c702 <Dbg::logWriteIntBase(unsigned int, int)>
c000c806:	59                   	pop    ecx
c000c807:	5f                   	pop    edi
c000c808:	eb 80                	jmp    c000c78a <Dbg::kprintf(char const*, ...)+0x69>
c000c80a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c80e:	89 d0                	mov    eax,edx
c000c810:	83 c2 08             	add    edx,0x8
c000c813:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c817:	6a 10                	push   0x10
c000c819:	ff 30                	push   DWORD PTR [eax]
c000c81b:	e8 e2 fe ff ff       	call   c000c702 <Dbg::logWriteIntBase(unsigned int, int)>
c000c820:	58                   	pop    eax
c000c821:	5a                   	pop    edx
c000c822:	e9 63 ff ff ff       	jmp    c000c78a <Dbg::kprintf(char const*, ...)+0x69>
c000c827:	6a 25                	push   0x25
c000c829:	e8 7a fe ff ff       	call   c000c6a8 <Dbg::logc(char)>
c000c82e:	58                   	pop    eax
c000c82f:	e9 56 ff ff ff       	jmp    c000c78a <Dbg::kprintf(char const*, ...)+0x69>
c000c834:	6a 25                	push   0x25
c000c836:	e8 6d fe ff ff       	call   c000c6a8 <Dbg::logc(char)>
c000c83b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000c83e:	50                   	push   eax
c000c83f:	e8 64 fe ff ff       	call   c000c6a8 <Dbg::logc(char)>
c000c844:	5a                   	pop    edx
c000c845:	59                   	pop    ecx
c000c846:	e9 3f ff ff ff       	jmp    c000c78a <Dbg::kprintf(char const*, ...)+0x69>
c000c84b:	90                   	nop

c000c84c <File::read(unsigned long long, void*, int*)>:
c000c84c:	53                   	push   ebx
c000c84d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c851:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c855:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c85c:	3c 19                	cmp    al,0x19
c000c85e:	77 35                	ja     c000c895 <File::read(unsigned long long, void*, int*)+0x49>
c000c860:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000c867:	85 c0                	test   eax,eax
c000c869:	74 2a                	je     c000c895 <File::read(unsigned long long, void*, int*)+0x49>
c000c86b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c871:	85 c0                	test   eax,eax
c000c873:	74 20                	je     c000c895 <File::read(unsigned long long, void*, int*)+0x49>
c000c875:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c879:	74 21                	je     c000c89c <File::read(unsigned long long, void*, int*)+0x50>
c000c87b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c87d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c881:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c887:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c88b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c88f:	5b                   	pop    ebx
c000c890:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000c893:	ff e0                	jmp    eax
c000c895:	b8 0b 00 00 00       	mov    eax,0xb
c000c89a:	eb 05                	jmp    c000c8a1 <File::read(unsigned long long, void*, int*)+0x55>
c000c89c:	b8 05 00 00 00       	mov    eax,0x5
c000c8a1:	5b                   	pop    ebx
c000c8a2:	c3                   	ret    
c000c8a3:	90                   	nop

c000c8a4 <File::write(unsigned long long, void*, int*)>:
c000c8a4:	53                   	push   ebx
c000c8a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c8ad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c8b4:	3c 19                	cmp    al,0x19
c000c8b6:	77 35                	ja     c000c8ed <File::write(unsigned long long, void*, int*)+0x49>
c000c8b8:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000c8bf:	85 c0                	test   eax,eax
c000c8c1:	74 2a                	je     c000c8ed <File::write(unsigned long long, void*, int*)+0x49>
c000c8c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c8c9:	85 c0                	test   eax,eax
c000c8cb:	74 20                	je     c000c8ed <File::write(unsigned long long, void*, int*)+0x49>
c000c8cd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c8d1:	74 21                	je     c000c8f4 <File::write(unsigned long long, void*, int*)+0x50>
c000c8d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c8d5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c8d9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c8df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8e7:	5b                   	pop    ebx
c000c8e8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000c8eb:	ff e0                	jmp    eax
c000c8ed:	b8 0b 00 00 00       	mov    eax,0xb
c000c8f2:	eb 05                	jmp    c000c8f9 <File::write(unsigned long long, void*, int*)+0x55>
c000c8f4:	b8 05 00 00 00       	mov    eax,0x5
c000c8f9:	5b                   	pop    ebx
c000c8fa:	c3                   	ret    
c000c8fb:	90                   	nop

c000c8fc <Directory::read(unsigned long long, void*, int*)>:
c000c8fc:	53                   	push   ebx
c000c8fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c901:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c905:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c90c:	3c 19                	cmp    al,0x19
c000c90e:	77 35                	ja     c000c945 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c910:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000c917:	85 c0                	test   eax,eax
c000c919:	74 2a                	je     c000c945 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c91b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c921:	85 c0                	test   eax,eax
c000c923:	74 20                	je     c000c945 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c925:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c929:	74 21                	je     c000c94c <Directory::read(unsigned long long, void*, int*)+0x50>
c000c92b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c92d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c931:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c937:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c93b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c93f:	5b                   	pop    ebx
c000c940:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000c943:	ff e0                	jmp    eax
c000c945:	b8 0b 00 00 00       	mov    eax,0xb
c000c94a:	eb 05                	jmp    c000c951 <Directory::read(unsigned long long, void*, int*)+0x55>
c000c94c:	b8 05 00 00 00       	mov    eax,0x5
c000c951:	5b                   	pop    ebx
c000c952:	c3                   	ret    
c000c953:	90                   	nop

c000c954 <Directory::write(unsigned long long, void*, int*)>:
c000c954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c958:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000c95f:	b8 0b 00 00 00       	mov    eax,0xb
c000c964:	80 fa 19             	cmp    dl,0x19
c000c967:	77 18                	ja     c000c981 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c969:	8b 14 95 c0 89 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7640]
c000c970:	85 d2                	test   edx,edx
c000c972:	74 0d                	je     c000c981 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c974:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000c97b:	19 c0                	sbb    eax,eax
c000c97d:	83 e0 0a             	and    eax,0xa
c000c980:	40                   	inc    eax
c000c981:	c3                   	ret    

c000c982 <File::isAtty()>:
c000c982:	31 c0                	xor    eax,eax
c000c984:	c3                   	ret    
c000c985:	90                   	nop

c000c986 <Directory::isAtty()>:
c000c986:	31 c0                	xor    eax,eax
c000c988:	c3                   	ret    
c000c989:	90                   	nop

c000c98a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000c98a:	b8 0a 00 00 00       	mov    eax,0xa
c000c98f:	c3                   	ret    

c000c990 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000c990:	b8 0a 00 00 00       	mov    eax,0xa
c000c995:	c3                   	ret    

c000c996 <Filesystem::allocateSwapfile(char const*, int)>:
c000c996:	31 c0                	xor    eax,eax
c000c998:	31 d2                	xor    edx,edx
c000c99a:	c3                   	ret    
c000c99b:	90                   	nop

c000c99c <File::~File()>:
c000c99c:	83 ec 0c             	sub    esp,0xc
c000c99f:	ba 88 35 02 c0       	mov    edx,0xc0023588
c000c9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a8:	89 10                	mov    DWORD PTR [eax],edx
c000c9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ae:	83 ec 0c             	sub    esp,0xc
c000c9b1:	50                   	push   eax
c000c9b2:	e8 ad e7 ff ff       	call   c000b164 <UnixFile::~UnixFile()>
c000c9b7:	83 c4 10             	add    esp,0x10
c000c9ba:	90                   	nop
c000c9bb:	83 c4 0c             	add    esp,0xc
c000c9be:	c3                   	ret    
c000c9bf:	90                   	nop

c000c9c0 <File::~File()>:
c000c9c0:	83 ec 0c             	sub    esp,0xc
c000c9c3:	83 ec 0c             	sub    esp,0xc
c000c9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ca:	e8 cd ff ff ff       	call   c000c99c <File::~File()>
c000c9cf:	83 c4 10             	add    esp,0x10
c000c9d2:	83 ec 08             	sub    esp,0x8
c000c9d5:	68 14 01 00 00       	push   0x114
c000c9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9de:	e8 5d fc ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000c9e3:	83 c4 10             	add    esp,0x10
c000c9e6:	83 c4 0c             	add    esp,0xc
c000c9e9:	c3                   	ret    

c000c9ea <Directory::~Directory()>:
c000c9ea:	83 ec 0c             	sub    esp,0xc
c000c9ed:	ba a4 35 02 c0       	mov    edx,0xc00235a4
c000c9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f6:	89 10                	mov    DWORD PTR [eax],edx
c000c9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fc:	83 ec 0c             	sub    esp,0xc
c000c9ff:	50                   	push   eax
c000ca00:	e8 5f e7 ff ff       	call   c000b164 <UnixFile::~UnixFile()>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	90                   	nop
c000ca09:	83 c4 0c             	add    esp,0xc
c000ca0c:	c3                   	ret    
c000ca0d:	90                   	nop

c000ca0e <Directory::~Directory()>:
c000ca0e:	83 ec 0c             	sub    esp,0xc
c000ca11:	83 ec 0c             	sub    esp,0xc
c000ca14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca18:	e8 cd ff ff ff       	call   c000c9ea <Directory::~Directory()>
c000ca1d:	83 c4 10             	add    esp,0x10
c000ca20:	83 ec 08             	sub    esp,0x8
c000ca23:	68 14 01 00 00       	push   0x114
c000ca28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2c:	e8 0f fc ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000ca31:	83 c4 10             	add    esp,0x10
c000ca34:	83 c4 0c             	add    esp,0xc
c000ca37:	c3                   	ret    

c000ca38 <Filesystem::Filesystem()>:
c000ca38:	ba 20 35 02 c0       	mov    edx,0xc0023520
c000ca3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca41:	89 10                	mov    DWORD PTR [eax],edx
c000ca43:	8b 15 38 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026538
c000ca49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ca50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca54:	a3 38 65 02 c0       	mov    ds:0xc0026538,eax
c000ca59:	90                   	nop
c000ca5a:	c3                   	ret    
c000ca5b:	90                   	nop

c000ca5c <Filesystem::~Filesystem()>:
c000ca5c:	ba 20 35 02 c0       	mov    edx,0xc0023520
c000ca61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca65:	89 10                	mov    DWORD PTR [eax],edx
c000ca67:	90                   	nop
c000ca68:	c3                   	ret    
c000ca69:	90                   	nop

c000ca6a <Filesystem::~Filesystem()>:
c000ca6a:	83 ec 0c             	sub    esp,0xc
c000ca6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ca71:	e8 e6 ff ff ff       	call   c000ca5c <Filesystem::~Filesystem()>
c000ca76:	83 c4 04             	add    esp,0x4
c000ca79:	83 ec 08             	sub    esp,0x8
c000ca7c:	6a 08                	push   0x8
c000ca7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca82:	e8 b9 fb ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000ca87:	83 c4 10             	add    esp,0x10
c000ca8a:	83 c4 0c             	add    esp,0xc
c000ca8d:	c3                   	ret    

c000ca8e <Fs::getcwd(Process*, char*, int)>:
c000ca8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca92:	31 c0                	xor    eax,eax
c000ca94:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca97:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ca9b:	7d 15                	jge    c000cab2 <Fs::getcwd(Process*, char*, int)+0x24>
c000ca9d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000caa1:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000caa8:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000caab:	84 c9                	test   cl,cl
c000caad:	74 06                	je     c000cab5 <Fs::getcwd(Process*, char*, int)+0x27>
c000caaf:	40                   	inc    eax
c000cab0:	eb e2                	jmp    c000ca94 <Fs::getcwd(Process*, char*, int)+0x6>
c000cab2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cab5:	31 c0                	xor    eax,eax
c000cab7:	c3                   	ret    

c000cab8 <Fs::initVFS()>:
c000cab8:	83 ec 18             	sub    esp,0x18
c000cabb:	6a 08                	push   0x8
c000cabd:	e8 d5 cc ff ff       	call   c0009797 <malloc>
c000cac2:	89 04 24             	mov    DWORD PTR [esp],eax
c000cac5:	e8 f2 e5 00 00       	call   c001b0bc <FAT::FAT()>
c000caca:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cad1:	e8 c1 cc ff ff       	call   c0009797 <malloc>
c000cad6:	89 04 24             	mov    DWORD PTR [esp],eax
c000cad9:	e8 6e f8 00 00       	call   c001c34c <ISO9660::ISO9660()>
c000cade:	83 c4 1c             	add    esp,0x1c
c000cae1:	c3                   	ret    

c000cae2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000cae2:	55                   	push   ebp
c000cae3:	57                   	push   edi
c000cae4:	56                   	push   esi
c000cae5:	53                   	push   ebx
c000cae6:	81 ec 10 04 00 00    	sub    esp,0x410
c000caec:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000caf3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000cafa:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000cb01:	68 00 04 00 00       	push   0x400
c000cb06:	6a 00                	push   0x0
c000cb08:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000cb0c:	56                   	push   esi
c000cb0d:	e8 96 39 ff ff       	call   c00004a8 <memset>
c000cb12:	83 c4 10             	add    esp,0x10
c000cb15:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000cb19:	75 0b                	jne    c000cb26 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000cb1b:	50                   	push   eax
c000cb1c:	50                   	push   eax
c000cb1d:	57                   	push   edi
c000cb1e:	56                   	push   esi
c000cb1f:	e8 40 3a ff ff       	call   c0000564 <strcpy>
c000cb24:	eb 41                	jmp    c000cb67 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000cb26:	8a 07                	mov    al,BYTE PTR [edi]
c000cb28:	3c 5c                	cmp    al,0x5c
c000cb2a:	74 04                	je     c000cb30 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000cb2c:	3c 2f                	cmp    al,0x2f
c000cb2e:	75 18                	jne    c000cb48 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000cb30:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000cb33:	3c 60                	cmp    al,0x60
c000cb35:	7e 03                	jle    c000cb3a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000cb37:	83 e8 20             	sub    eax,0x20
c000cb3a:	88 04 24             	mov    BYTE PTR [esp],al
c000cb3d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cb44:	50                   	push   eax
c000cb45:	50                   	push   eax
c000cb46:	eb 18                	jmp    c000cb60 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000cb48:	50                   	push   eax
c000cb49:	50                   	push   eax
c000cb4a:	55                   	push   ebp
c000cb4b:	56                   	push   esi
c000cb4c:	e8 13 3a ff ff       	call   c0000564 <strcpy>
c000cb51:	5a                   	pop    edx
c000cb52:	59                   	pop    ecx
c000cb53:	68 33 46 02 c0       	push   0xc0024633
c000cb58:	56                   	push   esi
c000cb59:	e8 46 3b ff ff       	call   c00006a4 <strcat>
c000cb5e:	5d                   	pop    ebp
c000cb5f:	58                   	pop    eax
c000cb60:	57                   	push   edi
c000cb61:	56                   	push   esi
c000cb62:	e8 3d 3b ff ff       	call   c00006a4 <strcat>
c000cb67:	83 c4 10             	add    esp,0x10
c000cb6a:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cb6d:	3c 60                	cmp    al,0x60
c000cb6f:	7e 03                	jle    c000cb74 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cb71:	83 e8 20             	sub    eax,0x20
c000cb74:	88 04 24             	mov    BYTE PTR [esp],al
c000cb77:	88 03                	mov    BYTE PTR [ebx],al
c000cb79:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cb80:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cb86:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cb8a:	bf 03 00 00 00       	mov    edi,0x3
c000cb8f:	b8 03 00 00 00       	mov    eax,0x3
c000cb94:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cb97:	84 d2                	test   dl,dl
c000cb99:	0f 84 91 00 00 00    	je     c000cc30 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cb9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cba2:	80 fa 5c             	cmp    dl,0x5c
c000cba5:	74 05                	je     c000cbac <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cba7:	80 fa 2f             	cmp    dl,0x2f
c000cbaa:	75 12                	jne    c000cbbe <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cbac:	89 c5                	mov    ebp,eax
c000cbae:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cbb3:	74 09                	je     c000cbbe <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cbb5:	40                   	inc    eax
c000cbb6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cbba:	89 cf                	mov    edi,ecx
c000cbbc:	eb d6                	jmp    c000cb94 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cbbe:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cbc3:	75 5b                	jne    c000cc20 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cbc5:	80 fa 2e             	cmp    dl,0x2e
c000cbc8:	75 56                	jne    c000cc20 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cbca:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cbce:	74 19                	je     c000cbe9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cbd0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cbd5:	74 53                	je     c000cc2a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cbd7:	89 f9                	mov    ecx,edi
c000cbd9:	41                   	inc    ecx
c000cbda:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cbdd:	80 fa 2f             	cmp    dl,0x2f
c000cbe0:	74 f7                	je     c000cbd9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cbe2:	80 fa 5c             	cmp    dl,0x5c
c000cbe5:	74 f2                	je     c000cbd9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cbe7:	eb d1                	jmp    c000cbba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbe9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cbee:	74 3a                	je     c000cc2a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cbf0:	83 f8 03             	cmp    eax,0x3
c000cbf3:	74 c5                	je     c000cbba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbf5:	41                   	inc    ecx
c000cbf6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cbf9:	80 fa 2f             	cmp    dl,0x2f
c000cbfc:	74 f7                	je     c000cbf5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cbfe:	80 fa 5c             	cmp    dl,0x5c
c000cc01:	74 f2                	je     c000cbf5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cc03:	48                   	dec    eax
c000cc04:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cc08:	75 06                	jne    c000cc10 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cc0a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cc0e:	eb f3                	jmp    c000cc03 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cc10:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cc14:	74 07                	je     c000cc1d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cc16:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cc1a:	48                   	dec    eax
c000cc1b:	eb f3                	jmp    c000cc10 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cc1d:	40                   	inc    eax
c000cc1e:	eb 9a                	jmp    c000cbba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc20:	80 fa 2f             	cmp    dl,0x2f
c000cc23:	74 95                	je     c000cbba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc25:	80 fa 5c             	cmp    dl,0x5c
c000cc28:	74 90                	je     c000cbba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc2a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cc2d:	40                   	inc    eax
c000cc2e:	eb 8a                	jmp    c000cbba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc30:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cc34:	83 ec 0c             	sub    esp,0xc
c000cc37:	53                   	push   ebx
c000cc38:	e8 87 38 ff ff       	call   c00004c4 <strlen>
c000cc3d:	83 c4 10             	add    esp,0x10
c000cc40:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cc45:	75 26                	jne    c000cc6d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cc47:	83 ec 0c             	sub    esp,0xc
c000cc4a:	53                   	push   ebx
c000cc4b:	e8 74 38 ff ff       	call   c00004c4 <strlen>
c000cc50:	83 c4 10             	add    esp,0x10
c000cc53:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cc58:	74 26                	je     c000cc80 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cc5a:	83 ec 0c             	sub    esp,0xc
c000cc5d:	53                   	push   ebx
c000cc5e:	e8 61 38 ff ff       	call   c00004c4 <strlen>
c000cc63:	83 c4 10             	add    esp,0x10
c000cc66:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cc6b:	eb c7                	jmp    c000cc34 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cc6d:	83 ec 0c             	sub    esp,0xc
c000cc70:	53                   	push   ebx
c000cc71:	e8 4e 38 ff ff       	call   c00004c4 <strlen>
c000cc76:	83 c4 10             	add    esp,0x10
c000cc79:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cc7e:	74 c7                	je     c000cc47 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cc80:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cc86:	5b                   	pop    ebx
c000cc87:	5e                   	pop    esi
c000cc88:	5f                   	pop    edi
c000cc89:	5d                   	pop    ebp
c000cc8a:	c3                   	ret    
c000cc8b:	90                   	nop

c000cc8c <File::File(char const*, Process*)>:
c000cc8c:	83 ec 0c             	sub    esp,0xc
c000cc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc93:	83 ec 08             	sub    esp,0x8
c000cc96:	6a 00                	push   0x0
c000cc98:	50                   	push   eax
c000cc99:	e8 e4 e2 ff ff       	call   c000af82 <UnixFile::UnixFile(int)>
c000cc9e:	83 c4 10             	add    esp,0x10
c000cca1:	ba 88 35 02 c0       	mov    edx,0xc0023588
c000cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccaa:	89 10                	mov    DWORD PTR [eax],edx
c000ccac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccb0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccba:	83 c0 0d             	add    eax,0xd
c000ccbd:	83 ec 04             	sub    esp,0x4
c000ccc0:	52                   	push   edx
c000ccc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc5:	50                   	push   eax
c000ccc6:	e8 17 fe ff ff       	call   c000cae2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000cccb:	83 c4 10             	add    esp,0x10
c000ccce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ccd5:	8d 50 bf             	lea    edx,[eax-0x41]
c000ccd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccdc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccee:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ccf4:	0f b6 c0             	movzx  eax,al
c000ccf7:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	74 5e                	je     c000cd60 <File::File(char const*, Process*)+0xd4>
c000cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd06:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cd0c:	0f b6 c0             	movzx  eax,al
c000cd0f:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000cd16:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cd1c:	85 c0                	test   eax,eax
c000cd1e:	75 40                	jne    c000cd60 <File::File(char const*, Process*)+0xd4>
c000cd20:	83 ec 0c             	sub    esp,0xc
c000cd23:	68 c4 34 02 c0       	push   0xc00234c4
c000cd28:	e8 f4 f9 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000cd2d:	83 c4 10             	add    esp,0x10
c000cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd34:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cd3a:	0f b6 c0             	movzx  eax,al
c000cd3d:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000cd44:	83 ec 0c             	sub    esp,0xc
c000cd47:	50                   	push   eax
c000cd48:	e8 7b 20 00 00       	call   c000edc8 <LogicalDisk::mount()>
c000cd4d:	83 c4 10             	add    esp,0x10
c000cd50:	83 ec 0c             	sub    esp,0xc
c000cd53:	68 7f 54 02 c0       	push   0xc002547f
c000cd58:	e8 c4 f9 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000cd5d:	83 c4 10             	add    esp,0x10
c000cd60:	90                   	nop
c000cd61:	83 c4 0c             	add    esp,0xc
c000cd64:	c3                   	ret    
c000cd65:	90                   	nop

c000cd66 <File::open(FileOpenMode)>:
c000cd66:	53                   	push   ebx
c000cd67:	b8 0b 00 00 00       	mov    eax,0xb
c000cd6c:	83 ec 08             	sub    esp,0x8
c000cd6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd73:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000cd7a:	80 fa 19             	cmp    dl,0x19
c000cd7d:	77 40                	ja     c000cdbf <File::open(FileOpenMode)+0x59>
c000cd7f:	8b 14 95 c0 89 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7640]
c000cd86:	85 d2                	test   edx,edx
c000cd88:	74 35                	je     c000cdbf <File::open(FileOpenMode)+0x59>
c000cd8a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cd90:	85 d2                	test   edx,edx
c000cd92:	74 2b                	je     c000cdbf <File::open(FileOpenMode)+0x59>
c000cd94:	b8 06 00 00 00       	mov    eax,0x6
c000cd99:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000cd9d:	75 20                	jne    c000cdbf <File::open(FileOpenMode)+0x59>
c000cd9f:	8b 02                	mov    eax,DWORD PTR [edx]
c000cda1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000cda7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdab:	51                   	push   ecx
c000cdac:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000cdaf:	51                   	push   ecx
c000cdb0:	52                   	push   edx
c000cdb1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cdb4:	83 c4 10             	add    esp,0x10
c000cdb7:	85 c0                	test   eax,eax
c000cdb9:	75 04                	jne    c000cdbf <File::open(FileOpenMode)+0x59>
c000cdbb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000cdbf:	83 c4 08             	add    esp,0x8
c000cdc2:	5b                   	pop    ebx
c000cdc3:	c3                   	ret    

c000cdc4 <File::close()>:
c000cdc4:	53                   	push   ebx
c000cdc5:	b8 0b 00 00 00       	mov    eax,0xb
c000cdca:	83 ec 08             	sub    esp,0x8
c000cdcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cdd1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000cdd8:	80 fa 19             	cmp    dl,0x19
c000cddb:	77 41                	ja     c000ce1e <File::close()+0x5a>
c000cddd:	8b 1c 95 c0 89 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7640]
c000cde4:	85 db                	test   ebx,ebx
c000cde6:	74 36                	je     c000ce1e <File::close()+0x5a>
c000cde8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000cdef:	74 2d                	je     c000ce1e <File::close()+0x5a>
c000cdf1:	b8 05 00 00 00       	mov    eax,0x5
c000cdf6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000cdfa:	74 22                	je     c000ce1e <File::close()+0x5a>
c000cdfc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ce00:	8b 04 95 c0 89 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7640]
c000ce07:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce0d:	53                   	push   ebx
c000ce0e:	53                   	push   ebx
c000ce0f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ce11:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ce17:	50                   	push   eax
c000ce18:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ce1b:	83 c4 10             	add    esp,0x10
c000ce1e:	83 c4 08             	add    esp,0x8
c000ce21:	5b                   	pop    ebx
c000ce22:	c3                   	ret    
c000ce23:	90                   	nop

c000ce24 <File::seek(unsigned long long)>:
c000ce24:	56                   	push   esi
c000ce25:	53                   	push   ebx
c000ce26:	b8 0b 00 00 00       	mov    eax,0xb
c000ce2b:	51                   	push   ecx
c000ce2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce34:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ce3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce3f:	80 fa 19             	cmp    dl,0x19
c000ce42:	77 31                	ja     c000ce75 <File::seek(unsigned long long)+0x51>
c000ce44:	8b 14 95 c0 89 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7640]
c000ce4b:	85 d2                	test   edx,edx
c000ce4d:	74 26                	je     c000ce75 <File::seek(unsigned long long)+0x51>
c000ce4f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ce55:	85 d2                	test   edx,edx
c000ce57:	74 1c                	je     c000ce75 <File::seek(unsigned long long)+0x51>
c000ce59:	b8 05 00 00 00       	mov    eax,0x5
c000ce5e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ce62:	74 11                	je     c000ce75 <File::seek(unsigned long long)+0x51>
c000ce64:	8b 02                	mov    eax,DWORD PTR [edx]
c000ce66:	53                   	push   ebx
c000ce67:	51                   	push   ecx
c000ce68:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ce6e:	52                   	push   edx
c000ce6f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ce72:	83 c4 10             	add    esp,0x10
c000ce75:	5a                   	pop    edx
c000ce76:	5b                   	pop    ebx
c000ce77:	5e                   	pop    esi
c000ce78:	c3                   	ret    
c000ce79:	90                   	nop

c000ce7a <File::tell(unsigned long long*)>:
c000ce7a:	83 ec 0c             	sub    esp,0xc
c000ce7d:	b8 0b 00 00 00       	mov    eax,0xb
c000ce82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce86:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ce8d:	80 fa 19             	cmp    dl,0x19
c000ce90:	77 34                	ja     c000cec6 <File::tell(unsigned long long*)+0x4c>
c000ce92:	8b 14 95 c0 89 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7640]
c000ce99:	85 d2                	test   edx,edx
c000ce9b:	74 29                	je     c000cec6 <File::tell(unsigned long long*)+0x4c>
c000ce9d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cea3:	85 d2                	test   edx,edx
c000cea5:	74 1f                	je     c000cec6 <File::tell(unsigned long long*)+0x4c>
c000cea7:	b8 05 00 00 00       	mov    eax,0x5
c000ceac:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ceb0:	74 14                	je     c000cec6 <File::tell(unsigned long long*)+0x4c>
c000ceb2:	50                   	push   eax
c000ceb3:	8b 02                	mov    eax,DWORD PTR [edx]
c000ceb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ceb9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000cebf:	52                   	push   edx
c000cec0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cec3:	83 c4 10             	add    esp,0x10
c000cec6:	83 c4 0c             	add    esp,0xc
c000cec9:	c3                   	ret    

c000ceca <File::rewind()>:
c000ceca:	83 ec 10             	sub    esp,0x10
c000cecd:	6a 00                	push   0x0
c000cecf:	6a 00                	push   0x0
c000ced1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced5:	e8 4a ff ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c000ceda:	83 c4 1c             	add    esp,0x1c
c000cedd:	c3                   	ret    

c000cede <File::unlink()>:
c000cede:	83 ec 0c             	sub    esp,0xc
c000cee1:	b8 0b 00 00 00       	mov    eax,0xb
c000cee6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ceea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cef1:	80 f9 19             	cmp    cl,0x19
c000cef4:	77 2f                	ja     c000cf25 <File::unlink()+0x47>
c000cef6:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000cefd:	85 c9                	test   ecx,ecx
c000ceff:	74 24                	je     c000cf25 <File::unlink()+0x47>
c000cf01:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cf07:	85 c9                	test   ecx,ecx
c000cf09:	74 1a                	je     c000cf25 <File::unlink()+0x47>
c000cf0b:	b8 06 00 00 00       	mov    eax,0x6
c000cf10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf14:	75 0f                	jne    c000cf25 <File::unlink()+0x47>
c000cf16:	83 c2 0d             	add    edx,0xd
c000cf19:	50                   	push   eax
c000cf1a:	50                   	push   eax
c000cf1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cf1d:	52                   	push   edx
c000cf1e:	51                   	push   ecx
c000cf1f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	83 c4 0c             	add    esp,0xc
c000cf28:	c3                   	ret    
c000cf29:	90                   	nop

c000cf2a <File::rename(char const*)>:
c000cf2a:	83 ec 0c             	sub    esp,0xc
c000cf2d:	b8 0b 00 00 00       	mov    eax,0xb
c000cf32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf3d:	80 f9 19             	cmp    cl,0x19
c000cf40:	77 32                	ja     c000cf74 <File::rename(char const*)+0x4a>
c000cf42:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000cf49:	85 c9                	test   ecx,ecx
c000cf4b:	74 27                	je     c000cf74 <File::rename(char const*)+0x4a>
c000cf4d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cf53:	85 c9                	test   ecx,ecx
c000cf55:	74 1d                	je     c000cf74 <File::rename(char const*)+0x4a>
c000cf57:	b8 06 00 00 00       	mov    eax,0x6
c000cf5c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf60:	75 12                	jne    c000cf74 <File::rename(char const*)+0x4a>
c000cf62:	83 c2 0d             	add    edx,0xd
c000cf65:	50                   	push   eax
c000cf66:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cf68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf6c:	52                   	push   edx
c000cf6d:	51                   	push   ecx
c000cf6e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	83 c4 0c             	add    esp,0xc
c000cf77:	c3                   	ret    

c000cf78 <File::chfatattr(unsigned char, unsigned char)>:
c000cf78:	57                   	push   edi
c000cf79:	b8 0b 00 00 00       	mov    eax,0xb
c000cf7e:	56                   	push   esi
c000cf7f:	53                   	push   ebx
c000cf80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf8f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000cf93:	80 f9 19             	cmp    cl,0x19
c000cf96:	77 37                	ja     c000cfcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf98:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000cf9f:	85 c9                	test   ecx,ecx
c000cfa1:	74 2c                	je     c000cfcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cfa3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cfa9:	85 c9                	test   ecx,ecx
c000cfab:	74 22                	je     c000cfcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cfad:	b8 06 00 00 00       	mov    eax,0x6
c000cfb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cfb6:	75 17                	jne    c000cfcf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cfb8:	8b 39                	mov    edi,DWORD PTR [ecx]
c000cfba:	89 f0                	mov    eax,esi
c000cfbc:	83 c2 0d             	add    edx,0xd
c000cfbf:	0f b6 f0             	movzx  esi,al
c000cfc2:	0f b6 db             	movzx  ebx,bl
c000cfc5:	56                   	push   esi
c000cfc6:	53                   	push   ebx
c000cfc7:	52                   	push   edx
c000cfc8:	51                   	push   ecx
c000cfc9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000cfcc:	83 c4 10             	add    esp,0x10
c000cfcf:	5b                   	pop    ebx
c000cfd0:	5e                   	pop    esi
c000cfd1:	5f                   	pop    edi
c000cfd2:	c3                   	ret    
c000cfd3:	90                   	nop

c000cfd4 <File::exists()>:
c000cfd4:	83 ec 0c             	sub    esp,0xc
c000cfd7:	31 c0                	xor    eax,eax
c000cfd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cfdd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cfe4:	80 f9 19             	cmp    cl,0x19
c000cfe7:	77 24                	ja     c000d00d <File::exists()+0x39>
c000cfe9:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000cff0:	85 c9                	test   ecx,ecx
c000cff2:	74 19                	je     c000d00d <File::exists()+0x39>
c000cff4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cffa:	85 c9                	test   ecx,ecx
c000cffc:	74 0f                	je     c000d00d <File::exists()+0x39>
c000cffe:	83 c2 0d             	add    edx,0xd
c000d001:	50                   	push   eax
c000d002:	50                   	push   eax
c000d003:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d005:	52                   	push   edx
c000d006:	51                   	push   ecx
c000d007:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d00a:	83 c4 10             	add    esp,0x10
c000d00d:	83 c4 0c             	add    esp,0xc
c000d010:	c3                   	ret    
c000d011:	90                   	nop

c000d012 <File::stat(unsigned long long*, bool*)>:
c000d012:	56                   	push   esi
c000d013:	53                   	push   ebx
c000d014:	50                   	push   eax
c000d015:	b8 0b 00 00 00       	mov    eax,0xb
c000d01a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d01e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d022:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d029:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d02d:	80 f9 19             	cmp    cl,0x19
c000d030:	77 3d                	ja     c000d06f <File::stat(unsigned long long*, bool*)+0x5d>
c000d032:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000d039:	85 c9                	test   ecx,ecx
c000d03b:	74 32                	je     c000d06f <File::stat(unsigned long long*, bool*)+0x5d>
c000d03d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d043:	85 c9                	test   ecx,ecx
c000d045:	74 28                	je     c000d06f <File::stat(unsigned long long*, bool*)+0x5d>
c000d047:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d049:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d04d:	74 13                	je     c000d062 <File::stat(unsigned long long*, bool*)+0x50>
c000d04f:	83 ec 04             	sub    esp,0x4
c000d052:	56                   	push   esi
c000d053:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d059:	51                   	push   ecx
c000d05a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d05d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d060:	eb 0a                	jmp    c000d06c <File::stat(unsigned long long*, bool*)+0x5a>
c000d062:	53                   	push   ebx
c000d063:	83 c2 0d             	add    edx,0xd
c000d066:	56                   	push   esi
c000d067:	52                   	push   edx
c000d068:	51                   	push   ecx
c000d069:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d06c:	83 c4 10             	add    esp,0x10
c000d06f:	5a                   	pop    edx
c000d070:	5b                   	pop    ebx
c000d071:	5e                   	pop    esi
c000d072:	c3                   	ret    

c000d073 <Fs::setcwd(Process*, char*)>:
c000d073:	55                   	push   ebp
c000d074:	57                   	push   edi
c000d075:	56                   	push   esi
c000d076:	53                   	push   ebx
c000d077:	81 ec 20 02 00 00    	sub    esp,0x220
c000d07d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d084:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d08a:	57                   	push   edi
c000d08b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d092:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d096:	56                   	push   esi
c000d097:	e8 46 fa ff ff       	call   c000cae2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d09c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d09f:	e8 20 34 ff ff       	call   c00004c4 <strlen>
c000d0a4:	83 c4 10             	add    esp,0x10
c000d0a7:	83 f8 02             	cmp    eax,0x2
c000d0aa:	77 15                	ja     c000d0c1 <Fs::setcwd(Process*, char*)+0x4e>
c000d0ac:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d0b1:	83 eb 41             	sub    ebx,0x41
c000d0b4:	8b 04 9d c0 89 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7640]
c000d0bb:	85 c0                	test   eax,eax
c000d0bd:	75 1c                	jne    c000d0db <Fs::setcwd(Process*, char*)+0x68>
c000d0bf:	eb 4c                	jmp    c000d10d <Fs::setcwd(Process*, char*)+0x9a>
c000d0c1:	83 ec 0c             	sub    esp,0xc
c000d0c4:	56                   	push   esi
c000d0c5:	e8 fa 33 ff ff       	call   c00004c4 <strlen>
c000d0ca:	83 c4 10             	add    esp,0x10
c000d0cd:	83 f8 03             	cmp    eax,0x3
c000d0d0:	75 74                	jne    c000d146 <Fs::setcwd(Process*, char*)+0xd3>
c000d0d2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d0d7:	75 6d                	jne    c000d146 <Fs::setcwd(Process*, char*)+0xd3>
c000d0d9:	eb d1                	jmp    c000d0ac <Fs::setcwd(Process*, char*)+0x39>
c000d0db:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d0e2:	75 29                	jne    c000d10d <Fs::setcwd(Process*, char*)+0x9a>
c000d0e4:	83 ec 0c             	sub    esp,0xc
c000d0e7:	68 9c 34 02 c0       	push   0xc002349c
c000d0ec:	e8 30 f6 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000d0f1:	5a                   	pop    edx
c000d0f2:	ff 34 9d c0 89 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7640]
c000d0f9:	e8 ca 1c 00 00       	call   c000edc8 <LogicalDisk::mount()>
c000d0fe:	c7 04 24 7f 54 02 c0 	mov    DWORD PTR [esp],0xc002547f
c000d105:	e8 17 f6 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000d10a:	83 c4 10             	add    esp,0x10
c000d10d:	b8 03 00 00 00       	mov    eax,0x3
c000d112:	83 fb 19             	cmp    ebx,0x19
c000d115:	0f 87 c6 00 00 00    	ja     c000d1e1 <Fs::setcwd(Process*, char*)+0x16e>
c000d11b:	8b 14 9d c0 89 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7640]
c000d122:	b8 05 00 00 00       	mov    eax,0x5
c000d127:	85 d2                	test   edx,edx
c000d129:	0f 84 b2 00 00 00    	je     c000d1e1 <Fs::setcwd(Process*, char*)+0x16e>
c000d12f:	b8 06 00 00 00       	mov    eax,0x6
c000d134:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d13b:	0f 85 92 00 00 00    	jne    c000d1d3 <Fs::setcwd(Process*, char*)+0x160>
c000d141:	e9 9b 00 00 00       	jmp    c000d1e1 <Fs::setcwd(Process*, char*)+0x16e>
c000d146:	83 ec 0c             	sub    esp,0xc
c000d149:	68 14 01 00 00       	push   0x114
c000d14e:	e8 44 c6 ff ff       	call   c0009797 <malloc>
c000d153:	83 c4 0c             	add    esp,0xc
c000d156:	89 c3                	mov    ebx,eax
c000d158:	55                   	push   ebp
c000d159:	56                   	push   esi
c000d15a:	50                   	push   eax
c000d15b:	e8 2c fb ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c000d160:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d165:	83 c4 0c             	add    esp,0xc
c000d168:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d16c:	50                   	push   eax
c000d16d:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d171:	50                   	push   eax
c000d172:	53                   	push   ebx
c000d173:	e8 9a fe ff ff       	call   c000d012 <File::stat(unsigned long long*, bool*)>
c000d178:	83 c4 10             	add    esp,0x10
c000d17b:	83 f8 02             	cmp    eax,0x2
c000d17e:	74 04                	je     c000d184 <Fs::setcwd(Process*, char*)+0x111>
c000d180:	85 c0                	test   eax,eax
c000d182:	74 1c                	je     c000d1a0 <Fs::setcwd(Process*, char*)+0x12d>
c000d184:	b8 01 00 00 00       	mov    eax,0x1
c000d189:	85 db                	test   ebx,ebx
c000d18b:	74 54                	je     c000d1e1 <Fs::setcwd(Process*, char*)+0x16e>
c000d18d:	83 ec 0c             	sub    esp,0xc
c000d190:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d192:	53                   	push   ebx
c000d193:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d196:	83 c4 10             	add    esp,0x10
c000d199:	b8 01 00 00 00       	mov    eax,0x1
c000d19e:	eb 41                	jmp    c000d1e1 <Fs::setcwd(Process*, char*)+0x16e>
c000d1a0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d1a5:	75 1c                	jne    c000d1c3 <Fs::setcwd(Process*, char*)+0x150>
c000d1a7:	b8 02 00 00 00       	mov    eax,0x2
c000d1ac:	85 db                	test   ebx,ebx
c000d1ae:	74 31                	je     c000d1e1 <Fs::setcwd(Process*, char*)+0x16e>
c000d1b0:	83 ec 0c             	sub    esp,0xc
c000d1b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1b5:	53                   	push   ebx
c000d1b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1b9:	83 c4 10             	add    esp,0x10
c000d1bc:	b8 02 00 00 00       	mov    eax,0x2
c000d1c1:	eb 1e                	jmp    c000d1e1 <Fs::setcwd(Process*, char*)+0x16e>
c000d1c3:	85 db                	test   ebx,ebx
c000d1c5:	74 0c                	je     c000d1d3 <Fs::setcwd(Process*, char*)+0x160>
c000d1c7:	83 ec 0c             	sub    esp,0xc
c000d1ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1cc:	53                   	push   ebx
c000d1cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1d0:	83 c4 10             	add    esp,0x10
c000d1d3:	50                   	push   eax
c000d1d4:	50                   	push   eax
c000d1d5:	56                   	push   esi
c000d1d6:	57                   	push   edi
c000d1d7:	e8 88 33 ff ff       	call   c0000564 <strcpy>
c000d1dc:	83 c4 10             	add    esp,0x10
c000d1df:	31 c0                	xor    eax,eax
c000d1e1:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d1e7:	5b                   	pop    ebx
c000d1e8:	5e                   	pop    esi
c000d1e9:	5f                   	pop    edi
c000d1ea:	5d                   	pop    ebp
c000d1eb:	c3                   	ret    

c000d1ec <Directory::Directory(char const*, Process*)>:
c000d1ec:	83 ec 0c             	sub    esp,0xc
c000d1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f3:	83 ec 08             	sub    esp,0x8
c000d1f6:	6a 00                	push   0x0
c000d1f8:	50                   	push   eax
c000d1f9:	e8 84 dd ff ff       	call   c000af82 <UnixFile::UnixFile(int)>
c000d1fe:	83 c4 10             	add    esp,0x10
c000d201:	ba a4 35 02 c0       	mov    edx,0xc00235a4
c000d206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d20a:	89 10                	mov    DWORD PTR [eax],edx
c000d20c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d210:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d21a:	83 c0 0d             	add    eax,0xd
c000d21d:	83 ec 04             	sub    esp,0x4
c000d220:	52                   	push   edx
c000d221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d225:	50                   	push   eax
c000d226:	e8 b7 f8 ff ff       	call   c000cae2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d22b:	83 c4 10             	add    esp,0x10
c000d22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d232:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d235:	8d 50 bf             	lea    edx,[eax-0x41]
c000d238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d23c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d246:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d254:	0f b6 c0             	movzx  eax,al
c000d257:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000d25e:	85 c0                	test   eax,eax
c000d260:	74 5e                	je     c000d2c0 <Directory::Directory(char const*, Process*)+0xd4>
c000d262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d266:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d26c:	0f b6 c0             	movzx  eax,al
c000d26f:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000d276:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d27c:	85 c0                	test   eax,eax
c000d27e:	75 40                	jne    c000d2c0 <Directory::Directory(char const*, Process*)+0xd4>
c000d280:	83 ec 0c             	sub    esp,0xc
c000d283:	68 ec 34 02 c0       	push   0xc00234ec
c000d288:	e8 94 f4 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000d28d:	83 c4 10             	add    esp,0x10
c000d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d294:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d29a:	0f b6 c0             	movzx  eax,al
c000d29d:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c000d2a4:	83 ec 0c             	sub    esp,0xc
c000d2a7:	50                   	push   eax
c000d2a8:	e8 1b 1b 00 00       	call   c000edc8 <LogicalDisk::mount()>
c000d2ad:	83 c4 10             	add    esp,0x10
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	68 7f 54 02 c0       	push   0xc002547f
c000d2b8:	e8 64 f4 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	90                   	nop
c000d2c1:	83 c4 0c             	add    esp,0xc
c000d2c4:	c3                   	ret    
c000d2c5:	90                   	nop

c000d2c6 <Directory::open()>:
c000d2c6:	53                   	push   ebx
c000d2c7:	b8 0b 00 00 00       	mov    eax,0xb
c000d2cc:	83 ec 08             	sub    esp,0x8
c000d2cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d2d3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d2da:	80 fa 19             	cmp    dl,0x19
c000d2dd:	77 3d                	ja     c000d31c <Directory::open()+0x56>
c000d2df:	8b 14 95 c0 89 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7640]
c000d2e6:	85 d2                	test   edx,edx
c000d2e8:	74 32                	je     c000d31c <Directory::open()+0x56>
c000d2ea:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d2f0:	85 d2                	test   edx,edx
c000d2f2:	74 28                	je     c000d31c <Directory::open()+0x56>
c000d2f4:	b8 06 00 00 00       	mov    eax,0x6
c000d2f9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d2fd:	75 1d                	jne    c000d31c <Directory::open()+0x56>
c000d2ff:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d305:	50                   	push   eax
c000d306:	8b 02                	mov    eax,DWORD PTR [edx]
c000d308:	51                   	push   ecx
c000d309:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d30c:	51                   	push   ecx
c000d30d:	52                   	push   edx
c000d30e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d311:	83 c4 10             	add    esp,0x10
c000d314:	85 c0                	test   eax,eax
c000d316:	75 04                	jne    c000d31c <Directory::open()+0x56>
c000d318:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d31c:	83 c4 08             	add    esp,0x8
c000d31f:	5b                   	pop    ebx
c000d320:	c3                   	ret    
c000d321:	90                   	nop

c000d322 <Directory::close()>:
c000d322:	53                   	push   ebx
c000d323:	b8 0b 00 00 00       	mov    eax,0xb
c000d328:	83 ec 08             	sub    esp,0x8
c000d32b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d32f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d336:	80 fa 19             	cmp    dl,0x19
c000d339:	77 41                	ja     c000d37c <Directory::close()+0x5a>
c000d33b:	8b 1c 95 c0 89 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7640]
c000d342:	85 db                	test   ebx,ebx
c000d344:	74 36                	je     c000d37c <Directory::close()+0x5a>
c000d346:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d34d:	74 2d                	je     c000d37c <Directory::close()+0x5a>
c000d34f:	b8 05 00 00 00       	mov    eax,0x5
c000d354:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d358:	74 22                	je     c000d37c <Directory::close()+0x5a>
c000d35a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d35e:	8b 04 95 c0 89 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7640]
c000d365:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d36b:	53                   	push   ebx
c000d36c:	53                   	push   ebx
c000d36d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d36f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d375:	50                   	push   eax
c000d376:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d379:	83 c4 10             	add    esp,0x10
c000d37c:	83 c4 08             	add    esp,0x8
c000d37f:	5b                   	pop    ebx
c000d380:	c3                   	ret    
c000d381:	90                   	nop

c000d382 <Directory::unlink()>:
c000d382:	83 ec 0c             	sub    esp,0xc
c000d385:	b8 0b 00 00 00       	mov    eax,0xb
c000d38a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d38e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d395:	80 f9 19             	cmp    cl,0x19
c000d398:	77 2f                	ja     c000d3c9 <Directory::unlink()+0x47>
c000d39a:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000d3a1:	85 c9                	test   ecx,ecx
c000d3a3:	74 24                	je     c000d3c9 <Directory::unlink()+0x47>
c000d3a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d3ab:	85 c9                	test   ecx,ecx
c000d3ad:	74 1a                	je     c000d3c9 <Directory::unlink()+0x47>
c000d3af:	b8 06 00 00 00       	mov    eax,0x6
c000d3b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d3b8:	75 0f                	jne    c000d3c9 <Directory::unlink()+0x47>
c000d3ba:	83 c2 0d             	add    edx,0xd
c000d3bd:	50                   	push   eax
c000d3be:	50                   	push   eax
c000d3bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d3c1:	52                   	push   edx
c000d3c2:	51                   	push   ecx
c000d3c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d3c6:	83 c4 10             	add    esp,0x10
c000d3c9:	83 c4 0c             	add    esp,0xc
c000d3cc:	c3                   	ret    
c000d3cd:	90                   	nop

c000d3ce <Directory::rename(char const*)>:
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	b8 0b 00 00 00       	mov    eax,0xb
c000d3d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d3e1:	80 f9 19             	cmp    cl,0x19
c000d3e4:	77 32                	ja     c000d418 <Directory::rename(char const*)+0x4a>
c000d3e6:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000d3ed:	85 c9                	test   ecx,ecx
c000d3ef:	74 27                	je     c000d418 <Directory::rename(char const*)+0x4a>
c000d3f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d3f7:	85 c9                	test   ecx,ecx
c000d3f9:	74 1d                	je     c000d418 <Directory::rename(char const*)+0x4a>
c000d3fb:	b8 06 00 00 00       	mov    eax,0x6
c000d400:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d404:	75 12                	jne    c000d418 <Directory::rename(char const*)+0x4a>
c000d406:	83 c2 0d             	add    edx,0xd
c000d409:	50                   	push   eax
c000d40a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d40c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d410:	52                   	push   edx
c000d411:	51                   	push   ecx
c000d412:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d415:	83 c4 10             	add    esp,0x10
c000d418:	83 c4 0c             	add    esp,0xc
c000d41b:	c3                   	ret    

c000d41c <Directory::exists()>:
c000d41c:	83 ec 0c             	sub    esp,0xc
c000d41f:	31 c0                	xor    eax,eax
c000d421:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d425:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d42c:	80 f9 19             	cmp    cl,0x19
c000d42f:	77 24                	ja     c000d455 <Directory::exists()+0x39>
c000d431:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000d438:	85 c9                	test   ecx,ecx
c000d43a:	74 19                	je     c000d455 <Directory::exists()+0x39>
c000d43c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d442:	85 c9                	test   ecx,ecx
c000d444:	74 0f                	je     c000d455 <Directory::exists()+0x39>
c000d446:	83 c2 0d             	add    edx,0xd
c000d449:	50                   	push   eax
c000d44a:	50                   	push   eax
c000d44b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d44d:	52                   	push   edx
c000d44e:	51                   	push   ecx
c000d44f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d452:	83 c4 10             	add    esp,0x10
c000d455:	83 c4 0c             	add    esp,0xc
c000d458:	c3                   	ret    
c000d459:	90                   	nop

c000d45a <Directory::read(dirent*)>:
c000d45a:	83 ec 1c             	sub    esp,0x1c
c000d45d:	b8 0b 00 00 00       	mov    eax,0xb
c000d462:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d466:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d46d:	80 fa 19             	cmp    dl,0x19
c000d470:	77 30                	ja     c000d4a2 <Directory::read(dirent*)+0x48>
c000d472:	8b 14 95 c0 89 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7640]
c000d479:	85 d2                	test   edx,edx
c000d47b:	74 25                	je     c000d4a2 <Directory::read(dirent*)+0x48>
c000d47d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d484:	74 1c                	je     c000d4a2 <Directory::read(dirent*)+0x48>
c000d486:	83 ec 0c             	sub    esp,0xc
c000d489:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d48b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d48f:	52                   	push   edx
c000d490:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d494:	6a 00                	push   0x0
c000d496:	68 10 01 00 00       	push   0x110
c000d49b:	51                   	push   ecx
c000d49c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d49f:	83 c4 20             	add    esp,0x20
c000d4a2:	83 c4 1c             	add    esp,0x1c
c000d4a5:	c3                   	ret    

c000d4a6 <Directory::create()>:
c000d4a6:	83 ec 0c             	sub    esp,0xc
c000d4a9:	b8 0b 00 00 00       	mov    eax,0xb
c000d4ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4b9:	80 f9 19             	cmp    cl,0x19
c000d4bc:	77 2f                	ja     c000d4ed <Directory::create()+0x47>
c000d4be:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c000d4c5:	85 c9                	test   ecx,ecx
c000d4c7:	74 24                	je     c000d4ed <Directory::create()+0x47>
c000d4c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4cf:	85 c9                	test   ecx,ecx
c000d4d1:	74 1a                	je     c000d4ed <Directory::create()+0x47>
c000d4d3:	b8 06 00 00 00       	mov    eax,0x6
c000d4d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4dc:	75 0f                	jne    c000d4ed <Directory::create()+0x47>
c000d4de:	83 c2 0d             	add    edx,0xd
c000d4e1:	50                   	push   eax
c000d4e2:	50                   	push   eax
c000d4e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4e5:	52                   	push   edx
c000d4e6:	51                   	push   ecx
c000d4e7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d4ea:	83 c4 10             	add    esp,0x10
c000d4ed:	83 c4 0c             	add    esp,0xc
c000d4f0:	c3                   	ret    
c000d4f1:	90                   	nop

c000d4f2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d4f2:	b8 0a 00 00 00       	mov    eax,0xa
c000d4f7:	c3                   	ret    

c000d4f8 <Bus::Bus(char const*)>:
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ff:	83 ec 08             	sub    esp,0x8
c000d502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d506:	50                   	push   eax
c000d507:	e8 96 08 00 00       	call   c000dda2 <Device::Device(char const*)>
c000d50c:	83 c4 10             	add    esp,0x10
c000d50f:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c000d514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d518:	89 10                	mov    DWORD PTR [eax],edx
c000d51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d51e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d528:	90                   	nop
c000d529:	83 c4 0c             	add    esp,0xc
c000d52c:	c3                   	ret    
c000d52d:	90                   	nop
c000d52e:	66 90                	xchg   ax,ax

c000d530 <Bus::~Bus()>:
c000d530:	83 ec 0c             	sub    esp,0xc
c000d533:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c000d538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53c:	89 10                	mov    DWORD PTR [eax],edx
c000d53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d542:	83 ec 0c             	sub    esp,0xc
c000d545:	50                   	push   eax
c000d546:	e8 55 05 00 00       	call   c000daa0 <Device::~Device()>
c000d54b:	83 c4 10             	add    esp,0x10
c000d54e:	90                   	nop
c000d54f:	83 c4 0c             	add    esp,0xc
c000d552:	c3                   	ret    
c000d553:	90                   	nop

c000d554 <Bus::~Bus()>:
c000d554:	83 ec 0c             	sub    esp,0xc
c000d557:	83 ec 0c             	sub    esp,0xc
c000d55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55e:	e8 cd ff ff ff       	call   c000d530 <Bus::~Bus()>
c000d563:	83 c4 10             	add    esp,0x10
c000d566:	83 ec 08             	sub    esp,0x8
c000d569:	68 58 01 00 00       	push   0x158
c000d56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d572:	e8 c9 f0 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000d577:	83 c4 10             	add    esp,0x10
c000d57a:	83 c4 0c             	add    esp,0xc
c000d57d:	c3                   	ret    

c000d57e <beepThread(void*)>:
c000d57e:	83 ec 0c             	sub    esp,0xc
c000d581:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000d586:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d58a:	48                   	dec    eax
c000d58b:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000d590:	75 01                	jne    c000d593 <beepThread(void*)+0x15>
c000d592:	fb                   	sti    
c000d593:	83 ec 0c             	sub    esp,0xc
c000d596:	6b c2 0a             	imul   eax,edx,0xa
c000d599:	50                   	push   eax
c000d59a:	e8 49 8e 00 00       	call   c00163e8 <milliTenthSleep(unsigned int)>
c000d59f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d5a6:	e8 fa c1 00 00       	call   c00197a5 <Hal::makeBeep(int)>
c000d5ab:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d5b3:	83 c4 1c             	add    esp,0x1c
c000d5b6:	e9 2d 8d 00 00       	jmp    c00162e8 <blockTask(TaskState)>

c000d5bb <Krnl::beep(int, int, bool)>:
c000d5bb:	56                   	push   esi
c000d5bc:	53                   	push   ebx
c000d5bd:	83 ec 10             	sub    esp,0x10
c000d5c0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d5c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cc:	e8 d4 c1 00 00       	call   c00197a5 <Hal::makeBeep(int)>
c000d5d1:	83 c4 10             	add    esp,0x10
c000d5d4:	89 f0                	mov    eax,esi
c000d5d6:	84 c0                	test   al,al
c000d5d8:	74 1e                	je     c000d5f8 <Krnl::beep(int, int, bool)+0x3d>
c000d5da:	83 ec 0c             	sub    esp,0xc
c000d5dd:	6b db 0a             	imul   ebx,ebx,0xa
c000d5e0:	53                   	push   ebx
c000d5e1:	e8 02 8e 00 00       	call   c00163e8 <milliTenthSleep(unsigned int)>
c000d5e6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d5ee:	83 c4 14             	add    esp,0x14
c000d5f1:	5b                   	pop    ebx
c000d5f2:	5e                   	pop    esi
c000d5f3:	e9 ad c1 00 00       	jmp    c00197a5 <Hal::makeBeep(int)>
c000d5f8:	68 e6 00 00 00       	push   0xe6
c000d5fd:	53                   	push   ebx
c000d5fe:	68 7e d5 00 c0       	push   0xc000d57e
c000d603:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c000d609:	e8 c6 88 00 00       	call   c0015ed4 <Process::createThread(void (*)(void*), void*, int)>
c000d60e:	83 c4 14             	add    esp,0x14
c000d611:	5b                   	pop    ebx
c000d612:	5e                   	pop    esi
c000d613:	c3                   	ret    

c000d614 <User::loadClockSettings(int)>:
c000d614:	53                   	push   ebx
c000d615:	83 ec 14             	sub    esp,0x14
c000d618:	68 14 01 00 00       	push   0x114
c000d61d:	e8 75 c1 ff ff       	call   c0009797 <malloc>
c000d622:	83 c4 0c             	add    esp,0xc
c000d625:	89 c3                	mov    ebx,eax
c000d627:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c000d62d:	68 e4 35 02 c0       	push   0xc00235e4
c000d632:	50                   	push   eax
c000d633:	e8 54 f6 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c000d638:	58                   	pop    eax
c000d639:	5a                   	pop    edx
c000d63a:	6a 01                	push   0x1
c000d63c:	53                   	push   ebx
c000d63d:	e8 24 f7 ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c000d642:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d645:	e8 7a f7 ff ff       	call   c000cdc4 <File::close()>
c000d64a:	83 c4 10             	add    esp,0x10
c000d64d:	85 db                	test   ebx,ebx
c000d64f:	74 0f                	je     c000d660 <User::loadClockSettings(int)+0x4c>
c000d651:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d653:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d657:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d65a:	83 c4 08             	add    esp,0x8
c000d65d:	5b                   	pop    ebx
c000d65e:	ff e0                	jmp    eax
c000d660:	83 c4 08             	add    esp,0x8
c000d663:	5b                   	pop    ebx
c000d664:	c3                   	ret    
c000d665:	90                   	nop

c000d666 <Clock::Clock(char const*)>:
c000d666:	83 ec 0c             	sub    esp,0xc
c000d669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66d:	83 ec 08             	sub    esp,0x8
c000d670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d674:	50                   	push   eax
c000d675:	e8 28 07 00 00       	call   c000dda2 <Device::Device(char const*)>
c000d67a:	83 c4 10             	add    esp,0x10
c000d67d:	ba 0c 36 02 c0       	mov    edx,0xc002360c
c000d682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d686:	89 10                	mov    DWORD PTR [eax],edx
c000d688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d696:	90                   	nop
c000d697:	83 c4 0c             	add    esp,0xc
c000d69a:	c3                   	ret    
c000d69b:	90                   	nop

c000d69c <Clock::~Clock()>:
c000d69c:	83 ec 0c             	sub    esp,0xc
c000d69f:	ba 0c 36 02 c0       	mov    edx,0xc002360c
c000d6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a8:	89 10                	mov    DWORD PTR [eax],edx
c000d6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ae:	83 ec 0c             	sub    esp,0xc
c000d6b1:	50                   	push   eax
c000d6b2:	e8 e9 03 00 00       	call   c000daa0 <Device::~Device()>
c000d6b7:	83 c4 10             	add    esp,0x10
c000d6ba:	90                   	nop
c000d6bb:	83 c4 0c             	add    esp,0xc
c000d6be:	c3                   	ret    
c000d6bf:	90                   	nop

c000d6c0 <Clock::~Clock()>:
c000d6c0:	83 ec 0c             	sub    esp,0xc
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ca:	e8 cd ff ff ff       	call   c000d69c <Clock::~Clock()>
c000d6cf:	83 c4 10             	add    esp,0x10
c000d6d2:	83 ec 08             	sub    esp,0x8
c000d6d5:	68 58 01 00 00       	push   0x158
c000d6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6de:	e8 5d ef ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000d6e3:	83 c4 10             	add    esp,0x10
c000d6e6:	83 c4 0c             	add    esp,0xc
c000d6e9:	c3                   	ret    

c000d6ea <Clock::timeInSecondsLocal()>:
c000d6ea:	53                   	push   ebx
c000d6eb:	83 ec 14             	sub    esp,0x14
c000d6ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d6f2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6f4:	50                   	push   eax
c000d6f5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d6f8:	0f b6 0d 3c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002653c
c000d6ff:	03 0d 40 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026540
c000d705:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d70b:	89 cb                	mov    ebx,ecx
c000d70d:	c1 fb 1f             	sar    ebx,0x1f
c000d710:	01 c8                	add    eax,ecx
c000d712:	11 da                	adc    edx,ebx
c000d714:	83 c4 10             	add    esp,0x10
c000d717:	31 c9                	xor    ecx,ecx
c000d719:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000d720:	74 05                	je     c000d727 <Clock::timeInSecondsLocal()+0x3d>
c000d722:	b9 08 07 00 00       	mov    ecx,0x708
c000d727:	31 db                	xor    ebx,ebx
c000d729:	01 c8                	add    eax,ecx
c000d72b:	11 da                	adc    edx,ebx
c000d72d:	83 c4 08             	add    esp,0x8
c000d730:	5b                   	pop    ebx
c000d731:	c3                   	ret    

c000d732 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000d732:	57                   	push   edi
c000d733:	56                   	push   esi
c000d734:	53                   	push   ebx
c000d735:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d739:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d73d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d73f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d743:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000d746:	0f b6 05 3c 65 02 c0 	movzx  eax,BYTE PTR ds:0xc002653c
c000d74d:	03 05 40 65 02 c0    	add    eax,DWORD PTR ds:0xc0026540
c000d753:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000d759:	99                   	cdq    
c000d75a:	29 c6                	sub    esi,eax
c000d75c:	19 d7                	sbb    edi,edx
c000d75e:	89 f0                	mov    eax,esi
c000d760:	89 fa                	mov    edx,edi
c000d762:	31 f6                	xor    esi,esi
c000d764:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000d76b:	74 05                	je     c000d772 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000d76d:	be 08 07 00 00       	mov    esi,0x708
c000d772:	31 ff                	xor    edi,edi
c000d774:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000d778:	29 f0                	sub    eax,esi
c000d77a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d77e:	19 fa                	sbb    edx,edi
c000d780:	89 d8                	mov    eax,ebx
c000d782:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d786:	5b                   	pop    ebx
c000d787:	5e                   	pop    esi
c000d788:	5f                   	pop    edi
c000d789:	ff e0                	jmp    eax

c000d78b <datetimeToSeconds(datetime_t)>:
c000d78b:	55                   	push   ebp
c000d78c:	57                   	push   edi
c000d78d:	56                   	push   esi
c000d78e:	53                   	push   ebx
c000d78f:	83 ec 14             	sub    esp,0x14
c000d792:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d796:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d79a:	89 d3                	mov    ebx,edx
c000d79c:	0f b6 c6             	movzx  eax,dh
c000d79f:	c1 eb 10             	shr    ebx,0x10
c000d7a2:	48                   	dec    eax
c000d7a3:	66 81 eb 6c 07       	sub    bx,0x76c
c000d7a8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d7ac:	0f b6 f5             	movzx  esi,ch
c000d7af:	89 cf                	mov    edi,ecx
c000d7b1:	6b f6 3c             	imul   esi,esi,0x3c
c000d7b4:	c1 ef 10             	shr    edi,0x10
c000d7b7:	0f b6 c9             	movzx  ecx,cl
c000d7ba:	89 f8                	mov    eax,edi
c000d7bc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d7c2:	0f b6 f8             	movzx  edi,al
c000d7c5:	0f b6 d2             	movzx  edx,dl
c000d7c8:	01 fe                	add    esi,edi
c000d7ca:	01 f1                	add    ecx,esi
c000d7cc:	0f b7 f3             	movzx  esi,bx
c000d7cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d7d3:	c1 f9 1f             	sar    ecx,0x1f
c000d7d6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000d7db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d7df:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000d7e4:	8b 0c 8d 40 36 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc9c0]
c000d7eb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000d7ef:	76 29                	jbe    c000d81a <datetimeToSeconds(datetime_t)+0x8f>
c000d7f1:	f6 c3 03             	test   bl,0x3
c000d7f4:	75 24                	jne    c000d81a <datetimeToSeconds(datetime_t)+0x8f>
c000d7f6:	31 d2                	xor    edx,edx
c000d7f8:	bf 64 00 00 00       	mov    edi,0x64
c000d7fd:	89 d8                	mov    eax,ebx
c000d7ff:	66 f7 f7             	div    di
c000d802:	66 85 d2             	test   dx,dx
c000d805:	75 12                	jne    c000d819 <datetimeToSeconds(datetime_t)+0x8e>
c000d807:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000d80d:	bf 90 01 00 00       	mov    edi,0x190
c000d812:	99                   	cdq    
c000d813:	f7 ff                	idiv   edi
c000d815:	85 d2                	test   edx,edx
c000d817:	75 01                	jne    c000d81a <datetimeToSeconds(datetime_t)+0x8f>
c000d819:	41                   	inc    ecx
c000d81a:	66 83 fb 46          	cmp    bx,0x46
c000d81e:	76 45                	jbe    c000d865 <datetimeToSeconds(datetime_t)+0xda>
c000d820:	bb 46 00 00 00       	mov    ebx,0x46
c000d825:	bf 64 00 00 00       	mov    edi,0x64
c000d82a:	bd 90 01 00 00       	mov    ebp,0x190
c000d82f:	b8 6d 01 00 00       	mov    eax,0x16d
c000d834:	f6 c3 03             	test   bl,0x3
c000d837:	75 23                	jne    c000d85c <datetimeToSeconds(datetime_t)+0xd1>
c000d839:	89 d8                	mov    eax,ebx
c000d83b:	99                   	cdq    
c000d83c:	f7 ff                	idiv   edi
c000d83e:	b8 6e 01 00 00       	mov    eax,0x16e
c000d843:	85 d2                	test   edx,edx
c000d845:	75 15                	jne    c000d85c <datetimeToSeconds(datetime_t)+0xd1>
c000d847:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000d84d:	99                   	cdq    
c000d84e:	f7 fd                	idiv   ebp
c000d850:	83 fa 01             	cmp    edx,0x1
c000d853:	19 c0                	sbb    eax,eax
c000d855:	f7 d0                	not    eax
c000d857:	05 6e 01 00 00       	add    eax,0x16e
c000d85c:	01 c1                	add    ecx,eax
c000d85e:	43                   	inc    ebx
c000d85f:	39 f3                	cmp    ebx,esi
c000d861:	7c cc                	jl     c000d82f <datetimeToSeconds(datetime_t)+0xa4>
c000d863:	eb 35                	jmp    c000d89a <datetimeToSeconds(datetime_t)+0x10f>
c000d865:	74 33                	je     c000d89a <datetimeToSeconds(datetime_t)+0x10f>
c000d867:	b8 45 00 00 00       	mov    eax,0x45
c000d86c:	89 c2                	mov    edx,eax
c000d86e:	83 e2 03             	and    edx,0x3
c000d871:	39 f0                	cmp    eax,esi
c000d873:	7e 0f                	jle    c000d884 <datetimeToSeconds(datetime_t)+0xf9>
c000d875:	83 fa 01             	cmp    edx,0x1
c000d878:	19 d2                	sbb    edx,edx
c000d87a:	48                   	dec    eax
c000d87b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000d882:	eb e8                	jmp    c000d86c <datetimeToSeconds(datetime_t)+0xe1>
c000d884:	b8 6d 01 00 00       	mov    eax,0x16d
c000d889:	85 d2                	test   edx,edx
c000d88b:	75 0b                	jne    c000d898 <datetimeToSeconds(datetime_t)+0x10d>
c000d88d:	66 83 fb 01          	cmp    bx,0x1
c000d891:	19 c0                	sbb    eax,eax
c000d893:	05 6e 01 00 00       	add    eax,0x16e
c000d898:	29 c1                	sub    ecx,eax
c000d89a:	b8 80 51 01 00       	mov    eax,0x15180
c000d89f:	f7 e9                	imul   ecx
c000d8a1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d8a5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000d8a9:	83 c4 14             	add    esp,0x14
c000d8ac:	5b                   	pop    ebx
c000d8ad:	5e                   	pop    esi
c000d8ae:	5f                   	pop    edi
c000d8af:	5d                   	pop    ebp
c000d8b0:	c3                   	ret    
c000d8b1:	90                   	nop

c000d8b2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000d8b2:	57                   	push   edi
c000d8b3:	56                   	push   esi
c000d8b4:	53                   	push   ebx
c000d8b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8b9:	8b 06                	mov    eax,DWORD PTR [esi]
c000d8bb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000d8be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8c6:	e8 c0 fe ff ff       	call   c000d78b <datetimeToSeconds(datetime_t)>
c000d8cb:	59                   	pop    ecx
c000d8cc:	0f b6 0d 3c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002653c
c000d8d3:	5b                   	pop    ebx
c000d8d4:	03 0d 40 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026540
c000d8da:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d8e0:	89 cb                	mov    ebx,ecx
c000d8e2:	c1 fb 1f             	sar    ebx,0x1f
c000d8e5:	29 c8                	sub    eax,ecx
c000d8e7:	19 da                	sbb    edx,ebx
c000d8e9:	31 c9                	xor    ecx,ecx
c000d8eb:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000d8f2:	74 05                	je     c000d8f9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000d8f4:	b9 08 07 00 00       	mov    ecx,0x708
c000d8f9:	31 db                	xor    ebx,ebx
c000d8fb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d8ff:	29 c8                	sub    eax,ecx
c000d901:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d905:	19 da                	sbb    edx,ebx
c000d907:	89 f8                	mov    eax,edi
c000d909:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d90d:	5b                   	pop    ebx
c000d90e:	5e                   	pop    esi
c000d90f:	5f                   	pop    edi
c000d910:	ff e0                	jmp    eax

c000d912 <secondsToDatetime(unsigned long long)>:
c000d912:	55                   	push   ebp
c000d913:	57                   	push   edi
c000d914:	56                   	push   esi
c000d915:	53                   	push   ebx
c000d916:	83 ec 1c             	sub    esp,0x1c
c000d919:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d91d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d921:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d925:	6a 00                	push   0x0
c000d927:	68 80 51 01 00       	push   0x15180
c000d92c:	55                   	push   ebp
c000d92d:	57                   	push   edi
c000d92e:	e8 7d 3c 01 00       	call   c00215b0 <__udivdi3>
c000d933:	83 c4 10             	add    esp,0x10
c000d936:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000d93c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d940:	6a 00                	push   0x0
c000d942:	68 80 51 01 00       	push   0x15180
c000d947:	55                   	push   ebp
c000d948:	57                   	push   edi
c000d949:	bf 10 0e 00 00       	mov    edi,0xe10
c000d94e:	e8 5d 3d 01 00       	call   c00216b0 <__umoddi3>
c000d953:	83 c4 10             	add    esp,0x10
c000d956:	99                   	cdq    
c000d957:	f7 ff                	idiv   edi
c000d959:	bf 3c 00 00 00       	mov    edi,0x3c
c000d95e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000d961:	89 d0                	mov    eax,edx
c000d963:	99                   	cdq    
c000d964:	f7 ff                	idiv   edi
c000d966:	85 db                	test   ebx,ebx
c000d968:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000d96b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000d96e:	79 11                	jns    c000d981 <secondsToDatetime(unsigned long long)+0x6f>
c000d970:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d974:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000d97a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d97f:	eb 07                	jmp    c000d988 <secondsToDatetime(unsigned long long)+0x76>
c000d981:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d986:	89 d8                	mov    eax,ebx
c000d988:	bf b4 05 00 00       	mov    edi,0x5b4
c000d98d:	99                   	cdq    
c000d98e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000d993:	f7 f9                	idiv   ecx
c000d995:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000d99a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d99e:	31 d2                	xor    edx,edx
c000d9a0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000d9a8:	01 c3                	add    ebx,eax
c000d9aa:	89 d8                	mov    eax,ebx
c000d9ac:	f7 f1                	div    ecx
c000d9ae:	31 d2                	xor    edx,edx
c000d9b0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000d9b3:	89 d8                	mov    eax,ebx
c000d9b5:	f7 f7                	div    edi
c000d9b7:	31 d2                	xor    edx,edx
c000d9b9:	29 c1                	sub    ecx,eax
c000d9bb:	89 d8                	mov    eax,ebx
c000d9bd:	f7 f5                	div    ebp
c000d9bf:	bd 6d 01 00 00       	mov    ebp,0x16d
c000d9c4:	29 c1                	sub    ecx,eax
c000d9c6:	31 d2                	xor    edx,edx
c000d9c8:	89 c8                	mov    eax,ecx
c000d9ca:	f7 f5                	div    ebp
c000d9cc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000d9d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9d5:	31 d2                	xor    edx,edx
c000d9d7:	89 c8                	mov    eax,ecx
c000d9d9:	f7 f5                	div    ebp
c000d9db:	31 d2                	xor    edx,edx
c000d9dd:	01 c3                	add    ebx,eax
c000d9df:	89 c8                	mov    eax,ecx
c000d9e1:	f7 f7                	div    edi
c000d9e3:	bf 99 00 00 00       	mov    edi,0x99
c000d9e8:	29 c3                	sub    ebx,eax
c000d9ea:	31 d2                	xor    edx,edx
c000d9ec:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000d9f4:	29 c3                	sub    ebx,eax
c000d9f6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d9f9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d9fc:	bb 05 00 00 00       	mov    ebx,0x5
c000da01:	83 c1 02             	add    ecx,0x2
c000da04:	89 c8                	mov    eax,ecx
c000da06:	f7 f7                	div    edi
c000da08:	31 d2                	xor    edx,edx
c000da0a:	89 c7                	mov    edi,eax
c000da0c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000da12:	83 c0 02             	add    eax,0x2
c000da15:	f7 f3                	div    ebx
c000da17:	89 eb                	mov    ebx,ebp
c000da19:	29 c3                	sub    ebx,eax
c000da1b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000da21:	88 1e                	mov    BYTE PTR [esi],bl
c000da23:	19 c0                	sbb    eax,eax
c000da25:	31 d2                	xor    edx,edx
c000da27:	83 e0 0c             	and    eax,0xc
c000da2a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000da2e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000da36:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000da3a:	83 f9 01             	cmp    ecx,0x1
c000da3d:	0f 96 c2             	setbe  dl
c000da40:	41                   	inc    ecx
c000da41:	01 d0                	add    eax,edx
c000da43:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000da46:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000da4a:	83 c4 1c             	add    esp,0x1c
c000da4d:	89 f0                	mov    eax,esi
c000da4f:	5b                   	pop    ebx
c000da50:	5e                   	pop    esi
c000da51:	5f                   	pop    edi
c000da52:	5d                   	pop    ebp
c000da53:	c2 04 00             	ret    0x4

c000da56 <Clock::timeInDatetimeLocal()>:
c000da56:	53                   	push   ebx
c000da57:	83 ec 14             	sub    esp,0x14
c000da5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000da5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da62:	e8 83 fc ff ff       	call   c000d6ea <Clock::timeInSecondsLocal()>
c000da67:	83 c4 0c             	add    esp,0xc
c000da6a:	52                   	push   edx
c000da6b:	50                   	push   eax
c000da6c:	53                   	push   ebx
c000da6d:	e8 a0 fe ff ff       	call   c000d912 <secondsToDatetime(unsigned long long)>
c000da72:	89 d8                	mov    eax,ebx
c000da74:	83 c4 14             	add    esp,0x14
c000da77:	5b                   	pop    ebx
c000da78:	c2 04 00             	ret    0x4
c000da7b:	90                   	nop

c000da7c <Device::hibernate()>:
c000da7c:	c3                   	ret    
c000da7d:	90                   	nop

c000da7e <Device::wake()>:
c000da7e:	c3                   	ret    
c000da7f:	90                   	nop

c000da80 <Device::detect()>:
c000da80:	c3                   	ret    
c000da81:	90                   	nop

c000da82 <Device::disableLegacy()>:
c000da82:	c3                   	ret    
c000da83:	90                   	nop

c000da84 <Device::powerSaving(PowerSavingLevel)>:
c000da84:	c3                   	ret    
c000da85:	90                   	nop

c000da86 <DriverlessDevice::close(int, int, void*)>:
c000da86:	31 c0                	xor    eax,eax
c000da88:	c3                   	ret    
c000da89:	90                   	nop

c000da8a <DriverlessDevice::detect()>:
c000da8a:	c3                   	ret    
c000da8b:	90                   	nop

c000da8c <DriverlessDevice::open(int, int, void*)>:
c000da8c:	83 ec 18             	sub    esp,0x18
c000da8f:	68 70 36 02 c0       	push   0xc0023670
c000da94:	e8 f2 4f 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000da99:	83 c8 ff             	or     eax,0xffffffff
c000da9c:	83 c4 1c             	add    esp,0x1c
c000da9f:	c3                   	ret    

c000daa0 <Device::~Device()>:
c000daa0:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c000daa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daa9:	89 10                	mov    DWORD PTR [eax],edx
c000daab:	90                   	nop
c000daac:	c3                   	ret    
c000daad:	90                   	nop

c000daae <Device::~Device()>:
c000daae:	83 ec 0c             	sub    esp,0xc
c000dab1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dab5:	e8 e6 ff ff ff       	call   c000daa0 <Device::~Device()>
c000daba:	83 c4 04             	add    esp,0x4
c000dabd:	83 ec 08             	sub    esp,0x8
c000dac0:	68 58 01 00 00       	push   0x158
c000dac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac9:	e8 72 eb ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000dace:	83 c4 10             	add    esp,0x10
c000dad1:	83 c4 0c             	add    esp,0xc
c000dad4:	c3                   	ret    
c000dad5:	90                   	nop

c000dad6 <Device::findAndLoadDriver()>:
c000dad6:	c7 44 24 04 8e 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc002368e
c000dade:	e9 3e ec ff ff       	jmp    c000c721 <Dbg::kprintf(char const*, ...)>
c000dae3:	90                   	nop

c000dae4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000dae4:	57                   	push   edi
c000dae5:	b9 09 00 00 00       	mov    ecx,0x9
c000daea:	56                   	push   esi
c000daeb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000daef:	8d 74 24 10          	lea    esi,[esp+0x10]
c000daf3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dafd:	81 c7 18 01 00 00    	add    edi,0x118
c000db03:	fc                   	cld    
c000db04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000db06:	5e                   	pop    esi
c000db07:	5f                   	pop    edi
c000db08:	c3                   	ret    
c000db09:	90                   	nop

c000db0a <Device::preOpenACPI(void*, char*, char*)>:
c000db0a:	57                   	push   edi
c000db0b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000db10:	56                   	push   esi
c000db11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db19:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000db23:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000db29:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000db2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000db33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db35:	b9 0e 00 00 00       	mov    ecx,0xe
c000db3a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000db40:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000db44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db46:	5e                   	pop    esi
c000db47:	5f                   	pop    edi
c000db48:	c3                   	ret    
c000db49:	90                   	nop

c000db4a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000db4a:	53                   	push   ebx
c000db4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000db57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db5b:	0f b6 c0             	movzx  eax,al
c000db5e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000db62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000db6e:	5b                   	pop    ebx
c000db6f:	e9 10 06 00 00       	jmp    c000e184 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000db74 <Device::getParent()>:
c000db74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db78:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000db7e:	c3                   	ret    
c000db7f:	90                   	nop

c000db80 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000db80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db88:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000db8d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000db91:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db99:	e9 45 07 00 00       	jmp    c000e2e3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000db9e <Device::addChild(Device*)>:
c000db9e:	53                   	push   ebx
c000db9f:	83 ec 08             	sub    esp,0x8
c000dba2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dba6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dbaa:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000dbb0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000dbb6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dbb8:	85 d2                	test   edx,edx
c000dbba:	74 04                	je     c000dbc0 <Device::addChild(Device*)+0x22>
c000dbbc:	89 d3                	mov    ebx,edx
c000dbbe:	eb f6                	jmp    c000dbb6 <Device::addChild(Device*)+0x18>
c000dbc0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dbc3:	83 ec 0c             	sub    esp,0xc
c000dbc6:	6a 08                	push   0x8
c000dbc8:	e8 ca bb ff ff       	call   c0009797 <malloc>
c000dbcd:	89 03                	mov    DWORD PTR [ebx],eax
c000dbcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dbd5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dbdc:	83 c4 18             	add    esp,0x18
c000dbdf:	5b                   	pop    ebx
c000dbe0:	c3                   	ret    
c000dbe1:	90                   	nop

c000dbe2 <Device::removeAllChildren()>:
c000dbe2:	56                   	push   esi
c000dbe3:	53                   	push   ebx
c000dbe4:	52                   	push   edx
c000dbe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbe9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000dbef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dbf2:	74 17                	je     c000dc0b <Device::removeAllChildren()+0x29>
c000dbf4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dbf7:	85 c0                	test   eax,eax
c000dbf9:	74 0c                	je     c000dc07 <Device::removeAllChildren()+0x25>
c000dbfb:	83 ec 0c             	sub    esp,0xc
c000dbfe:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc00:	50                   	push   eax
c000dc01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000dc04:	83 c4 10             	add    esp,0x10
c000dc07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc09:	eb e4                	jmp    c000dbef <Device::removeAllChildren()+0xd>
c000dc0b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dc11:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dc17:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dc1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dc24:	58                   	pop    eax
c000dc25:	5b                   	pop    ebx
c000dc26:	5e                   	pop    esi
c000dc27:	c3                   	ret    

c000dc28 <Device::hibernateAll()>:
c000dc28:	53                   	push   ebx
c000dc29:	83 ec 14             	sub    esp,0x14
c000dc2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc30:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc32:	53                   	push   ebx
c000dc33:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dc36:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc42:	74 0f                	je     c000dc53 <Device::hibernateAll()+0x2b>
c000dc44:	83 ec 0c             	sub    esp,0xc
c000dc47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc4a:	e8 d9 ff ff ff       	call   c000dc28 <Device::hibernateAll()>
c000dc4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc51:	eb e9                	jmp    c000dc3c <Device::hibernateAll()+0x14>
c000dc53:	83 c4 08             	add    esp,0x8
c000dc56:	5b                   	pop    ebx
c000dc57:	c3                   	ret    

c000dc58 <Device::wakeAll()>:
c000dc58:	53                   	push   ebx
c000dc59:	83 ec 14             	sub    esp,0x14
c000dc5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc60:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc62:	53                   	push   ebx
c000dc63:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000dc66:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc72:	74 0f                	je     c000dc83 <Device::wakeAll()+0x2b>
c000dc74:	83 ec 0c             	sub    esp,0xc
c000dc77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc7a:	e8 d9 ff ff ff       	call   c000dc58 <Device::wakeAll()>
c000dc7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc81:	eb e9                	jmp    c000dc6c <Device::wakeAll()+0x14>
c000dc83:	83 c4 08             	add    esp,0x8
c000dc86:	5b                   	pop    ebx
c000dc87:	c3                   	ret    

c000dc88 <Device::detectAll()>:
c000dc88:	53                   	push   ebx
c000dc89:	83 ec 14             	sub    esp,0x14
c000dc8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc90:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc92:	53                   	push   ebx
c000dc93:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dc96:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc9c:	83 c4 10             	add    esp,0x10
c000dc9f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dca2:	74 0f                	je     c000dcb3 <Device::detectAll()+0x2b>
c000dca4:	83 ec 0c             	sub    esp,0xc
c000dca7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dcaa:	e8 d9 ff ff ff       	call   c000dc88 <Device::detectAll()>
c000dcaf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dcb1:	eb e9                	jmp    c000dc9c <Device::detectAll()+0x14>
c000dcb3:	83 c4 08             	add    esp,0x8
c000dcb6:	5b                   	pop    ebx
c000dcb7:	c3                   	ret    

c000dcb8 <Device::disableLegacyAll()>:
c000dcb8:	53                   	push   ebx
c000dcb9:	83 ec 14             	sub    esp,0x14
c000dcbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dcc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcc2:	53                   	push   ebx
c000dcc3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dcc6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dccc:	83 c4 10             	add    esp,0x10
c000dccf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dcd2:	74 0f                	je     c000dce3 <Device::disableLegacyAll()+0x2b>
c000dcd4:	83 ec 0c             	sub    esp,0xc
c000dcd7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dcda:	e8 d9 ff ff ff       	call   c000dcb8 <Device::disableLegacyAll()>
c000dcdf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dce1:	eb e9                	jmp    c000dccc <Device::disableLegacyAll()+0x14>
c000dce3:	83 c4 08             	add    esp,0x8
c000dce6:	5b                   	pop    ebx
c000dce7:	c3                   	ret    

c000dce8 <Device::loadDriversForAll()>:
c000dce8:	53                   	push   ebx
c000dce9:	83 ec 08             	sub    esp,0x8
c000dcec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcf0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000dcf7:	75 0c                	jne    c000dd05 <Device::loadDriversForAll()+0x1d>
c000dcf9:	83 ec 0c             	sub    esp,0xc
c000dcfc:	53                   	push   ebx
c000dcfd:	e8 d4 fd ff ff       	call   c000dad6 <Device::findAndLoadDriver()>
c000dd02:	83 c4 10             	add    esp,0x10
c000dd05:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd0e:	74 12                	je     c000dd22 <Device::loadDriversForAll()+0x3a>
c000dd10:	83 ec 0c             	sub    esp,0xc
c000dd13:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd16:	e8 cd ff ff ff       	call   c000dce8 <Device::loadDriversForAll()>
c000dd1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd1d:	83 c4 10             	add    esp,0x10
c000dd20:	eb e9                	jmp    c000dd0b <Device::loadDriversForAll()+0x23>
c000dd22:	83 c4 08             	add    esp,0x8
c000dd25:	5b                   	pop    ebx
c000dd26:	c3                   	ret    
c000dd27:	90                   	nop

c000dd28 <Device::closeAll()>:
c000dd28:	53                   	push   ebx
c000dd29:	83 ec 08             	sub    esp,0x8
c000dd2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd30:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd32:	6a 00                	push   0x0
c000dd34:	6a 00                	push   0x0
c000dd36:	6a 00                	push   0x0
c000dd38:	53                   	push   ebx
c000dd39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd42:	83 c4 10             	add    esp,0x10
c000dd45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd48:	74 0f                	je     c000dd59 <Device::closeAll()+0x31>
c000dd4a:	83 ec 0c             	sub    esp,0xc
c000dd4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd50:	e8 d3 ff ff ff       	call   c000dd28 <Device::closeAll()>
c000dd55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd57:	eb e9                	jmp    c000dd42 <Device::closeAll()+0x1a>
c000dd59:	83 c4 08             	add    esp,0x8
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <Device::powerSavingAll(PowerSavingLevel)>:
c000dd5e:	56                   	push   esi
c000dd5f:	53                   	push   ebx
c000dd60:	83 ec 0c             	sub    esp,0xc
c000dd63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd67:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000dd6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd6d:	56                   	push   esi
c000dd6e:	53                   	push   ebx
c000dd6f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000dd72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd78:	83 c4 10             	add    esp,0x10
c000dd7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd7e:	74 0f                	je     c000dd8f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000dd80:	52                   	push   edx
c000dd81:	52                   	push   edx
c000dd82:	56                   	push   esi
c000dd83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd86:	e8 d3 ff ff ff       	call   c000dd5e <Device::powerSavingAll(PowerSavingLevel)>
c000dd8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd8d:	eb e9                	jmp    c000dd78 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000dd8f:	58                   	pop    eax
c000dd90:	5b                   	pop    ebx
c000dd91:	5e                   	pop    esi
c000dd92:	c3                   	ret    
c000dd93:	90                   	nop

c000dd94 <Device::setName(char const*)>:
c000dd94:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000dd9c:	e9 c3 27 ff ff       	jmp    c0000564 <strcpy>
c000dda1:	90                   	nop

c000dda2 <Device::Device(char const*)>:
c000dda2:	83 ec 1c             	sub    esp,0x1c
c000dda5:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c000ddaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddae:	89 10                	mov    DWORD PTR [eax],edx
c000ddb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000ddbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ddcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddd0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ddda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddde:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000dde8:	83 ec 08             	sub    esp,0x8
c000ddeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf3:	e8 9c ff ff ff       	call   c000dd94 <Device::setName(char const*)>
c000ddf8:	83 c4 10             	add    esp,0x10
c000ddfb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000de03:	83 ec 0c             	sub    esp,0xc
c000de06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de0a:	e8 88 b9 ff ff       	call   c0009797 <malloc>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000de18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000de1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de23:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000de29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000de33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000de39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000de43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000de4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de4e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000de55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de59:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000de60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de64:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000de6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de72:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000de7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de80:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000de8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de8e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000de98:	90                   	nop
c000de99:	83 c4 1c             	add    esp,0x1c
c000de9c:	c3                   	ret    
c000de9d:	90                   	nop

c000de9e <Device::getName()>:
c000de9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dea2:	05 d0 00 00 00       	add    eax,0xd0
c000dea7:	c3                   	ret    

c000dea8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000dea8:	83 ec 0c             	sub    esp,0xc
c000deab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deaf:	83 ec 08             	sub    esp,0x8
c000deb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb6:	50                   	push   eax
c000deb7:	e8 e6 fe ff ff       	call   c000dda2 <Device::Device(char const*)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	ba fc 36 02 c0       	mov    edx,0xc00236fc
c000dec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec8:	89 10                	mov    DWORD PTR [eax],edx
c000deca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dece:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000ded8:	90                   	nop
c000ded9:	83 c4 0c             	add    esp,0xc
c000dedc:	c3                   	ret    
c000dedd:	90                   	nop

c000dede <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000dede:	57                   	push   edi
c000dedf:	56                   	push   esi
c000dee0:	53                   	push   ebx
c000dee1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dee5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dee9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000deed:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000def3:	75 0c                	jne    c000df01 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000def5:	52                   	push   edx
c000def6:	52                   	push   edx
c000def7:	53                   	push   ebx
c000def8:	56                   	push   esi
c000def9:	e8 64 3b 01 00       	call   c0021a62 <LinkedList<Device>::addElement(Device*)>
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df0a:	74 12                	je     c000df1e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000df0c:	50                   	push   eax
c000df0d:	57                   	push   edi
c000df0e:	56                   	push   esi
c000df0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df12:	e8 c7 ff ff ff       	call   c000dede <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000df17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df19:	83 c4 10             	add    esp,0x10
c000df1c:	eb e9                	jmp    c000df07 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000df1e:	5b                   	pop    ebx
c000df1f:	5e                   	pop    esi
c000df20:	5f                   	pop    edi
c000df21:	c3                   	ret    

c000df22 <getDevicesOfType(DeviceType)>:
c000df22:	53                   	push   ebx
c000df23:	83 ec 14             	sub    esp,0x14
c000df26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df2a:	53                   	push   ebx
c000df2b:	e8 0e 3c 01 00       	call   c0021b3e <LinkedList<Device>::LinkedList()>
c000df30:	83 c4 0c             	add    esp,0xc
c000df33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df37:	53                   	push   ebx
c000df38:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c000df3e:	e8 9b ff ff ff       	call   c000dede <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000df43:	89 d8                	mov    eax,ebx
c000df45:	83 c4 18             	add    esp,0x18
c000df48:	5b                   	pop    ebx
c000df49:	c2 04 00             	ret    0x4

c000df4c <HardDiskController::HardDiskController(char const*)>:
c000df4c:	83 ec 0c             	sub    esp,0xc
c000df4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df53:	83 ec 08             	sub    esp,0x8
c000df56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5a:	50                   	push   eax
c000df5b:	e8 42 fe ff ff       	call   c000dda2 <Device::Device(char const*)>
c000df60:	83 c4 10             	add    esp,0x10
c000df63:	ba 28 37 02 c0       	mov    edx,0xc0023728
c000df68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6c:	89 10                	mov    DWORD PTR [eax],edx
c000df6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df72:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000df7c:	90                   	nop
c000df7d:	83 c4 0c             	add    esp,0xc
c000df80:	c3                   	ret    
c000df81:	90                   	nop
c000df82:	66 90                	xchg   ax,ax

c000df84 <HardDiskController::~HardDiskController()>:
c000df84:	83 ec 0c             	sub    esp,0xc
c000df87:	ba 28 37 02 c0       	mov    edx,0xc0023728
c000df8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df90:	89 10                	mov    DWORD PTR [eax],edx
c000df92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df96:	83 ec 0c             	sub    esp,0xc
c000df99:	50                   	push   eax
c000df9a:	e8 01 fb ff ff       	call   c000daa0 <Device::~Device()>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	90                   	nop
c000dfa3:	83 c4 0c             	add    esp,0xc
c000dfa6:	c3                   	ret    
c000dfa7:	90                   	nop

c000dfa8 <HardDiskController::~HardDiskController()>:
c000dfa8:	83 ec 0c             	sub    esp,0xc
c000dfab:	83 ec 0c             	sub    esp,0xc
c000dfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb2:	e8 cd ff ff ff       	call   c000df84 <HardDiskController::~HardDiskController()>
c000dfb7:	83 c4 10             	add    esp,0x10
c000dfba:	83 ec 08             	sub    esp,0x8
c000dfbd:	68 58 01 00 00       	push   0x158
c000dfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc6:	e8 75 e6 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	83 c4 0c             	add    esp,0xc
c000dfd1:	c3                   	ret    

c000dfd2 <PhysicalDisk::eject()>:
c000dfd2:	83 c8 ff             	or     eax,0xffffffff
c000dfd5:	c3                   	ret    

c000dfd6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000dfd6:	83 ec 0c             	sub    esp,0xc
c000dfd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdd:	83 ec 08             	sub    esp,0x8
c000dfe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe4:	50                   	push   eax
c000dfe5:	e8 b8 fd ff ff       	call   c000dda2 <Device::Device(char const*)>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	ba 54 37 02 c0       	mov    edx,0xc0023754
c000dff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff6:	89 10                	mov    DWORD PTR [eax],edx
c000dff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e007:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e012:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e020:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e024:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e038:	90                   	nop
c000e039:	83 c4 0c             	add    esp,0xc
c000e03c:	c3                   	ret    
c000e03d:	90                   	nop

c000e03e <PhysicalDisk::startCache()>:
c000e03e:	56                   	push   esi
c000e03f:	53                   	push   ebx
c000e040:	83 ec 10             	sub    esp,0x10
c000e043:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e047:	6a 44                	push   0x44
c000e049:	e8 49 b7 ff ff       	call   c0009797 <malloc>
c000e04e:	89 c6                	mov    esi,eax
c000e050:	58                   	pop    eax
c000e051:	5a                   	pop    edx
c000e052:	53                   	push   ebx
c000e053:	56                   	push   esi
c000e054:	e8 c7 15 00 00       	call   c000f620 <VCache::VCache(PhysicalDisk*)>
c000e059:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e05f:	83 c4 14             	add    esp,0x14
c000e062:	5b                   	pop    ebx
c000e063:	5e                   	pop    esi
c000e064:	c3                   	ret    
c000e065:	90                   	nop

c000e066 <PhysicalDisk::~PhysicalDisk()>:
c000e066:	83 ec 0c             	sub    esp,0xc
c000e069:	ba 54 37 02 c0       	mov    edx,0xc0023754
c000e06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e072:	89 10                	mov    DWORD PTR [eax],edx
c000e074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	50                   	push   eax
c000e07c:	e8 1f fa ff ff       	call   c000daa0 <Device::~Device()>
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	90                   	nop
c000e085:	83 c4 0c             	add    esp,0xc
c000e088:	c3                   	ret    
c000e089:	90                   	nop

c000e08a <PhysicalDisk::~PhysicalDisk()>:
c000e08a:	83 ec 0c             	sub    esp,0xc
c000e08d:	83 ec 0c             	sub    esp,0xc
c000e090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e094:	e8 cd ff ff ff       	call   c000e066 <PhysicalDisk::~PhysicalDisk()>
c000e099:	83 c4 10             	add    esp,0x10
c000e09c:	83 ec 08             	sub    esp,0x8
c000e09f:	68 6c 01 00 00       	push   0x16c
c000e0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a8:	e8 93 e5 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000e0ad:	83 c4 10             	add    esp,0x10
c000e0b0:	83 c4 0c             	add    esp,0xc
c000e0b3:	c3                   	ret    

c000e0b4 <int_handler>:
c000e0b4:	55                   	push   ebp
c000e0b5:	57                   	push   edi
c000e0b6:	56                   	push   esi
c000e0b7:	53                   	push   ebx
c000e0b8:	83 ec 0c             	sub    esp,0xc
c000e0bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e0bf:	80 3d e4 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028ee4,0x0
c000e0c6:	74 0b                	je     c000e0d3 <int_handler+0x1f>
c000e0c8:	fa                   	cli    
c000e0c9:	f4                   	hlt    
c000e0ca:	80 3d e4 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028ee4,0x0
c000e0d1:	75 f5                	jne    c000e0c8 <int_handler+0x14>
c000e0d3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000e0d6:	8d 46 e0             	lea    eax,[esi-0x20]
c000e0d9:	83 f8 17             	cmp    eax,0x17
c000e0dc:	76 3e                	jbe    c000e11c <int_handler+0x68>
c000e0de:	c1 e6 04             	shl    esi,0x4
c000e0e1:	31 db                	xor    ebx,ebx
c000e0e3:	8d ae 60 75 02 c0    	lea    ebp,[esi-0x3ffd8aa0]
c000e0e9:	81 c6 60 65 02 c0    	add    esi,0xc0026560
c000e0ef:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e0f3:	85 c0                	test   eax,eax
c000e0f5:	74 13                	je     c000e10a <int_handler+0x56>
c000e0f7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000e0fa:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000e0fe:	74 2a                	je     c000e12a <int_handler+0x76>
c000e100:	83 ec 08             	sub    esp,0x8
c000e103:	52                   	push   edx
c000e104:	57                   	push   edi
c000e105:	ff d0                	call   eax
c000e107:	83 c4 10             	add    esp,0x10
c000e10a:	43                   	inc    ebx
c000e10b:	83 fb 04             	cmp    ebx,0x4
c000e10e:	75 df                	jne    c000e0ef <int_handler+0x3b>
c000e110:	83 c4 0c             	add    esp,0xc
c000e113:	31 c0                	xor    eax,eax
c000e115:	5b                   	pop    ebx
c000e116:	31 d2                	xor    edx,edx
c000e118:	5e                   	pop    esi
c000e119:	5f                   	pop    edi
c000e11a:	5d                   	pop    ebp
c000e11b:	c3                   	ret    
c000e11c:	83 ec 0c             	sub    esp,0xc
c000e11f:	50                   	push   eax
c000e120:	e8 bd b6 00 00       	call   c00197e2 <Hal::endOfInterrupt(int)>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	eb b4                	jmp    c000e0de <int_handler+0x2a>
c000e12a:	83 ec 08             	sub    esp,0x8
c000e12d:	52                   	push   edx
c000e12e:	57                   	push   edi
c000e12f:	ff d0                	call   eax
c000e131:	83 c4 10             	add    esp,0x10
c000e134:	83 c4 0c             	add    esp,0xc
c000e137:	5b                   	pop    ebx
c000e138:	5e                   	pop    esi
c000e139:	5f                   	pop    edi
c000e13a:	5d                   	pop    ebp
c000e13b:	c3                   	ret    

c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e13c:	56                   	push   esi
c000e13d:	31 c0                	xor    eax,eax
c000e13f:	53                   	push   ebx
c000e140:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e144:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e148:	89 ca                	mov    edx,ecx
c000e14a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e14e:	c1 e2 04             	shl    edx,0x4
c000e151:	83 bc 82 60 75 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8aa0],0x0
c000e159:	74 15                	je     c000e170 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000e15b:	40                   	inc    eax
c000e15c:	83 f8 04             	cmp    eax,0x4
c000e15f:	75 f0                	jne    c000e151 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000e161:	c7 44 24 0c 84 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023784
c000e169:	5b                   	pop    ebx
c000e16a:	5e                   	pop    esi
c000e16b:	e9 1b 49 00 00       	jmp    c0012a8b <Krnl::panic(char const*)>
c000e170:	8d 04 88             	lea    eax,[eax+ecx*4]
c000e173:	89 1c 85 60 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8aa0],ebx
c000e17a:	89 34 85 60 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9aa0],esi
c000e181:	5b                   	pop    ebx
c000e182:	5e                   	pop    esi
c000e183:	c3                   	ret    

c000e184 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e184:	57                   	push   edi
c000e185:	8b 15 48 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026448
c000e18b:	56                   	push   esi
c000e18c:	53                   	push   ebx
c000e18d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e191:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e195:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e19c:	74 55                	je     c000e1f3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e19e:	89 c7                	mov    edi,eax
c000e1a0:	84 c0                	test   al,al
c000e1a2:	74 1e                	je     c000e1c2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e1a4:	83 fe 0f             	cmp    esi,0xf
c000e1a7:	0f 8f cc 00 00 00    	jg     c000e279 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000e1ad:	0f b6 b6 60 5b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda4a0]
c000e1b4:	66 8b bc 36 00 8d 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffd7300]
c000e1bc:	66 d1 ef             	shr    di,1
c000e1bf:	83 e7 01             	and    edi,0x1
c000e1c2:	83 ec 08             	sub    esp,0x8
c000e1c5:	31 db                	xor    ebx,ebx
c000e1c7:	ff 35 80 a3 02 c0    	push   DWORD PTR ds:0xc002a380
c000e1cd:	68 91 37 02 c0       	push   0xc0023791
c000e1d2:	e8 4a e5 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	a1 80 a3 02 c0       	mov    eax,ds:0xc002a380
c000e1df:	85 c0                	test   eax,eax
c000e1e1:	7f 51                	jg     c000e234 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000e1e3:	83 ec 0c             	sub    esp,0xc
c000e1e6:	68 a8 37 02 c0       	push   0xc00237a8
c000e1eb:	e8 9b 48 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000e1f0:	83 c4 10             	add    esp,0x10
c000e1f3:	8d 4e 20             	lea    ecx,[esi+0x20]
c000e1f6:	31 d2                	xor    edx,edx
c000e1f8:	89 c8                	mov    eax,ecx
c000e1fa:	c1 e0 04             	shl    eax,0x4
c000e1fd:	8b 9c 90 60 75 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffd8aa0]
c000e204:	85 db                	test   ebx,ebx
c000e206:	0f 84 84 00 00 00    	je     c000e290 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000e20c:	42                   	inc    edx
c000e20d:	83 fa 04             	cmp    edx,0x4
c000e210:	75 eb                	jne    c000e1fd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000e212:	83 ec 0c             	sub    esp,0xc
c000e215:	68 fc 37 02 c0       	push   0xc00237fc
c000e21a:	e8 6c 48 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000e21f:	83 c4 10             	add    esp,0x10
c000e222:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e227:	5b                   	pop    ebx
c000e228:	5e                   	pop    esi
c000e229:	5f                   	pop    edi
c000e22a:	c3                   	ret    
c000e22b:	43                   	inc    ebx
c000e22c:	39 1d 80 a3 02 c0    	cmp    DWORD PTR ds:0xc002a380,ebx
c000e232:	7e af                	jle    c000e1e3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000e234:	83 ec 08             	sub    esp,0x8
c000e237:	56                   	push   esi
c000e238:	ff 34 9d a0 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5c60]
c000e23f:	e8 58 28 01 00       	call   c0020a9c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000e244:	83 c4 10             	add    esp,0x10
c000e247:	84 c0                	test   al,al
c000e249:	74 e0                	je     c000e22b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000e24b:	50                   	push   eax
c000e24c:	89 f8                	mov    eax,edi
c000e24e:	0f b6 f8             	movzx  edi,al
c000e251:	8d 46 20             	lea    eax,[esi+0x20]
c000e254:	57                   	push   edi
c000e255:	0f b6 c0             	movzx  eax,al
c000e258:	6a 00                	push   0x0
c000e25a:	50                   	push   eax
c000e25b:	89 f0                	mov    eax,esi
c000e25d:	6a 00                	push   0x0
c000e25f:	0f b6 c0             	movzx  eax,al
c000e262:	6a 00                	push   0x0
c000e264:	50                   	push   eax
c000e265:	ff 34 9d a0 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5c60]
c000e26c:	e8 a7 29 01 00       	call   c0020c18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000e271:	83 c4 20             	add    esp,0x20
c000e274:	e9 7a ff ff ff       	jmp    c000e1f3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e279:	83 ec 0c             	sub    esp,0xc
c000e27c:	31 ff                	xor    edi,edi
c000e27e:	68 c4 37 02 c0       	push   0xc00237c4
c000e283:	e8 03 48 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000e288:	83 c4 10             	add    esp,0x10
c000e28b:	e9 32 ff ff ff       	jmp    c000e1c2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e290:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000e293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e297:	89 14 85 60 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8aa0],edx
c000e29e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2a2:	5b                   	pop    ebx
c000e2a3:	89 14 85 60 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9aa0],edx
c000e2aa:	89 f0                	mov    eax,esi
c000e2ac:	5e                   	pop    esi
c000e2ad:	5f                   	pop    edi
c000e2ae:	c3                   	ret    

c000e2af <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e2af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e2b7:	c1 e0 04             	shl    eax,0x4
c000e2ba:	8d 50 10             	lea    edx,[eax+0x10]
c000e2bd:	39 88 60 75 02 c0    	cmp    DWORD PTR [eax-0x3ffd8aa0],ecx
c000e2c3:	74 08                	je     c000e2cd <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000e2c5:	83 c0 04             	add    eax,0x4
c000e2c8:	39 d0                	cmp    eax,edx
c000e2ca:	75 f1                	jne    c000e2bd <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000e2cc:	c3                   	ret    
c000e2cd:	c7 80 60 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8aa0],0x0
c000e2d7:	c7 80 60 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9aa0],0x0
c000e2e1:	eb e2                	jmp    c000e2c5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000e2e3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e2e3:	53                   	push   ebx
c000e2e4:	83 ec 08             	sub    esp,0x8
c000e2e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e2eb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e2f0:	74 0e                	je     c000e300 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e2f2:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000e2f7:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000e2fe:	75 37                	jne    c000e337 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000e300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e304:	83 c0 20             	add    eax,0x20
c000e307:	c1 e0 04             	shl    eax,0x4
c000e30a:	8d 50 10             	lea    edx,[eax+0x10]
c000e30d:	39 98 60 75 02 c0    	cmp    DWORD PTR [eax-0x3ffd8aa0],ebx
c000e313:	74 0c                	je     c000e321 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000e315:	83 c0 04             	add    eax,0x4
c000e318:	39 d0                	cmp    eax,edx
c000e31a:	75 f1                	jne    c000e30d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000e31c:	83 c4 08             	add    esp,0x8
c000e31f:	5b                   	pop    ebx
c000e320:	c3                   	ret    
c000e321:	c7 80 60 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8aa0],0x0
c000e32b:	c7 80 60 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9aa0],0x0
c000e335:	eb de                	jmp    c000e315 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000e337:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000e33c:	7f 11                	jg     c000e34f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000e33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e342:	0f b6 80 60 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda4a0]
c000e349:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e34d:	eb b1                	jmp    c000e300 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	68 b5 37 02 c0       	push   0xc00237b5
c000e357:	e8 2f 47 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000e35c:	83 c4 10             	add    esp,0x10
c000e35f:	eb 9f                	jmp    c000e300 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000e361 <setupINTS()>:
c000e361:	31 c0                	xor    eax,eax
c000e363:	c7 80 60 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8aa0],0x0
c000e36d:	c7 80 60 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9aa0],0x0
c000e377:	c7 80 64 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a9c],0x0
c000e381:	c7 80 64 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a9c],0x0
c000e38b:	c7 80 68 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a98],0x0
c000e395:	c7 80 68 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a98],0x0
c000e39f:	c7 80 6c 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a94],0x0
c000e3a9:	c7 80 6c 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a94],0x0
c000e3b3:	83 c0 10             	add    eax,0x10
c000e3b6:	3d 00 10 00 00       	cmp    eax,0x1000
c000e3bb:	75 a6                	jne    c000e363 <setupINTS()+0x2>
c000e3bd:	c3                   	ret    

c000e3be <convertLegacyIRQNumber(int)>:
c000e3be:	83 ec 0c             	sub    esp,0xc
c000e3c1:	8b 15 48 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026448
c000e3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e3d2:	74 0c                	je     c000e3e0 <convertLegacyIRQNumber(int)+0x22>
c000e3d4:	83 f8 0f             	cmp    eax,0xf
c000e3d7:	7f 0b                	jg     c000e3e4 <convertLegacyIRQNumber(int)+0x26>
c000e3d9:	0f b6 80 60 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda4a0]
c000e3e0:	83 c4 0c             	add    esp,0xc
c000e3e3:	c3                   	ret    
c000e3e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e3e8:	83 ec 0c             	sub    esp,0xc
c000e3eb:	68 c4 37 02 c0       	push   0xc00237c4
c000e3f0:	e8 96 46 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000e3f5:	83 c4 10             	add    esp,0x10
c000e3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fc:	83 c4 0c             	add    esp,0xc
c000e3ff:	c3                   	ret    

c000e400 <startGUI(void*)>:
c000e400:	55                   	push   ebp
c000e401:	89 e5                	mov    ebp,esp
c000e403:	53                   	push   ebx
c000e404:	83 ec 04             	sub    esp,0x4
c000e407:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000e40c:	48                   	dec    eax
c000e40d:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000e412:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000e417:	85 c0                	test   eax,eax
c000e419:	75 01                	jne    c000e41c <startGUI(void*)+0x1c>
c000e41b:	fb                   	sti    
c000e41c:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c000e422:	83 ec 08             	sub    esp,0x8
c000e425:	6a 01                	push   0x1
c000e427:	68 21 38 02 c0       	push   0xc0023821
c000e42c:	e8 df 72 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c000e431:	83 c4 10             	add    esp,0x10
c000e434:	83 ec 08             	sub    esp,0x8
c000e437:	53                   	push   ebx
c000e438:	50                   	push   eax
c000e439:	e8 03 75 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c000e43e:	83 c4 10             	add    esp,0x10
c000e441:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c000e447:	83 ec 08             	sub    esp,0x8
c000e44a:	6a 01                	push   0x1
c000e44c:	68 3b 38 02 c0       	push   0xc002383b
c000e451:	e8 ba 72 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	53                   	push   ebx
c000e45d:	50                   	push   eax
c000e45e:	e8 de 74 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c000e463:	83 c4 10             	add    esp,0x10
c000e466:	90                   	nop
c000e467:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e46a:	c9                   	leave  
c000e46b:	c3                   	ret    

c000e46c <startGUIVESA(void*)>:
c000e46c:	55                   	push   ebp
c000e46d:	89 e5                	mov    ebp,esp
c000e46f:	53                   	push   ebx
c000e470:	83 ec 04             	sub    esp,0x4
c000e473:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000e478:	48                   	dec    eax
c000e479:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000e47e:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000e483:	85 c0                	test   eax,eax
c000e485:	75 01                	jne    c000e488 <startGUIVESA(void*)+0x1c>
c000e487:	fb                   	sti    
c000e488:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c000e48e:	83 ec 08             	sub    esp,0x8
c000e491:	6a 01                	push   0x1
c000e493:	68 59 38 02 c0       	push   0xc0023859
c000e498:	e8 73 72 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c000e49d:	83 c4 10             	add    esp,0x10
c000e4a0:	83 ec 08             	sub    esp,0x8
c000e4a3:	53                   	push   ebx
c000e4a4:	50                   	push   eax
c000e4a5:	e8 97 74 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c000e4b3:	83 ec 08             	sub    esp,0x8
c000e4b6:	6a 01                	push   0x1
c000e4b8:	68 3b 38 02 c0       	push   0xc002383b
c000e4bd:	e8 4e 72 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c000e4c2:	83 c4 10             	add    esp,0x10
c000e4c5:	83 ec 08             	sub    esp,0x8
c000e4c8:	53                   	push   ebx
c000e4c9:	50                   	push   eax
c000e4ca:	e8 72 74 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c000e4cf:	83 c4 10             	add    esp,0x10
c000e4d2:	90                   	nop
c000e4d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e4d6:	c9                   	leave  
c000e4d7:	c3                   	ret    

c000e4d8 <sendKeyToTerminal(unsigned char)>:
c000e4d8:	55                   	push   ebp
c000e4d9:	89 e5                	mov    ebp,esp
c000e4db:	83 ec 28             	sub    esp,0x28
c000e4de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e4e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000e4e4:	a1 94 64 02 c0       	mov    eax,ds:0xc0026494
c000e4e9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000e4ed:	83 ec 08             	sub    esp,0x8
c000e4f0:	52                   	push   edx
c000e4f1:	50                   	push   eax
c000e4f2:	e8 13 c7 ff ff       	call   c000ac0a <VgaText::receiveKey(unsigned char)>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000e4fe:	0f 85 8f 00 00 00    	jne    c000e593 <sendKeyToTerminal(unsigned char)+0xbb>
c000e504:	fa                   	cli    
c000e505:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000e50a:	40                   	inc    eax
c000e50b:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000e510:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000e515:	40                   	inc    eax
c000e516:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c000e51b:	a1 60 85 02 c0       	mov    eax,ds:0xc0028560
c000e520:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e523:	c7 05 60 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028560,0x0
c000e52d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000e531:	74 1f                	je     c000e552 <sendKeyToTerminal(unsigned char)+0x7a>
c000e533:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000e536:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000e539:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000e53c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e53f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e542:	83 ec 0c             	sub    esp,0xc
c000e545:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000e548:	e8 5f 80 00 00       	call   c00165ac <unblockTask(ThreadControlBlock*)>
c000e54d:	83 c4 10             	add    esp,0x10
c000e550:	eb db                	jmp    c000e52d <sendKeyToTerminal(unsigned char)+0x55>
c000e552:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000e557:	48                   	dec    eax
c000e558:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c000e55d:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000e562:	85 c0                	test   eax,eax
c000e564:	75 18                	jne    c000e57e <sendKeyToTerminal(unsigned char)+0xa6>
c000e566:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c000e56b:	85 c0                	test   eax,eax
c000e56d:	74 0f                	je     c000e57e <sendKeyToTerminal(unsigned char)+0xa6>
c000e56f:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c000e579:	e8 72 7b 00 00       	call   c00160f0 <schedule()>
c000e57e:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000e583:	48                   	dec    eax
c000e584:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000e589:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000e58e:	85 c0                	test   eax,eax
c000e590:	75 01                	jne    c000e593 <sendKeyToTerminal(unsigned char)+0xbb>
c000e592:	fb                   	sti    
c000e593:	90                   	nop
c000e594:	c9                   	leave  
c000e595:	c3                   	ret    

c000e596 <sendKeyboardToken(KeyboardToken)>:
c000e596:	55                   	push   ebp
c000e597:	89 e5                	mov    ebp,esp
c000e599:	83 ec 18             	sub    esp,0x18
c000e59c:	e8 c3 47 00 00       	call   c0012d64 <Krnl::userIOReceived()>
c000e5a1:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000e5a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5a7:	0f b7 c0             	movzx  eax,ax
c000e5aa:	83 f2 01             	xor    edx,0x1
c000e5ad:	88 90 80 85 02 c0    	mov    BYTE PTR [eax-0x3ffd7a80],dl
c000e5b3:	a1 68 85 02 c0       	mov    eax,ds:0xc0028568
c000e5b8:	85 c0                	test   eax,eax
c000e5ba:	74 24                	je     c000e5e0 <sendKeyboardToken(KeyboardToken)+0x4a>
c000e5bc:	8b 0d 68 85 02 c0    	mov    ecx,DWORD PTR ds:0xc0028568
c000e5c2:	83 ec 04             	sub    esp,0x4
c000e5c5:	68 80 85 02 c0       	push   0xc0028580
c000e5ca:	83 ec 08             	sub    esp,0x8
c000e5cd:	89 e2                	mov    edx,esp
c000e5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5d2:	89 02                	mov    DWORD PTR [edx],eax
c000e5d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000e5d7:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000e5db:	ff d1                	call   ecx
c000e5dd:	83 c4 10             	add    esp,0x10
c000e5e0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000e5e4:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000e5e7:	a0 88 89 02 c0       	mov    al,ds:0xc0028988
c000e5ec:	38 c2                	cmp    dl,al
c000e5ee:	74 1c                	je     c000e60c <sendKeyboardToken(KeyboardToken)+0x76>
c000e5f0:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000e5f3:	a2 88 89 02 c0       	mov    ds:0xc0028988,al
c000e5f8:	a0 88 89 02 c0       	mov    al,ds:0xc0028988
c000e5fd:	0f b6 c0             	movzx  eax,al
c000e600:	83 ec 0c             	sub    esp,0xc
c000e603:	50                   	push   eax
c000e604:	e8 e7 bc ff ff       	call   c000a2f0 <setTerminalScrollLock(bool)>
c000e609:	83 c4 10             	add    esp,0x10
c000e60c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000e60f:	84 c0                	test   al,al
c000e611:	0f 84 ae 00 00 00    	je     c000e6c5 <sendKeyboardToken(KeyboardToken)+0x12f>
c000e617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e61a:	66 3d 10 03          	cmp    ax,0x310
c000e61e:	75 06                	jne    c000e626 <sendKeyboardToken(KeyboardToken)+0x90>
c000e620:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000e626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e629:	66 3d 11 03          	cmp    ax,0x311
c000e62d:	75 06                	jne    c000e635 <sendKeyboardToken(KeyboardToken)+0x9f>
c000e62f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000e635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e638:	66 3d 12 03          	cmp    ax,0x312
c000e63c:	75 06                	jne    c000e644 <sendKeyboardToken(KeyboardToken)+0xae>
c000e63e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000e644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e647:	66 3d 13 03          	cmp    ax,0x313
c000e64b:	75 06                	jne    c000e653 <sendKeyboardToken(KeyboardToken)+0xbd>
c000e64d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000e653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e656:	66 3d 14 03          	cmp    ax,0x314
c000e65a:	75 06                	jne    c000e662 <sendKeyboardToken(KeyboardToken)+0xcc>
c000e65c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000e662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e665:	66 3d 15 03          	cmp    ax,0x315
c000e669:	75 06                	jne    c000e671 <sendKeyboardToken(KeyboardToken)+0xdb>
c000e66b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e674:	66 3d 16 03          	cmp    ax,0x316
c000e678:	75 06                	jne    c000e680 <sendKeyboardToken(KeyboardToken)+0xea>
c000e67a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000e680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e683:	66 3d 17 03          	cmp    ax,0x317
c000e687:	75 06                	jne    c000e68f <sendKeyboardToken(KeyboardToken)+0xf9>
c000e689:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000e68f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e692:	66 3d 18 03          	cmp    ax,0x318
c000e696:	75 06                	jne    c000e69e <sendKeyboardToken(KeyboardToken)+0x108>
c000e698:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000e69e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6a1:	66 3d 19 03          	cmp    ax,0x319
c000e6a5:	75 06                	jne    c000e6ad <sendKeyboardToken(KeyboardToken)+0x117>
c000e6a7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000e6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6b0:	66 3d 1a 03          	cmp    ax,0x31a
c000e6b4:	0f 85 c9 00 00 00    	jne    c000e783 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e6ba:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000e6c0:	e9 be 00 00 00       	jmp    c000e783 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e6c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6c8:	66 3d 10 03          	cmp    ax,0x310
c000e6cc:	75 0a                	jne    c000e6d8 <sendKeyboardToken(KeyboardToken)+0x142>
c000e6ce:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000e6d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6db:	66 3d 11 03          	cmp    ax,0x311
c000e6df:	75 0a                	jne    c000e6eb <sendKeyboardToken(KeyboardToken)+0x155>
c000e6e1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000e6e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6ee:	66 3d 12 03          	cmp    ax,0x312
c000e6f2:	75 0a                	jne    c000e6fe <sendKeyboardToken(KeyboardToken)+0x168>
c000e6f4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000e6fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e701:	66 3d 13 03          	cmp    ax,0x313
c000e705:	75 0a                	jne    c000e711 <sendKeyboardToken(KeyboardToken)+0x17b>
c000e707:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000e70d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e714:	66 3d 14 03          	cmp    ax,0x314
c000e718:	75 0a                	jne    c000e724 <sendKeyboardToken(KeyboardToken)+0x18e>
c000e71a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000e720:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e727:	66 3d 15 03          	cmp    ax,0x315
c000e72b:	75 0a                	jne    c000e737 <sendKeyboardToken(KeyboardToken)+0x1a1>
c000e72d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e733:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e73a:	66 3d 16 03          	cmp    ax,0x316
c000e73e:	75 0a                	jne    c000e74a <sendKeyboardToken(KeyboardToken)+0x1b4>
c000e740:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000e746:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e74a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e74d:	66 3d 17 03          	cmp    ax,0x317
c000e751:	75 0a                	jne    c000e75d <sendKeyboardToken(KeyboardToken)+0x1c7>
c000e753:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000e759:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e760:	66 3d 18 03          	cmp    ax,0x318
c000e764:	75 0a                	jne    c000e770 <sendKeyboardToken(KeyboardToken)+0x1da>
c000e766:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000e76c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e773:	66 3d 19 03          	cmp    ax,0x319
c000e777:	75 0a                	jne    c000e783 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e779:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000e77f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e786:	66 3d 00 02          	cmp    ax,0x200
c000e78a:	75 2c                	jne    c000e7b8 <sendKeyboardToken(KeyboardToken)+0x222>
c000e78c:	a0 80 89 02 c0       	mov    al,ds:0xc0028980
c000e791:	83 f0 01             	xor    eax,0x1
c000e794:	84 c0                	test   al,al
c000e796:	74 20                	je     c000e7b8 <sendKeyboardToken(KeyboardToken)+0x222>
c000e798:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c000e79d:	6a 01                	push   0x1
c000e79f:	6a 00                	push   0x0
c000e7a1:	68 00 e4 00 c0       	push   0xc000e400
c000e7a6:	50                   	push   eax
c000e7a7:	e8 28 77 00 00       	call   c0015ed4 <Process::createThread(void (*)(void*), void*, int)>
c000e7ac:	83 c4 10             	add    esp,0x10
c000e7af:	c6 05 80 89 02 c0 01 	mov    BYTE PTR ds:0xc0028980,0x1
c000e7b6:	eb 33                	jmp    c000e7eb <sendKeyboardToken(KeyboardToken)+0x255>
c000e7b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7bb:	66 3d 01 02          	cmp    ax,0x201
c000e7bf:	75 2a                	jne    c000e7eb <sendKeyboardToken(KeyboardToken)+0x255>
c000e7c1:	a0 80 89 02 c0       	mov    al,ds:0xc0028980
c000e7c6:	83 f0 01             	xor    eax,0x1
c000e7c9:	84 c0                	test   al,al
c000e7cb:	74 1e                	je     c000e7eb <sendKeyboardToken(KeyboardToken)+0x255>
c000e7cd:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c000e7d2:	6a 01                	push   0x1
c000e7d4:	6a 00                	push   0x0
c000e7d6:	68 6c e4 00 c0       	push   0xc000e46c
c000e7db:	50                   	push   eax
c000e7dc:	e8 f3 76 00 00       	call   c0015ed4 <Process::createThread(void (*)(void*), void*, int)>
c000e7e1:	83 c4 10             	add    esp,0x10
c000e7e4:	c6 05 80 89 02 c0 01 	mov    BYTE PTR ds:0xc0028980,0x1
c000e7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7ee:	66 3d 1d 03          	cmp    ax,0x31d
c000e7f2:	75 06                	jne    c000e7fa <sendKeyboardToken(KeyboardToken)+0x264>
c000e7f4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000e7fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7fd:	66 3d 1c 03          	cmp    ax,0x31c
c000e801:	75 06                	jne    c000e809 <sendKeyboardToken(KeyboardToken)+0x273>
c000e803:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000e809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e80c:	66 3d 1b 03          	cmp    ax,0x31b
c000e810:	75 06                	jne    c000e818 <sendKeyboardToken(KeyboardToken)+0x282>
c000e812:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000e818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e81b:	66 3d 1e 03          	cmp    ax,0x31e
c000e81f:	75 06                	jne    c000e827 <sendKeyboardToken(KeyboardToken)+0x291>
c000e821:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000e827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e82a:	66 3d 1f 03          	cmp    ax,0x31f
c000e82e:	75 06                	jne    c000e836 <sendKeyboardToken(KeyboardToken)+0x2a0>
c000e830:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000e836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e839:	66 3d 1a 03          	cmp    ax,0x31a
c000e83d:	75 06                	jne    c000e845 <sendKeyboardToken(KeyboardToken)+0x2af>
c000e83f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000e845:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000e849:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e84c:	83 f0 01             	xor    eax,0x1
c000e84f:	84 c0                	test   al,al
c000e851:	74 77                	je     c000e8ca <sendKeyboardToken(KeyboardToken)+0x334>
c000e853:	a0 81 86 02 c0       	mov    al,ds:0xc0028681
c000e858:	84 c0                	test   al,al
c000e85a:	74 41                	je     c000e89d <sendKeyboardToken(KeyboardToken)+0x307>
c000e85c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e860:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000e864:	74 2b                	je     c000e891 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000e866:	8b 15 84 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028984
c000e86c:	89 d0                	mov    eax,edx
c000e86e:	c1 e0 02             	shl    eax,0x2
c000e871:	01 d0                	add    eax,edx
c000e873:	01 c0                	add    eax,eax
c000e875:	a3 84 89 02 c0       	mov    ds:0xc0028984,eax
c000e87a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e87d:	0f b7 c0             	movzx  eax,ax
c000e880:	8d 50 d0             	lea    edx,[eax-0x30]
c000e883:	a1 84 89 02 c0       	mov    eax,ds:0xc0028984
c000e888:	01 d0                	add    eax,edx
c000e88a:	a3 84 89 02 c0       	mov    ds:0xc0028984,eax
c000e88f:	eb 6d                	jmp    c000e8fe <sendKeyboardToken(KeyboardToken)+0x368>
c000e891:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c000e89b:	eb 61                	jmp    c000e8fe <sendKeyboardToken(KeyboardToken)+0x368>
c000e89d:	a1 84 89 02 c0       	mov    eax,ds:0xc0028984
c000e8a2:	85 c0                	test   eax,eax
c000e8a4:	74 18                	je     c000e8be <sendKeyboardToken(KeyboardToken)+0x328>
c000e8a6:	a1 84 89 02 c0       	mov    eax,ds:0xc0028984
c000e8ab:	0f b6 c0             	movzx  eax,al
c000e8ae:	83 ec 0c             	sub    esp,0xc
c000e8b1:	50                   	push   eax
c000e8b2:	e8 21 fc ff ff       	call   c000e4d8 <sendKeyToTerminal(unsigned char)>
c000e8b7:	83 c4 10             	add    esp,0x10
c000e8ba:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e8be:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c000e8c8:	eb 34                	jmp    c000e8fe <sendKeyboardToken(KeyboardToken)+0x368>
c000e8ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8cd:	66 3d 01 01          	cmp    ax,0x101
c000e8d1:	75 2b                	jne    c000e8fe <sendKeyboardToken(KeyboardToken)+0x368>
c000e8d3:	a1 84 89 02 c0       	mov    eax,ds:0xc0028984
c000e8d8:	85 c0                	test   eax,eax
c000e8da:	74 18                	je     c000e8f4 <sendKeyboardToken(KeyboardToken)+0x35e>
c000e8dc:	a1 84 89 02 c0       	mov    eax,ds:0xc0028984
c000e8e1:	0f b6 c0             	movzx  eax,al
c000e8e4:	83 ec 0c             	sub    esp,0xc
c000e8e7:	50                   	push   eax
c000e8e8:	e8 eb fb ff ff       	call   c000e4d8 <sendKeyToTerminal(unsigned char)>
c000e8ed:	83 c4 10             	add    esp,0x10
c000e8f0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e8f4:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c000e8fe:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e901:	83 f0 01             	xor    eax,0x1
c000e904:	84 c0                	test   al,al
c000e906:	74 4c                	je     c000e954 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e908:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e90b:	83 f0 01             	xor    eax,0x1
c000e90e:	84 c0                	test   al,al
c000e910:	74 42                	je     c000e954 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e912:	a0 80 86 02 c0       	mov    al,ds:0xc0028680
c000e917:	83 f0 01             	xor    eax,0x1
c000e91a:	84 c0                	test   al,al
c000e91c:	74 36                	je     c000e954 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e91e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e921:	66 83 f8 1f          	cmp    ax,0x1f
c000e925:	76 09                	jbe    c000e930 <sendKeyboardToken(KeyboardToken)+0x39a>
c000e927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e92a:	66 83 f8 7e          	cmp    ax,0x7e
c000e92e:	76 12                	jbe    c000e942 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e933:	66 83 f8 0a          	cmp    ax,0xa
c000e937:	74 09                	je     c000e942 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e93c:	66 83 f8 08          	cmp    ax,0x8
c000e940:	75 12                	jne    c000e954 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e945:	0f b6 c0             	movzx  eax,al
c000e948:	83 ec 0c             	sub    esp,0xc
c000e94b:	50                   	push   eax
c000e94c:	e8 87 fb ff ff       	call   c000e4d8 <sendKeyToTerminal(unsigned char)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e957:	83 f0 01             	xor    eax,0x1
c000e95a:	84 c0                	test   al,al
c000e95c:	74 4f                	je     c000e9ad <sendKeyboardToken(KeyboardToken)+0x417>
c000e95e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e961:	83 f0 01             	xor    eax,0x1
c000e964:	84 c0                	test   al,al
c000e966:	74 45                	je     c000e9ad <sendKeyboardToken(KeyboardToken)+0x417>
c000e968:	a0 80 86 02 c0       	mov    al,ds:0xc0028680
c000e96d:	84 c0                	test   al,al
c000e96f:	74 3c                	je     c000e9ad <sendKeyboardToken(KeyboardToken)+0x417>
c000e971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e974:	66 83 f8 3f          	cmp    ax,0x3f
c000e978:	76 33                	jbe    c000e9ad <sendKeyboardToken(KeyboardToken)+0x417>
c000e97a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e97d:	66 83 f8 7f          	cmp    ax,0x7f
c000e981:	77 2a                	ja     c000e9ad <sendKeyboardToken(KeyboardToken)+0x417>
c000e983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e986:	88 c2                	mov    dl,al
c000e988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e98b:	66 83 f8 5f          	cmp    ax,0x5f
c000e98f:	76 04                	jbe    c000e995 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000e991:	b0 20                	mov    al,0x20
c000e993:	eb 02                	jmp    c000e997 <sendKeyboardToken(KeyboardToken)+0x401>
c000e995:	b0 00                	mov    al,0x0
c000e997:	29 c2                	sub    edx,eax
c000e999:	88 d0                	mov    al,dl
c000e99b:	83 e8 40             	sub    eax,0x40
c000e99e:	0f b6 c0             	movzx  eax,al
c000e9a1:	83 ec 0c             	sub    esp,0xc
c000e9a4:	50                   	push   eax
c000e9a5:	e8 2e fb ff ff       	call   c000e4d8 <sendKeyToTerminal(unsigned char)>
c000e9aa:	83 c4 10             	add    esp,0x10
c000e9ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e9b0:	66 3d 00 03          	cmp    ax,0x300
c000e9b4:	75 0f                	jne    c000e9c5 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e9b6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e9b9:	83 f0 01             	xor    eax,0x1
c000e9bc:	84 c0                	test   al,al
c000e9be:	74 05                	je     c000e9c5 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e9c0:	e8 10 bc ff ff       	call   c000a5d5 <doTerminalCycle()>
c000e9c5:	90                   	nop
c000e9c6:	c9                   	leave  
c000e9c7:	c3                   	ret    

c000e9c8 <clearInternalKeybuffer(VgaText*)>:
c000e9c8:	55                   	push   ebp
c000e9c9:	89 e5                	mov    ebp,esp
c000e9cb:	83 ec 08             	sub    esp,0x8
c000e9ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e9d1:	05 32 01 00 00       	add    eax,0x132
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	50                   	push   eax
c000e9da:	e8 e5 1a ff ff       	call   c00004c4 <strlen>
c000e9df:	83 c4 10             	add    esp,0x10
c000e9e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000e9e5:	81 c2 32 01 00 00    	add    edx,0x132
c000e9eb:	83 ec 04             	sub    esp,0x4
c000e9ee:	50                   	push   eax
c000e9ef:	6a 00                	push   0x0
c000e9f1:	52                   	push   edx
c000e9f2:	e8 b1 1a ff ff       	call   c00004a8 <memset>
c000e9f7:	83 c4 10             	add    esp,0x10
c000e9fa:	90                   	nop
c000e9fb:	c9                   	leave  
c000e9fc:	c3                   	ret    

c000e9fd <readKeyboard(VgaText*, char*, unsigned long)>:
c000e9fd:	55                   	push   ebp
c000e9fe:	89 e5                	mov    ebp,esp
c000ea00:	83 ec 18             	sub    esp,0x18
c000ea03:	a1 68 85 02 c0       	mov    eax,ds:0xc0028568
c000ea08:	85 c0                	test   eax,eax
c000ea0a:	74 2a                	je     c000ea36 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ea0c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ea12:	8b 0d 68 85 02 c0    	mov    ecx,DWORD PTR ds:0xc0028568
c000ea18:	83 ec 04             	sub    esp,0x4
c000ea1b:	68 80 85 02 c0       	push   0xc0028580
c000ea20:	83 ec 08             	sub    esp,0x8
c000ea23:	89 e2                	mov    edx,esp
c000ea25:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ea28:	89 02                	mov    DWORD PTR [edx],eax
c000ea2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ea2d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ea31:	ff d1                	call   ecx
c000ea33:	83 c4 10             	add    esp,0x10
c000ea36:	fb                   	sti    
c000ea37:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ea3e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ea42:	0f 84 a1 00 00 00    	je     c000eae9 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ea48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea4b:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000ea51:	84 c0                	test   al,al
c000ea53:	75 28                	jne    c000ea7d <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ea55:	fa                   	cli    
c000ea56:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000ea5b:	40                   	inc    eax
c000ea5c:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000ea61:	e8 8a 76 00 00       	call   c00160f0 <schedule()>
c000ea66:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000ea6b:	48                   	dec    eax
c000ea6c:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000ea71:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000ea76:	85 c0                	test   eax,eax
c000ea78:	75 ce                	jne    c000ea48 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ea7a:	fb                   	sti    
c000ea7b:	eb cb                	jmp    c000ea48 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ea7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ea80:	8d 50 01             	lea    edx,[eax+0x1]
c000ea83:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ea86:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ea89:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c000ea8f:	88 10                	mov    BYTE PTR [eax],dl
c000ea91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea94:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000ea9a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ea9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eaa0:	05 32 01 00 00       	add    eax,0x132
c000eaa5:	83 ec 0c             	sub    esp,0xc
c000eaa8:	50                   	push   eax
c000eaa9:	e8 16 1a ff ff       	call   c00004c4 <strlen>
c000eaae:	83 c4 10             	add    esp,0x10
c000eab1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000eab4:	81 c2 32 01 00 00    	add    edx,0x132
c000eaba:	8d 4a 01             	lea    ecx,[edx+0x1]
c000eabd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000eac0:	81 c2 32 01 00 00    	add    edx,0x132
c000eac6:	83 ec 04             	sub    esp,0x4
c000eac9:	50                   	push   eax
c000eaca:	51                   	push   ecx
c000eacb:	52                   	push   edx
c000eacc:	e8 0f 19 ff ff       	call   c00003e0 <memmove>
c000ead1:	83 c4 10             	add    esp,0x10
c000ead4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ead7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eada:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000eade:	0f 85 5a ff ff ff    	jne    c000ea3e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000eae4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eae7:	eb 03                	jmp    c000eaec <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000eae9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eaec:	c9                   	leave  
c000eaed:	c3                   	ret    

c000eaee <Keyboard::Keyboard(char const*)>:
c000eaee:	83 ec 0c             	sub    esp,0xc
c000eaf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf5:	83 ec 08             	sub    esp,0x8
c000eaf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eafc:	50                   	push   eax
c000eafd:	e8 a0 f2 ff ff       	call   c000dda2 <Device::Device(char const*)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	ba 7c 38 02 c0       	mov    edx,0xc002387c
c000eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0e:	89 10                	mov    DWORD PTR [eax],edx
c000eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb14:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000eb1e:	c6 05 64 85 02 c0 01 	mov    BYTE PTR ds:0xc0028564,0x1
c000eb25:	90                   	nop
c000eb26:	83 c4 0c             	add    esp,0xc
c000eb29:	c3                   	ret    

c000eb2a <Keyboard::~Keyboard()>:
c000eb2a:	83 ec 0c             	sub    esp,0xc
c000eb2d:	ba 7c 38 02 c0       	mov    edx,0xc002387c
c000eb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb36:	89 10                	mov    DWORD PTR [eax],edx
c000eb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb3c:	83 ec 0c             	sub    esp,0xc
c000eb3f:	50                   	push   eax
c000eb40:	e8 5b ef ff ff       	call   c000daa0 <Device::~Device()>
c000eb45:	83 c4 10             	add    esp,0x10
c000eb48:	90                   	nop
c000eb49:	83 c4 0c             	add    esp,0xc
c000eb4c:	c3                   	ret    
c000eb4d:	90                   	nop

c000eb4e <Keyboard::~Keyboard()>:
c000eb4e:	83 ec 0c             	sub    esp,0xc
c000eb51:	83 ec 0c             	sub    esp,0xc
c000eb54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb58:	e8 cd ff ff ff       	call   c000eb2a <Keyboard::~Keyboard()>
c000eb5d:	83 c4 10             	add    esp,0x10
c000eb60:	83 ec 08             	sub    esp,0x8
c000eb63:	68 5c 01 00 00       	push   0x15c
c000eb68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6c:	e8 cf da ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000eb71:	83 c4 10             	add    esp,0x10
c000eb74:	83 c4 0c             	add    esp,0xc
c000eb77:	c3                   	ret    

c000eb78 <LogicalDisk::close(int, int, void*)>:
c000eb78:	83 c8 ff             	or     eax,0xffffffff
c000eb7b:	c3                   	ret    

c000eb7c <LogicalDisk::~LogicalDisk()>:
c000eb7c:	83 ec 0c             	sub    esp,0xc
c000eb7f:	ba 4c 39 02 c0       	mov    edx,0xc002394c
c000eb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb88:	89 10                	mov    DWORD PTR [eax],edx
c000eb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb8e:	83 ec 0c             	sub    esp,0xc
c000eb91:	50                   	push   eax
c000eb92:	e8 09 ef ff ff       	call   c000daa0 <Device::~Device()>
c000eb97:	83 c4 10             	add    esp,0x10
c000eb9a:	90                   	nop
c000eb9b:	83 c4 0c             	add    esp,0xc
c000eb9e:	c3                   	ret    
c000eb9f:	90                   	nop

c000eba0 <LogicalDisk::~LogicalDisk()>:
c000eba0:	83 ec 0c             	sub    esp,0xc
c000eba3:	83 ec 0c             	sub    esp,0xc
c000eba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebaa:	e8 cd ff ff ff       	call   c000eb7c <LogicalDisk::~LogicalDisk()>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	83 ec 08             	sub    esp,0x8
c000ebb5:	68 74 01 00 00       	push   0x174
c000ebba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebbe:	e8 7d da ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000ebc3:	83 c4 10             	add    esp,0x10
c000ebc6:	83 c4 0c             	add    esp,0xc
c000ebc9:	c3                   	ret    

c000ebca <LogicalDisk::open(int, int, void*)>:
c000ebca:	83 ec 18             	sub    esp,0x18
c000ebcd:	68 a8 38 02 c0       	push   0xc00238a8
c000ebd2:	e8 b4 3e 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000ebd7:	83 c8 ff             	or     eax,0xffffffff
c000ebda:	83 c4 1c             	add    esp,0x1c
c000ebdd:	c3                   	ret    

c000ebde <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ebde:	53                   	push   ebx
c000ebdf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ebe3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebe7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ebeb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ebf1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ebf7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ebfd:	77 10                	ja     c000ec0f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ebff:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ec05:	89 d3                	mov    ebx,edx
c000ec07:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ec0d:	72 05                	jb     c000ec14 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ec0f:	83 c8 ff             	or     eax,0xffffffff
c000ec12:	89 c2                	mov    edx,eax
c000ec14:	5b                   	pop    ebx
c000ec15:	c3                   	ret    

c000ec16 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ec16:	56                   	push   esi
c000ec17:	83 c8 ff             	or     eax,0xffffffff
c000ec1a:	53                   	push   ebx
c000ec1b:	89 c2                	mov    edx,eax
c000ec1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec21:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ec25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ec29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ec2f:	77 27                	ja     c000ec58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ec31:	89 d8                	mov    eax,ebx
c000ec33:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ec39:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ec3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec44:	89 c2                	mov    edx,eax
c000ec46:	73 10                	jae    c000ec58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ec48:	89 c8                	mov    eax,ecx
c000ec4a:	89 da                	mov    edx,ebx
c000ec4c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ec52:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ec58:	5b                   	pop    ebx
c000ec59:	5e                   	pop    esi
c000ec5a:	c3                   	ret    
c000ec5b:	90                   	nop

c000ec5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ec5c:	83 ec 1c             	sub    esp,0x1c
c000ec5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec73:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ec7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec82:	83 ec 08             	sub    esp,0x8
c000ec85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec89:	50                   	push   eax
c000ec8a:	e8 13 f1 ff ff       	call   c000dda2 <Device::Device(char const*)>
c000ec8f:	83 c4 10             	add    esp,0x10
c000ec92:	ba 4c 39 02 c0       	mov    edx,0xc002394c
c000ec97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec9b:	89 10                	mov    DWORD PTR [eax],edx
c000ec9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eca1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000eca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ecb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecb7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ecc1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ecc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eccd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ecd3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ecd9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ecdd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ece0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ece4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ecea:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ecf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecf8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ecfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed02:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ed0c:	90                   	nop
c000ed0d:	83 c4 1c             	add    esp,0x1c
c000ed10:	c3                   	ret    
c000ed11:	90                   	nop

c000ed12 <LogicalDisk::assignDriveLetter()>:
c000ed12:	55                   	push   ebp
c000ed13:	57                   	push   edi
c000ed14:	56                   	push   esi
c000ed15:	53                   	push   ebx
c000ed16:	83 ec 14             	sub    esp,0x14
c000ed19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed1d:	8b 3d a0 89 02 c0    	mov    edi,DWORD PTR ds:0xc00289a0
c000ed23:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ed29:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ed2d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ed33:	8b 3d a4 89 02 c0    	mov    edi,DWORD PTR ds:0xc00289a4
c000ed39:	3c 01                	cmp    al,0x1
c000ed3b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ed3f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ed43:	19 c0                	sbb    eax,eax
c000ed45:	83 e0 02             	and    eax,0x2
c000ed48:	83 c0 41             	add    eax,0x41
c000ed4b:	0f be e8             	movsx  ebp,al
c000ed4e:	3c 43                	cmp    al,0x43
c000ed50:	75 10                	jne    c000ed62 <LogicalDisk::assignDriveLetter()+0x50>
c000ed52:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ed59:	75 5d                	jne    c000edb8 <LogicalDisk::assignDriveLetter()+0xa6>
c000ed5b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ed60:	75 56                	jne    c000edb8 <LogicalDisk::assignDriveLetter()+0xa6>
c000ed62:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ed65:	ba 01 00 00 00       	mov    edx,0x1
c000ed6a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ed6e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ed72:	d3 e2                	shl    edx,cl
c000ed74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed78:	89 d7                	mov    edi,edx
c000ed7a:	89 d6                	mov    esi,edx
c000ed7c:	c1 ff 1f             	sar    edi,0x1f
c000ed7f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ed83:	21 f9                	and    ecx,edi
c000ed85:	09 d1                	or     ecx,edx
c000ed87:	75 2f                	jne    c000edb8 <LogicalDisk::assignDriveLetter()+0xa6>
c000ed89:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ed8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed91:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ed97:	09 f2                	or     edx,esi
c000ed99:	89 15 a0 89 02 c0    	mov    DWORD PTR ds:0xc00289a0,edx
c000ed9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eda3:	09 fa                	or     edx,edi
c000eda5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000eda9:	89 15 a4 89 02 c0    	mov    DWORD PTR ds:0xc00289a4,edx
c000edaf:	89 1c bd c0 89 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7640],ebx
c000edb6:	eb 08                	jmp    c000edc0 <LogicalDisk::assignDriveLetter()+0xae>
c000edb8:	45                   	inc    ebp
c000edb9:	40                   	inc    eax
c000edba:	3c 5b                	cmp    al,0x5b
c000edbc:	75 90                	jne    c000ed4e <LogicalDisk::assignDriveLetter()+0x3c>
c000edbe:	31 c0                	xor    eax,eax
c000edc0:	83 c4 14             	add    esp,0x14
c000edc3:	5b                   	pop    ebx
c000edc4:	5e                   	pop    esi
c000edc5:	5f                   	pop    edi
c000edc6:	5d                   	pop    ebp
c000edc7:	c3                   	ret    

c000edc8 <LogicalDisk::mount()>:
c000edc8:	56                   	push   esi
c000edc9:	53                   	push   ebx
c000edca:	83 ec 1c             	sub    esp,0x1c
c000edcd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000edd1:	8b 1d 38 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026538
c000edd7:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000edde:	50                   	push   eax
c000eddf:	68 cc 38 02 c0       	push   0xc00238cc
c000ede4:	e8 38 d9 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000ede9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000edf3:	83 c4 10             	add    esp,0x10
c000edf6:	85 db                	test   ebx,ebx
c000edf8:	74 4e                	je     c000ee48 <LogicalDisk::mount()+0x80>
c000edfa:	83 ec 0c             	sub    esp,0xc
c000edfd:	68 ed 38 02 c0       	push   0xc00238ed
c000ee02:	e8 1a d9 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000ee07:	83 c4 0c             	add    esp,0xc
c000ee0a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ee11:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ee13:	83 e8 41             	sub    eax,0x41
c000ee16:	50                   	push   eax
c000ee17:	56                   	push   esi
c000ee18:	53                   	push   ebx
c000ee19:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ee1c:	83 c4 10             	add    esp,0x10
c000ee1f:	84 c0                	test   al,al
c000ee21:	74 20                	je     c000ee43 <LogicalDisk::mount()+0x7b>
c000ee23:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ee27:	83 ec 0c             	sub    esp,0xc
c000ee2a:	68 09 39 02 c0       	push   0xc0023909
c000ee2f:	e8 ed d8 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000ee34:	83 c4 10             	add    esp,0x10
c000ee37:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000ee3d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ee41:	eb 07                	jmp    c000ee4a <LogicalDisk::mount()+0x82>
c000ee43:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ee46:	eb ae                	jmp    c000edf6 <LogicalDisk::mount()+0x2e>
c000ee48:	31 c0                	xor    eax,eax
c000ee4a:	83 c4 14             	add    esp,0x14
c000ee4d:	5b                   	pop    ebx
c000ee4e:	5e                   	pop    esi
c000ee4f:	c3                   	ret    

c000ee50 <LogicalDisk::unmount()>:
c000ee50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee54:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <LogicalDisk::eject()>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee6a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee70:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ee73:	90                   	nop

c000ee74 <LogicalDisk::unassignDriveLetter()>:
c000ee74:	57                   	push   edi
c000ee75:	56                   	push   esi
c000ee76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee7a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ee81:	84 c9                	test   cl,cl
c000ee83:	75 0f                	jne    c000ee94 <LogicalDisk::unassignDriveLetter()+0x20>
c000ee85:	c7 44 24 0c 22 39 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023922
c000ee8d:	5e                   	pop    esi
c000ee8e:	5f                   	pop    edi
c000ee8f:	e9 f7 3b 00 00       	jmp    c0012a8b <Krnl::panic(char const*)>
c000ee94:	83 e9 41             	sub    ecx,0x41
c000ee97:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ee9e:	b8 01 00 00 00       	mov    eax,0x1
c000eea3:	c7 04 8d c0 89 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7640],0x0
c000eeae:	d3 e0                	shl    eax,cl
c000eeb0:	89 c7                	mov    edi,eax
c000eeb2:	f7 d0                	not    eax
c000eeb4:	c1 ff 1f             	sar    edi,0x1f
c000eeb7:	21 05 a0 89 02 c0    	and    DWORD PTR ds:0xc00289a0,eax
c000eebd:	89 fe                	mov    esi,edi
c000eebf:	f7 d6                	not    esi
c000eec1:	21 35 a4 89 02 c0    	and    DWORD PTR ds:0xc00289a4,esi
c000eec7:	5e                   	pop    esi
c000eec8:	5f                   	pop    edi
c000eec9:	c3                   	ret    

c000eeca <LogicalDisk::read(unsigned long long, int, void*)>:
c000eeca:	57                   	push   edi
c000eecb:	56                   	push   esi
c000eecc:	53                   	push   ebx
c000eecd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eed1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eed5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eed9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eedd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000eee3:	77 41                	ja     c000ef26 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000eee5:	99                   	cdq    
c000eee6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000eeec:	01 c8                	add    eax,ecx
c000eeee:	11 da                	adc    edx,ebx
c000eef0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000eef6:	19 d7                	sbb    edi,edx
c000eef8:	72 33                	jb     c000ef2d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000eefa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ef00:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ef06:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ef0a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ef0e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ef14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ef1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef1e:	5b                   	pop    ebx
c000ef1f:	5e                   	pop    esi
c000ef20:	5f                   	pop    edi
c000ef21:	e9 34 0a 00 00       	jmp    c000f95a <VCache::read(unsigned long long, int, void*)>
c000ef26:	b8 05 00 00 00       	mov    eax,0x5
c000ef2b:	eb 05                	jmp    c000ef32 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ef2d:	b8 07 00 00 00       	mov    eax,0x7
c000ef32:	5b                   	pop    ebx
c000ef33:	5e                   	pop    esi
c000ef34:	5f                   	pop    edi
c000ef35:	c3                   	ret    

c000ef36 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ef36:	57                   	push   edi
c000ef37:	56                   	push   esi
c000ef38:	53                   	push   ebx
c000ef39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ef3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef49:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ef4f:	77 41                	ja     c000ef92 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ef51:	99                   	cdq    
c000ef52:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ef58:	01 c8                	add    eax,ecx
c000ef5a:	11 da                	adc    edx,ebx
c000ef5c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ef62:	19 d7                	sbb    edi,edx
c000ef64:	72 33                	jb     c000ef99 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ef66:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ef6c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ef72:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ef76:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ef7a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ef80:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ef86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef8a:	5b                   	pop    ebx
c000ef8b:	5e                   	pop    esi
c000ef8c:	5f                   	pop    edi
c000ef8d:	e9 ce 08 00 00       	jmp    c000f860 <VCache::write(unsigned long long, int, void*)>
c000ef92:	b8 05 00 00 00       	mov    eax,0x5
c000ef97:	eb 05                	jmp    c000ef9e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ef99:	b8 07 00 00 00       	mov    eax,0x7
c000ef9e:	5b                   	pop    ebx
c000ef9f:	5e                   	pop    esi
c000efa0:	5f                   	pop    edi
c000efa1:	c3                   	ret    
c000efa2:	66 90                	xchg   ax,ax

c000efa4 <Mouse::Mouse(char const*)>:
c000efa4:	83 ec 0c             	sub    esp,0xc
c000efa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efab:	83 ec 08             	sub    esp,0x8
c000efae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efb2:	50                   	push   eax
c000efb3:	e8 ea ed ff ff       	call   c000dda2 <Device::Device(char const*)>
c000efb8:	83 c4 10             	add    esp,0x10
c000efbb:	ba 78 39 02 c0       	mov    edx,0xc0023978
c000efc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efc4:	89 10                	mov    DWORD PTR [eax],edx
c000efc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efca:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000efd4:	90                   	nop
c000efd5:	83 c4 0c             	add    esp,0xc
c000efd8:	c3                   	ret    
c000efd9:	90                   	nop
c000efda:	66 90                	xchg   ax,ax

c000efdc <Mouse::~Mouse()>:
c000efdc:	83 ec 0c             	sub    esp,0xc
c000efdf:	ba 78 39 02 c0       	mov    edx,0xc0023978
c000efe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efe8:	89 10                	mov    DWORD PTR [eax],edx
c000efea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efee:	83 ec 0c             	sub    esp,0xc
c000eff1:	50                   	push   eax
c000eff2:	e8 a9 ea ff ff       	call   c000daa0 <Device::~Device()>
c000eff7:	83 c4 10             	add    esp,0x10
c000effa:	90                   	nop
c000effb:	83 c4 0c             	add    esp,0xc
c000effe:	c3                   	ret    
c000efff:	90                   	nop

c000f000 <Mouse::~Mouse()>:
c000f000:	83 ec 0c             	sub    esp,0xc
c000f003:	83 ec 0c             	sub    esp,0xc
c000f006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f00a:	e8 cd ff ff ff       	call   c000efdc <Mouse::~Mouse()>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	83 ec 08             	sub    esp,0x8
c000f015:	68 58 01 00 00       	push   0x158
c000f01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f01e:	e8 1d d6 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000f023:	83 c4 10             	add    esp,0x10
c000f026:	83 c4 0c             	add    esp,0xc
c000f029:	c3                   	ret    

c000f02a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f02a:	55                   	push   ebp
c000f02b:	57                   	push   edi
c000f02c:	56                   	push   esi
c000f02d:	53                   	push   ebx
c000f02e:	81 ec 28 01 00 00    	sub    esp,0x128
c000f034:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000f03b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000f042:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000f049:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000f050:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f054:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f058:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f05f:	e8 3a ee ff ff       	call   c000de9e <Device::getName()>
c000f064:	5a                   	pop    edx
c000f065:	59                   	pop    ecx
c000f066:	50                   	push   eax
c000f067:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000f06b:	55                   	push   ebp
c000f06c:	e8 f3 14 ff ff       	call   c0000564 <strcpy>
c000f071:	5b                   	pop    ebx
c000f072:	58                   	pop    eax
c000f073:	68 9c 39 02 c0       	push   0xc002399c
c000f078:	55                   	push   ebp
c000f079:	e8 26 16 ff ff       	call   c00006a4 <strcat>
c000f07e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000f085:	e8 0d a7 ff ff       	call   c0009797 <malloc>
c000f08a:	83 c4 0c             	add    esp,0xc
c000f08d:	89 c3                	mov    ebx,eax
c000f08f:	57                   	push   edi
c000f090:	56                   	push   esi
c000f091:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f095:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f099:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000f0a0:	55                   	push   ebp
c000f0a1:	50                   	push   eax
c000f0a2:	e8 b5 fb ff ff       	call   c000ec5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000f0a7:	83 c4 14             	add    esp,0x14
c000f0aa:	53                   	push   ebx
c000f0ab:	e8 62 fc ff ff       	call   c000ed12 <LogicalDisk::assignDriveLetter()>
c000f0b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0b3:	e8 10 fd ff ff       	call   c000edc8 <LogicalDisk::mount()>
c000f0b8:	58                   	pop    eax
c000f0b9:	5a                   	pop    edx
c000f0ba:	53                   	push   ebx
c000f0bb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f0c2:	e8 d7 ea ff ff       	call   c000db9e <Device::addChild(Device*)>
c000f0c7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f0cd:	5b                   	pop    ebx
c000f0ce:	5e                   	pop    esi
c000f0cf:	5f                   	pop    edi
c000f0d0:	5d                   	pop    ebp
c000f0d1:	c3                   	ret    

c000f0d2 <createPartitionsForDisk(PhysicalDisk*)>:
c000f0d2:	55                   	push   ebp
c000f0d3:	57                   	push   edi
c000f0d4:	56                   	push   esi
c000f0d5:	53                   	push   ebx
c000f0d6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000f0dc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000f0e3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f0e9:	3d 00 02 00 00       	cmp    eax,0x200
c000f0ee:	74 27                	je     c000f117 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000f0f0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000f0f6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000f0fc:	83 ec 10             	sub    esp,0x10
c000f0ff:	0f a4 f7 0a          	shld   edi,esi,0xa
c000f103:	99                   	cdq    
c000f104:	c1 e6 0a             	shl    esi,0xa
c000f107:	52                   	push   edx
c000f108:	89 fd                	mov    ebp,edi
c000f10a:	50                   	push   eax
c000f10b:	55                   	push   ebp
c000f10c:	56                   	push   esi
c000f10d:	e8 9e 24 01 00       	call   c00215b0 <__udivdi3>
c000f112:	e9 b1 00 00 00       	jmp    c000f1c8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f117:	83 ec 0c             	sub    esp,0xc
c000f11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f11c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000f120:	56                   	push   esi
c000f121:	6a 01                	push   0x1
c000f123:	6a 00                	push   0x0
c000f125:	6a 00                	push   0x0
c000f127:	53                   	push   ebx
c000f128:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f12b:	83 c4 20             	add    esp,0x20
c000f12e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000f136:	75 0a                	jne    c000f142 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000f138:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000f140:	74 2c                	je     c000f16e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000f142:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f148:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f14e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f154:	83 ec 10             	sub    esp,0x10
c000f157:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f15b:	89 f7                	mov    edi,esi
c000f15d:	c1 e0 0a             	shl    eax,0xa
c000f160:	c1 ff 1f             	sar    edi,0x1f
c000f163:	57                   	push   edi
c000f164:	56                   	push   esi
c000f165:	52                   	push   edx
c000f166:	50                   	push   eax
c000f167:	e8 44 24 01 00       	call   c00215b0 <__udivdi3>
c000f16c:	eb 5a                	jmp    c000f1c8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f16e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000f175:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000f17c:	83 e1 7f             	and    ecx,0x7f
c000f17f:	83 e0 7f             	and    eax,0x7f
c000f182:	01 c1                	add    ecx,eax
c000f184:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000f18b:	83 e0 7f             	and    eax,0x7f
c000f18e:	01 c1                	add    ecx,eax
c000f190:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000f197:	83 e0 7f             	and    eax,0x7f
c000f19a:	00 c1                	add    cl,al
c000f19c:	74 41                	je     c000f1df <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000f19e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f1a4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f1aa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f1b0:	83 ec 10             	sub    esp,0x10
c000f1b3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f1b7:	89 f7                	mov    edi,esi
c000f1b9:	c1 e0 0a             	shl    eax,0xa
c000f1bc:	c1 ff 1f             	sar    edi,0x1f
c000f1bf:	57                   	push   edi
c000f1c0:	56                   	push   esi
c000f1c1:	52                   	push   edx
c000f1c2:	50                   	push   eax
c000f1c3:	e8 e8 23 01 00       	call   c00215b0 <__udivdi3>
c000f1c8:	83 c4 14             	add    esp,0x14
c000f1cb:	52                   	push   edx
c000f1cc:	50                   	push   eax
c000f1cd:	6a 00                	push   0x0
c000f1cf:	6a 00                	push   0x0
c000f1d1:	53                   	push   ebx
c000f1d2:	e8 53 fe ff ff       	call   c000f02a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f1d7:	83 c4 20             	add    esp,0x20
c000f1da:	e9 79 01 00 00       	jmp    c000f358 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000f1df:	89 f0                	mov    eax,esi
c000f1e1:	31 f6                	xor    esi,esi
c000f1e3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000f1ea:	75 02                	jne    c000f1ee <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000f1ec:	89 f1                	mov    ecx,esi
c000f1ee:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000f1f5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000f1fc:	c1 e2 08             	shl    edx,0x8
c000f1ff:	c1 e7 10             	shl    edi,0x10
c000f202:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000f20a:	09 fa                	or     edx,edi
c000f20c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000f214:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000f21b:	83 c0 10             	add    eax,0x10
c000f21e:	09 fa                	or     edx,edi
c000f220:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000f227:	c1 e7 18             	shl    edi,0x18
c000f22a:	09 fa                	or     edx,edi
c000f22c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000f233:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000f237:	c1 e7 10             	shl    edi,0x10
c000f23a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000f241:	c1 e2 08             	shl    edx,0x8
c000f244:	09 fa                	or     edx,edi
c000f246:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000f24d:	09 fa                	or     edx,edi
c000f24f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000f256:	c1 e7 18             	shl    edi,0x18
c000f259:	09 fa                	or     edx,edi
c000f25b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000f25f:	46                   	inc    esi
c000f260:	83 fe 04             	cmp    esi,0x4
c000f263:	0f 85 7a ff ff ff    	jne    c000f1e3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000f269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f26d:	83 f0 01             	xor    eax,0x1
c000f270:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f274:	75 57                	jne    c000f2cd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f27a:	83 f0 01             	xor    eax,0x1
c000f27d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000f281:	75 4a                	jne    c000f2cd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f283:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000f287:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000f28f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f297:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f29d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f2a3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f2a9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f2ad:	89 f7                	mov    edi,esi
c000f2af:	c1 e0 0a             	shl    eax,0xa
c000f2b2:	c1 ff 1f             	sar    edi,0x1f
c000f2b5:	57                   	push   edi
c000f2b6:	56                   	push   esi
c000f2b7:	52                   	push   edx
c000f2b8:	50                   	push   eax
c000f2b9:	e8 f2 22 01 00       	call   c00215b0 <__udivdi3>
c000f2be:	83 c4 10             	add    esp,0x10
c000f2c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f2c9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000f2cd:	84 c9                	test   cl,cl
c000f2cf:	74 53                	je     c000f324 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000f2d1:	0f b6 c9             	movzx  ecx,cl
c000f2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2dc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f2e0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f2e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2ec:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000f2f0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000f2f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f2f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f304:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000f308:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000f30c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000f310:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000f314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f318:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f31c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000f320:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000f324:	31 ed                	xor    ebp,ebp
c000f326:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000f32a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000f32e:	89 f8                	mov    eax,edi
c000f330:	09 f0                	or     eax,esi
c000f332:	74 1e                	je     c000f352 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f334:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000f338:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000f33c:	89 d1                	mov    ecx,edx
c000f33e:	09 c1                	or     ecx,eax
c000f340:	74 10                	je     c000f352 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f342:	83 ec 0c             	sub    esp,0xc
c000f345:	57                   	push   edi
c000f346:	56                   	push   esi
c000f347:	52                   	push   edx
c000f348:	50                   	push   eax
c000f349:	53                   	push   ebx
c000f34a:	e8 db fc ff ff       	call   c000f02a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f34f:	83 c4 20             	add    esp,0x20
c000f352:	45                   	inc    ebp
c000f353:	83 fd 04             	cmp    ebp,0x4
c000f356:	75 ce                	jne    c000f326 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000f358:	81 c4 5c 02 00 00    	add    esp,0x25c
c000f35e:	5b                   	pop    ebx
c000f35f:	5e                   	pop    esi
c000f360:	5f                   	pop    edi
c000f361:	5d                   	pop    ebp
c000f362:	c3                   	ret    
c000f363:	90                   	nop

c000f364 <Serial::Serial(char const*)>:
c000f364:	83 ec 0c             	sub    esp,0xc
c000f367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f36b:	83 ec 08             	sub    esp,0x8
c000f36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f372:	50                   	push   eax
c000f373:	e8 2a ea ff ff       	call   c000dda2 <Device::Device(char const*)>
c000f378:	83 c4 10             	add    esp,0x10
c000f37b:	ba b0 39 02 c0       	mov    edx,0xc00239b0
c000f380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f384:	89 10                	mov    DWORD PTR [eax],edx
c000f386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f38a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000f394:	90                   	nop
c000f395:	83 c4 0c             	add    esp,0xc
c000f398:	c3                   	ret    
c000f399:	90                   	nop
c000f39a:	66 90                	xchg   ax,ax

c000f39c <Serial::~Serial()>:
c000f39c:	83 ec 0c             	sub    esp,0xc
c000f39f:	ba b0 39 02 c0       	mov    edx,0xc00239b0
c000f3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3a8:	89 10                	mov    DWORD PTR [eax],edx
c000f3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ae:	83 ec 0c             	sub    esp,0xc
c000f3b1:	50                   	push   eax
c000f3b2:	e8 e9 e6 ff ff       	call   c000daa0 <Device::~Device()>
c000f3b7:	83 c4 10             	add    esp,0x10
c000f3ba:	90                   	nop
c000f3bb:	83 c4 0c             	add    esp,0xc
c000f3be:	c3                   	ret    
c000f3bf:	90                   	nop

c000f3c0 <Serial::~Serial()>:
c000f3c0:	83 ec 0c             	sub    esp,0xc
c000f3c3:	83 ec 0c             	sub    esp,0xc
c000f3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3ca:	e8 cd ff ff ff       	call   c000f39c <Serial::~Serial()>
c000f3cf:	83 c4 10             	add    esp,0x10
c000f3d2:	83 ec 08             	sub    esp,0x8
c000f3d5:	68 58 01 00 00       	push   0x158
c000f3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3de:	e8 5d d2 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000f3e3:	83 c4 10             	add    esp,0x10
c000f3e6:	83 c4 0c             	add    esp,0xc
c000f3e9:	c3                   	ret    
c000f3ea:	66 90                	xchg   ax,ax

c000f3ec <Timer::Timer(char const*)>:
c000f3ec:	83 ec 0c             	sub    esp,0xc
c000f3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3f3:	83 ec 08             	sub    esp,0x8
c000f3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3fa:	50                   	push   eax
c000f3fb:	e8 a2 e9 ff ff       	call   c000dda2 <Device::Device(char const*)>
c000f400:	83 c4 10             	add    esp,0x10
c000f403:	ba f4 39 02 c0       	mov    edx,0xc00239f4
c000f408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f40c:	89 10                	mov    DWORD PTR [eax],edx
c000f40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f412:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000f41c:	90                   	nop
c000f41d:	83 c4 0c             	add    esp,0xc
c000f420:	c3                   	ret    
c000f421:	90                   	nop
c000f422:	66 90                	xchg   ax,ax

c000f424 <Timer::~Timer()>:
c000f424:	83 ec 0c             	sub    esp,0xc
c000f427:	ba f4 39 02 c0       	mov    edx,0xc00239f4
c000f42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f430:	89 10                	mov    DWORD PTR [eax],edx
c000f432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f436:	83 ec 0c             	sub    esp,0xc
c000f439:	50                   	push   eax
c000f43a:	e8 61 e6 ff ff       	call   c000daa0 <Device::~Device()>
c000f43f:	83 c4 10             	add    esp,0x10
c000f442:	90                   	nop
c000f443:	83 c4 0c             	add    esp,0xc
c000f446:	c3                   	ret    
c000f447:	90                   	nop

c000f448 <Timer::~Timer()>:
c000f448:	83 ec 0c             	sub    esp,0xc
c000f44b:	83 ec 0c             	sub    esp,0xc
c000f44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f452:	e8 cd ff ff ff       	call   c000f424 <Timer::~Timer()>
c000f457:	83 c4 10             	add    esp,0x10
c000f45a:	83 ec 08             	sub    esp,0x8
c000f45d:	68 5c 01 00 00       	push   0x15c
c000f462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f466:	e8 d5 d1 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000f46b:	83 c4 10             	add    esp,0x10
c000f46e:	83 c4 0c             	add    esp,0xc
c000f471:	c3                   	ret    

c000f472 <Timer::read()>:
c000f472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f476:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f47c:	c3                   	ret    

c000f47d <setupTimer(int)>:
c000f47d:	53                   	push   ebx
c000f47e:	83 ec 14             	sub    esp,0x14
c000f481:	68 5c 01 00 00       	push   0x15c
c000f486:	e8 0c a3 ff ff       	call   c0009797 <malloc>
c000f48b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f48e:	89 c3                	mov    ebx,eax
c000f490:	e8 93 1a 01 00       	call   c0020f28 <PIT::PIT()>
c000f495:	58                   	pop    eax
c000f496:	5a                   	pop    edx
c000f497:	53                   	push   ebx
c000f498:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c000f49e:	e8 fb e6 ff ff       	call   c000db9e <Device::addChild(Device*)>
c000f4a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f4a5:	6a 00                	push   0x0
c000f4a7:	6a 00                	push   0x0
c000f4a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f4ad:	53                   	push   ebx
c000f4ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f4b1:	89 d8                	mov    eax,ebx
c000f4b3:	83 c4 28             	add    esp,0x28
c000f4b6:	5b                   	pop    ebx
c000f4b7:	c3                   	ret    

c000f4b8 <timerHandler(unsigned int)>:
c000f4b8:	56                   	push   esi
c000f4b9:	53                   	push   ebx
c000f4ba:	51                   	push   ecx
c000f4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4bf:	01 05 2c 8a 02 c0    	add    DWORD PTR ds:0xc0028a2c,eax
c000f4c5:	80 3d 4d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002644d,0x0
c000f4cc:	0f 84 4a 01 00 00    	je     c000f61c <timerHandler(unsigned int)+0x164>
c000f4d2:	fa                   	cli    
c000f4d3:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c000f4d9:	83 ec 0c             	sub    esp,0xc
c000f4dc:	ff 05 24 99 02 c0    	inc    DWORD PTR ds:0xc0029924
c000f4e2:	68 38 99 02 c0       	push   0xc0029938
c000f4e7:	e8 94 26 01 00       	call   c0021b80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f4ec:	83 c4 10             	add    esp,0x10
c000f4ef:	84 c0                	test   al,al
c000f4f1:	0f 85 a1 00 00 00    	jne    c000f598 <timerHandler(unsigned int)+0xe0>
c000f4f7:	83 ec 0c             	sub    esp,0xc
c000f4fa:	68 38 99 02 c0       	push   0xc0029938
c000f4ff:	e8 98 26 01 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	89 c6                	mov    esi,eax
c000f509:	8d 76 00             	lea    esi,[esi+0x0]
c000f50c:	83 ec 0c             	sub    esp,0xc
c000f50f:	68 38 99 02 c0       	push   0xc0029938
c000f514:	e8 83 26 01 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f519:	c7 04 24 38 99 02 c0 	mov    DWORD PTR [esp],0xc0029938
c000f520:	89 c3                	mov    ebx,eax
c000f522:	e8 7d 26 01 00       	call   c0021ba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000f527:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000f52a:	83 c4 10             	add    esp,0x10
c000f52d:	3b 05 2c 8a 02 c0    	cmp    eax,DWORD PTR ds:0xc0028a2c
c000f533:	77 23                	ja     c000f558 <timerHandler(unsigned int)+0xa0>
c000f535:	83 ec 0c             	sub    esp,0xc
c000f538:	53                   	push   ebx
c000f539:	e8 6e 70 00 00       	call   c00165ac <unblockTask(ThreadControlBlock*)>
c000f53e:	83 c4 10             	add    esp,0x10
c000f541:	39 de                	cmp    esi,ebx
c000f543:	75 27                	jne    c000f56c <timerHandler(unsigned int)+0xb4>
c000f545:	83 ec 0c             	sub    esp,0xc
c000f548:	68 38 99 02 c0       	push   0xc0029938
c000f54d:	e8 4a 26 01 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f552:	89 c6                	mov    esi,eax
c000f554:	eb 12                	jmp    c000f568 <timerHandler(unsigned int)+0xb0>
c000f556:	66 90                	xchg   ax,ax
c000f558:	52                   	push   edx
c000f559:	52                   	push   edx
c000f55a:	53                   	push   ebx
c000f55b:	68 38 99 02 c0       	push   0xc0029938
c000f560:	e8 f7 26 01 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000f565:	8d 76 00             	lea    esi,[esi+0x0]
c000f568:	83 c4 10             	add    esp,0x10
c000f56b:	90                   	nop
c000f56c:	83 ec 0c             	sub    esp,0xc
c000f56f:	68 38 99 02 c0       	push   0xc0029938
c000f574:	e8 07 26 01 00       	call   c0021b80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	84 c0                	test   al,al
c000f57e:	75 18                	jne    c000f598 <timerHandler(unsigned int)+0xe0>
c000f580:	83 ec 0c             	sub    esp,0xc
c000f583:	68 38 99 02 c0       	push   0xc0029938
c000f588:	e8 0f 26 01 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f58d:	83 c4 10             	add    esp,0x10
c000f590:	39 f0                	cmp    eax,esi
c000f592:	0f 85 74 ff ff ff    	jne    c000f50c <timerHandler(unsigned int)+0x54>
c000f598:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f59d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000f5a1:	74 41                	je     c000f5e4 <timerHandler(unsigned int)+0x12c>
c000f5a3:	80 3d 4c 64 02 c0 00 	cmp    BYTE PTR ds:0xc002644c,0x0
c000f5aa:	74 38                	je     c000f5e4 <timerHandler(unsigned int)+0x12c>
c000f5ac:	fa                   	cli    
c000f5ad:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c000f5b3:	a1 2c 8a 02 c0       	mov    eax,ds:0xc0028a2c
c000f5b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f5be:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000f5c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f5c7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000f5ca:	72 08                	jb     c000f5d4 <timerHandler(unsigned int)+0x11c>
c000f5cc:	e8 1f 6b 00 00       	call   c00160f0 <schedule()>
c000f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d4:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000f5d9:	48                   	dec    eax
c000f5da:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000f5df:	75 03                	jne    c000f5e4 <timerHandler(unsigned int)+0x12c>
c000f5e1:	fb                   	sti    
c000f5e2:	66 90                	xchg   ax,ax
c000f5e4:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000f5e9:	48                   	dec    eax
c000f5ea:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c000f5ef:	75 1b                	jne    c000f60c <timerHandler(unsigned int)+0x154>
c000f5f1:	83 3d 20 99 02 c0 00 	cmp    DWORD PTR ds:0xc0029920,0x0
c000f5f8:	74 12                	je     c000f60c <timerHandler(unsigned int)+0x154>
c000f5fa:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c000f604:	e8 e7 6a 00 00       	call   c00160f0 <schedule()>
c000f609:	8d 76 00             	lea    esi,[esi+0x0]
c000f60c:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c000f611:	48                   	dec    eax
c000f612:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c000f617:	75 03                	jne    c000f61c <timerHandler(unsigned int)+0x164>
c000f619:	fb                   	sti    
c000f61a:	66 90                	xchg   ax,ax
c000f61c:	58                   	pop    eax
c000f61d:	5b                   	pop    ebx
c000f61e:	5e                   	pop    esi
c000f61f:	c3                   	ret    

c000f620 <VCache::VCache(PhysicalDisk*)>:
c000f620:	53                   	push   ebx
c000f621:	83 ec 18             	sub    esp,0x18
c000f624:	ba 24 3a 02 c0       	mov    edx,0xc0023a24
c000f629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f62d:	89 10                	mov    DWORD PTR [eax],edx
c000f62f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f633:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000f63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f63e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000f645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f649:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000f650:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000f657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f65b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000f662:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000f669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f66d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000f674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f678:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f680:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000f687:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000f68e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f692:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f69a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000f69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6a2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6aa:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f6b1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000f6b9:	83 ec 0c             	sub    esp,0xc
c000f6bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6c0:	e8 d2 a0 ff ff       	call   c0009797 <malloc>
c000f6c5:	83 c4 10             	add    esp,0x10
c000f6c8:	89 c3                	mov    ebx,eax
c000f6ca:	83 ec 0c             	sub    esp,0xc
c000f6cd:	53                   	push   ebx
c000f6ce:	e8 ed 67 00 00       	call   c0015ec0 <Mutex::Mutex()>
c000f6d3:	83 c4 10             	add    esp,0x10
c000f6d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6da:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f6dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f6e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ec:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000f6f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6f7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000f6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f701:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f704:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f708:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000f70e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f714:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f718:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000f71b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000f71e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f722:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f726:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f72a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f730:	05 00 01 00 00       	add    eax,0x100
c000f735:	c1 e0 04             	shl    eax,0x4
c000f738:	83 ec 0c             	sub    esp,0xc
c000f73b:	50                   	push   eax
c000f73c:	e8 56 a0 ff ff       	call   c0009797 <malloc>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	89 c2                	mov    edx,eax
c000f746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f74a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f74d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f751:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f75c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f760:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f764:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f76a:	c1 e0 06             	shl    eax,0x6
c000f76d:	83 ec 0c             	sub    esp,0xc
c000f770:	50                   	push   eax
c000f771:	e8 21 a0 ff ff       	call   c0009797 <malloc>
c000f776:	83 c4 10             	add    esp,0x10
c000f779:	89 c2                	mov    edx,eax
c000f77b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f77f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000f782:	90                   	nop
c000f783:	83 c4 18             	add    esp,0x18
c000f786:	5b                   	pop    ebx
c000f787:	c3                   	ret    

c000f788 <VCache::invalidateReadBuffer()>:
c000f788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f78c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000f792:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f796:	c3                   	ret    
c000f797:	90                   	nop

c000f798 <VCache::writeWriteBuffer()>:
c000f798:	53                   	push   ebx
c000f799:	83 ec 08             	sub    esp,0x8
c000f79c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f7a4:	74 1e                	je     c000f7c4 <VCache::writeWriteBuffer()+0x2c>
c000f7a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f7a9:	83 ec 0c             	sub    esp,0xc
c000f7ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000f7ae:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f7b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f7b4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f7b7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f7ba:	50                   	push   eax
c000f7bb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f7be:	83 c4 20             	add    esp,0x20
c000f7c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7c4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000f7cb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000f7d2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000f7d6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000f7dd:	83 c4 08             	add    esp,0x8
c000f7e0:	5b                   	pop    ebx
c000f7e1:	c3                   	ret    
c000f7e2:	66 90                	xchg   ax,ax

c000f7e4 <VCache::~VCache()>:
c000f7e4:	83 ec 0c             	sub    esp,0xc
c000f7e7:	ba 24 3a 02 c0       	mov    edx,0xc0023a24
c000f7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7f0:	89 10                	mov    DWORD PTR [eax],edx
c000f7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7f6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000f7f9:	84 c0                	test   al,al
c000f7fb:	74 0f                	je     c000f80c <VCache::~VCache()+0x28>
c000f7fd:	83 ec 0c             	sub    esp,0xc
c000f800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f804:	e8 8f ff ff ff       	call   c000f798 <VCache::writeWriteBuffer()>
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f810:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f813:	83 ec 0c             	sub    esp,0xc
c000f816:	50                   	push   eax
c000f817:	e8 8b 9f ff ff       	call   c00097a7 <free>
c000f81c:	83 c4 10             	add    esp,0x10
c000f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f823:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f826:	83 ec 0c             	sub    esp,0xc
c000f829:	50                   	push   eax
c000f82a:	e8 78 9f ff ff       	call   c00097a7 <free>
c000f82f:	83 c4 10             	add    esp,0x10
c000f832:	90                   	nop
c000f833:	83 c4 0c             	add    esp,0xc
c000f836:	c3                   	ret    
c000f837:	90                   	nop

c000f838 <VCache::~VCache()>:
c000f838:	83 ec 0c             	sub    esp,0xc
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 9d ff ff ff       	call   c000f7e4 <VCache::~VCache()>
c000f847:	83 c4 10             	add    esp,0x10
c000f84a:	83 ec 08             	sub    esp,0x8
c000f84d:	6a 44                	push   0x44
c000f84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f853:	e8 e8 cd ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000f858:	83 c4 10             	add    esp,0x10
c000f85b:	83 c4 0c             	add    esp,0xc
c000f85e:	c3                   	ret    
c000f85f:	90                   	nop

c000f860 <VCache::write(unsigned long long, int, void*)>:
c000f860:	55                   	push   ebp
c000f861:	31 c0                	xor    eax,eax
c000f863:	57                   	push   edi
c000f864:	56                   	push   esi
c000f865:	53                   	push   ebx
c000f866:	83 ec 0c             	sub    esp,0xc
c000f869:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f86d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f871:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f875:	8d 76 00             	lea    esi,[esi+0x0]
c000f878:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000f87c:	7d 1a                	jge    c000f898 <VCache::write(unsigned long long, int, void*)+0x38>
c000f87e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f881:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f887:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f88b:	0f af c8             	imul   ecx,eax
c000f88e:	01 ca                	add    edx,ecx
c000f890:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f892:	40                   	inc    eax
c000f893:	eb e3                	jmp    c000f878 <VCache::write(unsigned long long, int, void*)+0x18>
c000f895:	8d 76 00             	lea    esi,[esi+0x0]
c000f898:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f89c:	74 0a                	je     c000f8a8 <VCache::write(unsigned long long, int, void*)+0x48>
c000f89e:	53                   	push   ebx
c000f89f:	e8 e4 fe ff ff       	call   c000f788 <VCache::invalidateReadBuffer()>
c000f8a4:	58                   	pop    eax
c000f8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f8ac:	74 5e                	je     c000f90c <VCache::write(unsigned long long, int, void*)+0xac>
c000f8ae:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000f8b1:	89 e8                	mov    eax,ebp
c000f8b3:	99                   	cdq    
c000f8b4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000f8b7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000f8ba:	89 c1                	mov    ecx,eax
c000f8bc:	89 d0                	mov    eax,edx
c000f8be:	31 f1                	xor    ecx,esi
c000f8c0:	31 f8                	xor    eax,edi
c000f8c2:	09 c1                	or     ecx,eax
c000f8c4:	75 3a                	jne    c000f900 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f8c6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000f8cb:	75 33                	jne    c000f900 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f8cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f8d0:	89 ef                	mov    edi,ebp
c000f8d2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f8d8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f8dc:	0f af f9             	imul   edi,ecx
c000f8df:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000f8e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8e4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000f8e7:	40                   	inc    eax
c000f8e8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000f8eb:	83 f8 40             	cmp    eax,0x40
c000f8ee:	75 60                	jne    c000f950 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f8f0:	83 ec 0c             	sub    esp,0xc
c000f8f3:	53                   	push   ebx
c000f8f4:	e8 9f fe ff ff       	call   c000f798 <VCache::writeWriteBuffer()>
c000f8f9:	83 c4 10             	add    esp,0x10
c000f8fc:	eb 52                	jmp    c000f950 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f8fe:	66 90                	xchg   ax,ax
c000f900:	83 ec 0c             	sub    esp,0xc
c000f903:	53                   	push   ebx
c000f904:	e8 8f fe ff ff       	call   c000f798 <VCache::writeWriteBuffer()>
c000f909:	83 c4 10             	add    esp,0x10
c000f90c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f90f:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000f914:	7f 22                	jg     c000f938 <VCache::write(unsigned long long, int, void*)+0xd8>
c000f916:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000f919:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000f91c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f920:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000f924:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000f927:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000f92a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f930:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f934:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f936:	eb 18                	jmp    c000f950 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f938:	83 ec 0c             	sub    esp,0xc
c000f93b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f93d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f941:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f945:	57                   	push   edi
c000f946:	56                   	push   esi
c000f947:	50                   	push   eax
c000f948:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f94b:	83 c4 20             	add    esp,0x20
c000f94e:	66 90                	xchg   ax,ax
c000f950:	83 c4 0c             	add    esp,0xc
c000f953:	31 c0                	xor    eax,eax
c000f955:	5b                   	pop    ebx
c000f956:	5e                   	pop    esi
c000f957:	5f                   	pop    edi
c000f958:	5d                   	pop    ebp
c000f959:	c3                   	ret    

c000f95a <VCache::read(unsigned long long, int, void*)>:
c000f95a:	55                   	push   ebp
c000f95b:	31 c0                	xor    eax,eax
c000f95d:	57                   	push   edi
c000f95e:	56                   	push   esi
c000f95f:	53                   	push   ebx
c000f960:	83 ec 1c             	sub    esp,0x1c
c000f963:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f967:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000f96b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000f96f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000f973:	90                   	nop
c000f974:	39 e8                	cmp    eax,ebp
c000f976:	7d 18                	jge    c000f990 <VCache::read(unsigned long long, int, void*)+0x36>
c000f978:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f97b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f981:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f985:	0f af c8             	imul   ecx,eax
c000f988:	01 ca                	add    edx,ecx
c000f98a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f98c:	40                   	inc    eax
c000f98d:	eb e5                	jmp    c000f974 <VCache::read(unsigned long long, int, void*)+0x1a>
c000f98f:	90                   	nop
c000f990:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f994:	74 0e                	je     c000f9a4 <VCache::read(unsigned long long, int, void*)+0x4a>
c000f996:	83 ec 0c             	sub    esp,0xc
c000f999:	53                   	push   ebx
c000f99a:	e8 f9 fd ff ff       	call   c000f798 <VCache::writeWriteBuffer()>
c000f99f:	83 c4 10             	add    esp,0x10
c000f9a2:	66 90                	xchg   ax,ax
c000f9a4:	83 fd 01             	cmp    ebp,0x1
c000f9a7:	0f 85 87 00 00 00    	jne    c000fa34 <VCache::read(unsigned long long, int, void*)+0xda>
c000f9ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f9b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f9b4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000f9bb:	75 77                	jne    c000fa34 <VCache::read(unsigned long long, int, void*)+0xda>
c000f9bd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000f9c0:	89 e9                	mov    ecx,ebp
c000f9c2:	f7 d9                	neg    ecx
c000f9c4:	89 c8                	mov    eax,ecx
c000f9c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f9ca:	c1 f8 1f             	sar    eax,0x1f
c000f9cd:	21 f1                	and    ecx,esi
c000f9cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9d3:	89 c8                	mov    eax,ecx
c000f9d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9d9:	21 f9                	and    ecx,edi
c000f9db:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f9df:	89 ca                	mov    edx,ecx
c000f9e1:	74 0d                	je     c000f9f0 <VCache::read(unsigned long long, int, void*)+0x96>
c000f9e3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000f9e6:	75 08                	jne    c000f9f0 <VCache::read(unsigned long long, int, void*)+0x96>
c000f9e8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000f9eb:	74 27                	je     c000fa14 <VCache::read(unsigned long long, int, void*)+0xba>
c000f9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f9f0:	83 ec 0c             	sub    esp,0xc
c000f9f3:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000f9f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f9fb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000f9fe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000fa01:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000fa03:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000fa06:	55                   	push   ebp
c000fa07:	52                   	push   edx
c000fa08:	50                   	push   eax
c000fa09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa0d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000fa10:	83 c4 20             	add    esp,0x20
c000fa13:	90                   	nop
c000fa14:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fa17:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000fa1b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000fa21:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000fa24:	48                   	dec    eax
c000fa25:	21 c6                	and    esi,eax
c000fa27:	0f af f1             	imul   esi,ecx
c000fa2a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000fa2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa2f:	eb 23                	jmp    c000fa54 <VCache::read(unsigned long long, int, void*)+0xfa>
c000fa31:	8d 76 00             	lea    esi,[esi+0x0]
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	53                   	push   ebx
c000fa38:	e8 4b fd ff ff       	call   c000f788 <VCache::invalidateReadBuffer()>
c000fa3d:	5a                   	pop    edx
c000fa3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fa41:	8b 10                	mov    edx,DWORD PTR [eax]
c000fa43:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fa47:	55                   	push   ebp
c000fa48:	57                   	push   edi
c000fa49:	56                   	push   esi
c000fa4a:	50                   	push   eax
c000fa4b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000fa4e:	83 c4 20             	add    esp,0x20
c000fa51:	8d 76 00             	lea    esi,[esi+0x0]
c000fa54:	83 c4 1c             	add    esp,0x1c
c000fa57:	31 c0                	xor    eax,eax
c000fa59:	5b                   	pop    ebx
c000fa5a:	5e                   	pop    esi
c000fa5b:	5f                   	pop    edi
c000fa5c:	5d                   	pop    ebp
c000fa5d:	c3                   	ret    

c000fa5e <Video::putrect(int, int, int, int, unsigned int)>:
c000fa5e:	55                   	push   ebp
c000fa5f:	57                   	push   edi
c000fa60:	56                   	push   esi
c000fa61:	53                   	push   ebx
c000fa62:	83 ec 1c             	sub    esp,0x1c
c000fa65:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fa69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa6d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000fa71:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fa75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fa79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa7d:	01 df                	add    edi,ebx
c000fa7f:	39 fb                	cmp    ebx,edi
c000fa81:	7d 1f                	jge    c000faa2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000fa83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fa87:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000fa8b:	7d 12                	jge    c000fa9f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000fa8d:	8b 16                	mov    edx,DWORD PTR [esi]
c000fa8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fa93:	53                   	push   ebx
c000fa94:	55                   	push   ebp
c000fa95:	45                   	inc    ebp
c000fa96:	56                   	push   esi
c000fa97:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	eb e8                	jmp    c000fa87 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000fa9f:	43                   	inc    ebx
c000faa0:	eb dd                	jmp    c000fa7f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000faa2:	83 c4 1c             	add    esp,0x1c
c000faa5:	5b                   	pop    ebx
c000faa6:	5e                   	pop    esi
c000faa7:	5f                   	pop    edi
c000faa8:	5d                   	pop    ebp
c000faa9:	c3                   	ret    

c000faaa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000faaa:	55                   	push   ebp
c000faab:	57                   	push   edi
c000faac:	31 ff                	xor    edi,edi
c000faae:	56                   	push   esi
c000faaf:	53                   	push   ebx
c000fab0:	83 ec 1c             	sub    esp,0x1c
c000fab3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000fab7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fabb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000fac2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000fac7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000facb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000facf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fad3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000fad6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fada:	01 f9                	add    ecx,edi
c000fadc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000fae0:	7d 2f                	jge    c000fb11 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000fae2:	31 f6                	xor    esi,esi
c000fae4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000fae8:	01 f2                	add    edx,esi
c000faea:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000faee:	7d 1a                	jge    c000fb0a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000faf0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000faf3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000faf6:	46                   	inc    esi
c000faf7:	51                   	push   ecx
c000faf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fafc:	52                   	push   edx
c000fafd:	55                   	push   ebp
c000fafe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fb01:	83 c4 10             	add    esp,0x10
c000fb04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb08:	eb da                	jmp    c000fae4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000fb0a:	47                   	inc    edi
c000fb0b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000fb0f:	eb c5                	jmp    c000fad6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000fb11:	83 c4 1c             	add    esp,0x1c
c000fb14:	5b                   	pop    ebx
c000fb15:	5e                   	pop    esi
c000fb16:	5f                   	pop    edi
c000fb17:	5d                   	pop    ebp
c000fb18:	c3                   	ret    
c000fb19:	90                   	nop

c000fb1a <Video::blit(unsigned int*, int, int, int, int)>:
c000fb1a:	55                   	push   ebp
c000fb1b:	57                   	push   edi
c000fb1c:	56                   	push   esi
c000fb1d:	53                   	push   ebx
c000fb1e:	83 ec 1c             	sub    esp,0x1c
c000fb21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fb29:	85 c0                	test   eax,eax
c000fb2b:	79 02                	jns    c000fb2f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000fb2d:	31 c0                	xor    eax,eax
c000fb2f:	c1 e0 02             	shl    eax,0x2
c000fb32:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000fb36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fb3e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000fb42:	39 d8                	cmp    eax,ebx
c000fb44:	7e 49                	jle    c000fb8f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000fb46:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000fb4c:	7c 41                	jl     c000fb8f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000fb4e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000fb52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fb56:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fb5a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000fb5e:	39 f9                	cmp    ecx,edi
c000fb60:	7e 22                	jle    c000fb84 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000fb62:	83 c5 04             	add    ebp,0x4
c000fb65:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000fb6b:	7c 14                	jl     c000fb81 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000fb6d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000fb6f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000fb72:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000fb76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000fb7a:	56                   	push   esi
c000fb7b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000fb7e:	83 c4 10             	add    esp,0x10
c000fb81:	47                   	inc    edi
c000fb82:	eb d2                	jmp    c000fb56 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000fb84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb88:	43                   	inc    ebx
c000fb89:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000fb8d:	eb ab                	jmp    c000fb3a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000fb8f:	83 c4 1c             	add    esp,0x1c
c000fb92:	5b                   	pop    ebx
c000fb93:	5e                   	pop    esi
c000fb94:	5f                   	pop    edi
c000fb95:	5d                   	pop    ebp
c000fb96:	c3                   	ret    
c000fb97:	90                   	nop

c000fb98 <Video::clearScreen(unsigned int)>:
c000fb98:	57                   	push   edi
c000fb99:	56                   	push   esi
c000fb9a:	53                   	push   ebx
c000fb9b:	31 db                	xor    ebx,ebx
c000fb9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fba1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000fba7:	7e 1f                	jle    c000fbc8 <Video::clearScreen(unsigned int)+0x30>
c000fba9:	31 ff                	xor    edi,edi
c000fbab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000fbb1:	7e 12                	jle    c000fbc5 <Video::clearScreen(unsigned int)+0x2d>
c000fbb3:	8b 06                	mov    eax,DWORD PTR [esi]
c000fbb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbb9:	53                   	push   ebx
c000fbba:	57                   	push   edi
c000fbbb:	47                   	inc    edi
c000fbbc:	56                   	push   esi
c000fbbd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	eb e6                	jmp    c000fbab <Video::clearScreen(unsigned int)+0x13>
c000fbc5:	43                   	inc    ebx
c000fbc6:	eb d9                	jmp    c000fba1 <Video::clearScreen(unsigned int)+0x9>
c000fbc8:	5b                   	pop    ebx
c000fbc9:	5e                   	pop    esi
c000fbca:	5f                   	pop    edi
c000fbcb:	c3                   	ret    

c000fbcc <Video::putpixel(int, int, unsigned int)>:
c000fbcc:	c7 44 24 04 2c 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a2c
c000fbd4:	e9 b2 2e 00 00       	jmp    c0012a8b <Krnl::panic(char const*)>
c000fbd9:	90                   	nop

c000fbda <Video::Video(char const*)>:
c000fbda:	83 ec 0c             	sub    esp,0xc
c000fbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbe1:	83 ec 08             	sub    esp,0x8
c000fbe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbe8:	50                   	push   eax
c000fbe9:	e8 b4 e1 ff ff       	call   c000dda2 <Device::Device(char const*)>
c000fbee:	83 c4 10             	add    esp,0x10
c000fbf1:	ba 9c 3a 02 c0       	mov    edx,0xc0023a9c
c000fbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbfa:	89 10                	mov    DWORD PTR [eax],edx
c000fbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc00:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000fc0a:	90                   	nop
c000fc0b:	83 c4 0c             	add    esp,0xc
c000fc0e:	c3                   	ret    
c000fc0f:	90                   	nop

c000fc10 <Video::~Video()>:
c000fc10:	83 ec 0c             	sub    esp,0xc
c000fc13:	ba 9c 3a 02 c0       	mov    edx,0xc0023a9c
c000fc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc1c:	89 10                	mov    DWORD PTR [eax],edx
c000fc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc22:	83 ec 0c             	sub    esp,0xc
c000fc25:	50                   	push   eax
c000fc26:	e8 75 de ff ff       	call   c000daa0 <Device::~Device()>
c000fc2b:	83 c4 10             	add    esp,0x10
c000fc2e:	90                   	nop
c000fc2f:	83 c4 0c             	add    esp,0xc
c000fc32:	c3                   	ret    
c000fc33:	90                   	nop

c000fc34 <Video::~Video()>:
c000fc34:	83 ec 0c             	sub    esp,0xc
c000fc37:	83 ec 0c             	sub    esp,0xc
c000fc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc3e:	e8 cd ff ff ff       	call   c000fc10 <Video::~Video()>
c000fc43:	83 c4 10             	add    esp,0x10
c000fc46:	83 ec 08             	sub    esp,0x8
c000fc49:	68 64 01 00 00       	push   0x164
c000fc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc52:	e8 e9 c9 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c000fc57:	83 c4 10             	add    esp,0x10
c000fc5a:	83 c4 0c             	add    esp,0xc
c000fc5d:	c3                   	ret    

c000fc5e <Video::isMonochrome()>:
c000fc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc62:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000fc68:	c3                   	ret    
c000fc69:	90                   	nop

c000fc6a <Video::getWidth()>:
c000fc6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000fc74:	c3                   	ret    
c000fc75:	90                   	nop

c000fc76 <Video::getHeight()>:
c000fc76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc7a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc80:	c3                   	ret    
c000fc81:	90                   	nop

c000fc82 <Video::drawCursor(int, int, unsigned char*, int)>:
c000fc82:	55                   	push   ebp
c000fc83:	57                   	push   edi
c000fc84:	56                   	push   esi
c000fc85:	53                   	push   ebx
c000fc86:	83 ec 2c             	sub    esp,0x2c
c000fc89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fc8d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fc91:	83 f8 01             	cmp    eax,0x1
c000fc94:	19 c9                	sbb    ecx,ecx
c000fc96:	31 db                	xor    ebx,ebx
c000fc98:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fc9c:	89 cd                	mov    ebp,ecx
c000fc9e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000fca6:	f7 d5                	not    ebp
c000fca8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000fcae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000fcb2:	01 d8                	add    eax,ebx
c000fcb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcb8:	56                   	push   esi
c000fcb9:	e8 b8 ff ff ff       	call   c000fc76 <Video::getHeight()>
c000fcbe:	59                   	pop    ecx
c000fcbf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fcc3:	7e 70                	jle    c000fd35 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000fcc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fcc9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000fccd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000fcd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fcd4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fcd8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000fcdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fce3:	89 f8                	mov    eax,edi
c000fce5:	83 c0 20             	add    eax,0x20
c000fce8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fcec:	56                   	push   esi
c000fced:	e8 78 ff ff ff       	call   c000fc6a <Video::getWidth()>
c000fcf2:	5a                   	pop    edx
c000fcf3:	39 c7                	cmp    edi,eax
c000fcf5:	7d 34                	jge    c000fd2b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000fcf7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000fcfc:	74 05                	je     c000fd03 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000fcfe:	8b 06                	mov    eax,DWORD PTR [esi]
c000fd00:	55                   	push   ebp
c000fd01:	eb 0d                	jmp    c000fd10 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000fd03:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000fd08:	74 12                	je     c000fd1c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000fd0a:	8b 06                	mov    eax,DWORD PTR [esi]
c000fd0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd14:	57                   	push   edi
c000fd15:	56                   	push   esi
c000fd16:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fd19:	83 c4 10             	add    esp,0x10
c000fd1c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000fd20:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000fd24:	47                   	inc    edi
c000fd25:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000fd29:	75 c1                	jne    c000fcec <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000fd2b:	43                   	inc    ebx
c000fd2c:	83 fb 20             	cmp    ebx,0x20
c000fd2f:	0f 85 79 ff ff ff    	jne    c000fcae <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000fd35:	83 c4 2c             	add    esp,0x2c
c000fd38:	5b                   	pop    ebx
c000fd39:	5e                   	pop    esi
c000fd3a:	5f                   	pop    edi
c000fd3b:	5d                   	pop    ebp
c000fd3c:	c3                   	ret    
c000fd3d:	90                   	nop

c000fd3e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000fd3e:	55                   	push   ebp
c000fd3f:	57                   	push   edi
c000fd40:	56                   	push   esi
c000fd41:	53                   	push   ebx
c000fd42:	83 ec 28             	sub    esp,0x28
c000fd45:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000fd49:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000fd4d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000fd51:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000fd55:	c1 e6 08             	shl    esi,0x8
c000fd58:	01 c6                	add    esi,eax
c000fd5a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000fd5e:	c1 e0 08             	shl    eax,0x8
c000fd61:	01 d0                	add    eax,edx
c000fd63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd6b:	0f af c6             	imul   eax,esi
c000fd6e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000fd75:	50                   	push   eax
c000fd76:	e8 1c 9a ff ff       	call   c0009797 <malloc>
c000fd7b:	83 c4 10             	add    esp,0x10
c000fd7e:	89 c7                	mov    edi,eax
c000fd80:	85 c0                	test   eax,eax
c000fd82:	75 10                	jne    c000fd94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000fd84:	83 ec 0c             	sub    esp,0xc
c000fd87:	68 4d 3a 02 c0       	push   0xc0023a4d
c000fd8c:	e8 fa 2c 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000fd91:	83 c4 10             	add    esp,0x10
c000fd94:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000fd97:	ba 12 00 00 00       	mov    edx,0x12
c000fd9c:	84 c0                	test   al,al
c000fd9e:	74 11                	je     c000fdb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000fda0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000fda4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000fda8:	c1 fa 03             	sar    edx,0x3
c000fdab:	0f af d1             	imul   edx,ecx
c000fdae:	83 c2 12             	add    edx,0x12
c000fdb1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000fdb5:	74 04                	je     c000fdbb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000fdb7:	85 f6                	test   esi,esi
c000fdb9:	75 12                	jne    c000fdcd <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000fdbb:	83 ec 0c             	sub    esp,0xc
c000fdbe:	68 5d 3a 02 c0       	push   0xc0023a5d
c000fdc3:	e8 59 c9 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000fdc8:	e9 b8 00 00 00       	jmp    c000fe85 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000fdcd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000fdd1:	80 f9 02             	cmp    cl,0x2
c000fdd4:	0f 85 96 00 00 00    	jne    c000fe70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000fdda:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000fddf:	75 0e                	jne    c000fdef <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fde1:	84 c0                	test   al,al
c000fde3:	75 0a                	jne    c000fdef <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fde5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000fde8:	83 e8 18             	sub    eax,0x18
c000fdeb:	a8 f7                	test   al,0xf7
c000fded:	74 0a                	je     c000fdf9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000fdef:	83 ec 0c             	sub    esp,0xc
c000fdf2:	68 72 3a 02 c0       	push   0xc0023a72
c000fdf7:	eb 7f                	jmp    c000fe78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000fdf9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000fe09:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000fe0d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe15:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000fe19:	75 0c                	jne    c000fe27 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000fe1b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000fe20:	c1 e0 18             	shl    eax,0x18
c000fe23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe27:	45                   	inc    ebp
c000fe28:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000fe2d:	c1 e1 10             	shl    ecx,0x10
c000fe30:	89 c8                	mov    eax,ecx
c000fe32:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000fe37:	c1 e1 08             	shl    ecx,0x8
c000fe3a:	09 c1                	or     ecx,eax
c000fe3c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000fe40:	09 c1                	or     ecx,eax
c000fe42:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000fe46:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000fe4a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000fe4e:	c1 f8 03             	sar    eax,0x3
c000fe51:	01 c2                	add    edx,eax
c000fe53:	89 e8                	mov    eax,ebp
c000fe55:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000fe59:	39 c6                	cmp    esi,eax
c000fe5b:	7f b0                	jg     c000fe0d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000fe5d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fe61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000fe68:	7e 22                	jle    c000fe8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000fe6a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000fe6e:	eb 99                	jmp    c000fe09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000fe70:	50                   	push   eax
c000fe71:	50                   	push   eax
c000fe72:	51                   	push   ecx
c000fe73:	68 80 3a 02 c0       	push   0xc0023a80
c000fe78:	e8 a4 c8 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c000fe7d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fe80:	e8 22 99 ff ff       	call   c00097a7 <free>
c000fe85:	83 c4 10             	add    esp,0x10
c000fe88:	31 ff                	xor    edi,edi
c000fe8a:	eb 0f                	jmp    c000fe9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000fe8c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fe90:	89 30                	mov    DWORD PTR [eax],esi
c000fe92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe96:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fe99:	89 30                	mov    DWORD PTR [eax],esi
c000fe9b:	83 c4 1c             	add    esp,0x1c
c000fe9e:	89 f8                	mov    eax,edi
c000fea0:	5b                   	pop    ebx
c000fea1:	5e                   	pop    esi
c000fea2:	5f                   	pop    edi
c000fea3:	5d                   	pop    ebp
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <Video::putTGA(int, int, unsigned char*, int)>:
c000fea6:	55                   	push   ebp
c000fea7:	57                   	push   edi
c000fea8:	56                   	push   esi
c000fea9:	53                   	push   ebx
c000feaa:	83 ec 28             	sub    esp,0x28
c000fead:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000feb1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000feb5:	50                   	push   eax
c000feb6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000feba:	50                   	push   eax
c000febb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000febf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fec3:	56                   	push   esi
c000fec4:	e8 75 fe ff ff       	call   c000fd3e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000fec9:	83 c4 20             	add    esp,0x20
c000fecc:	85 c0                	test   eax,eax
c000fece:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fed2:	74 35                	je     c000ff09 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fed4:	89 c7                	mov    edi,eax
c000fed6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000feda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000fede:	39 d8                	cmp    eax,ebx
c000fee0:	7e 27                	jle    c000ff09 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fee2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fee6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000feee:	39 e8                	cmp    eax,ebp
c000fef0:	7e 14                	jle    c000ff06 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000fef2:	8b 06                	mov    eax,DWORD PTR [esi]
c000fef4:	83 c7 04             	add    edi,0x4
c000fef7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000fefa:	53                   	push   ebx
c000fefb:	55                   	push   ebp
c000fefc:	45                   	inc    ebp
c000fefd:	56                   	push   esi
c000fefe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff01:	83 c4 10             	add    esp,0x10
c000ff04:	eb e0                	jmp    c000fee6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ff06:	43                   	inc    ebx
c000ff07:	eb cd                	jmp    c000fed6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ff09:	83 c4 1c             	add    esp,0x1c
c000ff0c:	5b                   	pop    ebx
c000ff0d:	5e                   	pop    esi
c000ff0e:	5f                   	pop    edi
c000ff0f:	5d                   	pop    ebp
c000ff10:	c3                   	ret    
c000ff11:	66 90                	xchg   ax,ax
c000ff13:	90                   	nop

c000ff14 <ACPI::close(int, int, void*)>:
c000ff14:	83 ec 1c             	sub    esp,0x1c
c000ff17:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ff1f:	74 0b                	je     c000ff2c <ACPI::close(int, int, void*)+0x18>
c000ff21:	b8 00 00 00 00       	mov    eax,0x0
c000ff26:	e9 99 00 00 00       	jmp    c000ffc4 <ACPI::close(int, int, void*)+0xb0>
c000ff2b:	90                   	nop
c000ff2c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ff31:	75 29                	jne    c000ff5c <ACPI::close(int, int, void*)+0x48>
c000ff33:	a1 48 8a 02 c0       	mov    eax,ds:0xc0028a48
c000ff38:	85 c0                	test   eax,eax
c000ff3a:	74 08                	je     c000ff44 <ACPI::close(int, int, void*)+0x30>
c000ff3c:	a1 48 8a 02 c0       	mov    eax,ds:0xc0028a48
c000ff41:	ff d0                	call   eax
c000ff43:	90                   	nop
c000ff44:	83 ec 0c             	sub    esp,0xc
c000ff47:	68 dc 3a 02 c0       	push   0xc0023adc
c000ff4c:	e8 3a 2b 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff59:	eb 69                	jmp    c000ffc4 <ACPI::close(int, int, void*)+0xb0>
c000ff5b:	90                   	nop
c000ff5c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ff61:	75 59                	jne    c000ffbc <ACPI::close(int, int, void*)+0xa8>
c000ff63:	a1 44 8a 02 c0       	mov    eax,ds:0xc0028a44
c000ff68:	85 c0                	test   eax,eax
c000ff6a:	74 08                	je     c000ff74 <ACPI::close(int, int, void*)+0x60>
c000ff6c:	a1 44 8a 02 c0       	mov    eax,ds:0xc0028a44
c000ff71:	ff d0                	call   eax
c000ff73:	90                   	nop
c000ff74:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ff79:	8d 76 00             	lea    esi,[esi+0x0]
c000ff7c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ff81:	83 e0 02             	and    eax,0x2
c000ff84:	74 1e                	je     c000ffa4 <ACPI::close(int, int, void*)+0x90>
c000ff86:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ff8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff91:	89 c2                	mov    edx,eax
c000ff93:	ec                   	in     al,dx
c000ff94:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ff98:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ff9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ffa0:	eb da                	jmp    c000ff7c <ACPI::close(int, int, void*)+0x68>
c000ffa2:	66 90                	xchg   ax,ax
c000ffa4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ffab:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ffb0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ffb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffb8:	ee                   	out    dx,al
c000ffb9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ffc1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffc4:	83 c4 1c             	add    esp,0x1c
c000ffc7:	c3                   	ret    

c000ffc8 <findRSDP()>:
c000ffc8:	83 ec 1c             	sub    esp,0x1c
c000ffcb:	83 ec 0c             	sub    esp,0xc
c000ffce:	68 ff 3b 02 c0       	push   0xc0023bff
c000ffd3:	e8 19 98 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000ffd8:	83 c4 10             	add    esp,0x10
c000ffdb:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000ffe0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000ffe6:	83 e0 04             	and    eax,0x4
c000ffe9:	84 c0                	test   al,al
c000ffeb:	75 0b                	jne    c000fff8 <findRSDP()+0x30>
c000ffed:	b8 00 00 00 00       	mov    eax,0x0
c000fff2:	e9 a1 00 00 00       	jmp    c0010098 <findRSDP()+0xd0>
c000fff7:	90                   	nop
c000fff8:	a1 78 64 02 c0       	mov    eax,ds:0xc0026478
c000fffd:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010002:	7f 1c                	jg     c0010020 <findRSDP()+0x58>
c0010004:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0010009:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001000f:	83 e2 fb             	and    edx,0xfffffffb
c0010012:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010018:	b8 00 00 00 00       	mov    eax,0x0
c001001d:	eb 79                	jmp    c0010098 <findRSDP()+0xd0>
c001001f:	90                   	nop
c0010020:	83 ec 0c             	sub    esp,0xc
c0010023:	68 0f 3c 02 c0       	push   0xc0023c0f
c0010028:	e8 c4 97 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001002d:	83 c4 10             	add    esp,0x10
c0010030:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0010038:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0010040:	77 3e                	ja     c0010080 <findRSDP()+0xb8>
c0010042:	83 ec 04             	sub    esp,0x4
c0010045:	6a 08                	push   0x8
c0010047:	68 28 3c 02 c0       	push   0xc0023c28
c001004c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010050:	e8 4f 03 ff ff       	call   c00003a4 <memcmp>
c0010055:	83 c4 10             	add    esp,0x10
c0010058:	85 c0                	test   eax,eax
c001005a:	0f 94 c0             	sete   al
c001005d:	84 c0                	test   al,al
c001005f:	74 17                	je     c0010078 <findRSDP()+0xb0>
c0010061:	83 ec 0c             	sub    esp,0xc
c0010064:	68 31 3c 02 c0       	push   0xc0023c31
c0010069:	e8 83 97 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001006e:	83 c4 10             	add    esp,0x10
c0010071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010075:	eb 21                	jmp    c0010098 <findRSDP()+0xd0>
c0010077:	90                   	nop
c0010078:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001007d:	eb b9                	jmp    c0010038 <findRSDP()+0x70>
c001007f:	90                   	nop
c0010080:	83 ec 0c             	sub    esp,0xc
c0010083:	68 3f 3c 02 c0       	push   0xc0023c3f
c0010088:	e8 64 97 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001008d:	83 c4 10             	add    esp,0x10
c0010090:	b8 00 00 00 00       	mov    eax,0x0
c0010095:	8d 76 00             	lea    esi,[esi+0x0]
c0010098:	83 c4 1c             	add    esp,0x1c
c001009b:	c3                   	ret    

c001009c <loadACPITables(unsigned char*)>:
c001009c:	57                   	push   edi
c001009d:	56                   	push   esi
c001009e:	53                   	push   ebx
c001009f:	83 ec 60             	sub    esp,0x60
c00100a2:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00100a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00100ad:	83 e0 04             	and    eax,0x4
c00100b0:	84 c0                	test   al,al
c00100b2:	0f 84 3c 02 00 00    	je     c00102f4 <loadACPITables(unsigned char*)+0x258>
c00100b8:	a0 60 8c 02 c0       	mov    al,ds:0xc0028c60
c00100bd:	84 c0                	test   al,al
c00100bf:	74 77                	je     c0010138 <loadACPITables(unsigned char*)+0x9c>
c00100c1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00100c5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00100c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00100cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100d0:	83 e8 24             	sub    eax,0x24
c00100d3:	c1 e8 03             	shr    eax,0x3
c00100d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00100da:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00100e2:	66 90                	xchg   ax,ax
c00100e4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00100e8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00100ec:	0f 8d b6 00 00 00    	jge    c00101a8 <loadACPITables(unsigned char*)+0x10c>
c00100f2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00100f6:	83 c0 24             	add    eax,0x24
c00100f9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00100fd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010101:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010105:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0010109:	c1 e0 03             	shl    eax,0x3
c001010c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0010110:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010114:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010117:	8b 00                	mov    eax,DWORD PTR [eax]
c0010119:	89 c1                	mov    ecx,eax
c001011b:	a1 4c 8a 02 c0       	mov    eax,ds:0xc0028a4c
c0010120:	8d 50 01             	lea    edx,[eax+0x1]
c0010123:	89 15 4c 8a 02 c0    	mov    DWORD PTR ds:0xc0028a4c,edx
c0010129:	89 ca                	mov    edx,ecx
c001012b:	89 14 c5 64 8a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd759c],edx
c0010132:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0010136:	eb ac                	jmp    c00100e4 <loadACPITables(unsigned char*)+0x48>
c0010138:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001013c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010140:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010147:	83 e8 24             	sub    eax,0x24
c001014a:	c1 e8 02             	shr    eax,0x2
c001014d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010151:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0010159:	8d 76 00             	lea    esi,[esi+0x0]
c001015c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010160:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0010164:	7d 42                	jge    c00101a8 <loadACPITables(unsigned char*)+0x10c>
c0010166:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001016a:	83 c0 24             	add    eax,0x24
c001016d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010171:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010175:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010179:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001017d:	c1 e0 02             	shl    eax,0x2
c0010180:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010184:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010188:	8b 08                	mov    ecx,DWORD PTR [eax]
c001018a:	a1 4c 8a 02 c0       	mov    eax,ds:0xc0028a4c
c001018f:	8d 50 01             	lea    edx,[eax+0x1]
c0010192:	89 15 4c 8a 02 c0    	mov    DWORD PTR ds:0xc0028a4c,edx
c0010198:	89 ca                	mov    edx,ecx
c001019a:	89 14 c5 64 8a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd759c],edx
c00101a1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00101a5:	eb b5                	jmp    c001015c <loadACPITables(unsigned char*)+0xc0>
c00101a7:	90                   	nop
c00101a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00101b0:	a1 4c 8a 02 c0       	mov    eax,ds:0xc0028a4c
c00101b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00101b9:	0f 8d 39 01 00 00    	jge    c00102f8 <loadACPITables(unsigned char*)+0x25c>
c00101bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00101c3:	8b 04 c5 64 8a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd759c]
c00101ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00101ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00101d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101da:	25 ff 0f 00 00       	and    eax,0xfff
c00101df:	89 c6                	mov    esi,eax
c00101e1:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c00101e7:	83 ec 0c             	sub    esp,0xc
c00101ea:	6a 01                	push   0x1
c00101ec:	e8 d4 b1 ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c00101f1:	83 c4 10             	add    esp,0x10
c00101f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00101fe:	83 ec 0c             	sub    esp,0xc
c0010201:	6a 01                	push   0x1
c0010203:	6a 01                	push   0x1
c0010205:	50                   	push   eax
c0010206:	52                   	push   edx
c0010207:	53                   	push   ebx
c0010208:	e8 1b bb ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001020d:	83 c4 20             	add    esp,0x20
c0010210:	09 f0                	or     eax,esi
c0010212:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010216:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001021a:	c1 e0 03             	shl    eax,0x3
c001021d:	05 60 8a 02 c0       	add    eax,0xc0028a60
c0010222:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001022a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001022e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0010236:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001023a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001023e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010242:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010246:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001024a:	89 c6                	mov    esi,eax
c001024c:	89 d7                	mov    edi,edx
c001024e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010250:	89 c8                	mov    eax,ecx
c0010252:	89 fa                	mov    edx,edi
c0010254:	89 f3                	mov    ebx,esi
c0010256:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001025a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001025e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010269:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001026d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010271:	05 00 10 00 00       	add    eax,0x1000
c0010276:	c1 e8 0c             	shr    eax,0xc
c0010279:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001027d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010281:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010285:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010289:	25 ff 0f 00 00       	and    eax,0xfff
c001028e:	89 c6                	mov    esi,eax
c0010290:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001029d:	e8 23 b1 ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c00102a2:	83 c4 10             	add    esp,0x10
c00102a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00102a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00102af:	83 ec 0c             	sub    esp,0xc
c00102b2:	6a 01                	push   0x1
c00102b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00102b8:	50                   	push   eax
c00102b9:	52                   	push   edx
c00102ba:	53                   	push   ebx
c00102bb:	e8 68 ba ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00102c0:	83 c4 20             	add    esp,0x20
c00102c3:	09 f0                	or     eax,esi
c00102c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00102c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102cd:	83 ec 0c             	sub    esp,0xc
c00102d0:	50                   	push   eax
c00102d1:	e8 e3 b3 ff ff       	call   c000b6b9 <Virt::freeKernelVirtualPages(unsigned long)>
c00102d6:	83 c4 10             	add    esp,0x10
c00102d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00102dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102e1:	89 14 c5 64 8a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd759c],edx
c00102e8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00102ec:	e9 bf fe ff ff       	jmp    c00101b0 <loadACPITables(unsigned char*)+0x114>
c00102f1:	8d 76 00             	lea    esi,[esi+0x0]
c00102f4:	90                   	nop
c00102f5:	8d 76 00             	lea    esi,[esi+0x0]
c00102f8:	83 c4 60             	add    esp,0x60
c00102fb:	5b                   	pop    ebx
c00102fc:	5e                   	pop    esi
c00102fd:	5f                   	pop    edi
c00102fe:	c3                   	ret    
c00102ff:	90                   	nop

c0010300 <findRSDT(unsigned char*)>:
c0010300:	57                   	push   edi
c0010301:	56                   	push   esi
c0010302:	53                   	push   ebx
c0010303:	83 ec 50             	sub    esp,0x50
c0010306:	83 ec 0c             	sub    esp,0xc
c0010309:	68 53 3c 02 c0       	push   0xc0023c53
c001030e:	e8 de 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010313:	83 c4 10             	add    esp,0x10
c0010316:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001031b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010321:	83 e0 04             	and    eax,0x4
c0010324:	84 c0                	test   al,al
c0010326:	75 0c                	jne    c0010334 <findRSDT(unsigned char*)+0x34>
c0010328:	b8 00 00 00 00       	mov    eax,0x0
c001032d:	e9 86 01 00 00       	jmp    c00104b8 <findRSDT(unsigned char*)+0x1b8>
c0010332:	66 90                	xchg   ax,ax
c0010334:	83 ec 0c             	sub    esp,0xc
c0010337:	68 65 3c 02 c0       	push   0xc0023c65
c001033c:	e8 b0 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	89 e0                	mov    eax,esp
c0010346:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001034a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001034e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010352:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001035a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001035e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010362:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010366:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001036a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001036e:	89 c6                	mov    esi,eax
c0010370:	89 d7                	mov    edi,edx
c0010372:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010374:	89 c8                	mov    eax,ecx
c0010376:	89 fa                	mov    edx,edi
c0010378:	89 f3                	mov    ebx,esi
c001037a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001037e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010382:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010386:	83 ec 0c             	sub    esp,0xc
c0010389:	68 77 3c 02 c0       	push   0xc0023c77
c001038e:	e8 5e 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010393:	83 c4 10             	add    esp,0x10
c0010396:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001039a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001039e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00103a6:	83 ec 0c             	sub    esp,0xc
c00103a9:	68 89 3c 02 c0       	push   0xc0023c89
c00103ae:	e8 3e 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00103b3:	83 c4 10             	add    esp,0x10
c00103b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00103be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00103c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00103ca:	83 ec 04             	sub    esp,0x4
c00103cd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103d5:	68 00 3b 02 c0       	push   0xc0023b00
c00103da:	e8 42 c3 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00103df:	83 c4 10             	add    esp,0x10
c00103e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00103e6:	25 ff 0f 00 00       	and    eax,0xfff
c00103eb:	89 c6                	mov    esi,eax
c00103ed:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c00103f3:	83 ec 0c             	sub    esp,0xc
c00103f6:	6a 02                	push   0x2
c00103f8:	e8 c8 af ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0010404:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001040a:	83 ec 0c             	sub    esp,0xc
c001040d:	6a 01                	push   0x1
c001040f:	6a 02                	push   0x2
c0010411:	50                   	push   eax
c0010412:	52                   	push   edx
c0010413:	53                   	push   ebx
c0010414:	e8 0f b9 ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010419:	83 c4 20             	add    esp,0x20
c001041c:	09 f0                	or     eax,esi
c001041e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010422:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010426:	25 ff 0f 00 00       	and    eax,0xfff
c001042b:	89 c6                	mov    esi,eax
c001042d:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c0010433:	83 ec 0c             	sub    esp,0xc
c0010436:	6a 02                	push   0x2
c0010438:	e8 88 af ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c001043d:	83 c4 10             	add    esp,0x10
c0010440:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010444:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001044a:	83 ec 0c             	sub    esp,0xc
c001044d:	6a 01                	push   0x1
c001044f:	6a 02                	push   0x2
c0010451:	50                   	push   eax
c0010452:	52                   	push   edx
c0010453:	53                   	push   ebx
c0010454:	e8 cf b8 ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010459:	83 c4 20             	add    esp,0x20
c001045c:	09 f0                	or     eax,esi
c001045e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010462:	83 ec 04             	sub    esp,0x4
c0010465:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010469:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001046d:	68 20 3b 02 c0       	push   0xc0023b20
c0010472:	e8 aa c2 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0010477:	83 c4 10             	add    esp,0x10
c001047a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001047f:	75 13                	jne    c0010494 <findRSDT(unsigned char*)+0x194>
c0010481:	c6 05 60 8c 02 c0 00 	mov    BYTE PTR ds:0xc0028c60,0x0
c0010488:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001048c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010490:	eb 22                	jmp    c00104b4 <findRSDT(unsigned char*)+0x1b4>
c0010492:	66 90                	xchg   ax,ax
c0010494:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0010499:	75 11                	jne    c00104ac <findRSDT(unsigned char*)+0x1ac>
c001049b:	c6 05 60 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028c60,0x1
c00104a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00104a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00104aa:	eb 08                	jmp    c00104b4 <findRSDT(unsigned char*)+0x1b4>
c00104ac:	b8 00 00 00 00       	mov    eax,0x0
c00104b1:	eb 05                	jmp    c00104b8 <findRSDT(unsigned char*)+0x1b8>
c00104b3:	90                   	nop
c00104b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00104b8:	83 c4 50             	add    esp,0x50
c00104bb:	5b                   	pop    ebx
c00104bc:	5e                   	pop    esi
c00104bd:	5f                   	pop    edi
c00104be:	c3                   	ret    
c00104bf:	90                   	nop

c00104c0 <findDataTable(unsigned char*, char*)>:
c00104c0:	83 ec 1c             	sub    esp,0x1c
c00104c3:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00104c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00104ce:	83 e0 04             	and    eax,0x4
c00104d1:	84 c0                	test   al,al
c00104d3:	75 07                	jne    c00104dc <findDataTable(unsigned char*, char*)+0x1c>
c00104d5:	b8 00 00 00 00       	mov    eax,0x0
c00104da:	eb 58                	jmp    c0010534 <findDataTable(unsigned char*, char*)+0x74>
c00104dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00104e4:	a1 4c 8a 02 c0       	mov    eax,ds:0xc0028a4c
c00104e9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00104ed:	7d 3d                	jge    c001052c <findDataTable(unsigned char*, char*)+0x6c>
c00104ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104f3:	c1 e0 03             	shl    eax,0x3
c00104f6:	05 60 8a 02 c0       	add    eax,0xc0028a60
c00104fb:	83 ec 04             	sub    esp,0x4
c00104fe:	6a 04                	push   0x4
c0010500:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010504:	50                   	push   eax
c0010505:	e8 9a fe fe ff       	call   c00003a4 <memcmp>
c001050a:	83 c4 10             	add    esp,0x10
c001050d:	85 c0                	test   eax,eax
c001050f:	0f 94 c0             	sete   al
c0010512:	84 c0                	test   al,al
c0010514:	74 0e                	je     c0010524 <findDataTable(unsigned char*, char*)+0x64>
c0010516:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001051a:	8b 04 c5 64 8a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd759c]
c0010521:	eb 11                	jmp    c0010534 <findDataTable(unsigned char*, char*)+0x74>
c0010523:	90                   	nop
c0010524:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010528:	eb ba                	jmp    c00104e4 <findDataTable(unsigned char*, char*)+0x24>
c001052a:	66 90                	xchg   ax,ax
c001052c:	b8 00 00 00 00       	mov    eax,0x0
c0010531:	8d 76 00             	lea    esi,[esi+0x0]
c0010534:	83 c4 1c             	add    esp,0x1c
c0010537:	c3                   	ret    

c0010538 <scanMADT()>:
c0010538:	53                   	push   ebx
c0010539:	83 ec 38             	sub    esp,0x38
c001053c:	83 ec 0c             	sub    esp,0xc
c001053f:	68 9b 3c 02 c0       	push   0xc0023c9b
c0010544:	e8 a8 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010549:	83 c4 10             	add    esp,0x10
c001054c:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010551:	25 00 04 00 00       	and    eax,0x400
c0010556:	74 14                	je     c001056c <scanMADT()+0x34>
c0010558:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001055d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010563:	83 e2 fb             	and    edx,0xfffffffb
c0010566:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001056c:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0010571:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010577:	83 e0 04             	and    eax,0x4
c001057a:	84 c0                	test   al,al
c001057c:	0f 84 82 04 00 00    	je     c0010a04 <scanMADT()+0x4cc>
c0010582:	83 ec 0c             	sub    esp,0xc
c0010585:	68 a8 3c 02 c0       	push   0xc0023ca8
c001058a:	e8 62 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001058f:	83 c4 10             	add    esp,0x10
c0010592:	e8 31 fa ff ff       	call   c000ffc8 <findRSDP()>
c0010597:	a3 6c 8c 02 c0       	mov    ds:0xc0028c6c,eax
c001059c:	a1 6c 8c 02 c0       	mov    eax,ds:0xc0028c6c
c00105a1:	85 c0                	test   eax,eax
c00105a3:	75 1b                	jne    c00105c0 <scanMADT()+0x88>
c00105a5:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00105aa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00105b0:	83 e2 fb             	and    edx,0xfffffffb
c00105b3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00105b9:	e9 4e 04 00 00       	jmp    c0010a0c <scanMADT()+0x4d4>
c00105be:	66 90                	xchg   ax,ax
c00105c0:	83 ec 0c             	sub    esp,0xc
c00105c3:	68 ba 3c 02 c0       	push   0xc0023cba
c00105c8:	e8 24 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	a1 6c 8c 02 c0       	mov    eax,ds:0xc0028c6c
c00105d5:	83 ec 0c             	sub    esp,0xc
c00105d8:	50                   	push   eax
c00105d9:	e8 22 fd ff ff       	call   c0010300 <findRSDT(unsigned char*)>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	a3 68 8c 02 c0       	mov    ds:0xc0028c68,eax
c00105e6:	a1 68 8c 02 c0       	mov    eax,ds:0xc0028c68
c00105eb:	85 c0                	test   eax,eax
c00105ed:	75 19                	jne    c0010608 <scanMADT()+0xd0>
c00105ef:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00105f4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00105fa:	83 e2 fb             	and    edx,0xfffffffb
c00105fd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010603:	e9 04 04 00 00       	jmp    c0010a0c <scanMADT()+0x4d4>
c0010608:	83 ec 0c             	sub    esp,0xc
c001060b:	68 ca 3c 02 c0       	push   0xc0023cca
c0010610:	e8 dc 91 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	a1 68 8c 02 c0       	mov    eax,ds:0xc0028c68
c001061d:	83 ec 0c             	sub    esp,0xc
c0010620:	50                   	push   eax
c0010621:	e8 76 fa ff ff       	call   c001009c <loadACPITables(unsigned char*)>
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	a1 68 8c 02 c0       	mov    eax,ds:0xc0028c68
c001062e:	83 ec 08             	sub    esp,0x8
c0010631:	68 e2 3c 02 c0       	push   0xc0023ce2
c0010636:	50                   	push   eax
c0010637:	e8 84 fe ff ff       	call   c00104c0 <findDataTable(unsigned char*, char*)>
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010643:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0010648:	75 1a                	jne    c0010664 <scanMADT()+0x12c>
c001064a:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001064f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010655:	83 e2 fe             	and    edx,0xfffffffe
c0010658:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001065e:	e9 a9 03 00 00       	jmp    c0010a0c <scanMADT()+0x4d4>
c0010663:	90                   	nop
c0010664:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001066c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010670:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010673:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0010677:	0f 87 8f 03 00 00    	ja     c0010a0c <scanMADT()+0x4d4>
c001067d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0010685:	0f 87 81 03 00 00    	ja     c0010a0c <scanMADT()+0x4d4>
c001068b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001068f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010693:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010697:	8d 50 01             	lea    edx,[eax+0x1]
c001069a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001069e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00106a2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00106a6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00106aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106ae:	8d 50 01             	lea    edx,[eax+0x1]
c00106b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00106b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00106bd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00106c1:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00106c6:	0f 86 3c 03 00 00    	jbe    c0010a08 <scanMADT()+0x4d0>
c00106cc:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00106d1:	75 59                	jne    c001072c <scanMADT()+0x1f4>
c00106d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106d7:	8d 50 01             	lea    edx,[eax+0x1]
c00106da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106de:	8a 15 60 8e 02 c0    	mov    dl,BYTE PTR ds:0xc0028e60
c00106e4:	0f b6 d2             	movzx  edx,dl
c00106e7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00106eb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00106ef:	88 82 a0 8e 02 c0    	mov    BYTE PTR [edx-0x3ffd7160],al
c00106f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106f9:	8d 50 01             	lea    edx,[eax+0x1]
c00106fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010700:	8a 15 60 8e 02 c0    	mov    dl,BYTE PTR ds:0xc0028e60
c0010706:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010709:	88 0d 60 8e 02 c0    	mov    BYTE PTR ds:0xc0028e60,cl
c001070f:	0f b6 d2             	movzx  edx,dl
c0010712:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010716:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001071a:	88 82 80 8e 02 c0    	mov    BYTE PTR [edx-0x3ffd7180],al
c0010720:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010725:	e9 c6 02 00 00       	jmp    c00109f0 <scanMADT()+0x4b8>
c001072a:	66 90                	xchg   ax,ax
c001072c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0010731:	0f 85 15 01 00 00    	jne    c001084c <scanMADT()+0x314>
c0010737:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001073b:	8d 50 01             	lea    edx,[eax+0x1]
c001073e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010742:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c0010748:	0f b6 d2             	movzx  edx,dl
c001074b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001074f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010753:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c0010759:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001075d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010761:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010765:	01 d0                	add    eax,edx
c0010767:	83 c0 2c             	add    eax,0x2c
c001076a:	8a 00                	mov    al,BYTE PTR [eax]
c001076c:	0f b6 d0             	movzx  edx,al
c001076f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010773:	8d 48 01             	lea    ecx,[eax+0x1]
c0010776:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001077a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001077e:	0f b6 c0             	movzx  eax,al
c0010781:	c1 e0 08             	shl    eax,0x8
c0010784:	89 d1                	mov    ecx,edx
c0010786:	09 c1                	or     ecx,eax
c0010788:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001078c:	8d 50 02             	lea    edx,[eax+0x2]
c001078f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010793:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010797:	0f b6 c0             	movzx  eax,al
c001079a:	c1 e0 10             	shl    eax,0x10
c001079d:	09 c1                	or     ecx,eax
c001079f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107a3:	8d 50 03             	lea    edx,[eax+0x3]
c00107a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00107ae:	0f b6 c0             	movzx  eax,al
c00107b1:	c1 e0 18             	shl    eax,0x18
c00107b4:	09 c1                	or     ecx,eax
c00107b6:	89 ca                	mov    edx,ecx
c00107b8:	a0 20 8d 02 c0       	mov    al,ds:0xc0028d20
c00107bd:	0f b6 c0             	movzx  eax,al
c00107c0:	89 14 85 60 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd72a0],edx
c00107c7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00107cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00107d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107d4:	01 d0                	add    eax,edx
c00107d6:	83 c0 2c             	add    eax,0x2c
c00107d9:	8a 00                	mov    al,BYTE PTR [eax]
c00107db:	0f b6 d0             	movzx  edx,al
c00107de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107e2:	8d 48 01             	lea    ecx,[eax+0x1]
c00107e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107e9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00107ed:	0f b6 c0             	movzx  eax,al
c00107f0:	c1 e0 08             	shl    eax,0x8
c00107f3:	89 d1                	mov    ecx,edx
c00107f5:	09 c1                	or     ecx,eax
c00107f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107fb:	8d 50 02             	lea    edx,[eax+0x2]
c00107fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010802:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010806:	0f b6 c0             	movzx  eax,al
c0010809:	c1 e0 10             	shl    eax,0x10
c001080c:	09 c1                	or     ecx,eax
c001080e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010812:	8d 50 03             	lea    edx,[eax+0x3]
c0010815:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010819:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001081d:	0f b6 c0             	movzx  eax,al
c0010820:	c1 e0 18             	shl    eax,0x18
c0010823:	09 c1                	or     ecx,eax
c0010825:	89 ca                	mov    edx,ecx
c0010827:	a0 20 8d 02 c0       	mov    al,ds:0xc0028d20
c001082c:	0f b6 c0             	movzx  eax,al
c001082f:	89 14 85 e0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7220],edx
c0010836:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001083b:	a0 20 8d 02 c0       	mov    al,ds:0xc0028d20
c0010840:	40                   	inc    eax
c0010841:	a2 20 8d 02 c0       	mov    ds:0xc0028d20,al
c0010846:	e9 a5 01 00 00       	jmp    c00109f0 <scanMADT()+0x4b8>
c001084b:	90                   	nop
c001084c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0010851:	0f 85 e9 00 00 00    	jne    c0010940 <scanMADT()+0x408>
c0010857:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001085b:	8d 50 01             	lea    edx,[eax+0x1]
c001085e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010862:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010866:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001086a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001086e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010872:	8d 50 01             	lea    edx,[eax+0x1]
c0010875:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010879:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001087d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010881:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0010885:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010889:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001088d:	01 d0                	add    eax,edx
c001088f:	83 c0 2c             	add    eax,0x2c
c0010892:	8a 00                	mov    al,BYTE PTR [eax]
c0010894:	0f b6 d0             	movzx  edx,al
c0010897:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001089b:	8d 48 01             	lea    ecx,[eax+0x1]
c001089e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108a2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00108a6:	0f b6 c0             	movzx  eax,al
c00108a9:	c1 e0 08             	shl    eax,0x8
c00108ac:	89 d1                	mov    ecx,edx
c00108ae:	09 c1                	or     ecx,eax
c00108b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108b4:	8d 50 02             	lea    edx,[eax+0x2]
c00108b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108bb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00108bf:	0f b6 c0             	movzx  eax,al
c00108c2:	c1 e0 10             	shl    eax,0x10
c00108c5:	09 c1                	or     ecx,eax
c00108c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108cb:	8d 50 03             	lea    edx,[eax+0x3]
c00108ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00108d6:	0f b6 c0             	movzx  eax,al
c00108d9:	c1 e0 18             	shl    eax,0x18
c00108dc:	09 c8                	or     eax,ecx
c00108de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00108e2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00108e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00108eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108ef:	01 d0                	add    eax,edx
c00108f1:	83 c0 2c             	add    eax,0x2c
c00108f4:	8a 00                	mov    al,BYTE PTR [eax]
c00108f6:	0f b6 c0             	movzx  eax,al
c00108f9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00108fd:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010900:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010904:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0010908:	0f b6 d2             	movzx  edx,dl
c001090b:	c1 e2 08             	shl    edx,0x8
c001090e:	09 d0                	or     eax,edx
c0010910:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0010915:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001091a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001091f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010923:	88 90 60 5b 02 c0    	mov    BYTE PTR [eax-0x3ffda4a0],dl
c0010929:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001092e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0010933:	66 89 84 12 00 8d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7300],ax
c001093b:	e9 b0 00 00 00       	jmp    c00109f0 <scanMADT()+0x4b8>
c0010940:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0010945:	0f 85 99 00 00 00    	jne    c00109e4 <scanMADT()+0x4ac>
c001094b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001094f:	8d 50 01             	lea    edx,[eax+0x1]
c0010952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010956:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001095a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001095e:	0f b6 c0             	movzx  eax,al
c0010961:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010965:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010969:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001096d:	01 d0                	add    eax,edx
c001096f:	83 c0 2c             	add    eax,0x2c
c0010972:	8a 00                	mov    al,BYTE PTR [eax]
c0010974:	0f b6 d0             	movzx  edx,al
c0010977:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001097b:	8d 48 01             	lea    ecx,[eax+0x1]
c001097e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010982:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010986:	0f b6 c0             	movzx  eax,al
c0010989:	c1 e0 08             	shl    eax,0x8
c001098c:	09 d0                	or     eax,edx
c001098e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010992:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0010997:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001099b:	8d 50 01             	lea    edx,[eax+0x1]
c001099e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00109a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00109a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00109aa:	0f b6 c0             	movzx  eax,al
c00109ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b5:	c1 e0 08             	shl    eax,0x8
c00109b8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00109bc:	89 c1                	mov    ecx,eax
c00109be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109c2:	c1 e0 18             	shl    eax,0x18
c00109c5:	89 c3                	mov    ebx,eax
c00109c7:	a1 70 8c 02 c0       	mov    eax,ds:0xc0028c70
c00109cc:	8d 50 01             	lea    edx,[eax+0x1]
c00109cf:	89 15 70 8c 02 c0    	mov    DWORD PTR ds:0xc0028c70,edx
c00109d5:	09 d9                	or     ecx,ebx
c00109d7:	89 ca                	mov    edx,ecx
c00109d9:	89 14 85 80 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7380],edx
c00109e0:	eb 0e                	jmp    c00109f0 <scanMADT()+0x4b8>
c00109e2:	66 90                	xchg   ax,ax
c00109e4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00109e9:	75 05                	jne    c00109f0 <scanMADT()+0x4b8>
c00109eb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00109f0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00109f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109f9:	01 d0                	add    eax,edx
c00109fb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00109ff:	e9 68 fc ff ff       	jmp    c001066c <scanMADT()+0x134>
c0010a04:	90                   	nop
c0010a05:	eb 05                	jmp    c0010a0c <scanMADT()+0x4d4>
c0010a07:	90                   	nop
c0010a08:	90                   	nop
c0010a09:	8d 76 00             	lea    esi,[esi+0x0]
c0010a0c:	83 c4 38             	add    esp,0x38
c0010a0f:	5b                   	pop    ebx
c0010a10:	c3                   	ret    
c0010a11:	90                   	nop
c0010a12:	66 90                	xchg   ax,ax

c0010a14 <ACPI::ACPI()>:
c0010a14:	83 ec 0c             	sub    esp,0xc
c0010a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a1b:	83 ec 08             	sub    esp,0x8
c0010a1e:	68 e7 3c 02 c0       	push   0xc0023ce7
c0010a23:	50                   	push   eax
c0010a24:	e8 79 d3 ff ff       	call   c000dda2 <Device::Device(char const*)>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	ba 70 3e 02 c0       	mov    edx,0xc0023e70
c0010a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a35:	89 10                	mov    DWORD PTR [eax],edx
c0010a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0010a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a46:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a54:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0010a5e:	83 ec 0c             	sub    esp,0xc
c0010a61:	68 ec 3c 02 c0       	push   0xc0023cec
c0010a66:	e8 86 8d ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	e8 c5 fa ff ff       	call   c0010538 <scanMADT()>
c0010a73:	90                   	nop
c0010a74:	83 c4 0c             	add    esp,0xc
c0010a77:	c3                   	ret    

c0010a78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0010a78:	83 ec 2c             	sub    esp,0x2c
c0010a7b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010a7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010a83:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010a87:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0010a8b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010a90:	88 d0                	mov    al,dl
c0010a92:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010a96:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a9b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010aa3:	90                   	nop
c0010aa4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010aa8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010aae:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010ab2:	0f 8d 9c 00 00 00    	jge    c0010b54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0010ab8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010abc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ac0:	83 c2 2a             	add    edx,0x2a
c0010ac3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0010ac7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0010acc:	75 7a                	jne    c0010b48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0010ace:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010ad2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ad6:	83 c2 2a             	add    edx,0x2a
c0010ad9:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0010add:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0010ae1:	75 65                	jne    c0010b48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0010ae3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0010ae8:	74 3a                	je     c0010b24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0010aea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010aee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010af2:	83 c2 2a             	add    edx,0x2a
c0010af5:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0010af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010afd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b00:	39 c2                	cmp    edx,eax
c0010b02:	74 10                	je     c0010b14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0010b04:	83 ec 0c             	sub    esp,0xc
c0010b07:	68 40 3b 02 c0       	push   0xc0023b40
c0010b0c:	e8 7a 1f 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	68 fa 3c 02 c0       	push   0xc0023cfa
c0010b1c:	e8 6a 1f 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0010b21:	83 c4 10             	add    esp,0x10
c0010b24:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0010b28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010b2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b30:	83 c2 2a             	add    edx,0x2a
c0010b33:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0010b37:	8b 02                	mov    eax,DWORD PTR [edx]
c0010b39:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010b3c:	89 01                	mov    DWORD PTR [ecx],eax
c0010b3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0010b41:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010b46:	66 90                	xchg   ax,ax
c0010b48:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0010b4c:	e9 53 ff ff ff       	jmp    c0010aa4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0010b51:	8d 76 00             	lea    esi,[esi+0x0]
c0010b54:	90                   	nop
c0010b55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b59:	83 c4 2c             	add    esp,0x2c
c0010b5c:	c2 04 00             	ret    0x4
c0010b5f:	90                   	nop

c0010b60 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0010b60:	83 ec 1c             	sub    esp,0x1c
c0010b63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010b6b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010b6f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0010b74:	88 c8                	mov    al,cl
c0010b76:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0010b7a:	88 d0                	mov    al,dl
c0010b7c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b84:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b8e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010b91:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0010b95:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0010b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b9d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010ba3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ba7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0010baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bae:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0010bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bb7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010bbd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0010bc1:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bc8:	83 c2 2a             	add    edx,0x2a
c0010bcb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0010bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bd3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bdd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010be0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010be4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0010be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010bf2:	8d 50 01             	lea    edx,[eax+0x1]
c0010bf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bf9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0010bff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c03:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010c09:	3d 00 02 00 00       	cmp    eax,0x200
c0010c0e:	75 10                	jne    c0010c20 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0010c10:	83 ec 0c             	sub    esp,0xc
c0010c13:	68 09 3d 02 c0       	push   0xc0023d09
c0010c18:	e8 6e 1e 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	90                   	nop
c0010c21:	83 c4 1c             	add    esp,0x1c
c0010c24:	c3                   	ret    
c0010c25:	90                   	nop
c0010c26:	66 90                	xchg   ax,ax

c0010c28 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0010c28:	b8 00 00 00 00       	mov    eax,0x0
c0010c2d:	c3                   	ret    
c0010c2e:	66 90                	xchg   ax,ax

c0010c30 <ACPI::detectPCI()>:
c0010c30:	53                   	push   ebx
c0010c31:	83 ec 68             	sub    esp,0x68
c0010c34:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0010c39:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0010c3e:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0010c43:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010c49:	83 e0 04             	and    eax,0x4
c0010c4c:	84 c0                	test   al,al
c0010c4e:	74 2c                	je     c0010c7c <ACPI::detectPCI()+0x4c>
c0010c50:	a1 68 8c 02 c0       	mov    eax,ds:0xc0028c68
c0010c55:	83 ec 08             	sub    esp,0x8
c0010c58:	68 26 3d 02 c0       	push   0xc0023d26
c0010c5d:	50                   	push   eax
c0010c5e:	e8 5d f8 ff ff       	call   c00104c0 <findDataTable(unsigned char*, char*)>
c0010c63:	83 c4 10             	add    esp,0x10
c0010c66:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0010c6a:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0010c6f:	74 0b                	je     c0010c7c <ACPI::detectPCI()+0x4c>
c0010c71:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010c76:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010c7b:	90                   	nop
c0010c7c:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0010c84:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010c88:	8a 00                	mov    al,BYTE PTR [eax]
c0010c8a:	3c 01                	cmp    al,0x1
c0010c8c:	75 0e                	jne    c0010c9c <ACPI::detectPCI()+0x6c>
c0010c8e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010c93:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010c98:	eb 2a                	jmp    c0010cc4 <ACPI::detectPCI()+0x94>
c0010c9a:	66 90                	xchg   ax,ax
c0010c9c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010ca0:	8a 00                	mov    al,BYTE PTR [eax]
c0010ca2:	3c 02                	cmp    al,0x2
c0010ca4:	75 1e                	jne    c0010cc4 <ACPI::detectPCI()+0x94>
c0010ca6:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010cab:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010cb0:	74 12                	je     c0010cc4 <ACPI::detectPCI()+0x94>
c0010cb2:	83 ec 0c             	sub    esp,0xc
c0010cb5:	68 70 3b 02 c0       	push   0xc0023b70
c0010cba:	e8 cc 1d 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0010cbf:	83 c4 10             	add    esp,0x10
c0010cc2:	66 90                	xchg   ax,ax
c0010cc4:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0010cc8:	83 f0 01             	xor    eax,0x1
c0010ccb:	84 c0                	test   al,al
c0010ccd:	74 41                	je     c0010d10 <ACPI::detectPCI()+0xe0>
c0010ccf:	e8 7c f4 fe ff       	call   c0000150 <manualPCIProbe>
c0010cd4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0010cd8:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0010cdd:	75 0d                	jne    c0010cec <ACPI::detectPCI()+0xbc>
c0010cdf:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010ce4:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010ce9:	eb 25                	jmp    c0010d10 <ACPI::detectPCI()+0xe0>
c0010ceb:	90                   	nop
c0010cec:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0010cf1:	75 1d                	jne    c0010d10 <ACPI::detectPCI()+0xe0>
c0010cf3:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010cf8:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010cfd:	74 11                	je     c0010d10 <ACPI::detectPCI()+0xe0>
c0010cff:	83 ec 0c             	sub    esp,0xc
c0010d02:	68 70 3b 02 c0       	push   0xc0023b70
c0010d07:	e8 7f 1d 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0010d0c:	83 c4 10             	add    esp,0x10
c0010d0f:	90                   	nop
c0010d10:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0010d15:	0f 84 49 03 00 00    	je     c0011064 <ACPI::detectPCI()+0x434>
c0010d1b:	83 ec 0c             	sub    esp,0xc
c0010d1e:	68 2b 3d 02 c0       	push   0xc0023d2b
c0010d23:	e8 c9 8a ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010d28:	83 c4 10             	add    esp,0x10
c0010d2b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010d30:	0f 84 8e 00 00 00    	je     c0010dc4 <ACPI::detectPCI()+0x194>
c0010d36:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010d3b:	25 00 08 00 00       	and    eax,0x800
c0010d40:	0f 84 16 01 00 00    	je     c0010e5c <ACPI::detectPCI()+0x22c>
c0010d46:	83 ec 0c             	sub    esp,0xc
c0010d49:	68 98 3b 02 c0       	push   0xc0023b98
c0010d4e:	e8 9e 8a ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010d53:	83 c4 10             	add    esp,0x10
c0010d56:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010d5b:	25 80 00 00 00       	and    eax,0x80
c0010d60:	0f 85 f6 00 00 00    	jne    c0010e5c <ACPI::detectPCI()+0x22c>
c0010d66:	66 90                	xchg   ax,ax
c0010d68:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0010d6f:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0010d74:	89 c2                	mov    edx,eax
c0010d76:	ec                   	in     al,dx
c0010d77:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0010d7b:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0010d7f:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0010d83:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0010d88:	74 0a                	je     c0010d94 <ACPI::detectPCI()+0x164>
c0010d8a:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0010d8f:	74 03                	je     c0010d94 <ACPI::detectPCI()+0x164>
c0010d91:	eb d5                	jmp    c0010d68 <ACPI::detectPCI()+0x138>
c0010d93:	90                   	nop
c0010d94:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0010d9b:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0010da0:	89 c2                	mov    edx,eax
c0010da2:	ec                   	in     al,dx
c0010da3:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0010da7:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0010dab:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0010daf:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0010db4:	74 de                	je     c0010d94 <ACPI::detectPCI()+0x164>
c0010db6:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0010dbb:	0f 85 93 00 00 00    	jne    c0010e54 <ACPI::detectPCI()+0x224>
c0010dc1:	eb d1                	jmp    c0010d94 <ACPI::detectPCI()+0x164>
c0010dc3:	90                   	nop
c0010dc4:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0010dc8:	83 f0 01             	xor    eax,0x1
c0010dcb:	84 c0                	test   al,al
c0010dcd:	0f 84 89 00 00 00    	je     c0010e5c <ACPI::detectPCI()+0x22c>
c0010dd3:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010dd8:	25 00 08 00 00       	and    eax,0x800
c0010ddd:	74 7d                	je     c0010e5c <ACPI::detectPCI()+0x22c>
c0010ddf:	83 ec 0c             	sub    esp,0xc
c0010de2:	68 bc 3b 02 c0       	push   0xc0023bbc
c0010de7:	e8 05 8a ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010df4:	25 80 00 00 00       	and    eax,0x80
c0010df9:	75 61                	jne    c0010e5c <ACPI::detectPCI()+0x22c>
c0010dfb:	90                   	nop
c0010dfc:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0010e03:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0010e08:	89 c2                	mov    edx,eax
c0010e0a:	ec                   	in     al,dx
c0010e0b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0010e0f:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0010e13:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0010e17:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0010e1c:	74 0a                	je     c0010e28 <ACPI::detectPCI()+0x1f8>
c0010e1e:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0010e23:	74 03                	je     c0010e28 <ACPI::detectPCI()+0x1f8>
c0010e25:	eb d5                	jmp    c0010dfc <ACPI::detectPCI()+0x1cc>
c0010e27:	90                   	nop
c0010e28:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0010e2f:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0010e34:	89 c2                	mov    edx,eax
c0010e36:	ec                   	in     al,dx
c0010e37:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0010e3b:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0010e3f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0010e43:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0010e48:	74 de                	je     c0010e28 <ACPI::detectPCI()+0x1f8>
c0010e4a:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0010e4f:	75 07                	jne    c0010e58 <ACPI::detectPCI()+0x228>
c0010e51:	eb d5                	jmp    c0010e28 <ACPI::detectPCI()+0x1f8>
c0010e53:	90                   	nop
c0010e54:	90                   	nop
c0010e55:	eb 05                	jmp    c0010e5c <ACPI::detectPCI()+0x22c>
c0010e57:	90                   	nop
c0010e58:	90                   	nop
c0010e59:	8d 76 00             	lea    esi,[esi+0x0]
c0010e5c:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0010e64:	83 ec 0c             	sub    esp,0xc
c0010e67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010e6b:	e8 27 89 ff ff       	call   c0009797 <malloc>
c0010e70:	83 c4 10             	add    esp,0x10
c0010e73:	89 c3                	mov    ebx,eax
c0010e75:	83 ec 0c             	sub    esp,0xc
c0010e78:	53                   	push   ebx
c0010e79:	e8 a8 bb 00 00       	call   c001ca26 <PCI::PCI()>
c0010e7e:	83 c4 10             	add    esp,0x10
c0010e81:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0010e85:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010e8a:	25 00 08 00 00       	and    eax,0x800
c0010e8f:	74 7b                	je     c0010f0c <ACPI::detectPCI()+0x2dc>
c0010e91:	83 ec 0c             	sub    esp,0xc
c0010e94:	68 43 3d 02 c0       	push   0xc0023d43
c0010e99:	e8 53 89 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010e9e:	83 c4 10             	add    esp,0x10
c0010ea1:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010ea6:	25 80 00 00 00       	and    eax,0x80
c0010eab:	75 5f                	jne    c0010f0c <ACPI::detectPCI()+0x2dc>
c0010ead:	8d 76 00             	lea    esi,[esi+0x0]
c0010eb0:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0010eb7:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0010ebc:	89 c2                	mov    edx,eax
c0010ebe:	ec                   	in     al,dx
c0010ebf:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0010ec3:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0010ec7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0010ecb:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0010ed0:	74 0a                	je     c0010edc <ACPI::detectPCI()+0x2ac>
c0010ed2:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0010ed7:	74 03                	je     c0010edc <ACPI::detectPCI()+0x2ac>
c0010ed9:	eb d5                	jmp    c0010eb0 <ACPI::detectPCI()+0x280>
c0010edb:	90                   	nop
c0010edc:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0010ee3:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0010ee8:	89 c2                	mov    edx,eax
c0010eea:	ec                   	in     al,dx
c0010eeb:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0010eef:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0010ef3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0010ef7:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0010efc:	74 de                	je     c0010edc <ACPI::detectPCI()+0x2ac>
c0010efe:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0010f03:	75 03                	jne    c0010f08 <ACPI::detectPCI()+0x2d8>
c0010f05:	eb d5                	jmp    c0010edc <ACPI::detectPCI()+0x2ac>
c0010f07:	90                   	nop
c0010f08:	90                   	nop
c0010f09:	8d 76 00             	lea    esi,[esi+0x0]
c0010f0c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010f10:	83 ec 08             	sub    esp,0x8
c0010f13:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010f17:	50                   	push   eax
c0010f18:	e8 81 cc ff ff       	call   c000db9e <Device::addChild(Device*)>
c0010f1d:	83 c4 10             	add    esp,0x10
c0010f20:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010f25:	25 00 08 00 00       	and    eax,0x800
c0010f2a:	74 78                	je     c0010fa4 <ACPI::detectPCI()+0x374>
c0010f2c:	83 ec 0c             	sub    esp,0xc
c0010f2f:	68 49 3d 02 c0       	push   0xc0023d49
c0010f34:	e8 b8 88 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010f41:	25 80 00 00 00       	and    eax,0x80
c0010f46:	75 5c                	jne    c0010fa4 <ACPI::detectPCI()+0x374>
c0010f48:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0010f4f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0010f54:	89 c2                	mov    edx,eax
c0010f56:	ec                   	in     al,dx
c0010f57:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0010f5b:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0010f5f:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0010f63:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0010f68:	74 0a                	je     c0010f74 <ACPI::detectPCI()+0x344>
c0010f6a:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0010f6f:	74 03                	je     c0010f74 <ACPI::detectPCI()+0x344>
c0010f71:	eb d5                	jmp    c0010f48 <ACPI::detectPCI()+0x318>
c0010f73:	90                   	nop
c0010f74:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0010f7b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0010f80:	89 c2                	mov    edx,eax
c0010f82:	ec                   	in     al,dx
c0010f83:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0010f87:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0010f8b:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0010f8f:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0010f94:	74 de                	je     c0010f74 <ACPI::detectPCI()+0x344>
c0010f96:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0010f9b:	75 03                	jne    c0010fa0 <ACPI::detectPCI()+0x370>
c0010f9d:	eb d5                	jmp    c0010f74 <ACPI::detectPCI()+0x344>
c0010f9f:	90                   	nop
c0010fa0:	90                   	nop
c0010fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fa4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010fa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010faa:	83 c0 08             	add    eax,0x8
c0010fad:	8b 00                	mov    eax,DWORD PTR [eax]
c0010faf:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010fb4:	74 0a                	je     c0010fc0 <ACPI::detectPCI()+0x390>
c0010fb6:	ba 01 00 00 00       	mov    edx,0x1
c0010fbb:	eb 0b                	jmp    c0010fc8 <ACPI::detectPCI()+0x398>
c0010fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc0:	ba 02 00 00 00       	mov    edx,0x2
c0010fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc8:	6a 00                	push   0x0
c0010fca:	6a 00                	push   0x0
c0010fcc:	52                   	push   edx
c0010fcd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010fd1:	ff d0                	call   eax
c0010fd3:	83 c4 10             	add    esp,0x10
c0010fd6:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010fdb:	25 00 08 00 00       	and    eax,0x800
c0010fe0:	0f 84 26 01 00 00    	je     c001110c <ACPI::detectPCI()+0x4dc>
c0010fe6:	83 ec 0c             	sub    esp,0xc
c0010fe9:	68 4f 3d 02 c0       	push   0xc0023d4f
c0010fee:	e8 fe 87 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010ff3:	83 c4 10             	add    esp,0x10
c0010ff6:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0010ffb:	25 80 00 00 00       	and    eax,0x80
c0011000:	0f 85 06 01 00 00    	jne    c001110c <ACPI::detectPCI()+0x4dc>
c0011006:	66 90                	xchg   ax,ax
c0011008:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c001100f:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0011014:	89 c2                	mov    edx,eax
c0011016:	ec                   	in     al,dx
c0011017:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001101b:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001101f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0011023:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0011028:	74 0a                	je     c0011034 <ACPI::detectPCI()+0x404>
c001102a:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c001102f:	74 03                	je     c0011034 <ACPI::detectPCI()+0x404>
c0011031:	eb d5                	jmp    c0011008 <ACPI::detectPCI()+0x3d8>
c0011033:	90                   	nop
c0011034:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c001103b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0011040:	89 c2                	mov    edx,eax
c0011042:	ec                   	in     al,dx
c0011043:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0011047:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001104b:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001104f:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0011054:	74 de                	je     c0011034 <ACPI::detectPCI()+0x404>
c0011056:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c001105b:	0f 85 a7 00 00 00    	jne    c0011108 <ACPI::detectPCI()+0x4d8>
c0011061:	eb d1                	jmp    c0011034 <ACPI::detectPCI()+0x404>
c0011063:	90                   	nop
c0011064:	83 ec 0c             	sub    esp,0xc
c0011067:	68 55 3d 02 c0       	push   0xc0023d55
c001106c:	e8 b0 b6 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0011071:	83 c4 10             	add    esp,0x10
c0011074:	83 ec 0c             	sub    esp,0xc
c0011077:	68 60 3d 02 c0       	push   0xc0023d60
c001107c:	e8 70 87 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c001108c:	83 ec 0c             	sub    esp,0xc
c001108f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011093:	e8 ff 86 ff ff       	call   c0009797 <malloc>
c0011098:	83 c4 10             	add    esp,0x10
c001109b:	89 c3                	mov    ebx,eax
c001109d:	83 ec 0c             	sub    esp,0xc
c00110a0:	53                   	push   ebx
c00110a1:	e8 ea ca 00 00       	call   c001db90 <IDE::IDE()>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00110ad:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00110b1:	83 ec 08             	sub    esp,0x8
c00110b4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00110b8:	50                   	push   eax
c00110b9:	e8 e0 ca ff ff       	call   c000db9e <Device::addChild(Device*)>
c00110be:	83 c4 10             	add    esp,0x10
c00110c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110c5:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00110cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110d3:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00110dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110e0:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00110e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00110ef:	83 c0 08             	add    eax,0x8
c00110f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00110f4:	6a 00                	push   0x0
c00110f6:	6a 00                	push   0x0
c00110f8:	6a 00                	push   0x0
c00110fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00110fe:	ff d0                	call   eax
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	eb 07                	jmp    c001110c <ACPI::detectPCI()+0x4dc>
c0011105:	8d 76 00             	lea    esi,[esi+0x0]
c0011108:	90                   	nop
c0011109:	8d 76 00             	lea    esi,[esi+0x0]
c001110c:	90                   	nop
c001110d:	83 c4 68             	add    esp,0x68
c0011110:	5b                   	pop    ebx
c0011111:	c3                   	ret    
c0011112:	66 90                	xchg   ax,ax

c0011114 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0011114:	83 ec 1c             	sub    esp,0x1c
c0011117:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001111b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001111e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011122:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0011127:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001112c:	83 ec 08             	sub    esp,0x8
c001112f:	52                   	push   edx
c0011130:	50                   	push   eax
c0011131:	e8 cc 7c ff ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001113d:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0011142:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0011147:	83 ec 04             	sub    esp,0x4
c001114a:	6a 01                	push   0x1
c001114c:	52                   	push   edx
c001114d:	50                   	push   eax
c001114e:	e8 cd 7d ff ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	90                   	nop
c0011157:	83 c4 1c             	add    esp,0x1c
c001115a:	c3                   	ret    
c001115b:	90                   	nop

c001115c <ACPI::sleep()>:
c001115c:	83 ec 0c             	sub    esp,0xc
c001115f:	83 ec 0c             	sub    esp,0xc
c0011162:	68 75 3d 02 c0       	push   0xc0023d75
c0011167:	e8 b5 b5 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	a1 40 8a 02 c0       	mov    eax,ds:0xc0028a40
c0011174:	85 c0                	test   eax,eax
c0011176:	74 18                	je     c0011190 <ACPI::sleep()+0x34>
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	68 82 3d 02 c0       	push   0xc0023d82
c0011180:	e8 9c b5 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	a1 40 8a 02 c0       	mov    eax,ds:0xc0028a40
c001118d:	ff d0                	call   eax
c001118f:	90                   	nop
c0011190:	90                   	nop
c0011191:	83 c4 0c             	add    esp,0xc
c0011194:	c3                   	ret    
c0011195:	90                   	nop
c0011196:	66 90                	xchg   ax,ax

c0011198 <ACPI::open(int, int, void*)>:
c0011198:	57                   	push   edi
c0011199:	56                   	push   esi
c001119a:	53                   	push   ebx
c001119b:	81 ec 70 01 00 00    	sub    esp,0x170
c00111a1:	83 ec 0c             	sub    esp,0xc
c00111a4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00111ab:	e8 80 fa ff ff       	call   c0010c30 <ACPI::detectPCI()>
c00111b0:	83 c4 10             	add    esp,0x10
c00111b3:	83 ec 0c             	sub    esp,0xc
c00111b6:	68 e0 3b 02 c0       	push   0xc0023be0
c00111bb:	e8 31 86 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00111c0:	83 c4 10             	add    esp,0x10
c00111c3:	83 ec 0c             	sub    esp,0xc
c00111c6:	68 9c 3d 02 c0       	push   0xc0023d9c
c00111cb:	e8 c9 3a 00 00       	call   c0014c99 <Thr::loadKernelSymbolTable(char const*)>
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00111db:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00111e6:	83 ec 0c             	sub    esp,0xc
c00111e9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00111f0:	e8 a2 85 ff ff       	call   c0009797 <malloc>
c00111f5:	83 c4 10             	add    esp,0x10
c00111f8:	89 c3                	mov    ebx,eax
c00111fa:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c00111ff:	83 ec 04             	sub    esp,0x4
c0011202:	50                   	push   eax
c0011203:	68 ba 3d 02 c0       	push   0xc0023dba
c0011208:	53                   	push   ebx
c0011209:	e8 7e ba ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c001120e:	83 c4 10             	add    esp,0x10
c0011211:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0011218:	83 ec 08             	sub    esp,0x8
c001121b:	6a 01                	push   0x1
c001121d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011224:	e8 3d bb ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c0011229:	83 c4 10             	add    esp,0x10
c001122c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0011233:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001123b:	75 17                	jne    c0011254 <ACPI::open(int, int, void*)+0xbc>
c001123d:	83 ec 0c             	sub    esp,0xc
c0011240:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011247:	e8 78 bb ff ff       	call   c000cdc4 <File::close()>
c001124c:	83 c4 10             	add    esp,0x10
c001124f:	eb 0b                	jmp    c001125c <ACPI::open(int, int, void*)+0xc4>
c0011251:	8d 76 00             	lea    esi,[esi+0x0]
c0011254:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001125c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0011264:	74 1e                	je     c0011284 <ACPI::open(int, int, void*)+0xec>
c0011266:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001126d:	8b 00                	mov    eax,DWORD PTR [eax]
c001126f:	83 c0 08             	add    eax,0x8
c0011272:	8b 00                	mov    eax,DWORD PTR [eax]
c0011274:	83 ec 0c             	sub    esp,0xc
c0011277:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001127e:	ff d0                	call   eax
c0011280:	83 c4 10             	add    esp,0x10
c0011283:	90                   	nop
c0011284:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001128b:	83 f0 01             	xor    eax,0x1
c001128e:	84 c0                	test   al,al
c0011290:	74 42                	je     c00112d4 <ACPI::open(int, int, void*)+0x13c>
c0011292:	83 ec 0c             	sub    esp,0xc
c0011295:	68 d8 3d 02 c0       	push   0xc0023dd8
c001129a:	e8 52 85 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001129f:	83 c4 10             	add    esp,0x10
c00112a2:	83 ec 04             	sub    esp,0x4
c00112a5:	6a 0c                	push   0xc
c00112a7:	68 f3 3d 02 c0       	push   0xc0023df3
c00112ac:	68 04 3e 02 c0       	push   0xc0023e04
c00112b1:	e8 4d 20 00 00       	call   c0013303 <Reg::readIntWithDefault(char*, char*, int)>
c00112b6:	83 c4 10             	add    esp,0x10
c00112b9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00112c0:	83 ec 0c             	sub    esp,0xc
c00112c3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00112ca:	e8 00 a3 ff ff       	call   c000b5cf <Virt::setupPageSwapping(int)>
c00112cf:	83 c4 10             	add    esp,0x10
c00112d2:	66 90                	xchg   ax,ax
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	68 c6 29 02 c0       	push   0xc00229c6
c00112dc:	e8 10 85 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00112e1:	83 c4 10             	add    esp,0x10
c00112e4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00112eb:	83 ec 08             	sub    esp,0x8
c00112ee:	6a 12                	push   0x12
c00112f0:	50                   	push   eax
c00112f1:	e8 2c cc ff ff       	call   c000df22 <getDevicesOfType(DeviceType)>
c00112f6:	83 c4 0c             	add    esp,0xc
c00112f9:	8d 76 00             	lea    esi,[esi+0x0]
c00112fc:	83 ec 0c             	sub    esp,0xc
c00112ff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011306:	50                   	push   eax
c0011307:	e8 80 0a 01 00       	call   c0021d8c <LinkedList<Device>::isEmpty()>
c001130c:	83 c4 10             	add    esp,0x10
c001130f:	83 f0 01             	xor    eax,0x1
c0011312:	84 c0                	test   al,al
c0011314:	0f 84 46 01 00 00    	je     c0011460 <ACPI::open(int, int, void*)+0x2c8>
c001131a:	83 ec 0c             	sub    esp,0xc
c001131d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011324:	50                   	push   eax
c0011325:	e8 7e 0a 01 00       	call   c0021da8 <LinkedList<Device>::getFirstElement()>
c001132a:	83 c4 10             	add    esp,0x10
c001132d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0011334:	83 ec 0c             	sub    esp,0xc
c0011337:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001133e:	50                   	push   eax
c001133f:	e8 6c 0a 01 00       	call   c0021db0 <LinkedList<Device>::removeFirst()>
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001134e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0011355:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001135c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011360:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0011366:	ba 09 00 00 00       	mov    edx,0x9
c001136b:	fc                   	cld    
c001136c:	89 c7                	mov    edi,eax
c001136e:	89 de                	mov    esi,ebx
c0011370:	89 d1                	mov    ecx,edx
c0011372:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011374:	83 ec 08             	sub    esp,0x8
c0011377:	8d 44 24 38          	lea    eax,[esp+0x38]
c001137b:	50                   	push   eax
c001137c:	83 ec 24             	sub    esp,0x24
c001137f:	89 e0                	mov    eax,esp
c0011381:	89 c3                	mov    ebx,eax
c0011383:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011387:	ba 09 00 00 00       	mov    edx,0x9
c001138c:	89 df                	mov    edi,ebx
c001138e:	89 c6                	mov    esi,eax
c0011390:	89 d1                	mov    ecx,edx
c0011392:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011394:	e8 6b bb 00 00       	call   c001cf04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0011399:	83 c4 30             	add    esp,0x30
c001139c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00113a3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00113ab:	0f 84 4b ff ff ff    	je     c00112fc <ACPI::open(int, int, void*)+0x164>
c00113b1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00113bc:	83 ec 0c             	sub    esp,0xc
c00113bf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00113c6:	e8 cc 83 ff ff       	call   c0009797 <malloc>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	89 c3                	mov    ebx,eax
c00113d0:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c00113d5:	83 ec 04             	sub    esp,0x4
c00113d8:	50                   	push   eax
c00113d9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00113e0:	53                   	push   ebx
c00113e1:	e8 a6 b8 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c00113e6:	83 c4 10             	add    esp,0x10
c00113e9:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00113f0:	83 ec 0c             	sub    esp,0xc
c00113f3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00113fa:	e8 d5 bb ff ff       	call   c000cfd4 <File::exists()>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	84 c0                	test   al,al
c0011404:	74 2a                	je     c0011430 <ACPI::open(int, int, void*)+0x298>
c0011406:	83 ec 08             	sub    esp,0x8
c0011409:	6a 01                	push   0x1
c001140b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011412:	e8 f9 42 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c0011417:	83 c4 10             	add    esp,0x10
c001141a:	83 ec 08             	sub    esp,0x8
c001141d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011424:	50                   	push   eax
c0011425:	e8 17 45 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c001142a:	83 c4 10             	add    esp,0x10
c001142d:	8d 76 00             	lea    esi,[esi+0x0]
c0011430:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0011438:	0f 84 be fe ff ff    	je     c00112fc <ACPI::open(int, int, void*)+0x164>
c001143e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0011445:	8b 00                	mov    eax,DWORD PTR [eax]
c0011447:	83 c0 08             	add    eax,0x8
c001144a:	8b 00                	mov    eax,DWORD PTR [eax]
c001144c:	83 ec 0c             	sub    esp,0xc
c001144f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011456:	ff d0                	call   eax
c0011458:	83 c4 10             	add    esp,0x10
c001145b:	e9 9c fe ff ff       	jmp    c00112fc <ACPI::open(int, int, void*)+0x164>
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001146a:	50                   	push   eax
c001146b:	e8 18 09 01 00       	call   c0021d88 <LinkedList<Device>::~LinkedList()>
c0011470:	83 c4 10             	add    esp,0x10
c0011473:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c0011479:	83 ec 08             	sub    esp,0x8
c001147c:	6a 01                	push   0x1
c001147e:	68 0b 3e 02 c0       	push   0xc0023e0b
c0011483:	e8 88 42 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c0011488:	83 c4 10             	add    esp,0x10
c001148b:	83 ec 08             	sub    esp,0x8
c001148e:	53                   	push   ebx
c001148f:	50                   	push   eax
c0011490:	e8 ac 44 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001149d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00114a3:	83 e0 04             	and    eax,0x4
c00114a6:	84 c0                	test   al,al
c00114a8:	0f 84 16 01 00 00    	je     c00115c4 <ACPI::open(int, int, void*)+0x42c>
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	68 28 3e 02 c0       	push   0xc0023e28
c00114b6:	e8 36 83 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00114bb:	83 c4 10             	add    esp,0x10
c00114be:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00114c9:	83 ec 0c             	sub    esp,0xc
c00114cc:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00114d3:	e8 bf 82 ff ff       	call   c0009797 <malloc>
c00114d8:	83 c4 10             	add    esp,0x10
c00114db:	89 c3                	mov    ebx,eax
c00114dd:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c00114e2:	83 ec 04             	sub    esp,0x4
c00114e5:	50                   	push   eax
c00114e6:	68 45 3e 02 c0       	push   0xc0023e45
c00114eb:	53                   	push   ebx
c00114ec:	e8 9b b7 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c00114f1:	83 c4 10             	add    esp,0x10
c00114f4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00114fb:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011503:	74 1b                	je     c0011520 <ACPI::open(int, int, void*)+0x388>
c0011505:	83 ec 0c             	sub    esp,0xc
c0011508:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001150f:	e8 c0 ba ff ff       	call   c000cfd4 <File::exists()>
c0011514:	83 c4 10             	add    esp,0x10
c0011517:	84 c0                	test   al,al
c0011519:	74 05                	je     c0011520 <ACPI::open(int, int, void*)+0x388>
c001151b:	b0 01                	mov    al,0x1
c001151d:	eb 05                	jmp    c0011524 <ACPI::open(int, int, void*)+0x38c>
c001151f:	90                   	nop
c0011520:	b0 00                	mov    al,0x0
c0011522:	66 90                	xchg   ax,ax
c0011524:	84 c0                	test   al,al
c0011526:	74 28                	je     c0011550 <ACPI::open(int, int, void*)+0x3b8>
c0011528:	83 ec 08             	sub    esp,0x8
c001152b:	6a 01                	push   0x1
c001152d:	68 45 3e 02 c0       	push   0xc0023e45
c0011532:	e8 d9 41 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c0011537:	83 c4 10             	add    esp,0x10
c001153a:	83 ec 08             	sub    esp,0x8
c001153d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0011544:	50                   	push   eax
c0011545:	e8 f7 43 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c001154a:	83 c4 10             	add    esp,0x10
c001154d:	8d 76 00             	lea    esi,[esi+0x0]
c0011550:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011558:	74 2a                	je     c0011584 <ACPI::open(int, int, void*)+0x3ec>
c001155a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011562:	74 20                	je     c0011584 <ACPI::open(int, int, void*)+0x3ec>
c0011564:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001156b:	8b 00                	mov    eax,DWORD PTR [eax]
c001156d:	83 c0 08             	add    eax,0x8
c0011570:	8b 00                	mov    eax,DWORD PTR [eax]
c0011572:	83 ec 0c             	sub    esp,0xc
c0011575:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001157c:	ff d0                	call   eax
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	8d 76 00             	lea    esi,[esi+0x0]
c0011584:	a1 68 8c 02 c0       	mov    eax,ds:0xc0028c68
c0011589:	83 ec 08             	sub    esp,0x8
c001158c:	68 62 3e 02 c0       	push   0xc0023e62
c0011591:	50                   	push   eax
c0011592:	e8 29 ef ff ff       	call   c00104c0 <findDataTable(unsigned char*, char*)>
c0011597:	83 c4 10             	add    esp,0x10
c001159a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00115a1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00115a9:	74 19                	je     c00115c4 <ACPI::open(int, int, void*)+0x42c>
c00115ab:	83 ec 08             	sub    esp,0x8
c00115ae:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00115b5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00115bc:	e8 53 fb ff ff       	call   c0011114 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	b8 00 00 00 00       	mov    eax,0x0
c00115c9:	81 c4 70 01 00 00    	add    esp,0x170
c00115cf:	5b                   	pop    ebx
c00115d0:	5e                   	pop    esi
c00115d1:	5f                   	pop    edi
c00115d2:	c3                   	ret    
c00115d3:	90                   	nop

c00115d4 <CPU::close(int, int, void*)>:
c00115d4:	31 c0                	xor    eax,eax
c00115d6:	c3                   	ret    
c00115d7:	90                   	nop

c00115d8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00115d8:	60                   	pusha  
c00115d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00115dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115e5:	9c                   	pushf  
c00115e6:	fa                   	cli    
c00115e7:	0f 09                	wbinvd 
c00115e9:	0f 30                	wrmsr  
c00115eb:	9d                   	popf   
c00115ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115f0:	89 02                	mov    DWORD PTR [edx],eax
c00115f2:	61                   	popa   
c00115f3:	c3                   	ret    

c00115f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00115f4:	60                   	pusha  
c00115f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00115f9:	9c                   	pushf  
c00115fa:	fa                   	cli    
c00115fb:	0f 09                	wbinvd 
c00115fd:	31 c0                	xor    eax,eax
c00115ff:	31 d2                	xor    edx,edx
c0011601:	0f 32                	rdmsr  
c0011603:	9d                   	popf   
c0011604:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011608:	89 02                	mov    DWORD PTR [edx],eax
c001160a:	61                   	popa   
c001160b:	c3                   	ret    

c001160c <CPU::AMD_K6_writeback(int, int, int)>:
c001160c:	56                   	push   esi
c001160d:	53                   	push   ebx
c001160e:	83 ec 10             	sub    esp,0x10
c0011611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011615:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001161a:	75 5d                	jne    c0011679 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001161c:	83 f8 08             	cmp    eax,0x8
c001161f:	75 09                	jne    c001162a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0011621:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0011626:	7e 13                	jle    c001163b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0011628:	eb 30                	jmp    c001165a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001162a:	83 f8 06             	cmp    eax,0x6
c001162d:	7c 4a                	jl     c0011679 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001162f:	83 f8 07             	cmp    eax,0x7
c0011632:	7e 07                	jle    c001163b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0011634:	83 f8 09             	cmp    eax,0x9
c0011637:	74 21                	je     c001165a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0011639:	eb 3e                	jmp    c0011679 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001163b:	89 e6                	mov    esi,esp
c001163d:	8b 1d 6c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002646c
c0011643:	56                   	push   esi
c0011644:	c1 eb 15             	shr    ebx,0x15
c0011647:	68 82 00 00 c0       	push   0xc0000082
c001164c:	83 e3 7e             	and    ebx,0x7e
c001164f:	e8 a0 ff ff ff       	call   c00115f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011654:	56                   	push   esi
c0011655:	6a 00                	push   0x0
c0011657:	53                   	push   ebx
c0011658:	eb 12                	jmp    c001166c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001165a:	89 e3                	mov    ebx,esp
c001165c:	53                   	push   ebx
c001165d:	68 82 00 00 c0       	push   0xc0000082
c0011662:	e8 8d ff ff ff       	call   c00115f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011667:	53                   	push   ebx
c0011668:	6a 00                	push   0x0
c001166a:	6a 00                	push   0x0
c001166c:	68 82 00 00 c0       	push   0xc0000082
c0011671:	e8 62 ff ff ff       	call   c00115d8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0011676:	83 c4 18             	add    esp,0x18
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	5b                   	pop    ebx
c001167d:	5e                   	pop    esi
c001167e:	c3                   	ret    
c001167f:	90                   	nop

c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0011680:	55                   	push   ebp
c0011681:	57                   	push   edi
c0011682:	56                   	push   esi
c0011683:	53                   	push   ebx
c0011684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011688:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001168c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011690:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0011694:	39 05 70 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b70,eax
c001169a:	75 23                	jne    c00116bf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001169c:	a1 cc 8e 02 c0       	mov    eax,ds:0xc0028ecc
c00116a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00116a5:	89 06                	mov    DWORD PTR [esi],eax
c00116a7:	a1 c8 8e 02 c0       	mov    eax,ds:0xc0028ec8
c00116ac:	89 07                	mov    DWORD PTR [edi],eax
c00116ae:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c00116b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00116b6:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00116bb:	89 02                	mov    DWORD PTR [edx],eax
c00116bd:	eb 3f                	jmp    c00116fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00116bf:	31 c9                	xor    ecx,ecx
c00116c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116c5:	0f a2                	cpuid  
c00116c7:	89 06                	mov    DWORD PTR [esi],eax
c00116c9:	89 1f                	mov    DWORD PTR [edi],ebx
c00116cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00116cf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00116d2:	89 10                	mov    DWORD PTR [eax],edx
c00116d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116d8:	a3 70 5b 02 c0       	mov    ds:0xc0025b70,eax
c00116dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00116df:	a3 cc 8e 02 c0       	mov    ds:0xc0028ecc,eax
c00116e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00116e6:	a3 c8 8e 02 c0       	mov    ds:0xc0028ec8,eax
c00116eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116ee:	a3 c4 8e 02 c0       	mov    ds:0xc0028ec4,eax
c00116f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00116f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00116f9:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c00116fe:	5b                   	pop    ebx
c00116ff:	5e                   	pop    esi
c0011700:	5f                   	pop    edi
c0011701:	5d                   	pop    ebp
c0011702:	c3                   	ret    
c0011703:	90                   	nop

c0011704 <CPU::cpuidCheckEDX(unsigned int)>:
c0011704:	83 ec 10             	sub    esp,0x10
c0011707:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001170b:	50                   	push   eax
c001170c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011710:	50                   	push   eax
c0011711:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011715:	50                   	push   eax
c0011716:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001171a:	50                   	push   eax
c001171b:	6a 01                	push   0x1
c001171d:	e8 5e ff ff ff       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011722:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011726:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001172a:	0f 95 c0             	setne  al
c001172d:	83 c4 24             	add    esp,0x24
c0011730:	c3                   	ret    
c0011731:	90                   	nop

c0011732 <CPU::cpuidCheckECX(unsigned int)>:
c0011732:	83 ec 10             	sub    esp,0x10
c0011735:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011739:	50                   	push   eax
c001173a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001173e:	50                   	push   eax
c001173f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011743:	50                   	push   eax
c0011744:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011748:	50                   	push   eax
c0011749:	6a 01                	push   0x1
c001174b:	e8 30 ff ff ff       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011750:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011754:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0011758:	0f 95 c0             	setne  al
c001175b:	83 c4 24             	add    esp,0x24
c001175e:	c3                   	ret    
c001175f:	90                   	nop

c0011760 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0011760:	83 ec 10             	sub    esp,0x10
c0011763:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011767:	50                   	push   eax
c0011768:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001176c:	50                   	push   eax
c001176d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011771:	50                   	push   eax
c0011772:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011776:	50                   	push   eax
c0011777:	6a 07                	push   0x7
c0011779:	e8 02 ff ff ff       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001177e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011782:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0011786:	0f 95 c0             	setne  al
c0011789:	83 c4 24             	add    esp,0x24
c001178c:	c3                   	ret    
c001178d:	90                   	nop

c001178e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001178e:	83 ec 10             	sub    esp,0x10
c0011791:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011795:	50                   	push   eax
c0011796:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001179a:	50                   	push   eax
c001179b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001179f:	50                   	push   eax
c00117a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00117a4:	50                   	push   eax
c00117a5:	6a 07                	push   0x7
c00117a7:	e8 d4 fe ff ff       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00117ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00117b0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00117b4:	0f 95 c0             	setne  al
c00117b7:	83 c4 24             	add    esp,0x24
c00117ba:	c3                   	ret    
c00117bb:	90                   	nop

c00117bc <CPU::CPU()>:
c00117bc:	83 ec 0c             	sub    esp,0xc
c00117bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c3:	83 ec 08             	sub    esp,0x8
c00117c6:	68 85 3f 02 c0       	push   0xc0023f85
c00117cb:	50                   	push   eax
c00117cc:	e8 d1 c5 ff ff       	call   c000dda2 <Device::Device(char const*)>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	ba 5c 40 02 c0       	mov    edx,0xc002405c
c00117d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117dd:	89 10                	mov    DWORD PTR [eax],edx
c00117df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00117ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117f1:	05 78 01 00 00       	add    eax,0x178
c00117f6:	83 ec 0c             	sub    esp,0xc
c00117f9:	50                   	push   eax
c00117fa:	e8 0b 78 ff ff       	call   c000900a <GDT::GDT()>
c00117ff:	83 c4 10             	add    esp,0x10
c0011802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011806:	05 7c 09 00 00       	add    eax,0x97c
c001180b:	83 ec 0c             	sub    esp,0xc
c001180e:	50                   	push   eax
c001180f:	e8 70 7a ff ff       	call   c0009284 <IDT::IDT()>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001181b:	05 7c 11 00 00       	add    eax,0x117c
c0011820:	83 ec 0c             	sub    esp,0xc
c0011823:	50                   	push   eax
c0011824:	e8 df 94 ff ff       	call   c000ad08 <TSS::TSS()>
c0011829:	83 c4 10             	add    esp,0x10
c001182c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011830:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0011837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001183b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0011845:	90                   	nop
c0011846:	83 c4 0c             	add    esp,0xc
c0011849:	c3                   	ret    

c001184a <CPU::displayFeatures()>:
c001184a:	c3                   	ret    
c001184b:	90                   	nop

c001184c <CPU::detectFeatures()>:
c001184c:	55                   	push   ebp
c001184d:	57                   	push   edi
c001184e:	56                   	push   esi
c001184f:	53                   	push   ebx
c0011850:	83 ec 30             	sub    esp,0x30
c0011853:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011857:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0011861:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0011868:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001186e:	6a 0d                	push   0xd
c0011870:	6a 00                	push   0x0
c0011872:	55                   	push   ebp
c0011873:	e8 30 ec fe ff       	call   c00004a8 <memset>
c0011878:	83 c4 10             	add    esp,0x10
c001187b:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0011880:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0011887:	0f 84 e8 05 00 00    	je     c0011e75 <CPU::detectFeatures()+0x629>
c001188d:	83 ec 0c             	sub    esp,0xc
c0011890:	89 ef                	mov    edi,ebp
c0011892:	6a 10                	push   0x10
c0011894:	e8 6b fe ff ff       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c0011899:	83 e0 01             	and    eax,0x1
c001189c:	8d 14 00             	lea    edx,[eax+eax*1]
c001189f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00118a5:	83 e0 fd             	and    eax,0xfffffffd
c00118a8:	09 d0                	or     eax,edx
c00118aa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00118b0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00118b7:	e8 48 fe ff ff       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c00118bc:	83 e0 01             	and    eax,0x1
c00118bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00118c6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00118cc:	83 e0 fb             	and    eax,0xfffffffb
c00118cf:	09 d0                	or     eax,edx
c00118d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00118d7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00118de:	e8 21 fe ff ff       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c00118e3:	83 e0 01             	and    eax,0x1
c00118e6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00118ed:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00118f3:	83 e0 f7             	and    eax,0xfffffff7
c00118f6:	09 d0                	or     eax,edx
c00118f8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00118fe:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0011905:	e8 fa fd ff ff       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c001190a:	83 e0 01             	and    eax,0x1
c001190d:	c1 e0 04             	shl    eax,0x4
c0011910:	88 c2                	mov    dl,al
c0011912:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011918:	83 e0 ef             	and    eax,0xffffffef
c001191b:	09 d0                	or     eax,edx
c001191d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011923:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001192a:	e8 d5 fd ff ff       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c001192f:	83 e0 01             	and    eax,0x1
c0011932:	c1 e0 05             	shl    eax,0x5
c0011935:	88 c2                	mov    dl,al
c0011937:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001193d:	83 e0 df             	and    eax,0xffffffdf
c0011940:	09 d0                	or     eax,edx
c0011942:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011948:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001194f:	e8 b0 fd ff ff       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c0011954:	83 e0 01             	and    eax,0x1
c0011957:	8d 14 00             	lea    edx,[eax+eax*1]
c001195a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011960:	83 e0 fd             	and    eax,0xfffffffd
c0011963:	09 d0                	or     eax,edx
c0011965:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001196b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0011972:	e8 8d fd ff ff       	call   c0011704 <CPU::cpuidCheckEDX(unsigned int)>
c0011977:	83 e0 01             	and    eax,0x1
c001197a:	c1 e0 06             	shl    eax,0x6
c001197d:	88 c2                	mov    dl,al
c001197f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011985:	83 e0 bf             	and    eax,0xffffffbf
c0011988:	09 d0                	or     eax,edx
c001198a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011990:	58                   	pop    eax
c0011991:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011995:	50                   	push   eax
c0011996:	8d 44 24 28          	lea    eax,[esp+0x28]
c001199a:	50                   	push   eax
c001199b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001199f:	56                   	push   esi
c00119a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00119a4:	50                   	push   eax
c00119a5:	6a 00                	push   0x0
c00119a7:	e8 d4 fc ff ff       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00119ac:	b8 04 00 00 00       	mov    eax,0x4
c00119b1:	89 c1                	mov    ecx,eax
c00119b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119b5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00119bb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00119bf:	89 c1                	mov    ecx,eax
c00119c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119c3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00119c9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00119cd:	89 c1                	mov    ecx,eax
c00119cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119d1:	83 c4 18             	add    esp,0x18
c00119d4:	68 94 3e 02 c0       	push   0xc0023e94
c00119d9:	55                   	push   ebp
c00119da:	e8 11 ec fe ff       	call   c00005f0 <strcmp>
c00119df:	83 c4 10             	add    esp,0x10
c00119e2:	85 c0                	test   eax,eax
c00119e4:	75 0f                	jne    c00119f5 <CPU::detectFeatures()+0x1a9>
c00119e6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00119f0:	e9 22 02 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c00119f5:	50                   	push   eax
c00119f6:	50                   	push   eax
c00119f7:	68 a1 3e 02 c0       	push   0xc0023ea1
c00119fc:	55                   	push   ebp
c00119fd:	e8 ee eb fe ff       	call   c00005f0 <strcmp>
c0011a02:	83 c4 10             	add    esp,0x10
c0011a05:	85 c0                	test   eax,eax
c0011a07:	74 dd                	je     c00119e6 <CPU::detectFeatures()+0x19a>
c0011a09:	50                   	push   eax
c0011a0a:	50                   	push   eax
c0011a0b:	68 ae 3e 02 c0       	push   0xc0023eae
c0011a10:	55                   	push   ebp
c0011a11:	e8 da eb fe ff       	call   c00005f0 <strcmp>
c0011a16:	83 c4 10             	add    esp,0x10
c0011a19:	85 c0                	test   eax,eax
c0011a1b:	74 2a                	je     c0011a47 <CPU::detectFeatures()+0x1fb>
c0011a1d:	50                   	push   eax
c0011a1e:	50                   	push   eax
c0011a1f:	68 bb 3e 02 c0       	push   0xc0023ebb
c0011a24:	55                   	push   ebp
c0011a25:	e8 c6 eb fe ff       	call   c00005f0 <strcmp>
c0011a2a:	83 c4 10             	add    esp,0x10
c0011a2d:	85 c0                	test   eax,eax
c0011a2f:	74 16                	je     c0011a47 <CPU::detectFeatures()+0x1fb>
c0011a31:	50                   	push   eax
c0011a32:	50                   	push   eax
c0011a33:	68 c8 3e 02 c0       	push   0xc0023ec8
c0011a38:	55                   	push   ebp
c0011a39:	e8 b2 eb fe ff       	call   c00005f0 <strcmp>
c0011a3e:	83 c4 10             	add    esp,0x10
c0011a41:	85 c0                	test   eax,eax
c0011a43:	74 48                	je     c0011a8d <CPU::detectFeatures()+0x241>
c0011a45:	eb 0f                	jmp    c0011a56 <CPU::detectFeatures()+0x20a>
c0011a47:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0011a51:	e9 c1 01 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011a56:	50                   	push   eax
c0011a57:	50                   	push   eax
c0011a58:	68 d5 3e 02 c0       	push   0xc0023ed5
c0011a5d:	55                   	push   ebp
c0011a5e:	e8 8d eb fe ff       	call   c00005f0 <strcmp>
c0011a63:	83 c4 10             	add    esp,0x10
c0011a66:	85 c0                	test   eax,eax
c0011a68:	74 23                	je     c0011a8d <CPU::detectFeatures()+0x241>
c0011a6a:	57                   	push   edi
c0011a6b:	57                   	push   edi
c0011a6c:	68 e2 3e 02 c0       	push   0xc0023ee2
c0011a71:	55                   	push   ebp
c0011a72:	e8 79 eb fe ff       	call   c00005f0 <strcmp>
c0011a77:	83 c4 10             	add    esp,0x10
c0011a7a:	85 c0                	test   eax,eax
c0011a7c:	75 1e                	jne    c0011a9c <CPU::detectFeatures()+0x250>
c0011a7e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011a88:	e9 8a 01 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011a8d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0011a97:	e9 7b 01 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011a9c:	56                   	push   esi
c0011a9d:	56                   	push   esi
c0011a9e:	68 ef 3e 02 c0       	push   0xc0023eef
c0011aa3:	55                   	push   ebp
c0011aa4:	e8 47 eb fe ff       	call   c00005f0 <strcmp>
c0011aa9:	83 c4 10             	add    esp,0x10
c0011aac:	85 c0                	test   eax,eax
c0011aae:	75 0f                	jne    c0011abf <CPU::detectFeatures()+0x273>
c0011ab0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0011aba:	e9 58 01 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011abf:	51                   	push   ecx
c0011ac0:	51                   	push   ecx
c0011ac1:	68 ae 3e 02 c0       	push   0xc0023eae
c0011ac6:	55                   	push   ebp
c0011ac7:	e8 24 eb fe ff       	call   c00005f0 <strcmp>
c0011acc:	83 c4 10             	add    esp,0x10
c0011acf:	85 c0                	test   eax,eax
c0011ad1:	75 0f                	jne    c0011ae2 <CPU::detectFeatures()+0x296>
c0011ad3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0011add:	e9 35 01 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011ae2:	52                   	push   edx
c0011ae3:	52                   	push   edx
c0011ae4:	68 fc 3e 02 c0       	push   0xc0023efc
c0011ae9:	55                   	push   ebp
c0011aea:	e8 01 eb fe ff       	call   c00005f0 <strcmp>
c0011aef:	83 c4 10             	add    esp,0x10
c0011af2:	85 c0                	test   eax,eax
c0011af4:	75 0f                	jne    c0011b05 <CPU::detectFeatures()+0x2b9>
c0011af6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0011b00:	e9 12 01 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011b05:	50                   	push   eax
c0011b06:	50                   	push   eax
c0011b07:	68 09 3f 02 c0       	push   0xc0023f09
c0011b0c:	55                   	push   ebp
c0011b0d:	e8 de ea fe ff       	call   c00005f0 <strcmp>
c0011b12:	83 c4 10             	add    esp,0x10
c0011b15:	85 c0                	test   eax,eax
c0011b17:	75 0f                	jne    c0011b28 <CPU::detectFeatures()+0x2dc>
c0011b19:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0011b23:	e9 ef 00 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011b28:	50                   	push   eax
c0011b29:	50                   	push   eax
c0011b2a:	68 16 3f 02 c0       	push   0xc0023f16
c0011b2f:	55                   	push   ebp
c0011b30:	e8 bb ea fe ff       	call   c00005f0 <strcmp>
c0011b35:	83 c4 10             	add    esp,0x10
c0011b38:	85 c0                	test   eax,eax
c0011b3a:	75 0f                	jne    c0011b4b <CPU::detectFeatures()+0x2ff>
c0011b3c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0011b46:	e9 cc 00 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011b4b:	50                   	push   eax
c0011b4c:	50                   	push   eax
c0011b4d:	68 23 3f 02 c0       	push   0xc0023f23
c0011b52:	55                   	push   ebp
c0011b53:	e8 98 ea fe ff       	call   c00005f0 <strcmp>
c0011b58:	83 c4 10             	add    esp,0x10
c0011b5b:	85 c0                	test   eax,eax
c0011b5d:	75 0f                	jne    c0011b6e <CPU::detectFeatures()+0x322>
c0011b5f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0011b69:	e9 a9 00 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011b6e:	50                   	push   eax
c0011b6f:	50                   	push   eax
c0011b70:	68 30 3f 02 c0       	push   0xc0023f30
c0011b75:	55                   	push   ebp
c0011b76:	e8 75 ea fe ff       	call   c00005f0 <strcmp>
c0011b7b:	83 c4 10             	add    esp,0x10
c0011b7e:	85 c0                	test   eax,eax
c0011b80:	75 0f                	jne    c0011b91 <CPU::detectFeatures()+0x345>
c0011b82:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0011b8c:	e9 86 00 00 00       	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011b91:	50                   	push   eax
c0011b92:	50                   	push   eax
c0011b93:	68 3d 3f 02 c0       	push   0xc0023f3d
c0011b98:	55                   	push   ebp
c0011b99:	e8 52 ea fe ff       	call   c00005f0 <strcmp>
c0011b9e:	83 c4 10             	add    esp,0x10
c0011ba1:	85 c0                	test   eax,eax
c0011ba3:	75 0c                	jne    c0011bb1 <CPU::detectFeatures()+0x365>
c0011ba5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0011baf:	eb 66                	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011bb1:	50                   	push   eax
c0011bb2:	50                   	push   eax
c0011bb3:	68 4a 3f 02 c0       	push   0xc0023f4a
c0011bb8:	55                   	push   ebp
c0011bb9:	e8 32 ea fe ff       	call   c00005f0 <strcmp>
c0011bbe:	83 c4 10             	add    esp,0x10
c0011bc1:	85 c0                	test   eax,eax
c0011bc3:	75 0c                	jne    c0011bd1 <CPU::detectFeatures()+0x385>
c0011bc5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0011bcf:	eb 46                	jmp    c0011c17 <CPU::detectFeatures()+0x3cb>
c0011bd1:	57                   	push   edi
c0011bd2:	57                   	push   edi
c0011bd3:	68 57 3f 02 c0       	push   0xc0023f57
c0011bd8:	55                   	push   ebp
c0011bd9:	e8 12 ea fe ff       	call   c00005f0 <strcmp>
c0011bde:	83 c4 10             	add    esp,0x10
c0011be1:	85 c0                	test   eax,eax
c0011be3:	74 e0                	je     c0011bc5 <CPU::detectFeatures()+0x379>
c0011be5:	56                   	push   esi
c0011be6:	56                   	push   esi
c0011be7:	68 64 3f 02 c0       	push   0xc0023f64
c0011bec:	55                   	push   ebp
c0011bed:	e8 fe e9 fe ff       	call   c00005f0 <strcmp>
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	85 c0                	test   eax,eax
c0011bf7:	74 cc                	je     c0011bc5 <CPU::detectFeatures()+0x379>
c0011bf9:	51                   	push   ecx
c0011bfa:	51                   	push   ecx
c0011bfb:	68 71 3f 02 c0       	push   0xc0023f71
c0011c00:	55                   	push   ebp
c0011c01:	e8 ea e9 fe ff       	call   c00005f0 <strcmp>
c0011c06:	83 c4 10             	add    esp,0x10
c0011c09:	85 c0                	test   eax,eax
c0011c0b:	74 b8                	je     c0011bc5 <CPU::detectFeatures()+0x379>
c0011c0d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0011c17:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0011c1c:	0f 86 be 00 00 00    	jbe    c0011ce0 <CPU::detectFeatures()+0x494>
c0011c22:	83 ec 0c             	sub    esp,0xc
c0011c25:	68 80 00 00 00       	push   0x80
c0011c2a:	e8 31 fb ff ff       	call   c0011760 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011c2f:	83 e0 01             	and    eax,0x1
c0011c32:	c1 e0 06             	shl    eax,0x6
c0011c35:	88 c2                	mov    dl,al
c0011c37:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011c3d:	83 e0 bf             	and    eax,0xffffffbf
c0011c40:	09 d0                	or     eax,edx
c0011c42:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011c48:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0011c4f:	e8 0c fb ff ff       	call   c0011760 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011c54:	83 e0 01             	and    eax,0x1
c0011c57:	c1 e0 04             	shl    eax,0x4
c0011c5a:	88 c2                	mov    dl,al
c0011c5c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011c62:	83 e0 ef             	and    eax,0xffffffef
c0011c65:	09 d0                	or     eax,edx
c0011c67:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011c6d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0011c74:	e8 e7 fa ff ff       	call   c0011760 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011c79:	c1 e0 07             	shl    eax,0x7
c0011c7c:	88 c2                	mov    dl,al
c0011c7e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011c84:	83 e0 7f             	and    eax,0x7f
c0011c87:	09 d0                	or     eax,edx
c0011c89:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011c8f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0011c96:	e8 f3 fa ff ff       	call   c001178e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0011c9b:	83 e0 01             	and    eax,0x1
c0011c9e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0011ca5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011cab:	83 e0 f7             	and    eax,0xfffffff7
c0011cae:	09 d0                	or     eax,edx
c0011cb0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011cb6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0011cbd:	e8 cc fa ff ff       	call   c001178e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0011cc2:	83 c4 10             	add    esp,0x10
c0011cc5:	83 e0 01             	and    eax,0x1
c0011cc8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0011ccf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011cd5:	83 e0 fb             	and    eax,0xfffffffb
c0011cd8:	09 d0                	or     eax,edx
c0011cda:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011ce0:	83 ec 0c             	sub    esp,0xc
c0011ce3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ce7:	50                   	push   eax
c0011ce8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011cec:	50                   	push   eax
c0011ced:	8d 74 24 28          	lea    esi,[esp+0x28]
c0011cf1:	56                   	push   esi
c0011cf2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011cf6:	50                   	push   eax
c0011cf7:	6a 01                	push   0x1
c0011cf9:	e8 82 f9 ff ff       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011cfe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011d02:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0011d08:	88 ca                	mov    dl,cl
c0011d0a:	83 e0 f0             	and    eax,0xfffffff0
c0011d0d:	83 e2 0f             	and    edx,0xf
c0011d10:	09 d0                	or     eax,edx
c0011d12:	88 ca                	mov    dl,cl
c0011d14:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0011d1a:	c0 ea 04             	shr    dl,0x4
c0011d1d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0011d21:	0f b6 c2             	movzx  eax,dl
c0011d24:	83 c4 20             	add    esp,0x20
c0011d27:	c1 e0 06             	shl    eax,0x6
c0011d2a:	89 c7                	mov    edi,eax
c0011d2c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011d32:	66 25 3f c0          	and    ax,0xc03f
c0011d36:	09 f8                	or     eax,edi
c0011d38:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0011d3f:	89 c8                	mov    eax,ecx
c0011d41:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0011d48:	c1 e8 08             	shr    eax,0x8
c0011d4b:	83 e5 3f             	and    ebp,0x3f
c0011d4e:	83 e0 0f             	and    eax,0xf
c0011d51:	89 c7                	mov    edi,eax
c0011d53:	c1 e7 06             	shl    edi,0x6
c0011d56:	09 ef                	or     edi,ebp
c0011d58:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0011d5f:	89 fa                	mov    edx,edi
c0011d61:	83 e5 c0             	and    ebp,0xffffffc0
c0011d64:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0011d6a:	88 c2                	mov    dl,al
c0011d6c:	c0 ea 02             	shr    dl,0x2
c0011d6f:	89 d7                	mov    edi,edx
c0011d71:	09 ef                	or     edi,ebp
c0011d73:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0011d79:	89 fa                	mov    edx,edi
c0011d7b:	83 e5 cf             	and    ebp,0xffffffcf
c0011d7e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0011d84:	89 cf                	mov    edi,ecx
c0011d86:	c1 ef 0c             	shr    edi,0xc
c0011d89:	83 e7 03             	and    edi,0x3
c0011d8c:	c1 e7 04             	shl    edi,0x4
c0011d8f:	09 ef                	or     edi,ebp
c0011d91:	3c 06                	cmp    al,0x6
c0011d93:	89 fa                	mov    edx,edi
c0011d95:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0011d9b:	74 04                	je     c0011da1 <CPU::detectFeatures()+0x555>
c0011d9d:	3c 0f                	cmp    al,0xf
c0011d9f:	75 5c                	jne    c0011dfd <CPU::detectFeatures()+0x5b1>
c0011da1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011da5:	89 cf                	mov    edi,ecx
c0011da7:	c1 ef 10             	shr    edi,0x10
c0011daa:	c1 e7 04             	shl    edi,0x4
c0011dad:	09 fa                	or     edx,edi
c0011daf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0011db5:	0f b6 d2             	movzx  edx,dl
c0011db8:	66 81 e7 3f c0       	and    di,0xc03f
c0011dbd:	c1 e2 06             	shl    edx,0x6
c0011dc0:	09 fa                	or     edx,edi
c0011dc2:	3c 0f                	cmp    al,0xf
c0011dc4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0011dcb:	75 30                	jne    c0011dfd <CPU::detectFeatures()+0x5b1>
c0011dcd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0011dd3:	c1 e9 14             	shr    ecx,0x14
c0011dd6:	83 e0 3f             	and    eax,0x3f
c0011dd9:	83 c1 0f             	add    ecx,0xf
c0011ddc:	88 ca                	mov    dl,cl
c0011dde:	c0 e9 02             	shr    cl,0x2
c0011de1:	c1 e2 06             	shl    edx,0x6
c0011de4:	09 d0                	or     eax,edx
c0011de6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0011dec:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0011df2:	83 e0 c0             	and    eax,0xffffffc0
c0011df5:	09 c1                	or     ecx,eax
c0011df7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0011dfd:	83 ec 0c             	sub    esp,0xc
c0011e00:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c0011e07:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011e0b:	50                   	push   eax
c0011e0c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0011e10:	55                   	push   ebp
c0011e11:	56                   	push   esi
c0011e12:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0011e16:	57                   	push   edi
c0011e17:	68 00 00 00 80       	push   0x80000000
c0011e1c:	e8 5f f8 ff ff       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011e21:	83 c4 20             	add    esp,0x20
c0011e24:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0011e2c:	76 22                	jbe    c0011e50 <CPU::detectFeatures()+0x604>
c0011e2e:	83 ec 0c             	sub    esp,0xc
c0011e31:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011e35:	50                   	push   eax
c0011e36:	55                   	push   ebp
c0011e37:	56                   	push   esi
c0011e38:	57                   	push   edi
c0011e39:	68 01 00 00 80       	push   0x80000001
c0011e3e:	e8 3d f8 ff ff       	call   c0011680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011e43:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0011e4d:	83 c4 20             	add    esp,0x20
c0011e50:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0011e56:	8d 50 ff             	lea    edx,[eax-0x1]
c0011e59:	83 fa 03             	cmp    edx,0x3
c0011e5c:	76 7e                	jbe    c0011edc <CPU::detectFeatures()+0x690>
c0011e5e:	83 f8 06             	cmp    eax,0x6
c0011e61:	74 79                	je     c0011edc <CPU::detectFeatures()+0x690>
c0011e63:	52                   	push   edx
c0011e64:	52                   	push   edx
c0011e65:	68 7d 3f 02 c0       	push   0xc0023f7d
c0011e6a:	53                   	push   ebx
c0011e6b:	e8 24 bf ff ff       	call   c000dd94 <Device::setName(char const*)>
c0011e70:	83 c4 10             	add    esp,0x10
c0011e73:	eb 67                	jmp    c0011edc <CPU::detectFeatures()+0x690>
c0011e75:	50                   	push   eax
c0011e76:	50                   	push   eax
c0011e77:	68 e2 3e 02 c0       	push   0xc0023ee2
c0011e7c:	55                   	push   ebp
c0011e7d:	e8 e2 e6 fe ff       	call   c0000564 <strcpy>
c0011e82:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011e8c:	e8 52 e3 fe ff       	call   c00001e3 <is486>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	85 c0                	test   eax,eax
c0011e96:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011e9c:	74 1d                	je     c0011ebb <CPU::detectFeatures()+0x66f>
c0011e9e:	83 c8 07             	or     eax,0x7
c0011ea1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011ea7:	0f 20 c0             	mov    eax,cr0
c0011eaa:	83 e0 14             	and    eax,0x14
c0011ead:	83 f8 04             	cmp    eax,0x4
c0011eb0:	75 0e                	jne    c0011ec0 <CPU::detectFeatures()+0x674>
c0011eb2:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c0011eb9:	eb 21                	jmp    c0011edc <CPU::detectFeatures()+0x690>
c0011ebb:	83 e0 f8             	and    eax,0xfffffff8
c0011ebe:	eb e1                	jmp    c0011ea1 <CPU::detectFeatures()+0x655>
c0011ec0:	e8 f9 e2 fe ff       	call   c00001be <hasLegacyFPU>
c0011ec5:	83 e0 01             	and    eax,0x1
c0011ec8:	8d 14 00             	lea    edx,[eax+eax*1]
c0011ecb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011ed1:	83 e0 fd             	and    eax,0xfffffffd
c0011ed4:	09 d0                	or     eax,edx
c0011ed6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011edc:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0011ee3:	74 0e                	je     c0011ef3 <CPU::detectFeatures()+0x6a7>
c0011ee5:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0011eea:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0011ef1:	eb 20                	jmp    c0011f13 <CPU::detectFeatures()+0x6c7>
c0011ef3:	e8 c6 e2 fe ff       	call   c00001be <hasLegacyFPU>
c0011ef8:	83 e0 01             	and    eax,0x1
c0011efb:	8d 14 00             	lea    edx,[eax+eax*1]
c0011efe:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011f04:	83 e0 fd             	and    eax,0xfffffffd
c0011f07:	09 d0                	or     eax,edx
c0011f09:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011f0f:	a8 02                	test   al,0x2
c0011f11:	75 d2                	jne    c0011ee5 <CPU::detectFeatures()+0x699>
c0011f13:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0011f1a:	83 c4 2c             	add    esp,0x2c
c0011f1d:	5b                   	pop    ebx
c0011f1e:	5e                   	pop    esi
c0011f1f:	5f                   	pop    edi
c0011f20:	5d                   	pop    ebp
c0011f21:	c3                   	ret    

c0011f22 <CPU::setupSMEP()>:
c0011f22:	0f 20 e0             	mov    eax,cr4
c0011f25:	0d 00 00 10 00       	or     eax,0x100000
c0011f2a:	0f 22 e0             	mov    cr4,eax
c0011f2d:	c3                   	ret    

c0011f2e <CPU::setupUMIP()>:
c0011f2e:	0f 20 e0             	mov    eax,cr4
c0011f31:	80 cc 08             	or     ah,0x8
c0011f34:	0f 22 e0             	mov    cr4,eax
c0011f37:	c3                   	ret    

c0011f38 <CPU::setupTSC()>:
c0011f38:	0f 20 e0             	mov    eax,cr4
c0011f3b:	83 c8 04             	or     eax,0x4
c0011f3e:	0f 22 e0             	mov    cr4,eax
c0011f41:	c3                   	ret    

c0011f42 <CPU::setupLargePages()>:
c0011f42:	0f 20 e0             	mov    eax,cr4
c0011f45:	83 c8 10             	or     eax,0x10
c0011f48:	0f 22 e0             	mov    cr4,eax
c0011f4b:	c3                   	ret    

c0011f4c <CPU::setupPAT()>:
c0011f4c:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0011f51:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0011f58:	74 2c                	je     c0011f86 <CPU::setupPAT()+0x3a>
c0011f5a:	53                   	push   ebx
c0011f5b:	83 ec 10             	sub    esp,0x10
c0011f5e:	68 77 02 00 00       	push   0x277
c0011f63:	50                   	push   eax
c0011f64:	e8 e5 6d ff ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c0011f69:	83 e2 f8             	and    edx,0xfffffff8
c0011f6c:	83 ca 01             	or     edx,0x1
c0011f6f:	52                   	push   edx
c0011f70:	50                   	push   eax
c0011f71:	68 77 02 00 00       	push   0x277
c0011f76:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0011f7c:	e8 f9 6d ff ff       	call   c0008d7a <Computer::wrmsr(unsigned int, unsigned long long)>
c0011f81:	83 c4 28             	add    esp,0x28
c0011f84:	5b                   	pop    ebx
c0011f85:	c3                   	ret    
c0011f86:	c3                   	ret    
c0011f87:	90                   	nop

c0011f88 <CPU::setupMTRR()>:
c0011f88:	c3                   	ret    
c0011f89:	90                   	nop

c0011f8a <CPU::setupGlobalPages()>:
c0011f8a:	0f 20 e0             	mov    eax,cr4
c0011f8d:	0c 80                	or     al,0x80
c0011f8f:	0f 22 e0             	mov    cr4,eax
c0011f92:	c3                   	ret    
c0011f93:	90                   	nop

c0011f94 <CPU::allowUsermodeDataAccess()>:
c0011f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f98:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011f9f:	74 03                	je     c0011fa4 <CPU::allowUsermodeDataAccess()+0x10>
c0011fa1:	0f 01 cb             	stac   
c0011fa4:	c3                   	ret    
c0011fa5:	90                   	nop

c0011fa6 <CPU::prohibitUsermodeDataAccess()>:
c0011fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011faa:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011fb1:	74 03                	je     c0011fb6 <CPU::prohibitUsermodeDataAccess()+0x10>
c0011fb3:	0f 01 ca             	clac   
c0011fb6:	c3                   	ret    
c0011fb7:	90                   	nop

c0011fb8 <CPU::setupSMAP()>:
c0011fb8:	0f 20 e0             	mov    eax,cr4
c0011fbb:	0d 00 00 20 00       	or     eax,0x200000
c0011fc0:	0f 22 e0             	mov    cr4,eax
c0011fc3:	eb e1                	jmp    c0011fa6 <CPU::prohibitUsermodeDataAccess()>
c0011fc5:	90                   	nop

c0011fc6 <CPU::setupFeatures()>:
c0011fc6:	53                   	push   ebx
c0011fc7:	83 ec 08             	sub    esp,0x8
c0011fca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fce:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0011fd5:	74 18                	je     c0011fef <CPU::setupFeatures()+0x29>
c0011fd7:	83 ec 0c             	sub    esp,0xc
c0011fda:	68 89 3f 02 c0       	push   0xc0023f89
c0011fdf:	e8 3d a7 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0011fe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fe7:	e8 42 ff ff ff       	call   c0011f2e <CPU::setupUMIP()>
c0011fec:	83 c4 10             	add    esp,0x10
c0011fef:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0011ff6:	74 18                	je     c0012010 <CPU::setupFeatures()+0x4a>
c0011ff8:	83 ec 0c             	sub    esp,0xc
c0011ffb:	68 93 3f 02 c0       	push   0xc0023f93
c0012000:	e8 1c a7 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0012005:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012008:	e8 2b ff ff ff       	call   c0011f38 <CPU::setupTSC()>
c001200d:	83 c4 10             	add    esp,0x10
c0012010:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0012017:	74 18                	je     c0012031 <CPU::setupFeatures()+0x6b>
c0012019:	83 ec 0c             	sub    esp,0xc
c001201c:	68 9c 3f 02 c0       	push   0xc0023f9c
c0012021:	e8 fb a6 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0012026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012029:	e8 14 ff ff ff       	call   c0011f42 <CPU::setupLargePages()>
c001202e:	83 c4 10             	add    esp,0x10
c0012031:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0012038:	74 18                	je     c0012052 <CPU::setupFeatures()+0x8c>
c001203a:	83 ec 0c             	sub    esp,0xc
c001203d:	68 a5 3f 02 c0       	push   0xc0023fa5
c0012042:	e8 da a6 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0012047:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001204a:	e8 3b ff ff ff       	call   c0011f8a <CPU::setupGlobalPages()>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0012059:	74 18                	je     c0012073 <CPU::setupFeatures()+0xad>
c001205b:	83 ec 0c             	sub    esp,0xc
c001205e:	68 b7 3f 02 c0       	push   0xc0023fb7
c0012063:	e8 b9 a6 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0012068:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001206b:	e8 dc fe ff ff       	call   c0011f4c <CPU::setupPAT()>
c0012070:	83 c4 10             	add    esp,0x10
c0012073:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001207a:	74 11                	je     c001208d <CPU::setupFeatures()+0xc7>
c001207c:	c7 44 24 10 c0 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023fc0
c0012084:	83 c4 08             	add    esp,0x8
c0012087:	5b                   	pop    ebx
c0012088:	e9 94 a6 ff ff       	jmp    c000c721 <Dbg::kprintf(char const*, ...)>
c001208d:	83 c4 08             	add    esp,0x8
c0012090:	5b                   	pop    ebx
c0012091:	c3                   	ret    

c0012092 <CPU::open(int, int, void*)>:
c0012092:	57                   	push   edi
c0012093:	56                   	push   esi
c0012094:	53                   	push   ebx
c0012095:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012099:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001209d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00120a3:	83 ec 0c             	sub    esp,0xc
c00120a6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00120ac:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00120b2:	50                   	push   eax
c00120b3:	e8 b4 6f ff ff       	call   c000906c <GDT::setup()>
c00120b8:	83 c4 0c             	add    esp,0xc
c00120bb:	6a 00                	push   0x0
c00120bd:	68 ef be ad de       	push   0xdeadbeef
c00120c2:	57                   	push   edi
c00120c3:	e8 84 8c ff ff       	call   c000ad4c <TSS::setup(unsigned long, unsigned long)>
c00120c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00120cb:	e8 5c 8c ff ff       	call   c000ad2c <TSS::flush()>
c00120d0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00120d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00120d9:	e8 1c 72 ff ff       	call   c00092fa <IDT::setup()>
c00120de:	b8 00 04 00 00       	mov    eax,0x400
c00120e3:	0f 23 f8             	mov    db7,eax
c00120e6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00120f0:	e8 d3 7a ff ff       	call   c0009bc8 <Phys::allocatePage()>
c00120f5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00120fb:	89 30                	mov    DWORD PTR [eax],esi
c00120fd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0012103:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012106:	58                   	pop    eax
c0012107:	5a                   	pop    edx
c0012108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001210e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012112:	e8 f5 9b ff ff       	call   c000bd0c <VAS::setCPUSpecific(unsigned long)>
c0012117:	c7 04 24 ca 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fca
c001211e:	e8 ce 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012123:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012126:	e8 21 f7 ff ff       	call   c001184c <CPU::detectFeatures()>
c001212b:	c7 04 24 ed 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fed
c0012132:	e8 ba 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012137:	e8 29 74 00 00       	call   c0019565 <Hal::initialise()>
c001213c:	c7 04 24 01 40 02 c0 	mov    DWORD PTR [esp],0xc0024001
c0012143:	e8 a9 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012148:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c001214d:	83 e0 10             	and    eax,0x10
c0012150:	83 f8 01             	cmp    eax,0x1
c0012153:	19 c0                	sbb    eax,eax
c0012155:	83 e0 46             	and    eax,0x46
c0012158:	83 c0 1e             	add    eax,0x1e
c001215b:	89 04 24             	mov    DWORD PTR [esp],eax
c001215e:	e8 1a d3 ff ff       	call   c000f47d <setupTimer(int)>
c0012163:	83 c4 10             	add    esp,0x10
c0012166:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001216c:	f6 05 60 64 02 c0 20 	test   BYTE PTR ds:0xc0026460,0x20
c0012173:	74 18                	je     c001218d <CPU::open(int, int, void*)+0xfb>
c0012175:	83 ec 0c             	sub    esp,0xc
c0012178:	68 1c 40 02 c0       	push   0xc002401c
c001217d:	e8 6f 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012182:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012185:	e8 3c fe ff ff       	call   c0011fc6 <CPU::setupFeatures()>
c001218a:	83 c4 10             	add    esp,0x10
c001218d:	83 ec 0c             	sub    esp,0xc
c0012190:	68 37 40 02 c0       	push   0xc0024037
c0012195:	e8 57 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001219a:	83 c4 10             	add    esp,0x10
c001219d:	31 c0                	xor    eax,eax
c001219f:	5b                   	pop    ebx
c00121a0:	5e                   	pop    esi
c00121a1:	5f                   	pop    edi
c00121a2:	c3                   	ret    
c00121a3:	90                   	nop

c00121a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00121a4:	57                   	push   edi
c00121a5:	56                   	push   esi
c00121a6:	53                   	push   ebx
c00121a7:	51                   	push   ecx
c00121a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00121ac:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00121af:	0f 02 c0             	lar    eax,ax
c00121b2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00121b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00121b9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00121bc:	88 ca                	mov    dl,cl
c00121be:	c0 ea 06             	shr    dl,0x6
c00121c1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00121c5:	89 ca                	mov    edx,ecx
c00121c7:	66 c1 ea 03          	shr    dx,0x3
c00121cb:	83 e2 07             	and    edx,0x7
c00121ce:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00121d3:	88 17                	mov    BYTE PTR [edi],dl
c00121d5:	0f 84 a6 01 00 00    	je     c0012381 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00121db:	83 e1 07             	and    ecx,0x7
c00121de:	80 f9 04             	cmp    cl,0x4
c00121e1:	0f 84 98 00 00 00    	je     c001227f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00121e7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00121ec:	0f 95 c0             	setne  al
c00121ef:	80 f9 05             	cmp    cl,0x5
c00121f2:	0f 95 c2             	setne  dl
c00121f5:	08 c2                	or     dl,al
c00121f7:	74 79                	je     c0012272 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00121f9:	84 c9                	test   cl,cl
c00121fb:	75 05                	jne    c0012202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00121fd:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0012200:	eb 3c                	jmp    c001223e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012202:	80 f9 01             	cmp    cl,0x1
c0012205:	75 05                	jne    c001220c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0012207:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001220a:	eb 32                	jmp    c001223e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001220c:	80 f9 02             	cmp    cl,0x2
c001220f:	75 05                	jne    c0012216 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0012211:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012214:	eb 28                	jmp    c001223e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012216:	31 c0                	xor    eax,eax
c0012218:	80 f9 03             	cmp    cl,0x3
c001221b:	75 05                	jne    c0012222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001221d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0012220:	eb 1c                	jmp    c001223e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012222:	80 f9 05             	cmp    cl,0x5
c0012225:	75 05                	jne    c001222c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0012227:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001222a:	eb 12                	jmp    c001223e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001222c:	80 f9 06             	cmp    cl,0x6
c001222f:	75 05                	jne    c0012236 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0012231:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012234:	eb 08                	jmp    c001223e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012236:	80 f9 07             	cmp    cl,0x7
c0012239:	75 03                	jne    c001223e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001223b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001223e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0012243:	75 10                	jne    c0012255 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0012245:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0012249:	b9 03 00 00 00       	mov    ecx,0x3
c001224e:	01 d0                	add    eax,edx
c0012250:	e9 37 01 00 00       	jmp    c001238c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012255:	b9 02 00 00 00       	mov    ecx,0x2
c001225a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001225f:	0f 85 27 01 00 00    	jne    c001238c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012265:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0012268:	b9 06 00 00 00       	mov    ecx,0x6
c001226d:	e9 1a 01 00 00       	jmp    c001238c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012272:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0012275:	b9 06 00 00 00       	mov    ecx,0x6
c001227a:	e9 0f 01 00 00       	jmp    c001238e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001227f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0012282:	88 ca                	mov    dl,cl
c0012284:	c0 ea 06             	shr    dl,0x6
c0012287:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001228b:	89 ca                	mov    edx,ecx
c001228d:	66 c1 ea 03          	shr    dx,0x3
c0012291:	83 e2 07             	and    edx,0x7
c0012294:	80 e1 07             	and    cl,0x7
c0012297:	75 05                	jne    c001229e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0012299:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001229c:	eb 4c                	jmp    c00122ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001229e:	80 f9 01             	cmp    cl,0x1
c00122a1:	75 05                	jne    c00122a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00122a3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00122a6:	eb 42                	jmp    c00122ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122a8:	80 f9 02             	cmp    cl,0x2
c00122ab:	75 05                	jne    c00122b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00122ad:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00122b0:	eb 38                	jmp    c00122ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122b2:	80 f9 03             	cmp    cl,0x3
c00122b5:	75 05                	jne    c00122bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00122b7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00122ba:	eb 2e                	jmp    c00122ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122bc:	80 f9 04             	cmp    cl,0x4
c00122bf:	75 12                	jne    c00122d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00122c1:	f6 c4 60             	test   ah,0x60
c00122c4:	75 08                	jne    c00122ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00122c6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00122c9:	8d 78 14             	lea    edi,[eax+0x14]
c00122cc:	eb 1c                	jmp    c00122ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122ce:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00122d1:	eb 17                	jmp    c00122ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122d3:	80 f9 05             	cmp    cl,0x5
c00122d6:	75 05                	jne    c00122dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00122d8:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00122db:	eb 0d                	jmp    c00122ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122dd:	80 f9 06             	cmp    cl,0x6
c00122e0:	75 05                	jne    c00122e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00122e2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00122e5:	eb 03                	jmp    c00122ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122e7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00122ea:	84 d2                	test   dl,dl
c00122ec:	75 05                	jne    c00122f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00122ee:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00122f1:	eb 3c                	jmp    c001232f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122f3:	80 fa 01             	cmp    dl,0x1
c00122f6:	75 05                	jne    c00122fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00122f8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00122fb:	eb 32                	jmp    c001232f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122fd:	80 fa 02             	cmp    dl,0x2
c0012300:	75 05                	jne    c0012307 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0012302:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012305:	eb 28                	jmp    c001232f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012307:	80 fa 03             	cmp    dl,0x3
c001230a:	75 05                	jne    c0012311 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001230c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001230f:	eb 1e                	jmp    c001232f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012311:	31 c0                	xor    eax,eax
c0012313:	80 fa 04             	cmp    dl,0x4
c0012316:	74 17                	je     c001232f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012318:	80 fa 05             	cmp    dl,0x5
c001231b:	75 05                	jne    c0012322 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001231d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0012320:	eb 0d                	jmp    c001232f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012322:	80 fa 06             	cmp    dl,0x6
c0012325:	75 05                	jne    c001232c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0012327:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001232a:	eb 03                	jmp    c001232f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001232c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001232f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012334:	0f 94 c2             	sete   dl
c0012337:	80 f9 05             	cmp    cl,0x5
c001233a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001233e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0012343:	d3 e0                	shl    eax,cl
c0012345:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0012349:	74 0a                	je     c0012355 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001234b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001234e:	b9 07 00 00 00       	mov    ecx,0x7
c0012353:	eb 37                	jmp    c001238c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012355:	01 f8                	add    eax,edi
c0012357:	b9 03 00 00 00       	mov    ecx,0x3
c001235c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012361:	74 2b                	je     c001238e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012363:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0012368:	75 0d                	jne    c0012377 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001236a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001236e:	01 c8                	add    eax,ecx
c0012370:	b9 04 00 00 00       	mov    ecx,0x4
c0012375:	eb 17                	jmp    c001238e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012377:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001237a:	b9 07 00 00 00       	mov    ecx,0x7
c001237f:	eb 0d                	jmp    c001238e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012381:	b9 02 00 00 00       	mov    ecx,0x2
c0012386:	b2 01                	mov    dl,0x1
c0012388:	31 c0                	xor    eax,eax
c001238a:	eb 02                	jmp    c001238e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001238c:	31 d2                	xor    edx,edx
c001238e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012392:	89 0b                	mov    DWORD PTR [ebx],ecx
c0012394:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012398:	88 11                	mov    BYTE PTR [ecx],dl
c001239a:	5a                   	pop    edx
c001239b:	5b                   	pop    ebx
c001239c:	5e                   	pop    esi
c001239d:	5f                   	pop    edi
c001239e:	c3                   	ret    

c001239f <Krnl::smpEntry()>:
c001239f:	eb fe                	jmp    c001239f <Krnl::smpEntry()>

c00123a1 <Krnl::startCPU(int)>:
c00123a1:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00123a6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00123ad:	0f 84 36 01 00 00    	je     c00124e9 <Krnl::startCPU(int)+0x148>
c00123b3:	53                   	push   ebx
c00123b4:	83 ec 10             	sub    esp,0x10
c00123b7:	fa                   	cli    
c00123b8:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00123be:	6a 1b                	push   0x1b
c00123c0:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c00123c6:	e8 83 69 ff ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c00123cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123d0:	89 c3                	mov    ebx,eax
c00123d2:	58                   	pop    eax
c00123d3:	5a                   	pop    edx
c00123d4:	53                   	push   ebx
c00123d5:	68 80 40 02 c0       	push   0xc0024080
c00123da:	e8 42 a3 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00123df:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00123e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123ed:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00123f7:	c1 e0 18             	shl    eax,0x18
c00123fa:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0012400:	83 c4 10             	add    esp,0x10
c0012403:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012409:	09 c2                	or     edx,eax
c001240b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0012411:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0012417:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001241d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0012423:	80 cd c5             	or     ch,0xc5
c0012426:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001242c:	f3 90                	pause  
c001242e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012430:	0f ba e1 0c          	bt     ecx,0xc
c0012434:	72 f6                	jb     c001242c <Krnl::startCPU(int)+0x8b>
c0012436:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001243c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012442:	09 c1                	or     ecx,eax
c0012444:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001244a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012450:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0012456:	80 cd 85             	or     ch,0x85
c0012459:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001245f:	f3 90                	pause  
c0012461:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012463:	0f ba e1 0c          	bt     ecx,0xc
c0012467:	72 f6                	jb     c001245f <Krnl::startCPU(int)+0xbe>
c0012469:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012473:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0012479:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001247f:	09 c1                	or     ecx,eax
c0012481:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0012487:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001248d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0012493:	81 c9 02 06 00 00    	or     ecx,0x602
c0012499:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001249f:	f3 90                	pause  
c00124a1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00124a3:	0f ba e1 0c          	bt     ecx,0xc
c00124a7:	72 f6                	jb     c001249f <Krnl::startCPU(int)+0xfe>
c00124a9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00124b3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00124b9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00124bf:	09 c8                	or     eax,ecx
c00124c1:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00124c7:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00124cd:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00124d2:	0d 02 06 00 00       	or     eax,0x602
c00124d7:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00124dd:	f3 90                	pause  
c00124df:	8b 02                	mov    eax,DWORD PTR [edx]
c00124e1:	0f ba e0 0c          	bt     eax,0xc
c00124e5:	72 f6                	jb     c00124dd <Krnl::startCPU(int)+0x13c>
c00124e7:	eb fe                	jmp    c00124e7 <Krnl::startCPU(int)+0x146>
c00124e9:	c3                   	ret    

c00124ea <Krnl::startCPUs()>:
c00124ea:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00124ef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00124f5:	88 c2                	mov    dl,al
c00124f7:	83 e2 0a             	and    edx,0xa
c00124fa:	80 fa 0a             	cmp    dl,0xa
c00124fd:	75 09                	jne    c0012508 <Krnl::startCPUs()+0x1e>
c00124ff:	a8 01                	test   al,0x1
c0012501:	74 05                	je     c0012508 <Krnl::startCPUs()+0x1e>
c0012503:	e9 93 dc fe ff       	jmp    c000019b <prepareTramp>
c0012508:	c3                   	ret    
c0012509:	90                   	nop

c001250a <EnvVarContainer::getEnv(char const*)>:
c001250a:	57                   	push   edi
c001250b:	56                   	push   esi
c001250c:	53                   	push   ebx
c001250d:	31 db                	xor    ebx,ebx
c001250f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012513:	39 1e                	cmp    DWORD PTR [esi],ebx
c0012515:	7e 2b                	jle    c0012542 <EnvVarContainer::getEnv(char const*)+0x38>
c0012517:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001251e:	50                   	push   eax
c001251f:	50                   	push   eax
c0012520:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012523:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0012526:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001252a:	e8 c1 e0 fe ff       	call   c00005f0 <strcmp>
c001252f:	83 c4 10             	add    esp,0x10
c0012532:	85 c0                	test   eax,eax
c0012534:	75 09                	jne    c001253f <EnvVarContainer::getEnv(char const*)+0x35>
c0012536:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012539:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001253d:	eb 05                	jmp    c0012544 <EnvVarContainer::getEnv(char const*)+0x3a>
c001253f:	43                   	inc    ebx
c0012540:	eb d1                	jmp    c0012513 <EnvVarContainer::getEnv(char const*)+0x9>
c0012542:	31 c0                	xor    eax,eax
c0012544:	5b                   	pop    ebx
c0012545:	5e                   	pop    esi
c0012546:	5f                   	pop    edi
c0012547:	c3                   	ret    

c0012548 <EnvVarContainer::setEnv(char const*, char const*)>:
c0012548:	55                   	push   ebp
c0012549:	57                   	push   edi
c001254a:	56                   	push   esi
c001254b:	53                   	push   ebx
c001254c:	83 ec 28             	sub    esp,0x28
c001254f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012553:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012557:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001255b:	56                   	push   esi
c001255c:	e8 63 df fe ff       	call   c00004c4 <strlen>
c0012561:	40                   	inc    eax
c0012562:	89 04 24             	mov    DWORD PTR [esp],eax
c0012565:	e8 2d 72 ff ff       	call   c0009797 <malloc>
c001256a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001256d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012571:	e8 4e df fe ff       	call   c00004c4 <strlen>
c0012576:	40                   	inc    eax
c0012577:	89 04 24             	mov    DWORD PTR [esp],eax
c001257a:	e8 18 72 ff ff       	call   c0009797 <malloc>
c001257f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012586:	e8 39 df fe ff       	call   c00004c4 <strlen>
c001258b:	83 c4 0c             	add    esp,0xc
c001258e:	40                   	inc    eax
c001258f:	50                   	push   eax
c0012590:	6a 00                	push   0x0
c0012592:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012596:	e8 0d df fe ff       	call   c00004a8 <memset>
c001259b:	89 34 24             	mov    DWORD PTR [esp],esi
c001259e:	e8 21 df fe ff       	call   c00004c4 <strlen>
c00125a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00125a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00125aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125af:	89 de                	mov    esi,ebx
c00125b1:	e8 0e df fe ff       	call   c00004c4 <strlen>
c00125b6:	83 c4 0c             	add    esp,0xc
c00125b9:	40                   	inc    eax
c00125ba:	50                   	push   eax
c00125bb:	6a 00                	push   0x0
c00125bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125c1:	e8 e2 de fe ff       	call   c00004a8 <memset>
c00125c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125c9:	e8 f6 de fe ff       	call   c00004c4 <strlen>
c00125ce:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00125d2:	8d 48 01             	lea    ecx,[eax+0x1]
c00125d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125da:	40                   	inc    eax
c00125db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00125de:	c1 e0 03             	shl    eax,0x3
c00125e1:	5a                   	pop    edx
c00125e2:	59                   	pop    ecx
c00125e3:	50                   	push   eax
c00125e4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00125e7:	e8 97 71 ff ff       	call   c0009783 <realloc>
c00125ec:	8d 74 24 18          	lea    esi,[esp+0x18]
c00125f0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00125f3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00125f6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00125fa:	b9 08 00 00 00       	mov    ecx,0x8
c00125ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012601:	83 c4 2c             	add    esp,0x2c
c0012604:	5b                   	pop    ebx
c0012605:	5e                   	pop    esi
c0012606:	5f                   	pop    edi
c0012607:	5d                   	pop    ebp
c0012608:	c3                   	ret    
c0012609:	90                   	nop

c001260a <EnvVarContainer::deleteEnv(char const*)>:
c001260a:	c3                   	ret    
c001260b:	90                   	nop

c001260c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001260c:	55                   	push   ebp
c001260d:	57                   	push   edi
c001260e:	56                   	push   esi
c001260f:	53                   	push   ebx
c0012610:	81 ec 38 01 00 00    	sub    esp,0x138
c0012616:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001261d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0012624:	68 14 01 00 00       	push   0x114
c0012629:	e8 69 71 ff ff       	call   c0009797 <malloc>
c001262e:	83 c4 0c             	add    esp,0xc
c0012631:	89 c3                	mov    ebx,eax
c0012633:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0012636:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001263d:	50                   	push   eax
c001263e:	e8 49 a6 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0012643:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012646:	e8 89 a9 ff ff       	call   c000cfd4 <File::exists()>
c001264b:	83 c4 10             	add    esp,0x10
c001264e:	84 c0                	test   al,al
c0012650:	75 31                	jne    c0012683 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0012652:	50                   	push   eax
c0012653:	50                   	push   eax
c0012654:	6a 12                	push   0x12
c0012656:	53                   	push   ebx
c0012657:	e8 0a a7 ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c001265c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001265e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0012661:	89 34 24             	mov    DWORD PTR [esp],esi
c0012664:	e8 5b de fe ff       	call   c00004c4 <strlen>
c0012669:	5a                   	pop    edx
c001266a:	31 d2                	xor    edx,edx
c001266c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0012670:	51                   	push   ecx
c0012671:	56                   	push   esi
c0012672:	52                   	push   edx
c0012673:	50                   	push   eax
c0012674:	53                   	push   ebx
c0012675:	ff d7                	call   edi
c0012677:	83 c4 14             	add    esp,0x14
c001267a:	53                   	push   ebx
c001267b:	e8 44 a7 ff ff       	call   c000cdc4 <File::close()>
c0012680:	83 c4 10             	add    esp,0x10
c0012683:	56                   	push   esi
c0012684:	31 f6                	xor    esi,esi
c0012686:	68 00 01 00 00       	push   0x100
c001268b:	6a 00                	push   0x0
c001268d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0012691:	50                   	push   eax
c0012692:	e8 11 de fe ff       	call   c00004a8 <memset>
c0012697:	5f                   	pop    edi
c0012698:	58                   	pop    eax
c0012699:	6a 01                	push   0x1
c001269b:	53                   	push   ebx
c001269c:	e8 c5 a6 ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c00126a1:	83 c4 10             	add    esp,0x10
c00126a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00126ac:	83 ec 0c             	sub    esp,0xc
c00126af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126b1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00126b5:	51                   	push   ecx
c00126b6:	8d 54 24 23          	lea    edx,[esp+0x23]
c00126ba:	52                   	push   edx
c00126bb:	6a 00                	push   0x0
c00126bd:	6a 01                	push   0x1
c00126bf:	53                   	push   ebx
c00126c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126c3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00126c7:	83 c4 20             	add    esp,0x20
c00126ca:	3c 0d                	cmp    al,0xd
c00126cc:	0f 84 09 01 00 00    	je     c00127db <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00126d2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00126d7:	0f 84 ef 00 00 00    	je     c00127cc <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00126dd:	3c 0a                	cmp    al,0xa
c00126df:	74 13                	je     c00126f4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00126e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126e6:	74 0c                	je     c00126f4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00126e8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00126ee:	0f 8e d8 00 00 00    	jle    c00127cc <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00126f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126f8:	83 ec 0c             	sub    esp,0xc
c00126fb:	8d 78 01             	lea    edi,[eax+0x1]
c00126fe:	57                   	push   edi
c00126ff:	e8 93 70 ff ff       	call   c0009797 <malloc>
c0012704:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0012708:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001270c:	8d 56 04             	lea    edx,[esi+0x4]
c001270f:	89 14 24             	mov    DWORD PTR [esp],edx
c0012712:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012716:	e8 7c 70 ff ff       	call   c0009797 <malloc>
c001271b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001271f:	83 c4 0c             	add    esp,0xc
c0012722:	57                   	push   edi
c0012723:	6a 00                	push   0x0
c0012725:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012729:	e8 7a dd fe ff       	call   c00004a8 <memset>
c001272e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012732:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0012736:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001273a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001273c:	83 c4 0c             	add    esp,0xc
c001273f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012743:	52                   	push   edx
c0012744:	6a 00                	push   0x0
c0012746:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001274a:	e8 59 dd fe ff       	call   c00004a8 <memset>
c001274f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012753:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0012757:	89 34 24             	mov    DWORD PTR [esp],esi
c001275a:	e8 65 dd fe ff       	call   c00004c4 <strlen>
c001275f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0012763:	89 c1                	mov    ecx,eax
c0012765:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012767:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001276a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001276d:	40                   	inc    eax
c001276e:	83 c4 10             	add    esp,0x10
c0012771:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012774:	85 d2                	test   edx,edx
c0012776:	75 0c                	jne    c0012784 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0012778:	83 ec 0c             	sub    esp,0xc
c001277b:	6a 08                	push   0x8
c001277d:	e8 15 70 ff ff       	call   c0009797 <malloc>
c0012782:	eb 0c                	jmp    c0012790 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0012784:	c1 e0 03             	shl    eax,0x3
c0012787:	51                   	push   ecx
c0012788:	51                   	push   ecx
c0012789:	50                   	push   eax
c001278a:	52                   	push   edx
c001278b:	e8 f3 6f ff ff       	call   c0009783 <realloc>
c0012790:	83 c4 10             	add    esp,0x10
c0012793:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0012796:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012799:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001279c:	8d 74 24 18          	lea    esi,[esp+0x18]
c00127a0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00127a4:	b9 08 00 00 00       	mov    ecx,0x8
c00127a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127ab:	31 f6                	xor    esi,esi
c00127ad:	50                   	push   eax
c00127ae:	68 00 01 00 00       	push   0x100
c00127b3:	6a 00                	push   0x0
c00127b5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00127b9:	50                   	push   eax
c00127ba:	e8 e9 dc fe ff       	call   c00004a8 <memset>
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00127ca:	eb 0f                	jmp    c00127db <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00127cc:	3c 3d                	cmp    al,0x3d
c00127ce:	74 07                	je     c00127d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00127d0:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00127d4:	46                   	inc    esi
c00127d5:	eb 04                	jmp    c00127db <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00127d7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00127db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00127e0:	0f 85 c6 fe ff ff    	jne    c00126ac <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00127e6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00127ec:	5b                   	pop    ebx
c00127ed:	5e                   	pop    esi
c00127ee:	5f                   	pop    edi
c00127ef:	5d                   	pop    ebp
c00127f0:	c3                   	ret    
c00127f1:	90                   	nop

c00127f2 <EnvVarContainer::__loadSystem()>:
c00127f2:	83 ec 10             	sub    esp,0x10
c00127f5:	68 80 5b 02 c0       	push   0xc0025b80
c00127fa:	68 91 40 02 c0       	push   0xc0024091
c00127ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012803:	e8 04 fe ff ff       	call   c001260c <EnvVarContainer::loadFrom(char const*, char const*)>
c0012808:	83 c4 1c             	add    esp,0x1c
c001280b:	c3                   	ret    

c001280c <EnvVarContainer::__loadUser()>:
c001280c:	c3                   	ret    
c001280d:	90                   	nop

c001280e <EnvVarContainer::EnvVarContainer(Process*)>:
c001280e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012812:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001281c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012820:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012827:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001282e:	90                   	nop
c001282f:	c3                   	ret    

c0012830 <EnvVarContainer::~EnvVarContainer()>:
c0012830:	83 ec 0c             	sub    esp,0xc
c0012833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012837:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001283a:	85 c0                	test   eax,eax
c001283c:	74 1d                	je     c001285b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001283e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012842:	8b 00                	mov    eax,DWORD PTR [eax]
c0012844:	85 c0                	test   eax,eax
c0012846:	74 13                	je     c001285b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0012848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001284f:	83 ec 0c             	sub    esp,0xc
c0012852:	50                   	push   eax
c0012853:	e8 4f 6f ff ff       	call   c00097a7 <free>
c0012858:	83 c4 10             	add    esp,0x10
c001285b:	90                   	nop
c001285c:	83 c4 0c             	add    esp,0xc
c001285f:	c3                   	ret    

c0012860 <Krnl::getEnv(Process*, char const*)>:
c0012860:	53                   	push   ebx
c0012861:	83 ec 08             	sub    esp,0x8
c0012864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012868:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001286c:	39 05 50 99 02 c0    	cmp    DWORD PTR ds:0xc0029950,eax
c0012872:	74 04                	je     c0012878 <Krnl::getEnv(Process*, char const*)+0x18>
c0012874:	85 c0                	test   eax,eax
c0012876:	75 0b                	jne    c0012883 <Krnl::getEnv(Process*, char const*)+0x23>
c0012878:	a1 d4 8e 02 c0       	mov    eax,ds:0xc0028ed4
c001287d:	85 c0                	test   eax,eax
c001287f:	75 19                	jne    c001289a <Krnl::getEnv(Process*, char const*)+0x3a>
c0012881:	eb 27                	jmp    c00128aa <Krnl::getEnv(Process*, char const*)+0x4a>
c0012883:	52                   	push   edx
c0012884:	52                   	push   edx
c0012885:	53                   	push   ebx
c0012886:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001288c:	e8 79 fc ff ff       	call   c001250a <EnvVarContainer::getEnv(char const*)>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	85 c0                	test   eax,eax
c0012896:	75 28                	jne    c00128c0 <Krnl::getEnv(Process*, char const*)+0x60>
c0012898:	eb de                	jmp    c0012878 <Krnl::getEnv(Process*, char const*)+0x18>
c001289a:	52                   	push   edx
c001289b:	52                   	push   edx
c001289c:	53                   	push   ebx
c001289d:	50                   	push   eax
c001289e:	e8 67 fc ff ff       	call   c001250a <EnvVarContainer::getEnv(char const*)>
c00128a3:	83 c4 10             	add    esp,0x10
c00128a6:	85 c0                	test   eax,eax
c00128a8:	75 16                	jne    c00128c0 <Krnl::getEnv(Process*, char const*)+0x60>
c00128aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00128ae:	a1 d8 8e 02 c0       	mov    eax,ds:0xc0028ed8
c00128b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128b7:	83 c4 08             	add    esp,0x8
c00128ba:	5b                   	pop    ebx
c00128bb:	e9 4a fc ff ff       	jmp    c001250a <EnvVarContainer::getEnv(char const*)>
c00128c0:	83 c4 08             	add    esp,0x8
c00128c3:	5b                   	pop    ebx
c00128c4:	c3                   	ret    

c00128c5 <Krnl::setEnvSystem(char const*, char const*)>:
c00128c5:	83 ec 10             	sub    esp,0x10
c00128c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128d0:	ff 35 d8 8e 02 c0    	push   DWORD PTR ds:0xc0028ed8
c00128d6:	e8 6d fc ff ff       	call   c0012548 <EnvVarContainer::setEnv(char const*, char const*)>
c00128db:	83 c4 1c             	add    esp,0x1c
c00128de:	c3                   	ret    

c00128df <Krnl::setEnvUser(char const*, char const*)>:
c00128df:	a1 d4 8e 02 c0       	mov    eax,ds:0xc0028ed4
c00128e4:	85 c0                	test   eax,eax
c00128e6:	74 15                	je     c00128fd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00128e8:	83 ec 10             	sub    esp,0x10
c00128eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128f3:	50                   	push   eax
c00128f4:	e8 4f fc ff ff       	call   c0012548 <EnvVarContainer::setEnv(char const*, char const*)>
c00128f9:	83 c4 1c             	add    esp,0x1c
c00128fc:	c3                   	ret    
c00128fd:	c3                   	ret    

c00128fe <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00128fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012902:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0012908:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001290c:	e9 37 fc ff ff       	jmp    c0012548 <EnvVarContainer::setEnv(char const*, char const*)>

c0012911 <Krnl::deleteEnvSystem(char const*)>:
c0012911:	c3                   	ret    

c0012912 <Krnl::deleteEnvUser(char const*)>:
c0012912:	c3                   	ret    

c0012913 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0012913:	c3                   	ret    

c0012914 <Krnl::newProcessEnv(Process*)>:
c0012914:	83 ec 28             	sub    esp,0x28
c0012917:	6a 0c                	push   0xc
c0012919:	e8 79 6e ff ff       	call   c0009797 <malloc>
c001291e:	5a                   	pop    edx
c001291f:	59                   	pop    ecx
c0012920:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012924:	50                   	push   eax
c0012925:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012929:	e8 e0 fe ff ff       	call   c001280e <EnvVarContainer::EnvVarContainer(Process*)>
c001292e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012932:	83 c4 2c             	add    esp,0x2c
c0012935:	c3                   	ret    

c0012936 <Krnl::copyProcessEnv(Process*, Process*)>:
c0012936:	57                   	push   edi
c0012937:	56                   	push   esi
c0012938:	53                   	push   ebx
c0012939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001293d:	83 ec 0c             	sub    esp,0xc
c0012940:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0012946:	6a 0c                	push   0xc
c0012948:	e8 4a 6e ff ff       	call   c0009797 <malloc>
c001294d:	89 c3                	mov    ebx,eax
c001294f:	58                   	pop    eax
c0012950:	5a                   	pop    edx
c0012951:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012955:	53                   	push   ebx
c0012956:	e8 b3 fe ff ff       	call   c001280e <EnvVarContainer::EnvVarContainer(Process*)>
c001295b:	8b 07                	mov    eax,DWORD PTR [edi]
c001295d:	89 03                	mov    DWORD PTR [ebx],eax
c001295f:	c1 e0 03             	shl    eax,0x3
c0012962:	89 04 24             	mov    DWORD PTR [esp],eax
c0012965:	e8 2d 6e ff ff       	call   c0009797 <malloc>
c001296a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001296d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001296f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0012972:	c1 e1 03             	shl    ecx,0x3
c0012975:	89 c7                	mov    edi,eax
c0012977:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012979:	83 c4 10             	add    esp,0x10
c001297c:	89 d8                	mov    eax,ebx
c001297e:	5b                   	pop    ebx
c001297f:	5e                   	pop    esi
c0012980:	5f                   	pop    edi
c0012981:	c3                   	ret    

c0012982 <Krnl::loadSystemEnv()>:
c0012982:	53                   	push   ebx
c0012983:	83 ec 14             	sub    esp,0x14
c0012986:	6a 0c                	push   0xc
c0012988:	e8 0a 6e ff ff       	call   c0009797 <malloc>
c001298d:	89 c3                	mov    ebx,eax
c001298f:	58                   	pop    eax
c0012990:	5a                   	pop    edx
c0012991:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c0012997:	53                   	push   ebx
c0012998:	e8 71 fe ff ff       	call   c001280e <EnvVarContainer::EnvVarContainer(Process*)>
c001299d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129a0:	89 1d d8 8e 02 c0    	mov    DWORD PTR ds:0xc0028ed8,ebx
c00129a6:	e8 47 fe ff ff       	call   c00127f2 <EnvVarContainer::__loadSystem()>
c00129ab:	83 c4 18             	add    esp,0x18
c00129ae:	5b                   	pop    ebx
c00129af:	c3                   	ret    

c00129b0 <Krnl::loadUserEnv()>:
c00129b0:	53                   	push   ebx
c00129b1:	83 ec 14             	sub    esp,0x14
c00129b4:	6a 0c                	push   0xc
c00129b6:	e8 dc 6d ff ff       	call   c0009797 <malloc>
c00129bb:	89 c3                	mov    ebx,eax
c00129bd:	58                   	pop    eax
c00129be:	5a                   	pop    edx
c00129bf:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c00129c5:	53                   	push   ebx
c00129c6:	e8 43 fe ff ff       	call   c001280e <EnvVarContainer::EnvVarContainer(Process*)>
c00129cb:	89 1d d4 8e 02 c0    	mov    DWORD PTR ds:0xc0028ed4,ebx
c00129d1:	83 c4 18             	add    esp,0x18
c00129d4:	5b                   	pop    ebx
c00129d5:	c3                   	ret    

c00129d6 <Krnl::flushEnv()>:
c00129d6:	c3                   	ret    

c00129d7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00129d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129db:	8b 15 d4 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028ed4
c00129e1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00129e7:	a1 d8 8e 02 c0       	mov    eax,ds:0xc0028ed8
c00129ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ee:	03 01                	add    eax,DWORD PTR [ecx]
c00129f0:	85 d2                	test   edx,edx
c00129f2:	74 02                	je     c00129f6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00129f4:	03 02                	add    eax,DWORD PTR [edx]
c00129f6:	c3                   	ret    

c00129f7 <Krnl::getProcessEnvPair(Process*, int)>:
c00129f7:	57                   	push   edi
c00129f8:	56                   	push   esi
c00129f9:	8b 35 d4 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028ed4
c00129ff:	53                   	push   ebx
c0012a00:	85 f6                	test   esi,esi
c0012a02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012a06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a0a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0012a10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a14:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a16:	75 16                	jne    c0012a2e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0012a18:	39 c2                	cmp    edx,eax
c0012a1a:	7c 16                	jl     c0012a32 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012a1c:	8b 0d d8 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ed8
c0012a22:	8b 31                	mov    esi,DWORD PTR [ecx]
c0012a24:	01 c6                	add    esi,eax
c0012a26:	39 d6                	cmp    esi,edx
c0012a28:	7e 3c                	jle    c0012a66 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012a2a:	29 c2                	sub    edx,eax
c0012a2c:	eb 04                	jmp    c0012a32 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012a2e:	39 c2                	cmp    edx,eax
c0012a30:	7d 05                	jge    c0012a37 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0012a32:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0012a35:	eb 20                	jmp    c0012a57 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0012a37:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012a39:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0012a3c:	39 d1                	cmp    ecx,edx
c0012a3e:	7e 04                	jle    c0012a44 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0012a40:	29 c2                	sub    edx,eax
c0012a42:	eb 10                	jmp    c0012a54 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0012a44:	8b 35 d8 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028ed8
c0012a4a:	03 0e                	add    ecx,DWORD PTR [esi]
c0012a4c:	39 d1                	cmp    ecx,edx
c0012a4e:	7e 16                	jle    c0012a66 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012a50:	29 c2                	sub    edx,eax
c0012a52:	29 fa                	sub    edx,edi
c0012a54:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012a57:	8d 14 d0             	lea    edx,[eax+edx*8]
c0012a5a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a5c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012a5f:	89 03                	mov    DWORD PTR [ebx],eax
c0012a61:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0012a64:	eb 1d                	jmp    c0012a83 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0012a66:	83 ec 0c             	sub    esp,0xc
c0012a69:	68 b3 40 02 c0       	push   0xc00240b3
c0012a6e:	e8 18 00 00 00       	call   c0012a8b <Krnl::panic(char const*)>
c0012a73:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0012a79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0012a80:	83 c4 10             	add    esp,0x10
c0012a83:	89 d8                	mov    eax,ebx
c0012a85:	5b                   	pop    ebx
c0012a86:	5e                   	pop    esi
c0012a87:	5f                   	pop    edi
c0012a88:	c2 04 00             	ret    0x4

c0012a8b <Krnl::panic(char const*)>:
c0012a8b:	53                   	push   ebx
c0012a8c:	83 ec 10             	sub    esp,0x10
c0012a8f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012a93:	fa                   	cli    
c0012a94:	c6 05 e4 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028ee4,0x1
c0012a9b:	53                   	push   ebx
c0012a9c:	68 cd 40 02 c0       	push   0xc00240cd
c0012aa1:	e8 7b 9c ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0012aa6:	83 c4 0c             	add    esp,0xc
c0012aa9:	6a 01                	push   0x1
c0012aab:	6a 0f                	push   0xf
c0012aad:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012ab3:	e8 0a 79 ff ff       	call   c000a3c2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012ab8:	59                   	pop    ecx
c0012ab9:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012abf:	e8 2c 7b ff ff       	call   c000a5f0 <VgaText::clearScreen()>
c0012ac4:	58                   	pop    eax
c0012ac5:	5a                   	pop    edx
c0012ac6:	68 24 41 02 c0       	push   0xc0024124
c0012acb:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012ad1:	e8 24 79 ff ff       	call   c000a3fa <VgaText::setTitle(char*)>
c0012ad6:	83 c4 0c             	add    esp,0xc
c0012ad9:	6a 01                	push   0x1
c0012adb:	6a 0f                	push   0xf
c0012add:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012ae3:	e8 da 78 ff ff       	call   c000a3c2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012ae8:	59                   	pop    ecx
c0012ae9:	58                   	pop    eax
c0012aea:	68 e6 40 02 c0       	push   0xc00240e6
c0012aef:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012af5:	e8 ea 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012afa:	58                   	pop    eax
c0012afb:	5a                   	pop    edx
c0012afc:	68 70 41 02 c0       	push   0xc0024170
c0012b01:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012b07:	e8 d8 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012b0c:	59                   	pop    ecx
c0012b0d:	58                   	pop    eax
c0012b0e:	68 02 41 02 c0       	push   0xc0024102
c0012b13:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012b19:	e8 c6 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012b1e:	58                   	pop    eax
c0012b1f:	5a                   	pop    edx
c0012b20:	53                   	push   ebx
c0012b21:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012b27:	e8 b8 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012b2c:	59                   	pop    ecx
c0012b2d:	5b                   	pop    ebx
c0012b2e:	68 22 41 02 c0       	push   0xc0024122
c0012b33:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012b39:	e8 a6 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012b3e:	58                   	pop    eax
c0012b3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b43:	e8 77 2b 00 00       	call   c00156bf <Thr::getDriverNameFromAddress(unsigned long)>
c0012b48:	83 c4 10             	add    esp,0x10
c0012b4b:	85 c0                	test   eax,eax
c0012b4d:	0f 84 36 01 00 00    	je     c0012c89 <Krnl::panic(char const*)+0x1fe>
c0012b53:	83 ec 08             	sub    esp,0x8
c0012b56:	89 c3                	mov    ebx,eax
c0012b58:	68 ac 41 02 c0       	push   0xc00241ac
c0012b5d:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012b63:	e8 7c 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012b68:	59                   	pop    ecx
c0012b69:	58                   	pop    eax
c0012b6a:	68 02 41 02 c0       	push   0xc0024102
c0012b6f:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012b75:	e8 6a 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012b7a:	58                   	pop    eax
c0012b7b:	5a                   	pop    edx
c0012b7c:	53                   	push   ebx
c0012b7d:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012b83:	e8 5c 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012b88:	83 c4 10             	add    esp,0x10
c0012b8b:	83 ec 08             	sub    esp,0x8
c0012b8e:	68 21 41 02 c0       	push   0xc0024121
c0012b93:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012b99:	e8 46 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012b9e:	58                   	pop    eax
c0012b9f:	5a                   	pop    edx
c0012ba0:	68 04 42 02 c0       	push   0xc0024204
c0012ba5:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012bab:	e8 34 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012bb0:	59                   	pop    ecx
c0012bb1:	5b                   	pop    ebx
c0012bb2:	68 44 42 02 c0       	push   0xc0024244
c0012bb7:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012bbd:	e8 22 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012bc2:	58                   	pop    eax
c0012bc3:	5a                   	pop    edx
c0012bc4:	68 0d 41 02 c0       	push   0xc002410d
c0012bc9:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012bcf:	e8 10 7d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012bd4:	59                   	pop    ecx
c0012bd5:	5b                   	pop    ebx
c0012bd6:	68 88 42 02 c0       	push   0xc0024288
c0012bdb:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012be1:	e8 fe 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012be6:	58                   	pop    eax
c0012be7:	5a                   	pop    edx
c0012be8:	68 25 41 02 c0       	push   0xc0024125
c0012bed:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012bf3:	e8 ec 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012bf8:	0f 20 c0             	mov    eax,cr0
c0012bfb:	59                   	pop    ecx
c0012bfc:	5b                   	pop    ebx
c0012bfd:	50                   	push   eax
c0012bfe:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c04:	e8 95 7c ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0012c09:	58                   	pop    eax
c0012c0a:	5a                   	pop    edx
c0012c0b:	68 2f 41 02 c0       	push   0xc002412f
c0012c10:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c16:	e8 c9 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012c1b:	0f 20 d0             	mov    eax,cr2
c0012c1e:	59                   	pop    ecx
c0012c1f:	5b                   	pop    ebx
c0012c20:	50                   	push   eax
c0012c21:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c27:	e8 72 7c ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0012c2c:	58                   	pop    eax
c0012c2d:	5a                   	pop    edx
c0012c2e:	68 39 41 02 c0       	push   0xc0024139
c0012c33:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c39:	e8 a6 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012c3e:	0f 20 d8             	mov    eax,cr3
c0012c41:	59                   	pop    ecx
c0012c42:	5b                   	pop    ebx
c0012c43:	50                   	push   eax
c0012c44:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c4a:	e8 4f 7c ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0012c4f:	58                   	pop    eax
c0012c50:	5a                   	pop    edx
c0012c51:	68 4c 41 02 c0       	push   0xc002414c
c0012c56:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c5c:	e8 83 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012c61:	0f 20 e0             	mov    eax,cr4
c0012c64:	59                   	pop    ecx
c0012c65:	5b                   	pop    ebx
c0012c66:	50                   	push   eax
c0012c67:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c6d:	e8 2c 7c ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0012c72:	58                   	pop    eax
c0012c73:	5a                   	pop    edx
c0012c74:	68 56 41 02 c0       	push   0xc0024156
c0012c79:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c7f:	e8 60 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012c84:	83 c4 10             	add    esp,0x10
c0012c87:	eb fe                	jmp    c0012c87 <Krnl::panic(char const*)+0x1fc>
c0012c89:	51                   	push   ecx
c0012c8a:	51                   	push   ecx
c0012c8b:	68 d8 41 02 c0       	push   0xc00241d8
c0012c90:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012c96:	e8 49 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012c9b:	5b                   	pop    ebx
c0012c9c:	58                   	pop    eax
c0012c9d:	68 02 41 02 c0       	push   0xc0024102
c0012ca2:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012ca8:	e8 37 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012cad:	58                   	pop    eax
c0012cae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cb3:	5a                   	pop    edx
c0012cb4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012cb7:	83 c0 0c             	add    eax,0xc
c0012cba:	50                   	push   eax
c0012cbb:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0012cc1:	e8 1e 7c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0012cc6:	83 c4 10             	add    esp,0x10
c0012cc9:	e9 bd fe ff ff       	jmp    c0012b8b <Krnl::panic(char const*)+0x100>

c0012cce <Krnl::powerThread(void*)>:
c0012cce:	53                   	push   ebx
c0012ccf:	83 ec 08             	sub    esp,0x8
c0012cd2:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0012cd7:	48                   	dec    eax
c0012cd8:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0012cdd:	75 01                	jne    c0012ce0 <Krnl::powerThread(void*)+0x12>
c0012cdf:	fb                   	sti    
c0012ce0:	52                   	push   edx
c0012ce1:	52                   	push   edx
c0012ce2:	ff 35 44 8f 02 c0    	push   DWORD PTR ds:0xc0028f44
c0012ce8:	68 ae 42 02 c0       	push   0xc00242ae
c0012ced:	e8 2f 9a ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0012cf2:	59                   	pop    ecx
c0012cf3:	8b 1d 34 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f34
c0012cf9:	58                   	pop    eax
c0012cfa:	c6 05 00 8f 02 c0 00 	mov    BYTE PTR ds:0xc0028f00,0x0
c0012d01:	53                   	push   ebx
c0012d02:	68 b8 42 02 c0       	push   0xc00242b8
c0012d07:	e8 15 9a ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0012d0c:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0012d13:	e8 e0 36 00 00       	call   c00163f8 <sleep(unsigned int)>
c0012d18:	a1 44 8f 02 c0       	mov    eax,ds:0xc0028f44
c0012d1d:	83 c4 10             	add    esp,0x10
c0012d20:	83 c0 0a             	add    eax,0xa
c0012d23:	85 db                	test   ebx,ebx
c0012d25:	a3 44 8f 02 c0       	mov    ds:0xc0028f44,eax
c0012d2a:	74 b4                	je     c0012ce0 <Krnl::powerThread(void*)+0x12>
c0012d2c:	39 d8                	cmp    eax,ebx
c0012d2e:	7e b0                	jle    c0012ce0 <Krnl::powerThread(void*)+0x12>
c0012d30:	83 ec 0c             	sub    esp,0xc
c0012d33:	68 d0 42 02 c0       	push   0xc00242d0
c0012d38:	e8 e4 99 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0012d3d:	58                   	pop    eax
c0012d3e:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0012d44:	e8 99 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012d49:	83 c4 10             	add    esp,0x10
c0012d4c:	eb 92                	jmp    c0012ce0 <Krnl::powerThread(void*)+0x12>

c0012d4e <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0012d4e:	57                   	push   edi
c0012d4f:	b9 09 00 00 00       	mov    ecx,0x9
c0012d54:	56                   	push   esi
c0012d55:	bf 20 8f 02 c0       	mov    edi,0xc0028f20
c0012d5a:	fc                   	cld    
c0012d5b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012d5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012d61:	5e                   	pop    esi
c0012d62:	5f                   	pop    edi
c0012d63:	c3                   	ret    

c0012d64 <Krnl::userIOReceived()>:
c0012d64:	c7 05 44 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f44,0x0
c0012d6e:	c3                   	ret    

c0012d6f <Krnl::handlePowerButton()>:
c0012d6f:	83 ec 0c             	sub    esp,0xc
c0012d72:	a1 20 8f 02 c0       	mov    eax,ds:0xc0028f20
c0012d77:	83 f8 02             	cmp    eax,0x2
c0012d7a:	75 10                	jne    c0012d8c <Krnl::handlePowerButton()+0x1d>
c0012d7c:	83 ec 0c             	sub    esp,0xc
c0012d7f:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0012d85:	e8 28 60 ff ff       	call   c0008db2 <Computer::shutdown()>
c0012d8a:	eb 11                	jmp    c0012d9d <Krnl::handlePowerButton()+0x2e>
c0012d8c:	48                   	dec    eax
c0012d8d:	75 11                	jne    c0012da0 <Krnl::handlePowerButton()+0x31>
c0012d8f:	83 ec 0c             	sub    esp,0xc
c0012d92:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0012d98:	e8 45 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012d9d:	83 c4 10             	add    esp,0x10
c0012da0:	83 c4 0c             	add    esp,0xc
c0012da3:	c3                   	ret    

c0012da4 <Krnl::handleSleepButton()>:
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	a1 24 8f 02 c0       	mov    eax,ds:0xc0028f24
c0012dac:	83 f8 02             	cmp    eax,0x2
c0012daf:	75 10                	jne    c0012dc1 <Krnl::handleSleepButton()+0x1d>
c0012db1:	83 ec 0c             	sub    esp,0xc
c0012db4:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0012dba:	e8 f3 5f ff ff       	call   c0008db2 <Computer::shutdown()>
c0012dbf:	eb 11                	jmp    c0012dd2 <Krnl::handleSleepButton()+0x2e>
c0012dc1:	48                   	dec    eax
c0012dc2:	75 11                	jne    c0012dd5 <Krnl::handleSleepButton()+0x31>
c0012dc4:	83 ec 0c             	sub    esp,0xc
c0012dc7:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0012dcd:	e8 10 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	83 c4 0c             	add    esp,0xc
c0012dd8:	c3                   	ret    

c0012dd9 <Krnl::setupPowerManager()>:
c0012dd9:	83 ec 0c             	sub    esp,0xc
c0012ddc:	c7 05 44 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f44,0x0
c0012de6:	68 f0 00 00 00       	push   0xf0
c0012deb:	c6 05 00 8f 02 c0 00 	mov    BYTE PTR ds:0xc0028f00,0x0
c0012df2:	6a 00                	push   0x0
c0012df4:	68 ce 2c 01 c0       	push   0xc0012cce
c0012df9:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c0012dff:	e8 d0 30 00 00       	call   c0015ed4 <Process::createThread(void (*)(void*), void*, int)>
c0012e04:	c7 05 20 8f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028f20,0x2
c0012e0e:	c7 05 24 8f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028f24,0x1
c0012e18:	c7 05 28 8f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028f28,0x3
c0012e22:	c7 05 2c 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f2c,0x0
c0012e2c:	c7 05 38 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f38,0x0
c0012e36:	c7 05 30 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f30,0x0
c0012e40:	c7 05 3c 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028f3c,0x0
c0012e4a:	c7 05 34 8f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028f34,0x3c
c0012e54:	c7 05 40 8f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028f40,0x3c
c0012e5e:	83 c4 1c             	add    esp,0x1c
c0012e61:	c3                   	ret    

c0012e62 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012e62:	55                   	push   ebp
c0012e63:	57                   	push   edi
c0012e64:	56                   	push   esi
c0012e65:	53                   	push   ebx
c0012e66:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012e6c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012e73:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012e75:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012e78:	80 fb 40             	cmp    bl,0x40
c0012e7b:	75 1b                	jne    c0012e98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0012e7d:	8a 16                	mov    dl,BYTE PTR [esi]
c0012e7f:	84 d2                	test   dl,dl
c0012e81:	0f 84 f1 00 00 00    	je     c0012f78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012e87:	8d 46 01             	lea    eax,[esi+0x1]
c0012e8a:	80 fa 3a             	cmp    dl,0x3a
c0012e8d:	74 04                	je     c0012e93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0012e8f:	89 c6                	mov    esi,eax
c0012e91:	eb ea                	jmp    c0012e7d <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012e93:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e96:	89 c6                	mov    esi,eax
c0012e98:	50                   	push   eax
c0012e99:	6a 40                	push   0x40
c0012e9b:	6a 00                	push   0x0
c0012e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ea1:	50                   	push   eax
c0012ea2:	e8 01 d6 fe ff       	call   c00004a8 <memset>
c0012ea7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012eae:	31 c0                	xor    eax,eax
c0012eb0:	83 c4 10             	add    esp,0x10
c0012eb3:	8a 0f                	mov    cl,BYTE PTR [edi]
c0012eb5:	84 c9                	test   cl,cl
c0012eb7:	0f 84 bb 00 00 00    	je     c0012f78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012ebd:	3d c7 00 00 00       	cmp    eax,0xc7
c0012ec2:	0f 8f b0 00 00 00    	jg     c0012f78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012ec8:	80 f9 0a             	cmp    cl,0xa
c0012ecb:	0f 85 98 00 00 00    	jne    c0012f69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0012ed1:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012ed6:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012eda:	a8 df                	test   al,0xdf
c0012edc:	0f 94 c1             	sete   cl
c0012edf:	3c 23                	cmp    al,0x23
c0012ee1:	0f 94 c2             	sete   dl
c0012ee4:	08 d1                	or     cl,dl
c0012ee6:	75 4a                	jne    c0012f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012ee8:	8d 50 f7             	lea    edx,[eax-0x9]
c0012eeb:	80 fa 01             	cmp    dl,0x1
c0012eee:	76 42                	jbe    c0012f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012ef0:	3c 5b                	cmp    al,0x5b
c0012ef2:	75 42                	jne    c0012f36 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012ef4:	80 fb 40             	cmp    bl,0x40
c0012ef7:	75 39                	jne    c0012f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012ef9:	83 ec 0c             	sub    esp,0xc
c0012efc:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012f00:	52                   	push   edx
c0012f01:	e8 be d5 fe ff       	call   c00004c4 <strlen>
c0012f06:	83 c4 10             	add    esp,0x10
c0012f09:	83 f8 3f             	cmp    eax,0x3f
c0012f0c:	77 6a                	ja     c0012f78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012f0e:	50                   	push   eax
c0012f0f:	50                   	push   eax
c0012f10:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012f14:	52                   	push   edx
c0012f15:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012f19:	52                   	push   edx
c0012f1a:	e8 45 d6 fe ff       	call   c0000564 <strcpy>
c0012f1f:	58                   	pop    eax
c0012f20:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012f24:	52                   	push   edx
c0012f25:	e8 9a d5 fe ff       	call   c00004c4 <strlen>
c0012f2a:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	31 d2                	xor    edx,edx
c0012f34:	eb 3a                	jmp    c0012f70 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0012f36:	80 fb 40             	cmp    bl,0x40
c0012f39:	74 06                	je     c0012f41 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0012f3b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012f3f:	eb 20                	jmp    c0012f61 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012f41:	50                   	push   eax
c0012f42:	50                   	push   eax
c0012f43:	55                   	push   ebp
c0012f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f48:	50                   	push   eax
c0012f49:	e8 a2 d6 fe ff       	call   c00005f0 <strcmp>
c0012f4e:	83 c4 10             	add    esp,0x10
c0012f51:	85 c0                	test   eax,eax
c0012f53:	75 dd                	jne    c0012f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012f55:	eb e4                	jmp    c0012f3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0012f57:	8d 50 01             	lea    edx,[eax+0x1]
c0012f5a:	80 f9 3d             	cmp    cl,0x3d
c0012f5d:	74 1d                	je     c0012f7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012f5f:	89 d0                	mov    eax,edx
c0012f61:	8a 08                	mov    cl,BYTE PTR [eax]
c0012f63:	84 c9                	test   cl,cl
c0012f65:	75 f0                	jne    c0012f57 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0012f67:	eb 0f                	jmp    c0012f78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012f69:	8d 50 01             	lea    edx,[eax+0x1]
c0012f6c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012f70:	47                   	inc    edi
c0012f71:	89 d0                	mov    eax,edx
c0012f73:	e9 3b ff ff ff       	jmp    c0012eb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0012f78:	31 c0                	xor    eax,eax
c0012f7a:	eb 33                	jmp    c0012faf <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0012f7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f80:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f83:	50                   	push   eax
c0012f84:	50                   	push   eax
c0012f85:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012f89:	50                   	push   eax
c0012f8a:	56                   	push   esi
c0012f8b:	e8 60 d6 fe ff       	call   c00005f0 <strcmp>
c0012f90:	83 c4 10             	add    esp,0x10
c0012f93:	85 c0                	test   eax,eax
c0012f95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f99:	75 97                	jne    c0012f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012f9b:	51                   	push   ecx
c0012f9c:	51                   	push   ecx
c0012f9d:	52                   	push   edx
c0012f9e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012fa5:	e8 ba d5 fe ff       	call   c0000564 <strcpy>
c0012faa:	83 c4 10             	add    esp,0x10
c0012fad:	b0 01                	mov    al,0x1
c0012faf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fb5:	5b                   	pop    ebx
c0012fb6:	5e                   	pop    esi
c0012fb7:	5f                   	pop    edi
c0012fb8:	5d                   	pop    ebp
c0012fb9:	c3                   	ret    

c0012fba <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012fba:	57                   	push   edi
c0012fbb:	56                   	push   esi
c0012fbc:	53                   	push   ebx
c0012fbd:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012fc3:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012fca:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012fd1:	53                   	push   ebx
c0012fd2:	e8 ed d4 fe ff       	call   c00004c4 <strlen>
c0012fd7:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fda:	89 c7                	mov    edi,eax
c0012fdc:	e8 e3 d4 fe ff       	call   c00004c4 <strlen>
c0012fe1:	83 c4 10             	add    esp,0x10
c0012fe4:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012fe8:	3d ff 00 00 00       	cmp    eax,0xff
c0012fed:	0f 87 d3 00 00 00    	ja     c00130c6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012ff3:	57                   	push   edi
c0012ff4:	57                   	push   edi
c0012ff5:	56                   	push   esi
c0012ff6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012ffa:	56                   	push   esi
c0012ffb:	e8 64 d5 fe ff       	call   c0000564 <strcpy>
c0013000:	58                   	pop    eax
c0013001:	5a                   	pop    edx
c0013002:	68 33 46 02 c0       	push   0xc0024633
c0013007:	56                   	push   esi
c0013008:	e8 97 d6 fe ff       	call   c00006a4 <strcat>
c001300d:	59                   	pop    ecx
c001300e:	5f                   	pop    edi
c001300f:	53                   	push   ebx
c0013010:	56                   	push   esi
c0013011:	e8 8e d6 fe ff       	call   c00006a4 <strcat>
c0013016:	58                   	pop    eax
c0013017:	5a                   	pop    edx
c0013018:	68 dd 42 02 c0       	push   0xc00242dd
c001301d:	56                   	push   esi
c001301e:	e8 81 d6 fe ff       	call   c00006a4 <strcat>
c0013023:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001302a:	e8 68 67 ff ff       	call   c0009797 <malloc>
c001302f:	83 c4 0c             	add    esp,0xc
c0013032:	89 c3                	mov    ebx,eax
c0013034:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c001303a:	56                   	push   esi
c001303b:	50                   	push   eax
c001303c:	e8 4b 9c ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0013041:	83 c4 10             	add    esp,0x10
c0013044:	85 db                	test   ebx,ebx
c0013046:	74 7e                	je     c00130c6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013048:	51                   	push   ecx
c0013049:	51                   	push   ecx
c001304a:	6a 01                	push   0x1
c001304c:	53                   	push   ebx
c001304d:	e8 14 9d ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	85 c0                	test   eax,eax
c0013057:	74 08                	je     c0013061 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013059:	83 ec 0c             	sub    esp,0xc
c001305c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001305e:	53                   	push   ebx
c001305f:	eb 5f                	jmp    c00130c0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013061:	52                   	push   edx
c0013062:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013066:	50                   	push   eax
c0013067:	8d 44 24 20          	lea    eax,[esp+0x20]
c001306b:	50                   	push   eax
c001306c:	53                   	push   ebx
c001306d:	e8 a0 9f ff ff       	call   c000d012 <File::stat(unsigned long long*, bool*)>
c0013072:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	89 c1                	mov    ecx,eax
c001307b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001307f:	74 31                	je     c00130b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013081:	83 ec 0c             	sub    esp,0xc
c0013084:	50                   	push   eax
c0013085:	e8 0d 67 ff ff       	call   c0009797 <malloc>
c001308a:	89 c6                	mov    esi,eax
c001308c:	58                   	pop    eax
c001308d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001308f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013093:	52                   	push   edx
c0013094:	56                   	push   esi
c0013095:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013099:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001309d:	53                   	push   ebx
c001309e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00130a1:	83 c4 20             	add    esp,0x20
c00130a4:	85 c0                	test   eax,eax
c00130a6:	75 0a                	jne    c00130b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00130a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130ac:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00130b0:	74 18                	je     c00130ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00130b2:	83 ec 0c             	sub    esp,0xc
c00130b5:	53                   	push   ebx
c00130b6:	e8 09 9d ff ff       	call   c000cdc4 <File::close()>
c00130bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00130c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130c3:	83 c4 10             	add    esp,0x10
c00130c6:	31 c0                	xor    eax,eax
c00130c8:	eb 3b                	jmp    c0013105 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	53                   	push   ebx
c00130ce:	e8 f1 9c ff ff       	call   c000cdc4 <File::close()>
c00130d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00130d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130db:	83 c4 0c             	add    esp,0xc
c00130de:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00130e5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00130ec:	56                   	push   esi
c00130ed:	e8 70 fd ff ff       	call   c0012e62 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00130f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00130f5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00130f9:	e8 a9 66 ff ff       	call   c00097a7 <free>
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013105:	81 c4 20 01 00 00    	add    esp,0x120
c001310b:	5b                   	pop    ebx
c001310c:	5e                   	pop    esi
c001310d:	5f                   	pop    edi
c001310e:	c3                   	ret    

c001310f <Reg::getLine(char*, char*, char*)>:
c001310f:	57                   	push   edi
c0013110:	56                   	push   esi
c0013111:	53                   	push   ebx
c0013112:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013116:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001311a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001311e:	57                   	push   edi
c001311f:	56                   	push   esi
c0013120:	53                   	push   ebx
c0013121:	68 e2 42 02 c0       	push   0xc00242e2
c0013126:	e8 8f fe ff ff       	call   c0012fba <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001312b:	83 c4 10             	add    esp,0x10
c001312e:	84 c0                	test   al,al
c0013130:	75 10                	jne    c0013142 <Reg::getLine(char*, char*, char*)+0x33>
c0013132:	57                   	push   edi
c0013133:	56                   	push   esi
c0013134:	53                   	push   ebx
c0013135:	68 07 43 02 c0       	push   0xc0024307
c001313a:	e8 7b fe ff ff       	call   c0012fba <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	5b                   	pop    ebx
c0013143:	5e                   	pop    esi
c0013144:	5f                   	pop    edi
c0013145:	c3                   	ret    

c0013146 <Reg::readInt(char*, char*, int*)>:
c0013146:	55                   	push   ebp
c0013147:	57                   	push   edi
c0013148:	56                   	push   esi
c0013149:	53                   	push   ebx
c001314a:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013150:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0013154:	57                   	push   edi
c0013155:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001315c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013163:	e8 a7 ff ff ff       	call   c001310f <Reg::getLine(char*, char*, char*)>
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	84 c0                	test   al,al
c001316d:	0f 84 b3 00 00 00    	je     c0013226 <Reg::readInt(char*, char*, int*)+0xe0>
c0013173:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0013177:	80 fa 2b             	cmp    dl,0x2b
c001317a:	74 0c                	je     c0013188 <Reg::readInt(char*, char*, int*)+0x42>
c001317c:	80 fa 2d             	cmp    dl,0x2d
c001317f:	75 0e                	jne    c001318f <Reg::readInt(char*, char*, int*)+0x49>
c0013181:	ba 01 00 00 00       	mov    edx,0x1
c0013186:	eb 0b                	jmp    c0013193 <Reg::readInt(char*, char*, int*)+0x4d>
c0013188:	ba 01 00 00 00       	mov    edx,0x1
c001318d:	eb 02                	jmp    c0013191 <Reg::readInt(char*, char*, int*)+0x4b>
c001318f:	31 d2                	xor    edx,edx
c0013191:	31 c0                	xor    eax,eax
c0013193:	be 0a 00 00 00       	mov    esi,0xa
c0013198:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001319d:	75 20                	jne    c00131bf <Reg::readInt(char*, char*, int*)+0x79>
c001319f:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00131a3:	80 f9 78             	cmp    cl,0x78
c00131a6:	75 0a                	jne    c00131b2 <Reg::readInt(char*, char*, int*)+0x6c>
c00131a8:	83 c2 02             	add    edx,0x2
c00131ab:	be 10 00 00 00       	mov    esi,0x10
c00131b0:	eb 0d                	jmp    c00131bf <Reg::readInt(char*, char*, int*)+0x79>
c00131b2:	80 f9 62             	cmp    cl,0x62
c00131b5:	75 08                	jne    c00131bf <Reg::readInt(char*, char*, int*)+0x79>
c00131b7:	83 c2 02             	add    edx,0x2
c00131ba:	be 02 00 00 00       	mov    esi,0x2
c00131bf:	01 d7                	add    edi,edx
c00131c1:	31 d2                	xor    edx,edx
c00131c3:	8a 1f                	mov    bl,BYTE PTR [edi]
c00131c5:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00131c9:	80 fb 0d             	cmp    bl,0xd
c00131cc:	0f 94 c3             	sete   bl
c00131cf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131d4:	0f 94 c1             	sete   cl
c00131d7:	08 cb                	or     bl,cl
c00131d9:	75 3a                	jne    c0013215 <Reg::readInt(char*, char*, int*)+0xcf>
c00131db:	0f af d6             	imul   edx,esi
c00131de:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00131e3:	83 fe 10             	cmp    esi,0x10
c00131e6:	75 26                	jne    c001320e <Reg::readInt(char*, char*, int*)+0xc8>
c00131e8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00131ec:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00131ef:	89 e9                	mov    ecx,ebp
c00131f1:	80 f9 05             	cmp    cl,0x5
c00131f4:	77 06                	ja     c00131fc <Reg::readInt(char*, char*, int*)+0xb6>
c00131f6:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00131fa:	eb 16                	jmp    c0013212 <Reg::readInt(char*, char*, int*)+0xcc>
c00131fc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0013200:	83 e9 61             	sub    ecx,0x61
c0013203:	80 f9 05             	cmp    cl,0x5
c0013206:	77 06                	ja     c001320e <Reg::readInt(char*, char*, int*)+0xc8>
c0013208:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001320c:	eb 04                	jmp    c0013212 <Reg::readInt(char*, char*, int*)+0xcc>
c001320e:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0013212:	47                   	inc    edi
c0013213:	eb ae                	jmp    c00131c3 <Reg::readInt(char*, char*, int*)+0x7d>
c0013215:	84 c0                	test   al,al
c0013217:	74 02                	je     c001321b <Reg::readInt(char*, char*, int*)+0xd5>
c0013219:	f7 da                	neg    edx
c001321b:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013222:	89 10                	mov    DWORD PTR [eax],edx
c0013224:	88 d8                	mov    al,bl
c0013226:	81 c4 ec 00 00 00    	add    esp,0xec
c001322c:	5b                   	pop    ebx
c001322d:	5e                   	pop    esi
c001322e:	5f                   	pop    edi
c001322f:	5d                   	pop    ebp
c0013230:	c3                   	ret    

c0013231 <Reg::readString(char*, char*, char*, int)>:
c0013231:	57                   	push   edi
c0013232:	56                   	push   esi
c0013233:	53                   	push   ebx
c0013234:	81 ec d4 00 00 00    	sub    esp,0xd4
c001323a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013241:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013245:	57                   	push   edi
c0013246:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001324d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013254:	e8 b6 fe ff ff       	call   c001310f <Reg::getLine(char*, char*, char*)>
c0013259:	83 c4 10             	add    esp,0x10
c001325c:	89 c6                	mov    esi,eax
c001325e:	84 c0                	test   al,al
c0013260:	74 44                	je     c00132a6 <Reg::readString(char*, char*, char*, int)+0x75>
c0013262:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013269:	31 c0                	xor    eax,eax
c001326b:	4a                   	dec    edx
c001326c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001326f:	84 c9                	test   cl,cl
c0013271:	74 0f                	je     c0013282 <Reg::readString(char*, char*, char*, int)+0x51>
c0013273:	39 c2                	cmp    edx,eax
c0013275:	7e 0b                	jle    c0013282 <Reg::readString(char*, char*, char*, int)+0x51>
c0013277:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001327a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001327f:	40                   	inc    eax
c0013280:	eb ea                	jmp    c001326c <Reg::readString(char*, char*, char*, int)+0x3b>
c0013282:	83 ec 0c             	sub    esp,0xc
c0013285:	53                   	push   ebx
c0013286:	e8 39 d2 fe ff       	call   c00004c4 <strlen>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013293:	75 11                	jne    c00132a6 <Reg::readString(char*, char*, char*, int)+0x75>
c0013295:	83 ec 0c             	sub    esp,0xc
c0013298:	53                   	push   ebx
c0013299:	e8 26 d2 fe ff       	call   c00004c4 <strlen>
c001329e:	83 c4 10             	add    esp,0x10
c00132a1:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00132a6:	81 c4 d0 00 00 00    	add    esp,0xd0
c00132ac:	89 f0                	mov    eax,esi
c00132ae:	5b                   	pop    ebx
c00132af:	5e                   	pop    esi
c00132b0:	5f                   	pop    edi
c00132b1:	c3                   	ret    

c00132b2 <Reg::readBool(char*, char*, bool*)>:
c00132b2:	83 ec 20             	sub    esp,0x20
c00132b5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00132b9:	50                   	push   eax
c00132ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132c2:	e8 7f fe ff ff       	call   c0013146 <Reg::readInt(char*, char*, int*)>
c00132c7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00132cc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00132d0:	0f 95 02             	setne  BYTE PTR [edx]
c00132d3:	83 c4 2c             	add    esp,0x2c
c00132d6:	c3                   	ret    

c00132d7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00132d7:	53                   	push   ebx
c00132d8:	83 ec 1c             	sub    esp,0x1c
c00132db:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00132df:	8d 44 24 13          	lea    eax,[esp+0x13]
c00132e3:	50                   	push   eax
c00132e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132ec:	e8 c1 ff ff ff       	call   c00132b2 <Reg::readBool(char*, char*, bool*)>
c00132f1:	83 c4 10             	add    esp,0x10
c00132f4:	84 c0                	test   al,al
c00132f6:	74 04                	je     c00132fc <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00132f8:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00132fc:	88 d8                	mov    al,bl
c00132fe:	83 c4 18             	add    esp,0x18
c0013301:	5b                   	pop    ebx
c0013302:	c3                   	ret    

c0013303 <Reg::readIntWithDefault(char*, char*, int)>:
c0013303:	53                   	push   ebx
c0013304:	83 ec 1c             	sub    esp,0x1c
c0013307:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001330b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001330f:	50                   	push   eax
c0013310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013314:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013318:	e8 29 fe ff ff       	call   c0013146 <Reg::readInt(char*, char*, int*)>
c001331d:	83 c4 10             	add    esp,0x10
c0013320:	84 c0                	test   al,al
c0013322:	74 04                	je     c0013328 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013324:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013328:	89 d8                	mov    eax,ebx
c001332a:	83 c4 18             	add    esp,0x18
c001332d:	5b                   	pop    ebx
c001332e:	c3                   	ret    

c001332f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001332f:	57                   	push   edi
c0013330:	56                   	push   esi
c0013331:	56                   	push   esi
c0013332:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013336:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001333a:	56                   	push   esi
c001333b:	57                   	push   edi
c001333c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013344:	e8 e8 fe ff ff       	call   c0013231 <Reg::readString(char*, char*, char*, int)>
c0013349:	83 c4 10             	add    esp,0x10
c001334c:	84 c0                	test   al,al
c001334e:	75 1a                	jne    c001336a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013350:	51                   	push   ecx
c0013351:	56                   	push   esi
c0013352:	6a 00                	push   0x0
c0013354:	57                   	push   edi
c0013355:	e8 4e d1 fe ff       	call   c00004a8 <memset>
c001335a:	8d 4e ff             	lea    ecx,[esi-0x1]
c001335d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013361:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013363:	83 c4 10             	add    esp,0x10
c0013366:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001336a:	89 f8                	mov    eax,edi
c001336c:	5a                   	pop    edx
c001336d:	5e                   	pop    esi
c001336e:	5f                   	pop    edi
c001336f:	c3                   	ret    

c0013370 <Sys::eject(regs*)>:
c0013370:	83 ec 0c             	sub    esp,0xc
c0013373:	83 ca ff             	or     edx,0xffffffff
c0013376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001337d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013382:	83 e9 41             	sub    ecx,0x41
c0013385:	83 f9 19             	cmp    ecx,0x19
c0013388:	77 18                	ja     c00133a2 <Sys::eject(regs*)+0x32>
c001338a:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c0013391:	85 c9                	test   ecx,ecx
c0013393:	74 0d                	je     c00133a2 <Sys::eject(regs*)+0x32>
c0013395:	83 ec 0c             	sub    esp,0xc
c0013398:	51                   	push   ecx
c0013399:	e8 c2 ba ff ff       	call   c000ee60 <LogicalDisk::eject()>
c001339e:	83 c4 10             	add    esp,0x10
c00133a1:	99                   	cdq    
c00133a2:	83 c4 0c             	add    esp,0xc
c00133a5:	c3                   	ret    

c00133a6 <Sys::exit(regs*)>:
c00133a6:	83 ec 18             	sub    esp,0x18
c00133a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133ad:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133b0:	e8 53 36 00 00       	call   c0016a08 <terminateTask(int)>
c00133b5:	83 c8 ff             	or     eax,0xffffffff
c00133b8:	83 c4 1c             	add    esp,0x1c
c00133bb:	89 c2                	mov    edx,eax
c00133bd:	c3                   	ret    

c00133be <Sys::getCwd(regs*)>:
c00133be:	83 ec 10             	sub    esp,0x10
c00133c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133c5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00133c8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133d0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00133d3:	e8 b6 96 ff ff       	call   c000ca8e <Fs::getcwd(Process*, char*, int)>
c00133d8:	83 c4 1c             	add    esp,0x1c
c00133db:	99                   	cdq    
c00133dc:	c3                   	ret    

c00133dd <Sys::getPID(regs*)>:
c00133dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00133e7:	99                   	cdq    
c00133e8:	c3                   	ret    

c00133e9 <Sys::getRAMData(regs*)>:
c00133e9:	8b 0d 78 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026478
c00133ef:	69 05 74 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026474,0xc8
c00133f9:	99                   	cdq    
c00133fa:	f7 f9                	idiv   ecx
c00133fc:	c1 e0 18             	shl    eax,0x18
c00133ff:	09 c8                	or     eax,ecx
c0013401:	99                   	cdq    
c0013402:	c3                   	ret    

c0013403 <Sys::getVGAPtr(regs*)>:
c0013403:	55                   	push   ebp
c0013404:	57                   	push   edi
c0013405:	56                   	push   esi
c0013406:	53                   	push   ebx
c0013407:	83 ec 18             	sub    esp,0x18
c001340a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001340e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0013411:	e8 f6 30 00 00       	call   c001650c <Thr::processFromPID(int)>
c0013416:	83 c4 10             	add    esp,0x10
c0013419:	89 c1                	mov    ecx,eax
c001341b:	b8 01 00 00 00       	mov    eax,0x1
c0013420:	85 c9                	test   ecx,ecx
c0013422:	74 59                	je     c001347d <Sys::getVGAPtr(regs*)+0x7a>
c0013424:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c001342a:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001342e:	74 0c                	je     c001343c <Sys::getVGAPtr(regs*)+0x39>
c0013430:	83 ec 0c             	sub    esp,0xc
c0013433:	53                   	push   ebx
c0013434:	e8 42 71 ff ff       	call   c000a57b <setActiveTerminal(VgaText*)>
c0013439:	83 c4 10             	add    esp,0x10
c001343c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001343f:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0013442:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013447:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013449:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001344c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001344f:	81 c3 82 00 00 00    	add    ebx,0x82
c0013455:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001345b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001345e:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0013461:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013467:	50                   	push   eax
c0013468:	50                   	push   eax
c0013469:	53                   	push   ebx
c001346a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001346d:	05 a8 0f 00 00       	add    eax,0xfa8
c0013472:	50                   	push   eax
c0013473:	e8 ec d0 fe ff       	call   c0000564 <strcpy>
c0013478:	83 c4 10             	add    esp,0x10
c001347b:	31 c0                	xor    eax,eax
c001347d:	83 c4 0c             	add    esp,0xc
c0013480:	31 d2                	xor    edx,edx
c0013482:	5b                   	pop    ebx
c0013483:	5e                   	pop    esi
c0013484:	5f                   	pop    edi
c0013485:	5d                   	pop    ebp
c0013486:	c3                   	ret    

c0013487 <Sys::loadDLL(regs*)>:
c0013487:	56                   	push   esi
c0013488:	53                   	push   ebx
c0013489:	31 d2                	xor    edx,edx
c001348b:	51                   	push   ecx
c001348c:	b8 01 00 00 00       	mov    eax,0x1
c0013491:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013495:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013499:	0f 84 8c 00 00 00    	je     c001352b <Sys::loadDLL(regs*)+0xa4>
c001349f:	83 ec 0c             	sub    esp,0xc
c00134a2:	68 14 01 00 00       	push   0x114
c00134a7:	e8 eb 62 ff ff       	call   c0009797 <malloc>
c00134ac:	83 c4 0c             	add    esp,0xc
c00134af:	89 c3                	mov    ebx,eax
c00134b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134b9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134bc:	53                   	push   ebx
c00134bd:	e8 ca 97 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c00134c2:	83 c4 10             	add    esp,0x10
c00134c5:	31 d2                	xor    edx,edx
c00134c7:	b8 02 00 00 00       	mov    eax,0x2
c00134cc:	85 db                	test   ebx,ebx
c00134ce:	74 5b                	je     c001352b <Sys::loadDLL(regs*)+0xa4>
c00134d0:	83 ec 0c             	sub    esp,0xc
c00134d3:	53                   	push   ebx
c00134d4:	e8 fb 9a ff ff       	call   c000cfd4 <File::exists()>
c00134d9:	83 c4 10             	add    esp,0x10
c00134dc:	84 c0                	test   al,al
c00134de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134e0:	75 11                	jne    c00134f3 <Sys::loadDLL(regs*)+0x6c>
c00134e2:	83 ec 0c             	sub    esp,0xc
c00134e5:	53                   	push   ebx
c00134e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134e9:	83 c4 10             	add    esp,0x10
c00134ec:	b8 03 00 00 00       	mov    eax,0x3
c00134f1:	eb 36                	jmp    c0013529 <Sys::loadDLL(regs*)+0xa2>
c00134f3:	83 ec 0c             	sub    esp,0xc
c00134f6:	53                   	push   ebx
c00134f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134fa:	58                   	pop    eax
c00134fb:	5a                   	pop    edx
c00134fc:	6a 00                	push   0x0
c00134fe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013501:	e8 0a 22 00 00       	call   c0015710 <Thr::loadDLL(char const*, bool)>
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	89 c1                	mov    ecx,eax
c001350b:	31 d2                	xor    edx,edx
c001350d:	b8 04 00 00 00       	mov    eax,0x4
c0013512:	85 c9                	test   ecx,ecx
c0013514:	74 15                	je     c001352b <Sys::loadDLL(regs*)+0xa4>
c0013516:	53                   	push   ebx
c0013517:	53                   	push   ebx
c0013518:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001351e:	51                   	push   ecx
c001351f:	e8 1d 24 00 00       	call   c0015941 <Thr::executeDLL(unsigned long, void*)>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	31 c0                	xor    eax,eax
c0013529:	31 d2                	xor    edx,edx
c001352b:	59                   	pop    ecx
c001352c:	5b                   	pop    ebx
c001352d:	5e                   	pop    esi
c001352e:	c3                   	ret    

c001352f <Sys::read(regs*)>:
c001352f:	57                   	push   edi
c0013530:	56                   	push   esi
c0013531:	53                   	push   ebx
c0013532:	83 ec 10             	sub    esp,0x10
c0013535:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013539:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001353c:	83 f8 02             	cmp    eax,0x2
c001353f:	77 10                	ja     c0013551 <Sys::read(regs*)+0x22>
c0013541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013546:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013549:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001354f:	eb 0e                	jmp    c001355f <Sys::read(regs*)+0x30>
c0013551:	83 ec 0c             	sub    esp,0xc
c0013554:	50                   	push   eax
c0013555:	e8 15 7d ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c001355a:	83 c4 10             	add    esp,0x10
c001355d:	89 c1                	mov    ecx,eax
c001355f:	83 c8 ff             	or     eax,0xffffffff
c0013562:	85 c9                	test   ecx,ecx
c0013564:	89 c2                	mov    edx,eax
c0013566:	74 28                	je     c0013590 <Sys::read(regs*)+0x61>
c0013568:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013570:	31 ff                	xor    edi,edi
c0013572:	83 ec 0c             	sub    esp,0xc
c0013575:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013577:	8d 54 24 18          	lea    edx,[esp+0x18]
c001357b:	52                   	push   edx
c001357c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001357f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013582:	57                   	push   edi
c0013583:	56                   	push   esi
c0013584:	51                   	push   ecx
c0013585:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013588:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001358c:	83 c4 20             	add    esp,0x20
c001358f:	99                   	cdq    
c0013590:	83 c4 10             	add    esp,0x10
c0013593:	5b                   	pop    ebx
c0013594:	5e                   	pop    esi
c0013595:	5f                   	pop    edi
c0013596:	c3                   	ret    

c0013597 <Sys::sbrk(regs*)>:
c0013597:	56                   	push   esi
c0013598:	53                   	push   ebx
c0013599:	50                   	push   eax
c001359a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001359f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135a6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00135a9:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00135af:	85 db                	test   ebx,ebx
c00135b1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00135b4:	74 02                	je     c00135b8 <Sys::sbrk(regs*)+0x21>
c00135b6:	79 06                	jns    c00135be <Sys::sbrk(regs*)+0x27>
c00135b8:	89 f0                	mov    eax,esi
c00135ba:	31 d2                	xor    edx,edx
c00135bc:	eb 2a                	jmp    c00135e8 <Sys::sbrk(regs*)+0x51>
c00135be:	83 c8 ff             	or     eax,0xffffffff
c00135c1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00135c7:	89 c2                	mov    edx,eax
c00135c9:	77 1d                	ja     c00135e8 <Sys::sbrk(regs*)+0x51>
c00135cb:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00135d1:	50                   	push   eax
c00135d2:	c1 ea 0c             	shr    edx,0xc
c00135d5:	68 07 0c 00 00       	push   0xc07
c00135da:	52                   	push   edx
c00135db:	51                   	push   ecx
c00135dc:	e8 53 85 ff ff       	call   c000bb34 <VAS::allocatePages(int, int)>
c00135e1:	89 f0                	mov    eax,esi
c00135e3:	31 d2                	xor    edx,edx
c00135e5:	83 c4 10             	add    esp,0x10
c00135e8:	59                   	pop    ecx
c00135e9:	5b                   	pop    ebx
c00135ea:	5e                   	pop    esi
c00135eb:	c3                   	ret    

c00135ec <Sys::setCwd(regs*)>:
c00135ec:	83 ec 14             	sub    esp,0x14
c00135ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135f3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135fb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00135fe:	e8 70 9a ff ff       	call   c000d073 <Fs::setcwd(Process*, char*)>
c0013603:	83 c4 1c             	add    esp,0x1c
c0013606:	99                   	cdq    
c0013607:	c3                   	ret    

c0013608 <Sys::setTime(regs*)>:
c0013608:	55                   	push   ebp
c0013609:	31 c9                	xor    ecx,ecx
c001360b:	57                   	push   edi
c001360c:	bd 0c 00 00 00       	mov    ebp,0xc
c0013611:	56                   	push   esi
c0013612:	53                   	push   ebx
c0013613:	31 db                	xor    ebx,ebx
c0013615:	83 ec 10             	sub    esp,0x10
c0013618:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001361c:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001361f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013622:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013625:	89 c2                	mov    edx,eax
c0013627:	66 81 ef 6c 07       	sub    di,0x76c
c001362c:	83 e2 1f             	and    edx,0x1f
c001362f:	c1 e7 10             	shl    edi,0x10
c0013632:	42                   	inc    edx
c0013633:	c1 e8 05             	shr    eax,0x5
c0013636:	88 d1                	mov    cl,dl
c0013638:	31 d2                	xor    edx,edx
c001363a:	f7 f5                	div    ebp
c001363c:	89 dd                	mov    ebp,ebx
c001363e:	88 d5                	mov    ch,dl
c0013640:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013646:	0f b7 c1             	movzx  eax,cx
c0013649:	31 d2                	xor    edx,edx
c001364b:	09 f8                	or     eax,edi
c001364d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013652:	89 c1                	mov    ecx,eax
c0013654:	89 f0                	mov    eax,esi
c0013656:	f7 f7                	div    edi
c0013658:	c1 e2 10             	shl    edx,0x10
c001365b:	09 d5                	or     ebp,edx
c001365d:	31 d2                	xor    edx,edx
c001365f:	89 eb                	mov    ebx,ebp
c0013661:	f7 f7                	div    edi
c0013663:	bf 10 0e 00 00       	mov    edi,0xe10
c0013668:	88 d7                	mov    bh,dl
c001366a:	89 f0                	mov    eax,esi
c001366c:	31 d2                	xor    edx,edx
c001366e:	f7 f7                	div    edi
c0013670:	bf 18 00 00 00       	mov    edi,0x18
c0013675:	31 d2                	xor    edx,edx
c0013677:	f7 f7                	div    edi
c0013679:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001367e:	88 d3                	mov    bl,dl
c0013680:	53                   	push   ebx
c0013681:	51                   	push   ecx
c0013682:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013688:	e8 25 a2 ff ff       	call   c000d8b2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001368d:	83 c4 1c             	add    esp,0x1c
c0013690:	83 f0 01             	xor    eax,0x1
c0013693:	5b                   	pop    ebx
c0013694:	0f b6 c0             	movzx  eax,al
c0013697:	5e                   	pop    esi
c0013698:	31 d2                	xor    edx,edx
c001369a:	5f                   	pop    edi
c001369b:	5d                   	pop    ebp
c001369c:	c3                   	ret    

c001369d <Sys::timezone(regs*)>:
c001369d:	53                   	push   ebx
c001369e:	83 ec 08             	sub    esp,0x8
c00136a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136a5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00136a9:	75 17                	jne    c00136c2 <Sys::timezone(regs*)+0x25>
c00136ab:	83 ec 0c             	sub    esp,0xc
c00136ae:	68 22 43 02 c0       	push   0xc0024322
c00136b3:	e8 69 90 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00136b8:	83 c8 ff             	or     eax,0xffffffff
c00136bb:	83 c4 10             	add    esp,0x10
c00136be:	89 c2                	mov    edx,eax
c00136c0:	eb 20                	jmp    c00136e2 <Sys::timezone(regs*)+0x45>
c00136c2:	83 ec 0c             	sub    esp,0xc
c00136c5:	68 37 43 02 c0       	push   0xc0024337
c00136ca:	e8 52 90 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00136cf:	58                   	pop    eax
c00136d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136d3:	e8 3c 9f ff ff       	call   c000d614 <User::loadClockSettings(int)>
c00136d8:	83 c4 10             	add    esp,0x10
c00136db:	b8 01 00 00 00       	mov    eax,0x1
c00136e0:	31 d2                	xor    edx,edx
c00136e2:	83 c4 08             	add    esp,0x8
c00136e5:	5b                   	pop    ebx
c00136e6:	c3                   	ret    

c00136e7 <Sys::write(regs*)>:
c00136e7:	57                   	push   edi
c00136e8:	56                   	push   esi
c00136e9:	53                   	push   ebx
c00136ea:	83 ec 10             	sub    esp,0x10
c00136ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00136f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00136f4:	83 f8 02             	cmp    eax,0x2
c00136f7:	77 10                	ja     c0013709 <Sys::write(regs*)+0x22>
c00136f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013701:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013707:	eb 0e                	jmp    c0013717 <Sys::write(regs*)+0x30>
c0013709:	83 ec 0c             	sub    esp,0xc
c001370c:	50                   	push   eax
c001370d:	e8 5d 7b ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c0013712:	83 c4 10             	add    esp,0x10
c0013715:	89 c1                	mov    ecx,eax
c0013717:	83 c8 ff             	or     eax,0xffffffff
c001371a:	85 c9                	test   ecx,ecx
c001371c:	89 c2                	mov    edx,eax
c001371e:	74 28                	je     c0013748 <Sys::write(regs*)+0x61>
c0013720:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013728:	31 ff                	xor    edi,edi
c001372a:	83 ec 0c             	sub    esp,0xc
c001372d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001372f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013733:	52                   	push   edx
c0013734:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013737:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001373a:	57                   	push   edi
c001373b:	56                   	push   esi
c001373c:	51                   	push   ecx
c001373d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013740:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013744:	83 c4 20             	add    esp,0x20
c0013747:	99                   	cdq    
c0013748:	83 c4 10             	add    esp,0x10
c001374b:	5b                   	pop    ebx
c001374c:	5e                   	pop    esi
c001374d:	5f                   	pop    edi
c001374e:	c3                   	ret    

c001374f <Sys::wsbe(regs*)>:
c001374f:	57                   	push   edi
c0013750:	b9 0b 00 00 00       	mov    ecx,0xb
c0013755:	56                   	push   esi
c0013756:	be 76 43 02 c0       	mov    esi,0xc0024376
c001375b:	53                   	push   ebx
c001375c:	83 ec 30             	sub    esp,0x30
c001375f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013763:	fc                   	cld    
c0013764:	83 ec 0c             	sub    esp,0xc
c0013767:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013769:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001376d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013772:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013775:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001377b:	8b 06                	mov    eax,DWORD PTR [esi]
c001377d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013780:	57                   	push   edi
c0013781:	e8 3e cd fe ff       	call   c00004c4 <strlen>
c0013786:	5a                   	pop    edx
c0013787:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001378b:	52                   	push   edx
c001378c:	31 d2                	xor    edx,edx
c001378e:	57                   	push   edi
c001378f:	52                   	push   edx
c0013790:	50                   	push   eax
c0013791:	56                   	push   esi
c0013792:	ff d3                	call   ebx
c0013794:	83 c4 14             	add    esp,0x14
c0013797:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001379b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001379e:	e8 65 32 00 00       	call   c0016a08 <terminateTask(int)>
c00137a3:	83 c4 40             	add    esp,0x40
c00137a6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00137ab:	5b                   	pop    ebx
c00137ac:	31 d2                	xor    edx,edx
c00137ae:	5e                   	pop    esi
c00137af:	5f                   	pop    edi
c00137b0:	c3                   	ret    

c00137b1 <Sys::yield(regs*)>:
c00137b1:	83 ec 0c             	sub    esp,0xc
c00137b4:	fa                   	cli    
c00137b5:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00137bb:	e8 30 29 00 00       	call   c00160f0 <schedule()>
c00137c0:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00137c5:	48                   	dec    eax
c00137c6:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00137cb:	75 01                	jne    c00137ce <Sys::yield(regs*)+0x1d>
c00137cd:	fb                   	sti    
c00137ce:	8b 15 2c 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a2c
c00137d4:	83 c4 0c             	add    esp,0xc
c00137d7:	89 d0                	mov    eax,edx
c00137d9:	c1 ea 11             	shr    edx,0x11
c00137dc:	c1 e0 07             	shl    eax,0x7
c00137df:	25 80 30 0f 00       	and    eax,0xf3080
c00137e4:	31 d0                	xor    eax,edx
c00137e6:	31 d2                	xor    edx,edx
c00137e8:	c3                   	ret    

c00137e9 <sysCallSeekDir(regs*)>:
c00137e9:	31 c0                	xor    eax,eax
c00137eb:	31 d2                	xor    edx,edx
c00137ed:	c3                   	ret    

c00137ee <sysCallTellDir(regs*)>:
c00137ee:	31 c0                	xor    eax,eax
c00137f0:	31 d2                	xor    edx,edx
c00137f2:	c3                   	ret    

c00137f3 <sysCallVerify(regs*)>:
c00137f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137f7:	31 d2                	xor    edx,edx
c00137f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00137fc:	c3                   	ret    

c00137fd <sysCallGetArgc(regs*)>:
c00137fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013802:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013805:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001380b:	99                   	cdq    
c001380c:	c3                   	ret    

c001380d <sysFormatDisk(regs*)>:
c001380d:	56                   	push   esi
c001380e:	53                   	push   ebx
c001380f:	53                   	push   ebx
c0013810:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013814:	8b 1d 38 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026538
c001381a:	eb 25                	jmp    c0013841 <sysFormatDisk(regs*)+0x34>
c001381c:	83 ec 0c             	sub    esp,0xc
c001381f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013822:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013824:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013827:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001382a:	50                   	push   eax
c001382b:	ff 34 85 c0 89 02 c0 	push   DWORD PTR [eax*4-0x3ffd7640]
c0013832:	53                   	push   ebx
c0013833:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0013836:	83 c4 20             	add    esp,0x20
c0013839:	83 f8 08             	cmp    eax,0x8
c001383c:	75 12                	jne    c0013850 <sysFormatDisk(regs*)+0x43>
c001383e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0013841:	85 db                	test   ebx,ebx
c0013843:	75 d7                	jne    c001381c <sysFormatDisk(regs*)+0xf>
c0013845:	59                   	pop    ecx
c0013846:	b8 03 00 00 00       	mov    eax,0x3
c001384b:	31 d2                	xor    edx,edx
c001384d:	5b                   	pop    ebx
c001384e:	5e                   	pop    esi
c001384f:	c3                   	ret    
c0013850:	85 c0                	test   eax,eax
c0013852:	74 1b                	je     c001386f <sysFormatDisk(regs*)+0x62>
c0013854:	83 f8 09             	cmp    eax,0x9
c0013857:	74 0b                	je     c0013864 <sysFormatDisk(regs*)+0x57>
c0013859:	59                   	pop    ecx
c001385a:	b8 02 00 00 00       	mov    eax,0x2
c001385f:	31 d2                	xor    edx,edx
c0013861:	5b                   	pop    ebx
c0013862:	5e                   	pop    esi
c0013863:	c3                   	ret    
c0013864:	59                   	pop    ecx
c0013865:	b8 01 00 00 00       	mov    eax,0x1
c001386a:	31 d2                	xor    edx,edx
c001386c:	5b                   	pop    ebx
c001386d:	5e                   	pop    esi
c001386e:	c3                   	ret    
c001386f:	59                   	pop    ecx
c0013870:	31 c0                	xor    eax,eax
c0013872:	31 d2                	xor    edx,edx
c0013874:	5b                   	pop    ebx
c0013875:	5e                   	pop    esi
c0013876:	c3                   	ret    

c0013877 <sysSetDiskVolumeLabel(regs*)>:
c0013877:	56                   	push   esi
c0013878:	53                   	push   ebx
c0013879:	53                   	push   ebx
c001387a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001387e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013881:	83 f8 19             	cmp    eax,0x19
c0013884:	77 2d                	ja     c00138b3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013886:	8b 0c 85 c0 89 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7640]
c001388d:	85 c9                	test   ecx,ecx
c001388f:	74 22                	je     c00138b3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013891:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0013894:	85 db                	test   ebx,ebx
c0013896:	74 1b                	je     c00138b3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013898:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001389e:	85 d2                	test   edx,edx
c00138a0:	74 11                	je     c00138b3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00138a2:	8b 32                	mov    esi,DWORD PTR [edx]
c00138a4:	53                   	push   ebx
c00138a5:	50                   	push   eax
c00138a6:	51                   	push   ecx
c00138a7:	52                   	push   edx
c00138a8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	99                   	cdq    
c00138af:	59                   	pop    ecx
c00138b0:	5b                   	pop    ebx
c00138b1:	5e                   	pop    esi
c00138b2:	c3                   	ret    
c00138b3:	59                   	pop    ecx
c00138b4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00138be:	5b                   	pop    ebx
c00138bf:	5e                   	pop    esi
c00138c0:	c3                   	ret    

c00138c1 <sysGetDiskVolumeLabel(regs*)>:
c00138c1:	57                   	push   edi
c00138c2:	56                   	push   esi
c00138c3:	53                   	push   ebx
c00138c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00138cb:	83 fa 19             	cmp    edx,0x19
c00138ce:	77 38                	ja     c0013908 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138d0:	8b 0c 95 c0 89 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7640]
c00138d7:	85 c9                	test   ecx,ecx
c00138d9:	74 2d                	je     c0013908 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138db:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00138de:	85 db                	test   ebx,ebx
c00138e0:	74 26                	je     c0013908 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138e2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00138e5:	85 f6                	test   esi,esi
c00138e7:	74 1f                	je     c0013908 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138e9:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00138ef:	85 c0                	test   eax,eax
c00138f1:	74 15                	je     c0013908 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138f3:	83 ec 0c             	sub    esp,0xc
c00138f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00138f8:	56                   	push   esi
c00138f9:	53                   	push   ebx
c00138fa:	52                   	push   edx
c00138fb:	51                   	push   ecx
c00138fc:	50                   	push   eax
c00138fd:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0013900:	83 c4 20             	add    esp,0x20
c0013903:	99                   	cdq    
c0013904:	5b                   	pop    ebx
c0013905:	5e                   	pop    esi
c0013906:	5f                   	pop    edi
c0013907:	c3                   	ret    
c0013908:	5b                   	pop    ebx
c0013909:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001390e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013913:	5e                   	pop    esi
c0013914:	5f                   	pop    edi
c0013915:	c3                   	ret    

c0013916 <sysShutdown(regs*)>:
c0013916:	83 ec 0c             	sub    esp,0xc
c0013919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013920:	85 c0                	test   eax,eax
c0013922:	74 18                	je     c001393c <sysShutdown(regs*)+0x26>
c0013924:	83 f8 01             	cmp    eax,0x1
c0013927:	74 38                	je     c0013961 <sysShutdown(regs*)+0x4b>
c0013929:	83 f8 02             	cmp    eax,0x2
c001392c:	74 24                	je     c0013952 <sysShutdown(regs*)+0x3c>
c001392e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013933:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013938:	83 c4 0c             	add    esp,0xc
c001393b:	c3                   	ret    
c001393c:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0013941:	8b 10                	mov    edx,DWORD PTR [eax]
c0013943:	6a 00                	push   0x0
c0013945:	6a 00                	push   0x0
c0013947:	6a 00                	push   0x0
c0013949:	50                   	push   eax
c001394a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001394d:	83 c4 10             	add    esp,0x10
c0013950:	eb dc                	jmp    c001392e <sysShutdown(regs*)+0x18>
c0013952:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0013957:	8b 10                	mov    edx,DWORD PTR [eax]
c0013959:	6a 00                	push   0x0
c001395b:	6a 00                	push   0x0
c001395d:	6a 01                	push   0x1
c001395f:	eb e8                	jmp    c0013949 <sysShutdown(regs*)+0x33>
c0013961:	a1 40 8a 02 c0       	mov    eax,ds:0xc0028a40
c0013966:	85 c0                	test   eax,eax
c0013968:	74 02                	je     c001396c <sysShutdown(regs*)+0x56>
c001396a:	ff d0                	call   eax
c001396c:	31 c0                	xor    eax,eax
c001396e:	31 d2                	xor    edx,edx
c0013970:	83 c4 0c             	add    esp,0xc
c0013973:	c3                   	ret    

c0013974 <sysCallRealpath(regs*)>:
c0013974:	83 ec 0c             	sub    esp,0xc
c0013977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001397e:	85 d2                	test   edx,edx
c0013980:	74 07                	je     c0013989 <sysCallRealpath(regs*)+0x15>
c0013982:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0013985:	85 c0                	test   eax,eax
c0013987:	75 0b                	jne    c0013994 <sysCallRealpath(regs*)+0x20>
c0013989:	b8 01 00 00 00       	mov    eax,0x1
c001398e:	31 d2                	xor    edx,edx
c0013990:	83 c4 0c             	add    esp,0xc
c0013993:	c3                   	ret    
c0013994:	51                   	push   ecx
c0013995:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001399b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001399e:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00139a4:	51                   	push   ecx
c00139a5:	52                   	push   edx
c00139a6:	50                   	push   eax
c00139a7:	e8 36 91 ff ff       	call   c000cae2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00139ac:	83 c4 10             	add    esp,0x10
c00139af:	31 c0                	xor    eax,eax
c00139b1:	31 d2                	xor    edx,edx
c00139b3:	83 c4 0c             	add    esp,0xc
c00139b6:	c3                   	ret    

c00139b7 <sysCallReadDir(regs*)>:
c00139b7:	53                   	push   ebx
c00139b8:	83 ec 18             	sub    esp,0x18
c00139bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00139bf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00139c2:	83 f8 02             	cmp    eax,0x2
c00139c5:	76 60                	jbe    c0013a27 <sysCallReadDir(regs*)+0x70>
c00139c7:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00139ce:	77 48                	ja     c0013a18 <sysCallReadDir(regs*)+0x61>
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	50                   	push   eax
c00139d4:	e8 96 78 ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c00139d9:	83 c4 10             	add    esp,0x10
c00139dc:	85 c0                	test   eax,eax
c00139de:	74 38                	je     c0013a18 <sysCallReadDir(regs*)+0x61>
c00139e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139e8:	83 ec 0c             	sub    esp,0xc
c00139eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00139ed:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00139f1:	51                   	push   ecx
c00139f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139f5:	6a 00                	push   0x0
c00139f7:	68 10 01 00 00       	push   0x110
c00139fc:	50                   	push   eax
c00139fd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013a00:	83 c4 20             	add    esp,0x20
c0013a03:	85 c0                	test   eax,eax
c0013a05:	74 29                	je     c0013a30 <sysCallReadDir(regs*)+0x79>
c0013a07:	83 f8 07             	cmp    eax,0x7
c0013a0a:	74 1b                	je     c0013a27 <sysCallReadDir(regs*)+0x70>
c0013a0c:	b8 02 00 00 00       	mov    eax,0x2
c0013a11:	31 d2                	xor    edx,edx
c0013a13:	83 c4 18             	add    esp,0x18
c0013a16:	5b                   	pop    ebx
c0013a17:	c3                   	ret    
c0013a18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013a1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013a22:	83 c4 18             	add    esp,0x18
c0013a25:	5b                   	pop    ebx
c0013a26:	c3                   	ret    
c0013a27:	b8 01 00 00 00       	mov    eax,0x1
c0013a2c:	31 d2                	xor    edx,edx
c0013a2e:	eb e3                	jmp    c0013a13 <sysCallReadDir(regs*)+0x5c>
c0013a30:	31 c0                	xor    eax,eax
c0013a32:	31 d2                	xor    edx,edx
c0013a34:	eb dd                	jmp    c0013a13 <sysCallReadDir(regs*)+0x5c>

c0013a36 <sysCallIsATTY(regs*)>:
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013a40:	83 f8 02             	cmp    eax,0x2
c0013a43:	76 07                	jbe    c0013a4c <sysCallIsATTY(regs*)+0x16>
c0013a45:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013a4a:	75 26                	jne    c0013a72 <sysCallIsATTY(regs*)+0x3c>
c0013a4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013a5a:	85 c0                	test   eax,eax
c0013a5c:	74 24                	je     c0013a82 <sysCallIsATTY(regs*)+0x4c>
c0013a5e:	83 ec 0c             	sub    esp,0xc
c0013a61:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a63:	50                   	push   eax
c0013a64:	ff 12                	call   DWORD PTR [edx]
c0013a66:	31 d2                	xor    edx,edx
c0013a68:	0f b6 c0             	movzx  eax,al
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	83 c4 0c             	add    esp,0xc
c0013a71:	c3                   	ret    
c0013a72:	83 ec 0c             	sub    esp,0xc
c0013a75:	50                   	push   eax
c0013a76:	e8 f4 77 ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c0013a7b:	83 c4 10             	add    esp,0x10
c0013a7e:	85 c0                	test   eax,eax
c0013a80:	75 dc                	jne    c0013a5e <sysCallIsATTY(regs*)+0x28>
c0013a82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013a87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013a8c:	83 c4 0c             	add    esp,0xc
c0013a8f:	c3                   	ret    

c0013a90 <sysCallSeek(regs*)>:
c0013a90:	53                   	push   ebx
c0013a91:	83 ec 08             	sub    esp,0x8
c0013a94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a98:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a9b:	8d 50 fd             	lea    edx,[eax-0x3]
c0013a9e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0013aa4:	77 32                	ja     c0013ad8 <sysCallSeek(regs*)+0x48>
c0013aa6:	83 ec 0c             	sub    esp,0xc
c0013aa9:	50                   	push   eax
c0013aaa:	e8 c0 77 ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c0013aaf:	83 c4 0c             	add    esp,0xc
c0013ab2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ab5:	31 db                	xor    ebx,ebx
c0013ab7:	53                   	push   ebx
c0013ab8:	51                   	push   ecx
c0013ab9:	50                   	push   eax
c0013aba:	e8 65 93 ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0013abf:	83 c4 10             	add    esp,0x10
c0013ac2:	85 c0                	test   eax,eax
c0013ac4:	0f 95 c0             	setne  al
c0013ac7:	31 d2                	xor    edx,edx
c0013ac9:	0f b6 c0             	movzx  eax,al
c0013acc:	f7 d8                	neg    eax
c0013ace:	83 d2 00             	adc    edx,0x0
c0013ad1:	83 c4 08             	add    esp,0x8
c0013ad4:	f7 da                	neg    edx
c0013ad6:	5b                   	pop    ebx
c0013ad7:	c3                   	ret    
c0013ad8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013add:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013ae2:	83 c4 08             	add    esp,0x8
c0013ae5:	5b                   	pop    ebx
c0013ae6:	c3                   	ret    

c0013ae7 <sysCallTell(regs*)>:
c0013ae7:	53                   	push   ebx
c0013ae8:	83 ec 08             	sub    esp,0x8
c0013aeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013aef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013af2:	83 f8 02             	cmp    eax,0x2
c0013af5:	76 4d                	jbe    c0013b44 <sysCallTell(regs*)+0x5d>
c0013af7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013afc:	76 19                	jbe    c0013b17 <sysCallTell(regs*)+0x30>
c0013afe:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013b01:	31 d2                	xor    edx,edx
c0013b03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b10:	31 c0                	xor    eax,eax
c0013b12:	83 c4 08             	add    esp,0x8
c0013b15:	5b                   	pop    ebx
c0013b16:	c3                   	ret    
c0013b17:	83 ec 0c             	sub    esp,0xc
c0013b1a:	50                   	push   eax
c0013b1b:	e8 4f 77 ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c0013b20:	5a                   	pop    edx
c0013b21:	59                   	pop    ecx
c0013b22:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b25:	50                   	push   eax
c0013b26:	e8 4f 93 ff ff       	call   c000ce7a <File::tell(unsigned long long*)>
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	85 c0                	test   eax,eax
c0013b30:	0f 95 c0             	setne  al
c0013b33:	31 d2                	xor    edx,edx
c0013b35:	0f b6 c0             	movzx  eax,al
c0013b38:	f7 d8                	neg    eax
c0013b3a:	83 d2 00             	adc    edx,0x0
c0013b3d:	83 c4 08             	add    esp,0x8
c0013b40:	f7 da                	neg    edx
c0013b42:	5b                   	pop    ebx
c0013b43:	c3                   	ret    
c0013b44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013b49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013b4e:	83 c4 08             	add    esp,0x8
c0013b51:	5b                   	pop    ebx
c0013b52:	c3                   	ret    

c0013b53 <sysCallSize(regs*)>:
c0013b53:	53                   	push   ebx
c0013b54:	83 ec 18             	sub    esp,0x18
c0013b57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b5b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b5e:	83 f8 02             	cmp    eax,0x2
c0013b61:	76 53                	jbe    c0013bb6 <sysCallSize(regs*)+0x63>
c0013b63:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013b68:	76 19                	jbe    c0013b83 <sysCallSize(regs*)+0x30>
c0013b6a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013b6d:	31 d2                	xor    edx,edx
c0013b6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b7c:	31 c0                	xor    eax,eax
c0013b7e:	83 c4 18             	add    esp,0x18
c0013b81:	5b                   	pop    ebx
c0013b82:	c3                   	ret    
c0013b83:	83 ec 0c             	sub    esp,0xc
c0013b86:	50                   	push   eax
c0013b87:	e8 e3 76 ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c0013b8c:	83 c4 0c             	add    esp,0xc
c0013b8f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0013b93:	52                   	push   edx
c0013b94:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b97:	50                   	push   eax
c0013b98:	e8 75 94 ff ff       	call   c000d012 <File::stat(unsigned long long*, bool*)>
c0013b9d:	83 c4 10             	add    esp,0x10
c0013ba0:	85 c0                	test   eax,eax
c0013ba2:	0f 95 c0             	setne  al
c0013ba5:	31 d2                	xor    edx,edx
c0013ba7:	0f b6 c0             	movzx  eax,al
c0013baa:	f7 d8                	neg    eax
c0013bac:	83 d2 00             	adc    edx,0x0
c0013baf:	83 c4 18             	add    esp,0x18
c0013bb2:	f7 da                	neg    edx
c0013bb4:	5b                   	pop    ebx
c0013bb5:	c3                   	ret    
c0013bb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013bbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013bc0:	83 c4 18             	add    esp,0x18
c0013bc3:	5b                   	pop    ebx
c0013bc4:	c3                   	ret    

c0013bc5 <sysCallSizeFromFilename(regs*)>:
c0013bc5:	57                   	push   edi
c0013bc6:	56                   	push   esi
c0013bc7:	53                   	push   ebx
c0013bc8:	83 ec 20             	sub    esp,0x20
c0013bcb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013bcf:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0013bd2:	83 fb 02             	cmp    ebx,0x2
c0013bd5:	0f 86 88 00 00 00    	jbe    c0013c63 <sysCallSizeFromFilename(regs*)+0x9e>
c0013bdb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013be1:	76 1b                	jbe    c0013bfe <sysCallSizeFromFilename(regs*)+0x39>
c0013be3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013be6:	31 d2                	xor    edx,edx
c0013be8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bf5:	83 c4 20             	add    esp,0x20
c0013bf8:	31 c0                	xor    eax,eax
c0013bfa:	5b                   	pop    ebx
c0013bfb:	5e                   	pop    esi
c0013bfc:	5f                   	pop    edi
c0013bfd:	c3                   	ret    
c0013bfe:	83 ec 0c             	sub    esp,0xc
c0013c01:	68 14 01 00 00       	push   0x114
c0013c06:	e8 8c 5b ff ff       	call   c0009797 <malloc>
c0013c0b:	83 c4 0c             	add    esp,0xc
c0013c0e:	89 c7                	mov    edi,eax
c0013c10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c15:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c18:	53                   	push   ebx
c0013c19:	57                   	push   edi
c0013c1a:	e8 6d 90 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0013c1f:	83 c4 0c             	add    esp,0xc
c0013c22:	8d 44 24 23          	lea    eax,[esp+0x23]
c0013c26:	50                   	push   eax
c0013c27:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013c2a:	57                   	push   edi
c0013c2b:	e8 e2 93 ff ff       	call   c000d012 <File::stat(unsigned long long*, bool*)>
c0013c30:	83 c4 10             	add    esp,0x10
c0013c33:	85 ff                	test   edi,edi
c0013c35:	74 14                	je     c0013c4b <sysCallSizeFromFilename(regs*)+0x86>
c0013c37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c3b:	8b 17                	mov    edx,DWORD PTR [edi]
c0013c3d:	83 ec 0c             	sub    esp,0xc
c0013c40:	57                   	push   edi
c0013c41:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c4b:	85 c0                	test   eax,eax
c0013c4d:	0f 95 c0             	setne  al
c0013c50:	31 d2                	xor    edx,edx
c0013c52:	0f b6 c0             	movzx  eax,al
c0013c55:	f7 d8                	neg    eax
c0013c57:	83 d2 00             	adc    edx,0x0
c0013c5a:	83 c4 20             	add    esp,0x20
c0013c5d:	f7 da                	neg    edx
c0013c5f:	5b                   	pop    ebx
c0013c60:	5e                   	pop    esi
c0013c61:	5f                   	pop    edi
c0013c62:	c3                   	ret    
c0013c63:	83 c4 20             	add    esp,0x20
c0013c66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013c6b:	5b                   	pop    ebx
c0013c6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013c71:	5e                   	pop    esi
c0013c72:	5f                   	pop    edi
c0013c73:	c3                   	ret    

c0013c74 <sysCallClose(regs*)>:
c0013c74:	53                   	push   ebx
c0013c75:	83 ec 08             	sub    esp,0x8
c0013c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013c7f:	83 f8 02             	cmp    eax,0x2
c0013c82:	76 41                	jbe    c0013cc5 <sysCallClose(regs*)+0x51>
c0013c84:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0013c8a:	83 fa 01             	cmp    edx,0x1
c0013c8d:	76 2d                	jbe    c0013cbc <sysCallClose(regs*)+0x48>
c0013c8f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013c94:	77 2f                	ja     c0013cc5 <sysCallClose(regs*)+0x51>
c0013c96:	83 ec 0c             	sub    esp,0xc
c0013c99:	50                   	push   eax
c0013c9a:	e8 d0 75 ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c0013c9f:	89 c3                	mov    ebx,eax
c0013ca1:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ca4:	e8 1b 91 ff ff       	call   c000cdc4 <File::close()>
c0013ca9:	83 c4 10             	add    esp,0x10
c0013cac:	85 db                	test   ebx,ebx
c0013cae:	74 0c                	je     c0013cbc <sysCallClose(regs*)+0x48>
c0013cb0:	83 ec 0c             	sub    esp,0xc
c0013cb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cb5:	53                   	push   ebx
c0013cb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	31 c0                	xor    eax,eax
c0013cbe:	31 d2                	xor    edx,edx
c0013cc0:	83 c4 08             	add    esp,0x8
c0013cc3:	5b                   	pop    ebx
c0013cc4:	c3                   	ret    
c0013cc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013cca:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013ccf:	83 c4 08             	add    esp,0x8
c0013cd2:	5b                   	pop    ebx
c0013cd3:	c3                   	ret    

c0013cd4 <sysCallOpenDir(regs*)>:
c0013cd4:	56                   	push   esi
c0013cd5:	53                   	push   ebx
c0013cd6:	53                   	push   ebx
c0013cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cdb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0013cde:	85 f6                	test   esi,esi
c0013ce0:	74 59                	je     c0013d3b <sysCallOpenDir(regs*)+0x67>
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	68 14 01 00 00       	push   0x114
c0013cea:	e8 a8 5a ff ff       	call   c0009797 <malloc>
c0013cef:	83 c4 0c             	add    esp,0xc
c0013cf2:	89 c6                	mov    esi,eax
c0013cf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cf9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013cfc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cff:	56                   	push   esi
c0013d00:	e8 e7 94 ff ff       	call   c000d1ec <Directory::Directory(char const*, Process*)>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	85 f6                	test   esi,esi
c0013d0a:	74 2f                	je     c0013d3b <sysCallOpenDir(regs*)+0x67>
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	56                   	push   esi
c0013d10:	e8 b1 95 ff ff       	call   c000d2c6 <Directory::open()>
c0013d15:	83 c4 10             	add    esp,0x10
c0013d18:	85 c0                	test   eax,eax
c0013d1a:	75 1f                	jne    c0013d3b <sysCallOpenDir(regs*)+0x67>
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	56                   	push   esi
c0013d20:	e8 55 72 ff ff       	call   c000af7a <UnixFile::getFileDescriptor()>
c0013d25:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0013d28:	83 c4 10             	add    esp,0x10
c0013d2b:	89 02                	mov    DWORD PTR [edx],eax
c0013d2d:	c1 f8 1f             	sar    eax,0x1f
c0013d30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d33:	31 c0                	xor    eax,eax
c0013d35:	59                   	pop    ecx
c0013d36:	31 d2                	xor    edx,edx
c0013d38:	5b                   	pop    ebx
c0013d39:	5e                   	pop    esi
c0013d3a:	c3                   	ret    
c0013d3b:	59                   	pop    ecx
c0013d3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013d46:	5b                   	pop    ebx
c0013d47:	5e                   	pop    esi
c0013d48:	c3                   	ret    

c0013d49 <sysCallCloseDir(regs*)>:
c0013d49:	53                   	push   ebx
c0013d4a:	83 ec 08             	sub    esp,0x8
c0013d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d54:	8d 50 fd             	lea    edx,[eax-0x3]
c0013d57:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0013d5d:	77 2f                	ja     c0013d8e <sysCallCloseDir(regs*)+0x45>
c0013d5f:	83 ec 0c             	sub    esp,0xc
c0013d62:	50                   	push   eax
c0013d63:	e8 07 75 ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c0013d68:	89 c3                	mov    ebx,eax
c0013d6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d6d:	e8 b0 95 ff ff       	call   c000d322 <Directory::close()>
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	85 db                	test   ebx,ebx
c0013d77:	74 0c                	je     c0013d85 <sysCallCloseDir(regs*)+0x3c>
c0013d79:	83 ec 0c             	sub    esp,0xc
c0013d7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7e:	53                   	push   ebx
c0013d7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d82:	83 c4 10             	add    esp,0x10
c0013d85:	31 c0                	xor    eax,eax
c0013d87:	31 d2                	xor    edx,edx
c0013d89:	83 c4 08             	add    esp,0x8
c0013d8c:	5b                   	pop    ebx
c0013d8d:	c3                   	ret    
c0013d8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013d98:	83 c4 08             	add    esp,0x8
c0013d9b:	5b                   	pop    ebx
c0013d9c:	c3                   	ret    

c0013d9d <sysCallMakeDir(regs*)>:
c0013d9d:	56                   	push   esi
c0013d9e:	53                   	push   ebx
c0013d9f:	83 ec 10             	sub    esp,0x10
c0013da2:	68 14 01 00 00       	push   0x114
c0013da7:	e8 eb 59 ff ff       	call   c0009797 <malloc>
c0013dac:	83 c4 0c             	add    esp,0xc
c0013daf:	89 c3                	mov    ebx,eax
c0013db1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013db6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dbd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013dc0:	53                   	push   ebx
c0013dc1:	e8 26 94 ff ff       	call   c000d1ec <Directory::Directory(char const*, Process*)>
c0013dc6:	83 c4 10             	add    esp,0x10
c0013dc9:	85 db                	test   ebx,ebx
c0013dcb:	74 32                	je     c0013dff <sysCallMakeDir(regs*)+0x62>
c0013dcd:	83 ec 0c             	sub    esp,0xc
c0013dd0:	53                   	push   ebx
c0013dd1:	e8 d0 96 ff ff       	call   c000d4a6 <Directory::create()>
c0013dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dd9:	89 c6                	mov    esi,eax
c0013ddb:	e8 42 95 ff ff       	call   c000d322 <Directory::close()>
c0013de0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013de2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013de5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	31 c0                	xor    eax,eax
c0013ded:	59                   	pop    ecx
c0013dee:	85 f6                	test   esi,esi
c0013df0:	5b                   	pop    ebx
c0013df1:	0f 95 c0             	setne  al
c0013df4:	5e                   	pop    esi
c0013df5:	31 d2                	xor    edx,edx
c0013df7:	f7 d8                	neg    eax
c0013df9:	83 d2 00             	adc    edx,0x0
c0013dfc:	f7 da                	neg    edx
c0013dfe:	c3                   	ret    
c0013dff:	59                   	pop    ecx
c0013e00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e05:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013e0a:	5b                   	pop    ebx
c0013e0b:	5e                   	pop    esi
c0013e0c:	c3                   	ret    

c0013e0d <sysCallWait(regs*)>:
c0013e0d:	83 ec 10             	sub    esp,0x10
c0013e10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e14:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013e17:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e1a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e1d:	e8 f6 24 00 00       	call   c0016318 <waitTask(int, int*, int)>
c0013e22:	83 c4 1c             	add    esp,0x1c
c0013e25:	99                   	cdq    
c0013e26:	c3                   	ret    

c0013e27 <sysCallNotImpl(regs*)>:
c0013e27:	83 ec 18             	sub    esp,0x18
c0013e2a:	68 a2 43 02 c0       	push   0xc00243a2
c0013e2f:	e8 57 ec ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0013e34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e39:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013e3e:	83 c4 1c             	add    esp,0x1c
c0013e41:	c3                   	ret    

c0013e42 <sysPanic(regs*)>:
c0013e42:	83 ec 18             	sub    esp,0x18
c0013e45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e49:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e4c:	e8 3a ec ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0013e51:	b8 01 00 00 00       	mov    eax,0x1
c0013e56:	31 d2                	xor    edx,edx
c0013e58:	83 c4 1c             	add    esp,0x1c
c0013e5b:	c3                   	ret    

c0013e5c <sysCallRmdir(regs*)>:
c0013e5c:	56                   	push   esi
c0013e5d:	53                   	push   ebx
c0013e5e:	83 ec 20             	sub    esp,0x20
c0013e61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e65:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0013e68:	68 14 01 00 00       	push   0x114
c0013e6d:	e8 25 59 ff ff       	call   c0009797 <malloc>
c0013e72:	83 c4 0c             	add    esp,0xc
c0013e75:	89 c3                	mov    ebx,eax
c0013e77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e7c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e7f:	56                   	push   esi
c0013e80:	53                   	push   ebx
c0013e81:	e8 06 8e ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0013e86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e89:	e8 50 90 ff ff       	call   c000cede <File::unlink()>
c0013e8e:	83 c4 10             	add    esp,0x10
c0013e91:	85 db                	test   ebx,ebx
c0013e93:	74 14                	je     c0013ea9 <sysCallRmdir(regs*)+0x4d>
c0013e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e99:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e9b:	83 ec 0c             	sub    esp,0xc
c0013e9e:	53                   	push   ebx
c0013e9f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013ea2:	83 c4 10             	add    esp,0x10
c0013ea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ea9:	85 c0                	test   eax,eax
c0013eab:	0f 95 c0             	setne  al
c0013eae:	31 d2                	xor    edx,edx
c0013eb0:	0f b6 c0             	movzx  eax,al
c0013eb3:	f7 d8                	neg    eax
c0013eb5:	83 d2 00             	adc    edx,0x0
c0013eb8:	83 c4 14             	add    esp,0x14
c0013ebb:	f7 da                	neg    edx
c0013ebd:	5b                   	pop    ebx
c0013ebe:	5e                   	pop    esi
c0013ebf:	c3                   	ret    

c0013ec0 <sysCallUnlink(regs*)>:
c0013ec0:	56                   	push   esi
c0013ec1:	53                   	push   ebx
c0013ec2:	83 ec 20             	sub    esp,0x20
c0013ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013ec9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0013ecc:	68 14 01 00 00       	push   0x114
c0013ed1:	e8 c1 58 ff ff       	call   c0009797 <malloc>
c0013ed6:	83 c4 0c             	add    esp,0xc
c0013ed9:	89 c3                	mov    ebx,eax
c0013edb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ee0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ee3:	56                   	push   esi
c0013ee4:	53                   	push   ebx
c0013ee5:	e8 a2 8d ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0013eea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013eed:	e8 ec 8f ff ff       	call   c000cede <File::unlink()>
c0013ef2:	83 c4 10             	add    esp,0x10
c0013ef5:	85 db                	test   ebx,ebx
c0013ef7:	74 14                	je     c0013f0d <sysCallUnlink(regs*)+0x4d>
c0013ef9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013efd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013eff:	83 ec 0c             	sub    esp,0xc
c0013f02:	53                   	push   ebx
c0013f03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013f06:	83 c4 10             	add    esp,0x10
c0013f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f0d:	85 c0                	test   eax,eax
c0013f0f:	0f 95 c0             	setne  al
c0013f12:	31 d2                	xor    edx,edx
c0013f14:	0f b6 c0             	movzx  eax,al
c0013f17:	f7 d8                	neg    eax
c0013f19:	83 d2 00             	adc    edx,0x0
c0013f1c:	83 c4 14             	add    esp,0x14
c0013f1f:	f7 da                	neg    edx
c0013f21:	5b                   	pop    ebx
c0013f22:	5e                   	pop    esi
c0013f23:	c3                   	ret    

c0013f24 <sysCallGetArgv(regs*)>:
c0013f24:	83 ec 0c             	sub    esp,0xc
c0013f27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f2b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013f2e:	85 c0                	test   eax,eax
c0013f30:	78 2b                	js     c0013f5d <sysCallGetArgv(regs*)+0x39>
c0013f32:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013f38:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0013f3b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0013f41:	7d 1a                	jge    c0013f5d <sysCallGetArgv(regs*)+0x39>
c0013f43:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0013f4a:	85 c0                	test   eax,eax
c0013f4c:	74 17                	je     c0013f65 <sysCallGetArgv(regs*)+0x41>
c0013f4e:	83 ec 08             	sub    esp,0x8
c0013f51:	50                   	push   eax
c0013f52:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013f55:	e8 0a c6 fe ff       	call   c0000564 <strcpy>
c0013f5a:	83 c4 10             	add    esp,0x10
c0013f5d:	31 c0                	xor    eax,eax
c0013f5f:	31 d2                	xor    edx,edx
c0013f61:	83 c4 0c             	add    esp,0xc
c0013f64:	c3                   	ret    
c0013f65:	b8 01 00 00 00       	mov    eax,0x1
c0013f6a:	31 d2                	xor    edx,edx
c0013f6c:	83 c4 0c             	add    esp,0xc
c0013f6f:	c3                   	ret    

c0013f70 <sysCallTTYName(regs*)>:
c0013f70:	56                   	push   esi
c0013f71:	53                   	push   ebx
c0013f72:	53                   	push   ebx
c0013f73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f77:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013f7a:	85 c0                	test   eax,eax
c0013f7c:	74 5f                	je     c0013fdd <sysCallTTYName(regs*)+0x6d>
c0013f7e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013f81:	83 f8 02             	cmp    eax,0x2
c0013f84:	77 3e                	ja     c0013fc4 <sysCallTTYName(regs*)+0x54>
c0013f86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f8e:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0013f94:	85 db                	test   ebx,ebx
c0013f96:	74 45                	je     c0013fdd <sysCallTTYName(regs*)+0x6d>
c0013f98:	83 ec 0c             	sub    esp,0xc
c0013f9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f9d:	53                   	push   ebx
c0013f9e:	ff 10                	call   DWORD PTR [eax]
c0013fa0:	83 c4 10             	add    esp,0x10
c0013fa3:	84 c0                	test   al,al
c0013fa5:	74 41                	je     c0013fe8 <sysCallTTYName(regs*)+0x78>
c0013fa7:	83 ec 08             	sub    esp,0x8
c0013faa:	81 c3 82 00 00 00    	add    ebx,0x82
c0013fb0:	53                   	push   ebx
c0013fb1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013fb4:	e8 ab c5 fe ff       	call   c0000564 <strcpy>
c0013fb9:	83 c4 10             	add    esp,0x10
c0013fbc:	31 c0                	xor    eax,eax
c0013fbe:	59                   	pop    ecx
c0013fbf:	31 d2                	xor    edx,edx
c0013fc1:	5b                   	pop    ebx
c0013fc2:	5e                   	pop    esi
c0013fc3:	c3                   	ret    
c0013fc4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013fc9:	74 bb                	je     c0013f86 <sysCallTTYName(regs*)+0x16>
c0013fcb:	83 ec 0c             	sub    esp,0xc
c0013fce:	50                   	push   eax
c0013fcf:	e8 9b 72 ff ff       	call   c000b26f <getFromFileDescriptor(int)>
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	89 c3                	mov    ebx,eax
c0013fd9:	85 db                	test   ebx,ebx
c0013fdb:	75 bb                	jne    c0013f98 <sysCallTTYName(regs*)+0x28>
c0013fdd:	59                   	pop    ecx
c0013fde:	b8 01 00 00 00       	mov    eax,0x1
c0013fe3:	31 d2                	xor    edx,edx
c0013fe5:	5b                   	pop    ebx
c0013fe6:	5e                   	pop    esi
c0013fe7:	c3                   	ret    
c0013fe8:	59                   	pop    ecx
c0013fe9:	b8 02 00 00 00       	mov    eax,0x2
c0013fee:	31 d2                	xor    edx,edx
c0013ff0:	5b                   	pop    ebx
c0013ff1:	5e                   	pop    esi
c0013ff2:	c3                   	ret    

c0013ff3 <sysCallUSleep(regs*)>:
c0013ff3:	83 ec 1c             	sub    esp,0x1c
c0013ff6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013ffa:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013ffd:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0014000:	6a 00                	push   0x0
c0014002:	6a 64                	push   0x64
c0014004:	52                   	push   edx
c0014005:	50                   	push   eax
c0014006:	e8 a5 d5 00 00       	call   c00215b0 <__udivdi3>
c001400b:	83 c4 14             	add    esp,0x14
c001400e:	50                   	push   eax
c001400f:	e8 d4 23 00 00       	call   c00163e8 <milliTenthSleep(unsigned int)>
c0014014:	31 c0                	xor    eax,eax
c0014016:	31 d2                	xor    edx,edx
c0014018:	83 c4 1c             	add    esp,0x1c
c001401b:	c3                   	ret    

c001401c <sysCallSpawn(regs*)>:
c001401c:	56                   	push   esi
c001401d:	53                   	push   ebx
c001401e:	50                   	push   eax
c001401f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014023:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0014026:	85 c0                	test   eax,eax
c0014028:	75 08                	jne    c0014032 <sysCallSpawn(regs*)+0x16>
c001402a:	59                   	pop    ecx
c001402b:	31 c0                	xor    eax,eax
c001402d:	31 d2                	xor    edx,edx
c001402f:	5b                   	pop    ebx
c0014030:	5e                   	pop    esi
c0014031:	c3                   	ret    
c0014032:	83 ec 0c             	sub    esp,0xc
c0014035:	68 1f 07 00 00       	push   0x71f
c001403a:	e8 58 57 ff ff       	call   c0009797 <malloc>
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	89 c6                	mov    esi,eax
c0014044:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0014047:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001404a:	85 c0                	test   eax,eax
c001404c:	75 32                	jne    c0014080 <sysCallSpawn(regs*)+0x64>
c001404e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014053:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014056:	52                   	push   edx
c0014057:	50                   	push   eax
c0014058:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001405b:	56                   	push   esi
c001405c:	e8 7f 1a 00 00       	call   c0015ae0 <Process::Process(char const*, Process*, char**)>
c0014061:	83 c4 10             	add    esp,0x10
c0014064:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001406b:	75 bd                	jne    c001402a <sysCallSpawn(regs*)+0xe>
c001406d:	83 ec 0c             	sub    esp,0xc
c0014070:	56                   	push   esi
c0014071:	e8 56 1f 00 00       	call   c0015fcc <Process::createUserThread()>
c0014076:	8b 06                	mov    eax,DWORD PTR [esi]
c0014078:	83 c4 10             	add    esp,0x10
c001407b:	99                   	cdq    
c001407c:	59                   	pop    ecx
c001407d:	5b                   	pop    ebx
c001407e:	5e                   	pop    esi
c001407f:	c3                   	ret    
c0014080:	31 c0                	xor    eax,eax
c0014082:	eb d2                	jmp    c0014056 <sysCallSpawn(regs*)+0x3a>

c0014084 <sysCallGetEnv(regs*)>:
c0014084:	57                   	push   edi
c0014085:	56                   	push   esi
c0014086:	53                   	push   ebx
c0014087:	83 ec 1c             	sub    esp,0x1c
c001408a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001408e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014093:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014096:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0014099:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001409c:	e8 36 e9 ff ff       	call   c00129d7 <Krnl::getProcessTotalEnvCount(Process*)>
c00140a1:	83 c4 10             	add    esp,0x10
c00140a4:	39 c7                	cmp    edi,eax
c00140a6:	7c 14                	jl     c00140bc <sysCallGetEnv(regs*)+0x38>
c00140a8:	85 f6                	test   esi,esi
c00140aa:	75 0b                	jne    c00140b7 <sysCallGetEnv(regs*)+0x33>
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	31 c0                	xor    eax,eax
c00140b1:	5b                   	pop    ebx
c00140b2:	31 d2                	xor    edx,edx
c00140b4:	5e                   	pop    esi
c00140b5:	5f                   	pop    edi
c00140b6:	c3                   	ret    
c00140b7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00140ba:	eb f0                	jmp    c00140ac <sysCallGetEnv(regs*)+0x28>
c00140bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00140c0:	52                   	push   edx
c00140c1:	57                   	push   edi
c00140c2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00140c8:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00140cb:	50                   	push   eax
c00140cc:	e8 26 e9 ff ff       	call   c00129f7 <Krnl::getProcessEnvPair(Process*, int)>
c00140d1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00140dc:	83 c4 0c             	add    esp,0xc
c00140df:	85 c9                	test   ecx,ecx
c00140e1:	75 23                	jne    c0014106 <sysCallGetEnv(regs*)+0x82>
c00140e3:	83 ec 0c             	sub    esp,0xc
c00140e6:	50                   	push   eax
c00140e7:	e8 d8 c3 fe ff       	call   c00004c4 <strlen>
c00140ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140ef:	89 c3                	mov    ebx,eax
c00140f1:	e8 ce c3 fe ff       	call   c00004c4 <strlen>
c00140f6:	83 c4 10             	add    esp,0x10
c00140f9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00140fd:	83 c4 10             	add    esp,0x10
c0014100:	31 d2                	xor    edx,edx
c0014102:	5b                   	pop    ebx
c0014103:	5e                   	pop    esi
c0014104:	5f                   	pop    edi
c0014105:	c3                   	ret    
c0014106:	83 ec 08             	sub    esp,0x8
c0014109:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001410c:	50                   	push   eax
c001410d:	56                   	push   esi
c001410e:	e8 51 c4 fe ff       	call   c0000564 <strcpy>
c0014113:	58                   	pop    eax
c0014114:	5a                   	pop    edx
c0014115:	68 bc 43 02 c0       	push   0xc00243bc
c001411a:	56                   	push   esi
c001411b:	e8 84 c5 fe ff       	call   c00006a4 <strcat>
c0014120:	59                   	pop    ecx
c0014121:	5b                   	pop    ebx
c0014122:	57                   	push   edi
c0014123:	56                   	push   esi
c0014124:	e8 7b c5 fe ff       	call   c00006a4 <strcat>
c0014129:	83 c4 10             	add    esp,0x10
c001412c:	e9 7b ff ff ff       	jmp    c00140ac <sysCallGetEnv(regs*)+0x28>

c0014131 <sysAppSettings(regs*)>:
c0014131:	57                   	push   edi
c0014132:	56                   	push   esi
c0014133:	56                   	push   esi
c0014134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014138:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001413b:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0014141:	25 e0 1f 00 00       	and    eax,0x1fe0
c0014146:	66 3d c0 09          	cmp    ax,0x9c0
c001414a:	75 2e                	jne    c001417a <sysAppSettings(regs*)+0x49>
c001414c:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0014152:	83 e0 1f             	and    eax,0x1f
c0014155:	3c 01                	cmp    al,0x1
c0014157:	74 2c                	je     c0014185 <sysAppSettings(regs*)+0x54>
c0014159:	3c 07                	cmp    al,0x7
c001415b:	0f 84 b3 00 00 00    	je     c0014214 <sysAppSettings(regs*)+0xe3>
c0014161:	84 c0                	test   al,al
c0014163:	0f 84 d2 00 00 00    	je     c001423b <sysAppSettings(regs*)+0x10a>
c0014169:	3c 08                	cmp    al,0x8
c001416b:	74 63                	je     c00141d0 <sysAppSettings(regs*)+0x9f>
c001416d:	59                   	pop    ecx
c001416e:	0f b6 c0             	movzx  eax,al
c0014171:	5e                   	pop    esi
c0014172:	05 e8 03 00 00       	add    eax,0x3e8
c0014177:	5f                   	pop    edi
c0014178:	99                   	cdq    
c0014179:	c3                   	ret    
c001417a:	b8 01 00 00 00       	mov    eax,0x1
c001417f:	59                   	pop    ecx
c0014180:	31 d2                	xor    edx,edx
c0014182:	5e                   	pop    esi
c0014183:	5f                   	pop    edi
c0014184:	c3                   	ret    
c0014185:	50                   	push   eax
c0014186:	68 00 01 00 00       	push   0x100
c001418b:	6a 00                	push   0x0
c001418d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014192:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014195:	83 c0 0c             	add    eax,0xc
c0014198:	50                   	push   eax
c0014199:	e8 0a c3 fe ff       	call   c00004a8 <memset>
c001419e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141a3:	b9 ff 00 00 00       	mov    ecx,0xff
c00141a8:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00141ab:	83 c7 0c             	add    edi,0xc
c00141ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141b5:	5a                   	pop    edx
c00141b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141b9:	59                   	pop    ecx
c00141ba:	8d 50 0c             	lea    edx,[eax+0xc]
c00141bd:	52                   	push   edx
c00141be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00141c4:	e8 31 62 ff ff       	call   c000a3fa <VgaText::setTitle(char*)>
c00141c9:	83 c4 10             	add    esp,0x10
c00141cc:	31 c0                	xor    eax,eax
c00141ce:	eb af                	jmp    c001417f <sysAppSettings(regs*)+0x4e>
c00141d0:	83 ec 08             	sub    esp,0x8
c00141d3:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00141d9:	83 e0 0f             	and    eax,0xf
c00141dc:	50                   	push   eax
c00141dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141e5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00141eb:	e8 fe 61 ff ff       	call   c000a3ee <VgaText::setTitleColour(VgaColour)>
c00141f0:	5f                   	pop    edi
c00141f1:	58                   	pop    eax
c00141f2:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00141f8:	c1 e8 04             	shr    eax,0x4
c00141fb:	83 e0 0f             	and    eax,0xf
c00141fe:	50                   	push   eax
c00141ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014204:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014207:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001420d:	e8 d0 61 ff ff       	call   c000a3e2 <VgaText::setTitleTextColour(VgaColour)>
c0014212:	eb b5                	jmp    c00141c9 <sysAppSettings(regs*)+0x98>
c0014214:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014219:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001421c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014222:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0014228:	c0 e8 06             	shr    al,0x6
c001422b:	83 e0 01             	and    eax,0x1
c001422e:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0014234:	31 c0                	xor    eax,eax
c0014236:	e9 44 ff ff ff       	jmp    c001417f <sysAppSettings(regs*)+0x4e>
c001423b:	b8 02 00 00 00       	mov    eax,0x2
c0014240:	e9 3a ff ff ff       	jmp    c001417f <sysAppSettings(regs*)+0x4e>

c0014245 <sysSetFatAttrib(regs*)>:
c0014245:	57                   	push   edi
c0014246:	56                   	push   esi
c0014247:	53                   	push   ebx
c0014248:	83 ec 1c             	sub    esp,0x1c
c001424b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001424f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014252:	68 14 01 00 00       	push   0x114
c0014257:	e8 3b 55 ff ff       	call   c0009797 <malloc>
c001425c:	83 c4 0c             	add    esp,0xc
c001425f:	89 c3                	mov    ebx,eax
c0014261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014266:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014269:	57                   	push   edi
c001426a:	53                   	push   ebx
c001426b:	e8 1c 8a ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0014270:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014273:	83 c4 0c             	add    esp,0xc
c0014276:	0f b6 d4             	movzx  edx,ah
c0014279:	0f b6 c0             	movzx  eax,al
c001427c:	52                   	push   edx
c001427d:	50                   	push   eax
c001427e:	53                   	push   ebx
c001427f:	e8 f4 8c ff ff       	call   c000cf78 <File::chfatattr(unsigned char, unsigned char)>
c0014284:	83 c4 10             	add    esp,0x10
c0014287:	85 db                	test   ebx,ebx
c0014289:	74 14                	je     c001429f <sysSetFatAttrib(regs*)+0x5a>
c001428b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001428f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014291:	83 ec 0c             	sub    esp,0xc
c0014294:	53                   	push   ebx
c0014295:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0014298:	83 c4 10             	add    esp,0x10
c001429b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001429f:	85 c0                	test   eax,eax
c00142a1:	0f 95 c0             	setne  al
c00142a4:	31 d2                	xor    edx,edx
c00142a6:	0f b6 c0             	movzx  eax,al
c00142a9:	f7 d8                	neg    eax
c00142ab:	83 d2 00             	adc    edx,0x0
c00142ae:	83 c4 10             	add    esp,0x10
c00142b1:	f7 da                	neg    edx
c00142b3:	5b                   	pop    ebx
c00142b4:	5e                   	pop    esi
c00142b5:	5f                   	pop    edi
c00142b6:	c3                   	ret    

c00142b7 <sysPipe(regs*)>:
c00142b7:	57                   	push   edi
c00142b8:	56                   	push   esi
c00142b9:	53                   	push   ebx
c00142ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142be:	83 ec 0c             	sub    esp,0xc
c00142c1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00142c4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00142c7:	6a 20                	push   0x20
c00142c9:	e8 c9 54 ff ff       	call   c0009797 <malloc>
c00142ce:	89 c3                	mov    ebx,eax
c00142d0:	58                   	pop    eax
c00142d1:	5a                   	pop    edx
c00142d2:	68 00 50 00 00       	push   0x5000
c00142d7:	53                   	push   ebx
c00142d8:	e8 39 5f ff ff       	call   c000a216 <Pipe::Pipe(int)>
c00142dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142e0:	e8 95 6c ff ff       	call   c000af7a <UnixFile::getFileDescriptor()>
c00142e5:	89 07                	mov    DWORD PTR [edi],eax
c00142e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142ea:	e8 8b 6c ff ff       	call   c000af7a <UnixFile::getFileDescriptor()>
c00142ef:	83 c4 10             	add    esp,0x10
c00142f2:	89 06                	mov    DWORD PTR [esi],eax
c00142f4:	31 d2                	xor    edx,edx
c00142f6:	5b                   	pop    ebx
c00142f7:	31 c0                	xor    eax,eax
c00142f9:	5e                   	pop    esi
c00142fa:	5f                   	pop    edi
c00142fb:	c3                   	ret    

c00142fc <sysGetUnixTime(regs*)>:
c00142fc:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0014301:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014307:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001430b:	e9 da 93 ff ff       	jmp    c000d6ea <Clock::timeInSecondsLocal()>

c0014310 <string_ends_with(char const*, char const*)>:
c0014310:	57                   	push   edi
c0014311:	56                   	push   esi
c0014312:	53                   	push   ebx
c0014313:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014317:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001431b:	83 ec 0c             	sub    esp,0xc
c001431e:	53                   	push   ebx
c001431f:	e8 a0 c1 fe ff       	call   c00004c4 <strlen>
c0014324:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014327:	89 c6                	mov    esi,eax
c0014329:	e8 96 c1 fe ff       	call   c00004c4 <strlen>
c001432e:	83 c4 10             	add    esp,0x10
c0014331:	39 c6                	cmp    esi,eax
c0014333:	7d 06                	jge    c001433b <string_ends_with(char const*, char const*)+0x2b>
c0014335:	5b                   	pop    ebx
c0014336:	31 c0                	xor    eax,eax
c0014338:	5e                   	pop    esi
c0014339:	5f                   	pop    edi
c001433a:	c3                   	ret    
c001433b:	83 ec 08             	sub    esp,0x8
c001433e:	29 c6                	sub    esi,eax
c0014340:	57                   	push   edi
c0014341:	01 f3                	add    ebx,esi
c0014343:	53                   	push   ebx
c0014344:	e8 a7 c2 fe ff       	call   c00005f0 <strcmp>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	85 c0                	test   eax,eax
c001434e:	5b                   	pop    ebx
c001434f:	0f 94 c0             	sete   al
c0014352:	5e                   	pop    esi
c0014353:	0f b6 c0             	movzx  eax,al
c0014356:	5f                   	pop    edi
c0014357:	c3                   	ret    

c0014358 <sysCallOpen(regs*)>:
c0014358:	56                   	push   esi
c0014359:	53                   	push   ebx
c001435a:	81 ec 04 01 00 00    	sub    esp,0x104
c0014360:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0014367:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001436a:	85 c9                	test   ecx,ecx
c001436c:	0f 84 ad 01 00 00    	je     c001451f <sysCallOpen(regs*)+0x1c7>
c0014372:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0014375:	85 c0                	test   eax,eax
c0014377:	0f 84 a2 01 00 00    	je     c001451f <sysCallOpen(regs*)+0x1c7>
c001437d:	52                   	push   edx
c001437e:	68 be 43 02 c0       	push   0xc00243be
c0014383:	50                   	push   eax
c0014384:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014388:	56                   	push   esi
c0014389:	e8 54 87 ff ff       	call   c000cae2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001438e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014391:	e8 2e c1 fe ff       	call   c00004c4 <strlen>
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	48                   	dec    eax
c001439a:	74 1d                	je     c00143b9 <sysCallOpen(regs*)+0x61>
c001439c:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001439f:	eb 0f                	jmp    c00143b0 <sysCallOpen(regs*)+0x58>
c00143a1:	80 fa 3a             	cmp    dl,0x3a
c00143a4:	74 0f                	je     c00143b5 <sysCallOpen(regs*)+0x5d>
c00143a6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00143aa:	48                   	dec    eax
c00143ab:	74 0c                	je     c00143b9 <sysCallOpen(regs*)+0x61>
c00143ad:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00143b0:	80 fa 2e             	cmp    dl,0x2e
c00143b3:	75 ec                	jne    c00143a1 <sysCallOpen(regs*)+0x49>
c00143b5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00143b9:	83 ec 08             	sub    esp,0x8
c00143bc:	68 c2 43 02 c0       	push   0xc00243c2
c00143c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00143c4:	e8 47 ff ff ff       	call   c0014310 <string_ends_with(char const*, char const*)>
c00143c9:	83 c4 10             	add    esp,0x10
c00143cc:	85 c0                	test   eax,eax
c00143ce:	74 1d                	je     c00143ed <sysCallOpen(regs*)+0x95>
c00143d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143d3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00143d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143e0:	81 c4 04 01 00 00    	add    esp,0x104
c00143e6:	31 c0                	xor    eax,eax
c00143e8:	31 d2                	xor    edx,edx
c00143ea:	5b                   	pop    ebx
c00143eb:	5e                   	pop    esi
c00143ec:	c3                   	ret    
c00143ed:	83 ec 08             	sub    esp,0x8
c00143f0:	68 c7 43 02 c0       	push   0xc00243c7
c00143f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00143f8:	e8 13 ff ff ff       	call   c0014310 <string_ends_with(char const*, char const*)>
c00143fd:	83 c4 10             	add    esp,0x10
c0014400:	85 c0                	test   eax,eax
c0014402:	75 cc                	jne    c00143d0 <sysCallOpen(regs*)+0x78>
c0014404:	83 ec 08             	sub    esp,0x8
c0014407:	68 c3 43 02 c0       	push   0xc00243c3
c001440c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001440f:	e8 dc c1 fe ff       	call   c00005f0 <strcmp>
c0014414:	83 c4 10             	add    esp,0x10
c0014417:	85 c0                	test   eax,eax
c0014419:	74 b5                	je     c00143d0 <sysCallOpen(regs*)+0x78>
c001441b:	83 ec 08             	sub    esp,0x8
c001441e:	68 c2 43 02 c0       	push   0xc00243c2
c0014423:	56                   	push   esi
c0014424:	e8 e7 fe ff ff       	call   c0014310 <string_ends_with(char const*, char const*)>
c0014429:	83 c4 10             	add    esp,0x10
c001442c:	85 c0                	test   eax,eax
c001442e:	75 a0                	jne    c00143d0 <sysCallOpen(regs*)+0x78>
c0014430:	83 ec 08             	sub    esp,0x8
c0014433:	68 cc 43 02 c0       	push   0xc00243cc
c0014438:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001443b:	e8 d0 fe ff ff       	call   c0014310 <string_ends_with(char const*, char const*)>
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	85 c0                	test   eax,eax
c0014445:	0f 85 e7 00 00 00    	jne    c0014532 <sysCallOpen(regs*)+0x1da>
c001444b:	83 ec 08             	sub    esp,0x8
c001444e:	68 d1 43 02 c0       	push   0xc00243d1
c0014453:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014456:	e8 b5 fe ff ff       	call   c0014310 <string_ends_with(char const*, char const*)>
c001445b:	83 c4 10             	add    esp,0x10
c001445e:	85 c0                	test   eax,eax
c0014460:	0f 85 cc 00 00 00    	jne    c0014532 <sysCallOpen(regs*)+0x1da>
c0014466:	83 ec 08             	sub    esp,0x8
c0014469:	68 cd 43 02 c0       	push   0xc00243cd
c001446e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014471:	e8 7a c1 fe ff       	call   c00005f0 <strcmp>
c0014476:	83 c4 10             	add    esp,0x10
c0014479:	85 c0                	test   eax,eax
c001447b:	0f 84 b1 00 00 00    	je     c0014532 <sysCallOpen(regs*)+0x1da>
c0014481:	83 ec 08             	sub    esp,0x8
c0014484:	68 cc 43 02 c0       	push   0xc00243cc
c0014489:	56                   	push   esi
c001448a:	e8 81 fe ff ff       	call   c0014310 <string_ends_with(char const*, char const*)>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	85 c0                	test   eax,eax
c0014494:	0f 85 98 00 00 00    	jne    c0014532 <sysCallOpen(regs*)+0x1da>
c001449a:	83 ec 0c             	sub    esp,0xc
c001449d:	68 14 01 00 00       	push   0x114
c00144a2:	e8 f0 52 ff ff       	call   c0009797 <malloc>
c00144a7:	83 c4 0c             	add    esp,0xc
c00144aa:	89 c6                	mov    esi,eax
c00144ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144b1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144b7:	56                   	push   esi
c00144b8:	e8 cf 87 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c00144bd:	83 c4 10             	add    esp,0x10
c00144c0:	85 f6                	test   esi,esi
c00144c2:	74 5b                	je     c001451f <sysCallOpen(regs*)+0x1c7>
c00144c4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00144c7:	0f b6 c2             	movzx  eax,dl
c00144ca:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00144cd:	89 d0                	mov    eax,edx
c00144cf:	83 e0 01             	and    eax,0x1
c00144d2:	f6 c2 02             	test   dl,0x2
c00144d5:	74 03                	je     c00144da <sysCallOpen(regs*)+0x182>
c00144d7:	83 c8 02             	or     eax,0x2
c00144da:	f6 c2 04             	test   dl,0x4
c00144dd:	74 03                	je     c00144e2 <sysCallOpen(regs*)+0x18a>
c00144df:	83 c8 04             	or     eax,0x4
c00144e2:	f6 c2 08             	test   dl,0x8
c00144e5:	74 03                	je     c00144ea <sysCallOpen(regs*)+0x192>
c00144e7:	83 c8 0a             	or     eax,0xa
c00144ea:	83 e2 10             	and    edx,0x10
c00144ed:	74 03                	je     c00144f2 <sysCallOpen(regs*)+0x19a>
c00144ef:	83 c8 12             	or     eax,0x12
c00144f2:	83 ec 08             	sub    esp,0x8
c00144f5:	50                   	push   eax
c00144f6:	56                   	push   esi
c00144f7:	e8 6a 88 ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	85 c0                	test   eax,eax
c0014501:	75 1c                	jne    c001451f <sysCallOpen(regs*)+0x1c7>
c0014503:	83 ec 0c             	sub    esp,0xc
c0014506:	56                   	push   esi
c0014507:	e8 6e 6a ff ff       	call   c000af7a <UnixFile::getFileDescriptor()>
c001450c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001450f:	83 c4 10             	add    esp,0x10
c0014512:	89 02                	mov    DWORD PTR [edx],eax
c0014514:	c1 f8 1f             	sar    eax,0x1f
c0014517:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001451a:	e9 c1 fe ff ff       	jmp    c00143e0 <sysCallOpen(regs*)+0x88>
c001451f:	81 c4 04 01 00 00    	add    esp,0x104
c0014525:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001452a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001452f:	5b                   	pop    ebx
c0014530:	5e                   	pop    esi
c0014531:	c3                   	ret    
c0014532:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014535:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001453b:	e9 99 fe ff ff       	jmp    c00143d9 <sysCallOpen(regs*)+0x81>

c0014540 <Sys::loadSyscalls()>:
c0014540:	c7 05 60 8f 02 c0 b1 37 01 c0 	mov    DWORD PTR ds:0xc0028f60,0xc00137b1
c001454a:	c7 05 64 8f 02 c0 a6 33 01 c0 	mov    DWORD PTR ds:0xc0028f64,0xc00133a6
c0014554:	c7 05 68 8f 02 c0 97 35 01 c0 	mov    DWORD PTR ds:0xc0028f68,0xc0013597
c001455e:	c7 05 6c 8f 02 c0 e7 36 01 c0 	mov    DWORD PTR ds:0xc0028f6c,0xc00136e7
c0014568:	c7 05 70 8f 02 c0 2f 35 01 c0 	mov    DWORD PTR ds:0xc0028f70,0xc001352f
c0014572:	c7 05 74 8f 02 c0 dd 33 01 c0 	mov    DWORD PTR ds:0xc0028f74,0xc00133dd
c001457c:	c7 05 78 8f 02 c0 be 33 01 c0 	mov    DWORD PTR ds:0xc0028f78,0xc00133be
c0014586:	c7 05 7c 8f 02 c0 ec 35 01 c0 	mov    DWORD PTR ds:0xc0028f7c,0xc00135ec
c0014590:	c7 05 84 8f 02 c0 74 3c 01 c0 	mov    DWORD PTR ds:0xc0028f84,0xc0013c74
c001459a:	c7 05 80 8f 02 c0 58 43 01 c0 	mov    DWORD PTR ds:0xc0028f80,0xc0014358
c00145a4:	c7 05 88 8f 02 c0 d4 3c 01 c0 	mov    DWORD PTR ds:0xc0028f88,0xc0013cd4
c00145ae:	c7 05 8c 8f 02 c0 b7 39 01 c0 	mov    DWORD PTR ds:0xc0028f8c,0xc00139b7
c00145b8:	c7 05 90 8f 02 c0 e9 37 01 c0 	mov    DWORD PTR ds:0xc0028f90,0xc00137e9
c00145c2:	c7 05 94 8f 02 c0 ee 37 01 c0 	mov    DWORD PTR ds:0xc0028f94,0xc00137ee
c00145cc:	c7 05 98 8f 02 c0 9d 3d 01 c0 	mov    DWORD PTR ds:0xc0028f98,0xc0013d9d
c00145d6:	c7 05 9c 8f 02 c0 49 3d 01 c0 	mov    DWORD PTR ds:0xc0028f9c,0xc0013d49
c00145e0:	c7 05 a0 8f 02 c0 90 3a 01 c0 	mov    DWORD PTR ds:0xc0028fa0,0xc0013a90
c00145ea:	c7 05 a4 8f 02 c0 e7 3a 01 c0 	mov    DWORD PTR ds:0xc0028fa4,0xc0013ae7
c00145f4:	c7 05 a8 8f 02 c0 53 3b 01 c0 	mov    DWORD PTR ds:0xc0028fa8,0xc0013b53
c00145fe:	c7 05 ac 8f 02 c0 f3 37 01 c0 	mov    DWORD PTR ds:0xc0028fac,0xc00137f3
c0014608:	c7 05 b0 8f 02 c0 0d 3e 01 c0 	mov    DWORD PTR ds:0xc0028fb0,0xc0013e0d
c0014612:	c7 05 b4 8f 02 c0 27 3e 01 c0 	mov    DWORD PTR ds:0xc0028fb4,0xc0013e27
c001461c:	c7 05 b8 8f 02 c0 27 3e 01 c0 	mov    DWORD PTR ds:0xc0028fb8,0xc0013e27
c0014626:	c7 05 bc 8f 02 c0 5c 3e 01 c0 	mov    DWORD PTR ds:0xc0028fbc,0xc0013e5c
c0014630:	c7 05 c0 8f 02 c0 c0 3e 01 c0 	mov    DWORD PTR ds:0xc0028fc0,0xc0013ec0
c001463a:	c7 05 c4 8f 02 c0 fd 37 01 c0 	mov    DWORD PTR ds:0xc0028fc4,0xc00137fd
c0014644:	c7 05 c8 8f 02 c0 24 3f 01 c0 	mov    DWORD PTR ds:0xc0028fc8,0xc0013f24
c001464e:	c7 05 cc 8f 02 c0 74 39 01 c0 	mov    DWORD PTR ds:0xc0028fcc,0xc0013974
c0014658:	c7 05 d0 8f 02 c0 70 3f 01 c0 	mov    DWORD PTR ds:0xc0028fd0,0xc0013f70
c0014662:	c7 05 d4 8f 02 c0 36 3a 01 c0 	mov    DWORD PTR ds:0xc0028fd4,0xc0013a36
c001466c:	c7 05 d8 8f 02 c0 f3 3f 01 c0 	mov    DWORD PTR ds:0xc0028fd8,0xc0013ff3
c0014676:	c7 05 dc 8f 02 c0 c5 3b 01 c0 	mov    DWORD PTR ds:0xc0028fdc,0xc0013bc5
c0014680:	c7 05 e0 8f 02 c0 1c 40 01 c0 	mov    DWORD PTR ds:0xc0028fe0,0xc001401c
c001468a:	c7 05 e4 8f 02 c0 84 40 01 c0 	mov    DWORD PTR ds:0xc0028fe4,0xc0014084
c0014694:	c7 05 e8 8f 02 c0 31 41 01 c0 	mov    DWORD PTR ds:0xc0028fe8,0xc0014131
c001469e:	c7 05 ec 8f 02 c0 0d 38 01 c0 	mov    DWORD PTR ds:0xc0028fec,0xc001380d
c00146a8:	c7 05 f0 8f 02 c0 77 38 01 c0 	mov    DWORD PTR ds:0xc0028ff0,0xc0013877
c00146b2:	c7 05 f4 8f 02 c0 c1 38 01 c0 	mov    DWORD PTR ds:0xc0028ff4,0xc00138c1
c00146bc:	c7 05 f8 8f 02 c0 45 42 01 c0 	mov    DWORD PTR ds:0xc0028ff8,0xc0014245
c00146c6:	c7 05 fc 8f 02 c0 42 3e 01 c0 	mov    DWORD PTR ds:0xc0028ffc,0xc0013e42
c00146d0:	c7 05 00 90 02 c0 16 39 01 c0 	mov    DWORD PTR ds:0xc0029000,0xc0013916
c00146da:	c7 05 04 90 02 c0 b7 42 01 c0 	mov    DWORD PTR ds:0xc0029004,0xc00142b7
c00146e4:	c7 05 08 90 02 c0 fc 42 01 c0 	mov    DWORD PTR ds:0xc0029008,0xc00142fc
c00146ee:	c7 05 0c 90 02 c0 87 34 01 c0 	mov    DWORD PTR ds:0xc002900c,0xc0013487
c00146f8:	c7 05 10 90 02 c0 08 36 01 c0 	mov    DWORD PTR ds:0xc0029010,0xc0013608
c0014702:	c7 05 14 90 02 c0 9d 36 01 c0 	mov    DWORD PTR ds:0xc0029014,0xc001369d
c001470c:	c7 05 18 90 02 c0 70 33 01 c0 	mov    DWORD PTR ds:0xc0029018,0xc0013370
c0014716:	c7 05 1c 90 02 c0 4f 37 01 c0 	mov    DWORD PTR ds:0xc002901c,0xc001374f
c0014720:	c7 05 20 90 02 c0 e9 33 01 c0 	mov    DWORD PTR ds:0xc0029020,0xc00133e9
c001472a:	c7 05 24 90 02 c0 03 34 01 c0 	mov    DWORD PTR ds:0xc0029024,0xc0013403
c0014734:	c3                   	ret    

c0014735 <Sys::systemCall(regs*, void*)>:
c0014735:	53                   	push   ebx
c0014736:	83 ec 08             	sub    esp,0x8
c0014739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001473d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014740:	83 f8 7f             	cmp    eax,0x7f
c0014743:	77 16                	ja     c001475b <Sys::systemCall(regs*, void*)+0x26>
c0014745:	8b 14 85 60 8f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd70a0]
c001474c:	85 d2                	test   edx,edx
c001474e:	74 0b                	je     c001475b <Sys::systemCall(regs*, void*)+0x26>
c0014750:	83 ec 0c             	sub    esp,0xc
c0014753:	53                   	push   ebx
c0014754:	ff d2                	call   edx
c0014756:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014759:	eb 0d                	jmp    c0014768 <Sys::systemCall(regs*, void*)+0x33>
c001475b:	52                   	push   edx
c001475c:	52                   	push   edx
c001475d:	50                   	push   eax
c001475e:	68 d6 43 02 c0       	push   0xc00243d6
c0014763:	e8 b9 7f ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0014768:	83 c4 10             	add    esp,0x10
c001476b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014770:	31 d2                	xor    edx,edx
c0014772:	83 c4 08             	add    esp,0x8
c0014775:	5b                   	pop    ebx
c0014776:	c3                   	ret    

c0014777 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014777:	55                   	push   ebp
c0014778:	57                   	push   edi
c0014779:	56                   	push   esi
c001477a:	53                   	push   ebx
c001477b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014781:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014788:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001478f:	85 c0                	test   eax,eax
c0014791:	0f 95 c1             	setne  cl
c0014794:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001479c:	0f 94 c2             	sete   dl
c001479f:	84 d1                	test   cl,dl
c00147a1:	74 23                	je     c00147c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00147a3:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00147a9:	74 1b                	je     c00147c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00147ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00147b1:	89 da                	mov    edx,ebx
c00147b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00147b9:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00147bf:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00147c6:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00147cd:	05 ff 0f 00 00       	add    eax,0xfff
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147d9:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00147df:	c1 e8 0c             	shr    eax,0xc
c00147e2:	89 fe                	mov    esi,edi
c00147e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147e8:	c1 ee 0c             	shr    esi,0xc
c00147eb:	6a 01                	push   0x1
c00147ed:	e8 d3 6b ff ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c00147f2:	89 c5                	mov    ebp,eax
c00147f4:	58                   	pop    eax
c00147f5:	5a                   	pop    edx
c00147f6:	56                   	push   esi
c00147f7:	68 ea 43 02 c0       	push   0xc00243ea
c00147fc:	e8 20 7f ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0014801:	59                   	pop    ecx
c0014802:	58                   	pop    eax
c0014803:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014807:	68 fc 43 02 c0       	push   0xc00243fc
c001480c:	e8 10 7f ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001481a:	0f 86 31 01 00 00    	jbe    c0014951 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0014820:	c1 e6 0c             	shl    esi,0xc
c0014823:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014826:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0014829:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001482d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014834:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014837:	01 df                	add    edi,ebx
c0014839:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001483c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0014840:	0f 84 08 01 00 00    	je     c001494e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0014846:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001484c:	76 05                	jbe    c0014853 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001484e:	bf 00 10 00 00       	mov    edi,0x1000
c0014853:	83 ec 0c             	sub    esp,0xc
c0014856:	31 d2                	xor    edx,edx
c0014858:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001485f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014861:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014865:	50                   	push   eax
c0014866:	8d 74 24 30          	lea    esi,[esp+0x30]
c001486a:	56                   	push   esi
c001486b:	52                   	push   edx
c001486c:	57                   	push   edi
c001486d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014874:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014877:	83 c4 20             	add    esp,0x20
c001487a:	85 c0                	test   eax,eax
c001487c:	74 0a                	je     c0014888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001487e:	53                   	push   ebx
c001487f:	53                   	push   ebx
c0014880:	50                   	push   eax
c0014881:	68 0e 44 02 c0       	push   0xc002440e
c0014886:	eb 0f                	jmp    c0014897 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0014888:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001488c:	74 20                	je     c00148ae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001488e:	51                   	push   ecx
c001488f:	51                   	push   ecx
c0014890:	6a 00                	push   0x0
c0014892:	68 39 44 02 c0       	push   0xc0024439
c0014897:	e8 85 7e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001489c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001489f:	e8 15 6e ff ff       	call   c000b6b9 <Virt::freeKernelVirtualPages(unsigned long)>
c00148a4:	83 c4 10             	add    esp,0x10
c00148a7:	31 c0                	xor    eax,eax
c00148a9:	e9 68 01 00 00       	jmp    c0014a16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00148ae:	fa                   	cli    
c00148af:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00148b5:	e8 0e 53 ff ff       	call   c0009bc8 <Phys::allocatePage()>
c00148ba:	6a 07                	push   0x7
c00148bc:	89 c7                	mov    edi,eax
c00148be:	55                   	push   ebp
c00148bf:	50                   	push   eax
c00148c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ce:	e8 5d 71 ff ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148d3:	83 c4 0c             	add    esp,0xc
c00148d6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148e3:	6a 00                	push   0x0
c00148e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148ed:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148f3:	e8 92 6f ff ff       	call   c000b88a <VAS::mapOtherVASIn(bool, VAS*)>
c00148f8:	58                   	pop    eax
c00148f9:	5a                   	pop    edx
c00148fa:	68 07 0c 00 00       	push   0xc07
c00148ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014903:	57                   	push   edi
c0014904:	89 ef                	mov    edi,ebp
c0014906:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001490d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014913:	6a 00                	push   0x0
c0014915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001491a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001491d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014923:	e8 c6 74 ff ff       	call   c000bdee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014928:	b9 00 10 00 00       	mov    ecx,0x1000
c001492d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001492f:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0014934:	83 c4 20             	add    esp,0x20
c0014937:	48                   	dec    eax
c0014938:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001493d:	85 c0                	test   eax,eax
c001493f:	75 01                	jne    c0014942 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0014941:	fb                   	sti    
c0014942:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0014949:	e9 df fe ff ff       	jmp    c001482d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001494e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0014951:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0014959:	0f 86 a9 00 00 00    	jbe    c0014a08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001495f:	fa                   	cli    
c0014960:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0014966:	51                   	push   ecx
c0014967:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001496e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014974:	6a 00                	push   0x0
c0014976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001497b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001497e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014984:	e8 01 6f ff ff       	call   c000b88a <VAS::mapOtherVASIn(bool, VAS*)>
c0014989:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001498d:	c1 e6 0c             	shl    esi,0xc
c0014990:	01 de                	add    esi,ebx
c0014992:	83 c4 10             	add    esp,0x10
c0014995:	39 de                	cmp    esi,ebx
c0014997:	74 61                	je     c00149fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014999:	e8 2a 52 ff ff       	call   c0009bc8 <Phys::allocatePage()>
c001499e:	6a 07                	push   0x7
c00149a0:	89 c7                	mov    edi,eax
c00149a2:	55                   	push   ebp
c00149a3:	50                   	push   eax
c00149a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149b2:	e8 79 70 ff ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c00149b7:	58                   	pop    eax
c00149b8:	5a                   	pop    edx
c00149b9:	68 07 0c 00 00       	push   0xc07
c00149be:	53                   	push   ebx
c00149bf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00149c5:	57                   	push   edi
c00149c6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00149cd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149d3:	6a 00                	push   0x0
c00149d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149e3:	e8 06 74 ff ff       	call   c000bdee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00149e8:	83 c4 1c             	add    esp,0x1c
c00149eb:	68 00 10 00 00       	push   0x1000
c00149f0:	6a 00                	push   0x0
c00149f2:	55                   	push   ebp
c00149f3:	e8 b0 ba fe ff       	call   c00004a8 <memset>
c00149f8:	eb 98                	jmp    c0014992 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00149fa:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00149ff:	48                   	dec    eax
c0014a00:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0014a05:	75 01                	jne    c0014a08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0014a07:	fb                   	sti    
c0014a08:	83 ec 0c             	sub    esp,0xc
c0014a0b:	55                   	push   ebp
c0014a0c:	e8 a8 6c ff ff       	call   c000b6b9 <Virt::freeKernelVirtualPages(unsigned long)>
c0014a11:	83 c4 10             	add    esp,0x10
c0014a14:	b0 01                	mov    al,0x1
c0014a16:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014a1c:	5b                   	pop    ebx
c0014a1d:	5e                   	pop    esi
c0014a1e:	5f                   	pop    edi
c0014a1f:	5d                   	pop    ebp
c0014a20:	c3                   	ret    

c0014a21 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a21:	55                   	push   ebp
c0014a22:	57                   	push   edi
c0014a23:	56                   	push   esi
c0014a24:	53                   	push   ebx
c0014a25:	83 ec 48             	sub    esp,0x48
c0014a28:	68 14 01 00 00       	push   0x114
c0014a2d:	e8 65 4d ff ff       	call   c0009797 <malloc>
c0014a32:	83 c4 0c             	add    esp,0xc
c0014a35:	89 c6                	mov    esi,eax
c0014a37:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a3f:	50                   	push   eax
c0014a40:	e8 47 82 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0014a45:	58                   	pop    eax
c0014a46:	5a                   	pop    edx
c0014a47:	6a 01                	push   0x1
c0014a49:	56                   	push   esi
c0014a4a:	e8 17 83 ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c0014a4f:	83 c4 10             	add    esp,0x10
c0014a52:	85 c0                	test   eax,eax
c0014a54:	0f 85 47 01 00 00    	jne    c0014ba1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014a5a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a62:	83 ec 0c             	sub    esp,0xc
c0014a65:	6a 34                	push   0x34
c0014a67:	e8 2b 4d ff ff       	call   c0009797 <malloc>
c0014a6c:	89 c3                	mov    ebx,eax
c0014a6e:	58                   	pop    eax
c0014a6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a71:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014a75:	57                   	push   edi
c0014a76:	53                   	push   ebx
c0014a77:	6a 00                	push   0x0
c0014a79:	6a 34                	push   0x34
c0014a7b:	56                   	push   esi
c0014a7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a7f:	83 c4 20             	add    esp,0x20
c0014a82:	85 c0                	test   eax,eax
c0014a84:	0f 85 17 01 00 00    	jne    c0014ba1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014a8a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a90:	0f 85 0b 01 00 00    	jne    c0014ba1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014a96:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a99:	85 c0                	test   eax,eax
c0014a9b:	0f 84 00 01 00 00    	je     c0014ba1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014aa1:	31 d2                	xor    edx,edx
c0014aa3:	55                   	push   ebp
c0014aa4:	52                   	push   edx
c0014aa5:	50                   	push   eax
c0014aa6:	56                   	push   esi
c0014aa7:	e8 78 83 ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0014aac:	83 c4 10             	add    esp,0x10
c0014aaf:	85 c0                	test   eax,eax
c0014ab1:	0f 85 ea 00 00 00    	jne    c0014ba1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014ab7:	83 ec 0c             	sub    esp,0xc
c0014aba:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014abd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014ac1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ac5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ac9:	0f af c2             	imul   eax,edx
c0014acc:	50                   	push   eax
c0014acd:	e8 c5 4c ff ff       	call   c0009797 <malloc>
c0014ad2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014ad4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014ad8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014adb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014adf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014ae3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ae7:	0f af c2             	imul   eax,edx
c0014aea:	99                   	cdq    
c0014aeb:	52                   	push   edx
c0014aec:	50                   	push   eax
c0014aed:	56                   	push   esi
c0014aee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014af1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014af4:	83 c4 20             	add    esp,0x20
c0014af7:	85 c0                	test   eax,eax
c0014af9:	0f 84 a2 00 00 00    	je     c0014ba1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014aff:	31 d2                	xor    edx,edx
c0014b01:	51                   	push   ecx
c0014b02:	52                   	push   edx
c0014b03:	50                   	push   eax
c0014b04:	56                   	push   esi
c0014b05:	e8 1a 83 ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	85 c0                	test   eax,eax
c0014b0f:	0f 85 8c 00 00 00    	jne    c0014ba1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014b15:	83 ec 0c             	sub    esp,0xc
c0014b18:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b1c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b20:	31 ed                	xor    ebp,ebp
c0014b22:	0f af c2             	imul   eax,edx
c0014b25:	50                   	push   eax
c0014b26:	e8 6c 4c ff ff       	call   c0009797 <malloc>
c0014b2b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b38:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b3c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b40:	0f af c2             	imul   eax,edx
c0014b43:	99                   	cdq    
c0014b44:	52                   	push   edx
c0014b45:	50                   	push   eax
c0014b46:	56                   	push   esi
c0014b47:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b4a:	83 c4 20             	add    esp,0x20
c0014b4d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b55:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0014b59:	0f 86 80 00 00 00    	jbe    c0014bdf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0014b5f:	0f b7 fd             	movzx  edi,bp
c0014b62:	c1 e7 05             	shl    edi,0x5
c0014b65:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014b69:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014b6c:	75 6b                	jne    c0014bd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0014b6e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014b71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b75:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b7c:	52                   	push   edx
c0014b7d:	31 d2                	xor    edx,edx
c0014b7f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b82:	52                   	push   edx
c0014b83:	50                   	push   eax
c0014b84:	56                   	push   esi
c0014b85:	e8 9a 82 ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	85 c0                	test   eax,eax
c0014b8f:	74 17                	je     c0014ba8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0014b91:	83 ec 0c             	sub    esp,0xc
c0014b94:	68 65 44 02 c0       	push   0xc0024465
c0014b99:	e8 83 7b ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0014b9e:	83 c4 10             	add    esp,0x10
c0014ba1:	31 c0                	xor    eax,eax
c0014ba3:	e9 87 00 00 00       	jmp    c0014c2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0014ba8:	83 ec 0c             	sub    esp,0xc
c0014bab:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014bae:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014bb1:	50                   	push   eax
c0014bb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014bb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bba:	56                   	push   esi
c0014bbb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014bbf:	e8 b3 fb ff ff       	call   c0014777 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014bc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bc8:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014bcc:	83 c4 20             	add    esp,0x20
c0014bcf:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014bd3:	73 04                	jae    c0014bd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0014bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014bd9:	45                   	inc    ebp
c0014bda:	e9 76 ff ff ff       	jmp    c0014b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014bdf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014be3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014be7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014beb:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014bf1:	83 ec 0c             	sub    esp,0xc
c0014bf4:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014bfa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014bff:	05 00 10 00 00       	add    eax,0x1000
c0014c04:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014c07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c0b:	e8 97 4b ff ff       	call   c00097a7 <free>
c0014c10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c13:	e8 8f 4b ff ff       	call   c00097a7 <free>
c0014c18:	58                   	pop    eax
c0014c19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c1d:	e8 85 4b ff ff       	call   c00097a7 <free>
c0014c22:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c25:	e8 9a 81 ff ff       	call   c000cdc4 <File::close()>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	b0 01                	mov    al,0x1
c0014c2f:	83 c4 3c             	add    esp,0x3c
c0014c32:	5b                   	pop    ebx
c0014c33:	5e                   	pop    esi
c0014c34:	5f                   	pop    edi
c0014c35:	5d                   	pop    ebp
c0014c36:	c3                   	ret    

c0014c37 <Thr::runtimeReferenceHelper()>:
c0014c37:	83 ec 18             	sub    esp,0x18
c0014c3a:	68 6d 44 02 c0       	push   0xc002446d
c0014c3f:	e8 dd 7a ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0014c44:	fa                   	cli    
c0014c45:	83 c4 10             	add    esp,0x10
c0014c48:	eb fe                	jmp    c0014c48 <Thr::runtimeReferenceHelper()+0x11>

c0014c4a <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c4a:	57                   	push   edi
c0014c4b:	56                   	push   esi
c0014c4c:	53                   	push   ebx
c0014c4d:	31 db                	xor    ebx,ebx
c0014c4f:	39 1d 00 99 02 c0    	cmp    DWORD PTR ds:0xc0029900,ebx
c0014c55:	7e 3c                	jle    c0014c93 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c57:	8b 34 9d 80 98 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6780]
c0014c5e:	31 ff                	xor    edi,edi
c0014c60:	39 3c 9d 80 97 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6880],edi
c0014c67:	7e 27                	jle    c0014c90 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c69:	50                   	push   eax
c0014c6a:	50                   	push   eax
c0014c6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c71:	03 04 9d 00 98 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6800]
c0014c78:	50                   	push   eax
c0014c79:	e8 72 b9 fe ff       	call   c00005f0 <strcmp>
c0014c7e:	83 c4 10             	add    esp,0x10
c0014c81:	85 c0                	test   eax,eax
c0014c83:	75 05                	jne    c0014c8a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c85:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c88:	eb 0b                	jmp    c0014c95 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c8a:	83 c6 10             	add    esi,0x10
c0014c8d:	47                   	inc    edi
c0014c8e:	eb d0                	jmp    c0014c60 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c90:	43                   	inc    ebx
c0014c91:	eb bc                	jmp    c0014c4f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c93:	31 c0                	xor    eax,eax
c0014c95:	5b                   	pop    ebx
c0014c96:	5e                   	pop    esi
c0014c97:	5f                   	pop    edi
c0014c98:	c3                   	ret    

c0014c99 <Thr::loadKernelSymbolTable(char const*)>:
c0014c99:	55                   	push   ebp
c0014c9a:	57                   	push   edi
c0014c9b:	56                   	push   esi
c0014c9c:	53                   	push   ebx
c0014c9d:	83 ec 68             	sub    esp,0x68
c0014ca0:	8b 35 50 99 02 c0    	mov    esi,DWORD PTR ds:0xc0029950
c0014ca6:	68 14 01 00 00       	push   0x114
c0014cab:	e8 e7 4a ff ff       	call   c0009797 <malloc>
c0014cb0:	83 c4 0c             	add    esp,0xc
c0014cb3:	89 c3                	mov    ebx,eax
c0014cb5:	56                   	push   esi
c0014cb6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014cba:	50                   	push   eax
c0014cbb:	e8 cc 7f ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0014cc0:	5e                   	pop    esi
c0014cc1:	5f                   	pop    edi
c0014cc2:	6a 01                	push   0x1
c0014cc4:	53                   	push   ebx
c0014cc5:	e8 9c 80 ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	85 c0                	test   eax,eax
c0014ccf:	74 0a                	je     c0014cdb <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	68 8f 44 02 c0       	push   0xc002448f
c0014cd9:	eb 34                	jmp    c0014d0f <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014cdb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014ce3:	83 ec 0c             	sub    esp,0xc
c0014ce6:	6a 34                	push   0x34
c0014ce8:	e8 aa 4a ff ff       	call   c0009797 <malloc>
c0014ced:	59                   	pop    ecx
c0014cee:	89 c7                	mov    edi,eax
c0014cf0:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014cf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cf6:	56                   	push   esi
c0014cf7:	57                   	push   edi
c0014cf8:	6a 00                	push   0x0
c0014cfa:	6a 34                	push   0x34
c0014cfc:	53                   	push   ebx
c0014cfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d00:	83 c4 20             	add    esp,0x20
c0014d03:	85 c0                	test   eax,eax
c0014d05:	74 17                	je     c0014d1e <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014d07:	83 ec 0c             	sub    esp,0xc
c0014d0a:	68 a6 44 02 c0       	push   0xc00244a6
c0014d0f:	e8 77 dd ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	31 c0                	xor    eax,eax
c0014d19:	e9 31 02 00 00       	jmp    c0014f4f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d1e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d24:	75 e1                	jne    c0014d07 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d26:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d29:	85 c0                	test   eax,eax
c0014d2b:	74 da                	je     c0014d07 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d2d:	52                   	push   edx
c0014d2e:	31 d2                	xor    edx,edx
c0014d30:	52                   	push   edx
c0014d31:	50                   	push   eax
c0014d32:	53                   	push   ebx
c0014d33:	e8 ec 80 ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0014d38:	83 c4 10             	add    esp,0x10
c0014d3b:	85 c0                	test   eax,eax
c0014d3d:	75 c8                	jne    c0014d07 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d3f:	83 ec 0c             	sub    esp,0xc
c0014d42:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d46:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d4a:	31 ed                	xor    ebp,ebp
c0014d4c:	0f af c2             	imul   eax,edx
c0014d4f:	50                   	push   eax
c0014d50:	e8 42 4a ff ff       	call   c0009797 <malloc>
c0014d55:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d62:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d66:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d6a:	0f af c2             	imul   eax,edx
c0014d6d:	99                   	cdq    
c0014d6e:	52                   	push   edx
c0014d6f:	50                   	push   eax
c0014d70:	53                   	push   ebx
c0014d71:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d74:	83 c4 20             	add    esp,0x20
c0014d77:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d7f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d87:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d8f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d97:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0014d9b:	0f 86 aa 00 00 00    	jbe    c0014e4b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014da1:	0f b7 f5             	movzx  esi,bp
c0014da4:	6b f6 28             	imul   esi,esi,0x28
c0014da7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014dab:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014dae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014db2:	50                   	push   eax
c0014db3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014db7:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014dbb:	8b 16                	mov    edx,DWORD PTR [esi]
c0014dbd:	6b c0 28             	imul   eax,eax,0x28
c0014dc0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014dc4:	89 d0                	mov    eax,edx
c0014dc6:	31 d2                	xor    edx,edx
c0014dc8:	52                   	push   edx
c0014dc9:	50                   	push   eax
c0014dca:	53                   	push   ebx
c0014dcb:	e8 54 80 ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0014dd0:	83 c4 0c             	add    esp,0xc
c0014dd3:	6a 20                	push   0x20
c0014dd5:	6a 00                	push   0x0
c0014dd7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014ddb:	52                   	push   edx
c0014ddc:	e8 c7 b6 fe ff       	call   c00004a8 <memset>
c0014de1:	58                   	pop    eax
c0014de2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014de4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014de8:	51                   	push   ecx
c0014de9:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014ded:	52                   	push   edx
c0014dee:	6a 00                	push   0x0
c0014df0:	6a 1f                	push   0x1f
c0014df2:	53                   	push   ebx
c0014df3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014df6:	83 c4 18             	add    esp,0x18
c0014df9:	68 bd 44 02 c0       	push   0xc00244bd
c0014dfe:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e02:	52                   	push   edx
c0014e03:	e8 e8 b7 fe ff       	call   c00005f0 <strcmp>
c0014e08:	83 c4 10             	add    esp,0x10
c0014e0b:	85 c0                	test   eax,eax
c0014e0d:	75 0f                	jne    c0014e1e <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014e0f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e1e:	50                   	push   eax
c0014e1f:	50                   	push   eax
c0014e20:	68 c5 44 02 c0       	push   0xc00244c5
c0014e25:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e29:	50                   	push   eax
c0014e2a:	e8 c1 b7 fe ff       	call   c00005f0 <strcmp>
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	85 c0                	test   eax,eax
c0014e34:	75 0f                	jne    c0014e45 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e36:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e45:	45                   	inc    ebp
c0014e46:	e9 4c ff ff ff       	jmp    c0014d97 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e4b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e50:	75 10                	jne    c0014e62 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e52:	83 ec 0c             	sub    esp,0xc
c0014e55:	68 cd 44 02 c0       	push   0xc00244cd
c0014e5a:	e8 2c dc ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e67:	75 10                	jne    c0014e79 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	68 cd 44 02 c0       	push   0xc00244cd
c0014e71:	e8 15 dc ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0014e76:	83 c4 10             	add    esp,0x10
c0014e79:	31 d2                	xor    edx,edx
c0014e7b:	50                   	push   eax
c0014e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e80:	52                   	push   edx
c0014e81:	50                   	push   eax
c0014e82:	53                   	push   ebx
c0014e83:	e8 9c 7f ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0014e88:	5a                   	pop    edx
c0014e89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e8d:	e8 05 49 ff ff       	call   c0009797 <malloc>
c0014e92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e9a:	31 c9                	xor    ecx,ecx
c0014e9c:	5e                   	pop    esi
c0014e9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e9f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014ea3:	55                   	push   ebp
c0014ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea8:	51                   	push   ecx
c0014ea9:	52                   	push   edx
c0014eaa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014eae:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014eb2:	53                   	push   ebx
c0014eb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eb6:	83 c4 14             	add    esp,0x14
c0014eb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ebd:	e8 d5 48 ff ff       	call   c0009797 <malloc>
c0014ec2:	89 c6                	mov    esi,eax
c0014ec4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ec6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ec9:	56                   	push   esi
c0014eca:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014ece:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014ed2:	51                   	push   ecx
c0014ed3:	52                   	push   edx
c0014ed4:	53                   	push   ebx
c0014ed5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ed8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014edc:	8b 15 00 99 02 c0    	mov    edx,DWORD PTR ds:0xc0029900
c0014ee2:	83 c4 1c             	add    esp,0x1c
c0014ee5:	c1 e8 04             	shr    eax,0x4
c0014ee8:	89 04 95 80 97 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6880],eax
c0014eef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ef3:	31 d2                	xor    edx,edx
c0014ef5:	52                   	push   edx
c0014ef6:	50                   	push   eax
c0014ef7:	53                   	push   ebx
c0014ef8:	e8 27 7f ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0014efd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014eff:	31 d2                	xor    edx,edx
c0014f01:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f04:	56                   	push   esi
c0014f05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f09:	52                   	push   edx
c0014f0a:	50                   	push   eax
c0014f0b:	53                   	push   ebx
c0014f0c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f0f:	83 c4 14             	add    esp,0x14
c0014f12:	53                   	push   ebx
c0014f13:	e8 ac 7e ff ff       	call   c000cdc4 <File::close()>
c0014f18:	5d                   	pop    ebp
c0014f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f1d:	e8 85 48 ff ff       	call   c00097a7 <free>
c0014f22:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f25:	e8 7d 48 ff ff       	call   c00097a7 <free>
c0014f2a:	a1 00 99 02 c0       	mov    eax,ds:0xc0029900
c0014f2f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f33:	8d 50 01             	lea    edx,[eax+0x1]
c0014f36:	89 0c 85 80 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6780],ecx
c0014f3d:	89 34 85 00 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6800],esi
c0014f44:	89 15 00 99 02 c0    	mov    DWORD PTR ds:0xc0029900,edx
c0014f4a:	83 c4 10             	add    esp,0x10
c0014f4d:	b0 01                	mov    al,0x1
c0014f4f:	83 c4 5c             	add    esp,0x5c
c0014f52:	5b                   	pop    ebx
c0014f53:	5e                   	pop    esi
c0014f54:	5f                   	pop    edi
c0014f55:	5d                   	pop    ebp
c0014f56:	c3                   	ret    

c0014f57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f57:	55                   	push   ebp
c0014f58:	57                   	push   edi
c0014f59:	56                   	push   esi
c0014f5a:	53                   	push   ebx
c0014f5b:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f61:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f68:	8b 1d 50 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029950
c0014f6e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014f72:	68 14 01 00 00       	push   0x114
c0014f77:	e8 1b 48 ff ff       	call   c0009797 <malloc>
c0014f7c:	83 c4 0c             	add    esp,0xc
c0014f7f:	89 c5                	mov    ebp,eax
c0014f81:	53                   	push   ebx
c0014f82:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f89:	50                   	push   eax
c0014f8a:	e8 fd 7c ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0014f8f:	5e                   	pop    esi
c0014f90:	5f                   	pop    edi
c0014f91:	6a 01                	push   0x1
c0014f93:	55                   	push   ebp
c0014f94:	e8 cd 7d ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c0014f99:	83 c4 10             	add    esp,0x10
c0014f9c:	85 c0                	test   eax,eax
c0014f9e:	0f 85 a7 06 00 00    	jne    c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014fa4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014fac:	83 ec 0c             	sub    esp,0xc
c0014faf:	6a 34                	push   0x34
c0014fb1:	e8 e1 47 ff ff       	call   c0009797 <malloc>
c0014fb6:	5b                   	pop    ebx
c0014fb7:	89 c7                	mov    edi,eax
c0014fb9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014fbd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014fc0:	53                   	push   ebx
c0014fc1:	57                   	push   edi
c0014fc2:	6a 00                	push   0x0
c0014fc4:	6a 34                	push   0x34
c0014fc6:	55                   	push   ebp
c0014fc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014fca:	83 c4 20             	add    esp,0x20
c0014fcd:	85 c0                	test   eax,eax
c0014fcf:	0f 85 76 06 00 00    	jne    c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014fd5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014fdb:	0f 85 6a 06 00 00    	jne    c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014fe1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014fe4:	85 c0                	test   eax,eax
c0014fe6:	0f 84 5f 06 00 00    	je     c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014fec:	31 d2                	xor    edx,edx
c0014fee:	51                   	push   ecx
c0014fef:	52                   	push   edx
c0014ff0:	50                   	push   eax
c0014ff1:	55                   	push   ebp
c0014ff2:	e8 2d 7e ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0014ff7:	83 c4 10             	add    esp,0x10
c0014ffa:	85 c0                	test   eax,eax
c0014ffc:	0f 85 49 06 00 00    	jne    c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015002:	83 ec 0c             	sub    esp,0xc
c0015005:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015008:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001500c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015010:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015014:	0f af c2             	imul   eax,edx
c0015017:	50                   	push   eax
c0015018:	e8 7a 47 ff ff       	call   c0009797 <malloc>
c001501d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015024:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001502b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001502f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015033:	0f af c2             	imul   eax,edx
c0015036:	99                   	cdq    
c0015037:	52                   	push   edx
c0015038:	50                   	push   eax
c0015039:	55                   	push   ebp
c001503a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001503d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015040:	83 c4 20             	add    esp,0x20
c0015043:	85 c0                	test   eax,eax
c0015045:	0f 84 00 06 00 00    	je     c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001504b:	52                   	push   edx
c001504c:	31 d2                	xor    edx,edx
c001504e:	52                   	push   edx
c001504f:	50                   	push   eax
c0015050:	55                   	push   ebp
c0015051:	e8 ce 7d ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0015056:	83 c4 10             	add    esp,0x10
c0015059:	85 c0                	test   eax,eax
c001505b:	0f 85 ea 05 00 00    	jne    c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015061:	83 ec 0c             	sub    esp,0xc
c0015064:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015068:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001506c:	31 f6                	xor    esi,esi
c001506e:	0f af c2             	imul   eax,edx
c0015071:	50                   	push   eax
c0015072:	e8 20 47 ff ff       	call   c0009797 <malloc>
c0015077:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001507a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001507e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015081:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015085:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015089:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001508d:	0f af c2             	imul   eax,edx
c0015090:	99                   	cdq    
c0015091:	52                   	push   edx
c0015092:	50                   	push   eax
c0015093:	55                   	push   ebp
c0015094:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015097:	83 c4 20             	add    esp,0x20
c001509a:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001509e:	0f 86 8a 00 00 00    	jbe    c001512e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00150a4:	0f b7 de             	movzx  ebx,si
c00150a7:	c1 e3 05             	shl    ebx,0x5
c00150aa:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00150ae:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00150b1:	75 75                	jne    c0015128 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00150b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00150b6:	31 d2                	xor    edx,edx
c00150b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00150bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150c3:	50                   	push   eax
c00150c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00150c7:	52                   	push   edx
c00150c8:	50                   	push   eax
c00150c9:	55                   	push   ebp
c00150ca:	e8 55 7d ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c00150cf:	83 c4 10             	add    esp,0x10
c00150d2:	85 c0                	test   eax,eax
c00150d4:	0f 85 71 05 00 00    	jne    c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00150da:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00150e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150e4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00150e8:	31 d2                	xor    edx,edx
c00150ea:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00150ee:	83 ec 0c             	sub    esp,0xc
c00150f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150fc:	50                   	push   eax
c00150fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015105:	52                   	push   edx
c0015106:	50                   	push   eax
c0015107:	55                   	push   ebp
c0015108:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001510b:	83 c4 1c             	add    esp,0x1c
c001510e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015111:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015114:	50                   	push   eax
c0015115:	6a 00                	push   0x0
c0015117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001511b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001511f:	50                   	push   eax
c0015120:	e8 83 b3 fe ff       	call   c00004a8 <memset>
c0015125:	83 c4 10             	add    esp,0x10
c0015128:	46                   	inc    esi
c0015129:	e9 6c ff ff ff       	jmp    c001509a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001512e:	53                   	push   ebx
c001512f:	31 db                	xor    ebx,ebx
c0015131:	68 00 01 00 00       	push   0x100
c0015136:	6a 00                	push   0x0
c0015138:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001513c:	50                   	push   eax
c001513d:	e8 66 b3 fe ff       	call   c00004a8 <memset>
c0015142:	83 c4 0c             	add    esp,0xc
c0015145:	68 00 01 00 00       	push   0x100
c001514a:	6a 00                	push   0x0
c001514c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015153:	50                   	push   eax
c0015154:	e8 4f b3 fe ff       	call   c00004a8 <memset>
c0015159:	83 c4 10             	add    esp,0x10
c001515c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015164:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001516c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0015174:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001517c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015184:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0015188:	0f 86 30 01 00 00    	jbe    c00152be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001518e:	0f b7 f3             	movzx  esi,bx
c0015191:	6b f6 28             	imul   esi,esi,0x28
c0015194:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015198:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001519b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001519f:	52                   	push   edx
c00151a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151a4:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00151a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00151aa:	6b d2 28             	imul   edx,edx,0x28
c00151ad:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00151b1:	31 d2                	xor    edx,edx
c00151b3:	52                   	push   edx
c00151b4:	50                   	push   eax
c00151b5:	55                   	push   ebp
c00151b6:	e8 69 7c ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c00151bb:	83 c4 0c             	add    esp,0xc
c00151be:	6a 20                	push   0x20
c00151c0:	6a 00                	push   0x0
c00151c2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151c9:	51                   	push   ecx
c00151ca:	e8 d9 b2 fe ff       	call   c00004a8 <memset>
c00151cf:	59                   	pop    ecx
c00151d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00151d3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00151d7:	52                   	push   edx
c00151d8:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00151df:	51                   	push   ecx
c00151e0:	6a 00                	push   0x0
c00151e2:	6a 1f                	push   0x1f
c00151e4:	55                   	push   ebp
c00151e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151e8:	83 c4 1c             	add    esp,0x1c
c00151eb:	6a 09                	push   0x9
c00151ed:	68 e7 44 02 c0       	push   0xc00244e7
c00151f2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151f9:	51                   	push   ecx
c00151fa:	e8 a5 b1 fe ff       	call   c00003a4 <memcmp>
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	85 c0                	test   eax,eax
c0015204:	75 21                	jne    c0015227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001520a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001520e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015212:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015216:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015219:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015220:	89 d0                	mov    eax,edx
c0015222:	40                   	inc    eax
c0015223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015227:	50                   	push   eax
c0015228:	6a 09                	push   0x9
c001522a:	68 f1 44 02 c0       	push   0xc00244f1
c001522f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015236:	50                   	push   eax
c0015237:	e8 68 b1 fe ff       	call   c00003a4 <memcmp>
c001523c:	83 c4 10             	add    esp,0x10
c001523f:	85 c0                	test   eax,eax
c0015241:	75 21                	jne    c0015264 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015247:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001524b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001524f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015253:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015256:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001525d:	89 d0                	mov    eax,edx
c001525f:	40                   	inc    eax
c0015260:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015264:	50                   	push   eax
c0015265:	50                   	push   eax
c0015266:	68 bd 44 02 c0       	push   0xc00244bd
c001526b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015272:	50                   	push   eax
c0015273:	e8 78 b3 fe ff       	call   c00005f0 <strcmp>
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	85 c0                	test   eax,eax
c001527d:	75 0f                	jne    c001528e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001527f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015282:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015286:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001528a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001528e:	50                   	push   eax
c001528f:	50                   	push   eax
c0015290:	68 c5 44 02 c0       	push   0xc00244c5
c0015295:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001529c:	50                   	push   eax
c001529d:	e8 4e b3 fe ff       	call   c00005f0 <strcmp>
c00152a2:	83 c4 10             	add    esp,0x10
c00152a5:	85 c0                	test   eax,eax
c00152a7:	75 0f                	jne    c00152b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00152a9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00152b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152b4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00152b8:	43                   	inc    ebx
c00152b9:	e9 c6 fe ff ff       	jmp    c0015184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00152be:	31 d2                	xor    edx,edx
c00152c0:	50                   	push   eax
c00152c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152c5:	52                   	push   edx
c00152c6:	50                   	push   eax
c00152c7:	55                   	push   ebp
c00152c8:	e8 57 7b ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c00152cd:	58                   	pop    eax
c00152ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00152d2:	e8 c0 44 ff ff       	call   c0009797 <malloc>
c00152d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00152de:	31 d2                	xor    edx,edx
c00152e0:	58                   	pop    eax
c00152e1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00152e5:	53                   	push   ebx
c00152e6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00152ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152ee:	52                   	push   edx
c00152ef:	50                   	push   eax
c00152f0:	55                   	push   ebp
c00152f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152f4:	83 c4 14             	add    esp,0x14
c00152f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152fb:	e8 97 44 ff ff       	call   c0009797 <malloc>
c0015300:	31 d2                	xor    edx,edx
c0015302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015306:	83 c4 0c             	add    esp,0xc
c0015309:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001530d:	52                   	push   edx
c001530e:	50                   	push   eax
c001530f:	55                   	push   ebp
c0015310:	e8 0f 7b ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0015315:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015318:	31 d2                	xor    edx,edx
c001531a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001531d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015321:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015325:	52                   	push   edx
c0015326:	50                   	push   eax
c0015327:	55                   	push   ebp
c0015328:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001532b:	83 c4 20             	add    esp,0x20
c001532e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015336:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001533a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001533e:	0f 84 0b 03 00 00    	je     c001564f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0015344:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001534b:	31 d2                	xor    edx,edx
c001534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015351:	c1 e8 03             	shr    eax,0x3
c0015354:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015358:	51                   	push   ecx
c0015359:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001535d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015361:	52                   	push   edx
c0015362:	50                   	push   eax
c0015363:	55                   	push   ebp
c0015364:	e8 bb 7a ff ff       	call   c000ce24 <File::seek(unsigned long long)>
c0015369:	5b                   	pop    ebx
c001536a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001536e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015375:	e8 1d 44 ff ff       	call   c0009797 <malloc>
c001537a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001537d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015381:	31 d2                	xor    edx,edx
c0015383:	5e                   	pop    esi
c0015384:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015388:	50                   	push   eax
c0015389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001538d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015391:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015398:	52                   	push   edx
c0015399:	50                   	push   eax
c001539a:	55                   	push   ebp
c001539b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001539e:	83 c4 20             	add    esp,0x20
c00153a1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00153a9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00153ad:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00153b1:	0f 8d 7c 02 00 00    	jge    c0015633 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00153b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00153bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153bf:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00153c4:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00153c7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00153cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153cf:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00153d3:	89 d8                	mov    eax,ebx
c00153d5:	c1 e8 08             	shr    eax,0x8
c00153d8:	89 c6                	mov    esi,eax
c00153da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00153de:	c1 e6 04             	shl    esi,0x4
c00153e1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00153e5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00153e8:	85 d2                	test   edx,edx
c00153ea:	0f 85 bf 00 00 00    	jne    c00154af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153f7:	03 06                	add    eax,DWORD PTR [esi]
c00153f9:	50                   	push   eax
c00153fa:	e8 4b f8 ff ff       	call   c0014c4a <Thr::getAddressOfKernelSymbol(char const*)>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	89 c2                	mov    edx,eax
c0015404:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0015409:	85 c0                	test   eax,eax
c001540b:	0f 85 9e 00 00 00    	jne    c00154af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0015411:	83 ec 0c             	sub    esp,0xc
c0015414:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015418:	03 06                	add    eax,DWORD PTR [esi]
c001541a:	50                   	push   eax
c001541b:	e8 14 33 ff ff       	call   c0008734 <Krnl::resolveCompatibilitySymbol(char*)>
c0015420:	83 c4 10             	add    esp,0x10
c0015423:	89 c2                	mov    edx,eax
c0015425:	85 c0                	test   eax,eax
c0015427:	0f 85 82 00 00 00    	jne    c00154af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001542d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015431:	50                   	push   eax
c0015432:	50                   	push   eax
c0015433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015437:	03 06                	add    eax,DWORD PTR [esi]
c0015439:	50                   	push   eax
c001543a:	68 fb 44 02 c0       	push   0xc00244fb
c001543f:	e8 dd 72 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0015444:	58                   	pop    eax
c0015445:	5a                   	pop    edx
c0015446:	68 15 45 02 c0       	push   0xc0024515
c001544b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015452:	50                   	push   eax
c0015453:	e8 0c b1 fe ff       	call   c0000564 <strcpy>
c0015458:	59                   	pop    ecx
c0015459:	58                   	pop    eax
c001545a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001545e:	03 06                	add    eax,DWORD PTR [esi]
c0015460:	50                   	push   eax
c0015461:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015468:	50                   	push   eax
c0015469:	e8 36 b2 fe ff       	call   c00006a4 <strcat>
c001546e:	58                   	pop    eax
c001546f:	5a                   	pop    edx
c0015470:	68 ab 45 02 c0       	push   0xc00245ab
c0015475:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001547c:	50                   	push   eax
c001547d:	e8 22 b2 fe ff       	call   c00006a4 <strcat>
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001548a:	0f 84 5d 01 00 00    	je     c00155ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015490:	83 ec 0c             	sub    esp,0xc
c0015493:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001549a:	50                   	push   eax
c001549b:	e8 eb d5 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00154a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00154ab:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00154af:	80 fb 01             	cmp    bl,0x1
c00154b2:	0f 85 88 00 00 00    	jne    c0015540 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00154b8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00154bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00154c3:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00154c7:	01 ce                	add    esi,ecx
c00154c9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00154cf:	0f 94 c0             	sete   al
c00154d2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00154d8:	0f 94 c3             	sete   bl
c00154db:	09 c3                	or     ebx,eax
c00154dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00154df:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00154e4:	74 41                	je     c0015527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00154e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00154e9:	84 db                	test   bl,bl
c00154eb:	75 15                	jne    c0015502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00154ed:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154f1:	66 83 f8 0c          	cmp    ax,0xc
c00154f5:	76 05                	jbe    c00154fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00154f7:	b8 0c 00 00 00       	mov    eax,0xc
c00154fc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0015500:	76 37                	jbe    c0015539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015502:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0015506:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001550b:	0f 84 dc 00 00 00    	je     c00155ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015511:	83 ec 0c             	sub    esp,0xc
c0015514:	68 2c 45 02 c0       	push   0xc002452c
c0015519:	e8 6d d5 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001551e:	83 c4 10             	add    esp,0x10
c0015521:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015525:	eb 12                	jmp    c0015539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015527:	01 c1                	add    ecx,eax
c0015529:	84 db                	test   bl,bl
c001552b:	75 0c                	jne    c0015539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001552d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015531:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0015535:	77 02                	ja     c0015539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015537:	01 d1                	add    ecx,edx
c0015539:	89 0e                	mov    DWORD PTR [esi],ecx
c001553b:	e9 ea 00 00 00       	jmp    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015540:	80 fb 02             	cmp    bl,0x2
c0015543:	75 7c                	jne    c00155c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015545:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001554c:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0015550:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0015554:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001555a:	74 20                	je     c001557c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001555c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0015562:	74 18                	je     c001557c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0015564:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015568:	b9 0a 00 00 00       	mov    ecx,0xa
c001556d:	66 83 f8 0e          	cmp    ax,0xe
c0015571:	77 03                	ja     c0015576 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0015573:	8d 48 fc             	lea    ecx,[eax-0x4]
c0015576:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001557a:	76 1f                	jbe    c001559b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001557c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0015580:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015585:	74 66                	je     c00155ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015587:	83 ec 0c             	sub    esp,0xc
c001558a:	68 48 45 02 c0       	push   0xc0024548
c001558f:	e8 f7 d4 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0015594:	83 c4 10             	add    esp,0x10
c0015597:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001559b:	8b 06                	mov    eax,DWORD PTR [esi]
c001559d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00155a2:	74 13                	je     c00155b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00155a4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00155a8:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00155af:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00155b3:	01 c8                	add    eax,ecx
c00155b5:	eb 04                	jmp    c00155bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00155b7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00155bb:	01 c2                	add    edx,eax
c00155bd:	89 16                	mov    DWORD PTR [esi],edx
c00155bf:	eb 69                	jmp    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00155c1:	0f b6 db             	movzx  ebx,bl
c00155c4:	50                   	push   eax
c00155c5:	50                   	push   eax
c00155c6:	53                   	push   ebx
c00155c7:	68 64 45 02 c0       	push   0xc0024564
c00155cc:	e8 50 71 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00155d1:	83 c4 10             	add    esp,0x10
c00155d4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00155d9:	74 12                	je     c00155ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00155db:	83 ec 0c             	sub    esp,0xc
c00155de:	68 6f 45 02 c0       	push   0xc002456f
c00155e3:	e8 a3 d4 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00155e8:	83 c4 10             	add    esp,0x10
c00155eb:	eb 3d                	jmp    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00155ed:	83 ec 0c             	sub    esp,0xc
c00155f0:	55                   	push   ebp
c00155f1:	e8 ce 77 ff ff       	call   c000cdc4 <File::close()>
c00155f6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00155f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155ff:	59                   	pop    ecx
c0015600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015604:	e8 9e 41 ff ff       	call   c00097a7 <free>
c0015609:	5b                   	pop    ebx
c001560a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001560e:	e8 94 41 ff ff       	call   c00097a7 <free>
c0015613:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015616:	e8 8c 41 ff ff       	call   c00097a7 <free>
c001561b:	5e                   	pop    esi
c001561c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015620:	e8 82 41 ff ff       	call   c00097a7 <free>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	eb 21                	jmp    c001564b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001562a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001562e:	e9 76 fd ff ff       	jmp    c00153a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0015633:	83 ec 0c             	sub    esp,0xc
c0015636:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001563a:	e8 68 41 ff ff       	call   c00097a7 <free>
c001563f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015643:	83 c4 10             	add    esp,0x10
c0015646:	e9 eb fc ff ff       	jmp    c0015336 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001564b:	31 c0                	xor    eax,eax
c001564d:	eb 33                	jmp    c0015682 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001564f:	83 ec 0c             	sub    esp,0xc
c0015652:	55                   	push   ebp
c0015653:	e8 6c 77 ff ff       	call   c000cdc4 <File::close()>
c0015658:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001565b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001565e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015661:	58                   	pop    eax
c0015662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015666:	e8 3c 41 ff ff       	call   c00097a7 <free>
c001566b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001566e:	e8 34 41 ff ff       	call   c00097a7 <free>
c0015673:	5a                   	pop    edx
c0015674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015678:	e8 2a 41 ff ff       	call   c00097a7 <free>
c001567d:	83 c4 10             	add    esp,0x10
c0015680:	b0 01                	mov    al,0x1
c0015682:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015688:	5b                   	pop    ebx
c0015689:	5e                   	pop    esi
c001568a:	5f                   	pop    edi
c001568b:	5d                   	pop    ebp
c001568c:	c3                   	ret    

c001568d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001568d:	56                   	push   esi
c001568e:	31 d2                	xor    edx,edx
c0015690:	53                   	push   ebx
c0015691:	8b 1d 60 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029160
c0015697:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001569b:	39 d3                	cmp    ebx,edx
c001569d:	7e 1b                	jle    c00156ba <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001569f:	8b 04 95 80 93 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6c80]
c00156a6:	39 c8                	cmp    eax,ecx
c00156a8:	77 0d                	ja     c00156b7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00156aa:	8b 34 95 80 91 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6e80]
c00156b1:	01 c6                	add    esi,eax
c00156b3:	39 ce                	cmp    esi,ecx
c00156b5:	77 05                	ja     c00156bc <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00156b7:	42                   	inc    edx
c00156b8:	eb e1                	jmp    c001569b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00156ba:	31 c0                	xor    eax,eax
c00156bc:	5b                   	pop    ebx
c00156bd:	5e                   	pop    esi
c00156be:	c3                   	ret    

c00156bf <Thr::getDriverNameFromAddress(unsigned long)>:
c00156bf:	53                   	push   ebx
c00156c0:	31 c0                	xor    eax,eax
c00156c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00156c6:	8b 1d 60 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029160
c00156cc:	39 c3                	cmp    ebx,eax
c00156ce:	7e 22                	jle    c00156f2 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00156d0:	8b 14 85 80 93 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6c80]
c00156d7:	39 ca                	cmp    edx,ecx
c00156d9:	77 14                	ja     c00156ef <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156db:	03 14 85 80 91 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6e80]
c00156e2:	39 ca                	cmp    edx,ecx
c00156e4:	76 09                	jbe    c00156ef <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156e6:	8b 04 85 80 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a80]
c00156ed:	eb 05                	jmp    c00156f4 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00156ef:	40                   	inc    eax
c00156f0:	eb da                	jmp    c00156cc <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00156f2:	31 c0                	xor    eax,eax
c00156f4:	5b                   	pop    ebx
c00156f5:	c3                   	ret    

c00156f6 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00156f6:	53                   	push   ebx
c00156f7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00156fb:	53                   	push   ebx
c00156fc:	e8 8c ff ff ff       	call   c001568d <Thr::getDriverBaseFromAddress(unsigned long)>
c0015701:	5a                   	pop    edx
c0015702:	31 d2                	xor    edx,edx
c0015704:	85 c0                	test   eax,eax
c0015706:	74 04                	je     c001570c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015708:	89 da                	mov    edx,ebx
c001570a:	29 c2                	sub    edx,eax
c001570c:	89 d0                	mov    eax,edx
c001570e:	5b                   	pop    ebx
c001570f:	c3                   	ret    

c0015710 <Thr::loadDLL(char const*, bool)>:
c0015710:	55                   	push   ebp
c0015711:	57                   	push   edi
c0015712:	56                   	push   esi
c0015713:	53                   	push   ebx
c0015714:	81 ec 34 01 00 00    	sub    esp,0x134
c001571a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015721:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015728:	56                   	push   esi
c0015729:	68 87 45 02 c0       	push   0xc0024587
c001572e:	e8 ee 6f ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0015733:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001573a:	e8 58 40 ff ff       	call   c0009797 <malloc>
c001573f:	83 c4 0c             	add    esp,0xc
c0015742:	89 c3                	mov    ebx,eax
c0015744:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c001574a:	56                   	push   esi
c001574b:	50                   	push   eax
c001574c:	e8 3b 75 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0015751:	83 c4 10             	add    esp,0x10
c0015754:	85 db                	test   ebx,ebx
c0015756:	75 3c                	jne    c0015794 <Thr::loadDLL(char const*, bool)+0x84>
c0015758:	89 f8                	mov    eax,edi
c001575a:	84 c0                	test   al,al
c001575c:	0f 84 d2 01 00 00    	je     c0015934 <Thr::loadDLL(char const*, bool)+0x224>
c0015762:	55                   	push   ebp
c0015763:	55                   	push   ebp
c0015764:	68 98 45 02 c0       	push   0xc0024598
c0015769:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001576d:	55                   	push   ebp
c001576e:	e8 f1 ad fe ff       	call   c0000564 <strcpy>
c0015773:	58                   	pop    eax
c0015774:	5a                   	pop    edx
c0015775:	56                   	push   esi
c0015776:	55                   	push   ebp
c0015777:	e8 28 af fe ff       	call   c00006a4 <strcat>
c001577c:	59                   	pop    ecx
c001577d:	58                   	pop    eax
c001577e:	68 ab 45 02 c0       	push   0xc00245ab
c0015783:	55                   	push   ebp
c0015784:	e8 1b af fe ff       	call   c00006a4 <strcat>
c0015789:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001578c:	e8 fa d2 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	51                   	push   ecx
c0015795:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015799:	50                   	push   eax
c001579a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001579e:	50                   	push   eax
c001579f:	53                   	push   ebx
c00157a0:	e8 6d 78 ff ff       	call   c000d012 <File::stat(unsigned long long*, bool*)>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	85 db                	test   ebx,ebx
c00157aa:	74 0c                	je     c00157b8 <Thr::loadDLL(char const*, bool)+0xa8>
c00157ac:	83 ec 0c             	sub    esp,0xc
c00157af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157b1:	53                   	push   ebx
c00157b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157b5:	83 c4 10             	add    esp,0x10
c00157b8:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00157bd:	75 0a                	jne    c00157c9 <Thr::loadDLL(char const*, bool)+0xb9>
c00157bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157c3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00157c7:	75 3c                	jne    c0015805 <Thr::loadDLL(char const*, bool)+0xf5>
c00157c9:	89 f8                	mov    eax,edi
c00157cb:	84 c0                	test   al,al
c00157cd:	0f 84 49 01 00 00    	je     c001591c <Thr::loadDLL(char const*, bool)+0x20c>
c00157d3:	51                   	push   ecx
c00157d4:	51                   	push   ecx
c00157d5:	68 98 45 02 c0       	push   0xc0024598
c00157da:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00157de:	53                   	push   ebx
c00157df:	e8 80 ad fe ff       	call   c0000564 <strcpy>
c00157e4:	5d                   	pop    ebp
c00157e5:	58                   	pop    eax
c00157e6:	56                   	push   esi
c00157e7:	53                   	push   ebx
c00157e8:	e8 b7 ae fe ff       	call   c00006a4 <strcat>
c00157ed:	58                   	pop    eax
c00157ee:	5a                   	pop    edx
c00157ef:	68 ab 45 02 c0       	push   0xc00245ab
c00157f4:	53                   	push   ebx
c00157f5:	e8 aa ae fe ff       	call   c00006a4 <strcat>
c00157fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157fd:	e8 89 d2 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0015802:	83 c4 10             	add    esp,0x10
c0015805:	52                   	push   edx
c0015806:	6a 03                	push   0x3
c0015808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001580c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015810:	05 ff 0f 00 00       	add    eax,0xfff
c0015815:	83 d2 00             	adc    edx,0x0
c0015818:	0f ac d0 0c          	shrd   eax,edx,0xc
c001581c:	50                   	push   eax
c001581d:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c0015823:	e8 0c 63 ff ff       	call   c000bb34 <VAS::allocatePages(int, int)>
c0015828:	59                   	pop    ecx
c0015829:	89 c3                	mov    ebx,eax
c001582b:	5d                   	pop    ebp
c001582c:	50                   	push   eax
c001582d:	68 b6 2c 02 c0       	push   0xc0022cb6
c0015832:	e8 ea 6e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0015837:	89 34 24             	mov    DWORD PTR [esp],esi
c001583a:	e8 85 ac fe ff       	call   c00004c4 <strlen>
c001583f:	8b 2d 60 91 02 c0    	mov    ebp,DWORD PTR ds:0xc0029160
c0015845:	40                   	inc    eax
c0015846:	89 04 24             	mov    DWORD PTR [esp],eax
c0015849:	e8 49 3f ff ff       	call   c0009797 <malloc>
c001584e:	89 04 ad 80 95 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6a80],eax
c0015855:	58                   	pop    eax
c0015856:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c001585b:	5a                   	pop    edx
c001585c:	56                   	push   esi
c001585d:	ff 34 85 80 95 02 c0 	push   DWORD PTR [eax*4-0x3ffd6a80]
c0015864:	e8 fb ac fe ff       	call   c0000564 <strcpy>
c0015869:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c001586e:	8d 50 01             	lea    edx,[eax+0x1]
c0015871:	89 1c 85 80 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6c80],ebx
c0015878:	89 15 60 91 02 c0    	mov    DWORD PTR ds:0xc0029160,edx
c001587e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015882:	83 c4 0c             	add    esp,0xc
c0015885:	89 14 85 80 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e80],edx
c001588c:	6a 01                	push   0x1
c001588e:	53                   	push   ebx
c001588f:	56                   	push   esi
c0015890:	e8 c2 f6 ff ff       	call   c0014f57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015895:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015899:	83 c4 10             	add    esp,0x10
c001589c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00158a1:	0f 85 89 00 00 00    	jne    c0015930 <Thr::loadDLL(char const*, bool)+0x220>
c00158a7:	89 f8                	mov    eax,edi
c00158a9:	84 c0                	test   al,al
c00158ab:	74 73                	je     c0015920 <Thr::loadDLL(char const*, bool)+0x210>
c00158ad:	83 ec 0c             	sub    esp,0xc
c00158b0:	68 ad 45 02 c0       	push   0xc00245ad
c00158b5:	e8 d1 d1 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00158ba:	83 c4 10             	add    esp,0x10
c00158bd:	eb 61                	jmp    c0015920 <Thr::loadDLL(char const*, bool)+0x210>
c00158bf:	50                   	push   eax
c00158c0:	50                   	push   eax
c00158c1:	89 e8                	mov    eax,ebp
c00158c3:	c1 e0 0c             	shl    eax,0xc
c00158c6:	01 d8                	add    eax,ebx
c00158c8:	50                   	push   eax
c00158c9:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c00158cf:	e8 c6 5d ff ff       	call   c000b69a <VAS::getPageTableEntry(unsigned long)>
c00158d4:	83 c4 10             	add    esp,0x10
c00158d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d9:	a8 60                	test   al,0x60
c00158db:	75 11                	jne    c00158ee <Thr::loadDLL(char const*, bool)+0x1de>
c00158dd:	83 ec 0c             	sub    esp,0xc
c00158e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158e5:	50                   	push   eax
c00158e6:	e8 5a 42 ff ff       	call   c0009b45 <Phys::freePage(unsigned long)>
c00158eb:	83 c4 10             	add    esp,0x10
c00158ee:	45                   	inc    ebp
c00158ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00158f7:	05 ff 0f 00 00       	add    eax,0xfff
c00158fc:	bf 00 00 00 00       	mov    edi,0x0
c0015901:	83 d2 00             	adc    edx,0x0
c0015904:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015908:	c1 ea 0c             	shr    edx,0xc
c001590b:	39 c5                	cmp    ebp,eax
c001590d:	89 d1                	mov    ecx,edx
c001590f:	89 f8                	mov    eax,edi
c0015911:	19 c8                	sbb    eax,ecx
c0015913:	72 aa                	jb     c00158bf <Thr::loadDLL(char const*, bool)+0x1af>
c0015915:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001591a:	75 18                	jne    c0015934 <Thr::loadDLL(char const*, bool)+0x224>
c001591c:	31 db                	xor    ebx,ebx
c001591e:	eb 14                	jmp    c0015934 <Thr::loadDLL(char const*, bool)+0x224>
c0015920:	83 ec 0c             	sub    esp,0xc
c0015923:	68 cc 45 02 c0       	push   0xc00245cc
c0015928:	e8 5e d1 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001592d:	83 c4 10             	add    esp,0x10
c0015930:	31 ed                	xor    ebp,ebp
c0015932:	eb bb                	jmp    c00158ef <Thr::loadDLL(char const*, bool)+0x1df>
c0015934:	81 c4 2c 01 00 00    	add    esp,0x12c
c001593a:	89 d8                	mov    eax,ebx
c001593c:	5b                   	pop    ebx
c001593d:	5e                   	pop    esi
c001593e:	5f                   	pop    edi
c001593f:	5d                   	pop    ebp
c0015940:	c3                   	ret    

c0015941 <Thr::executeDLL(unsigned long, void*)>:
c0015941:	56                   	push   esi
c0015942:	53                   	push   ebx
c0015943:	52                   	push   edx
c0015944:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015948:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001594c:	85 db                	test   ebx,ebx
c001594e:	75 10                	jne    c0015960 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015950:	83 ec 0c             	sub    esp,0xc
c0015953:	68 e8 45 02 c0       	push   0xc00245e8
c0015958:	e8 2e d1 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001595d:	83 c4 10             	add    esp,0x10
c0015960:	50                   	push   eax
c0015961:	50                   	push   eax
c0015962:	53                   	push   ebx
c0015963:	68 12 46 02 c0       	push   0xc0024612
c0015968:	e8 b4 6d ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001596d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015971:	89 d8                	mov    eax,ebx
c0015973:	83 c4 14             	add    esp,0x14
c0015976:	5b                   	pop    ebx
c0015977:	5e                   	pop    esi
c0015978:	ff e0                	jmp    eax
c001597a:	66 90                	xchg   ax,ax

c001597c <userModeEntryPoint(void*)>:
c001597c:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0015981:	48                   	dec    eax
c0015982:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0015987:	75 03                	jne    c001598c <userModeEntryPoint(void*)+0x10>
c0015989:	fb                   	sti    
c001598a:	66 90                	xchg   ax,ax
c001598c:	fb                   	sti    
c001598d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015992:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015995:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001599b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001599f:	e9 bb a8 fe ff       	jmp    c000025f <goToUsermode>

c00159a4 <changeTSS>:
c00159a4:	83 ec 14             	sub    esp,0x14
c00159a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00159af:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00159b4:	c1 e2 15             	shl    edx,0x15
c00159b7:	29 d0                	sub    eax,edx
c00159b9:	50                   	push   eax
c00159ba:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00159bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00159c5:	05 7c 11 00 00       	add    eax,0x117c
c00159ca:	50                   	push   eax
c00159cb:	e8 48 53 ff ff       	call   c000ad18 <TSS::setESP(unsigned long)>
c00159d0:	83 c4 1c             	add    esp,0x1c
c00159d3:	c3                   	ret    

c00159d4 <switchToThread(ThreadControlBlock*)>:
c00159d4:	57                   	push   edi
c00159d5:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c00159da:	56                   	push   esi
c00159db:	85 c0                	test   eax,eax
c00159dd:	53                   	push   ebx
c00159de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159e2:	0f 85 88 00 00 00    	jne    c0015a70 <switchToThread(ThreadControlBlock*)+0x9c>
c00159e8:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c00159eb:	3c ff                	cmp    al,0xff
c00159ed:	74 7d                	je     c0015a6c <switchToThread(ThreadControlBlock*)+0x98>
c00159ef:	0f b6 d0             	movzx  edx,al
c00159f2:	b8 00 04 00 00       	mov    eax,0x400
c00159f7:	29 d0                	sub    eax,edx
c00159f9:	d1 f8                	sar    eax,1
c00159fb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00159fe:	66 90                	xchg   ax,ax
c0015a00:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015a03:	ff 15 18 9a 02 c0    	call   DWORD PTR ds:0xc0029a18
c0015a09:	a3 68 99 02 c0       	mov    ds:0xc0029968,eax
c0015a0e:	89 15 6c 99 02 c0    	mov    DWORD PTR ds:0xc002996c,edx
c0015a14:	89 c6                	mov    esi,eax
c0015a16:	89 d7                	mov    edi,edx
c0015a18:	2b 35 58 99 02 c0    	sub    esi,DWORD PTR ds:0xc0029958
c0015a1e:	a3 58 99 02 c0       	mov    ds:0xc0029958,eax
c0015a23:	1b 3d 5c 99 02 c0    	sbb    edi,DWORD PTR ds:0xc002995c
c0015a29:	89 35 60 99 02 c0    	mov    DWORD PTR ds:0xc0029960,esi
c0015a2f:	89 3d 64 99 02 c0    	mov    DWORD PTR ds:0xc0029964,edi
c0015a35:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a3b:	89 15 5c 99 02 c0    	mov    DWORD PTR ds:0xc002995c,edx
c0015a41:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a44:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a47:	01 c6                	add    esi,eax
c0015a49:	11 d7                	adc    edi,edx
c0015a4b:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a4e:	83 ec 0c             	sub    esp,0xc
c0015a51:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a54:	53                   	push   ebx
c0015a55:	e8 3d a8 fe ff       	call   c0000297 <switchToThreadASM>
c0015a5a:	0f 20 c0             	mov    eax,cr0
c0015a5d:	83 c8 08             	or     eax,0x8
c0015a60:	0f 22 c0             	mov    cr0,eax
c0015a63:	83 c4 10             	add    esp,0x10
c0015a66:	5b                   	pop    ebx
c0015a67:	5e                   	pop    esi
c0015a68:	5f                   	pop    edi
c0015a69:	c3                   	ret    
c0015a6a:	66 90                	xchg   ax,ax
c0015a6c:	31 c0                	xor    eax,eax
c0015a6e:	eb 90                	jmp    c0015a00 <switchToThread(ThreadControlBlock*)+0x2c>
c0015a70:	5b                   	pop    ebx
c0015a71:	c7 05 20 99 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x1
c0015a7b:	5e                   	pop    esi
c0015a7c:	5f                   	pop    edi
c0015a7d:	c3                   	ret    
c0015a7e:	66 90                	xchg   ax,ax

c0015a80 <Process::addArgs(char**)>:
c0015a80:	57                   	push   edi
c0015a81:	56                   	push   esi
c0015a82:	53                   	push   ebx
c0015a83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015a8b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015a95:	85 ff                	test   edi,edi
c0015a97:	74 43                	je     c0015adc <Process::addArgs(char**)+0x5c>
c0015a99:	8b 07                	mov    eax,DWORD PTR [edi]
c0015a9b:	85 c0                	test   eax,eax
c0015a9d:	74 3d                	je     c0015adc <Process::addArgs(char**)+0x5c>
c0015a9f:	31 db                	xor    ebx,ebx
c0015aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0015aa4:	83 ec 0c             	sub    esp,0xc
c0015aa7:	50                   	push   eax
c0015aa8:	e8 17 aa fe ff       	call   c00004c4 <strlen>
c0015aad:	40                   	inc    eax
c0015aae:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ab1:	e8 e1 3c ff ff       	call   c0009797 <malloc>
c0015ab6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015abd:	5a                   	pop    edx
c0015abe:	59                   	pop    ecx
c0015abf:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0015ac2:	43                   	inc    ebx
c0015ac3:	50                   	push   eax
c0015ac4:	e8 9b aa fe ff       	call   c0000564 <strcpy>
c0015ac9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0015acf:	83 c4 10             	add    esp,0x10
c0015ad2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015ad5:	85 c0                	test   eax,eax
c0015ad7:	75 cb                	jne    c0015aa4 <Process::addArgs(char**)+0x24>
c0015ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0015adc:	5b                   	pop    ebx
c0015add:	5e                   	pop    esi
c0015ade:	5f                   	pop    edi
c0015adf:	c3                   	ret    

c0015ae0 <Process::Process(char const*, Process*, char**)>:
c0015ae0:	56                   	push   esi
c0015ae1:	53                   	push   ebx
c0015ae2:	83 ec 14             	sub    esp,0x14
c0015ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae9:	05 0c 02 00 00       	add    eax,0x20c
c0015aee:	bb 07 00 00 00       	mov    ebx,0x7
c0015af3:	89 c6                	mov    esi,eax
c0015af5:	8d 76 00             	lea    esi,[esi+0x0]
c0015af8:	85 db                	test   ebx,ebx
c0015afa:	78 14                	js     c0015b10 <Process::Process(char const*, Process*, char**)+0x30>
c0015afc:	83 ec 0c             	sub    esp,0xc
c0015aff:	56                   	push   esi
c0015b00:	e8 b7 c3 00 00       	call   c0021ebc <ThreadControlBlock::ThreadControlBlock()>
c0015b05:	83 c4 10             	add    esp,0x10
c0015b08:	83 c6 5f             	add    esi,0x5f
c0015b0b:	4b                   	dec    ebx
c0015b0c:	eb ea                	jmp    c0015af8 <Process::Process(char const*, Process*, char**)+0x18>
c0015b0e:	66 90                	xchg   ax,ax
c0015b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b14:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b1b:	83 ec 0c             	sub    esp,0xc
c0015b1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b22:	e8 ed cd ff ff       	call   c0012914 <Krnl::newProcessEnv(Process*)>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	89 c2                	mov    edx,eax
c0015b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b30:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b43:	a1 d0 5b 02 c0       	mov    eax,ds:0xc0025bd0
c0015b48:	8d 50 01             	lea    edx,[eax+0x1]
c0015b4b:	89 15 d0 5b 02 c0    	mov    DWORD PTR ds:0xc0025bd0,edx
c0015b51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b55:	89 02                	mov    DWORD PTR [edx],eax
c0015b57:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b5f:	83 ec 0c             	sub    esp,0xc
c0015b62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b66:	e8 2c 3c ff ff       	call   c0009797 <malloc>
c0015b6b:	83 c4 10             	add    esp,0x10
c0015b6e:	89 c3                	mov    ebx,eax
c0015b70:	83 ec 08             	sub    esp,0x8
c0015b73:	6a 00                	push   0x0
c0015b75:	53                   	push   ebx
c0015b76:	e8 61 63 ff ff       	call   c000bedc <VAS::VAS(bool)>
c0015b7b:	83 c4 10             	add    esp,0x10
c0015b7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b82:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b8c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b9e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bae:	85 c0                	test   eax,eax
c0015bb0:	74 42                	je     c0015bf4 <Process::Process(char const*, Process*, char**)+0x114>
c0015bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bbc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bd6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be0:	05 0c 01 00 00       	add    eax,0x10c
c0015be5:	83 ec 08             	sub    esp,0x8
c0015be8:	52                   	push   edx
c0015be9:	50                   	push   eax
c0015bea:	e8 75 a9 fe ff       	call   c0000564 <strcpy>
c0015bef:	83 c4 10             	add    esp,0x10
c0015bf2:	eb 64                	jmp    c0015c58 <Process::Process(char const*, Process*, char**)+0x178>
c0015bf4:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0015bfc:	83 ec 0c             	sub    esp,0xc
c0015bff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c03:	e8 8f 3b ff ff       	call   c0009797 <malloc>
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	89 c3                	mov    ebx,eax
c0015c0d:	83 ec 08             	sub    esp,0x8
c0015c10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c14:	53                   	push   ebx
c0015c15:	e8 8a 4e ff ff       	call   c000aaa4 <VgaText::VgaText(char const*)>
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c21:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c31:	83 ec 0c             	sub    esp,0xc
c0015c34:	50                   	push   eax
c0015c35:	e8 b7 46 ff ff       	call   c000a2f1 <addToTerminalCycle(VgaText*)>
c0015c3a:	83 c4 10             	add    esp,0x10
c0015c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c41:	05 0c 01 00 00       	add    eax,0x10c
c0015c46:	83 ec 08             	sub    esp,0x8
c0015c49:	68 31 46 02 c0       	push   0xc0024631
c0015c4e:	50                   	push   eax
c0015c4f:	e8 10 a9 fe ff       	call   c0000564 <strcpy>
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	90                   	nop
c0015c58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5c:	83 c0 0c             	add    eax,0xc
c0015c5f:	83 ec 08             	sub    esp,0x8
c0015c62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c66:	50                   	push   eax
c0015c67:	e8 f8 a8 fe ff       	call   c0000564 <strcpy>
c0015c6c:	83 c4 10             	add    esp,0x10
c0015c6f:	83 ec 08             	sub    esp,0x8
c0015c72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c7a:	e8 01 fe ff ff       	call   c0015a80 <Process::addArgs(char**)>
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	83 ec 08             	sub    esp,0x8
c0015c85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c8d:	e8 8f ed ff ff       	call   c0014a21 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c99:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c9d:	83 f0 01             	xor    eax,0x1
c0015ca0:	88 c2                	mov    dl,al
c0015ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015cac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015cb1:	83 ec 08             	sub    esp,0x8
c0015cb4:	50                   	push   eax
c0015cb5:	68 88 46 02 c0       	push   0xc0024688
c0015cba:	e8 62 6a ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	90                   	nop
c0015cc3:	83 c4 14             	add    esp,0x14
c0015cc6:	5b                   	pop    ebx
c0015cc7:	5e                   	pop    esi
c0015cc8:	c3                   	ret    
c0015cc9:	90                   	nop
c0015cca:	66 90                	xchg   ax,ax

c0015ccc <Process::Process(bool, char const*, Process*, char**)>:
c0015ccc:	56                   	push   esi
c0015ccd:	53                   	push   ebx
c0015cce:	83 ec 24             	sub    esp,0x24
c0015cd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015cd5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015cd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cdd:	05 0c 02 00 00       	add    eax,0x20c
c0015ce2:	bb 07 00 00 00       	mov    ebx,0x7
c0015ce7:	89 c6                	mov    esi,eax
c0015ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cec:	85 db                	test   ebx,ebx
c0015cee:	78 14                	js     c0015d04 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	56                   	push   esi
c0015cf4:	e8 c3 c1 00 00       	call   c0021ebc <ThreadControlBlock::ThreadControlBlock()>
c0015cf9:	83 c4 10             	add    esp,0x10
c0015cfc:	83 c6 5f             	add    esi,0x5f
c0015cff:	4b                   	dec    ebx
c0015d00:	eb ea                	jmp    c0015cec <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d02:	66 90                	xchg   ax,ax
c0015d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d0f:	83 ec 0c             	sub    esp,0xc
c0015d12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d16:	e8 f9 cb ff ff       	call   c0012914 <Krnl::newProcessEnv(Process*)>
c0015d1b:	83 c4 10             	add    esp,0x10
c0015d1e:	89 c2                	mov    edx,eax
c0015d20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d24:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d2e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d37:	a1 d0 5b 02 c0       	mov    eax,ds:0xc0025bd0
c0015d3c:	8d 50 01             	lea    edx,[eax+0x1]
c0015d3f:	89 15 d0 5b 02 c0    	mov    DWORD PTR ds:0xc0025bd0,edx
c0015d45:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d49:	89 02                	mov    DWORD PTR [edx],eax
c0015d4b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d53:	83 ec 0c             	sub    esp,0xc
c0015d56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d5a:	e8 38 3a ff ff       	call   c0009797 <malloc>
c0015d5f:	83 c4 10             	add    esp,0x10
c0015d62:	89 c3                	mov    ebx,eax
c0015d64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d69:	83 ec 08             	sub    esp,0x8
c0015d6c:	50                   	push   eax
c0015d6d:	53                   	push   ebx
c0015d6e:	e8 69 61 ff ff       	call   c000bedc <VAS::VAS(bool)>
c0015d73:	83 c4 10             	add    esp,0x10
c0015d76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d84:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d92:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d96:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015da6:	85 c0                	test   eax,eax
c0015da8:	74 42                	je     c0015dec <Process::Process(bool, char const*, Process*, char**)+0x120>
c0015daa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015db4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015dba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dbe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015dc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dc8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015dd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd8:	05 0c 01 00 00       	add    eax,0x10c
c0015ddd:	83 ec 08             	sub    esp,0x8
c0015de0:	52                   	push   edx
c0015de1:	50                   	push   eax
c0015de2:	e8 7d a7 fe ff       	call   c0000564 <strcpy>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	eb 64                	jmp    c0015e50 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0015dec:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0015df4:	83 ec 0c             	sub    esp,0xc
c0015df7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015dfb:	e8 97 39 ff ff       	call   c0009797 <malloc>
c0015e00:	83 c4 10             	add    esp,0x10
c0015e03:	89 c3                	mov    ebx,eax
c0015e05:	83 ec 08             	sub    esp,0x8
c0015e08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e0c:	53                   	push   ebx
c0015e0d:	e8 92 4c ff ff       	call   c000aaa4 <VgaText::VgaText(char const*)>
c0015e12:	83 c4 10             	add    esp,0x10
c0015e15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e19:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e29:	83 ec 0c             	sub    esp,0xc
c0015e2c:	50                   	push   eax
c0015e2d:	e8 bf 44 ff ff       	call   c000a2f1 <addToTerminalCycle(VgaText*)>
c0015e32:	83 c4 10             	add    esp,0x10
c0015e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e39:	05 0c 01 00 00       	add    eax,0x10c
c0015e3e:	83 ec 08             	sub    esp,0x8
c0015e41:	68 31 46 02 c0       	push   0xc0024631
c0015e46:	50                   	push   eax
c0015e47:	e8 18 a7 fe ff       	call   c0000564 <strcpy>
c0015e4c:	83 c4 10             	add    esp,0x10
c0015e4f:	90                   	nop
c0015e50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e54:	83 c0 0c             	add    eax,0xc
c0015e57:	83 ec 08             	sub    esp,0x8
c0015e5a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e5e:	50                   	push   eax
c0015e5f:	e8 00 a7 fe ff       	call   c0000564 <strcpy>
c0015e64:	83 c4 10             	add    esp,0x10
c0015e67:	83 ec 08             	sub    esp,0x8
c0015e6a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e72:	e8 09 fc ff ff       	call   c0015a80 <Process::addArgs(char**)>
c0015e77:	83 c4 10             	add    esp,0x10
c0015e7a:	90                   	nop
c0015e7b:	83 c4 24             	add    esp,0x24
c0015e7e:	5b                   	pop    ebx
c0015e7f:	5e                   	pop    esi
c0015e80:	c3                   	ret    
c0015e81:	8d 76 00             	lea    esi,[esi+0x0]

c0015e84 <taskStartupFunction>:
c0015e84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e89:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e8c:	c3                   	ret    
c0015e8d:	90                   	nop
c0015e8e:	66 90                	xchg   ax,ax

c0015e90 <Semaphore::Semaphore(int)>:
c0015e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e98:	89 10                	mov    DWORD PTR [eax],edx
c0015e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e9e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015ea5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015eb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015ebb:	90                   	nop
c0015ebc:	c3                   	ret    
c0015ebd:	90                   	nop
c0015ebe:	66 90                	xchg   ax,ax

c0015ec0 <Mutex::Mutex()>:
c0015ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec4:	6a 01                	push   0x1
c0015ec6:	50                   	push   eax
c0015ec7:	e8 c4 ff ff ff       	call   c0015e90 <Semaphore::Semaphore(int)>
c0015ecc:	83 c4 08             	add    esp,0x8
c0015ecf:	90                   	nop
c0015ed0:	c3                   	ret    
c0015ed1:	90                   	nop
c0015ed2:	66 90                	xchg   ax,ax

c0015ed4 <Process::createThread(void (*)(void*), void*, int)>:
c0015ed4:	57                   	push   edi
c0015ed5:	31 c9                	xor    ecx,ecx
c0015ed7:	56                   	push   esi
c0015ed8:	53                   	push   ebx
c0015ed9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015edd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015ee4:	89 f2                	mov    edx,esi
c0015ee6:	66 90                	xchg   ax,ax
c0015ee8:	0f b7 c2             	movzx  eax,dx
c0015eeb:	83 e2 01             	and    edx,0x1
c0015eee:	74 14                	je     c0015f04 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015ef0:	d1 f8                	sar    eax,1
c0015ef2:	41                   	inc    ecx
c0015ef3:	89 c2                	mov    edx,eax
c0015ef5:	83 f9 10             	cmp    ecx,0x10
c0015ef8:	75 ee                	jne    c0015ee8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015efa:	31 db                	xor    ebx,ebx
c0015efc:	89 d8                	mov    eax,ebx
c0015efe:	5b                   	pop    ebx
c0015eff:	5e                   	pop    esi
c0015f00:	5f                   	pop    edi
c0015f01:	c3                   	ret    
c0015f02:	66 90                	xchg   ax,ax
c0015f04:	b8 01 00 00 00       	mov    eax,0x1
c0015f09:	d3 e0                	shl    eax,cl
c0015f0b:	09 c6                	or     esi,eax
c0015f0d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f10:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f17:	01 c0                	add    eax,eax
c0015f19:	01 c8                	add    eax,ecx
c0015f1b:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f1e:	01 d8                	add    eax,ebx
c0015f20:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f27:	75 0b                	jne    c0015f34 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f29:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f33:	90                   	nop
c0015f34:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f3a:	83 ec 08             	sub    esp,0x8
c0015f3d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f40:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f43:	01 c0                	add    eax,eax
c0015f45:	01 c8                	add    eax,ecx
c0015f47:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015f4a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015f4d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f53:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f5d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f63:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f69:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015f70:	89 ca                	mov    edx,ecx
c0015f72:	f7 da                	neg    edx
c0015f74:	c1 e2 15             	shl    edx,0x15
c0015f77:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f7d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f83:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f87:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f91:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f9b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015fa1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015fab:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015fb5:	53                   	push   ebx
c0015fb6:	68 44 99 02 c0       	push   0xc0029944
c0015fbb:	e8 9c bc 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fc0:	83 c4 10             	add    esp,0x10
c0015fc3:	89 d8                	mov    eax,ebx
c0015fc5:	5b                   	pop    ebx
c0015fc6:	5e                   	pop    esi
c0015fc7:	5f                   	pop    edi
c0015fc8:	c3                   	ret    
c0015fc9:	90                   	nop
c0015fca:	66 90                	xchg   ax,ax

c0015fcc <Process::createUserThread()>:
c0015fcc:	83 ec 0c             	sub    esp,0xc
c0015fcf:	68 80 00 00 00       	push   0x80
c0015fd4:	6a 00                	push   0x0
c0015fd6:	68 7c 59 01 c0       	push   0xc001597c
c0015fdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fdf:	e8 f0 fe ff ff       	call   c0015ed4 <Process::createThread(void (*)(void*), void*, int)>
c0015fe4:	83 c4 1c             	add    esp,0x1c
c0015fe7:	c3                   	ret    

c0015fe8 <setupMultitasking(void (*)())>:
c0015fe8:	56                   	push   esi
c0015fe9:	53                   	push   ebx
c0015fea:	51                   	push   ecx
c0015feb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fef:	eb 13                	jmp    c0016004 <setupMultitasking(void (*)())+0x1c>
c0015ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ff4:	83 ec 0c             	sub    esp,0xc
c0015ff7:	68 44 99 02 c0       	push   0xc0029944
c0015ffc:	e8 a3 bb 00 00       	call   c0021ba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016001:	83 c4 10             	add    esp,0x10
c0016004:	83 ec 0c             	sub    esp,0xc
c0016007:	68 44 99 02 c0       	push   0xc0029944
c001600c:	e8 6f bb 00 00       	call   c0021b80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016011:	83 c4 10             	add    esp,0x10
c0016014:	84 c0                	test   al,al
c0016016:	74 dc                	je     c0015ff4 <setupMultitasking(void (*)())+0xc>
c0016018:	83 ec 0c             	sub    esp,0xc
c001601b:	68 1f 07 00 00       	push   0x71f
c0016020:	e8 72 37 ff ff       	call   c0009797 <malloc>
c0016025:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001602c:	89 c3                	mov    ebx,eax
c001602e:	6a 00                	push   0x0
c0016030:	68 35 46 02 c0       	push   0xc0024635
c0016035:	6a 01                	push   0x1
c0016037:	50                   	push   eax
c0016038:	e8 8f fc ff ff       	call   c0015ccc <Process::Process(bool, char const*, Process*, char**)>
c001603d:	83 c4 14             	add    esp,0x14
c0016040:	89 1d 50 99 02 c0    	mov    DWORD PTR ds:0xc0029950,ebx
c0016046:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c001604c:	e8 2a 45 ff ff       	call   c000a57b <setActiveTerminal(VgaText*)>
c0016051:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0016059:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016063:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016069:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001606c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016076:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001607c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016082:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001608c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016096:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160a0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00160a6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160b0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00160b6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00160c0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00160c6:	58                   	pop    eax
c00160c7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00160cd:	5a                   	pop    edx
c00160ce:	68 31 46 02 c0       	push   0xc0024631
c00160d3:	50                   	push   eax
c00160d4:	e8 8b a4 fe ff       	call   c0000564 <strcpy>
c00160d9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00160e0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00160e4:	83 c4 14             	add    esp,0x14
c00160e7:	5b                   	pop    ebx
c00160e8:	5e                   	pop    esi
c00160e9:	e9 9b a1 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00160ee:	66 90                	xchg   ax,ax

c00160f0 <schedule()>:
c00160f0:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c00160f5:	85 c0                	test   eax,eax
c00160f7:	74 0b                	je     c0016104 <schedule()+0x14>
c00160f9:	c7 05 20 99 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x1
c0016103:	c3                   	ret    
c0016104:	53                   	push   ebx
c0016105:	83 ec 14             	sub    esp,0x14
c0016108:	68 44 99 02 c0       	push   0xc0029944
c001610d:	e8 6e ba 00 00       	call   c0021b80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016112:	83 c4 10             	add    esp,0x10
c0016115:	84 c0                	test   al,al
c0016117:	75 3b                	jne    c0016154 <schedule()+0x64>
c0016119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001611e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016121:	4a                   	dec    edx
c0016122:	74 38                	je     c001615c <schedule()+0x6c>
c0016124:	83 ec 0c             	sub    esp,0xc
c0016127:	68 44 99 02 c0       	push   0xc0029944
c001612c:	e8 6b ba 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016131:	c7 04 24 44 99 02 c0 	mov    DWORD PTR [esp],0xc0029944
c0016138:	89 c3                	mov    ebx,eax
c001613a:	e8 65 ba 00 00       	call   c0021ba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001613f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016146:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016149:	e8 86 f8 ff ff       	call   c00159d4 <switchToThread(ThreadControlBlock*)>
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	8d 76 00             	lea    esi,[esi+0x0]
c0016154:	83 c4 08             	add    esp,0x8
c0016157:	5b                   	pop    ebx
c0016158:	c3                   	ret    
c0016159:	8d 76 00             	lea    esi,[esi+0x0]
c001615c:	83 ec 08             	sub    esp,0x8
c001615f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016166:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001616c:	68 44 99 02 c0       	push   0xc0029944
c0016171:	e8 e6 ba 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016176:	83 c4 10             	add    esp,0x10
c0016179:	eb a9                	jmp    c0016124 <schedule()+0x34>
c001617b:	90                   	nop

c001617c <Semaphore::tryAcquire()>:
c001617c:	53                   	push   ebx
c001617d:	83 ec 08             	sub    esp,0x8
c0016180:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016184:	fa                   	cli    
c0016185:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c001618a:	8d 50 01             	lea    edx,[eax+0x1]
c001618d:	89 15 28 99 02 c0    	mov    DWORD PTR ds:0xc0029928,edx
c0016193:	8b 15 24 99 02 c0    	mov    edx,DWORD PTR ds:0xc0029924
c0016199:	8d 5a 01             	lea    ebx,[edx+0x1]
c001619c:	89 1d 24 99 02 c0    	mov    DWORD PTR ds:0xc0029924,ebx
c00161a2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00161a5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00161a7:	7c 33                	jl     c00161dc <Semaphore::tryAcquire()+0x60>
c00161a9:	89 15 24 99 02 c0    	mov    DWORD PTR ds:0xc0029924,edx
c00161af:	85 d2                	test   edx,edx
c00161b1:	75 0d                	jne    c00161c0 <Semaphore::tryAcquire()+0x44>
c00161b3:	8b 15 20 99 02 c0    	mov    edx,DWORD PTR ds:0xc0029920
c00161b9:	85 d2                	test   edx,edx
c00161bb:	75 6b                	jne    c0016228 <Semaphore::tryAcquire()+0xac>
c00161bd:	8d 76 00             	lea    esi,[esi+0x0]
c00161c0:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00161c5:	85 c0                	test   eax,eax
c00161c7:	74 0b                	je     c00161d4 <Semaphore::tryAcquire()+0x58>
c00161c9:	8d 76 00             	lea    esi,[esi+0x0]
c00161cc:	31 c0                	xor    eax,eax
c00161ce:	83 c4 08             	add    esp,0x8
c00161d1:	5b                   	pop    ebx
c00161d2:	c3                   	ret    
c00161d3:	90                   	nop
c00161d4:	fb                   	sti    
c00161d5:	83 c4 08             	add    esp,0x8
c00161d8:	5b                   	pop    ebx
c00161d9:	c3                   	ret    
c00161da:	66 90                	xchg   ax,ax
c00161dc:	43                   	inc    ebx
c00161dd:	89 15 24 99 02 c0    	mov    DWORD PTR ds:0xc0029924,edx
c00161e3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00161e6:	85 d2                	test   edx,edx
c00161e8:	75 22                	jne    c001620c <Semaphore::tryAcquire()+0x90>
c00161ea:	8b 0d 20 99 02 c0    	mov    ecx,DWORD PTR ds:0xc0029920
c00161f0:	85 c9                	test   ecx,ecx
c00161f2:	74 18                	je     c001620c <Semaphore::tryAcquire()+0x90>
c00161f4:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c00161fe:	e8 ed fe ff ff       	call   c00160f0 <schedule()>
c0016203:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016208:	48                   	dec    eax
c0016209:	8d 76 00             	lea    esi,[esi+0x0]
c001620c:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016211:	85 c0                	test   eax,eax
c0016213:	75 0b                	jne    c0016220 <Semaphore::tryAcquire()+0xa4>
c0016215:	fb                   	sti    
c0016216:	b0 01                	mov    al,0x1
c0016218:	83 c4 08             	add    esp,0x8
c001621b:	5b                   	pop    ebx
c001621c:	c3                   	ret    
c001621d:	8d 76 00             	lea    esi,[esi+0x0]
c0016220:	b0 01                	mov    al,0x1
c0016222:	83 c4 08             	add    esp,0x8
c0016225:	5b                   	pop    ebx
c0016226:	c3                   	ret    
c0016227:	90                   	nop
c0016228:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c0016232:	e8 b9 fe ff ff       	call   c00160f0 <schedule()>
c0016237:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c001623c:	48                   	dec    eax
c001623d:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016242:	85 c0                	test   eax,eax
c0016244:	75 86                	jne    c00161cc <Semaphore::tryAcquire()+0x50>
c0016246:	eb 8c                	jmp    c00161d4 <Semaphore::tryAcquire()+0x58>

c0016248 <Semaphore::assertLocked(char const*)>:
c0016248:	83 ec 0c             	sub    esp,0xc
c001624b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001624f:	fa                   	cli    
c0016250:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016256:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c001625b:	8d 48 01             	lea    ecx,[eax+0x1]
c001625e:	89 0d 24 99 02 c0    	mov    DWORD PTR ds:0xc0029924,ecx
c0016264:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016266:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016269:	7c 29                	jl     c0016294 <Semaphore::assertLocked(char const*)+0x4c>
c001626b:	90                   	nop
c001626c:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c0016271:	85 c0                	test   eax,eax
c0016273:	75 0b                	jne    c0016280 <Semaphore::assertLocked(char const*)+0x38>
c0016275:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001627a:	85 c0                	test   eax,eax
c001627c:	75 2e                	jne    c00162ac <Semaphore::assertLocked(char const*)+0x64>
c001627e:	66 90                	xchg   ax,ax
c0016280:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016285:	48                   	dec    eax
c0016286:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001628b:	75 03                	jne    c0016290 <Semaphore::assertLocked(char const*)+0x48>
c001628d:	fb                   	sti    
c001628e:	66 90                	xchg   ax,ax
c0016290:	83 c4 0c             	add    esp,0xc
c0016293:	c3                   	ret    
c0016294:	83 ec 0c             	sub    esp,0xc
c0016297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001629b:	e8 eb c7 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00162a0:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	48                   	dec    eax
c00162a9:	eb c1                	jmp    c001626c <Semaphore::assertLocked(char const*)+0x24>
c00162ab:	90                   	nop
c00162ac:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c00162b6:	e8 35 fe ff ff       	call   c00160f0 <schedule()>
c00162bb:	eb c3                	jmp    c0016280 <Semaphore::assertLocked(char const*)+0x38>
c00162bd:	8d 76 00             	lea    esi,[esi+0x0]

c00162c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162cf:	e8 1c fe ff ff       	call   c00160f0 <schedule()>
c00162d4:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00162d9:	48                   	dec    eax
c00162da:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00162df:	75 03                	jne    c00162e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00162e1:	fb                   	sti    
c00162e2:	66 90                	xchg   ax,ax
c00162e4:	83 c4 0c             	add    esp,0xc
c00162e7:	c3                   	ret    

c00162e8 <blockTask(TaskState)>:
c00162e8:	83 ec 0c             	sub    esp,0xc
c00162eb:	fa                   	cli    
c00162ec:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00162f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162fe:	e8 ed fd ff ff       	call   c00160f0 <schedule()>
c0016303:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016308:	48                   	dec    eax
c0016309:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001630e:	75 04                	jne    c0016314 <blockTask(TaskState)+0x2c>
c0016310:	fb                   	sti    
c0016311:	8d 76 00             	lea    esi,[esi+0x0]
c0016314:	83 c4 0c             	add    esp,0xc
c0016317:	c3                   	ret    

c0016318 <waitTask(int, int*, int)>:
c0016318:	83 ec 18             	sub    esp,0x18
c001631b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016324:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016327:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001632b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016330:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016333:	6a 07                	push   0x7
c0016335:	e8 ae ff ff ff       	call   c00162e8 <blockTask(TaskState)>
c001633a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016345:	85 d2                	test   edx,edx
c0016347:	74 0b                	je     c0016354 <waitTask(int, int*, int)+0x3c>
c0016349:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001634c:	89 02                	mov    DWORD PTR [edx],eax
c001634e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016353:	90                   	nop
c0016354:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016357:	83 c4 0c             	add    esp,0xc
c001635a:	c3                   	ret    
c001635b:	90                   	nop

c001635c <milliTenthSleepUntil(unsigned int)>:
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016363:	39 05 2c 8a 02 c0    	cmp    DWORD PTR ds:0xc0028a2c,eax
c0016369:	76 05                	jbe    c0016370 <milliTenthSleepUntil(unsigned int)+0x14>
c001636b:	90                   	nop
c001636c:	83 c4 0c             	add    esp,0xc
c001636f:	c3                   	ret    
c0016370:	fa                   	cli    
c0016371:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016377:	83 ec 08             	sub    esp,0x8
c001637a:	ff 05 24 99 02 c0    	inc    DWORD PTR ds:0xc0029924
c0016380:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016386:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016389:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001638f:	68 38 99 02 c0       	push   0xc0029938
c0016394:	e8 c3 b8 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016399:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00163a0:	e8 43 ff ff ff       	call   c00162e8 <blockTask(TaskState)>
c00163a5:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c00163aa:	83 c4 10             	add    esp,0x10
c00163ad:	48                   	dec    eax
c00163ae:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c00163b3:	85 c0                	test   eax,eax
c00163b5:	75 09                	jne    c00163c0 <milliTenthSleepUntil(unsigned int)+0x64>
c00163b7:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c00163bc:	85 c0                	test   eax,eax
c00163be:	75 14                	jne    c00163d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00163c0:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00163c5:	48                   	dec    eax
c00163c6:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00163cb:	75 9f                	jne    c001636c <milliTenthSleepUntil(unsigned int)+0x10>
c00163cd:	fb                   	sti    
c00163ce:	83 c4 0c             	add    esp,0xc
c00163d1:	c3                   	ret    
c00163d2:	66 90                	xchg   ax,ax
c00163d4:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c00163de:	e8 0d fd ff ff       	call   c00160f0 <schedule()>
c00163e3:	eb db                	jmp    c00163c0 <milliTenthSleepUntil(unsigned int)+0x64>
c00163e5:	8d 76 00             	lea    esi,[esi+0x0]

c00163e8 <milliTenthSleep(unsigned int)>:
c00163e8:	a1 2c 8a 02 c0       	mov    eax,ds:0xc0028a2c
c00163ed:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00163f1:	e9 66 ff ff ff       	jmp    c001635c <milliTenthSleepUntil(unsigned int)>
c00163f6:	66 90                	xchg   ax,ax

c00163f8 <sleep(unsigned int)>:
c00163f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163fc:	8d 04 80             	lea    eax,[eax+eax*4]
c00163ff:	8d 04 80             	lea    eax,[eax+eax*4]
c0016402:	8d 04 80             	lea    eax,[eax+eax*4]
c0016405:	8d 04 80             	lea    eax,[eax+eax*4]
c0016408:	c1 e0 04             	shl    eax,0x4
c001640b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001640f:	eb d7                	jmp    c00163e8 <milliTenthSleep(unsigned int)>
c0016411:	90                   	nop
c0016412:	66 90                	xchg   ax,ax

c0016414 <Semaphore::acquire()>:
c0016414:	83 ec 0c             	sub    esp,0xc
c0016417:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001641b:	fa                   	cli    
c001641c:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c0016421:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016427:	8d 48 01             	lea    ecx,[eax+0x1]
c001642a:	89 0d 24 99 02 c0    	mov    DWORD PTR ds:0xc0029924,ecx
c0016430:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016433:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016435:	7d 2d                	jge    c0016464 <Semaphore::acquire()+0x50>
c0016437:	41                   	inc    ecx
c0016438:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001643b:	90                   	nop
c001643c:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c0016441:	85 c0                	test   eax,eax
c0016443:	75 0b                	jne    c0016450 <Semaphore::acquire()+0x3c>
c0016445:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001644a:	85 c0                	test   eax,eax
c001644c:	75 62                	jne    c00164b0 <Semaphore::acquire()+0x9c>
c001644e:	66 90                	xchg   ax,ax
c0016450:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016455:	48                   	dec    eax
c0016456:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001645b:	75 03                	jne    c0016460 <Semaphore::acquire()+0x4c>
c001645d:	fb                   	sti    
c001645e:	66 90                	xchg   ax,ax
c0016460:	83 c4 0c             	add    esp,0xc
c0016463:	c3                   	ret    
c0016464:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016469:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016470:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016473:	85 c9                	test   ecx,ecx
c0016475:	74 4d                	je     c00164c4 <Semaphore::acquire()+0xb0>
c0016477:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001647a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016480:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016483:	90                   	nop
c0016484:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016489:	83 ec 0c             	sub    esp,0xc
c001648c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001648f:	68 b0 46 02 c0       	push   0xc00246b0
c0016494:	e8 88 62 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0016499:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00164a0:	e8 43 fe ff ff       	call   c00162e8 <blockTask(TaskState)>
c00164a5:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c00164aa:	83 c4 10             	add    esp,0x10
c00164ad:	48                   	dec    eax
c00164ae:	eb 8c                	jmp    c001643c <Semaphore::acquire()+0x28>
c00164b0:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c00164ba:	e8 31 fc ff ff       	call   c00160f0 <schedule()>
c00164bf:	eb 8f                	jmp    c0016450 <Semaphore::acquire()+0x3c>
c00164c1:	8d 76 00             	lea    esi,[esi+0x0]
c00164c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164cc:	eb b6                	jmp    c0016484 <Semaphore::acquire()+0x70>
c00164ce:	66 90                	xchg   ax,ax

c00164d0 <taskReturned>:
c00164d0:	83 ec 18             	sub    esp,0x18
c00164d3:	68 d0 46 02 c0       	push   0xc00246d0
c00164d8:	e8 ae c5 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00164dd:	83 c4 10             	add    esp,0x10
c00164e0:	83 ec 0c             	sub    esp,0xc
c00164e3:	6a 02                	push   0x2
c00164e5:	e8 fe fd ff ff       	call   c00162e8 <blockTask(TaskState)>
c00164ea:	fa                   	cli    
c00164eb:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00164f1:	e8 fa fb ff ff       	call   c00160f0 <schedule()>
c00164f6:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00164fb:	83 c4 10             	add    esp,0x10
c00164fe:	48                   	dec    eax
c00164ff:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016504:	85 c0                	test   eax,eax
c0016506:	75 d8                	jne    c00164e0 <taskReturned+0x10>
c0016508:	fb                   	sti    
c0016509:	eb d5                	jmp    c00164e0 <taskReturned+0x10>
c001650b:	90                   	nop

c001650c <Thr::processFromPID(int)>:
c001650c:	57                   	push   edi
c001650d:	56                   	push   esi
c001650e:	53                   	push   ebx
c001650f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016513:	fa                   	cli    
c0016514:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c001651a:	83 ec 0c             	sub    esp,0xc
c001651d:	68 44 99 02 c0       	push   0xc0029944
c0016522:	e8 75 b6 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016527:	83 c4 10             	add    esp,0x10
c001652a:	89 c7                	mov    edi,eax
c001652c:	eb 16                	jmp    c0016544 <Thr::processFromPID(int)+0x38>
c001652e:	66 90                	xchg   ax,ax
c0016530:	83 ec 0c             	sub    esp,0xc
c0016533:	68 44 99 02 c0       	push   0xc0029944
c0016538:	e8 5f b6 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001653d:	83 c4 10             	add    esp,0x10
c0016540:	39 f8                	cmp    eax,edi
c0016542:	74 4c                	je     c0016590 <Thr::processFromPID(int)+0x84>
c0016544:	83 ec 0c             	sub    esp,0xc
c0016547:	68 44 99 02 c0       	push   0xc0029944
c001654c:	e8 4b b6 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016551:	c7 04 24 44 99 02 c0 	mov    DWORD PTR [esp],0xc0029944
c0016558:	89 c3                	mov    ebx,eax
c001655a:	e8 45 b6 00 00       	call   c0021ba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001655f:	58                   	pop    eax
c0016560:	5a                   	pop    edx
c0016561:	53                   	push   ebx
c0016562:	68 44 99 02 c0       	push   0xc0029944
c0016567:	e8 f0 b6 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001656c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001656f:	83 c4 10             	add    esp,0x10
c0016572:	39 30                	cmp    DWORD PTR [eax],esi
c0016574:	75 ba                	jne    c0016530 <Thr::processFromPID(int)+0x24>
c0016576:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c001657b:	48                   	dec    eax
c001657c:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016581:	74 09                	je     c001658c <Thr::processFromPID(int)+0x80>
c0016583:	90                   	nop
c0016584:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016587:	5b                   	pop    ebx
c0016588:	5e                   	pop    esi
c0016589:	5f                   	pop    edi
c001658a:	c3                   	ret    
c001658b:	90                   	nop
c001658c:	fb                   	sti    
c001658d:	eb f5                	jmp    c0016584 <Thr::processFromPID(int)+0x78>
c001658f:	90                   	nop
c0016590:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016595:	48                   	dec    eax
c0016596:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001659b:	75 07                	jne    c00165a4 <Thr::processFromPID(int)+0x98>
c001659d:	fb                   	sti    
c001659e:	5b                   	pop    ebx
c001659f:	5e                   	pop    esi
c00165a0:	5f                   	pop    edi
c00165a1:	c3                   	ret    
c00165a2:	66 90                	xchg   ax,ax
c00165a4:	5b                   	pop    ebx
c00165a5:	31 c0                	xor    eax,eax
c00165a7:	5e                   	pop    esi
c00165a8:	5f                   	pop    edi
c00165a9:	c3                   	ret    
c00165aa:	66 90                	xchg   ax,ax

c00165ac <unblockTask(ThreadControlBlock*)>:
c00165ac:	53                   	push   ebx
c00165ad:	83 ec 08             	sub    esp,0x8
c00165b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165b4:	fa                   	cli    
c00165b5:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c00165bb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165be:	85 c0                	test   eax,eax
c00165c0:	74 66                	je     c0016628 <unblockTask(ThreadControlBlock*)+0x7c>
c00165c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165c5:	48                   	dec    eax
c00165c6:	74 38                	je     c0016600 <unblockTask(ThreadControlBlock*)+0x54>
c00165c8:	83 ec 0c             	sub    esp,0xc
c00165cb:	68 44 99 02 c0       	push   0xc0029944
c00165d0:	e8 c7 b5 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	85 c0                	test   eax,eax
c00165da:	75 1c                	jne    c00165f8 <unblockTask(ThreadControlBlock*)+0x4c>
c00165dc:	eb 5e                	jmp    c001663c <unblockTask(ThreadControlBlock*)+0x90>
c00165de:	66 90                	xchg   ax,ax
c00165e0:	83 ec 08             	sub    esp,0x8
c00165e3:	50                   	push   eax
c00165e4:	68 44 99 02 c0       	push   0xc0029944
c00165e9:	e8 5e b9 00 00       	call   c0021f4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00165ee:	83 c4 10             	add    esp,0x10
c00165f1:	85 c0                	test   eax,eax
c00165f3:	74 47                	je     c001663c <unblockTask(ThreadControlBlock*)+0x90>
c00165f5:	8d 76 00             	lea    esi,[esi+0x0]
c00165f8:	39 c3                	cmp    ebx,eax
c00165fa:	75 e4                	jne    c00165e0 <unblockTask(ThreadControlBlock*)+0x34>
c00165fc:	eb 12                	jmp    c0016610 <unblockTask(ThreadControlBlock*)+0x64>
c00165fe:	66 90                	xchg   ax,ax
c0016600:	83 ec 0c             	sub    esp,0xc
c0016603:	68 53 46 02 c0       	push   0xc0024653
c0016608:	e8 14 61 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001660d:	83 c4 10             	add    esp,0x10
c0016610:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016615:	48                   	dec    eax
c0016616:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001661b:	75 03                	jne    c0016620 <unblockTask(ThreadControlBlock*)+0x74>
c001661d:	fb                   	sti    
c001661e:	66 90                	xchg   ax,ax
c0016620:	83 c4 08             	add    esp,0x8
c0016623:	5b                   	pop    ebx
c0016624:	c3                   	ret    
c0016625:	8d 76 00             	lea    esi,[esi+0x0]
c0016628:	83 ec 0c             	sub    esp,0xc
c001662b:	68 3c 46 02 c0       	push   0xc002463c
c0016630:	e8 ec 60 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0016635:	83 c4 10             	add    esp,0x10
c0016638:	eb d6                	jmp    c0016610 <unblockTask(ThreadControlBlock*)+0x64>
c001663a:	66 90                	xchg   ax,ax
c001663c:	83 ec 08             	sub    esp,0x8
c001663f:	53                   	push   ebx
c0016640:	68 44 99 02 c0       	push   0xc0029944
c0016645:	e8 12 b6 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001664a:	83 c4 10             	add    esp,0x10
c001664d:	eb c1                	jmp    c0016610 <unblockTask(ThreadControlBlock*)+0x64>
c001664f:	90                   	nop

c0016650 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016650:	55                   	push   ebp
c0016651:	57                   	push   edi
c0016652:	56                   	push   esi
c0016653:	53                   	push   ebx
c0016654:	83 ec 1c             	sub    esp,0x1c
c0016657:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001665b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001665e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0016664:	85 ff                	test   edi,edi
c0016666:	7e 24                	jle    c001668c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0016668:	31 f6                	xor    esi,esi
c001666a:	66 90                	xchg   ax,ax
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0016676:	46                   	inc    esi
c0016677:	e8 2b 31 ff ff       	call   c00097a7 <free>
c001667c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001667f:	83 c4 10             	add    esp,0x10
c0016682:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016688:	7f e2                	jg     c001666c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001668a:	66 90                	xchg   ax,ax
c001668c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016696:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001669b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001669e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00166a1:	d3 c0                	rol    eax,cl
c00166a3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00166aa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166ad:	89 f7                	mov    edi,esi
c00166af:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166b7:	0f 85 73 01 00 00    	jne    c0016830 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00166bd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00166c3:	85 ed                	test   ebp,ebp
c00166c5:	74 1d                	je     c00166e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00166c7:	83 ec 0c             	sub    esp,0xc
c00166ca:	55                   	push   ebp
c00166cb:	e8 60 c1 ff ff       	call   c0012830 <EnvVarContainer::~EnvVarContainer()>
c00166d0:	59                   	pop    ecx
c00166d1:	5e                   	pop    esi
c00166d2:	6a 0c                	push   0xc
c00166d4:	55                   	push   ebp
c00166d5:	e8 66 5f ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c00166da:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166dd:	83 c4 10             	add    esp,0x10
c00166e0:	89 f7                	mov    edi,esi
c00166e2:	66 90                	xchg   ax,ax
c00166e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166ea:	85 c0                	test   eax,eax
c00166ec:	0f 84 b2 00 00 00    	je     c00167a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00166f2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00166f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00166f9:	31 c9                	xor    ecx,ecx
c00166fb:	eb 17                	jmp    c0016714 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00166fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016700:	41                   	inc    ecx
c0016701:	83 f9 10             	cmp    ecx,0x10
c0016704:	0f 84 9a 00 00 00    	je     c00167a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001670a:	66 90                	xchg   ax,ax
c001670c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016712:	66 90                	xchg   ax,ax
c0016714:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001671b:	d3 fa                	sar    edx,cl
c001671d:	83 e2 01             	and    edx,0x1
c0016720:	74 de                	je     c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016722:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016725:	01 d2                	add    edx,edx
c0016727:	01 ca                	add    edx,ecx
c0016729:	8d 14 92             	lea    edx,[edx+edx*4]
c001672c:	01 d0                	add    eax,edx
c001672e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016734:	83 fd 07             	cmp    ebp,0x7
c0016737:	75 c7                	jne    c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016739:	05 40 02 00 00       	add    eax,0x240
c001673e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016741:	83 fd ff             	cmp    ebp,0xffffffff
c0016744:	0f 8c ee 00 00 00    	jl     c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001674a:	0f 84 ac 01 00 00    	je     c00168fc <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0016750:	85 ed                	test   ebp,ebp
c0016752:	0f 84 90 01 00 00    	je     c00168e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0016758:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001675a:	75 a4                	jne    c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001675c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016762:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016766:	01 d0                	add    eax,edx
c0016768:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016775:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016778:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001677e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016785:	50                   	push   eax
c0016786:	e8 21 fe ff ff       	call   c00165ac <unblockTask(ThreadControlBlock*)>
c001678b:	83 c4 10             	add    esp,0x10
c001678e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016791:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016795:	89 f7                	mov    edi,esi
c0016797:	41                   	inc    ecx
c0016798:	83 f9 10             	cmp    ecx,0x10
c001679b:	0f 85 6b ff ff ff    	jne    c001670c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167a1:	8d 76 00             	lea    esi,[esi+0x0]
c00167a4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167aa:	85 c0                	test   eax,eax
c00167ac:	74 62                	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00167ae:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167b4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167ba:	74 54                	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	68 44 99 02 c0       	push   0xc0029944
c00167c4:	e8 d3 b3 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167c9:	c7 04 24 44 99 02 c0 	mov    DWORD PTR [esp],0xc0029944
c00167d0:	89 c7                	mov    edi,eax
c00167d2:	e8 a9 b3 00 00       	call   c0021b80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	84 c0                	test   al,al
c00167dc:	0f 84 ce 00 00 00    	je     c00168b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00167e2:	66 90                	xchg   ax,ax
c00167e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167e7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167ed:	85 d2                	test   edx,edx
c00167ef:	74 0f                	je     c0016800 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00167f1:	83 ec 0c             	sub    esp,0xc
c00167f4:	8b 02                	mov    eax,DWORD PTR [edx]
c00167f6:	52                   	push   edx
c00167f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167fa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167fd:	83 c4 10             	add    esp,0x10
c0016800:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001680a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001680d:	8d 76 00             	lea    esi,[esi+0x0]
c0016810:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016816:	85 db                	test   ebx,ebx
c0016818:	74 16                	je     c0016830 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001681a:	83 ec 0c             	sub    esp,0xc
c001681d:	53                   	push   ebx
c001681e:	e8 91 50 ff ff       	call   c000b8b4 <VAS::~VAS()>
c0016823:	58                   	pop    eax
c0016824:	5a                   	pop    edx
c0016825:	6a 14                	push   0x14
c0016827:	53                   	push   ebx
c0016828:	e8 13 5e ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	83 c4 1c             	add    esp,0x1c
c0016833:	5b                   	pop    ebx
c0016834:	5e                   	pop    esi
c0016835:	5f                   	pop    edi
c0016836:	5d                   	pop    ebp
c0016837:	c3                   	ret    
c0016838:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	68 04 47 02 c0       	push   0xc0024704
c0016844:	e8 42 c2 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0016849:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	89 f7                	mov    edi,esi
c0016851:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016855:	e9 a6 fe ff ff       	jmp    c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001685a:	66 90                	xchg   ax,ax
c001685c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016862:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016868:	75 1e                	jne    c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001686a:	83 ec 0c             	sub    esp,0xc
c001686d:	68 6c 47 02 c0       	push   0xc002476c
c0016872:	e8 aa 5e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0016877:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001687e:	e8 65 fa ff ff       	call   c00162e8 <blockTask(TaskState)>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	66 90                	xchg   ax,ax
c0016888:	83 ec 08             	sub    esp,0x8
c001688b:	56                   	push   esi
c001688c:	68 44 99 02 c0       	push   0xc0029944
c0016891:	e8 c6 b3 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016896:	c7 04 24 44 99 02 c0 	mov    DWORD PTR [esp],0xc0029944
c001689d:	e8 fa b2 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168a2:	83 c4 10             	add    esp,0x10
c00168a5:	39 f8                	cmp    eax,edi
c00168a7:	0f 84 37 ff ff ff    	je     c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00168ad:	8d 76 00             	lea    esi,[esi+0x0]
c00168b0:	83 ec 0c             	sub    esp,0xc
c00168b3:	68 44 99 02 c0       	push   0xc0029944
c00168b8:	e8 df b2 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168bd:	c7 04 24 44 99 02 c0 	mov    DWORD PTR [esp],0xc0029944
c00168c4:	89 c6                	mov    esi,eax
c00168c6:	e8 d9 b2 00 00       	call   c0021ba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168cb:	83 c4 10             	add    esp,0x10
c00168ce:	39 f3                	cmp    ebx,esi
c00168d0:	74 b6                	je     c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00168d2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00168d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168d8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00168de:	75 a8                	jne    c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00168e0:	e9 77 ff ff ff       	jmp    c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00168e5:	8d 76 00             	lea    esi,[esi+0x0]
c00168e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	68 38 47 02 c0       	push   0xc0024738
c00168f4:	e9 4b ff ff ff       	jmp    c0016844 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00168f9:	8d 76 00             	lea    esi,[esi+0x0]
c00168fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00168fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016902:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016905:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016908:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001690e:	01 d7                	add    edi,edx
c0016910:	89 f8                	mov    eax,edi
c0016912:	e9 51 fe ff ff       	jmp    c0016768 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0016917:	90                   	nop

c0016918 <cleanerTaskFunction(void*)>:
c0016918:	53                   	push   ebx
c0016919:	83 ec 08             	sub    esp,0x8
c001691c:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016921:	48                   	dec    eax
c0016922:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016927:	75 03                	jne    c001692c <cleanerTaskFunction(void*)+0x14>
c0016929:	fb                   	sti    
c001692a:	66 90                	xchg   ax,ax
c001692c:	fa                   	cli    
c001692d:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016932:	80 3d 0c 99 02 c0 00 	cmp    BYTE PTR ds:0xc002990c,0x0
c0016939:	8d 50 01             	lea    edx,[eax+0x1]
c001693c:	89 15 28 99 02 c0    	mov    DWORD PTR ds:0xc0029928,edx
c0016942:	0f 84 ac 00 00 00    	je     c00169f4 <cleanerTaskFunction(void*)+0xdc>
c0016948:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001694d:	85 c0                	test   eax,eax
c001694f:	75 03                	jne    c0016954 <cleanerTaskFunction(void*)+0x3c>
c0016951:	fb                   	sti    
c0016952:	66 90                	xchg   ax,ax
c0016954:	c6 05 0c 99 02 c0 00 	mov    BYTE PTR ds:0xc002990c,0x0
c001695b:	fa                   	cli    
c001695c:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016962:	ff 05 24 99 02 c0    	inc    DWORD PTR ds:0xc0029924
c0016968:	fa                   	cli    
c0016969:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c001696f:	eb 2b                	jmp    c001699c <cleanerTaskFunction(void*)+0x84>
c0016971:	8d 76 00             	lea    esi,[esi+0x0]
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	68 2c 99 02 c0       	push   0xc002992c
c001697c:	e8 1b b2 00 00       	call   c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016981:	c7 04 24 2c 99 02 c0 	mov    DWORD PTR [esp],0xc002992c
c0016988:	89 c3                	mov    ebx,eax
c001698a:	e8 15 b2 00 00       	call   c0021ba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001698f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016992:	e8 b9 fc ff ff       	call   c0016650 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	66 90                	xchg   ax,ax
c001699c:	83 ec 0c             	sub    esp,0xc
c001699f:	68 2c 99 02 c0       	push   0xc002992c
c00169a4:	e8 d7 b1 00 00       	call   c0021b80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169a9:	83 c4 10             	add    esp,0x10
c00169ac:	84 c0                	test   al,al
c00169ae:	74 c4                	je     c0016974 <cleanerTaskFunction(void*)+0x5c>
c00169b0:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00169b5:	48                   	dec    eax
c00169b6:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00169bb:	75 03                	jne    c00169c0 <cleanerTaskFunction(void*)+0xa8>
c00169bd:	fb                   	sti    
c00169be:	66 90                	xchg   ax,ax
c00169c0:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c00169c5:	48                   	dec    eax
c00169c6:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c00169cb:	0f 85 4b ff ff ff    	jne    c001691c <cleanerTaskFunction(void*)+0x4>
c00169d1:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c00169d6:	85 c0                	test   eax,eax
c00169d8:	0f 84 3e ff ff ff    	je     c001691c <cleanerTaskFunction(void*)+0x4>
c00169de:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c00169e8:	e8 03 f7 ff ff       	call   c00160f0 <schedule()>
c00169ed:	e9 2a ff ff ff       	jmp    c001691c <cleanerTaskFunction(void*)+0x4>
c00169f2:	66 90                	xchg   ax,ax
c00169f4:	83 ec 0c             	sub    esp,0xc
c00169f7:	6a 02                	push   0x2
c00169f9:	e8 c2 f8 ff ff       	call   c00162c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	e9 4e ff ff ff       	jmp    c0016954 <cleanerTaskFunction(void*)+0x3c>
c0016a06:	66 90                	xchg   ax,ax

c0016a08 <terminateTask(int)>:
c0016a08:	83 ec 14             	sub    esp,0x14
c0016a0b:	fa                   	cli    
c0016a0c:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016a12:	ff 05 24 99 02 c0    	inc    DWORD PTR ds:0xc0029924
c0016a18:	fa                   	cli    
c0016a19:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016a1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a28:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a30:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a33:	50                   	push   eax
c0016a34:	68 2c 99 02 c0       	push   0xc002992c
c0016a39:	e8 1e b2 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a4d:	a1 08 99 02 c0       	mov    eax,ds:0xc0029908
c0016a52:	85 c0                	test   eax,eax
c0016a54:	74 5e                	je     c0016ab4 <terminateTask(int)+0xac>
c0016a56:	83 ec 0c             	sub    esp,0xc
c0016a59:	c6 05 0c 99 02 c0 01 	mov    BYTE PTR ds:0xc002990c,0x1
c0016a60:	50                   	push   eax
c0016a61:	e8 46 fb ff ff       	call   c00165ac <unblockTask(ThreadControlBlock*)>
c0016a66:	83 c4 10             	add    esp,0x10
c0016a69:	8d 76 00             	lea    esi,[esi+0x0]
c0016a6c:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016a71:	48                   	dec    eax
c0016a72:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016a77:	75 03                	jne    c0016a7c <terminateTask(int)+0x74>
c0016a79:	fb                   	sti    
c0016a7a:	66 90                	xchg   ax,ax
c0016a7c:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c0016a81:	48                   	dec    eax
c0016a82:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c0016a87:	75 0b                	jne    c0016a94 <terminateTask(int)+0x8c>
c0016a89:	83 3d 20 99 02 c0 00 	cmp    DWORD PTR ds:0xc0029920,0x0
c0016a90:	75 36                	jne    c0016ac8 <terminateTask(int)+0xc0>
c0016a92:	66 90                	xchg   ax,ax
c0016a94:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016a99:	48                   	dec    eax
c0016a9a:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016a9f:	75 03                	jne    c0016aa4 <terminateTask(int)+0x9c>
c0016aa1:	fb                   	sti    
c0016aa2:	66 90                	xchg   ax,ax
c0016aa4:	fa                   	cli    
c0016aa5:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016aab:	90                   	nop
c0016aac:	e8 3f f6 ff ff       	call   c00160f0 <schedule()>
c0016ab1:	eb e1                	jmp    c0016a94 <terminateTask(int)+0x8c>
c0016ab3:	90                   	nop
c0016ab4:	83 ec 0c             	sub    esp,0xc
c0016ab7:	68 6a 46 02 c0       	push   0xc002466a
c0016abc:	e8 60 5c ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0016ac1:	83 c4 10             	add    esp,0x10
c0016ac4:	eb a6                	jmp    c0016a6c <terminateTask(int)+0x64>
c0016ac6:	66 90                	xchg   ax,ax
c0016ac8:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c0016ad2:	eb d8                	jmp    c0016aac <terminateTask(int)+0xa4>

c0016ad4 <Thr::terminateFromIRQ(int)>:
c0016ad4:	83 ec 18             	sub    esp,0x18
c0016ad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016adb:	e8 28 ff ff ff       	call   c0016a08 <terminateTask(int)>

c0016ae0 <Semaphore::release()>:
c0016ae0:	83 ec 0c             	sub    esp,0xc
c0016ae3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ae7:	fa                   	cli    
c0016ae8:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c0016aed:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016af3:	8d 48 01             	lea    ecx,[eax+0x1]
c0016af6:	89 0d 24 99 02 c0    	mov    DWORD PTR ds:0xc0029924,ecx
c0016afc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016aff:	85 c9                	test   ecx,ecx
c0016b01:	74 41                	je     c0016b44 <Semaphore::release()+0x64>
c0016b03:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b06:	83 ec 0c             	sub    esp,0xc
c0016b09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b0c:	51                   	push   ecx
c0016b0d:	e8 9a fa ff ff       	call   c00165ac <unblockTask(ThreadControlBlock*)>
c0016b12:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c0016b17:	83 c4 10             	add    esp,0x10
c0016b1a:	48                   	dec    eax
c0016b1b:	90                   	nop
c0016b1c:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c0016b21:	85 c0                	test   eax,eax
c0016b23:	75 0b                	jne    c0016b30 <Semaphore::release()+0x50>
c0016b25:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c0016b2a:	85 c0                	test   eax,eax
c0016b2c:	75 1e                	jne    c0016b4c <Semaphore::release()+0x6c>
c0016b2e:	66 90                	xchg   ax,ax
c0016b30:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016b35:	48                   	dec    eax
c0016b36:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016b3b:	75 03                	jne    c0016b40 <Semaphore::release()+0x60>
c0016b3d:	fb                   	sti    
c0016b3e:	66 90                	xchg   ax,ax
c0016b40:	83 c4 0c             	add    esp,0xc
c0016b43:	c3                   	ret    
c0016b44:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0016b47:	eb d3                	jmp    c0016b1c <Semaphore::release()+0x3c>
c0016b49:	8d 76 00             	lea    esi,[esi+0x0]
c0016b4c:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c0016b56:	e8 95 f5 ff ff       	call   c00160f0 <schedule()>
c0016b5b:	eb d3                	jmp    c0016b30 <Semaphore::release()+0x50>
c0016b5d:	8d 76 00             	lea    esi,[esi+0x0]

c0016b60 <__static_initialization_and_destruction_0(int, int)>:
c0016b60:	83 ec 0c             	sub    esp,0xc
c0016b63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016b68:	0f 85 8e 00 00 00    	jne    c0016bfc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b6e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016b76:	0f 85 80 00 00 00    	jne    c0016bfc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b7c:	83 ec 0c             	sub    esp,0xc
c0016b7f:	68 44 99 02 c0       	push   0xc0029944
c0016b84:	e8 7f b3 00 00       	call   c0021f08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b89:	83 c4 10             	add    esp,0x10
c0016b8c:	83 ec 04             	sub    esp,0x4
c0016b8f:	68 5c 59 02 c0       	push   0xc002595c
c0016b94:	68 44 99 02 c0       	push   0xc0029944
c0016b99:	68 b8 1e 02 c0       	push   0xc0021eb8
c0016b9e:	e8 17 5a ff ff       	call   c000c5ba <__cxa_atexit>
c0016ba3:	83 c4 10             	add    esp,0x10
c0016ba6:	83 ec 0c             	sub    esp,0xc
c0016ba9:	68 38 99 02 c0       	push   0xc0029938
c0016bae:	e8 55 b3 00 00       	call   c0021f08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bb3:	83 c4 10             	add    esp,0x10
c0016bb6:	83 ec 04             	sub    esp,0x4
c0016bb9:	68 5c 59 02 c0       	push   0xc002595c
c0016bbe:	68 38 99 02 c0       	push   0xc0029938
c0016bc3:	68 b8 1e 02 c0       	push   0xc0021eb8
c0016bc8:	e8 ed 59 ff ff       	call   c000c5ba <__cxa_atexit>
c0016bcd:	83 c4 10             	add    esp,0x10
c0016bd0:	83 ec 0c             	sub    esp,0xc
c0016bd3:	68 2c 99 02 c0       	push   0xc002992c
c0016bd8:	e8 2b b3 00 00       	call   c0021f08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bdd:	83 c4 10             	add    esp,0x10
c0016be0:	83 ec 04             	sub    esp,0x4
c0016be3:	68 5c 59 02 c0       	push   0xc002595c
c0016be8:	68 2c 99 02 c0       	push   0xc002992c
c0016bed:	68 b8 1e 02 c0       	push   0xc0021eb8
c0016bf2:	e8 c3 59 ff ff       	call   c000c5ba <__cxa_atexit>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	66 90                	xchg   ax,ax
c0016bfc:	90                   	nop
c0016bfd:	83 c4 0c             	add    esp,0xc
c0016c00:	c3                   	ret    
c0016c01:	8d 76 00             	lea    esi,[esi+0x0]

c0016c04 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	83 ec 08             	sub    esp,0x8
c0016c0a:	68 ff ff 00 00       	push   0xffff
c0016c0f:	6a 01                	push   0x1
c0016c11:	e8 4a ff ff ff       	call   c0016b60 <__static_initialization_and_destruction_0(int, int)>
c0016c16:	83 c4 10             	add    esp,0x10
c0016c19:	83 c4 0c             	add    esp,0xc
c0016c1c:	c3                   	ret    

c0016c1d <Vm::inbv(unsigned short)>:
c0016c1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c21:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c26:	75 06                	jne    c0016c2e <Vm::inbv(unsigned short)+0x11>
c0016c28:	a0 8c 99 02 c0       	mov    al,ds:0xc002998c
c0016c2d:	c3                   	ret    
c0016c2e:	ec                   	in     al,dx
c0016c2f:	c3                   	ret    

c0016c30 <Vm::outbv(unsigned short, unsigned char)>:
c0016c30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c38:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c3d:	75 25                	jne    c0016c64 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c3f:	8b 0d 8c 99 02 c0    	mov    ecx,DWORD PTR ds:0xc002998c
c0016c45:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c48:	88 81 a0 99 02 c0    	mov    BYTE PTR [ecx-0x3ffd6660],al
c0016c4e:	89 15 8c 99 02 c0    	mov    DWORD PTR ds:0xc002998c,edx
c0016c54:	83 fa 20             	cmp    edx,0x20
c0016c57:	75 0c                	jne    c0016c65 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016c59:	c7 05 8c 99 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002998c,0x1f
c0016c63:	c3                   	ret    
c0016c64:	ee                   	out    dx,al
c0016c65:	c3                   	ret    

c0016c66 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016c66:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c6b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c70:	c1 e0 04             	shl    eax,0x4
c0016c73:	01 d0                	add    eax,edx
c0016c75:	c3                   	ret    

c0016c76 <Vm::getSegment(unsigned int)>:
c0016c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c7a:	c1 e8 10             	shr    eax,0x10
c0016c7d:	c3                   	ret    

c0016c7e <Vm::getOffset(unsigned int)>:
c0016c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c82:	c3                   	ret    

c0016c83 <Vm::mainloop2()>:
c0016c83:	83 ec 18             	sub    esp,0x18
c0016c86:	fa                   	cli    
c0016c87:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016c8d:	6a 02                	push   0x2
c0016c8f:	c6 05 85 99 02 c0 01 	mov    BYTE PTR ds:0xc0029985,0x1
c0016c96:	e8 25 f6 ff ff       	call   c00162c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ca0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016ca4:	52                   	push   edx
c0016ca5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016ca9:	52                   	push   edx
c0016caa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016cae:	52                   	push   edx
c0016caf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016cb3:	50                   	push   eax
c0016cb4:	e8 76 95 fe ff       	call   c000022f <goToVM86>
c0016cb9:	83 c4 2c             	add    esp,0x2c
c0016cbc:	c3                   	ret    

c0016cbd <Vm::mainVm8086Loop(void*)>:
c0016cbd:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016cc2:	48                   	dec    eax
c0016cc3:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016cc8:	75 01                	jne    c0016ccb <Vm::mainVm8086Loop(void*)+0xe>
c0016cca:	fb                   	sti    
c0016ccb:	eb b6                	jmp    c0016c83 <Vm::mainloop2()>

c0016ccd <Vm::mainloop3(unsigned long)>:
c0016ccd:	83 ec 18             	sub    esp,0x18
c0016cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cd4:	fa                   	cli    
c0016cd5:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016cdb:	6a 02                	push   0x2
c0016cdd:	c6 05 84 99 02 c0 01 	mov    BYTE PTR ds:0xc0029984,0x1
c0016ce4:	a3 80 99 02 c0       	mov    ds:0xc0029980,eax
c0016ce9:	e8 d2 f5 ff ff       	call   c00162c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016cee:	83 c4 1c             	add    esp,0x1c
c0016cf1:	eb 90                	jmp    c0016c83 <Vm::mainloop2()>

c0016cf3 <Vm::initialise8086()>:
c0016cf3:	83 ec 0c             	sub    esp,0xc
c0016cf6:	68 80 00 00 00       	push   0x80
c0016cfb:	6a 00                	push   0x0
c0016cfd:	68 bd 6c 01 c0       	push   0xc0016cbd
c0016d02:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c0016d08:	e8 c7 f1 ff ff       	call   c0015ed4 <Process::createThread(void (*)(void*), void*, int)>
c0016d0d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d14:	a3 88 99 02 c0       	mov    ds:0xc0029988,eax
c0016d19:	68 00 01 00 00       	push   0x100
c0016d1e:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0016d23:	6a 00                	push   0x0
c0016d25:	6a 00                	push   0x0
c0016d27:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d2d:	e8 f6 4f ff ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d32:	83 c4 2c             	add    esp,0x2c
c0016d35:	c3                   	ret    

c0016d36 <Vm::finish8086()>:
c0016d36:	53                   	push   ebx
c0016d37:	83 ec 08             	sub    esp,0x8
c0016d3a:	fa                   	cli    
c0016d3b:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016d41:	80 3d 84 99 02 c0 00 	cmp    BYTE PTR ds:0xc0029984,0x0
c0016d48:	75 15                	jne    c0016d5f <Vm::finish8086()+0x29>
c0016d4a:	e8 a1 f3 ff ff       	call   c00160f0 <schedule()>
c0016d4f:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016d54:	48                   	dec    eax
c0016d55:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016d5a:	75 de                	jne    c0016d3a <Vm::finish8086()+0x4>
c0016d5c:	fb                   	sti    
c0016d5d:	eb db                	jmp    c0016d3a <Vm::finish8086()+0x4>
c0016d5f:	83 ec 0c             	sub    esp,0xc
c0016d62:	8b 1d 80 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029980
c0016d68:	ff 35 88 99 02 c0    	push   DWORD PTR ds:0xc0029988
c0016d6e:	c6 05 84 99 02 c0 00 	mov    BYTE PTR ds:0xc0029984,0x0
c0016d75:	e8 32 f8 ff ff       	call   c00165ac <unblockTask(ThreadControlBlock*)>
c0016d7a:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016d7f:	83 c4 10             	add    esp,0x10
c0016d82:	8d 50 ff             	lea    edx,[eax-0x1]
c0016d85:	89 15 28 99 02 c0    	mov    DWORD PTR ds:0xc0029928,edx
c0016d8b:	85 d2                	test   edx,edx
c0016d8d:	75 01                	jne    c0016d90 <Vm::finish8086()+0x5a>
c0016d8f:	fb                   	sti    
c0016d90:	89 d8                	mov    eax,ebx
c0016d92:	83 c4 08             	add    esp,0x8
c0016d95:	5b                   	pop    ebx
c0016d96:	c3                   	ret    

c0016d97 <Vm::getOutput8086(unsigned char*)>:
c0016d97:	57                   	push   edi
c0016d98:	8b 0d 8c 99 02 c0    	mov    ecx,DWORD PTR ds:0xc002998c
c0016d9e:	56                   	push   esi
c0016d9f:	be a0 99 02 c0       	mov    esi,0xc00299a0
c0016da4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016da8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016daa:	a1 8c 99 02 c0       	mov    eax,ds:0xc002998c
c0016daf:	5e                   	pop    esi
c0016db0:	c7 05 8c 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002998c,0x0
c0016dba:	5f                   	pop    edi
c0016dbb:	c3                   	ret    

c0016dbc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016dbc:	55                   	push   ebp
c0016dbd:	57                   	push   edi
c0016dbe:	56                   	push   esi
c0016dbf:	53                   	push   ebx
c0016dc0:	83 ec 0c             	sub    esp,0xc
c0016dc3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016dc7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016dcb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016dcf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016dd3:	fa                   	cli    
c0016dd4:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016dda:	80 3d 85 99 02 c0 00 	cmp    BYTE PTR ds:0xc0029985,0x0
c0016de1:	75 15                	jne    c0016df8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016de3:	e8 08 f3 ff ff       	call   c00160f0 <schedule()>
c0016de8:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016ded:	48                   	dec    eax
c0016dee:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016df3:	75 de                	jne    c0016dd3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016df5:	fb                   	sti    
c0016df6:	eb db                	jmp    c0016dd3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016df8:	a1 88 99 02 c0       	mov    eax,ds:0xc0029988
c0016dfd:	c7 05 8c 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002998c,0x0
c0016e07:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e0b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e0f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e13:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e17:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e1b:	0f b7 ff             	movzx  edi,di
c0016e1e:	0f b7 f6             	movzx  esi,si
c0016e21:	50                   	push   eax
c0016e22:	6a 20                	push   0x20
c0016e24:	6a 00                	push   0x0
c0016e26:	68 a0 99 02 c0       	push   0xc00299a0
c0016e2b:	e8 78 96 fe ff       	call   c00004a8 <memset>
c0016e30:	5a                   	pop    edx
c0016e31:	59                   	pop    ecx
c0016e32:	57                   	push   edi
c0016e33:	56                   	push   esi
c0016e34:	e8 2d fe ff ff       	call   c0016c66 <Vm::realToLinear(unsigned short, unsigned short)>
c0016e39:	83 c4 10             	add    esp,0x10
c0016e3c:	89 c7                	mov    edi,eax
c0016e3e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e42:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e48:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016e4d:	c6 05 85 99 02 c0 00 	mov    BYTE PTR ds:0xc0029985,0x0
c0016e54:	48                   	dec    eax
c0016e55:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016e5a:	75 01                	jne    c0016e5d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016e5c:	fb                   	sti    
c0016e5d:	83 ec 0c             	sub    esp,0xc
c0016e60:	ff 35 88 99 02 c0    	push   DWORD PTR ds:0xc0029988
c0016e66:	e8 41 f7 ff ff       	call   c00165ac <unblockTask(ThreadControlBlock*)>
c0016e6b:	83 c4 1c             	add    esp,0x1c
c0016e6e:	b0 01                	mov    al,0x1
c0016e70:	5b                   	pop    ebx
c0016e71:	5e                   	pop    esi
c0016e72:	5f                   	pop    edi
c0016e73:	5d                   	pop    ebp
c0016e74:	c3                   	ret    

c0016e75 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e75:	55                   	push   ebp
c0016e76:	57                   	push   edi
c0016e77:	56                   	push   esi
c0016e78:	53                   	push   ebx
c0016e79:	83 ec 2c             	sub    esp,0x2c
c0016e7c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0016e80:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0016e84:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0016e88:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0016e8c:	fa                   	cli    
c0016e8d:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c0016e93:	0f b6 35 85 99 02 c0 	movzx  esi,BYTE PTR ds:0xc0029985
c0016e9a:	89 f0                	mov    eax,esi
c0016e9c:	84 c0                	test   al,al
c0016e9e:	75 1d                	jne    c0016ebd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0016ea0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016ea4:	e8 47 f2 ff ff       	call   c00160f0 <schedule()>
c0016ea9:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016eae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016eb2:	48                   	dec    eax
c0016eb3:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016eb8:	75 d2                	jne    c0016e8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016eba:	fb                   	sti    
c0016ebb:	eb cf                	jmp    c0016e8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ebd:	a1 88 99 02 c0       	mov    eax,ds:0xc0029988
c0016ec2:	c7 05 8c 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002998c,0x0
c0016ecc:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0016ed0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016ed4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0016ed8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0016edc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ee0:	50                   	push   eax
c0016ee1:	6a 20                	push   0x20
c0016ee3:	6a 00                	push   0x0
c0016ee5:	68 a0 99 02 c0       	push   0xc00299a0
c0016eea:	e8 b9 95 fe ff       	call   c00004a8 <memset>
c0016eef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016ef6:	e8 9c 28 ff ff       	call   c0009797 <malloc>
c0016efb:	83 c4 0c             	add    esp,0xc
c0016efe:	89 c3                	mov    ebx,eax
c0016f00:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c0016f06:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f0a:	50                   	push   eax
c0016f0b:	e8 7c 5d ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c0016f10:	83 c4 10             	add    esp,0x10
c0016f13:	85 db                	test   ebx,ebx
c0016f15:	75 0a                	jne    c0016f21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0016f17:	83 ec 0c             	sub    esp,0xc
c0016f1a:	68 94 47 02 c0       	push   0xc0024794
c0016f1f:	eb 3e                	jmp    c0016f5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0016f21:	50                   	push   eax
c0016f22:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016f26:	50                   	push   eax
c0016f27:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f2b:	50                   	push   eax
c0016f2c:	53                   	push   ebx
c0016f2d:	e8 e0 60 ff ff       	call   c000d012 <File::stat(unsigned long long*, bool*)>
c0016f32:	83 c4 10             	add    esp,0x10
c0016f35:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016f3a:	74 0a                	je     c0016f46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0016f3c:	83 ec 0c             	sub    esp,0xc
c0016f3f:	68 a8 47 02 c0       	push   0xc00247a8
c0016f44:	eb 19                	jmp    c0016f5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0016f46:	51                   	push   ecx
c0016f47:	51                   	push   ecx
c0016f48:	6a 01                	push   0x1
c0016f4a:	53                   	push   ebx
c0016f4b:	e8 16 5e ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c0016f50:	83 c4 10             	add    esp,0x10
c0016f53:	85 c0                	test   eax,eax
c0016f55:	74 24                	je     c0016f7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0016f57:	83 ec 0c             	sub    esp,0xc
c0016f5a:	68 c1 47 02 c0       	push   0xc00247c1
c0016f5f:	e8 27 bb ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0016f64:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016f69:	83 c4 10             	add    esp,0x10
c0016f6c:	48                   	dec    eax
c0016f6d:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016f72:	85 c0                	test   eax,eax
c0016f74:	75 01                	jne    c0016f77 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0016f76:	fb                   	sti    
c0016f77:	31 f6                	xor    esi,esi
c0016f79:	eb 58                	jmp    c0016fd3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0016f7b:	0f b7 ed             	movzx  ebp,bp
c0016f7e:	50                   	push   eax
c0016f7f:	0f b7 ff             	movzx  edi,di
c0016f82:	50                   	push   eax
c0016f83:	55                   	push   ebp
c0016f84:	57                   	push   edi
c0016f85:	e8 dc fc ff ff       	call   c0016c66 <Vm::realToLinear(unsigned short, unsigned short)>
c0016f8a:	5a                   	pop    edx
c0016f8b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016f8d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016f91:	51                   	push   ecx
c0016f92:	50                   	push   eax
c0016f93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f9b:	53                   	push   ebx
c0016f9c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016f9f:	83 c4 14             	add    esp,0x14
c0016fa2:	53                   	push   ebx
c0016fa3:	e8 1c 5e ff ff       	call   c000cdc4 <File::close()>
c0016fa8:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	48                   	dec    eax
c0016fb1:	c6 05 85 99 02 c0 00 	mov    BYTE PTR ds:0xc0029985,0x0
c0016fb8:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c0016fbd:	85 c0                	test   eax,eax
c0016fbf:	75 01                	jne    c0016fc2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0016fc1:	fb                   	sti    
c0016fc2:	83 ec 0c             	sub    esp,0xc
c0016fc5:	ff 35 88 99 02 c0    	push   DWORD PTR ds:0xc0029988
c0016fcb:	e8 dc f5 ff ff       	call   c00165ac <unblockTask(ThreadControlBlock*)>
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	83 c4 2c             	add    esp,0x2c
c0016fd6:	89 f0                	mov    eax,esi
c0016fd8:	5b                   	pop    ebx
c0016fd9:	5e                   	pop    esi
c0016fda:	5f                   	pop    edi
c0016fdb:	5d                   	pop    ebp
c0016fdc:	c3                   	ret    

c0016fdd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016fdd:	57                   	push   edi
c0016fde:	56                   	push   esi
c0016fdf:	53                   	push   ebx
c0016fe0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016fec:	83 e8 06             	sub    eax,0x6
c0016fef:	0f b7 c0             	movzx  eax,ax
c0016ff2:	50                   	push   eax
c0016ff3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016ff8:	50                   	push   eax
c0016ff9:	e8 68 fc ff ff       	call   c0016c66 <Vm::realToLinear(unsigned short, unsigned short)>
c0016ffe:	5a                   	pop    edx
c0016fff:	5e                   	pop    esi
c0017000:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0017003:	8d 56 fa             	lea    edx,[esi-0x6]
c0017006:	81 e2 ff ff 00 00    	and    edx,0xffff
c001700c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001700f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0017012:	83 c2 02             	add    edx,0x2
c0017015:	66 89 10             	mov    WORD PTR [eax],dx
c0017018:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001701b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001701f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0017022:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017026:	89 d6                	mov    esi,edx
c0017028:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001702e:	66 81 e6 ff fd       	and    si,0xfdff
c0017033:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0017037:	74 07                	je     c0017040 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0017039:	89 d6                	mov    esi,edx
c001703b:	66 81 ce 00 02       	or     si,0x200
c0017040:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0017044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017049:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001704d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0017055:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0017058:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0017060:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0017063:	5b                   	pop    ebx
c0017064:	5e                   	pop    esi
c0017065:	5f                   	pop    edi
c0017066:	c3                   	ret    

c0017067 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017067:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001706c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017071:	c1 e0 04             	shl    eax,0x4
c0017074:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017077:	c3                   	ret    

c0017078 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017078:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001707d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017082:	c1 e0 04             	shl    eax,0x4
c0017085:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017089:	c3                   	ret    

c001708a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001708a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001708f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017094:	c1 e0 04             	shl    eax,0x4
c0017097:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001709a:	c3                   	ret    

c001709b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001709b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170a5:	c1 e0 04             	shl    eax,0x4
c00170a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170ac:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00170af:	c3                   	ret    

c00170b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00170b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170ba:	c1 e0 04             	shl    eax,0x4
c00170bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170c1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00170c5:	c3                   	ret    

c00170c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00170c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170d0:	c1 e0 04             	shl    eax,0x4
c00170d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170d7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00170da:	c3                   	ret    

c00170db <Vm::faultHandler(regs*)>:
c00170db:	55                   	push   ebp
c00170dc:	57                   	push   edi
c00170dd:	56                   	push   esi
c00170de:	53                   	push   ebx
c00170df:	83 ec 1c             	sub    esp,0x1c
c00170e2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00170e6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00170e9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00170ed:	0f b7 f8             	movzx  edi,ax
c00170f0:	52                   	push   edx
c00170f1:	0f b7 c0             	movzx  eax,ax
c00170f4:	50                   	push   eax
c00170f5:	e8 6c fb ff ff       	call   c0016c66 <Vm::realToLinear(unsigned short, unsigned short)>
c00170fa:	5a                   	pop    edx
c00170fb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00170fe:	59                   	pop    ecx
c00170ff:	89 c1                	mov    ecx,eax
c0017101:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017104:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017108:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001710d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017111:	0f b7 c5             	movzx  eax,bp
c0017114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017118:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001711c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017120:	e8 41 fb ff ff       	call   c0016c66 <Vm::realToLinear(unsigned short, unsigned short)>
c0017125:	5e                   	pop    esi
c0017126:	be 06 00 00 00       	mov    esi,0x6
c001712b:	5a                   	pop    edx
c001712c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0017131:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0017136:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017139:	80 fa 9d             	cmp    dl,0x9d
c001713c:	0f 84 2c 02 00 00    	je     c001736e <Vm::faultHandler(regs*)+0x293>
c0017142:	0f 87 91 00 00 00    	ja     c00171d9 <Vm::faultHandler(regs*)+0xfe>
c0017148:	80 fa 66             	cmp    dl,0x66
c001714b:	0f 84 98 01 00 00    	je     c00172e9 <Vm::faultHandler(regs*)+0x20e>
c0017151:	77 47                	ja     c001719a <Vm::faultHandler(regs*)+0xbf>
c0017153:	80 fa 36             	cmp    dl,0x36
c0017156:	0f 84 80 01 00 00    	je     c00172dc <Vm::faultHandler(regs*)+0x201>
c001715c:	77 1a                	ja     c0017178 <Vm::faultHandler(regs*)+0x9d>
c001715e:	80 fa 26             	cmp    dl,0x26
c0017161:	0f 84 4e 01 00 00    	je     c00172b5 <Vm::faultHandler(regs*)+0x1da>
c0017167:	80 fa 2e             	cmp    dl,0x2e
c001716a:	0f 85 e2 05 00 00    	jne    c0017752 <Vm::faultHandler(regs*)+0x677>
c0017170:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017173:	31 f6                	xor    esi,esi
c0017175:	41                   	inc    ecx
c0017176:	eb be                	jmp    c0017136 <Vm::faultHandler(regs*)+0x5b>
c0017178:	80 fa 64             	cmp    dl,0x64
c001717b:	0f 84 41 01 00 00    	je     c00172c2 <Vm::faultHandler(regs*)+0x1e7>
c0017181:	0f 87 48 01 00 00    	ja     c00172cf <Vm::faultHandler(regs*)+0x1f4>
c0017187:	80 fa 3e             	cmp    dl,0x3e
c001718a:	0f 85 c2 05 00 00    	jne    c0017752 <Vm::faultHandler(regs*)+0x677>
c0017190:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017193:	be 01 00 00 00       	mov    esi,0x1
c0017198:	eb db                	jmp    c0017175 <Vm::faultHandler(regs*)+0x9a>
c001719a:	80 fa 6d             	cmp    dl,0x6d
c001719d:	0f 84 ec 02 00 00    	je     c001748f <Vm::faultHandler(regs*)+0x3b4>
c00171a3:	77 17                	ja     c00171bc <Vm::faultHandler(regs*)+0xe1>
c00171a5:	80 fa 67             	cmp    dl,0x67
c00171a8:	0f 84 48 01 00 00    	je     c00172f6 <Vm::faultHandler(regs*)+0x21b>
c00171ae:	80 fa 6c             	cmp    dl,0x6c
c00171b1:	0f 84 69 02 00 00    	je     c0017420 <Vm::faultHandler(regs*)+0x345>
c00171b7:	e9 96 05 00 00       	jmp    c0017752 <Vm::faultHandler(regs*)+0x677>
c00171bc:	80 fa 6f             	cmp    dl,0x6f
c00171bf:	0f 84 f4 03 00 00    	je     c00175b9 <Vm::faultHandler(regs*)+0x4de>
c00171c5:	0f 82 59 03 00 00    	jb     c0017524 <Vm::faultHandler(regs*)+0x449>
c00171cb:	80 fa 9c             	cmp    dl,0x9c
c00171ce:	0f 84 2f 01 00 00    	je     c0017303 <Vm::faultHandler(regs*)+0x228>
c00171d4:	e9 79 05 00 00       	jmp    c0017752 <Vm::faultHandler(regs*)+0x677>
c00171d9:	80 fa ec             	cmp    dl,0xec
c00171dc:	0f 84 14 05 00 00    	je     c00176f6 <Vm::faultHandler(regs*)+0x61b>
c00171e2:	77 7b                	ja     c001725f <Vm::faultHandler(regs*)+0x184>
c00171e4:	80 fa e4             	cmp    dl,0xe4
c00171e7:	0f 84 93 04 00 00    	je     c0017680 <Vm::faultHandler(regs*)+0x5a5>
c00171ed:	77 53                	ja     c0017242 <Vm::faultHandler(regs*)+0x167>
c00171ef:	80 fa cd             	cmp    dl,0xcd
c00171f2:	0f 84 d9 01 00 00    	je     c00173d1 <Vm::faultHandler(regs*)+0x2f6>
c00171f8:	80 fa cf             	cmp    dl,0xcf
c00171fb:	0f 85 51 05 00 00    	jne    c0017752 <Vm::faultHandler(regs*)+0x677>
c0017201:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017204:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017207:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001720b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001720e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0017212:	81 ca 00 02 02 00    	or     edx,0x20200
c0017218:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001721b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001721f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017225:	66 c1 e8 09          	shr    ax,0x9
c0017229:	83 e0 01             	and    eax,0x1
c001722c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001722f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017232:	83 c0 06             	add    eax,0x6
c0017235:	25 ff ff 00 00       	and    eax,0xffff
c001723a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001723d:	e9 0c 05 00 00       	jmp    c001774e <Vm::faultHandler(regs*)+0x673>
c0017242:	80 fa e6             	cmp    dl,0xe6
c0017245:	0f 84 7f 04 00 00    	je     c00176ca <Vm::faultHandler(regs*)+0x5ef>
c001724b:	0f 82 4b 04 00 00    	jb     c001769c <Vm::faultHandler(regs*)+0x5c1>
c0017251:	80 fa e7             	cmp    dl,0xe7
c0017254:	0f 84 87 04 00 00    	je     c00176e1 <Vm::faultHandler(regs*)+0x606>
c001725a:	e9 f3 04 00 00       	jmp    c0017752 <Vm::faultHandler(regs*)+0x677>
c001725f:	80 fa ef             	cmp    dl,0xef
c0017262:	0f 84 d1 04 00 00    	je     c0017739 <Vm::faultHandler(regs*)+0x65e>
c0017268:	77 28                	ja     c0017292 <Vm::faultHandler(regs*)+0x1b7>
c001726a:	80 fa ed             	cmp    dl,0xed
c001726d:	0f 84 9f 04 00 00    	je     c0017712 <Vm::faultHandler(regs*)+0x637>
c0017273:	80 fa ee             	cmp    dl,0xee
c0017276:	0f 85 d6 04 00 00    	jne    c0017752 <Vm::faultHandler(regs*)+0x677>
c001727c:	50                   	push   eax
c001727d:	50                   	push   eax
c001727e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017282:	50                   	push   eax
c0017283:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017287:	50                   	push   eax
c0017288:	e8 a3 f9 ff ff       	call   c0016c30 <Vm::outbv(unsigned short, unsigned char)>
c001728d:	e9 9f 04 00 00       	jmp    c0017731 <Vm::faultHandler(regs*)+0x656>
c0017292:	80 fa fa             	cmp    dl,0xfa
c0017295:	0f 84 69 01 00 00    	je     c0017404 <Vm::faultHandler(regs*)+0x329>
c001729b:	80 fa fb             	cmp    dl,0xfb
c001729e:	0f 84 6e 01 00 00    	je     c0017412 <Vm::faultHandler(regs*)+0x337>
c00172a4:	80 fa f3             	cmp    dl,0xf3
c00172a7:	0f 85 a5 04 00 00    	jne    c0017752 <Vm::faultHandler(regs*)+0x677>
c00172ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172b0:	e9 c0 fe ff ff       	jmp    c0017175 <Vm::faultHandler(regs*)+0x9a>
c00172b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172b8:	be 02 00 00 00       	mov    esi,0x2
c00172bd:	e9 b3 fe ff ff       	jmp    c0017175 <Vm::faultHandler(regs*)+0x9a>
c00172c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172c5:	be 03 00 00 00       	mov    esi,0x3
c00172ca:	e9 a6 fe ff ff       	jmp    c0017175 <Vm::faultHandler(regs*)+0x9a>
c00172cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172d2:	be 04 00 00 00       	mov    esi,0x4
c00172d7:	e9 99 fe ff ff       	jmp    c0017175 <Vm::faultHandler(regs*)+0x9a>
c00172dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172df:	be 05 00 00 00       	mov    esi,0x5
c00172e4:	e9 8c fe ff ff       	jmp    c0017175 <Vm::faultHandler(regs*)+0x9a>
c00172e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172ec:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00172f1:	e9 7f fe ff ff       	jmp    c0017175 <Vm::faultHandler(regs*)+0x9a>
c00172f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172f9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00172fe:	e9 72 fe ff ff       	jmp    c0017175 <Vm::faultHandler(regs*)+0x9a>
c0017303:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017306:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001730a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001730f:	74 30                	je     c0017341 <Vm::faultHandler(regs*)+0x266>
c0017311:	83 e9 04             	sub    ecx,0x4
c0017314:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001731a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017320:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017323:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017326:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001732c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017330:	0f 84 15 04 00 00    	je     c001774b <Vm::faultHandler(regs*)+0x670>
c0017336:	80 ce 02             	or     dh,0x2
c0017339:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001733c:	e9 0a 04 00 00       	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c0017341:	83 e9 02             	sub    ecx,0x2
c0017344:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001734a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001734d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017351:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017357:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001735b:	74 05                	je     c0017362 <Vm::faultHandler(regs*)+0x287>
c001735d:	80 ce 02             	or     dh,0x2
c0017360:	eb 03                	jmp    c0017365 <Vm::faultHandler(regs*)+0x28a>
c0017362:	80 e6 fd             	and    dh,0xfd
c0017365:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017369:	e9 dd 03 00 00       	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c001736e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017373:	74 2a                	je     c001739f <Vm::faultHandler(regs*)+0x2c4>
c0017375:	8b 10                	mov    edx,DWORD PTR [eax]
c0017377:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001737d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017383:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017386:	8b 00                	mov    eax,DWORD PTR [eax]
c0017388:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001738e:	c1 e8 09             	shr    eax,0x9
c0017391:	83 e0 01             	and    eax,0x1
c0017394:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017397:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001739a:	83 c0 04             	add    eax,0x4
c001739d:	eb 25                	jmp    c00173c4 <Vm::faultHandler(regs*)+0x2e9>
c001739f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00173a2:	81 ca 00 02 02 00    	or     edx,0x20200
c00173a8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00173ae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173b4:	66 c1 e8 09          	shr    ax,0x9
c00173b8:	83 e0 01             	and    eax,0x1
c00173bb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173be:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173c1:	83 c0 02             	add    eax,0x2
c00173c4:	25 ff ff 00 00       	and    eax,0xffff
c00173c9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173cc:	e9 7a 03 00 00       	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c00173d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173d5:	3c ee                	cmp    al,0xee
c00173d7:	75 10                	jne    c00173e9 <Vm::faultHandler(regs*)+0x30e>
c00173d9:	83 ec 0c             	sub    esp,0xc
c00173dc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00173df:	e8 e9 f8 ff ff       	call   c0016ccd <Vm::mainloop3(unsigned long)>
c00173e4:	e9 4b 03 00 00       	jmp    c0017734 <Vm::faultHandler(regs*)+0x659>
c00173e9:	83 ec 0c             	sub    esp,0xc
c00173ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173f4:	51                   	push   ecx
c00173f5:	50                   	push   eax
c00173f6:	53                   	push   ebx
c00173f7:	e8 e1 fb ff ff       	call   c0016fdd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00173fc:	83 c4 20             	add    esp,0x20
c00173ff:	e9 4a 03 00 00       	jmp    c001774e <Vm::faultHandler(regs*)+0x673>
c0017404:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017409:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001740d:	e9 39 03 00 00       	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c0017412:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017417:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001741b:	e9 2b 03 00 00       	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c0017420:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017423:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017428:	74 2b                	je     c0017455 <Vm::faultHandler(regs*)+0x37a>
c001742a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017431:	76 22                	jbe    c0017455 <Vm::faultHandler(regs*)+0x37a>
c0017433:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017437:	50                   	push   eax
c0017438:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001743c:	50                   	push   eax
c001743d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017441:	50                   	push   eax
c0017442:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017446:	50                   	push   eax
c0017447:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001744b:	50                   	push   eax
c001744c:	6a 6c                	push   0x6c
c001744e:	6a 6c                	push   0x6c
c0017450:	e9 b9 01 00 00       	jmp    c001760e <Vm::faultHandler(regs*)+0x533>
c0017455:	83 ec 0c             	sub    esp,0xc
c0017458:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001745c:	0f b7 f6             	movzx  esi,si
c001745f:	50                   	push   eax
c0017460:	e8 b8 f7 ff ff       	call   c0016c1d <Vm::inbv(unsigned short)>
c0017465:	83 c4 0c             	add    esp,0xc
c0017468:	0f b6 c0             	movzx  eax,al
c001746b:	50                   	push   eax
c001746c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017470:	50                   	push   eax
c0017471:	56                   	push   esi
c0017472:	e8 24 fc ff ff       	call   c001709b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017477:	83 c4 10             	add    esp,0x10
c001747a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001747d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017481:	74 03                	je     c0017486 <Vm::faultHandler(regs*)+0x3ab>
c0017483:	48                   	dec    eax
c0017484:	eb 01                	jmp    c0017487 <Vm::faultHandler(regs*)+0x3ac>
c0017486:	40                   	inc    eax
c0017487:	0f b7 c0             	movzx  eax,ax
c001748a:	e9 8d 00 00 00       	jmp    c001751c <Vm::faultHandler(regs*)+0x441>
c001748f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017492:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017495:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001749a:	74 29                	je     c00174c5 <Vm::faultHandler(regs*)+0x3ea>
c001749c:	3d ff ff 00 00       	cmp    eax,0xffff
c00174a1:	76 22                	jbe    c00174c5 <Vm::faultHandler(regs*)+0x3ea>
c00174a3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174a7:	50                   	push   eax
c00174a8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174ac:	50                   	push   eax
c00174ad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174b1:	50                   	push   eax
c00174b2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174b6:	50                   	push   eax
c00174b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174bb:	50                   	push   eax
c00174bc:	6a 6d                	push   0x6d
c00174be:	6a 6d                	push   0x6d
c00174c0:	e9 49 01 00 00       	jmp    c001760e <Vm::faultHandler(regs*)+0x533>
c00174c5:	0f b7 c8             	movzx  ecx,ax
c00174c8:	0f b7 f6             	movzx  esi,si
c00174cb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00174ce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00174d3:	74 20                	je     c00174f5 <Vm::faultHandler(regs*)+0x41a>
c00174d5:	ed                   	in     eax,dx
c00174d6:	55                   	push   ebp
c00174d7:	50                   	push   eax
c00174d8:	51                   	push   ecx
c00174d9:	56                   	push   esi
c00174da:	e8 e7 fb ff ff       	call   c00170c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00174df:	83 c4 10             	add    esp,0x10
c00174e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174e5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00174e9:	74 05                	je     c00174f0 <Vm::faultHandler(regs*)+0x415>
c00174eb:	83 e8 04             	sub    eax,0x4
c00174ee:	eb 27                	jmp    c0017517 <Vm::faultHandler(regs*)+0x43c>
c00174f0:	83 c0 04             	add    eax,0x4
c00174f3:	eb 22                	jmp    c0017517 <Vm::faultHandler(regs*)+0x43c>
c00174f5:	66 ed                	in     ax,dx
c00174f7:	0f b7 c0             	movzx  eax,ax
c00174fa:	57                   	push   edi
c00174fb:	50                   	push   eax
c00174fc:	51                   	push   ecx
c00174fd:	56                   	push   esi
c00174fe:	e8 ad fb ff ff       	call   c00170b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017503:	83 c4 10             	add    esp,0x10
c0017506:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017509:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001750d:	74 05                	je     c0017514 <Vm::faultHandler(regs*)+0x439>
c001750f:	83 e8 02             	sub    eax,0x2
c0017512:	eb 03                	jmp    c0017517 <Vm::faultHandler(regs*)+0x43c>
c0017514:	83 c0 02             	add    eax,0x2
c0017517:	25 ff ff 00 00       	and    eax,0xffff
c001751c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001751f:	e9 27 02 00 00       	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c0017524:	8d 46 ff             	lea    eax,[esi-0x1]
c0017527:	3c 05                	cmp    al,0x5
c0017529:	77 24                	ja     c001754f <Vm::faultHandler(regs*)+0x474>
c001752b:	0f b6 c0             	movzx  eax,al
c001752e:	ff 24 85 34 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb7cc]
c0017535:	0f b7 fd             	movzx  edi,bp
c0017538:	eb 15                	jmp    c001754f <Vm::faultHandler(regs*)+0x474>
c001753a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001753e:	eb 0f                	jmp    c001754f <Vm::faultHandler(regs*)+0x474>
c0017540:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017544:	eb 09                	jmp    c001754f <Vm::faultHandler(regs*)+0x474>
c0017546:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001754a:	eb 03                	jmp    c001754f <Vm::faultHandler(regs*)+0x474>
c001754c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001754f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017552:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017557:	74 29                	je     c0017582 <Vm::faultHandler(regs*)+0x4a7>
c0017559:	3d ff ff 00 00       	cmp    eax,0xffff
c001755e:	76 22                	jbe    c0017582 <Vm::faultHandler(regs*)+0x4a7>
c0017560:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017564:	50                   	push   eax
c0017565:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017569:	50                   	push   eax
c001756a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001756e:	50                   	push   eax
c001756f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017573:	50                   	push   eax
c0017574:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017578:	50                   	push   eax
c0017579:	6a 6e                	push   0x6e
c001757b:	6a 6e                	push   0x6e
c001757d:	e9 8c 00 00 00       	jmp    c001760e <Vm::faultHandler(regs*)+0x533>
c0017582:	0f b7 c0             	movzx  eax,ax
c0017585:	52                   	push   edx
c0017586:	52                   	push   edx
c0017587:	50                   	push   eax
c0017588:	57                   	push   edi
c0017589:	e8 d9 fa ff ff       	call   c0017067 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001758e:	59                   	pop    ecx
c001758f:	0f b6 c0             	movzx  eax,al
c0017592:	5e                   	pop    esi
c0017593:	50                   	push   eax
c0017594:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017598:	50                   	push   eax
c0017599:	e8 92 f6 ff ff       	call   c0016c30 <Vm::outbv(unsigned short, unsigned char)>
c001759e:	83 c4 10             	add    esp,0x10
c00175a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175a4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175a8:	74 03                	je     c00175ad <Vm::faultHandler(regs*)+0x4d2>
c00175aa:	48                   	dec    eax
c00175ab:	eb 01                	jmp    c00175ae <Vm::faultHandler(regs*)+0x4d3>
c00175ad:	40                   	inc    eax
c00175ae:	0f b7 c0             	movzx  eax,ax
c00175b1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00175b4:	e9 92 01 00 00       	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c00175b9:	8d 46 ff             	lea    eax,[esi-0x1]
c00175bc:	3c 05                	cmp    al,0x5
c00175be:	77 1f                	ja     c00175df <Vm::faultHandler(regs*)+0x504>
c00175c0:	0f b6 c0             	movzx  eax,al
c00175c3:	ff 24 85 4c 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb7b4]
c00175ca:	89 ef                	mov    edi,ebp
c00175cc:	eb 11                	jmp    c00175df <Vm::faultHandler(regs*)+0x504>
c00175ce:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00175d1:	eb 0c                	jmp    c00175df <Vm::faultHandler(regs*)+0x504>
c00175d3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00175d6:	eb 07                	jmp    c00175df <Vm::faultHandler(regs*)+0x504>
c00175d8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00175db:	eb 02                	jmp    c00175df <Vm::faultHandler(regs*)+0x504>
c00175dd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00175df:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00175e2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00175e7:	74 37                	je     c0017620 <Vm::faultHandler(regs*)+0x545>
c00175e9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00175ef:	76 2f                	jbe    c0017620 <Vm::faultHandler(regs*)+0x545>
c00175f1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175f5:	50                   	push   eax
c00175f6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175fa:	50                   	push   eax
c00175fb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175ff:	50                   	push   eax
c0017600:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017604:	50                   	push   eax
c0017605:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017609:	50                   	push   eax
c001760a:	6a 6f                	push   0x6f
c001760c:	6a 6f                	push   0x6f
c001760e:	68 da 47 02 c0       	push   0xc00247da
c0017613:	e8 09 51 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0017618:	83 c4 20             	add    esp,0x20
c001761b:	e9 86 01 00 00       	jmp    c00177a6 <Vm::faultHandler(regs*)+0x6cb>
c0017620:	0f b7 d7             	movzx  edx,di
c0017623:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017626:	0f b7 c6             	movzx  eax,si
c0017629:	81 e1 00 04 00 00    	and    ecx,0x400
c001762f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017632:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017637:	74 1d                	je     c0017656 <Vm::faultHandler(regs*)+0x57b>
c0017639:	55                   	push   ebp
c001763a:	55                   	push   ebp
c001763b:	50                   	push   eax
c001763c:	52                   	push   edx
c001763d:	e8 48 fa ff ff       	call   c001708a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017642:	83 c4 10             	add    esp,0x10
c0017645:	89 fa                	mov    edx,edi
c0017647:	ef                   	out    dx,eax
c0017648:	85 c9                	test   ecx,ecx
c001764a:	74 05                	je     c0017651 <Vm::faultHandler(regs*)+0x576>
c001764c:	83 ee 04             	sub    esi,0x4
c001764f:	eb 21                	jmp    c0017672 <Vm::faultHandler(regs*)+0x597>
c0017651:	83 c6 04             	add    esi,0x4
c0017654:	eb 1c                	jmp    c0017672 <Vm::faultHandler(regs*)+0x597>
c0017656:	55                   	push   ebp
c0017657:	55                   	push   ebp
c0017658:	50                   	push   eax
c0017659:	52                   	push   edx
c001765a:	e8 19 fa ff ff       	call   c0017078 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	89 fa                	mov    edx,edi
c0017664:	66 ef                	out    dx,ax
c0017666:	85 c9                	test   ecx,ecx
c0017668:	74 05                	je     c001766f <Vm::faultHandler(regs*)+0x594>
c001766a:	83 ee 02             	sub    esi,0x2
c001766d:	eb 03                	jmp    c0017672 <Vm::faultHandler(regs*)+0x597>
c001766f:	83 c6 02             	add    esi,0x2
c0017672:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017678:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001767b:	e9 cb 00 00 00       	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c0017680:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017687:	83 ec 0c             	sub    esp,0xc
c001768a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001768e:	50                   	push   eax
c001768f:	e8 89 f5 ff ff       	call   c0016c1d <Vm::inbv(unsigned short)>
c0017694:	0f b6 c0             	movzx  eax,al
c0017697:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001769a:	eb 3f                	jmp    c00176db <Vm::faultHandler(regs*)+0x600>
c001769c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00176a1:	74 07                	je     c00176aa <Vm::faultHandler(regs*)+0x5cf>
c00176a3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176a7:	ed                   	in     eax,dx
c00176a8:	eb 14                	jmp    c00176be <Vm::faultHandler(regs*)+0x5e3>
c00176aa:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00176ad:	66 31 f6             	xor    si,si
c00176b0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00176b3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176b7:	66 ed                	in     ax,dx
c00176b9:	0f b7 c0             	movzx  eax,ax
c00176bc:	09 f0                	or     eax,esi
c00176be:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00176c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00176c5:	e9 84 00 00 00       	jmp    c001774e <Vm::faultHandler(regs*)+0x673>
c00176ca:	52                   	push   edx
c00176cb:	52                   	push   edx
c00176cc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00176d0:	50                   	push   eax
c00176d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176d5:	50                   	push   eax
c00176d6:	e8 55 f5 ff ff       	call   c0016c30 <Vm::outbv(unsigned short, unsigned char)>
c00176db:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00176df:	eb 53                	jmp    c0017734 <Vm::faultHandler(regs*)+0x659>
c00176e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00176e4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176e8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00176ed:	74 03                	je     c00176f2 <Vm::faultHandler(regs*)+0x617>
c00176ef:	ef                   	out    dx,eax
c00176f0:	eb cf                	jmp    c00176c1 <Vm::faultHandler(regs*)+0x5e6>
c00176f2:	66 ef                	out    dx,ax
c00176f4:	eb cb                	jmp    c00176c1 <Vm::faultHandler(regs*)+0x5e6>
c00176f6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00176fd:	83 ec 0c             	sub    esp,0xc
c0017700:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017704:	50                   	push   eax
c0017705:	e8 13 f5 ff ff       	call   c0016c1d <Vm::inbv(unsigned short)>
c001770a:	0f b6 c0             	movzx  eax,al
c001770d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017710:	eb 1f                	jmp    c0017731 <Vm::faultHandler(regs*)+0x656>
c0017712:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017715:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001771a:	74 03                	je     c001771f <Vm::faultHandler(regs*)+0x644>
c001771c:	ed                   	in     eax,dx
c001771d:	eb 0d                	jmp    c001772c <Vm::faultHandler(regs*)+0x651>
c001771f:	66 ed                	in     ax,dx
c0017721:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017724:	0f b7 c0             	movzx  eax,ax
c0017727:	66 31 d2             	xor    dx,dx
c001772a:	09 d0                	or     eax,edx
c001772c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001772f:	eb 1a                	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c0017731:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017734:	83 c4 10             	add    esp,0x10
c0017737:	eb 15                	jmp    c001774e <Vm::faultHandler(regs*)+0x673>
c0017739:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001773c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001773f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017744:	74 03                	je     c0017749 <Vm::faultHandler(regs*)+0x66e>
c0017746:	ef                   	out    dx,eax
c0017747:	eb 02                	jmp    c001774b <Vm::faultHandler(regs*)+0x670>
c0017749:	66 ef                	out    dx,ax
c001774b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001774e:	b0 01                	mov    al,0x1
c0017750:	eb 56                	jmp    c00177a8 <Vm::faultHandler(regs*)+0x6cd>
c0017752:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017756:	50                   	push   eax
c0017757:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001775b:	50                   	push   eax
c001775c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017760:	50                   	push   eax
c0017761:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017765:	50                   	push   eax
c0017766:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001776a:	50                   	push   eax
c001776b:	52                   	push   edx
c001776c:	52                   	push   edx
c001776d:	68 07 48 02 c0       	push   0xc0024807
c0017772:	e8 aa 4f ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0017777:	83 c4 20             	add    esp,0x20
c001777a:	83 ec 0c             	sub    esp,0xc
c001777d:	6a 60                	push   0x60
c001777f:	e8 99 f4 ff ff       	call   c0016c1d <Vm::inbv(unsigned short)>
c0017784:	83 c4 10             	add    esp,0x10
c0017787:	3c 1c                	cmp    al,0x1c
c0017789:	74 04                	je     c001778f <Vm::faultHandler(regs*)+0x6b4>
c001778b:	3c 5a                	cmp    al,0x5a
c001778d:	75 eb                	jne    c001777a <Vm::faultHandler(regs*)+0x69f>
c001778f:	3c 5a                	cmp    al,0x5a
c0017791:	74 04                	je     c0017797 <Vm::faultHandler(regs*)+0x6bc>
c0017793:	3c 1c                	cmp    al,0x1c
c0017795:	75 0f                	jne    c00177a6 <Vm::faultHandler(regs*)+0x6cb>
c0017797:	83 ec 0c             	sub    esp,0xc
c001779a:	6a 60                	push   0x60
c001779c:	e8 7c f4 ff ff       	call   c0016c1d <Vm::inbv(unsigned short)>
c00177a1:	83 c4 10             	add    esp,0x10
c00177a4:	eb e9                	jmp    c001778f <Vm::faultHandler(regs*)+0x6b4>
c00177a6:	31 c0                	xor    eax,eax
c00177a8:	83 c4 1c             	add    esp,0x1c
c00177ab:	5b                   	pop    ebx
c00177ac:	5e                   	pop    esi
c00177ad:	5f                   	pop    edi
c00177ae:	5d                   	pop    ebp
c00177af:	c3                   	ret    

c00177b0 <Vm::fpuInternalTo32(unsigned long long)>:
c00177b0:	57                   	push   edi
c00177b1:	56                   	push   esi
c00177b2:	53                   	push   ebx
c00177b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177bb:	89 d6                	mov    esi,edx
c00177bd:	89 d7                	mov    edi,edx
c00177bf:	89 c1                	mov    ecx,eax
c00177c1:	c1 ef 14             	shr    edi,0x14
c00177c4:	89 d3                	mov    ebx,edx
c00177c6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00177cc:	31 d2                	xor    edx,edx
c00177ce:	89 f8                	mov    eax,edi
c00177d0:	81 e6 00 00 00 80    	and    esi,0x80000000
c00177d6:	bf ff 00 00 00       	mov    edi,0xff
c00177db:	05 80 fc ff ff       	add    eax,0xfffffc80
c00177e0:	83 d2 ff             	adc    edx,0xffffffff
c00177e3:	39 c7                	cmp    edi,eax
c00177e5:	bf 00 00 00 00       	mov    edi,0x0
c00177ea:	19 d7                	sbb    edi,edx
c00177ec:	72 16                	jb     c0017804 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c00177ee:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c00177f2:	c1 e0 17             	shl    eax,0x17
c00177f5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00177fb:	09 f1                	or     ecx,esi
c00177fd:	09 c1                	or     ecx,eax
c00177ff:	89 cf                	mov    edi,ecx
c0017801:	eb 05                	jmp    c0017808 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0017803:	90                   	nop
c0017804:	31 ff                	xor    edi,edi
c0017806:	66 90                	xchg   ax,ax
c0017808:	89 f8                	mov    eax,edi
c001780a:	5b                   	pop    ebx
c001780b:	5e                   	pop    esi
c001780c:	5f                   	pop    edi
c001780d:	c3                   	ret    

c001780e <Vm::fpuInternalTo64(unsigned long long)>:
c001780e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017812:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017816:	c3                   	ret    

c0017817 <Vm::fpu32ToInternal(unsigned int)>:
c0017817:	57                   	push   edi
c0017818:	31 ff                	xor    edi,edi
c001781a:	56                   	push   esi
c001781b:	53                   	push   ebx
c001781c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017820:	89 cb                	mov    ebx,ecx
c0017822:	89 ce                	mov    esi,ecx
c0017824:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001782a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0017830:	c1 e9 17             	shr    ecx,0x17
c0017833:	89 f0                	mov    eax,esi
c0017835:	0f b6 d1             	movzx  edx,cl
c0017838:	81 c2 80 03 00 00    	add    edx,0x380
c001783e:	89 d1                	mov    ecx,edx
c0017840:	89 fa                	mov    edx,edi
c0017842:	c1 e1 14             	shl    ecx,0x14
c0017845:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0017849:	c1 e0 1d             	shl    eax,0x1d
c001784c:	89 d7                	mov    edi,edx
c001784e:	89 c6                	mov    esi,eax
c0017850:	89 ca                	mov    edx,ecx
c0017852:	89 f0                	mov    eax,esi
c0017854:	09 fa                	or     edx,edi
c0017856:	09 da                	or     edx,ebx
c0017858:	5b                   	pop    ebx
c0017859:	5e                   	pop    esi
c001785a:	5f                   	pop    edi
c001785b:	c3                   	ret    

c001785c <Vm::fpu64ToInternal(unsigned long long)>:
c001785c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017860:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017864:	c3                   	ret    

c0017865 <Vm::fpuFloatToLong(unsigned long long)>:
c0017865:	57                   	push   edi
c0017866:	31 c0                	xor    eax,eax
c0017868:	56                   	push   esi
c0017869:	31 d2                	xor    edx,edx
c001786b:	53                   	push   ebx
c001786c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017870:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017874:	89 d9                	mov    ecx,ebx
c0017876:	c1 e9 14             	shr    ecx,0x14
c0017879:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001787f:	89 cf                	mov    edi,ecx
c0017881:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0017887:	78 37                	js     c00178c0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0017889:	89 d9                	mov    ecx,ebx
c001788b:	89 f0                	mov    eax,esi
c001788d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0017893:	81 c9 00 00 10 00    	or     ecx,0x100000
c0017899:	89 ca                	mov    edx,ecx
c001789b:	b9 34 00 00 00       	mov    ecx,0x34
c00178a0:	29 f9                	sub    ecx,edi
c00178a2:	0f ad d0             	shrd   eax,edx,cl
c00178a5:	d3 fa                	sar    edx,cl
c00178a7:	f6 c1 20             	test   cl,0x20
c00178aa:	74 08                	je     c00178b4 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c00178ac:	89 d0                	mov    eax,edx
c00178ae:	c1 fa 1f             	sar    edx,0x1f
c00178b1:	8d 76 00             	lea    esi,[esi+0x0]
c00178b4:	85 db                	test   ebx,ebx
c00178b6:	79 08                	jns    c00178c0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00178b8:	f7 d8                	neg    eax
c00178ba:	83 d2 00             	adc    edx,0x0
c00178bd:	f7 da                	neg    edx
c00178bf:	90                   	nop
c00178c0:	5b                   	pop    ebx
c00178c1:	5e                   	pop    esi
c00178c2:	5f                   	pop    edi
c00178c3:	c3                   	ret    

c00178c4 <Vm::fpuULongToFloat(unsigned long long)>:
c00178c4:	57                   	push   edi
c00178c5:	31 c9                	xor    ecx,ecx
c00178c7:	56                   	push   esi
c00178c8:	53                   	push   ebx
c00178c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178cd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178d1:	8d 76 00             	lea    esi,[esi+0x0]
c00178d4:	0f ba e7 14          	bt     edi,0x14
c00178d8:	72 0a                	jb     c00178e4 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c00178da:	01 f6                	add    esi,esi
c00178dc:	11 ff                	adc    edi,edi
c00178de:	41                   	inc    ecx
c00178df:	eb f3                	jmp    c00178d4 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c00178e1:	8d 76 00             	lea    esi,[esi+0x0]
c00178e4:	89 fa                	mov    edx,edi
c00178e6:	89 f0                	mov    eax,esi
c00178e8:	bb 33 04 00 00       	mov    ebx,0x433
c00178ed:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00178f3:	29 cb                	sub    ebx,ecx
c00178f5:	89 d9                	mov    ecx,ebx
c00178f7:	5b                   	pop    ebx
c00178f8:	c1 e1 14             	shl    ecx,0x14
c00178fb:	5e                   	pop    esi
c00178fc:	09 ca                	or     edx,ecx
c00178fe:	5f                   	pop    edi
c00178ff:	c3                   	ret    

c0017900 <Vm::fpuLongToFloat(long long)>:
c0017900:	56                   	push   esi
c0017901:	31 c0                	xor    eax,eax
c0017903:	53                   	push   ebx
c0017904:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017908:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001790c:	39 c8                	cmp    eax,ecx
c001790e:	19 d8                	sbb    eax,ebx
c0017910:	7d 06                	jge    c0017918 <Vm::fpuLongToFloat(long long)+0x18>
c0017912:	31 f6                	xor    esi,esi
c0017914:	eb 0e                	jmp    c0017924 <Vm::fpuLongToFloat(long long)+0x24>
c0017916:	66 90                	xchg   ax,ax
c0017918:	f7 d9                	neg    ecx
c001791a:	be 01 00 00 00       	mov    esi,0x1
c001791f:	83 d3 00             	adc    ebx,0x0
c0017922:	f7 db                	neg    ebx
c0017924:	31 c0                	xor    eax,eax
c0017926:	66 90                	xchg   ax,ax
c0017928:	0f ba e3 14          	bt     ebx,0x14
c001792c:	72 0a                	jb     c0017938 <Vm::fpuLongToFloat(long long)+0x38>
c001792e:	01 c9                	add    ecx,ecx
c0017930:	11 db                	adc    ebx,ebx
c0017932:	40                   	inc    eax
c0017933:	eb f3                	jmp    c0017928 <Vm::fpuLongToFloat(long long)+0x28>
c0017935:	8d 76 00             	lea    esi,[esi+0x0]
c0017938:	ba 33 04 00 00       	mov    edx,0x433
c001793d:	29 c2                	sub    edx,eax
c001793f:	89 c8                	mov    eax,ecx
c0017941:	c1 e2 14             	shl    edx,0x14
c0017944:	89 d9                	mov    ecx,ebx
c0017946:	89 f3                	mov    ebx,esi
c0017948:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001794e:	09 ca                	or     edx,ecx
c0017950:	84 db                	test   bl,bl
c0017952:	74 08                	je     c001795c <Vm::fpuLongToFloat(long long)+0x5c>
c0017954:	81 ca 00 00 00 80    	or     edx,0x80000000
c001795a:	66 90                	xchg   ax,ax
c001795c:	5b                   	pop    ebx
c001795d:	5e                   	pop    esi
c001795e:	c3                   	ret    

c001795f <Vm::fpuGet0()>:
c001795f:	31 c0                	xor    eax,eax
c0017961:	31 d2                	xor    edx,edx
c0017963:	c3                   	ret    

c0017964 <Vm::fpuGet1()>:
c0017964:	b8 01 00 00 00       	mov    eax,0x1
c0017969:	31 d2                	xor    edx,edx
c001796b:	c3                   	ret    

c001796c <Vm::fpuGetPi()>:
c001796c:	b8 03 00 00 00       	mov    eax,0x3
c0017971:	31 d2                	xor    edx,edx
c0017973:	c3                   	ret    

c0017974 <Vm::fpuGetLog2E()>:
c0017974:	83 ec 18             	sub    esp,0x18
c0017977:	68 64 48 02 c0       	push   0xc0024864
c001797c:	e8 0a b1 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0017981:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017986:	31 d2                	xor    edx,edx
c0017988:	83 c4 1c             	add    esp,0x1c
c001798b:	c3                   	ret    

c001798c <Vm::fpuGetLogE2()>:
c001798c:	83 ec 18             	sub    esp,0x18
c001798f:	68 70 48 02 c0       	push   0xc0024870
c0017994:	e8 f2 b0 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0017999:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001799e:	31 d2                	xor    edx,edx
c00179a0:	83 c4 1c             	add    esp,0x1c
c00179a3:	c3                   	ret    

c00179a4 <Vm::fpuGetLog210()>:
c00179a4:	83 ec 18             	sub    esp,0x18
c00179a7:	68 7c 48 02 c0       	push   0xc002487c
c00179ac:	e8 da b0 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00179b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00179b6:	31 d2                	xor    edx,edx
c00179b8:	83 c4 1c             	add    esp,0x1c
c00179bb:	c3                   	ret    

c00179bc <Vm::fpuGetLog102()>:
c00179bc:	83 ec 18             	sub    esp,0x18
c00179bf:	68 89 48 02 c0       	push   0xc0024889
c00179c4:	e8 c2 b0 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00179c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00179ce:	31 d2                	xor    edx,edx
c00179d0:	83 c4 1c             	add    esp,0x1c
c00179d3:	c3                   	ret    

c00179d4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00179d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179d8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00179dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179e0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00179e4:	0f 92 c0             	setb   al
c00179e7:	c3                   	ret    

c00179e8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00179e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00179f4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00179f8:	09 c2                	or     edx,eax
c00179fa:	0f 94 c0             	sete   al
c00179fd:	c3                   	ret    

c00179fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00179fe:	57                   	push   edi
c00179ff:	56                   	push   esi
c0017a00:	53                   	push   ebx
c0017a01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a09:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a0d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017a11:	57                   	push   edi
c0017a12:	56                   	push   esi
c0017a13:	53                   	push   ebx
c0017a14:	51                   	push   ecx
c0017a15:	e8 ce ff ff ff       	call   c00179e8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	88 c2                	mov    dl,al
c0017a1f:	31 c0                	xor    eax,eax
c0017a21:	84 d2                	test   dl,dl
c0017a23:	75 0f                	jne    c0017a34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0017a25:	57                   	push   edi
c0017a26:	56                   	push   esi
c0017a27:	53                   	push   ebx
c0017a28:	51                   	push   ecx
c0017a29:	e8 a6 ff ff ff       	call   c00179d4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	8d 76 00             	lea    esi,[esi+0x0]
c0017a34:	83 e0 01             	and    eax,0x1
c0017a37:	5b                   	pop    ebx
c0017a38:	88 c1                	mov    cl,al
c0017a3a:	83 e2 01             	and    edx,0x1
c0017a3d:	a0 c1 99 02 c0       	mov    al,ds:0xc00299c1
c0017a42:	c1 e2 06             	shl    edx,0x6
c0017a45:	83 e0 ba             	and    eax,0xffffffba
c0017a48:	5e                   	pop    esi
c0017a49:	09 c8                	or     eax,ecx
c0017a4b:	5f                   	pop    edi
c0017a4c:	09 d0                	or     eax,edx
c0017a4e:	a2 c1 99 02 c0       	mov    ds:0xc00299c1,al
c0017a53:	c3                   	ret    

c0017a54 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0017a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a5c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017a60:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0017a64:	c3                   	ret    

c0017a65 <Vm::fpuAbs(unsigned long long)>:
c0017a65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a6d:	c3                   	ret    

c0017a6e <Vm::fpuChs(unsigned long long)>:
c0017a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a76:	f7 d8                	neg    eax
c0017a78:	83 d2 00             	adc    edx,0x0
c0017a7b:	f7 da                	neg    edx
c0017a7d:	c3                   	ret    

c0017a7e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0017a7e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0017a82:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0017a87:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0017a8b:	eb c7                	jmp    c0017a54 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0017a8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0017a8d:	53                   	push   ebx
c0017a8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017a9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a9e:	0f af ca             	imul   ecx,edx
c0017aa1:	0f af d8             	imul   ebx,eax
c0017aa4:	f7 e2                	mul    edx
c0017aa6:	01 d9                	add    ecx,ebx
c0017aa8:	5b                   	pop    ebx
c0017aa9:	01 ca                	add    edx,ecx
c0017aab:	c3                   	ret    

c0017aac <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0017aac:	83 ec 0c             	sub    esp,0xc
c0017aaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ab3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017abb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017abf:	e8 ec 9a 00 00       	call   c00215b0 <__udivdi3>
c0017ac4:	83 c4 1c             	add    esp,0x1c
c0017ac7:	c3                   	ret    

c0017ac8 <Vm::fpuSquare(unsigned long long)>:
c0017ac8:	50                   	push   eax
c0017ac9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017acd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ad1:	52                   	push   edx
c0017ad2:	50                   	push   eax
c0017ad3:	52                   	push   edx
c0017ad4:	50                   	push   eax
c0017ad5:	e8 b3 ff ff ff       	call   c0017a8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017ada:	83 c4 14             	add    esp,0x14
c0017add:	c3                   	ret    

c0017ade <Vm::fpuGetReg(int)>:
c0017ade:	83 ec 0c             	sub    esp,0xc
c0017ae1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0017ae6:	76 10                	jbe    c0017af8 <Vm::fpuGetReg(int)+0x1a>
c0017ae8:	83 ec 0c             	sub    esp,0xc
c0017aeb:	68 96 48 02 c0       	push   0xc0024896
c0017af0:	e8 96 af ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0017af5:	83 c4 10             	add    esp,0x10
c0017af8:	a0 c1 99 02 c0       	mov    al,ds:0xc00299c1
c0017afd:	b9 08 00 00 00       	mov    ecx,0x8
c0017b02:	c0 e8 03             	shr    al,0x3
c0017b05:	83 e0 07             	and    eax,0x7
c0017b08:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017b0c:	99                   	cdq    
c0017b0d:	f7 f9                	idiv   ecx
c0017b0f:	8b 04 d5 c4 99 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd663c]
c0017b16:	8b 14 d5 c8 99 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6638]
c0017b1d:	83 c4 0c             	add    esp,0xc
c0017b20:	c3                   	ret    

c0017b21 <Vm::fpuSetReg(int, unsigned long long)>:
c0017b21:	57                   	push   edi
c0017b22:	56                   	push   esi
c0017b23:	52                   	push   edx
c0017b24:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017b28:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017b2c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0017b31:	76 11                	jbe    c0017b44 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0017b33:	83 ec 0c             	sub    esp,0xc
c0017b36:	68 a9 48 02 c0       	push   0xc00248a9
c0017b3b:	e8 4b af ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	90                   	nop
c0017b44:	a0 c1 99 02 c0       	mov    al,ds:0xc00299c1
c0017b49:	b9 08 00 00 00       	mov    ecx,0x8
c0017b4e:	c0 e8 03             	shr    al,0x3
c0017b51:	83 e0 07             	and    eax,0x7
c0017b54:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017b58:	99                   	cdq    
c0017b59:	f7 f9                	idiv   ecx
c0017b5b:	89 34 d5 c4 99 02 c0 	mov    DWORD PTR [edx*8-0x3ffd663c],esi
c0017b62:	89 3c d5 c8 99 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6638],edi
c0017b69:	58                   	pop    eax
c0017b6a:	5e                   	pop    esi
c0017b6b:	5f                   	pop    edi
c0017b6c:	c3                   	ret    

c0017b6d <Vm::fpuPush(unsigned long long)>:
c0017b6d:	a0 c1 99 02 c0       	mov    al,ds:0xc00299c1
c0017b72:	c0 e8 03             	shr    al,0x3
c0017b75:	83 e0 07             	and    eax,0x7
c0017b78:	83 c0 07             	add    eax,0x7
c0017b7b:	88 c2                	mov    dl,al
c0017b7d:	83 e0 07             	and    eax,0x7
c0017b80:	83 e2 07             	and    edx,0x7
c0017b83:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0017b8a:	8a 15 c1 99 02 c0    	mov    dl,BYTE PTR ds:0xc00299c1
c0017b90:	83 e2 c7             	and    edx,0xffffffc7
c0017b93:	09 ca                	or     edx,ecx
c0017b95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017b99:	88 15 c1 99 02 c0    	mov    BYTE PTR ds:0xc00299c1,dl
c0017b9f:	89 0c c5 c8 99 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6638],ecx
c0017ba6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017baa:	89 14 c5 c4 99 02 c0 	mov    DWORD PTR [eax*8-0x3ffd663c],edx
c0017bb1:	a1 04 9a 02 c0       	mov    eax,ds:0xc0029a04
c0017bb6:	83 f8 08             	cmp    eax,0x8
c0017bb9:	75 09                	jne    c0017bc4 <Vm::fpuPush(unsigned long long)+0x57>
c0017bbb:	80 0d c0 99 02 c0 40 	or     BYTE PTR ds:0xc00299c0,0x40
c0017bc2:	c3                   	ret    
c0017bc3:	90                   	nop
c0017bc4:	40                   	inc    eax
c0017bc5:	a3 04 9a 02 c0       	mov    ds:0xc0029a04,eax
c0017bca:	c3                   	ret    

c0017bcb <Vm::fpuPop()>:
c0017bcb:	8a 0d c1 99 02 c0    	mov    cl,BYTE PTR ds:0xc00299c1
c0017bd1:	53                   	push   ebx
c0017bd2:	c0 e9 03             	shr    cl,0x3
c0017bd5:	8a 1d c1 99 02 c0    	mov    bl,BYTE PTR ds:0xc00299c1
c0017bdb:	83 e1 07             	and    ecx,0x7
c0017bde:	83 e3 c7             	and    ebx,0xffffffc7
c0017be1:	8b 04 cd c4 99 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd663c]
c0017be8:	8b 14 cd c8 99 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6638]
c0017bef:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0017bf6:	83 e1 38             	and    ecx,0x38
c0017bf9:	09 d9                	or     ecx,ebx
c0017bfb:	88 0d c1 99 02 c0    	mov    BYTE PTR ds:0xc00299c1,cl
c0017c01:	8b 0d 04 9a 02 c0    	mov    ecx,DWORD PTR ds:0xc0029a04
c0017c07:	85 c9                	test   ecx,ecx
c0017c09:	74 09                	je     c0017c14 <Vm::fpuPop()+0x49>
c0017c0b:	49                   	dec    ecx
c0017c0c:	89 0d 04 9a 02 c0    	mov    DWORD PTR ds:0xc0029a04,ecx
c0017c12:	eb 08                	jmp    c0017c1c <Vm::fpuPop()+0x51>
c0017c14:	80 0d c0 99 02 c0 40 	or     BYTE PTR ds:0xc00299c0,0x40
c0017c1b:	90                   	nop
c0017c1c:	5b                   	pop    ebx
c0017c1d:	c3                   	ret    

c0017c1e <Vm::x87Handler(regs*)>:
c0017c1e:	55                   	push   ebp
c0017c1f:	57                   	push   edi
c0017c20:	56                   	push   esi
c0017c21:	53                   	push   ebx
c0017c22:	83 ec 1c             	sub    esp,0x1c
c0017c25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017c29:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0017c2e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017c31:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0017c39:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0017c3d:	50                   	push   eax
c0017c3e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0017c42:	50                   	push   eax
c0017c43:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017c47:	50                   	push   eax
c0017c48:	53                   	push   ebx
c0017c49:	e8 56 a5 ff ff       	call   c00121a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0017c4e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0017c51:	83 c4 10             	add    esp,0x10
c0017c54:	89 c6                	mov    esi,eax
c0017c56:	80 fa d9             	cmp    dl,0xd9
c0017c59:	0f 85 79 01 00 00    	jne    c0017dd8 <Vm::x87Handler(regs*)+0x1ba>
c0017c5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017c63:	8d 50 20             	lea    edx,[eax+0x20]
c0017c66:	80 fa 0e             	cmp    dl,0xe
c0017c69:	0f 87 a5 00 00 00    	ja     c0017d14 <Vm::x87Handler(regs*)+0xf6>
c0017c6f:	0f b6 d2             	movzx  edx,dl
c0017c72:	ff 24 95 bc 48 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb744]
c0017c79:	8d 76 00             	lea    esi,[esi+0x0]
c0017c7c:	e8 de fc ff ff       	call   c001795f <Vm::fpuGet0()>
c0017c81:	eb 09                	jmp    c0017c8c <Vm::x87Handler(regs*)+0x6e>
c0017c83:	90                   	nop
c0017c84:	e8 db fc ff ff       	call   c0017964 <Vm::fpuGet1()>
c0017c89:	8d 76 00             	lea    esi,[esi+0x0]
c0017c8c:	57                   	push   edi
c0017c8d:	57                   	push   edi
c0017c8e:	66 90                	xchg   ax,ax
c0017c90:	52                   	push   edx
c0017c91:	50                   	push   eax
c0017c92:	e8 d6 fe ff ff       	call   c0017b6d <Vm::fpuPush(unsigned long long)>
c0017c97:	90                   	nop
c0017c98:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017c9c:	83 c4 10             	add    esp,0x10
c0017c9f:	90                   	nop
c0017ca0:	b0 01                	mov    al,0x1
c0017ca2:	e9 89 0a 00 00       	jmp    c0018730 <Vm::x87Handler(regs*)+0xb12>
c0017ca7:	90                   	nop
c0017ca8:	83 ec 0c             	sub    esp,0xc
c0017cab:	6a 00                	push   0x0
c0017cad:	e8 2c fe ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017cb2:	59                   	pop    ecx
c0017cb3:	5e                   	pop    esi
c0017cb4:	52                   	push   edx
c0017cb5:	50                   	push   eax
c0017cb6:	e8 b3 fd ff ff       	call   c0017a6e <Vm::fpuChs(unsigned long long)>
c0017cbb:	eb 17                	jmp    c0017cd4 <Vm::x87Handler(regs*)+0xb6>
c0017cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc0:	83 ec 0c             	sub    esp,0xc
c0017cc3:	6a 00                	push   0x0
c0017cc5:	e8 14 fe ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017cca:	5f                   	pop    edi
c0017ccb:	5d                   	pop    ebp
c0017ccc:	52                   	push   edx
c0017ccd:	50                   	push   eax
c0017cce:	e8 92 fd ff ff       	call   c0017a65 <Vm::fpuAbs(unsigned long long)>
c0017cd3:	90                   	nop
c0017cd4:	83 c4 0c             	add    esp,0xc
c0017cd7:	90                   	nop
c0017cd8:	52                   	push   edx
c0017cd9:	50                   	push   eax
c0017cda:	66 90                	xchg   ax,ax
c0017cdc:	6a 00                	push   0x0
c0017cde:	66 90                	xchg   ax,ax
c0017ce0:	e8 3c fe ff ff       	call   c0017b21 <Vm::fpuSetReg(int, unsigned long long)>
c0017ce5:	eb b1                	jmp    c0017c98 <Vm::x87Handler(regs*)+0x7a>
c0017ce7:	90                   	nop
c0017ce8:	e8 b7 fc ff ff       	call   c00179a4 <Vm::fpuGetLog210()>
c0017ced:	eb 9d                	jmp    c0017c8c <Vm::x87Handler(regs*)+0x6e>
c0017cef:	90                   	nop
c0017cf0:	e8 7f fc ff ff       	call   c0017974 <Vm::fpuGetLog2E()>
c0017cf5:	eb 95                	jmp    c0017c8c <Vm::x87Handler(regs*)+0x6e>
c0017cf7:	90                   	nop
c0017cf8:	e8 6f fc ff ff       	call   c001796c <Vm::fpuGetPi()>
c0017cfd:	eb 8d                	jmp    c0017c8c <Vm::x87Handler(regs*)+0x6e>
c0017cff:	90                   	nop
c0017d00:	e8 b7 fc ff ff       	call   c00179bc <Vm::fpuGetLog102()>
c0017d05:	eb 85                	jmp    c0017c8c <Vm::x87Handler(regs*)+0x6e>
c0017d07:	90                   	nop
c0017d08:	e8 7f fc ff ff       	call   c001798c <Vm::fpuGetLogE2()>
c0017d0d:	e9 7a ff ff ff       	jmp    c0017c8c <Vm::x87Handler(regs*)+0x6e>
c0017d12:	66 90                	xchg   ax,ax
c0017d14:	8d 50 40             	lea    edx,[eax+0x40]
c0017d17:	80 fa 07             	cmp    dl,0x7
c0017d1a:	77 18                	ja     c0017d34 <Vm::x87Handler(regs*)+0x116>
c0017d1c:	83 ec 0c             	sub    esp,0xc
c0017d1f:	2d c0 00 00 00       	sub    eax,0xc0
c0017d24:	50                   	push   eax
c0017d25:	e8 b4 fd ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017d2a:	59                   	pop    ecx
c0017d2b:	5e                   	pop    esi
c0017d2c:	e9 5f ff ff ff       	jmp    c0017c90 <Vm::x87Handler(regs*)+0x72>
c0017d31:	8d 76 00             	lea    esi,[esi+0x0]
c0017d34:	8d 50 38             	lea    edx,[eax+0x38]
c0017d37:	80 fa 07             	cmp    dl,0x7
c0017d3a:	77 3c                	ja     c0017d78 <Vm::x87Handler(regs*)+0x15a>
c0017d3c:	83 ec 0c             	sub    esp,0xc
c0017d3f:	2d c8 00 00 00       	sub    eax,0xc8
c0017d44:	50                   	push   eax
c0017d45:	e8 94 fd ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017d4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017d51:	89 c6                	mov    esi,eax
c0017d53:	89 d7                	mov    edi,edx
c0017d55:	e8 84 fd ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017d5a:	83 c4 0c             	add    esp,0xc
c0017d5d:	52                   	push   edx
c0017d5e:	50                   	push   eax
c0017d5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017d63:	2d c8 00 00 00       	sub    eax,0xc8
c0017d68:	50                   	push   eax
c0017d69:	e8 b3 fd ff ff       	call   c0017b21 <Vm::fpuSetReg(int, unsigned long long)>
c0017d6e:	83 c4 0c             	add    esp,0xc
c0017d71:	57                   	push   edi
c0017d72:	56                   	push   esi
c0017d73:	e9 64 ff ff ff       	jmp    c0017cdc <Vm::x87Handler(regs*)+0xbe>
c0017d78:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017d7c:	84 d2                	test   dl,dl
c0017d7e:	75 10                	jne    c0017d90 <Vm::x87Handler(regs*)+0x172>
c0017d80:	83 ec 0c             	sub    esp,0xc
c0017d83:	ff 36                	push   DWORD PTR [esi]
c0017d85:	e8 8d fa ff ff       	call   c0017817 <Vm::fpu32ToInternal(unsigned int)>
c0017d8a:	e9 c9 00 00 00       	jmp    c0017e58 <Vm::x87Handler(regs*)+0x23a>
c0017d8f:	90                   	nop
c0017d90:	80 fa 03             	cmp    dl,0x3
c0017d93:	75 13                	jne    c0017da8 <Vm::x87Handler(regs*)+0x18a>
c0017d95:	e8 31 fe ff ff       	call   c0017bcb <Vm::fpuPop()>
c0017d9a:	55                   	push   ebp
c0017d9b:	55                   	push   ebp
c0017d9c:	52                   	push   edx
c0017d9d:	50                   	push   eax
c0017d9e:	e8 0d fa ff ff       	call   c00177b0 <Vm::fpuInternalTo32(unsigned long long)>
c0017da3:	e9 90 00 00 00       	jmp    c0017e38 <Vm::x87Handler(regs*)+0x21a>
c0017da8:	80 fa 05             	cmp    dl,0x5
c0017dab:	75 0f                	jne    c0017dbc <Vm::x87Handler(regs*)+0x19e>
c0017dad:	66 8b 06             	mov    ax,WORD PTR [esi]
c0017db0:	66 a3 c2 99 02 c0    	mov    ds:0xc00299c2,ax
c0017db6:	e9 ed 00 00 00       	jmp    c0017ea8 <Vm::x87Handler(regs*)+0x28a>
c0017dbb:	90                   	nop
c0017dbc:	31 c0                	xor    eax,eax
c0017dbe:	80 fa 07             	cmp    dl,0x7
c0017dc1:	0f 85 69 09 00 00    	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c0017dc7:	66 a1 c2 99 02 c0    	mov    ax,ds:0xc00299c2
c0017dcd:	66 89 06             	mov    WORD PTR [esi],ax
c0017dd0:	e9 d3 00 00 00       	jmp    c0017ea8 <Vm::x87Handler(regs*)+0x28a>
c0017dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd8:	80 fa d8             	cmp    dl,0xd8
c0017ddb:	0f 84 d3 00 00 00    	je     c0017eb4 <Vm::x87Handler(regs*)+0x296>
c0017de1:	80 fa dc             	cmp    dl,0xdc
c0017de4:	0f 84 2a 02 00 00    	je     c0018014 <Vm::x87Handler(regs*)+0x3f6>
c0017dea:	80 fa de             	cmp    dl,0xde
c0017ded:	0f 84 f1 02 00 00    	je     c00180e4 <Vm::x87Handler(regs*)+0x4c6>
c0017df3:	80 fa dd             	cmp    dl,0xdd
c0017df6:	0f 84 94 04 00 00    	je     c0018290 <Vm::x87Handler(regs*)+0x672>
c0017dfc:	80 fa da             	cmp    dl,0xda
c0017dff:	0f 84 5f 05 00 00    	je     c0018364 <Vm::x87Handler(regs*)+0x746>
c0017e05:	80 fa df             	cmp    dl,0xdf
c0017e08:	0f 84 aa 05 00 00    	je     c00183b8 <Vm::x87Handler(regs*)+0x79a>
c0017e0e:	31 c0                	xor    eax,eax
c0017e10:	80 fa db             	cmp    dl,0xdb
c0017e13:	0f 85 17 09 00 00    	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c0017e19:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017e1d:	80 fa 03             	cmp    dl,0x3
c0017e20:	0f 85 c2 06 00 00    	jne    c00184e8 <Vm::x87Handler(regs*)+0x8ca>
c0017e26:	e8 a0 fd ff ff       	call   c0017bcb <Vm::fpuPop()>
c0017e2b:	55                   	push   ebp
c0017e2c:	55                   	push   ebp
c0017e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e30:	52                   	push   edx
c0017e31:	50                   	push   eax
c0017e32:	e8 2e fa ff ff       	call   c0017865 <Vm::fpuFloatToLong(unsigned long long)>
c0017e37:	90                   	nop
c0017e38:	83 c4 10             	add    esp,0x10
c0017e3b:	89 06                	mov    DWORD PTR [esi],eax
c0017e3d:	eb 69                	jmp    c0017ea8 <Vm::x87Handler(regs*)+0x28a>
c0017e3f:	90                   	nop
c0017e40:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017e44:	84 d2                	test   dl,dl
c0017e46:	0f 85 2c 06 00 00    	jne    c0018478 <Vm::x87Handler(regs*)+0x85a>
c0017e4c:	57                   	push   edi
c0017e4d:	57                   	push   edi
c0017e4e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017e51:	ff 36                	push   DWORD PTR [esi]
c0017e53:	e8 04 fa ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c0017e58:	5e                   	pop    esi
c0017e59:	5f                   	pop    edi
c0017e5a:	52                   	push   edx
c0017e5b:	50                   	push   eax
c0017e5c:	e8 0c fd ff ff       	call   c0017b6d <Vm::fpuPush(unsigned long long)>
c0017e61:	8d 76 00             	lea    esi,[esi+0x0]
c0017e64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e68:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017e6b:	e9 2c fe ff ff       	jmp    c0017c9c <Vm::x87Handler(regs*)+0x7e>
c0017e70:	80 fa 03             	cmp    dl,0x3
c0017e73:	0f 85 2b 07 00 00    	jne    c00185a4 <Vm::x87Handler(regs*)+0x986>
c0017e79:	57                   	push   edi
c0017e7a:	57                   	push   edi
c0017e7b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017e7e:	ff 36                	push   DWORD PTR [esi]
c0017e80:	e8 d7 f9 ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c0017e85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e8c:	89 c6                	mov    esi,eax
c0017e8e:	89 d7                	mov    edi,edx
c0017e90:	e8 49 fc ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017e95:	57                   	push   edi
c0017e96:	56                   	push   esi
c0017e97:	52                   	push   edx
c0017e98:	50                   	push   eax
c0017e99:	e8 60 fb ff ff       	call   c00179fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017e9e:	83 c4 20             	add    esp,0x20
c0017ea1:	e8 25 fd ff ff       	call   c0017bcb <Vm::fpuPop()>
c0017ea6:	66 90                	xchg   ax,ax
c0017ea8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eac:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017eaf:	e9 ec fd ff ff       	jmp    c0017ca0 <Vm::x87Handler(regs*)+0x82>
c0017eb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017eb8:	8d 50 40             	lea    edx,[eax+0x40]
c0017ebb:	80 fa 07             	cmp    dl,0x7
c0017ebe:	77 2c                	ja     c0017eec <Vm::x87Handler(regs*)+0x2ce>
c0017ec0:	83 ec 0c             	sub    esp,0xc
c0017ec3:	2d c0 00 00 00       	sub    eax,0xc0
c0017ec8:	50                   	push   eax
c0017ec9:	e8 10 fc ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017ece:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017ed5:	89 c6                	mov    esi,eax
c0017ed7:	89 d7                	mov    edi,edx
c0017ed9:	e8 00 fc ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017ede:	57                   	push   edi
c0017edf:	56                   	push   esi
c0017ee0:	52                   	push   edx
c0017ee1:	50                   	push   eax
c0017ee2:	e8 6d fb ff ff       	call   c0017a54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017ee7:	eb 33                	jmp    c0017f1c <Vm::x87Handler(regs*)+0x2fe>
c0017ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0017eec:	8d 50 38             	lea    edx,[eax+0x38]
c0017eef:	80 fa 07             	cmp    dl,0x7
c0017ef2:	77 30                	ja     c0017f24 <Vm::x87Handler(regs*)+0x306>
c0017ef4:	83 ec 0c             	sub    esp,0xc
c0017ef7:	2d c8 00 00 00       	sub    eax,0xc8
c0017efc:	50                   	push   eax
c0017efd:	e8 dc fb ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017f02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f09:	89 c6                	mov    esi,eax
c0017f0b:	89 d7                	mov    edi,edx
c0017f0d:	e8 cc fb ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017f12:	57                   	push   edi
c0017f13:	56                   	push   esi
c0017f14:	52                   	push   edx
c0017f15:	50                   	push   eax
c0017f16:	e8 72 fb ff ff       	call   c0017a8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017f1b:	90                   	nop
c0017f1c:	83 c4 1c             	add    esp,0x1c
c0017f1f:	e9 b4 fd ff ff       	jmp    c0017cd8 <Vm::x87Handler(regs*)+0xba>
c0017f24:	8d 50 30             	lea    edx,[eax+0x30]
c0017f27:	80 fa 07             	cmp    dl,0x7
c0017f2a:	77 10                	ja     c0017f3c <Vm::x87Handler(regs*)+0x31e>
c0017f2c:	83 ec 0c             	sub    esp,0xc
c0017f2f:	2d d0 00 00 00       	sub    eax,0xd0
c0017f34:	e9 c3 03 00 00       	jmp    c00182fc <Vm::x87Handler(regs*)+0x6de>
c0017f39:	8d 76 00             	lea    esi,[esi+0x0]
c0017f3c:	8d 50 28             	lea    edx,[eax+0x28]
c0017f3f:	80 fa 07             	cmp    dl,0x7
c0017f42:	77 10                	ja     c0017f54 <Vm::x87Handler(regs*)+0x336>
c0017f44:	83 ec 0c             	sub    esp,0xc
c0017f47:	2d d8 00 00 00       	sub    eax,0xd8
c0017f4c:	e9 e7 03 00 00       	jmp    c0018338 <Vm::x87Handler(regs*)+0x71a>
c0017f51:	8d 76 00             	lea    esi,[esi+0x0]
c0017f54:	8d 50 20             	lea    edx,[eax+0x20]
c0017f57:	80 fa 07             	cmp    dl,0x7
c0017f5a:	77 1c                	ja     c0017f78 <Vm::x87Handler(regs*)+0x35a>
c0017f5c:	83 ec 0c             	sub    esp,0xc
c0017f5f:	2d e0 00 00 00       	sub    eax,0xe0
c0017f64:	50                   	push   eax
c0017f65:	e8 74 fb ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017f6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f71:	89 c6                	mov    esi,eax
c0017f73:	89 d7                	mov    edi,edx
c0017f75:	eb 25                	jmp    c0017f9c <Vm::x87Handler(regs*)+0x37e>
c0017f77:	90                   	nop
c0017f78:	8d 50 18             	lea    edx,[eax+0x18]
c0017f7b:	80 fa 07             	cmp    dl,0x7
c0017f7e:	77 30                	ja     c0017fb0 <Vm::x87Handler(regs*)+0x392>
c0017f80:	83 ec 0c             	sub    esp,0xc
c0017f83:	6a 00                	push   0x0
c0017f85:	e8 54 fb ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017f8a:	89 c6                	mov    esi,eax
c0017f8c:	89 d7                	mov    edi,edx
c0017f8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017f92:	2d e8 00 00 00       	sub    eax,0xe8
c0017f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f9a:	66 90                	xchg   ax,ax
c0017f9c:	e8 3d fb ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017fa1:	57                   	push   edi
c0017fa2:	56                   	push   esi
c0017fa3:	52                   	push   edx
c0017fa4:	50                   	push   eax
c0017fa5:	e8 d4 fa ff ff       	call   c0017a7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017faa:	e9 6d ff ff ff       	jmp    c0017f1c <Vm::x87Handler(regs*)+0x2fe>
c0017faf:	90                   	nop
c0017fb0:	8d 50 10             	lea    edx,[eax+0x10]
c0017fb3:	80 fa 07             	cmp    dl,0x7
c0017fb6:	77 1c                	ja     c0017fd4 <Vm::x87Handler(regs*)+0x3b6>
c0017fb8:	83 ec 0c             	sub    esp,0xc
c0017fbb:	2d f0 00 00 00       	sub    eax,0xf0
c0017fc0:	50                   	push   eax
c0017fc1:	e8 18 fb ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017fc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017fcd:	89 c6                	mov    esi,eax
c0017fcf:	89 d7                	mov    edi,edx
c0017fd1:	eb 25                	jmp    c0017ff8 <Vm::x87Handler(regs*)+0x3da>
c0017fd3:	90                   	nop
c0017fd4:	3c f7                	cmp    al,0xf7
c0017fd6:	0f 86 00 04 00 00    	jbe    c00183dc <Vm::x87Handler(regs*)+0x7be>
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	6a 00                	push   0x0
c0017fe1:	e8 f8 fa ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017fe6:	89 c6                	mov    esi,eax
c0017fe8:	89 d7                	mov    edi,edx
c0017fea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017fee:	2d f8 00 00 00       	sub    eax,0xf8
c0017ff3:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ff6:	66 90                	xchg   ax,ax
c0017ff8:	e8 e1 fa ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0017ffd:	57                   	push   edi
c0017ffe:	56                   	push   esi
c0017fff:	52                   	push   edx
c0018000:	50                   	push   eax
c0018001:	e8 a6 fa ff ff       	call   c0017aac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018006:	83 c4 1c             	add    esp,0x1c
c0018009:	52                   	push   edx
c001800a:	50                   	push   eax
c001800b:	6a 00                	push   0x0
c001800d:	e9 6a 02 00 00       	jmp    c001827c <Vm::x87Handler(regs*)+0x65e>
c0018012:	66 90                	xchg   ax,ax
c0018014:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018018:	8d 50 40             	lea    edx,[eax+0x40]
c001801b:	80 fa 07             	cmp    dl,0x7
c001801e:	77 38                	ja     c0018058 <Vm::x87Handler(regs*)+0x43a>
c0018020:	83 ec 0c             	sub    esp,0xc
c0018023:	2d c0 00 00 00       	sub    eax,0xc0
c0018028:	50                   	push   eax
c0018029:	e8 b0 fa ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001802e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018035:	89 c6                	mov    esi,eax
c0018037:	89 d7                	mov    edi,edx
c0018039:	e8 a0 fa ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001803e:	57                   	push   edi
c001803f:	56                   	push   esi
c0018040:	52                   	push   edx
c0018041:	50                   	push   eax
c0018042:	e8 0d fa ff ff       	call   c0017a54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018047:	83 c4 1c             	add    esp,0x1c
c001804a:	52                   	push   edx
c001804b:	50                   	push   eax
c001804c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018050:	2d c0 00 00 00       	sub    eax,0xc0
c0018055:	eb 41                	jmp    c0018098 <Vm::x87Handler(regs*)+0x47a>
c0018057:	90                   	nop
c0018058:	8d 50 38             	lea    edx,[eax+0x38]
c001805b:	80 fa 07             	cmp    dl,0x7
c001805e:	77 40                	ja     c00180a0 <Vm::x87Handler(regs*)+0x482>
c0018060:	83 ec 0c             	sub    esp,0xc
c0018063:	2d c8 00 00 00       	sub    eax,0xc8
c0018068:	50                   	push   eax
c0018069:	e8 70 fa ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001806e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018075:	89 c6                	mov    esi,eax
c0018077:	89 d7                	mov    edi,edx
c0018079:	e8 60 fa ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001807e:	57                   	push   edi
c001807f:	56                   	push   esi
c0018080:	52                   	push   edx
c0018081:	50                   	push   eax
c0018082:	e8 06 fa ff ff       	call   c0017a8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018087:	83 c4 1c             	add    esp,0x1c
c001808a:	52                   	push   edx
c001808b:	50                   	push   eax
c001808c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018090:	2d c8 00 00 00       	sub    eax,0xc8
c0018095:	8d 76 00             	lea    esi,[esi+0x0]
c0018098:	50                   	push   eax
c0018099:	e9 42 fc ff ff       	jmp    c0017ce0 <Vm::x87Handler(regs*)+0xc2>
c001809e:	66 90                	xchg   ax,ax
c00180a0:	83 c0 18             	add    eax,0x18
c00180a3:	3c 07                	cmp    al,0x7
c00180a5:	0f 87 6d 04 00 00    	ja     c0018518 <Vm::x87Handler(regs*)+0x8fa>
c00180ab:	83 ec 0c             	sub    esp,0xc
c00180ae:	6a 00                	push   0x0
c00180b0:	e8 29 fa ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00180b5:	89 c6                	mov    esi,eax
c00180b7:	89 d7                	mov    edi,edx
c00180b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00180bd:	2d e8 00 00 00       	sub    eax,0xe8
c00180c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00180c5:	e8 14 fa ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00180ca:	57                   	push   edi
c00180cb:	56                   	push   esi
c00180cc:	52                   	push   edx
c00180cd:	50                   	push   eax
c00180ce:	e8 ab f9 ff ff       	call   c0017a7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c00180d3:	83 c4 1c             	add    esp,0x1c
c00180d6:	52                   	push   edx
c00180d7:	50                   	push   eax
c00180d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00180dc:	2d e8 00 00 00       	sub    eax,0xe8
c00180e1:	eb b5                	jmp    c0018098 <Vm::x87Handler(regs*)+0x47a>
c00180e3:	90                   	nop
c00180e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00180e8:	8d 50 40             	lea    edx,[eax+0x40]
c00180eb:	80 fa 07             	cmp    dl,0x7
c00180ee:	77 3c                	ja     c001812c <Vm::x87Handler(regs*)+0x50e>
c00180f0:	83 ec 0c             	sub    esp,0xc
c00180f3:	2d c0 00 00 00       	sub    eax,0xc0
c00180f8:	50                   	push   eax
c00180f9:	e8 e0 f9 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00180fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018105:	89 c6                	mov    esi,eax
c0018107:	89 d7                	mov    edi,edx
c0018109:	e8 d0 f9 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001810e:	57                   	push   edi
c001810f:	56                   	push   esi
c0018110:	52                   	push   edx
c0018111:	50                   	push   eax
c0018112:	e8 3d f9 ff ff       	call   c0017a54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018117:	83 c4 1c             	add    esp,0x1c
c001811a:	52                   	push   edx
c001811b:	50                   	push   eax
c001811c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018120:	2d c0 00 00 00       	sub    eax,0xc0
c0018125:	e9 b2 01 00 00       	jmp    c00182dc <Vm::x87Handler(regs*)+0x6be>
c001812a:	66 90                	xchg   ax,ax
c001812c:	8d 50 20             	lea    edx,[eax+0x20]
c001812f:	80 fa 07             	cmp    dl,0x7
c0018132:	77 3c                	ja     c0018170 <Vm::x87Handler(regs*)+0x552>
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	2d e0 00 00 00       	sub    eax,0xe0
c001813c:	50                   	push   eax
c001813d:	e8 9c f9 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018142:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018149:	89 c6                	mov    esi,eax
c001814b:	89 d7                	mov    edi,edx
c001814d:	e8 8c f9 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018152:	57                   	push   edi
c0018153:	56                   	push   esi
c0018154:	52                   	push   edx
c0018155:	50                   	push   eax
c0018156:	e8 23 f9 ff ff       	call   c0017a7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001815b:	83 c4 1c             	add    esp,0x1c
c001815e:	52                   	push   edx
c001815f:	50                   	push   eax
c0018160:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018164:	2d e0 00 00 00       	sub    eax,0xe0
c0018169:	e9 6e 01 00 00       	jmp    c00182dc <Vm::x87Handler(regs*)+0x6be>
c001816e:	66 90                	xchg   ax,ax
c0018170:	8d 50 18             	lea    edx,[eax+0x18]
c0018173:	80 fa 07             	cmp    dl,0x7
c0018176:	77 3c                	ja     c00181b4 <Vm::x87Handler(regs*)+0x596>
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	6a 00                	push   0x0
c001817d:	e8 5c f9 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018182:	89 c6                	mov    esi,eax
c0018184:	89 d7                	mov    edi,edx
c0018186:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001818a:	2d e8 00 00 00       	sub    eax,0xe8
c001818f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018192:	e8 47 f9 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018197:	57                   	push   edi
c0018198:	56                   	push   esi
c0018199:	52                   	push   edx
c001819a:	50                   	push   eax
c001819b:	e8 de f8 ff ff       	call   c0017a7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c00181a0:	83 c4 1c             	add    esp,0x1c
c00181a3:	52                   	push   edx
c00181a4:	50                   	push   eax
c00181a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00181a9:	2d e8 00 00 00       	sub    eax,0xe8
c00181ae:	e9 29 01 00 00       	jmp    c00182dc <Vm::x87Handler(regs*)+0x6be>
c00181b3:	90                   	nop
c00181b4:	8d 50 38             	lea    edx,[eax+0x38]
c00181b7:	80 fa 07             	cmp    dl,0x7
c00181ba:	77 3c                	ja     c00181f8 <Vm::x87Handler(regs*)+0x5da>
c00181bc:	83 ec 0c             	sub    esp,0xc
c00181bf:	2d c8 00 00 00       	sub    eax,0xc8
c00181c4:	50                   	push   eax
c00181c5:	e8 14 f9 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00181ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00181d1:	89 c6                	mov    esi,eax
c00181d3:	89 d7                	mov    edi,edx
c00181d5:	e8 04 f9 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00181da:	57                   	push   edi
c00181db:	56                   	push   esi
c00181dc:	52                   	push   edx
c00181dd:	50                   	push   eax
c00181de:	e8 aa f8 ff ff       	call   c0017a8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00181e3:	83 c4 1c             	add    esp,0x1c
c00181e6:	52                   	push   edx
c00181e7:	50                   	push   eax
c00181e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00181ec:	2d c8 00 00 00       	sub    eax,0xc8
c00181f1:	e9 82 00 00 00       	jmp    c0018278 <Vm::x87Handler(regs*)+0x65a>
c00181f6:	66 90                	xchg   ax,ax
c00181f8:	3c f7                	cmp    al,0xf7
c00181fa:	76 38                	jbe    c0018234 <Vm::x87Handler(regs*)+0x616>
c00181fc:	83 ec 0c             	sub    esp,0xc
c00181ff:	6a 00                	push   0x0
c0018201:	e8 d8 f8 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018206:	89 c6                	mov    esi,eax
c0018208:	89 d7                	mov    edi,edx
c001820a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001820e:	2d f8 00 00 00       	sub    eax,0xf8
c0018213:	89 04 24             	mov    DWORD PTR [esp],eax
c0018216:	e8 c3 f8 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001821b:	57                   	push   edi
c001821c:	56                   	push   esi
c001821d:	52                   	push   edx
c001821e:	50                   	push   eax
c001821f:	e8 88 f8 ff ff       	call   c0017aac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018224:	83 c4 1c             	add    esp,0x1c
c0018227:	52                   	push   edx
c0018228:	50                   	push   eax
c0018229:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001822d:	2d f8 00 00 00       	sub    eax,0xf8
c0018232:	eb 44                	jmp    c0018278 <Vm::x87Handler(regs*)+0x65a>
c0018234:	8d 50 10             	lea    edx,[eax+0x10]
c0018237:	80 fa 07             	cmp    dl,0x7
c001823a:	0f 87 6c 01 00 00    	ja     c00183ac <Vm::x87Handler(regs*)+0x78e>
c0018240:	83 ec 0c             	sub    esp,0xc
c0018243:	2d f0 00 00 00       	sub    eax,0xf0
c0018248:	50                   	push   eax
c0018249:	e8 90 f8 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001824e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018255:	89 c6                	mov    esi,eax
c0018257:	89 d7                	mov    edi,edx
c0018259:	e8 80 f8 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001825e:	57                   	push   edi
c001825f:	56                   	push   esi
c0018260:	52                   	push   edx
c0018261:	50                   	push   eax
c0018262:	e8 45 f8 ff ff       	call   c0017aac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018267:	83 c4 1c             	add    esp,0x1c
c001826a:	52                   	push   edx
c001826b:	50                   	push   eax
c001826c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018270:	2d f0 00 00 00       	sub    eax,0xf0
c0018275:	8d 76 00             	lea    esi,[esi+0x0]
c0018278:	50                   	push   eax
c0018279:	8d 76 00             	lea    esi,[esi+0x0]
c001827c:	e8 a0 f8 ff ff       	call   c0017b21 <Vm::fpuSetReg(int, unsigned long long)>
c0018281:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018285:	e8 41 f9 ff ff       	call   c0017bcb <Vm::fpuPop()>
c001828a:	e9 0d fa ff ff       	jmp    c0017c9c <Vm::x87Handler(regs*)+0x7e>
c001828f:	90                   	nop
c0018290:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018294:	8d 50 30             	lea    edx,[eax+0x30]
c0018297:	80 fa 07             	cmp    dl,0x7
c001829a:	77 20                	ja     c00182bc <Vm::x87Handler(regs*)+0x69e>
c001829c:	83 ec 0c             	sub    esp,0xc
c001829f:	6a 00                	push   0x0
c00182a1:	e8 38 f8 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00182a6:	83 c4 0c             	add    esp,0xc
c00182a9:	52                   	push   edx
c00182aa:	50                   	push   eax
c00182ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00182af:	2d d0 00 00 00       	sub    eax,0xd0
c00182b4:	e9 df fd ff ff       	jmp    c0018098 <Vm::x87Handler(regs*)+0x47a>
c00182b9:	8d 76 00             	lea    esi,[esi+0x0]
c00182bc:	8d 50 28             	lea    edx,[eax+0x28]
c00182bf:	80 fa 07             	cmp    dl,0x7
c00182c2:	77 28                	ja     c00182ec <Vm::x87Handler(regs*)+0x6ce>
c00182c4:	83 ec 0c             	sub    esp,0xc
c00182c7:	6a 00                	push   0x0
c00182c9:	e8 10 f8 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00182ce:	83 c4 0c             	add    esp,0xc
c00182d1:	52                   	push   edx
c00182d2:	50                   	push   eax
c00182d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00182d7:	2d d8 00 00 00       	sub    eax,0xd8
c00182dc:	50                   	push   eax
c00182dd:	e8 3f f8 ff ff       	call   c0017b21 <Vm::fpuSetReg(int, unsigned long long)>
c00182e2:	e8 e4 f8 ff ff       	call   c0017bcb <Vm::fpuPop()>
c00182e7:	e9 ac f9 ff ff       	jmp    c0017c98 <Vm::x87Handler(regs*)+0x7a>
c00182ec:	8d 50 20             	lea    edx,[eax+0x20]
c00182ef:	80 fa 07             	cmp    dl,0x7
c00182f2:	77 30                	ja     c0018324 <Vm::x87Handler(regs*)+0x706>
c00182f4:	83 ec 0c             	sub    esp,0xc
c00182f7:	2d e0 00 00 00       	sub    eax,0xe0
c00182fc:	50                   	push   eax
c00182fd:	e8 dc f7 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018302:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018309:	89 c6                	mov    esi,eax
c001830b:	89 d7                	mov    edi,edx
c001830d:	e8 cc f7 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018312:	57                   	push   edi
c0018313:	56                   	push   esi
c0018314:	52                   	push   edx
c0018315:	50                   	push   eax
c0018316:	e8 e3 f6 ff ff       	call   c00179fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001831b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001831f:	e9 78 02 00 00       	jmp    c001859c <Vm::x87Handler(regs*)+0x97e>
c0018324:	8d 50 18             	lea    edx,[eax+0x18]
c0018327:	80 fa 07             	cmp    dl,0x7
c001832a:	0f 87 10 fb ff ff    	ja     c0017e40 <Vm::x87Handler(regs*)+0x222>
c0018330:	83 ec 0c             	sub    esp,0xc
c0018333:	2d e8 00 00 00       	sub    eax,0xe8
c0018338:	50                   	push   eax
c0018339:	e8 a0 f7 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001833e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018345:	89 c6                	mov    esi,eax
c0018347:	89 d7                	mov    edi,edx
c0018349:	e8 90 f7 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001834e:	57                   	push   edi
c001834f:	56                   	push   esi
c0018350:	52                   	push   edx
c0018351:	50                   	push   eax
c0018352:	e8 a7 f6 ff ff       	call   c00179fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018357:	83 c4 20             	add    esp,0x20
c001835a:	e8 6c f8 ff ff       	call   c0017bcb <Vm::fpuPop()>
c001835f:	eb 6f                	jmp    c00183d0 <Vm::x87Handler(regs*)+0x7b2>
c0018361:	8d 76 00             	lea    esi,[esi+0x0]
c0018364:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0018368:	0f 85 22 01 00 00    	jne    c0018490 <Vm::x87Handler(regs*)+0x872>
c001836e:	66 90                	xchg   ax,ax
c0018370:	83 ec 0c             	sub    esp,0xc
c0018373:	6a 01                	push   0x1
c0018375:	e8 64 f7 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001837a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018381:	89 c6                	mov    esi,eax
c0018383:	89 d7                	mov    edi,edx
c0018385:	e8 54 f7 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001838a:	57                   	push   edi
c001838b:	56                   	push   esi
c001838c:	52                   	push   edx
c001838d:	50                   	push   eax
c001838e:	e8 6b f6 ff ff       	call   c00179fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018393:	83 c4 20             	add    esp,0x20
c0018396:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001839a:	e8 2c f8 ff ff       	call   c0017bcb <Vm::fpuPop()>
c001839f:	e8 27 f8 ff ff       	call   c0017bcb <Vm::fpuPop()>
c00183a4:	e9 f7 f8 ff ff       	jmp    c0017ca0 <Vm::x87Handler(regs*)+0x82>
c00183a9:	8d 76 00             	lea    esi,[esi+0x0]
c00183ac:	3c d9                	cmp    al,0xd9
c00183ae:	0f 85 e8 02 00 00    	jne    c001869c <Vm::x87Handler(regs*)+0xa7e>
c00183b4:	eb ba                	jmp    c0018370 <Vm::x87Handler(regs*)+0x752>
c00183b6:	66 90                	xchg   ax,ax
c00183b8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00183bc:	0f 85 2a 03 00 00    	jne    c00186ec <Vm::x87Handler(regs*)+0xace>
c00183c2:	0f b7 05 c0 99 02 c0 	movzx  eax,WORD PTR ds:0xc00299c0
c00183c9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00183cd:	8d 76 00             	lea    esi,[esi+0x0]
c00183d0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00183d4:	e9 c7 f8 ff ff       	jmp    c0017ca0 <Vm::x87Handler(regs*)+0x82>
c00183d9:	8d 76 00             	lea    esi,[esi+0x0]
c00183dc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00183e0:	84 d2                	test   dl,dl
c00183e2:	75 10                	jne    c00183f4 <Vm::x87Handler(regs*)+0x7d6>
c00183e4:	83 ec 0c             	sub    esp,0xc
c00183e7:	ff 36                	push   DWORD PTR [esi]
c00183e9:	e8 29 f4 ff ff       	call   c0017817 <Vm::fpu32ToInternal(unsigned int)>
c00183ee:	e9 39 01 00 00       	jmp    c001852c <Vm::x87Handler(regs*)+0x90e>
c00183f3:	90                   	nop
c00183f4:	80 fa 01             	cmp    dl,0x1
c00183f7:	75 0f                	jne    c0018408 <Vm::x87Handler(regs*)+0x7ea>
c00183f9:	83 ec 0c             	sub    esp,0xc
c00183fc:	ff 36                	push   DWORD PTR [esi]
c00183fe:	e8 14 f4 ff ff       	call   c0017817 <Vm::fpu32ToInternal(unsigned int)>
c0018403:	e9 b4 02 00 00       	jmp    c00186bc <Vm::x87Handler(regs*)+0xa9e>
c0018408:	80 fa 04             	cmp    dl,0x4
c001840b:	75 0f                	jne    c001841c <Vm::x87Handler(regs*)+0x7fe>
c001840d:	83 ec 0c             	sub    esp,0xc
c0018410:	ff 36                	push   DWORD PTR [esi]
c0018412:	e8 00 f4 ff ff       	call   c0017817 <Vm::fpu32ToInternal(unsigned int)>
c0018417:	e9 9c 01 00 00       	jmp    c00185b8 <Vm::x87Handler(regs*)+0x99a>
c001841c:	80 fa 05             	cmp    dl,0x5
c001841f:	75 1b                	jne    c001843c <Vm::x87Handler(regs*)+0x81e>
c0018421:	83 ec 0c             	sub    esp,0xc
c0018424:	6a 00                	push   0x0
c0018426:	e8 b3 f6 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001842b:	89 c7                	mov    edi,eax
c001842d:	89 d5                	mov    ebp,edx
c001842f:	58                   	pop    eax
c0018430:	ff 36                	push   DWORD PTR [esi]
c0018432:	e8 e0 f3 ff ff       	call   c0017817 <Vm::fpu32ToInternal(unsigned int)>
c0018437:	e9 bc 01 00 00       	jmp    c00185f8 <Vm::x87Handler(regs*)+0x9da>
c001843c:	80 fa 06             	cmp    dl,0x6
c001843f:	75 0f                	jne    c0018450 <Vm::x87Handler(regs*)+0x832>
c0018441:	83 ec 0c             	sub    esp,0xc
c0018444:	ff 36                	push   DWORD PTR [esi]
c0018446:	e8 cc f3 ff ff       	call   c0017817 <Vm::fpu32ToInternal(unsigned int)>
c001844b:	e9 cc 01 00 00       	jmp    c001861c <Vm::x87Handler(regs*)+0x9fe>
c0018450:	31 c0                	xor    eax,eax
c0018452:	80 fa 07             	cmp    dl,0x7
c0018455:	0f 85 d5 02 00 00    	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c001845b:	83 ec 0c             	sub    esp,0xc
c001845e:	6a 00                	push   0x0
c0018460:	e8 79 f6 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018465:	89 c7                	mov    edi,eax
c0018467:	89 d5                	mov    ebp,edx
c0018469:	58                   	pop    eax
c001846a:	ff 36                	push   DWORD PTR [esi]
c001846c:	e8 a6 f3 ff ff       	call   c0017817 <Vm::fpu32ToInternal(unsigned int)>
c0018471:	e9 ee 01 00 00       	jmp    c0018664 <Vm::x87Handler(regs*)+0xa46>
c0018476:	66 90                	xchg   ax,ax
c0018478:	80 fa 03             	cmp    dl,0x3
c001847b:	0f 85 f7 01 00 00    	jne    c0018678 <Vm::x87Handler(regs*)+0xa5a>
c0018481:	e8 45 f7 ff ff       	call   c0017bcb <Vm::fpuPop()>
c0018486:	51                   	push   ecx
c0018487:	51                   	push   ecx
c0018488:	e9 03 02 00 00       	jmp    c0018690 <Vm::x87Handler(regs*)+0xa72>
c001848d:	8d 76 00             	lea    esi,[esi+0x0]
c0018490:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018494:	80 fa 01             	cmp    dl,0x1
c0018497:	75 0b                	jne    c00184a4 <Vm::x87Handler(regs*)+0x886>
c0018499:	57                   	push   edi
c001849a:	57                   	push   edi
c001849b:	8b 06                	mov    eax,DWORD PTR [esi]
c001849d:	e9 0e 02 00 00       	jmp    c00186b0 <Vm::x87Handler(regs*)+0xa92>
c00184a2:	66 90                	xchg   ax,ax
c00184a4:	80 fa 04             	cmp    dl,0x4
c00184a7:	75 13                	jne    c00184bc <Vm::x87Handler(regs*)+0x89e>
c00184a9:	31 d2                	xor    edx,edx
c00184ab:	51                   	push   ecx
c00184ac:	51                   	push   ecx
c00184ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00184af:	52                   	push   edx
c00184b0:	50                   	push   eax
c00184b1:	e8 4a f4 ff ff       	call   c0017900 <Vm::fpuLongToFloat(long long)>
c00184b6:	e9 fd 00 00 00       	jmp    c00185b8 <Vm::x87Handler(regs*)+0x99a>
c00184bb:	90                   	nop
c00184bc:	31 c0                	xor    eax,eax
c00184be:	80 fa 07             	cmp    dl,0x7
c00184c1:	0f 85 69 02 00 00    	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c00184c7:	83 ec 0c             	sub    esp,0xc
c00184ca:	6a 00                	push   0x0
c00184cc:	e8 0d f6 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00184d1:	89 c7                	mov    edi,eax
c00184d3:	89 d5                	mov    ebp,edx
c00184d5:	58                   	pop    eax
c00184d6:	8b 06                	mov    eax,DWORD PTR [esi]
c00184d8:	5a                   	pop    edx
c00184d9:	31 d2                	xor    edx,edx
c00184db:	52                   	push   edx
c00184dc:	50                   	push   eax
c00184dd:	e8 1e f4 ff ff       	call   c0017900 <Vm::fpuLongToFloat(long long)>
c00184e2:	e9 7d 01 00 00       	jmp    c0018664 <Vm::x87Handler(regs*)+0xa46>
c00184e7:	90                   	nop
c00184e8:	84 d2                	test   dl,dl
c00184ea:	75 10                	jne    c00184fc <Vm::x87Handler(regs*)+0x8de>
c00184ec:	31 d2                	xor    edx,edx
c00184ee:	55                   	push   ebp
c00184ef:	55                   	push   ebp
c00184f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00184f2:	52                   	push   edx
c00184f3:	50                   	push   eax
c00184f4:	e9 03 02 00 00       	jmp    c00186fc <Vm::x87Handler(regs*)+0xade>
c00184f9:	8d 76 00             	lea    esi,[esi+0x0]
c00184fc:	31 c0                	xor    eax,eax
c00184fe:	80 fa 02             	cmp    dl,0x2
c0018501:	0f 85 29 02 00 00    	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c0018507:	83 ec 0c             	sub    esp,0xc
c001850a:	6a 00                	push   0x0
c001850c:	e8 cd f5 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018511:	59                   	pop    ecx
c0018512:	5f                   	pop    edi
c0018513:	e9 18 f9 ff ff       	jmp    c0017e30 <Vm::x87Handler(regs*)+0x212>
c0018518:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001851c:	84 d2                	test   dl,dl
c001851e:	75 2c                	jne    c001854c <Vm::x87Handler(regs*)+0x92e>
c0018520:	50                   	push   eax
c0018521:	50                   	push   eax
c0018522:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018525:	ff 36                	push   DWORD PTR [esi]
c0018527:	e8 30 f3 ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c001852c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018533:	89 c6                	mov    esi,eax
c0018535:	89 d7                	mov    edi,edx
c0018537:	e8 a2 f5 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001853c:	57                   	push   edi
c001853d:	56                   	push   esi
c001853e:	52                   	push   edx
c001853f:	50                   	push   eax
c0018540:	e8 0f f5 ff ff       	call   c0017a54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018545:	e9 8e 01 00 00       	jmp    c00186d8 <Vm::x87Handler(regs*)+0xaba>
c001854a:	66 90                	xchg   ax,ax
c001854c:	80 fa 01             	cmp    dl,0x1
c001854f:	75 13                	jne    c0018564 <Vm::x87Handler(regs*)+0x946>
c0018551:	50                   	push   eax
c0018552:	50                   	push   eax
c0018553:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018556:	ff 36                	push   DWORD PTR [esi]
c0018558:	e8 ff f2 ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c001855d:	e9 5a 01 00 00       	jmp    c00186bc <Vm::x87Handler(regs*)+0xa9e>
c0018562:	66 90                	xchg   ax,ax
c0018564:	80 fa 02             	cmp    dl,0x2
c0018567:	0f 85 03 f9 ff ff    	jne    c0017e70 <Vm::x87Handler(regs*)+0x252>
c001856d:	55                   	push   ebp
c001856e:	55                   	push   ebp
c001856f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018572:	ff 36                	push   DWORD PTR [esi]
c0018574:	e8 e3 f2 ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c0018579:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018580:	89 c6                	mov    esi,eax
c0018582:	89 d7                	mov    edi,edx
c0018584:	e8 55 f5 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018589:	57                   	push   edi
c001858a:	56                   	push   esi
c001858b:	52                   	push   edx
c001858c:	50                   	push   eax
c001858d:	e8 6c f4 ff ff       	call   c00179fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018592:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018596:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0018599:	8d 76 00             	lea    esi,[esi+0x0]
c001859c:	83 c4 20             	add    esp,0x20
c001859f:	e9 fc f6 ff ff       	jmp    c0017ca0 <Vm::x87Handler(regs*)+0x82>
c00185a4:	80 fa 04             	cmp    dl,0x4
c00185a7:	75 2f                	jne    c00185d8 <Vm::x87Handler(regs*)+0x9ba>
c00185a9:	51                   	push   ecx
c00185aa:	51                   	push   ecx
c00185ab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00185ae:	ff 36                	push   DWORD PTR [esi]
c00185b0:	e8 a7 f2 ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c00185b5:	8d 76 00             	lea    esi,[esi+0x0]
c00185b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00185bf:	89 c6                	mov    esi,eax
c00185c1:	89 d7                	mov    edi,edx
c00185c3:	e8 16 f5 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00185c8:	57                   	push   edi
c00185c9:	56                   	push   esi
c00185ca:	52                   	push   edx
c00185cb:	50                   	push   eax
c00185cc:	e8 ad f4 ff ff       	call   c0017a7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c00185d1:	e9 02 01 00 00       	jmp    c00186d8 <Vm::x87Handler(regs*)+0xaba>
c00185d6:	66 90                	xchg   ax,ax
c00185d8:	80 fa 05             	cmp    dl,0x5
c00185db:	75 2b                	jne    c0018608 <Vm::x87Handler(regs*)+0x9ea>
c00185dd:	83 ec 0c             	sub    esp,0xc
c00185e0:	6a 00                	push   0x0
c00185e2:	e8 f7 f4 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00185e7:	89 c7                	mov    edi,eax
c00185e9:	89 d5                	mov    ebp,edx
c00185eb:	58                   	pop    eax
c00185ec:	5a                   	pop    edx
c00185ed:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00185f0:	ff 36                	push   DWORD PTR [esi]
c00185f2:	e8 65 f2 ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c00185f7:	90                   	nop
c00185f8:	83 c4 10             	add    esp,0x10
c00185fb:	55                   	push   ebp
c00185fc:	57                   	push   edi
c00185fd:	52                   	push   edx
c00185fe:	50                   	push   eax
c00185ff:	e8 7a f4 ff ff       	call   c0017a7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018604:	eb 6a                	jmp    c0018670 <Vm::x87Handler(regs*)+0xa52>
c0018606:	66 90                	xchg   ax,ax
c0018608:	80 fa 06             	cmp    dl,0x6
c001860b:	75 2f                	jne    c001863c <Vm::x87Handler(regs*)+0xa1e>
c001860d:	51                   	push   ecx
c001860e:	51                   	push   ecx
c001860f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018612:	ff 36                	push   DWORD PTR [esi]
c0018614:	e8 43 f2 ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c0018619:	8d 76 00             	lea    esi,[esi+0x0]
c001861c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018623:	89 c6                	mov    esi,eax
c0018625:	89 d7                	mov    edi,edx
c0018627:	e8 b2 f4 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001862c:	57                   	push   edi
c001862d:	56                   	push   esi
c001862e:	52                   	push   edx
c001862f:	50                   	push   eax
c0018630:	e8 77 f4 ff ff       	call   c0017aac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018635:	e9 9e 00 00 00       	jmp    c00186d8 <Vm::x87Handler(regs*)+0xaba>
c001863a:	66 90                	xchg   ax,ax
c001863c:	31 c0                	xor    eax,eax
c001863e:	80 fa 07             	cmp    dl,0x7
c0018641:	0f 85 e9 00 00 00    	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c0018647:	83 ec 0c             	sub    esp,0xc
c001864a:	6a 00                	push   0x0
c001864c:	e8 8d f4 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c0018651:	89 c7                	mov    edi,eax
c0018653:	89 d5                	mov    ebp,edx
c0018655:	58                   	pop    eax
c0018656:	5a                   	pop    edx
c0018657:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001865a:	ff 36                	push   DWORD PTR [esi]
c001865c:	e8 fb f1 ff ff       	call   c001785c <Vm::fpu64ToInternal(unsigned long long)>
c0018661:	8d 76 00             	lea    esi,[esi+0x0]
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	55                   	push   ebp
c0018668:	57                   	push   edi
c0018669:	52                   	push   edx
c001866a:	50                   	push   eax
c001866b:	e8 3c f4 ff ff       	call   c0017aac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018670:	83 c4 0c             	add    esp,0xc
c0018673:	eb 67                	jmp    c00186dc <Vm::x87Handler(regs*)+0xabe>
c0018675:	8d 76 00             	lea    esi,[esi+0x0]
c0018678:	31 c0                	xor    eax,eax
c001867a:	80 fa 02             	cmp    dl,0x2
c001867d:	0f 85 ad 00 00 00    	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c0018683:	83 ec 0c             	sub    esp,0xc
c0018686:	6a 00                	push   0x0
c0018688:	e8 51 f4 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c001868d:	59                   	pop    ecx
c001868e:	5f                   	pop    edi
c001868f:	90                   	nop
c0018690:	52                   	push   edx
c0018691:	50                   	push   eax
c0018692:	e8 77 f1 ff ff       	call   c001780e <Vm::fpuInternalTo64(unsigned long long)>
c0018697:	e9 84 00 00 00       	jmp    c0018720 <Vm::x87Handler(regs*)+0xb02>
c001869c:	31 c0                	xor    eax,eax
c001869e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00186a3:	0f 85 87 00 00 00    	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c00186a9:	50                   	push   eax
c00186aa:	50                   	push   eax
c00186ab:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00186ae:	66 90                	xchg   ax,ax
c00186b0:	31 d2                	xor    edx,edx
c00186b2:	52                   	push   edx
c00186b3:	50                   	push   eax
c00186b4:	e8 47 f2 ff ff       	call   c0017900 <Vm::fpuLongToFloat(long long)>
c00186b9:	8d 76 00             	lea    esi,[esi+0x0]
c00186bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00186c3:	89 c6                	mov    esi,eax
c00186c5:	89 d7                	mov    edi,edx
c00186c7:	e8 12 f4 ff ff       	call   c0017ade <Vm::fpuGetReg(int)>
c00186cc:	57                   	push   edi
c00186cd:	56                   	push   esi
c00186ce:	52                   	push   edx
c00186cf:	50                   	push   eax
c00186d0:	e8 b8 f3 ff ff       	call   c0017a8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	83 c4 1c             	add    esp,0x1c
c00186db:	90                   	nop
c00186dc:	52                   	push   edx
c00186dd:	50                   	push   eax
c00186de:	6a 00                	push   0x0
c00186e0:	e8 3c f4 ff ff       	call   c0017b21 <Vm::fpuSetReg(int, unsigned long long)>
c00186e5:	e9 7a f7 ff ff       	jmp    c0017e64 <Vm::x87Handler(regs*)+0x246>
c00186ea:	66 90                	xchg   ax,ax
c00186ec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00186f0:	80 fa 05             	cmp    dl,0x5
c00186f3:	75 13                	jne    c0018708 <Vm::x87Handler(regs*)+0xaea>
c00186f5:	55                   	push   ebp
c00186f6:	55                   	push   ebp
c00186f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00186fa:	ff 36                	push   DWORD PTR [esi]
c00186fc:	e8 c3 f1 ff ff       	call   c00178c4 <Vm::fpuULongToFloat(unsigned long long)>
c0018701:	e9 52 f7 ff ff       	jmp    c0017e58 <Vm::x87Handler(regs*)+0x23a>
c0018706:	66 90                	xchg   ax,ax
c0018708:	31 c0                	xor    eax,eax
c001870a:	80 fa 07             	cmp    dl,0x7
c001870d:	75 21                	jne    c0018730 <Vm::x87Handler(regs*)+0xb12>
c001870f:	e8 b7 f4 ff ff       	call   c0017bcb <Vm::fpuPop()>
c0018714:	51                   	push   ecx
c0018715:	51                   	push   ecx
c0018716:	52                   	push   edx
c0018717:	50                   	push   eax
c0018718:	e8 48 f1 ff ff       	call   c0017865 <Vm::fpuFloatToLong(unsigned long long)>
c001871d:	8d 76 00             	lea    esi,[esi+0x0]
c0018720:	83 c4 10             	add    esp,0x10
c0018723:	89 06                	mov    DWORD PTR [esi],eax
c0018725:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0018728:	e9 7b f7 ff ff       	jmp    c0017ea8 <Vm::x87Handler(regs*)+0x28a>
c001872d:	8d 76 00             	lea    esi,[esi+0x0]
c0018730:	83 c4 1c             	add    esp,0x1c
c0018733:	5b                   	pop    ebx
c0018734:	5e                   	pop    esi
c0018735:	5f                   	pop    edi
c0018736:	5d                   	pop    ebp
c0018737:	c3                   	ret    

c0018738 <__static_initialization_and_destruction_0(int, int)>:
c0018738:	83 ec 0c             	sub    esp,0xc
c001873b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018740:	75 1a                	jne    c001875c <__static_initialization_and_destruction_0(int, int)+0x24>
c0018742:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001874a:	75 10                	jne    c001875c <__static_initialization_and_destruction_0(int, int)+0x24>
c001874c:	83 ec 0c             	sub    esp,0xc
c001874f:	68 c0 99 02 c0       	push   0xc00299c0
c0018754:	e8 fb 97 00 00       	call   c0021f54 <Vm::_FPUState::_FPUState()>
c0018759:	83 c4 10             	add    esp,0x10
c001875c:	90                   	nop
c001875d:	83 c4 0c             	add    esp,0xc
c0018760:	c3                   	ret    
c0018761:	8d 76 00             	lea    esi,[esi+0x0]

c0018764 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0018764:	83 ec 0c             	sub    esp,0xc
c0018767:	83 ec 08             	sub    esp,0x8
c001876a:	68 ff ff 00 00       	push   0xffff
c001876f:	6a 01                	push   0x1
c0018771:	e8 c2 ff ff ff       	call   c0018738 <__static_initialization_and_destruction_0(int, int)>
c0018776:	83 c4 10             	add    esp,0x10
c0018779:	83 c4 0c             	add    esp,0xc
c001877c:	c3                   	ret    

c001877d <Hal::noCopro(unsigned long)>:
c001877d:	c3                   	ret    

c001877e <Hal::noTSC()>:
c001877e:	31 c0                	xor    eax,eax
c0018780:	31 d2                	xor    edx,edx
c0018782:	c3                   	ret    

c0018783 <Hal::readTSC()>:
c0018783:	0f 31                	rdtsc  
c0018785:	c3                   	ret    

c0018786 <nmiHandler(regs*, void*)>:
c0018786:	83 ec 0c             	sub    esp,0xc
c0018789:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001878e:	83 ec 0c             	sub    esp,0xc
c0018791:	50                   	push   eax
c0018792:	e8 a7 07 ff ff       	call   c0008f3e <Computer::handleNMI()>
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	90                   	nop
c001879b:	83 c4 0c             	add    esp,0xc
c001879e:	c3                   	ret    

c001879f <doubleFault(regs*, void*)>:
c001879f:	55                   	push   ebp
c00187a0:	89 e5                	mov    ebp,esp
c00187a2:	83 ec 08             	sub    esp,0x8
c00187a5:	83 ec 0c             	sub    esp,0xc
c00187a8:	68 f8 48 02 c0       	push   0xc00248f8
c00187ad:	e8 d9 a2 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00187b2:	83 c4 10             	add    esp,0x10
c00187b5:	90                   	nop
c00187b6:	c9                   	leave  
c00187b7:	c3                   	ret    

c00187b8 <displayDebugInfo(regs*)>:
c00187b8:	53                   	push   ebx
c00187b9:	83 ec 38             	sub    esp,0x38
c00187bc:	0f 20 c0             	mov    eax,cr0
c00187bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00187c3:	0f 20 d0             	mov    eax,cr2
c00187c6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00187ca:	0f 20 d8             	mov    eax,cr3
c00187cd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00187d1:	0f 20 e0             	mov    eax,cr4
c00187d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00187d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00187df:	83 ec 08             	sub    esp,0x8
c00187e2:	50                   	push   eax
c00187e3:	68 05 49 02 c0       	push   0xc0024905
c00187e8:	e8 34 3f ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00187f7:	83 ec 08             	sub    esp,0x8
c00187fa:	50                   	push   eax
c00187fb:	68 10 49 02 c0       	push   0xc0024910
c0018800:	e8 1c 3f ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018805:	83 c4 10             	add    esp,0x10
c0018808:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001880c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001880f:	83 ec 08             	sub    esp,0x8
c0018812:	50                   	push   eax
c0018813:	68 1b 49 02 c0       	push   0xc002491b
c0018818:	e8 04 3f ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001881d:	83 c4 10             	add    esp,0x10
c0018820:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018824:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018827:	83 ec 08             	sub    esp,0x8
c001882a:	50                   	push   eax
c001882b:	68 26 49 02 c0       	push   0xc0024926
c0018830:	e8 ec 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018835:	83 c4 10             	add    esp,0x10
c0018838:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001883c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001883f:	83 ec 08             	sub    esp,0x8
c0018842:	50                   	push   eax
c0018843:	68 31 49 02 c0       	push   0xc0024931
c0018848:	e8 d4 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001884d:	83 c4 10             	add    esp,0x10
c0018850:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018854:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018857:	83 ec 08             	sub    esp,0x8
c001885a:	50                   	push   eax
c001885b:	68 3c 49 02 c0       	push   0xc002493c
c0018860:	e8 bc 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018865:	83 c4 10             	add    esp,0x10
c0018868:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001886c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001886f:	83 ec 08             	sub    esp,0x8
c0018872:	50                   	push   eax
c0018873:	68 56 49 02 c0       	push   0xc0024956
c0018878:	e8 a4 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001887d:	83 c4 10             	add    esp,0x10
c0018880:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018884:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018887:	83 ec 08             	sub    esp,0x8
c001888a:	50                   	push   eax
c001888b:	68 47 49 02 c0       	push   0xc0024947
c0018890:	e8 8c 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018895:	83 c4 10             	add    esp,0x10
c0018898:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001889c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001889f:	83 ec 08             	sub    esp,0x8
c00188a2:	50                   	push   eax
c00188a3:	68 52 49 02 c0       	push   0xc0024952
c00188a8:	e8 74 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00188ad:	83 c4 10             	add    esp,0x10
c00188b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00188b7:	83 ec 08             	sub    esp,0x8
c00188ba:	50                   	push   eax
c00188bb:	68 61 49 02 c0       	push   0xc0024961
c00188c0:	e8 5c 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188cc:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00188cf:	83 ec 08             	sub    esp,0x8
c00188d2:	50                   	push   eax
c00188d3:	68 6c 49 02 c0       	push   0xc002496c
c00188d8:	e8 44 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00188dd:	83 c4 10             	add    esp,0x10
c00188e0:	83 ec 08             	sub    esp,0x8
c00188e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188e7:	68 77 49 02 c0       	push   0xc0024977
c00188ec:	e8 30 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00188f1:	83 c4 10             	add    esp,0x10
c00188f4:	83 ec 08             	sub    esp,0x8
c00188f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188fb:	68 82 49 02 c0       	push   0xc0024982
c0018900:	e8 1c 3e ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018905:	83 c4 10             	add    esp,0x10
c0018908:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c001890d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018913:	83 ec 0c             	sub    esp,0xc
c0018916:	50                   	push   eax
c0018917:	e8 5f 1c ff ff       	call   c000a57b <setActiveTerminal(VgaText*)>
c001891c:	83 c4 10             	add    esp,0x10
c001891f:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018924:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001892a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001892e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018931:	c1 e2 05             	shl    edx,0x5
c0018934:	81 c2 e0 5b 02 c0    	add    edx,0xc0025be0
c001893a:	83 ec 08             	sub    esp,0x8
c001893d:	52                   	push   edx
c001893e:	50                   	push   eax
c001893f:	e8 a0 1f ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018944:	83 c4 10             	add    esp,0x10
c0018947:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c001894c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018952:	83 ec 08             	sub    esp,0x8
c0018955:	68 8d 49 02 c0       	push   0xc002498d
c001895a:	50                   	push   eax
c001895b:	e8 84 1f ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018960:	83 c4 10             	add    esp,0x10
c0018963:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018968:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001896e:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018973:	8b 12                	mov    edx,DWORD PTR [edx]
c0018975:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018978:	83 c2 0c             	add    edx,0xc
c001897b:	83 ec 08             	sub    esp,0x8
c001897e:	52                   	push   edx
c001897f:	50                   	push   eax
c0018980:	e8 5f 1f ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018985:	83 c4 10             	add    esp,0x10
c0018988:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c001898d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018993:	83 ec 08             	sub    esp,0x8
c0018996:	68 96 49 02 c0       	push   0xc0024996
c001899b:	50                   	push   eax
c001899c:	e8 43 1f ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c00189a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189af:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00189b3:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00189b6:	83 ec 08             	sub    esp,0x8
c00189b9:	52                   	push   edx
c00189ba:	50                   	push   eax
c00189bb:	e8 de 1e ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c00189c0:	83 c4 10             	add    esp,0x10
c00189c3:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c00189c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189ce:	83 ec 08             	sub    esp,0x8
c00189d1:	68 9e 49 02 c0       	push   0xc002499e
c00189d6:	50                   	push   eax
c00189d7:	e8 08 1f ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c00189dc:	83 c4 10             	add    esp,0x10
c00189df:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c00189e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189ea:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00189ee:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00189f1:	83 ec 08             	sub    esp,0x8
c00189f4:	52                   	push   edx
c00189f5:	50                   	push   eax
c00189f6:	e8 a3 1e ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c00189fb:	83 c4 10             	add    esp,0x10
c00189fe:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018a03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a09:	83 ec 08             	sub    esp,0x8
c0018a0c:	68 a6 49 02 c0       	push   0xc00249a6
c0018a11:	50                   	push   eax
c0018a12:	e8 cd 1e ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018a17:	83 c4 10             	add    esp,0x10
c0018a1a:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018a1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a25:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018a29:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018a2c:	83 ec 08             	sub    esp,0x8
c0018a2f:	52                   	push   edx
c0018a30:	50                   	push   eax
c0018a31:	e8 68 1e ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018a36:	83 c4 10             	add    esp,0x10
c0018a39:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018a3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a44:	83 ec 08             	sub    esp,0x8
c0018a47:	68 ae 49 02 c0       	push   0xc00249ae
c0018a4c:	50                   	push   eax
c0018a4d:	e8 92 1e ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018a52:	83 c4 10             	add    esp,0x10
c0018a55:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a60:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018a64:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018a67:	83 ec 08             	sub    esp,0x8
c0018a6a:	52                   	push   edx
c0018a6b:	50                   	push   eax
c0018a6c:	e8 2d 1e ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018a71:	83 c4 10             	add    esp,0x10
c0018a74:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018a79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a7f:	83 ec 08             	sub    esp,0x8
c0018a82:	68 b6 49 02 c0       	push   0xc00249b6
c0018a87:	50                   	push   eax
c0018a88:	e8 57 1e ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018a8d:	83 c4 10             	add    esp,0x10
c0018a90:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018a95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a9b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018a9f:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018aa2:	83 ec 08             	sub    esp,0x8
c0018aa5:	52                   	push   edx
c0018aa6:	50                   	push   eax
c0018aa7:	e8 f2 1d ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018aac:	83 c4 10             	add    esp,0x10
c0018aaf:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018ab4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018aba:	83 ec 08             	sub    esp,0x8
c0018abd:	68 be 49 02 c0       	push   0xc00249be
c0018ac2:	50                   	push   eax
c0018ac3:	e8 1c 1e ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018ac8:	83 c4 10             	add    esp,0x10
c0018acb:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018ad0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ad6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018ada:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018add:	83 ec 08             	sub    esp,0x8
c0018ae0:	52                   	push   edx
c0018ae1:	50                   	push   eax
c0018ae2:	e8 b7 1d ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018ae7:	83 c4 10             	add    esp,0x10
c0018aea:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018aef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018af5:	83 ec 08             	sub    esp,0x8
c0018af8:	68 c6 49 02 c0       	push   0xc00249c6
c0018afd:	50                   	push   eax
c0018afe:	e8 e1 1d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018b03:	83 c4 10             	add    esp,0x10
c0018b06:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018b0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b11:	83 ec 08             	sub    esp,0x8
c0018b14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b18:	50                   	push   eax
c0018b19:	e8 80 1d ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018b1e:	83 c4 10             	add    esp,0x10
c0018b21:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018b26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b2c:	83 ec 08             	sub    esp,0x8
c0018b2f:	68 cf 49 02 c0       	push   0xc00249cf
c0018b34:	50                   	push   eax
c0018b35:	e8 aa 1d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018b3a:	83 c4 10             	add    esp,0x10
c0018b3d:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018b42:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b48:	83 ec 08             	sub    esp,0x8
c0018b4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b4f:	50                   	push   eax
c0018b50:	e8 49 1d ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018b55:	83 c4 10             	add    esp,0x10
c0018b58:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018b5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b63:	83 ec 08             	sub    esp,0x8
c0018b66:	68 d7 49 02 c0       	push   0xc00249d7
c0018b6b:	50                   	push   eax
c0018b6c:	e8 73 1d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018b71:	83 c4 10             	add    esp,0x10
c0018b74:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018b79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b7f:	83 ec 08             	sub    esp,0x8
c0018b82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b86:	50                   	push   eax
c0018b87:	e8 12 1d ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018b8c:	83 c4 10             	add    esp,0x10
c0018b8f:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018b94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b9a:	83 ec 08             	sub    esp,0x8
c0018b9d:	68 df 49 02 c0       	push   0xc00249df
c0018ba2:	50                   	push   eax
c0018ba3:	e8 3c 1d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018ba8:	83 c4 10             	add    esp,0x10
c0018bab:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018bb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bb6:	83 ec 08             	sub    esp,0x8
c0018bb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018bbd:	50                   	push   eax
c0018bbe:	e8 db 1c ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018bcb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bd1:	83 ec 08             	sub    esp,0x8
c0018bd4:	68 e7 49 02 c0       	push   0xc00249e7
c0018bd9:	50                   	push   eax
c0018bda:	e8 05 1d ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018bdf:	83 c4 10             	add    esp,0x10
c0018be2:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018be7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bed:	0f 21 c2             	mov    edx,db0
c0018bf0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018bf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018bf8:	83 ec 08             	sub    esp,0x8
c0018bfb:	52                   	push   edx
c0018bfc:	50                   	push   eax
c0018bfd:	e8 9c 1c ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018c02:	83 c4 10             	add    esp,0x10
c0018c05:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018c0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c10:	83 ec 08             	sub    esp,0x8
c0018c13:	68 f0 49 02 c0       	push   0xc00249f0
c0018c18:	50                   	push   eax
c0018c19:	e8 c6 1c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018c26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c2c:	0f 21 ca             	mov    edx,db1
c0018c2f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018c33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c37:	83 ec 08             	sub    esp,0x8
c0018c3a:	52                   	push   edx
c0018c3b:	50                   	push   eax
c0018c3c:	e8 5d 1c ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018c49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c4f:	83 ec 08             	sub    esp,0x8
c0018c52:	68 f8 49 02 c0       	push   0xc00249f8
c0018c57:	50                   	push   eax
c0018c58:	e8 87 1c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018c5d:	83 c4 10             	add    esp,0x10
c0018c60:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018c65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c6b:	0f 21 d2             	mov    edx,db2
c0018c6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c76:	83 ec 08             	sub    esp,0x8
c0018c79:	52                   	push   edx
c0018c7a:	50                   	push   eax
c0018c7b:	e8 1e 1c ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018c80:	83 c4 10             	add    esp,0x10
c0018c83:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018c88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c8e:	83 ec 08             	sub    esp,0x8
c0018c91:	68 00 4a 02 c0       	push   0xc0024a00
c0018c96:	50                   	push   eax
c0018c97:	e8 48 1c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018ca4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018caa:	0f 21 da             	mov    edx,db3
c0018cad:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018cb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cb5:	83 ec 08             	sub    esp,0x8
c0018cb8:	52                   	push   edx
c0018cb9:	50                   	push   eax
c0018cba:	e8 df 1b ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018cbf:	83 c4 10             	add    esp,0x10
c0018cc2:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018cc7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ccd:	83 ec 08             	sub    esp,0x8
c0018cd0:	68 08 4a 02 c0       	push   0xc0024a08
c0018cd5:	50                   	push   eax
c0018cd6:	e8 09 1c ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018cdb:	83 c4 10             	add    esp,0x10
c0018cde:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018ce3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ce9:	0f 21 f2             	mov    edx,db6
c0018cec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0018cf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018cf4:	83 ec 08             	sub    esp,0x8
c0018cf7:	52                   	push   edx
c0018cf8:	50                   	push   eax
c0018cf9:	e8 a0 1b ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018d06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d0c:	83 ec 08             	sub    esp,0x8
c0018d0f:	68 10 4a 02 c0       	push   0xc0024a10
c0018d14:	50                   	push   eax
c0018d15:	e8 ca 1b ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018d1a:	83 c4 10             	add    esp,0x10
c0018d1d:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018d22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d28:	0f 21 fa             	mov    edx,db7
c0018d2b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0018d2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d33:	83 ec 08             	sub    esp,0x8
c0018d36:	52                   	push   edx
c0018d37:	50                   	push   eax
c0018d38:	e8 61 1b ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d47:	83 ec 0c             	sub    esp,0xc
c0018d4a:	50                   	push   eax
c0018d4b:	e8 6f c9 ff ff       	call   c00156bf <Thr::getDriverNameFromAddress(unsigned long)>
c0018d50:	83 c4 10             	add    esp,0x10
c0018d53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d57:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018d5c:	0f 84 a6 00 00 00    	je     c0018e08 <displayDebugInfo(regs*)+0x650>
c0018d62:	83 ec 08             	sub    esp,0x8
c0018d65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018d69:	68 18 4a 02 c0       	push   0xc0024a18
c0018d6e:	e8 ae 39 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018d73:	83 c4 10             	add    esp,0x10
c0018d76:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018d7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d81:	83 ec 08             	sub    esp,0x8
c0018d84:	68 26 4a 02 c0       	push   0xc0024a26
c0018d89:	50                   	push   eax
c0018d8a:	e8 55 1b ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018d8f:	83 c4 10             	add    esp,0x10
c0018d92:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018d97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d9d:	83 ec 08             	sub    esp,0x8
c0018da0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018da4:	50                   	push   eax
c0018da5:	e8 3a 1b ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018daa:	83 c4 10             	add    esp,0x10
c0018dad:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018db2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018db8:	83 ec 08             	sub    esp,0x8
c0018dbb:	68 32 4a 02 c0       	push   0xc0024a32
c0018dc0:	50                   	push   eax
c0018dc1:	e8 1e 1b ff ff       	call   c000a8e4 <VgaText::puts(char const*)>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c0018dce:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0018dd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018dd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ddb:	83 ec 0c             	sub    esp,0xc
c0018dde:	50                   	push   eax
c0018ddf:	e8 12 c9 ff ff       	call   c00156f6 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0018de4:	83 c4 10             	add    esp,0x10
c0018de7:	83 ec 08             	sub    esp,0x8
c0018dea:	50                   	push   eax
c0018deb:	53                   	push   ebx
c0018dec:	e8 ad 1a ff ff       	call   c000a89e <VgaText::putx(unsigned int)>
c0018df1:	83 c4 10             	add    esp,0x10
c0018df4:	83 ec 08             	sub    esp,0x8
c0018df7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018dfb:	68 3e 4a 02 c0       	push   0xc0024a3e
c0018e00:	e8 1c 39 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018e05:	83 c4 10             	add    esp,0x10
c0018e08:	fa                   	cli    
c0018e09:	f4                   	hlt    
c0018e0a:	eb fe                	jmp    c0018e0a <displayDebugInfo(regs*)+0x652>

c0018e0c <displayProgramFault(char const*)>:
c0018e0c:	83 ec 0c             	sub    esp,0xc
c0018e0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018e19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e1f:	85 c0                	test   eax,eax
c0018e21:	74 21                	je     c0018e44 <displayProgramFault(char const*)+0x38>
c0018e23:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018e28:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018e2d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e33:	6a 04                	push   0x4
c0018e35:	6a 0f                	push   0xf
c0018e37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018e3b:	50                   	push   eax
c0018e3c:	e8 15 1b ff ff       	call   c000a956 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0018e41:	83 c4 10             	add    esp,0x10
c0018e44:	90                   	nop
c0018e45:	83 c4 0c             	add    esp,0xc
c0018e48:	c3                   	ret    

c0018e49 <gpFault(regs*, void*)>:
c0018e49:	83 ec 1c             	sub    esp,0x1c
c0018e4c:	c7 05 1c 9a 02 c0 db 70 01 c0 	mov    DWORD PTR ds:0xc0029a1c,0xc00170db
c0018e56:	a1 1c 9a 02 c0       	mov    eax,ds:0xc0029a1c
c0018e5b:	85 c0                	test   eax,eax
c0018e5d:	74 1c                	je     c0018e7b <gpFault(regs*, void*)+0x32>
c0018e5f:	a1 1c 9a 02 c0       	mov    eax,ds:0xc0029a1c
c0018e64:	83 ec 0c             	sub    esp,0xc
c0018e67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e6b:	ff d0                	call   eax
c0018e6d:	83 c4 10             	add    esp,0x10
c0018e70:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018e74:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018e79:	75 3e                	jne    c0018eb9 <gpFault(regs*, void*)+0x70>
c0018e7b:	83 ec 0c             	sub    esp,0xc
c0018e7e:	68 4e 4a 02 c0       	push   0xc0024a4e
c0018e83:	e8 99 38 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018e88:	83 c4 10             	add    esp,0x10
c0018e8b:	83 ec 0c             	sub    esp,0xc
c0018e8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e92:	e8 21 f9 ff ff       	call   c00187b8 <displayDebugInfo(regs*)>
c0018e97:	83 c4 10             	add    esp,0x10
c0018e9a:	83 ec 0c             	sub    esp,0xc
c0018e9d:	68 69 4a 02 c0       	push   0xc0024a69
c0018ea2:	e8 65 ff ff ff       	call   c0018e0c <displayProgramFault(char const*)>
c0018ea7:	83 c4 10             	add    esp,0x10
c0018eaa:	83 ec 0c             	sub    esp,0xc
c0018ead:	6a 00                	push   0x0
c0018eaf:	e8 20 dc ff ff       	call   c0016ad4 <Thr::terminateFromIRQ(int)>
c0018eb4:	83 c4 10             	add    esp,0x10
c0018eb7:	eb 01                	jmp    c0018eba <gpFault(regs*, void*)+0x71>
c0018eb9:	90                   	nop
c0018eba:	83 c4 1c             	add    esp,0x1c
c0018ebd:	c3                   	ret    

c0018ebe <pgFault(regs*, void*)>:
c0018ebe:	83 ec 1c             	sub    esp,0x1c
c0018ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ec5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ec8:	83 ec 08             	sub    esp,0x8
c0018ecb:	50                   	push   eax
c0018ecc:	68 82 4a 02 c0       	push   0xc0024a82
c0018ed1:	e8 4b 38 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018ed6:	83 c4 10             	add    esp,0x10
c0018ed9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018ede:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ee0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018ee3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018ee9:	0f 20 d2             	mov    edx,cr2
c0018eec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018ef0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ef4:	83 ec 08             	sub    esp,0x8
c0018ef7:	52                   	push   edx
c0018ef8:	50                   	push   eax
c0018ef9:	e8 9e 33 ff ff       	call   c000c29c <VAS::tryLoadBackOffDisk(unsigned long)>
c0018efe:	83 c4 10             	add    esp,0x10
c0018f01:	84 c0                	test   al,al
c0018f03:	75 3e                	jne    c0018f43 <pgFault(regs*, void*)+0x85>
c0018f05:	83 ec 0c             	sub    esp,0xc
c0018f08:	68 97 4a 02 c0       	push   0xc0024a97
c0018f0d:	e8 0f 38 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018f12:	83 c4 10             	add    esp,0x10
c0018f15:	83 ec 0c             	sub    esp,0xc
c0018f18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f1c:	e8 97 f8 ff ff       	call   c00187b8 <displayDebugInfo(regs*)>
c0018f21:	83 c4 10             	add    esp,0x10
c0018f24:	83 ec 0c             	sub    esp,0xc
c0018f27:	68 a4 4a 02 c0       	push   0xc0024aa4
c0018f2c:	e8 db fe ff ff       	call   c0018e0c <displayProgramFault(char const*)>
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	83 ec 0c             	sub    esp,0xc
c0018f37:	6a 00                	push   0x0
c0018f39:	e8 96 db ff ff       	call   c0016ad4 <Thr::terminateFromIRQ(int)>
c0018f3e:	83 c4 10             	add    esp,0x10
c0018f41:	eb 01                	jmp    c0018f44 <pgFault(regs*, void*)+0x86>
c0018f43:	90                   	nop
c0018f44:	83 c4 1c             	add    esp,0x1c
c0018f47:	c3                   	ret    

c0018f48 <otherISRHandler(regs*, void*)>:
c0018f48:	83 ec 0c             	sub    esp,0xc
c0018f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f4f:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f56:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018f59:	83 ec 04             	sub    esp,0x4
c0018f5c:	52                   	push   edx
c0018f5d:	50                   	push   eax
c0018f5e:	68 af 4a 02 c0       	push   0xc0024aaf
c0018f63:	e8 b9 37 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018f68:	83 c4 10             	add    esp,0x10
c0018f6b:	83 ec 0c             	sub    esp,0xc
c0018f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f72:	e8 41 f8 ff ff       	call   c00187b8 <displayDebugInfo(regs*)>
c0018f77:	83 c4 10             	add    esp,0x10
c0018f7a:	83 ec 0c             	sub    esp,0xc
c0018f7d:	68 78 4b 02 c0       	push   0xc0024b78
c0018f82:	e8 85 fe ff ff       	call   c0018e0c <displayProgramFault(char const*)>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	83 ec 0c             	sub    esp,0xc
c0018f8d:	6a 00                	push   0x0
c0018f8f:	e8 40 db ff ff       	call   c0016ad4 <Thr::terminateFromIRQ(int)>
c0018f94:	83 c4 10             	add    esp,0x10
c0018f97:	90                   	nop
c0018f98:	83 c4 0c             	add    esp,0xc
c0018f9b:	c3                   	ret    

c0018f9c <opcodeFault(regs*, void*)>:
c0018f9c:	55                   	push   ebp
c0018f9d:	89 e5                	mov    ebp,esp
c0018f9f:	56                   	push   esi
c0018fa0:	53                   	push   ebx
c0018fa1:	83 ec 30             	sub    esp,0x30
c0018fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fa7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018faa:	83 ec 08             	sub    esp,0x8
c0018fad:	50                   	push   eax
c0018fae:	68 cc 4a 02 c0       	push   0xc0024acc
c0018fb3:	e8 69 37 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018fb8:	83 c4 10             	add    esp,0x10
c0018fbb:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0018fc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018fc6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0018fcc:	84 c0                	test   al,al
c0018fce:	74 24                	je     c0018ff4 <opcodeFault(regs*, void*)+0x58>
c0018fd0:	83 ec 0c             	sub    esp,0xc
c0018fd3:	68 a0 4b 02 c0       	push   0xc0024ba0
c0018fd8:	e8 44 37 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0018fdd:	83 c4 10             	add    esp,0x10
c0018fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fe3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018fe6:	8d 50 19             	lea    edx,[eax+0x19]
c0018fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018fef:	e9 9b 03 00 00       	jmp    c001938f <opcodeFault(regs*, void*)+0x3f3>
c0018ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ff7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ffa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018ffd:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0019001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019004:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019007:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001900a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001900d:	8a 00                	mov    al,BYTE PTR [eax]
c001900f:	3c f0                	cmp    al,0xf0
c0019011:	75 17                	jne    c001902a <opcodeFault(regs*, void*)+0x8e>
c0019013:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019019:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001901c:	8d 50 01             	lea    edx,[eax+0x1]
c001901f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019025:	e9 d6 00 00 00       	jmp    c0019100 <opcodeFault(regs*, void*)+0x164>
c001902a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001902d:	8a 00                	mov    al,BYTE PTR [eax]
c001902f:	3c f2                	cmp    al,0xf2
c0019031:	74 09                	je     c001903c <opcodeFault(regs*, void*)+0xa0>
c0019033:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019036:	8a 00                	mov    al,BYTE PTR [eax]
c0019038:	3c f3                	cmp    al,0xf3
c001903a:	75 1b                	jne    c0019057 <opcodeFault(regs*, void*)+0xbb>
c001903c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0019040:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019046:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019049:	8d 50 01             	lea    edx,[eax+0x1]
c001904c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001904f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019052:	e9 a9 00 00 00       	jmp    c0019100 <opcodeFault(regs*, void*)+0x164>
c0019057:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001905a:	8a 00                	mov    al,BYTE PTR [eax]
c001905c:	3c 66                	cmp    al,0x66
c001905e:	75 1b                	jne    c001907b <opcodeFault(regs*, void*)+0xdf>
c0019060:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0019064:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001906a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001906d:	8d 50 01             	lea    edx,[eax+0x1]
c0019070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019073:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019076:	e9 85 00 00 00       	jmp    c0019100 <opcodeFault(regs*, void*)+0x164>
c001907b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001907e:	8a 00                	mov    al,BYTE PTR [eax]
c0019080:	3c 67                	cmp    al,0x67
c0019082:	75 18                	jne    c001909c <opcodeFault(regs*, void*)+0x100>
c0019084:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0019088:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001908b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001908e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019091:	8d 50 01             	lea    edx,[eax+0x1]
c0019094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019097:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001909a:	eb 64                	jmp    c0019100 <opcodeFault(regs*, void*)+0x164>
c001909c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001909f:	8a 00                	mov    al,BYTE PTR [eax]
c00190a1:	3c 2e                	cmp    al,0x2e
c00190a3:	74 09                	je     c00190ae <opcodeFault(regs*, void*)+0x112>
c00190a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00190a8:	8a 00                	mov    al,BYTE PTR [eax]
c00190aa:	3c 3e                	cmp    al,0x3e
c00190ac:	75 18                	jne    c00190c6 <opcodeFault(regs*, void*)+0x12a>
c00190ae:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00190b2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00190b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00190bb:	8d 50 01             	lea    edx,[eax+0x1]
c00190be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190c1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00190c4:	eb 3a                	jmp    c0019100 <opcodeFault(regs*, void*)+0x164>
c00190c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00190c9:	8a 00                	mov    al,BYTE PTR [eax]
c00190cb:	3c 36                	cmp    al,0x36
c00190cd:	74 1b                	je     c00190ea <opcodeFault(regs*, void*)+0x14e>
c00190cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00190d2:	8a 00                	mov    al,BYTE PTR [eax]
c00190d4:	3c 26                	cmp    al,0x26
c00190d6:	74 12                	je     c00190ea <opcodeFault(regs*, void*)+0x14e>
c00190d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00190db:	8a 00                	mov    al,BYTE PTR [eax]
c00190dd:	3c 64                	cmp    al,0x64
c00190df:	74 09                	je     c00190ea <opcodeFault(regs*, void*)+0x14e>
c00190e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00190e4:	8a 00                	mov    al,BYTE PTR [eax]
c00190e6:	3c 65                	cmp    al,0x65
c00190e8:	75 16                	jne    c0019100 <opcodeFault(regs*, void*)+0x164>
c00190ea:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00190ee:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00190f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00190f7:	8d 50 01             	lea    edx,[eax+0x1]
c00190fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190fd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019100:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019103:	8a 00                	mov    al,BYTE PTR [eax]
c0019105:	3c 0f                	cmp    al,0xf
c0019107:	0f 85 8d 01 00 00    	jne    c001929a <opcodeFault(regs*, void*)+0x2fe>
c001910d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019110:	40                   	inc    eax
c0019111:	8a 00                	mov    al,BYTE PTR [eax]
c0019113:	3c c7                	cmp    al,0xc7
c0019115:	0f 85 7f 01 00 00    	jne    c001929a <opcodeFault(regs*, void*)+0x2fe>
c001911b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001911e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019121:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019124:	8d 50 01             	lea    edx,[eax+0x1]
c0019127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001912a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001912d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c0019130:	50                   	push   eax
c0019131:	8d 45 d3             	lea    eax,[ebp-0x2d]
c0019134:	50                   	push   eax
c0019135:	8d 45 d4             	lea    eax,[ebp-0x2c]
c0019138:	50                   	push   eax
c0019139:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001913c:	e8 63 90 ff ff       	call   c00121a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019141:	83 c4 10             	add    esp,0x10
c0019144:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019147:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001914a:	83 f0 01             	xor    eax,0x1
c001914d:	84 c0                	test   al,al
c001914f:	0f 84 45 01 00 00    	je     c001929a <opcodeFault(regs*, void*)+0x2fe>
c0019155:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c0019158:	3c 01                	cmp    al,0x1
c001915a:	0f 85 3a 01 00 00    	jne    c001929a <opcodeFault(regs*, void*)+0x2fe>
c0019160:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0019163:	83 f0 01             	xor    eax,0x1
c0019166:	84 c0                	test   al,al
c0019168:	0f 84 2c 01 00 00    	je     c001929a <opcodeFault(regs*, void*)+0x2fe>
c001916e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019171:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019174:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0019177:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001917e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0019181:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0019184:	89 c2                	mov    edx,eax
c0019186:	b8 00 00 00 00       	mov    eax,0x0
c001918b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001918e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0019191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019194:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019197:	ba 00 00 00 00       	mov    edx,0x0
c001919c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c001919f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c00191a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00191a8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00191ab:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00191b2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00191b5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00191b8:	89 c2                	mov    edx,eax
c00191ba:	b8 00 00 00 00       	mov    eax,0x0
c00191bf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00191c2:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c00191c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00191cb:	ba 00 00 00 00       	mov    edx,0x0
c00191d0:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c00191d3:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c00191d6:	fa                   	cli    
c00191d7:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c00191dc:	40                   	inc    eax
c00191dd:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c00191e2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00191e5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00191e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00191ea:	89 c1                	mov    ecx,eax
c00191ec:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c00191ef:	89 cb                	mov    ebx,ecx
c00191f1:	89 d0                	mov    eax,edx
c00191f3:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00191f6:	89 c6                	mov    esi,eax
c00191f8:	89 f0                	mov    eax,esi
c00191fa:	09 d8                	or     eax,ebx
c00191fc:	85 c0                	test   eax,eax
c00191fe:	75 21                	jne    c0019221 <opcodeFault(regs*, void*)+0x285>
c0019200:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0019203:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019206:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0019209:	89 01                	mov    DWORD PTR [ecx],eax
c001920b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001920e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019211:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019214:	83 c8 40             	or     eax,0x40
c0019217:	89 c2                	mov    edx,eax
c0019219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001921c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001921f:	eb 3e                	jmp    c001925f <opcodeFault(regs*, void*)+0x2c3>
c0019221:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019224:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019227:	8b 00                	mov    eax,DWORD PTR [eax]
c0019229:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001922c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c001922f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0019232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019235:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019238:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001923b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001923e:	89 d0                	mov    eax,edx
c0019240:	31 d2                	xor    edx,edx
c0019242:	89 c3                	mov    ebx,eax
c0019244:	89 d6                	mov    esi,edx
c0019246:	89 da                	mov    edx,ebx
c0019248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001924b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001924e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019251:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019254:	83 e0 bf             	and    eax,0xffffffbf
c0019257:	89 c2                	mov    edx,eax
c0019259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001925c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001925f:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0019264:	48                   	dec    eax
c0019265:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001926a:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c001926f:	85 c0                	test   eax,eax
c0019271:	75 01                	jne    c0019274 <opcodeFault(regs*, void*)+0x2d8>
c0019273:	fb                   	sti    
c0019274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019277:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001927a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001927d:	01 c2                	add    edx,eax
c001927f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019282:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019285:	83 ec 0c             	sub    esp,0xc
c0019288:	68 da 4a 02 c0       	push   0xc0024ada
c001928d:	e8 8f 34 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	e9 f5 00 00 00       	jmp    c001938f <opcodeFault(regs*, void*)+0x3f3>
c001929a:	83 ec 0c             	sub    esp,0xc
c001929d:	68 ed 4a 02 c0       	push   0xc0024aed
c00192a2:	e8 7a 34 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00192a7:	83 c4 10             	add    esp,0x10
c00192aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192ad:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00192b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00192b6:	c1 e0 04             	shl    eax,0x4
c00192b9:	01 d0                	add    eax,edx
c00192bb:	83 c0 03             	add    eax,0x3
c00192be:	8a 00                	mov    al,BYTE PTR [eax]
c00192c0:	0f b6 d8             	movzx  ebx,al
c00192c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192c6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00192c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00192cf:	c1 e0 04             	shl    eax,0x4
c00192d2:	01 d0                	add    eax,edx
c00192d4:	83 c0 02             	add    eax,0x2
c00192d7:	8a 00                	mov    al,BYTE PTR [eax]
c00192d9:	0f b6 c8             	movzx  ecx,al
c00192dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192df:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00192e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00192e8:	c1 e0 04             	shl    eax,0x4
c00192eb:	01 d0                	add    eax,edx
c00192ed:	40                   	inc    eax
c00192ee:	8a 00                	mov    al,BYTE PTR [eax]
c00192f0:	0f b6 d0             	movzx  edx,al
c00192f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192f6:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00192f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00192ff:	c1 e0 04             	shl    eax,0x4
c0019302:	01 f0                	add    eax,esi
c0019304:	8a 00                	mov    al,BYTE PTR [eax]
c0019306:	0f b6 c0             	movzx  eax,al
c0019309:	83 ec 0c             	sub    esp,0xc
c001930c:	53                   	push   ebx
c001930d:	51                   	push   ecx
c001930e:	52                   	push   edx
c001930f:	50                   	push   eax
c0019310:	68 c4 4b 02 c0       	push   0xc0024bc4
c0019315:	e8 07 34 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001931a:	83 c4 20             	add    esp,0x20
c001931d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019320:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019323:	83 c0 03             	add    eax,0x3
c0019326:	8a 00                	mov    al,BYTE PTR [eax]
c0019328:	0f b6 d8             	movzx  ebx,al
c001932b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001932e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019331:	83 c0 02             	add    eax,0x2
c0019334:	8a 00                	mov    al,BYTE PTR [eax]
c0019336:	0f b6 c8             	movzx  ecx,al
c0019339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001933c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001933f:	40                   	inc    eax
c0019340:	8a 00                	mov    al,BYTE PTR [eax]
c0019342:	0f b6 d0             	movzx  edx,al
c0019345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019348:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001934b:	8a 00                	mov    al,BYTE PTR [eax]
c001934d:	0f b6 c0             	movzx  eax,al
c0019350:	83 ec 0c             	sub    esp,0xc
c0019353:	53                   	push   ebx
c0019354:	51                   	push   ecx
c0019355:	52                   	push   edx
c0019356:	50                   	push   eax
c0019357:	68 ec 4b 02 c0       	push   0xc0024bec
c001935c:	e8 c0 33 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019361:	83 c4 20             	add    esp,0x20
c0019364:	83 ec 0c             	sub    esp,0xc
c0019367:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001936a:	e8 49 f4 ff ff       	call   c00187b8 <displayDebugInfo(regs*)>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	83 ec 0c             	sub    esp,0xc
c0019375:	68 fe 4a 02 c0       	push   0xc0024afe
c001937a:	e8 8d fa ff ff       	call   c0018e0c <displayProgramFault(char const*)>
c001937f:	83 c4 10             	add    esp,0x10
c0019382:	83 ec 0c             	sub    esp,0xc
c0019385:	6a 00                	push   0x0
c0019387:	e8 48 d7 ff ff       	call   c0016ad4 <Thr::terminateFromIRQ(int)>
c001938c:	83 c4 10             	add    esp,0x10
c001938f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0019392:	5b                   	pop    ebx
c0019393:	5e                   	pop    esi
c0019394:	5d                   	pop    ebp
c0019395:	c3                   	ret    

c0019396 <i386SaveCoprocessor(void*)>:
c0019396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001939a:	83 c0 3f             	add    eax,0x3f
c001939d:	83 e0 c0             	and    eax,0xffffffc0
c00193a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193a4:	ff 25 14 9a 02 c0    	jmp    DWORD PTR ds:0xc0029a14

c00193aa <i386LoadCoprocessor(void*)>:
c00193aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193ae:	83 c0 3f             	add    eax,0x3f
c00193b1:	83 e0 c0             	and    eax,0xffffffc0
c00193b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193b8:	ff 25 10 9a 02 c0    	jmp    DWORD PTR ds:0xc0029a10

c00193be <x87EmulHandler(regs*, void*)>:
c00193be:	53                   	push   ebx
c00193bf:	83 ec 14             	sub    esp,0x14
c00193c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00193c6:	68 0b 4b 02 c0       	push   0xc0024b0b
c00193cb:	e8 51 33 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00193d0:	83 c4 10             	add    esp,0x10
c00193d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193d8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00193dc:	74 10                	je     c00193ee <x87EmulHandler(regs*, void*)+0x30>
c00193de:	83 ec 0c             	sub    esp,0xc
c00193e1:	68 1b 4b 02 c0       	push   0xc0024b1b
c00193e6:	e8 a0 96 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00193eb:	83 c4 10             	add    esp,0x10
c00193ee:	0f 20 c0             	mov    eax,cr0
c00193f1:	a8 08                	test   al,0x8
c00193f3:	74 56                	je     c001944b <x87EmulHandler(regs*, void*)+0x8d>
c00193f5:	0f 06                	clts   
c00193f7:	a1 0c 9a 02 c0       	mov    eax,ds:0xc0029a0c
c00193fc:	85 c0                	test   eax,eax
c00193fe:	74 0e                	je     c001940e <x87EmulHandler(regs*, void*)+0x50>
c0019400:	83 ec 0c             	sub    esp,0xc
c0019403:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019406:	e8 8b ff ff ff       	call   c0019396 <i386SaveCoprocessor(void*)>
c001940b:	83 c4 10             	add    esp,0x10
c001940e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019414:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0019418:	75 12                	jne    c001942c <x87EmulHandler(regs*, void*)+0x6e>
c001941a:	83 ec 0c             	sub    esp,0xc
c001941d:	68 40 02 00 00       	push   0x240
c0019422:	e8 70 03 ff ff       	call   c0009797 <malloc>
c0019427:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001942a:	eb 10                	jmp    c001943c <x87EmulHandler(regs*, void*)+0x7e>
c001942c:	83 ec 0c             	sub    esp,0xc
c001942f:	a1 0c 9a 02 c0       	mov    eax,ds:0xc0029a0c
c0019434:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019437:	e8 6e ff ff ff       	call   c00193aa <i386LoadCoprocessor(void*)>
c001943c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019441:	83 c4 10             	add    esp,0x10
c0019444:	a3 0c 9a 02 c0       	mov    ds:0xc0029a0c,eax
c0019449:	eb 2e                	jmp    c0019479 <x87EmulHandler(regs*, void*)+0xbb>
c001944b:	83 ec 0c             	sub    esp,0xc
c001944e:	53                   	push   ebx
c001944f:	e8 ca e7 ff ff       	call   c0017c1e <Vm::x87Handler(regs*)>
c0019454:	83 c4 10             	add    esp,0x10
c0019457:	84 c0                	test   al,al
c0019459:	75 1e                	jne    c0019479 <x87EmulHandler(regs*, void*)+0xbb>
c001945b:	83 ec 0c             	sub    esp,0xc
c001945e:	68 2f 4b 02 c0       	push   0xc0024b2f
c0019463:	e8 b9 32 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019468:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019470:	83 c4 18             	add    esp,0x18
c0019473:	5b                   	pop    ebx
c0019474:	e9 5b d6 ff ff       	jmp    c0016ad4 <Thr::terminateFromIRQ(int)>
c0019479:	83 c4 08             	add    esp,0x8
c001947c:	5b                   	pop    ebx
c001947d:	c3                   	ret    

c001947e <Hal::initialiseCoprocessor()>:
c001947e:	83 ec 10             	sub    esp,0x10
c0019481:	c7 05 0c 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a0c,0x0
c001948b:	6a 00                	push   0x0
c001948d:	68 be 93 01 c0       	push   0xc00193be
c0019492:	6a 07                	push   0x7
c0019494:	e8 a3 4c ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019499:	e8 12 7b 00 00       	call   c0020fb0 <avxDetect>
c001949e:	83 c4 10             	add    esp,0x10
c00194a1:	85 c0                	test   eax,eax
c00194a3:	74 29                	je     c00194ce <Hal::initialiseCoprocessor()+0x50>
c00194a5:	83 ec 0c             	sub    esp,0xc
c00194a8:	68 45 4b 02 c0       	push   0xc0024b45
c00194ad:	e8 6f 32 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00194b2:	c7 05 14 9a 02 c0 da 0f 02 c0 	mov    DWORD PTR ds:0xc0029a14,0xc0020fda
c00194bc:	c7 05 10 9a 02 c0 eb 0f 02 c0 	mov    DWORD PTR ds:0xc0029a10,0xc0020feb
c00194c6:	83 c4 1c             	add    esp,0x1c
c00194c9:	e9 2e 7b 00 00       	jmp    c0020ffc <avxInit>
c00194ce:	e8 5d 7d 00 00       	call   c0021230 <absolutelyNoChanceInHell>
c00194d3:	85 c0                	test   eax,eax
c00194d5:	74 29                	je     c0019500 <Hal::initialiseCoprocessor()+0x82>
c00194d7:	83 ec 0c             	sub    esp,0xc
c00194da:	68 4b 4b 02 c0       	push   0xc0024b4b
c00194df:	e8 3d 32 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00194e4:	c7 05 14 9a 02 c0 48 12 02 c0 	mov    DWORD PTR ds:0xc0029a14,0xc0021248
c00194ee:	c7 05 10 9a 02 c0 50 12 02 c0 	mov    DWORD PTR ds:0xc0029a10,0xc0021250
c00194f8:	83 c4 1c             	add    esp,0x1c
c00194fb:	e9 58 7d 00 00       	jmp    c0021258 <sseInit>
c0019500:	e8 71 7d 00 00       	call   c0021276 <x87Detect>
c0019505:	85 c0                	test   eax,eax
c0019507:	74 29                	je     c0019532 <Hal::initialiseCoprocessor()+0xb4>
c0019509:	83 ec 0c             	sub    esp,0xc
c001950c:	68 51 4b 02 c0       	push   0xc0024b51
c0019511:	e8 0b 32 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019516:	c7 05 14 9a 02 c0 91 12 02 c0 	mov    DWORD PTR ds:0xc0029a14,0xc0021291
c0019520:	c7 05 10 9a 02 c0 98 12 02 c0 	mov    DWORD PTR ds:0xc0029a10,0xc0021298
c001952a:	83 c4 1c             	add    esp,0x1c
c001952d:	e9 6d 7d 00 00       	jmp    c002129f <x87Init>
c0019532:	83 ec 0c             	sub    esp,0xc
c0019535:	68 57 4b 02 c0       	push   0xc0024b57
c001953a:	e8 e2 31 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001953f:	c7 05 14 9a 02 c0 7d 87 01 c0 	mov    DWORD PTR ds:0xc0029a14,0xc001877d
c0019549:	c7 05 10 9a 02 c0 7d 87 01 c0 	mov    DWORD PTR ds:0xc0029a10,0xc001877d
c0019553:	0f 20 c0             	mov    eax,cr0
c0019556:	83 c8 04             	or     eax,0x4
c0019559:	0f 22 c0             	mov    cr0,eax
c001955c:	83 c4 1c             	add    esp,0x1c
c001955f:	c3                   	ret    

c0019560 <Hal::panic(char const*)>:
c0019560:	e9 26 95 ff ff       	jmp    c0012a8b <Krnl::panic(char const*)>

c0019565 <Hal::initialise()>:
c0019565:	53                   	push   ebx
c0019566:	83 ec 08             	sub    esp,0x8
c0019569:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001956e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019574:	b8 7e 87 01 c0       	mov    eax,0xc001877e
c0019579:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c0019580:	74 05                	je     c0019587 <Hal::initialise()+0x22>
c0019582:	b8 83 87 01 c0       	mov    eax,0xc0018783
c0019587:	a3 18 9a 02 c0       	mov    ds:0xc0029a18,eax
c001958c:	e8 d0 4d ff ff       	call   c000e361 <setupINTS()>
c0019591:	80 3d 20 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d20,0x0
c0019598:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001959d:	75 07                	jne    c00195a6 <Hal::initialise()+0x41>
c001959f:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c00195a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00195ac:	83 e0 01             	and    eax,0x1
c00195af:	a2 08 9a 02 c0       	mov    ds:0xc0029a08,al
c00195b4:	e8 13 03 00 00       	call   c00198cc <picOpen()>
c00195b9:	80 3d 08 9a 02 c0 00 	cmp    BYTE PTR ds:0xc0029a08,0x0
c00195c0:	74 0a                	je     c00195cc <Hal::initialise()+0x67>
c00195c2:	e8 55 02 00 00       	call   c001981c <picDisable()>
c00195c7:	e8 76 73 00 00       	call   c0020942 <apicOpen()>
c00195cc:	50                   	push   eax
c00195cd:	6a 00                	push   0x0
c00195cf:	68 48 8f 01 c0       	push   0xc0018f48
c00195d4:	6a 00                	push   0x0
c00195d6:	e8 61 4b ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195db:	83 c4 0c             	add    esp,0xc
c00195de:	6a 00                	push   0x0
c00195e0:	68 48 8f 01 c0       	push   0xc0018f48
c00195e5:	6a 01                	push   0x1
c00195e7:	e8 50 4b ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195ec:	83 c4 0c             	add    esp,0xc
c00195ef:	6a 00                	push   0x0
c00195f1:	68 86 87 01 c0       	push   0xc0018786
c00195f6:	6a 02                	push   0x2
c00195f8:	e8 3f 4b ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195fd:	83 c4 0c             	add    esp,0xc
c0019600:	6a 00                	push   0x0
c0019602:	68 48 8f 01 c0       	push   0xc0018f48
c0019607:	6a 03                	push   0x3
c0019609:	e8 2e 4b ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001960e:	83 c4 0c             	add    esp,0xc
c0019611:	6a 00                	push   0x0
c0019613:	68 48 8f 01 c0       	push   0xc0018f48
c0019618:	6a 04                	push   0x4
c001961a:	e8 1d 4b ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001961f:	83 c4 0c             	add    esp,0xc
c0019622:	6a 00                	push   0x0
c0019624:	68 48 8f 01 c0       	push   0xc0018f48
c0019629:	6a 05                	push   0x5
c001962b:	e8 0c 4b ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019630:	83 c4 0c             	add    esp,0xc
c0019633:	6a 00                	push   0x0
c0019635:	68 9c 8f 01 c0       	push   0xc0018f9c
c001963a:	6a 06                	push   0x6
c001963c:	e8 fb 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019641:	83 c4 0c             	add    esp,0xc
c0019644:	6a 00                	push   0x0
c0019646:	68 9f 87 01 c0       	push   0xc001879f
c001964b:	6a 08                	push   0x8
c001964d:	e8 ea 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019652:	83 c4 0c             	add    esp,0xc
c0019655:	6a 00                	push   0x0
c0019657:	68 48 8f 01 c0       	push   0xc0018f48
c001965c:	6a 09                	push   0x9
c001965e:	e8 d9 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019663:	83 c4 0c             	add    esp,0xc
c0019666:	6a 00                	push   0x0
c0019668:	68 48 8f 01 c0       	push   0xc0018f48
c001966d:	6a 0a                	push   0xa
c001966f:	e8 c8 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019674:	83 c4 0c             	add    esp,0xc
c0019677:	6a 00                	push   0x0
c0019679:	68 48 8f 01 c0       	push   0xc0018f48
c001967e:	6a 0b                	push   0xb
c0019680:	e8 b7 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019685:	83 c4 0c             	add    esp,0xc
c0019688:	6a 00                	push   0x0
c001968a:	68 48 8f 01 c0       	push   0xc0018f48
c001968f:	6a 0c                	push   0xc
c0019691:	e8 a6 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019696:	83 c4 0c             	add    esp,0xc
c0019699:	6a 00                	push   0x0
c001969b:	68 49 8e 01 c0       	push   0xc0018e49
c00196a0:	6a 0d                	push   0xd
c00196a2:	e8 95 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00196a7:	83 c4 0c             	add    esp,0xc
c00196aa:	6a 00                	push   0x0
c00196ac:	68 be 8e 01 c0       	push   0xc0018ebe
c00196b1:	6a 0e                	push   0xe
c00196b3:	e8 84 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00196b8:	83 c4 0c             	add    esp,0xc
c00196bb:	6a 00                	push   0x0
c00196bd:	68 48 8f 01 c0       	push   0xc0018f48
c00196c2:	6a 0f                	push   0xf
c00196c4:	e8 73 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00196c9:	83 c4 0c             	add    esp,0xc
c00196cc:	6a 00                	push   0x0
c00196ce:	68 48 8f 01 c0       	push   0xc0018f48
c00196d3:	6a 10                	push   0x10
c00196d5:	e8 62 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00196da:	83 c4 0c             	add    esp,0xc
c00196dd:	6a 00                	push   0x0
c00196df:	68 48 8f 01 c0       	push   0xc0018f48
c00196e4:	6a 11                	push   0x11
c00196e6:	e8 51 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00196eb:	83 c4 0c             	add    esp,0xc
c00196ee:	6a 00                	push   0x0
c00196f0:	68 48 8f 01 c0       	push   0xc0018f48
c00196f5:	6a 12                	push   0x12
c00196f7:	e8 40 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00196fc:	83 c4 0c             	add    esp,0xc
c00196ff:	6a 00                	push   0x0
c0019701:	68 48 8f 01 c0       	push   0xc0018f48
c0019706:	6a 13                	push   0x13
c0019708:	e8 2f 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001970d:	83 c4 0c             	add    esp,0xc
c0019710:	6a 00                	push   0x0
c0019712:	68 48 8f 01 c0       	push   0xc0018f48
c0019717:	6a 14                	push   0x14
c0019719:	e8 1e 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001971e:	83 c4 0c             	add    esp,0xc
c0019721:	6a 00                	push   0x0
c0019723:	68 48 8f 01 c0       	push   0xc0018f48
c0019728:	6a 1e                	push   0x1e
c001972a:	e8 0d 4a ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001972f:	83 c4 0c             	add    esp,0xc
c0019732:	6a 00                	push   0x0
c0019734:	68 35 47 01 c0       	push   0xc0014735
c0019739:	6a 60                	push   0x60
c001973b:	e8 fc 49 ff ff       	call   c000e13c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019740:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0019745:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001974f:	c7 04 24 60 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b60
c0019756:	e8 96 00 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001975b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019762:	e8 30 00 ff ff       	call   c0009797 <malloc>
c0019767:	89 04 24             	mov    DWORD PTR [esp],eax
c001976a:	89 c3                	mov    ebx,eax
c001976c:	e8 ed 09 00 00       	call   c001a15e <RTC::RTC()>
c0019771:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001977b:	5a                   	pop    edx
c001977c:	59                   	pop    ecx
c001977d:	53                   	push   ebx
c001977e:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019784:	e8 15 44 ff ff       	call   c000db9e <Device::addChild(Device*)>
c0019789:	8b 03                	mov    eax,DWORD PTR [ebx]
c001978b:	6a 00                	push   0x0
c001978d:	6a 00                	push   0x0
c001978f:	6a 00                	push   0x0
c0019791:	53                   	push   ebx
c0019792:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019795:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001979a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00197a0:	83 c4 28             	add    esp,0x28
c00197a3:	5b                   	pop    ebx
c00197a4:	c3                   	ret    

c00197a5 <Hal::makeBeep(int)>:
c00197a5:	53                   	push   ebx
c00197a6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00197aa:	85 db                	test   ebx,ebx
c00197ac:	75 07                	jne    c00197b5 <Hal::makeBeep(int)+0x10>
c00197ae:	e4 61                	in     al,0x61
c00197b0:	83 e0 fc             	and    eax,0xfffffffc
c00197b3:	eb 26                	jmp    c00197db <Hal::makeBeep(int)+0x36>
c00197b5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00197ba:	99                   	cdq    
c00197bb:	f7 fb                	idiv   ebx
c00197bd:	89 c1                	mov    ecx,eax
c00197bf:	b0 b6                	mov    al,0xb6
c00197c1:	e6 43                	out    0x43,al
c00197c3:	88 c8                	mov    al,cl
c00197c5:	e6 42                	out    0x42,al
c00197c7:	89 c8                	mov    eax,ecx
c00197c9:	c1 e8 08             	shr    eax,0x8
c00197cc:	e6 42                	out    0x42,al
c00197ce:	e4 61                	in     al,0x61
c00197d0:	88 c2                	mov    dl,al
c00197d2:	83 ca 03             	or     edx,0x3
c00197d5:	38 c2                	cmp    dl,al
c00197d7:	74 04                	je     c00197dd <Hal::makeBeep(int)+0x38>
c00197d9:	88 d0                	mov    al,dl
c00197db:	e6 61                	out    0x61,al
c00197dd:	5b                   	pop    ebx
c00197de:	c3                   	ret    

c00197df <Hal::getRand()>:
c00197df:	31 c0                	xor    eax,eax
c00197e1:	c3                   	ret    

c00197e2 <Hal::endOfInterrupt(int)>:
c00197e2:	80 3d 08 9a 02 c0 00 	cmp    BYTE PTR ds:0xc0029a08,0x0
c00197e9:	74 23                	je     c001980e <Hal::endOfInterrupt(int)+0x2c>
c00197eb:	83 ec 14             	sub    esp,0x14
c00197ee:	6a 1b                	push   0x1b
c00197f0:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c00197f6:	e8 53 f5 fe ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c00197fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019800:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001980a:	83 c4 1c             	add    esp,0x1c
c001980d:	c3                   	ret    
c001980e:	e9 3d 02 00 00       	jmp    c0019a50 <picEOI(int)>
c0019813:	90                   	nop

c0019814 <picIoWait()>:
c0019814:	eb 00                	jmp    c0019816 <picIoWait()+0x2>
c0019816:	eb 00                	jmp    c0019818 <picIoWait()+0x4>
c0019818:	90                   	nop
c0019819:	c3                   	ret    
c001981a:	66 90                	xchg   ax,ax

c001981c <picDisable()>:
c001981c:	83 ec 10             	sub    esp,0x10
c001981f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0019826:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001982b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001982f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019834:	ee                   	out    dx,al
c0019835:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001983c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0019841:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019845:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001984a:	ee                   	out    dx,al
c001984b:	90                   	nop
c001984c:	83 c4 10             	add    esp,0x10
c001984f:	c3                   	ret    

c0019850 <picGetIRQReg(int)>:
c0019850:	83 ec 10             	sub    esp,0x10
c0019853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019857:	0f b6 c0             	movzx  eax,al
c001985a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019861:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0019865:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019869:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001986e:	ee                   	out    dx,al
c001986f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019873:	0f b6 c0             	movzx  eax,al
c0019876:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001987d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019881:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019885:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001988a:	ee                   	out    dx,al
c001988b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0019892:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0019897:	89 c2                	mov    edx,eax
c0019899:	ec                   	in     al,dx
c001989a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001989e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00198a2:	0f b6 c0             	movzx  eax,al
c00198a5:	c1 e0 08             	shl    eax,0x8
c00198a8:	89 c1                	mov    ecx,eax
c00198aa:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00198b1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00198b6:	89 c2                	mov    edx,eax
c00198b8:	ec                   	in     al,dx
c00198b9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00198bd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00198c1:	0f b6 c0             	movzx  eax,al
c00198c4:	09 c8                	or     eax,ecx
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	c3                   	ret    
c00198ca:	66 90                	xchg   ax,ax

c00198cc <picOpen()>:
c00198cc:	83 ec 50             	sub    esp,0x50
c00198cf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00198d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00198db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00198df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198e3:	ee                   	out    dx,al
c00198e4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00198eb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00198f0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00198f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00198f8:	ee                   	out    dx,al
c00198f9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019901:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0019909:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019910:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019914:	89 c2                	mov    edx,eax
c0019916:	ec                   	in     al,dx
c0019917:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001991b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001991f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019923:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001992a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001992e:	89 c2                	mov    edx,eax
c0019930:	ec                   	in     al,dx
c0019931:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019935:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019939:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001993d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019944:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019949:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001994d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019951:	ee                   	out    dx,al
c0019952:	e8 bd fe ff ff       	call   c0019814 <picIoWait()>
c0019957:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001995e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019963:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019967:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001996b:	ee                   	out    dx,al
c001996c:	e8 a3 fe ff ff       	call   c0019814 <picIoWait()>
c0019971:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019975:	0f b6 c0             	movzx  eax,al
c0019978:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001997f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019983:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019987:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001998b:	ee                   	out    dx,al
c001998c:	e8 83 fe ff ff       	call   c0019814 <picIoWait()>
c0019991:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019995:	0f b6 c0             	movzx  eax,al
c0019998:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001999f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00199a3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00199a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00199ab:	ee                   	out    dx,al
c00199ac:	e8 63 fe ff ff       	call   c0019814 <picIoWait()>
c00199b1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00199b8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00199bd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00199c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199c5:	ee                   	out    dx,al
c00199c6:	e8 49 fe ff ff       	call   c0019814 <picIoWait()>
c00199cb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00199d2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00199d7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00199db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00199df:	ee                   	out    dx,al
c00199e0:	e8 2f fe ff ff       	call   c0019814 <picIoWait()>
c00199e5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00199ec:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00199f1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00199f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00199f9:	ee                   	out    dx,al
c00199fa:	e8 15 fe ff ff       	call   c0019814 <picIoWait()>
c00199ff:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0019a06:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0019a0b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019a0f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019a13:	ee                   	out    dx,al
c0019a14:	e8 fb fd ff ff       	call   c0019814 <picIoWait()>
c0019a19:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019a1e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019a25:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019a29:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019a2d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019a31:	ee                   	out    dx,al
c0019a32:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019a37:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0019a3e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019a42:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019a46:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019a4a:	ee                   	out    dx,al
c0019a4b:	90                   	nop
c0019a4c:	83 c4 50             	add    esp,0x50
c0019a4f:	c3                   	ret    

c0019a50 <picEOI(int)>:
c0019a50:	83 ec 10             	sub    esp,0x10
c0019a53:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019a58:	75 1e                	jne    c0019a78 <picEOI(int)+0x28>
c0019a5a:	6a 0b                	push   0xb
c0019a5c:	e8 ef fd ff ff       	call   c0019850 <picGetIRQReg(int)>
c0019a61:	83 c4 04             	add    esp,0x4
c0019a64:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019a69:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0019a6e:	25 80 00 00 00       	and    eax,0x80
c0019a73:	74 73                	je     c0019ae8 <picEOI(int)+0x98>
c0019a75:	8d 76 00             	lea    esi,[esi+0x0]
c0019a78:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019a7d:	75 31                	jne    c0019ab0 <picEOI(int)+0x60>
c0019a7f:	6a 0b                	push   0xb
c0019a81:	e8 ca fd ff ff       	call   c0019850 <picGetIRQReg(int)>
c0019a86:	83 c4 04             	add    esp,0x4
c0019a89:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0019a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a92:	66 85 c0             	test   ax,ax
c0019a95:	78 19                	js     c0019ab0 <picEOI(int)+0x60>
c0019a97:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0019a9e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0019aa3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019aa7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019aac:	ee                   	out    dx,al
c0019aad:	eb 3d                	jmp    c0019aec <picEOI(int)+0x9c>
c0019aaf:	90                   	nop
c0019ab0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019ab5:	7e 19                	jle    c0019ad0 <picEOI(int)+0x80>
c0019ab7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019abe:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0019ac3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019ac7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019acc:	ee                   	out    dx,al
c0019acd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019ad7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0019adc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019ae0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019ae5:	ee                   	out    dx,al
c0019ae6:	eb 04                	jmp    c0019aec <picEOI(int)+0x9c>
c0019ae8:	90                   	nop
c0019ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aec:	83 c4 10             	add    esp,0x10
c0019aef:	c3                   	ret    

c0019af0 <RTC::open(int, int, void*)>:
c0019af0:	31 c0                	xor    eax,eax
c0019af2:	c3                   	ret    
c0019af3:	90                   	nop

c0019af4 <RTC::close(int, int, void*)>:
c0019af4:	31 c0                	xor    eax,eax
c0019af6:	c3                   	ret    
c0019af7:	90                   	nop

c0019af8 <RTC::timeInSecondsUTC()>:
c0019af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019afc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019b02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019b08:	c3                   	ret    
c0019b09:	90                   	nop

c0019b0a <RTC::timeInDatetimeUTC()>:
c0019b0a:	53                   	push   ebx
c0019b0b:	83 ec 14             	sub    esp,0x14
c0019b0e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b16:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b18:	50                   	push   eax
c0019b19:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019b1c:	83 c4 0c             	add    esp,0xc
c0019b1f:	52                   	push   edx
c0019b20:	50                   	push   eax
c0019b21:	53                   	push   ebx
c0019b22:	e8 eb 3d ff ff       	call   c000d912 <secondsToDatetime(unsigned long long)>
c0019b27:	89 d8                	mov    eax,ebx
c0019b29:	83 c4 14             	add    esp,0x14
c0019b2c:	5b                   	pop    ebx
c0019b2d:	c2 04 00             	ret    0x4

c0019b30 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019b30:	56                   	push   esi
c0019b31:	53                   	push   ebx
c0019b32:	83 ec 14             	sub    esp,0x14
c0019b35:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019b39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b3b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0019b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019b42:	52                   	push   edx
c0019b43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b4b:	50                   	push   eax
c0019b4c:	e8 c1 3d ff ff       	call   c000d912 <secondsToDatetime(unsigned long long)>
c0019b51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b55:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019b59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019b5d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019b61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019b65:	89 f0                	mov    eax,esi
c0019b67:	83 c4 20             	add    esp,0x20
c0019b6a:	5b                   	pop    ebx
c0019b6b:	5e                   	pop    esi
c0019b6c:	ff e0                	jmp    eax

c0019b6e <RTC::~RTC()>:
c0019b6e:	83 ec 0c             	sub    esp,0xc
c0019b71:	ba e0 4c 02 c0       	mov    edx,0xc0024ce0
c0019b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b7a:	89 10                	mov    DWORD PTR [eax],edx
c0019b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b80:	83 ec 0c             	sub    esp,0xc
c0019b83:	50                   	push   eax
c0019b84:	e8 13 3b ff ff       	call   c000d69c <Clock::~Clock()>
c0019b89:	83 c4 10             	add    esp,0x10
c0019b8c:	90                   	nop
c0019b8d:	83 c4 0c             	add    esp,0xc
c0019b90:	c3                   	ret    
c0019b91:	90                   	nop

c0019b92 <RTC::~RTC()>:
c0019b92:	83 ec 0c             	sub    esp,0xc
c0019b95:	83 ec 0c             	sub    esp,0xc
c0019b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b9c:	e8 cd ff ff ff       	call   c0019b6e <RTC::~RTC()>
c0019ba1:	83 c4 10             	add    esp,0x10
c0019ba4:	83 ec 08             	sub    esp,0x8
c0019ba7:	68 60 01 00 00       	push   0x160
c0019bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bb0:	e8 8b 2a ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c0019bb5:	83 c4 10             	add    esp,0x10
c0019bb8:	83 c4 0c             	add    esp,0xc
c0019bbb:	c3                   	ret    

c0019bbc <RTC::get_update_in_progress_flag()>:
c0019bbc:	83 ec 14             	sub    esp,0x14
c0019bbf:	6a 0a                	push   0xa
c0019bc1:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019bc7:	e8 36 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019bcc:	83 c4 1c             	add    esp,0x1c
c0019bcf:	c0 e8 07             	shr    al,0x7
c0019bd2:	c3                   	ret    
c0019bd3:	90                   	nop

c0019bd4 <RTC::completeRTCRefresh()>:
c0019bd4:	55                   	push   ebp
c0019bd5:	57                   	push   edi
c0019bd6:	56                   	push   esi
c0019bd7:	53                   	push   ebx
c0019bd8:	83 ec 2c             	sub    esp,0x2c
c0019bdb:	8b 1d 2c 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a2c
c0019be1:	83 ec 0c             	sub    esp,0xc
c0019be4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019be8:	e8 cf ff ff ff       	call   c0019bbc <RTC::get_update_in_progress_flag()>
c0019bed:	83 c4 10             	add    esp,0x10
c0019bf0:	84 c0                	test   al,al
c0019bf2:	74 0e                	je     c0019c02 <RTC::completeRTCRefresh()+0x2e>
c0019bf4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019bfa:	3b 05 2c 8a 02 c0    	cmp    eax,DWORD PTR ds:0xc0028a2c
c0019c00:	73 df                	jae    c0019be1 <RTC::completeRTCRefresh()+0xd>
c0019c02:	55                   	push   ebp
c0019c03:	55                   	push   ebp
c0019c04:	6a 00                	push   0x0
c0019c06:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019c0c:	e8 f1 f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019c11:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019c15:	58                   	pop    eax
c0019c16:	5a                   	pop    edx
c0019c17:	6a 02                	push   0x2
c0019c19:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019c1f:	e8 de f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019c24:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019c28:	59                   	pop    ecx
c0019c29:	5b                   	pop    ebx
c0019c2a:	6a 04                	push   0x4
c0019c2c:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019c32:	e8 cb f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019c37:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0019c3b:	5e                   	pop    esi
c0019c3c:	5f                   	pop    edi
c0019c3d:	6a 07                	push   0x7
c0019c3f:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019c45:	e8 b8 f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019c4a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0019c4e:	5d                   	pop    ebp
c0019c4f:	58                   	pop    eax
c0019c50:	6a 08                	push   0x8
c0019c52:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019c58:	e8 a5 f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019c5d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0019c61:	58                   	pop    eax
c0019c62:	5a                   	pop    edx
c0019c63:	6a 09                	push   0x9
c0019c65:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019c6b:	e8 92 f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019c70:	83 c4 10             	add    esp,0x10
c0019c73:	0f b6 e8             	movzx  ebp,al
c0019c76:	8b 1d 2c 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a2c
c0019c7c:	83 ec 0c             	sub    esp,0xc
c0019c7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019c83:	e8 34 ff ff ff       	call   c0019bbc <RTC::get_update_in_progress_flag()>
c0019c88:	83 c4 10             	add    esp,0x10
c0019c8b:	84 c0                	test   al,al
c0019c8d:	74 0e                	je     c0019c9d <RTC::completeRTCRefresh()+0xc9>
c0019c8f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019c95:	3b 05 2c 8a 02 c0    	cmp    eax,DWORD PTR ds:0xc0028a2c
c0019c9b:	73 df                	jae    c0019c7c <RTC::completeRTCRefresh()+0xa8>
c0019c9d:	50                   	push   eax
c0019c9e:	50                   	push   eax
c0019c9f:	6a 00                	push   0x0
c0019ca1:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019ca7:	e8 56 f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019cac:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0019cb0:	58                   	pop    eax
c0019cb1:	5a                   	pop    edx
c0019cb2:	6a 02                	push   0x2
c0019cb4:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019cba:	e8 43 f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019cbf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019cc3:	59                   	pop    ecx
c0019cc4:	5b                   	pop    ebx
c0019cc5:	6a 04                	push   0x4
c0019cc7:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019ccd:	e8 30 f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019cd2:	5e                   	pop    esi
c0019cd3:	88 c3                	mov    bl,al
c0019cd5:	5f                   	pop    edi
c0019cd6:	6a 07                	push   0x7
c0019cd8:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019cde:	e8 1f f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019ce3:	89 c6                	mov    esi,eax
c0019ce5:	58                   	pop    eax
c0019ce6:	5a                   	pop    edx
c0019ce7:	6a 08                	push   0x8
c0019ce9:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019cef:	e8 0e f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019cf4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019cf8:	59                   	pop    ecx
c0019cf9:	5f                   	pop    edi
c0019cfa:	6a 09                	push   0x9
c0019cfc:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019d02:	e8 fb f0 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019d07:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019d0b:	0f b6 f8             	movzx  edi,al
c0019d0e:	83 c4 10             	add    esp,0x10
c0019d11:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0019d14:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019d18:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0019d1c:	89 f1                	mov    ecx,esi
c0019d1e:	0f 94 c0             	sete   al
c0019d21:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0019d25:	0f 94 c2             	sete   dl
c0019d28:	21 d0                	and    eax,edx
c0019d2a:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0019d2e:	0f 94 c2             	sete   dl
c0019d31:	21 c2                	and    edx,eax
c0019d33:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0019d37:	0f 94 c0             	sete   al
c0019d3a:	21 d0                	and    eax,edx
c0019d3c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019d40:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0019d44:	0f 94 c1             	sete   cl
c0019d47:	84 c8                	test   al,cl
c0019d49:	75 28                	jne    c0019d73 <RTC::completeRTCRefresh()+0x19f>
c0019d4b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019d4f:	89 fd                	mov    ebp,edi
c0019d51:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019d55:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0019d59:	89 f0                	mov    eax,esi
c0019d5b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0019d5f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019d63:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019d67:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019d6a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019d6e:	e9 03 ff ff ff       	jmp    c0019c76 <RTC::completeRTCRefresh()+0xa2>
c0019d73:	39 fd                	cmp    ebp,edi
c0019d75:	75 d4                	jne    c0019d4b <RTC::completeRTCRefresh()+0x177>
c0019d77:	55                   	push   ebp
c0019d78:	55                   	push   ebp
c0019d79:	6a 0b                	push   0xb
c0019d7b:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019d81:	e8 7c f0 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019d86:	83 c4 10             	add    esp,0x10
c0019d89:	89 c5                	mov    ebp,eax
c0019d8b:	a8 04                	test   al,0x4
c0019d8d:	75 75                	jne    c0019e04 <RTC::completeRTCRefresh()+0x230>
c0019d8f:	b1 0a                	mov    cl,0xa
c0019d91:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0019d94:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019d97:	83 e2 0f             	and    edx,0xf
c0019d9a:	c0 e8 04             	shr    al,0x4
c0019d9d:	c1 ef 04             	shr    edi,0x4
c0019da0:	f6 e1                	mul    cl
c0019da2:	6b ff 0a             	imul   edi,edi,0xa
c0019da5:	01 d0                	add    eax,edx
c0019da7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019dab:	88 04 24             	mov    BYTE PTR [esp],al
c0019dae:	83 e2 0f             	and    edx,0xf
c0019db1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019db5:	c0 e8 04             	shr    al,0x4
c0019db8:	f6 e1                	mul    cl
c0019dba:	01 d0                	add    eax,edx
c0019dbc:	88 da                	mov    dl,bl
c0019dbe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019dc2:	83 e2 0f             	and    edx,0xf
c0019dc5:	88 d8                	mov    al,bl
c0019dc7:	83 e3 80             	and    ebx,0xffffff80
c0019dca:	c0 e8 04             	shr    al,0x4
c0019dcd:	83 e0 07             	and    eax,0x7
c0019dd0:	f6 e1                	mul    cl
c0019dd2:	01 d0                	add    eax,edx
c0019dd4:	89 f2                	mov    edx,esi
c0019dd6:	09 c3                	or     ebx,eax
c0019dd8:	83 e2 0f             	and    edx,0xf
c0019ddb:	89 f0                	mov    eax,esi
c0019ddd:	c0 e8 04             	shr    al,0x4
c0019de0:	f6 e1                	mul    cl
c0019de2:	8d 34 02             	lea    esi,[edx+eax*1]
c0019de5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019de9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019ded:	83 e2 0f             	and    edx,0xf
c0019df0:	c0 e8 04             	shr    al,0x4
c0019df3:	f6 e1                	mul    cl
c0019df5:	01 d0                	add    eax,edx
c0019df7:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0019dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dff:	83 e0 0f             	and    eax,0xf
c0019e02:	01 c7                	add    edi,eax
c0019e04:	83 e5 02             	and    ebp,0x2
c0019e07:	75 14                	jne    c0019e1d <RTC::completeRTCRefresh()+0x249>
c0019e09:	84 db                	test   bl,bl
c0019e0b:	79 10                	jns    c0019e1d <RTC::completeRTCRefresh()+0x249>
c0019e0d:	83 e3 7f             	and    ebx,0x7f
c0019e10:	b9 18 00 00 00       	mov    ecx,0x18
c0019e15:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019e18:	99                   	cdq    
c0019e19:	f7 f9                	idiv   ecx
c0019e1b:	88 d3                	mov    bl,dl
c0019e1d:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0019e23:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0019e29:	77 06                	ja     c0019e31 <RTC::completeRTCRefresh()+0x25d>
c0019e2b:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0019e31:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c0019e35:	31 d2                	xor    edx,edx
c0019e37:	c1 e1 10             	shl    ecx,0x10
c0019e3a:	89 d7                	mov    edi,edx
c0019e3c:	c1 e5 10             	shl    ebp,0x10
c0019e3f:	31 c0                	xor    eax,eax
c0019e41:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0019e47:	09 cf                	or     edi,ecx
c0019e49:	89 f1                	mov    ecx,esi
c0019e4b:	89 fa                	mov    edx,edi
c0019e4d:	88 c8                	mov    al,cl
c0019e4f:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0019e53:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0019e57:	88 da                	mov    dl,bl
c0019e59:	0f b7 c8             	movzx  ecx,ax
c0019e5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019e60:	09 e9                	or     ecx,ebp
c0019e62:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019e65:	0f b6 db             	movzx  ebx,bl
c0019e68:	50                   	push   eax
c0019e69:	50                   	push   eax
c0019e6a:	53                   	push   ebx
c0019e6b:	68 11 4c 02 c0       	push   0xc0024c11
c0019e70:	e8 ac 28 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019e75:	5a                   	pop    edx
c0019e76:	59                   	pop    ecx
c0019e77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e7f:	52                   	push   edx
c0019e80:	50                   	push   eax
c0019e81:	e8 05 39 ff ff       	call   c000d78b <datetimeToSeconds(datetime_t)>
c0019e86:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0019e8a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019e90:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019e96:	83 c4 3c             	add    esp,0x3c
c0019e99:	5b                   	pop    ebx
c0019e9a:	5e                   	pop    esi
c0019e9b:	5f                   	pop    edi
c0019e9c:	5d                   	pop    ebp
c0019e9d:	c3                   	ret    

c0019e9e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019e9e:	55                   	push   ebp
c0019e9f:	57                   	push   edi
c0019ea0:	56                   	push   esi
c0019ea1:	53                   	push   ebx
c0019ea2:	83 ec 40             	sub    esp,0x40
c0019ea5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0019ea9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019ead:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019eb1:	0f b6 6c 24 10       	movzx  ebp,BYTE PTR [esp+0x10]
c0019eb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019eba:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019ebe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ec2:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0019ec6:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0019eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ece:	0f b6 fe             	movzx  edi,dh
c0019ed1:	0f b6 c4             	movzx  eax,ah
c0019ed4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0019ed8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019edc:	89 d7                	mov    edi,edx
c0019ede:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c0019ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee7:	c1 ef 10             	shr    edi,0x10
c0019eea:	c1 e8 10             	shr    eax,0x10
c0019eed:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0019ef1:	89 c6                	mov    esi,eax
c0019ef3:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0019ef8:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0019efc:	89 fa                	mov    edx,edi
c0019efe:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0019f03:	88 54 24 2c          	mov    BYTE PTR [esp+0x2c],dl
c0019f07:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0019f0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f0f:	0f b6 fb             	movzx  edi,bl
c0019f12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f16:	57                   	push   edi
c0019f17:	50                   	push   eax
c0019f18:	51                   	push   ecx
c0019f19:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0019f1d:	55                   	push   ebp
c0019f1e:	68 27 4c 02 c0       	push   0xc0024c27
c0019f23:	e8 f9 27 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019f28:	83 c4 1c             	add    esp,0x1c
c0019f2b:	6a 00                	push   0x0
c0019f2d:	6a 00                	push   0x0
c0019f2f:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019f35:	e8 e6 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f3a:	83 c4 0c             	add    esp,0xc
c0019f3d:	6a 00                	push   0x0
c0019f3f:	6a 02                	push   0x2
c0019f41:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019f47:	e8 d4 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f4c:	b9 64 00 00 00       	mov    ecx,0x64
c0019f51:	89 f0                	mov    eax,esi
c0019f53:	31 d2                	xor    edx,edx
c0019f55:	66 f7 f1             	div    cx
c0019f58:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c0019f5c:	89 d6                	mov    esi,edx
c0019f5e:	58                   	pop    eax
c0019f5f:	5a                   	pop    edx
c0019f60:	6a 0b                	push   0xb
c0019f62:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0019f68:	e8 95 ee fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019f6d:	c7 04 24 42 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c42
c0019f74:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0019f78:	e8 a4 27 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019f7d:	83 c4 0c             	add    esp,0xc
c0019f80:	0f b7 c6             	movzx  eax,si
c0019f83:	50                   	push   eax
c0019f84:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019f88:	51                   	push   ecx
c0019f89:	55                   	push   ebp
c0019f8a:	57                   	push   edi
c0019f8b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019f8f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019f93:	68 58 4c 02 c0       	push   0xc0024c58
c0019f98:	e8 84 27 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019f9d:	83 c4 20             	add    esp,0x20
c0019fa0:	f6 44 24 2b 04       	test   BYTE PTR [esp+0x2b],0x4
c0019fa5:	0f 85 88 00 00 00    	jne    c001a033 <RTC::setTimeInDatetimeUTC(datetime_t)+0x195>
c0019fab:	83 ec 0c             	sub    esp,0xc
c0019fae:	68 98 4c 02 c0       	push   0xc0024c98
c0019fb3:	e8 69 27 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0019fb8:	b2 0a                	mov    dl,0xa
c0019fba:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019fbf:	f6 f2                	div    dl
c0019fc1:	88 c1                	mov    cl,al
c0019fc3:	88 e0                	mov    al,ah
c0019fc5:	c1 e1 04             	shl    ecx,0x4
c0019fc8:	09 c1                	or     ecx,eax
c0019fca:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0019fcf:	88 4c 24 38          	mov    BYTE PTR [esp+0x38],cl
c0019fd3:	f6 f2                	div    dl
c0019fd5:	88 c1                	mov    cl,al
c0019fd7:	88 e0                	mov    al,ah
c0019fd9:	c1 e1 04             	shl    ecx,0x4
c0019fdc:	09 c1                	or     ecx,eax
c0019fde:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0019fe3:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c0019fe7:	f6 f2                	div    dl
c0019fe9:	88 c3                	mov    bl,al
c0019feb:	88 e0                	mov    al,ah
c0019fed:	c1 e3 04             	shl    ebx,0x4
c0019ff0:	09 c3                	or     ebx,eax
c0019ff2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0019ff7:	f6 f2                	div    dl
c0019ff9:	88 c1                	mov    cl,al
c0019ffb:	88 e0                	mov    al,ah
c0019ffd:	c1 e1 04             	shl    ecx,0x4
c001a000:	09 c1                	or     ecx,eax
c001a002:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c001a007:	88 4c 24 39          	mov    BYTE PTR [esp+0x39],cl
c001a00b:	f6 f2                	div    dl
c001a00d:	88 c1                	mov    cl,al
c001a00f:	88 e0                	mov    al,ah
c001a011:	c1 e1 04             	shl    ecx,0x4
c001a014:	09 c1                	or     ecx,eax
c001a016:	89 f0                	mov    eax,esi
c001a018:	88 4c 24 28          	mov    BYTE PTR [esp+0x28],cl
c001a01c:	0f b6 c0             	movzx  eax,al
c001a01f:	83 c4 10             	add    esp,0x10
c001a022:	f6 f2                	div    dl
c001a024:	89 c6                	mov    esi,eax
c001a026:	88 e0                	mov    al,ah
c001a028:	c1 e6 04             	shl    esi,0x4
c001a02b:	09 c6                	or     esi,eax
c001a02d:	89 f0                	mov    eax,esi
c001a02f:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c001a033:	f6 44 24 2b 02       	test   BYTE PTR [esp+0x2b],0x2
c001a038:	75 27                	jne    c001a061 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c001a03a:	83 ec 0c             	sub    esp,0xc
c001a03d:	68 a9 4c 02 c0       	push   0xc0024ca9
c001a042:	e8 da 26 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001a047:	83 c4 10             	add    esp,0x10
c001a04a:	80 fb 0b             	cmp    bl,0xb
c001a04d:	76 0c                	jbe    c001a05b <RTC::setTimeInDatetimeUTC(datetime_t)+0x1bd>
c001a04f:	80 eb 0c             	sub    bl,0xc
c001a052:	75 02                	jne    c001a056 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1b8>
c001a054:	b3 0c                	mov    bl,0xc
c001a056:	83 cb 80             	or     ebx,0xffffff80
c001a059:	eb 06                	jmp    c001a061 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c001a05b:	84 db                	test   bl,bl
c001a05d:	75 02                	jne    c001a061 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c001a05f:	b3 0c                	mov    bl,0xc
c001a061:	0f b6 54 24 29       	movzx  edx,BYTE PTR [esp+0x29]
c001a066:	0f b6 74 24 2a       	movzx  esi,BYTE PTR [esp+0x2a]
c001a06b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001a070:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a075:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c001a07a:	0f b6 db             	movzx  ebx,bl
c001a07d:	51                   	push   ecx
c001a07e:	56                   	push   esi
c001a07f:	55                   	push   ebp
c001a080:	52                   	push   edx
c001a081:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a085:	53                   	push   ebx
c001a086:	57                   	push   edi
c001a087:	50                   	push   eax
c001a088:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a08c:	68 58 4c 02 c0       	push   0xc0024c58
c001a091:	e8 8b 26 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001a096:	83 c4 1c             	add    esp,0x1c
c001a099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a09d:	50                   	push   eax
c001a09e:	6a 00                	push   0x0
c001a0a0:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001a0a6:	e8 75 ee fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a0ab:	83 c4 0c             	add    esp,0xc
c001a0ae:	57                   	push   edi
c001a0af:	6a 02                	push   0x2
c001a0b1:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001a0b7:	e8 64 ee fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a0bc:	83 c4 0c             	add    esp,0xc
c001a0bf:	53                   	push   ebx
c001a0c0:	6a 04                	push   0x4
c001a0c2:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001a0c8:	e8 53 ee fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a0cd:	83 c4 0c             	add    esp,0xc
c001a0d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0d4:	52                   	push   edx
c001a0d5:	6a 07                	push   0x7
c001a0d7:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001a0dd:	e8 3e ee fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a0e2:	83 c4 0c             	add    esp,0xc
c001a0e5:	55                   	push   ebp
c001a0e6:	6a 08                	push   0x8
c001a0e8:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001a0ee:	e8 2d ee fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a0f3:	83 c4 0c             	add    esp,0xc
c001a0f6:	56                   	push   esi
c001a0f7:	6a 09                	push   0x9
c001a0f9:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001a0ff:	e8 1c ee fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a104:	5b                   	pop    ebx
c001a105:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a109:	e8 c6 fa ff ff       	call   c0019bd4 <RTC::completeRTCRefresh()>
c001a10e:	83 c4 4c             	add    esp,0x4c
c001a111:	b0 01                	mov    al,0x1
c001a113:	5b                   	pop    ebx
c001a114:	5e                   	pop    esi
c001a115:	5f                   	pop    edi
c001a116:	5d                   	pop    ebp
c001a117:	c3                   	ret    

c001a118 <rtcIRQHandler(regs*, void*)>:
c001a118:	53                   	push   ebx
c001a119:	83 ec 10             	sub    esp,0x10
c001a11c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a120:	6a 0c                	push   0xc
c001a122:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001a128:	e8 d5 ec fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c001a12d:	83 c4 10             	add    esp,0x10
c001a130:	84 c0                	test   al,al
c001a132:	79 24                	jns    c001a158 <rtcIRQHandler(regs*, void*)+0x40>
c001a134:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001a13b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001a142:	66 ff 05 20 9a 02 c0 	inc    WORD PTR ds:0xc0029a20
c001a149:	75 0d                	jne    c001a158 <rtcIRQHandler(regs*, void*)+0x40>
c001a14b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a14f:	83 c4 08             	add    esp,0x8
c001a152:	5b                   	pop    ebx
c001a153:	e9 7c fa ff ff       	jmp    c0019bd4 <RTC::completeRTCRefresh()>
c001a158:	83 c4 08             	add    esp,0x8
c001a15b:	5b                   	pop    ebx
c001a15c:	c3                   	ret    
c001a15d:	90                   	nop

c001a15e <RTC::RTC()>:
c001a15e:	83 ec 1c             	sub    esp,0x1c
c001a161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a165:	83 ec 08             	sub    esp,0x8
c001a168:	68 c1 4c 02 c0       	push   0xc0024cc1
c001a16d:	50                   	push   eax
c001a16e:	e8 f3 34 ff ff       	call   c000d666 <Clock::Clock(char const*)>
c001a173:	83 c4 10             	add    esp,0x10
c001a176:	ba e0 4c 02 c0       	mov    edx,0xc0024ce0
c001a17b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a17f:	89 10                	mov    DWORD PTR [eax],edx
c001a181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a185:	83 ec 0c             	sub    esp,0xc
c001a188:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a18c:	6a 01                	push   0x1
c001a18e:	68 18 a1 01 c0       	push   0xc001a118
c001a193:	6a 08                	push   0x8
c001a195:	50                   	push   eax
c001a196:	e8 af 39 ff ff       	call   c000db4a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a19b:	83 c4 20             	add    esp,0x20
c001a19e:	89 c2                	mov    edx,eax
c001a1a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1a4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001a1aa:	fa                   	cli    
c001a1ab:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c001a1b0:	40                   	inc    eax
c001a1b1:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001a1b6:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001a1bb:	83 ec 08             	sub    esp,0x8
c001a1be:	6a 0b                	push   0xb
c001a1c0:	50                   	push   eax
c001a1c1:	e8 3c ec fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c001a1c6:	83 c4 10             	add    esp,0x10
c001a1c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a1cd:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001a1d2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001a1d6:	83 ca 10             	or     edx,0x10
c001a1d9:	0f b6 d2             	movzx  edx,dl
c001a1dc:	83 ec 04             	sub    esp,0x4
c001a1df:	52                   	push   edx
c001a1e0:	6a 0b                	push   0xb
c001a1e2:	50                   	push   eax
c001a1e3:	e8 38 ed fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a1e8:	83 c4 10             	add    esp,0x10
c001a1eb:	83 ec 0c             	sub    esp,0xc
c001a1ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a1f2:	e8 dd f9 ff ff       	call   c0019bd4 <RTC::completeRTCRefresh()>
c001a1f7:	83 c4 10             	add    esp,0x10
c001a1fa:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c001a1ff:	48                   	dec    eax
c001a200:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c001a205:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c001a20a:	85 c0                	test   eax,eax
c001a20c:	75 01                	jne    c001a20f <RTC::RTC()+0xb1>
c001a20e:	fb                   	sti    
c001a20f:	90                   	nop
c001a210:	83 c4 1c             	add    esp,0x1c
c001a213:	c3                   	ret    

c001a214 <Hal::consoleScroll(int, int)>:
c001a214:	83 ec 10             	sub    esp,0x10
c001a217:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001a21f:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a227:	90                   	nop
c001a228:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a22d:	0f 8f e1 00 00 00    	jg     c001a314 <Hal::consoleScroll(int, int)+0x100>
c001a233:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a23b:	90                   	nop
c001a23c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001a244:	0f 8f be 00 00 00    	jg     c001a308 <Hal::consoleScroll(int, int)+0xf4>
c001a24a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a24e:	89 d0                	mov    eax,edx
c001a250:	c1 e0 02             	shl    eax,0x2
c001a253:	01 d0                	add    eax,edx
c001a255:	c1 e0 05             	shl    eax,0x5
c001a258:	89 c2                	mov    edx,eax
c001a25a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a25e:	01 d0                	add    eax,edx
c001a260:	89 c2                	mov    edx,eax
c001a262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a266:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a269:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a26d:	89 d0                	mov    eax,edx
c001a26f:	c1 e0 02             	shl    eax,0x2
c001a272:	01 d0                	add    eax,edx
c001a274:	c1 e0 05             	shl    eax,0x5
c001a277:	89 c2                	mov    edx,eax
c001a279:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a27d:	01 d0                	add    eax,edx
c001a27f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001a285:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a289:	01 c2                	add    edx,eax
c001a28b:	8a 01                	mov    al,BYTE PTR [ecx]
c001a28d:	88 02                	mov    BYTE PTR [edx],al
c001a28f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a294:	75 66                	jne    c001a2fc <Hal::consoleScroll(int, int)+0xe8>
c001a296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a29a:	83 e0 01             	and    eax,0x1
c001a29d:	74 39                	je     c001a2d8 <Hal::consoleScroll(int, int)+0xc4>
c001a29f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2a3:	83 e0 0f             	and    eax,0xf
c001a2a6:	88 c2                	mov    dl,al
c001a2a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2ac:	c1 e0 04             	shl    eax,0x4
c001a2af:	88 d1                	mov    cl,dl
c001a2b1:	09 c1                	or     ecx,eax
c001a2b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a2b7:	89 d0                	mov    eax,edx
c001a2b9:	c1 e0 02             	shl    eax,0x2
c001a2bc:	01 d0                	add    eax,edx
c001a2be:	c1 e0 05             	shl    eax,0x5
c001a2c1:	89 c2                	mov    edx,eax
c001a2c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2c7:	01 d0                	add    eax,edx
c001a2c9:	89 c2                	mov    edx,eax
c001a2cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2cf:	01 d0                	add    eax,edx
c001a2d1:	88 ca                	mov    dl,cl
c001a2d3:	88 10                	mov    BYTE PTR [eax],dl
c001a2d5:	eb 25                	jmp    c001a2fc <Hal::consoleScroll(int, int)+0xe8>
c001a2d7:	90                   	nop
c001a2d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a2dc:	89 d0                	mov    eax,edx
c001a2de:	c1 e0 02             	shl    eax,0x2
c001a2e1:	01 d0                	add    eax,edx
c001a2e3:	c1 e0 05             	shl    eax,0x5
c001a2e6:	89 c2                	mov    edx,eax
c001a2e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2ec:	01 d0                	add    eax,edx
c001a2ee:	89 c2                	mov    edx,eax
c001a2f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2f4:	01 d0                	add    eax,edx
c001a2f6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001a2f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2fc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a300:	e9 37 ff ff ff       	jmp    c001a23c <Hal::consoleScroll(int, int)+0x28>
c001a305:	8d 76 00             	lea    esi,[esi+0x0]
c001a308:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a30c:	e9 17 ff ff ff       	jmp    c001a228 <Hal::consoleScroll(int, int)+0x14>
c001a311:	8d 76 00             	lea    esi,[esi+0x0]
c001a314:	90                   	nop
c001a315:	83 c4 10             	add    esp,0x10
c001a318:	c3                   	ret    
c001a319:	8d 76 00             	lea    esi,[esi+0x0]

c001a31c <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c001a31c:	83 ec 14             	sub    esp,0x14
c001a31f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a323:	88 04 24             	mov    BYTE PTR [esp],al
c001a326:	66 0f be 04 24       	movsx  ax,BYTE PTR [esp]
c001a32b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a32f:	89 d1                	mov    ecx,edx
c001a331:	83 e1 0f             	and    ecx,0xf
c001a334:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a338:	c1 e2 04             	shl    edx,0x4
c001a33b:	0f b6 d2             	movzx  edx,dl
c001a33e:	09 ca                	or     edx,ecx
c001a340:	c1 e2 08             	shl    edx,0x8
c001a343:	09 d0                	or     eax,edx
c001a345:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001a34a:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001a352:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a356:	89 d0                	mov    eax,edx
c001a358:	c1 e0 02             	shl    eax,0x2
c001a35b:	01 d0                	add    eax,edx
c001a35d:	c1 e0 04             	shl    eax,0x4
c001a360:	89 c2                	mov    edx,eax
c001a362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a366:	01 d0                	add    eax,edx
c001a368:	83 c0 50             	add    eax,0x50
c001a36b:	01 c0                	add    eax,eax
c001a36d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001a371:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a375:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001a37a:	66 89 02             	mov    WORD PTR [edx],ax
c001a37d:	90                   	nop
c001a37e:	83 c4 14             	add    esp,0x14
c001a381:	c3                   	ret    
c001a382:	66 90                	xchg   ax,ax

c001a384 <Hal::consoleCursorUpdate(int, int)>:
c001a384:	83 ec 20             	sub    esp,0x20
c001a387:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a38b:	40                   	inc    eax
c001a38c:	89 c2                	mov    edx,eax
c001a38e:	89 d0                	mov    eax,edx
c001a390:	c1 e0 02             	shl    eax,0x2
c001a393:	01 d0                	add    eax,edx
c001a395:	c1 e0 04             	shl    eax,0x4
c001a398:	89 c2                	mov    edx,eax
c001a39a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a39e:	01 d0                	add    eax,edx
c001a3a0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001a3a5:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001a3ac:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001a3b1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a3b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a3b9:	ee                   	out    dx,al
c001a3ba:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a3bf:	0f b6 c0             	movzx  eax,al
c001a3c2:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001a3c9:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a3cd:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a3d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3d5:	ee                   	out    dx,al
c001a3d6:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001a3dd:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001a3e2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a3e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a3ea:	ee                   	out    dx,al
c001a3eb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a3f0:	66 c1 e8 08          	shr    ax,0x8
c001a3f4:	0f b6 c0             	movzx  eax,al
c001a3f7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001a3fe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a402:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a406:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a40a:	ee                   	out    dx,al
c001a40b:	90                   	nop
c001a40c:	83 c4 20             	add    esp,0x20
c001a40f:	c3                   	ret    

c001a410 <FAT::getName()>:
c001a410:	b8 14 4d 02 c0       	mov    eax,0xc0024d14
c001a415:	c3                   	ret    
c001a416:	66 90                	xchg   ax,ax

c001a418 <FAT::tell(void*, unsigned long long*)>:
c001a418:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a41d:	75 09                	jne    c001a428 <FAT::tell(void*, unsigned long long*)+0x10>
c001a41f:	b8 04 00 00 00       	mov    eax,0x4
c001a424:	c3                   	ret    
c001a425:	8d 76 00             	lea    esi,[esi+0x0]
c001a428:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a42d:	75 09                	jne    c001a438 <FAT::tell(void*, unsigned long long*)+0x20>
c001a42f:	b8 04 00 00 00       	mov    eax,0x4
c001a434:	c3                   	ret    
c001a435:	8d 76 00             	lea    esi,[esi+0x0]
c001a438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a43c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a43f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a446:	89 01                	mov    DWORD PTR [ecx],eax
c001a448:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a44b:	b8 00 00 00 00       	mov    eax,0x0
c001a450:	c3                   	ret    
c001a451:	90                   	nop
c001a452:	66 90                	xchg   ax,ax

c001a454 <FAT::stat(void*, unsigned long long*)>:
c001a454:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a459:	75 09                	jne    c001a464 <FAT::stat(void*, unsigned long long*)+0x10>
c001a45b:	b8 04 00 00 00       	mov    eax,0x4
c001a460:	c3                   	ret    
c001a461:	8d 76 00             	lea    esi,[esi+0x0]
c001a464:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a469:	75 09                	jne    c001a474 <FAT::stat(void*, unsigned long long*)+0x20>
c001a46b:	b8 04 00 00 00       	mov    eax,0x4
c001a470:	c3                   	ret    
c001a471:	8d 76 00             	lea    esi,[esi+0x0]
c001a474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a478:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a47b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a47e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a482:	89 01                	mov    DWORD PTR [ecx],eax
c001a484:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a487:	b8 00 00 00 00       	mov    eax,0x0
c001a48c:	c3                   	ret    
c001a48d:	90                   	nop
c001a48e:	66 90                	xchg   ax,ax

c001a490 <FAT::~FAT()>:
c001a490:	83 ec 0c             	sub    esp,0xc
c001a493:	ba 60 4d 02 c0       	mov    edx,0xc0024d60
c001a498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a49c:	89 10                	mov    DWORD PTR [eax],edx
c001a49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a2:	83 ec 0c             	sub    esp,0xc
c001a4a5:	50                   	push   eax
c001a4a6:	e8 b1 25 ff ff       	call   c000ca5c <Filesystem::~Filesystem()>
c001a4ab:	83 c4 10             	add    esp,0x10
c001a4ae:	90                   	nop
c001a4af:	83 c4 0c             	add    esp,0xc
c001a4b2:	c3                   	ret    
c001a4b3:	90                   	nop

c001a4b4 <FAT::~FAT()>:
c001a4b4:	83 ec 0c             	sub    esp,0xc
c001a4b7:	83 ec 0c             	sub    esp,0xc
c001a4ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4be:	e8 cd ff ff ff       	call   c001a490 <FAT::~FAT()>
c001a4c3:	83 c4 10             	add    esp,0x10
c001a4c6:	83 ec 08             	sub    esp,0x8
c001a4c9:	6a 08                	push   0x8
c001a4cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4cf:	e8 6c 21 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c001a4d4:	83 c4 10             	add    esp,0x10
c001a4d7:	83 c4 0c             	add    esp,0xc
c001a4da:	c3                   	ret    
c001a4db:	90                   	nop

c001a4dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a4dc:	83 ec 1c             	sub    esp,0x1c
c001a4df:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a4e6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a4eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4ef:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001a4f6:	83 f8 ff             	cmp    eax,0xffffffff
c001a4f9:	75 35                	jne    c001a530 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a4fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a4ff:	88 c2                	mov    dl,al
c001a501:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a506:	01 d0                	add    eax,edx
c001a508:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a50c:	8b 15 40 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029a40
c001a512:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a516:	89 14 85 60 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65a0],edx
c001a51d:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a522:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a526:	89 14 85 e0 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6520],edx
c001a52d:	eb 19                	jmp    c001a548 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a52f:	90                   	nop
c001a530:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a534:	88 c2                	mov    dl,al
c001a536:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a53a:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001a541:	01 d0                	add    eax,edx
c001a543:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a547:	90                   	nop
c001a548:	83 ec 04             	sub    esp,0x4
c001a54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a54f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a553:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a557:	50                   	push   eax
c001a558:	e8 f9 c4 fe ff       	call   c0006a56 <f_getlabel>
c001a55d:	83 c4 10             	add    esp,0x10
c001a560:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a564:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a569:	75 09                	jne    c001a574 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a56b:	b8 00 00 00 00       	mov    eax,0x0
c001a570:	eb 0a                	jmp    c001a57c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a572:	66 90                	xchg   ax,ax
c001a574:	b8 01 00 00 00       	mov    eax,0x1
c001a579:	8d 76 00             	lea    esi,[esi+0x0]
c001a57c:	83 c4 1c             	add    esp,0x1c
c001a57f:	c3                   	ret    

c001a580 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a580:	57                   	push   edi
c001a581:	83 ec 58             	sub    esp,0x58
c001a584:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a58c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a590:	b9 0f 00 00 00       	mov    ecx,0xf
c001a595:	b8 00 00 00 00       	mov    eax,0x0
c001a59a:	fc                   	cld    
c001a59b:	89 d7                	mov    edi,edx
c001a59d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a59f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5a3:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001a5aa:	83 f8 ff             	cmp    eax,0xffffffff
c001a5ad:	75 35                	jne    c001a5e4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a5af:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a5b3:	88 c2                	mov    dl,al
c001a5b5:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a5ba:	01 d0                	add    eax,edx
c001a5bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5c0:	8b 15 40 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029a40
c001a5c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5ca:	89 14 85 60 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65a0],edx
c001a5d1:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a5d6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a5da:	89 14 85 e0 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6520],edx
c001a5e1:	eb 19                	jmp    c001a5fc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a5e3:	90                   	nop
c001a5e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a5e8:	88 c2                	mov    dl,al
c001a5ea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5ee:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001a5f5:	01 d0                	add    eax,edx
c001a5f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5fb:	90                   	nop
c001a5fc:	83 ec 08             	sub    esp,0x8
c001a5ff:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a603:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a607:	50                   	push   eax
c001a608:	e8 97 60 fe ff       	call   c00006a4 <strcat>
c001a60d:	83 c4 10             	add    esp,0x10
c001a610:	83 ec 0c             	sub    esp,0xc
c001a613:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a617:	50                   	push   eax
c001a618:	e8 27 c6 fe ff       	call   c0006c44 <f_setlabel>
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a624:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a629:	75 09                	jne    c001a634 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a62b:	b8 00 00 00 00       	mov    eax,0x0
c001a630:	eb 0a                	jmp    c001a63c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a632:	66 90                	xchg   ax,ax
c001a634:	b8 01 00 00 00       	mov    eax,0x1
c001a639:	8d 76 00             	lea    esi,[esi+0x0]
c001a63c:	83 c4 58             	add    esp,0x58
c001a63f:	5f                   	pop    edi
c001a640:	c3                   	ret    
c001a641:	90                   	nop
c001a642:	66 90                	xchg   ax,ax

c001a644 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a644:	83 ec 2c             	sub    esp,0x2c
c001a647:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a64f:	83 ec 08             	sub    esp,0x8
c001a652:	68 38 4d 02 c0       	push   0xc0024d38
c001a657:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a65b:	e8 90 5f fe ff       	call   c00005f0 <strcmp>
c001a660:	83 c4 10             	add    esp,0x10
c001a663:	85 c0                	test   eax,eax
c001a665:	0f 94 c0             	sete   al
c001a668:	84 c0                	test   al,al
c001a66a:	74 10                	je     c001a67c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a66c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a674:	e9 b3 00 00 00       	jmp    c001a72c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a679:	8d 76 00             	lea    esi,[esi+0x0]
c001a67c:	83 ec 08             	sub    esp,0x8
c001a67f:	68 2a 4d 02 c0       	push   0xc0024d2a
c001a684:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a688:	e8 63 5f fe ff       	call   c00005f0 <strcmp>
c001a68d:	83 c4 10             	add    esp,0x10
c001a690:	85 c0                	test   eax,eax
c001a692:	0f 94 c0             	sete   al
c001a695:	84 c0                	test   al,al
c001a697:	74 0f                	je     c001a6a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a699:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a6a1:	e9 86 00 00 00       	jmp    c001a72c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a6a6:	66 90                	xchg   ax,ax
c001a6a8:	83 ec 08             	sub    esp,0x8
c001a6ab:	68 30 4d 02 c0       	push   0xc0024d30
c001a6b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a6b4:	e8 37 5f fe ff       	call   c00005f0 <strcmp>
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	85 c0                	test   eax,eax
c001a6be:	0f 94 c0             	sete   al
c001a6c1:	84 c0                	test   al,al
c001a6c3:	74 0b                	je     c001a6d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a6c5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a6cd:	eb 5d                	jmp    c001a72c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a6cf:	90                   	nop
c001a6d0:	83 ec 08             	sub    esp,0x8
c001a6d3:	68 ec 24 02 c0       	push   0xc00224ec
c001a6d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a6dc:	e8 0f 5f fe ff       	call   c00005f0 <strcmp>
c001a6e1:	83 c4 10             	add    esp,0x10
c001a6e4:	85 c0                	test   eax,eax
c001a6e6:	0f 94 c0             	sete   al
c001a6e9:	84 c0                	test   al,al
c001a6eb:	74 0b                	je     c001a6f8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a6ed:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a6f5:	eb 35                	jmp    c001a72c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a6f7:	90                   	nop
c001a6f8:	83 ec 08             	sub    esp,0x8
c001a6fb:	68 36 4d 02 c0       	push   0xc0024d36
c001a700:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a704:	e8 e7 5e fe ff       	call   c00005f0 <strcmp>
c001a709:	83 c4 10             	add    esp,0x10
c001a70c:	85 c0                	test   eax,eax
c001a70e:	0f 94 c0             	sete   al
c001a711:	84 c0                	test   al,al
c001a713:	74 0b                	je     c001a720 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a715:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a71d:	eb 0d                	jmp    c001a72c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a71f:	90                   	nop
c001a720:	b8 08 00 00 00       	mov    eax,0x8
c001a725:	e9 ea 00 00 00       	jmp    c001a814 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a72a:	66 90                	xchg   ax,ax
c001a72c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a733:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a738:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a73c:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001a743:	83 f8 ff             	cmp    eax,0xffffffff
c001a746:	75 34                	jne    c001a77c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a748:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a74c:	88 c2                	mov    dl,al
c001a74e:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a753:	01 d0                	add    eax,edx
c001a755:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a759:	8b 15 40 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029a40
c001a75f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a763:	89 14 85 60 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65a0],edx
c001a76a:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a76f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a773:	89 14 85 e0 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6520],edx
c001a77a:	eb 18                	jmp    c001a794 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a77c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a780:	88 c2                	mov    dl,al
c001a782:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a786:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001a78d:	01 d0                	add    eax,edx
c001a78f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a793:	90                   	nop
c001a794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a798:	88 04 24             	mov    BYTE PTR [esp],al
c001a79b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a79f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a7a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a7ab:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a7b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a7b8:	83 ec 0c             	sub    esp,0xc
c001a7bb:	68 00 20 00 00       	push   0x2000
c001a7c0:	e8 d2 ef fe ff       	call   c0009797 <malloc>
c001a7c5:	83 c4 10             	add    esp,0x10
c001a7c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7cc:	68 00 20 00 00       	push   0x2000
c001a7d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a7d9:	50                   	push   eax
c001a7da:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a7de:	50                   	push   eax
c001a7df:	e8 e1 ca fe ff       	call   c00072c5 <f_mkfs>
c001a7e4:	83 c4 10             	add    esp,0x10
c001a7e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7f0:	75 0a                	jne    c001a7fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a7f2:	b8 00 00 00 00       	mov    eax,0x0
c001a7f7:	eb 1b                	jmp    c001a814 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a7f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7fc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a801:	75 09                	jne    c001a80c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a803:	b8 09 00 00 00       	mov    eax,0x9
c001a808:	eb 0a                	jmp    c001a814 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a80a:	66 90                	xchg   ax,ax
c001a80c:	b8 01 00 00 00       	mov    eax,0x1
c001a811:	8d 76 00             	lea    esi,[esi+0x0]
c001a814:	83 c4 2c             	add    esp,0x2c
c001a817:	c3                   	ret    

c001a818 <FAT::tryMount(LogicalDisk*, int)>:
c001a818:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a81e:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a823:	83 f8 14             	cmp    eax,0x14
c001a826:	75 18                	jne    c001a840 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a828:	83 ec 0c             	sub    esp,0xc
c001a82b:	68 3c 4d 02 c0       	push   0xc0024d3c
c001a830:	e8 56 82 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001a835:	83 c4 10             	add    esp,0x10
c001a838:	b0 00                	mov    al,0x0
c001a83a:	e9 e9 01 00 00       	jmp    c001aa28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a83f:	90                   	nop
c001a840:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a847:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a84d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a853:	3d 00 02 00 00       	cmp    eax,0x200
c001a858:	74 0a                	je     c001a864 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a85a:	b0 00                	mov    al,0x0
c001a85c:	e9 c7 01 00 00       	jmp    c001aa28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a861:	8d 76 00             	lea    esi,[esi+0x0]
c001a864:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a86c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a873:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001a87a:	83 f8 ff             	cmp    eax,0xffffffff
c001a87d:	74 09                	je     c001a888 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a87f:	b0 01                	mov    al,0x1
c001a881:	e9 a2 01 00 00       	jmp    c001aa28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a886:	66 90                	xchg   ax,ax
c001a888:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a892:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a89a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a8a1:	88 c2                	mov    dl,al
c001a8a3:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a8a8:	01 d0                	add    eax,edx
c001a8aa:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a8b1:	8b 15 40 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029a40
c001a8b7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a8be:	89 14 85 60 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65a0],edx
c001a8c5:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001a8ca:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a8d1:	89 14 85 e0 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6520],edx
c001a8d8:	83 ec 0c             	sub    esp,0xc
c001a8db:	68 54 02 00 00       	push   0x254
c001a8e0:	e8 b2 ee fe ff       	call   c0009797 <malloc>
c001a8e5:	83 c4 10             	add    esp,0x10
c001a8e8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a8ef:	83 ec 04             	sub    esp,0x4
c001a8f2:	6a 00                	push   0x0
c001a8f4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a8fb:	50                   	push   eax
c001a8fc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a903:	e8 45 a3 fe ff       	call   c0004c4d <f_mount>
c001a908:	83 c4 10             	add    esp,0x10
c001a90b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a912:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a91a:	74 1c                	je     c001a938 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a91c:	83 ec 0c             	sub    esp,0xc
c001a91f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a926:	e8 8c ee fe ff       	call   c00097b7 <rfree>
c001a92b:	83 c4 10             	add    esp,0x10
c001a92e:	b0 00                	mov    al,0x0
c001a930:	e9 f3 00 00 00       	jmp    c001aa28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a935:	8d 76 00             	lea    esi,[esi+0x0]
c001a938:	83 ec 04             	sub    esp,0x4
c001a93b:	68 00 01 00 00       	push   0x100
c001a940:	6a 00                	push   0x0
c001a942:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a949:	50                   	push   eax
c001a94a:	e8 59 5b fe ff       	call   c00004a8 <memset>
c001a94f:	83 c4 10             	add    esp,0x10
c001a952:	83 ec 08             	sub    esp,0x8
c001a955:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a95c:	50                   	push   eax
c001a95d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a964:	50                   	push   eax
c001a965:	e8 3a 5d fe ff       	call   c00006a4 <strcat>
c001a96a:	83 c4 10             	add    esp,0x10
c001a96d:	83 ec 08             	sub    esp,0x8
c001a970:	68 4a 4d 02 c0       	push   0xc0024d4a
c001a975:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a97c:	50                   	push   eax
c001a97d:	e8 22 5d fe ff       	call   c00006a4 <strcat>
c001a982:	83 c4 10             	add    esp,0x10
c001a985:	83 ec 04             	sub    esp,0x4
c001a988:	6a 01                	push   0x1
c001a98a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a991:	50                   	push   eax
c001a992:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a996:	50                   	push   eax
c001a997:	e8 13 a3 fe ff       	call   c0004caf <f_open>
c001a99c:	83 c4 10             	add    esp,0x10
c001a99f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9a6:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a9ad:	85 c0                	test   eax,eax
c001a9af:	74 0b                	je     c001a9bc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001a9b1:	78 31                	js     c001a9e4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a9b3:	83 e8 04             	sub    eax,0x4
c001a9b6:	83 f8 01             	cmp    eax,0x1
c001a9b9:	77 29                	ja     c001a9e4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a9bb:	90                   	nop
c001a9bc:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a9c4:	83 ec 0c             	sub    esp,0xc
c001a9c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a9cb:	50                   	push   eax
c001a9cc:	e8 30 ae fe ff       	call   c0005801 <f_close>
c001a9d1:	83 c4 10             	add    esp,0x10
c001a9d4:	90                   	nop
c001a9d5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a9dd:	74 41                	je     c001aa20 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001a9df:	eb 33                	jmp    c001aa14 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001a9e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9e4:	83 ec 0c             	sub    esp,0xc
c001a9e7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9ee:	e8 c4 ed fe ff       	call   c00097b7 <rfree>
c001a9f3:	83 c4 10             	add    esp,0x10
c001a9f6:	83 ec 04             	sub    esp,0x4
c001a9f9:	6a 00                	push   0x0
c001a9fb:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa02:	50                   	push   eax
c001aa03:	6a 00                	push   0x0
c001aa05:	e8 43 a2 fe ff       	call   c0004c4d <f_mount>
c001aa0a:	83 c4 10             	add    esp,0x10
c001aa0d:	b0 00                	mov    al,0x0
c001aa0f:	eb 17                	jmp    c001aa28 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aa11:	8d 76 00             	lea    esi,[esi+0x0]
c001aa14:	a1 40 9a 02 c0       	mov    eax,ds:0xc0029a40
c001aa19:	40                   	inc    eax
c001aa1a:	a3 40 9a 02 c0       	mov    ds:0xc0029a40,eax
c001aa1f:	90                   	nop
c001aa20:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aa27:	90                   	nop
c001aa28:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aa2e:	c3                   	ret    
c001aa2f:	90                   	nop

c001aa30 <FAT::allocateSwapfile(char const*, int)>:
c001aa30:	55                   	push   ebp
c001aa31:	57                   	push   edi
c001aa32:	56                   	push   esi
c001aa33:	53                   	push   ebx
c001aa34:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aa3a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001aa45:	83 ec 0c             	sub    esp,0xc
c001aa48:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001aa4f:	e8 43 ed fe ff       	call   c0009797 <malloc>
c001aa54:	83 c4 10             	add    esp,0x10
c001aa57:	89 c7                	mov    edi,eax
c001aa59:	a1 50 99 02 c0       	mov    eax,ds:0xc0029950
c001aa5e:	83 ec 04             	sub    esp,0x4
c001aa61:	50                   	push   eax
c001aa62:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001aa69:	57                   	push   edi
c001aa6a:	e8 1d 22 ff ff       	call   c000cc8c <File::File(char const*, Process*)>
c001aa6f:	83 c4 10             	add    esp,0x10
c001aa72:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001aa79:	83 ec 04             	sub    esp,0x4
c001aa7c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa80:	50                   	push   eax
c001aa81:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa85:	50                   	push   eax
c001aa86:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa8d:	e8 80 25 ff ff       	call   c000d012 <File::stat(unsigned long long*, bool*)>
c001aa92:	83 c4 10             	add    esp,0x10
c001aa95:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001aa9c:	c1 e0 14             	shl    eax,0x14
c001aa9f:	89 c7                	mov    edi,eax
c001aaa1:	89 c5                	mov    ebp,eax
c001aaa3:	c1 fd 1f             	sar    ebp,0x1f
c001aaa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aaae:	89 f9                	mov    ecx,edi
c001aab0:	31 c1                	xor    ecx,eax
c001aab2:	89 cb                	mov    ebx,ecx
c001aab4:	89 e9                	mov    ecx,ebp
c001aab6:	31 d1                	xor    ecx,edx
c001aab8:	89 ce                	mov    esi,ecx
c001aaba:	89 f0                	mov    eax,esi
c001aabc:	09 d8                	or     eax,ebx
c001aabe:	0f 84 98 00 00 00    	je     c001ab5c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001aac4:	83 ec 0c             	sub    esp,0xc
c001aac7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aace:	e8 0b 24 ff ff       	call   c000cede <File::unlink()>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	83 ec 08             	sub    esp,0x8
c001aad9:	6a 12                	push   0x12
c001aadb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aae2:	e8 7f 22 ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c001aae7:	83 c4 10             	add    esp,0x10
c001aaea:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aaf1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aaf7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aafe:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab05:	c1 e0 14             	shl    eax,0x14
c001ab08:	99                   	cdq    
c001ab09:	6a 01                	push   0x1
c001ab0b:	52                   	push   edx
c001ab0c:	50                   	push   eax
c001ab0d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ab14:	e8 98 c3 fe ff       	call   c0006eb1 <f_expand>
c001ab19:	83 c4 10             	add    esp,0x10
c001ab1c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab25:	83 c0 10             	add    eax,0x10
c001ab28:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab2a:	83 ec 0c             	sub    esp,0xc
c001ab2d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ab31:	52                   	push   edx
c001ab32:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ab36:	52                   	push   edx
c001ab37:	6a 00                	push   0x0
c001ab39:	68 00 04 00 00       	push   0x400
c001ab3e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ab45:	ff d0                	call   eax
c001ab47:	83 c4 20             	add    esp,0x20
c001ab4a:	83 ec 0c             	sub    esp,0xc
c001ab4d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab54:	e8 6b 22 ff ff       	call   c000cdc4 <File::close()>
c001ab59:	83 c4 10             	add    esp,0x10
c001ab5c:	83 ec 08             	sub    esp,0x8
c001ab5f:	6a 01                	push   0x1
c001ab61:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab68:	e8 f9 21 ff ff       	call   c000cd66 <File::open(FileOpenMode)>
c001ab6d:	83 c4 10             	add    esp,0x10
c001ab70:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab77:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab79:	83 c0 0c             	add    eax,0xc
c001ab7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab7e:	83 ec 0c             	sub    esp,0xc
c001ab81:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ab85:	52                   	push   edx
c001ab86:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ab8a:	52                   	push   edx
c001ab8b:	6a 00                	push   0x0
c001ab8d:	6a 04                	push   0x4
c001ab8f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ab96:	ff d0                	call   eax
c001ab98:	83 c4 20             	add    esp,0x20
c001ab9b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aba2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aba8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001abaf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001abb6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001abb9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001abbc:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001abc3:	83 ec 0c             	sub    esp,0xc
c001abc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abcd:	e8 f2 21 ff ff       	call   c000cdc4 <File::close()>
c001abd2:	83 c4 10             	add    esp,0x10
c001abd5:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001abdc:	ba 00 00 00 00       	mov    edx,0x0
c001abe1:	81 c4 3c 04 00 00    	add    esp,0x43c
c001abe7:	5b                   	pop    ebx
c001abe8:	5e                   	pop    esi
c001abe9:	5f                   	pop    edi
c001abea:	5d                   	pop    ebp
c001abeb:	c3                   	ret    

c001abec <FAT::readDir(void*, unsigned long, void*, int*)>:
c001abec:	57                   	push   edi
c001abed:	56                   	push   esi
c001abee:	53                   	push   ebx
c001abef:	81 ec 50 02 00 00    	sub    esp,0x250
c001abf5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001abfd:	74 0d                	je     c001ac0c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001abff:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ac07:	75 0f                	jne    c001ac18 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ac09:	8d 76 00             	lea    esi,[esi+0x0]
c001ac0c:	b8 04 00 00 00       	mov    eax,0x4
c001ac11:	e9 36 01 00 00       	jmp    c001ad4c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ac16:	66 90                	xchg   ax,ax
c001ac18:	83 ec 08             	sub    esp,0x8
c001ac1b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ac22:	50                   	push   eax
c001ac23:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ac2a:	e8 dc b1 fe ff       	call   c0005e0b <f_readdir>
c001ac2f:	83 c4 10             	add    esp,0x10
c001ac32:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ac39:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ac4a:	83 c0 1a             	add    eax,0x1a
c001ac4d:	50                   	push   eax
c001ac4e:	e8 71 58 fe ff       	call   c00004c4 <strlen>
c001ac53:	83 c4 10             	add    esp,0x10
c001ac56:	ba 00 00 00 00       	mov    edx,0x0
c001ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac63:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ac6a:	0f b6 c0             	movzx  eax,al
c001ac6d:	83 e0 10             	and    eax,0x10
c001ac70:	74 0a                	je     c001ac7c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ac72:	b8 02 00 00 00       	mov    eax,0x2
c001ac77:	eb 0b                	jmp    c001ac84 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ac79:	8d 76 00             	lea    esi,[esi+0x0]
c001ac7c:	b8 01 00 00 00       	mov    eax,0x1
c001ac81:	8d 76 00             	lea    esi,[esi+0x0]
c001ac84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac88:	83 ec 08             	sub    esp,0x8
c001ac8b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ac92:	83 c0 1a             	add    eax,0x1a
c001ac95:	50                   	push   eax
c001ac96:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac9a:	83 c0 10             	add    eax,0x10
c001ac9d:	50                   	push   eax
c001ac9e:	e8 c1 58 fe ff       	call   c0000564 <strcpy>
c001aca3:	83 c4 10             	add    esp,0x10
c001aca6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001acad:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001acb4:	8d 44 24 04          	lea    eax,[esp+0x4]
c001acb8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001acbf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001acc6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001accd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001acd4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001acdb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ace2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ace9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001acf0:	89 c6                	mov    esi,eax
c001acf2:	89 d7                	mov    edi,edx
c001acf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acf6:	89 c8                	mov    eax,ecx
c001acf8:	89 fa                	mov    edx,edi
c001acfa:	89 f3                	mov    ebx,esi
c001acfc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ad03:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ad0a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ad11:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ad18:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ad1e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ad25:	84 c0                	test   al,al
c001ad27:	75 07                	jne    c001ad30 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ad29:	b8 07 00 00 00       	mov    eax,0x7
c001ad2e:	eb 1c                	jmp    c001ad4c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ad30:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ad37:	85 c0                	test   eax,eax
c001ad39:	75 09                	jne    c001ad44 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ad3b:	b8 00 00 00 00       	mov    eax,0x0
c001ad40:	eb 0a                	jmp    c001ad4c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ad42:	66 90                	xchg   ax,ax
c001ad44:	b8 01 00 00 00       	mov    eax,0x1
c001ad49:	8d 76 00             	lea    esi,[esi+0x0]
c001ad4c:	81 c4 50 02 00 00    	add    esp,0x250
c001ad52:	5b                   	pop    ebx
c001ad53:	5e                   	pop    esi
c001ad54:	5f                   	pop    edi
c001ad55:	c3                   	ret    
c001ad56:	66 90                	xchg   ax,ax

c001ad58 <FAT::read(void*, unsigned long, void*, int*)>:
c001ad58:	83 ec 1c             	sub    esp,0x1c
c001ad5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad60:	74 0a                	je     c001ad6c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ad62:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ad67:	75 0b                	jne    c001ad74 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ad69:	8d 76 00             	lea    esi,[esi+0x0]
c001ad6c:	b8 04 00 00 00       	mov    eax,0x4
c001ad71:	eb 41                	jmp    c001adb4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ad73:	90                   	nop
c001ad74:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad78:	50                   	push   eax
c001ad79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad85:	e8 61 a3 fe ff       	call   c00050eb <f_read>
c001ad8a:	83 c4 10             	add    esp,0x10
c001ad8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad95:	89 c2                	mov    edx,eax
c001ad97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad9b:	89 10                	mov    DWORD PTR [eax],edx
c001ad9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ada1:	85 c0                	test   eax,eax
c001ada3:	75 07                	jne    c001adac <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ada5:	b8 00 00 00 00       	mov    eax,0x0
c001adaa:	eb 08                	jmp    c001adb4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001adac:	b8 01 00 00 00       	mov    eax,0x1
c001adb1:	8d 76 00             	lea    esi,[esi+0x0]
c001adb4:	83 c4 1c             	add    esp,0x1c
c001adb7:	c3                   	ret    

c001adb8 <FAT::write(void*, unsigned long, void*, int*)>:
c001adb8:	83 ec 1c             	sub    esp,0x1c
c001adbb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001adc0:	74 0a                	je     c001adcc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001adc2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001adc7:	75 0b                	jne    c001add4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001adc9:	8d 76 00             	lea    esi,[esi+0x0]
c001adcc:	b8 04 00 00 00       	mov    eax,0x4
c001add1:	eb 41                	jmp    c001ae14 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001add3:	90                   	nop
c001add4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001add8:	50                   	push   eax
c001add9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001addd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ade1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ade5:	e8 81 a5 fe ff       	call   c000536b <f_write>
c001adea:	83 c4 10             	add    esp,0x10
c001aded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adf5:	89 c2                	mov    edx,eax
c001adf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adfb:	89 10                	mov    DWORD PTR [eax],edx
c001adfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae01:	85 c0                	test   eax,eax
c001ae03:	75 07                	jne    c001ae0c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001ae05:	b8 00 00 00 00       	mov    eax,0x0
c001ae0a:	eb 08                	jmp    c001ae14 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ae0c:	b8 01 00 00 00       	mov    eax,0x1
c001ae11:	8d 76 00             	lea    esi,[esi+0x0]
c001ae14:	83 c4 1c             	add    esp,0x1c
c001ae17:	c3                   	ret    

c001ae18 <FAT::close(void*)>:
c001ae18:	83 ec 1c             	sub    esp,0x1c
c001ae1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae20:	75 0a                	jne    c001ae2c <FAT::close(void*)+0x14>
c001ae22:	b8 04 00 00 00       	mov    eax,0x4
c001ae27:	eb 3f                	jmp    c001ae68 <FAT::close(void*)+0x50>
c001ae29:	8d 76 00             	lea    esi,[esi+0x0]
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae33:	e8 c9 a9 fe ff       	call   c0005801 <f_close>
c001ae38:	83 c4 10             	add    esp,0x10
c001ae3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae3f:	83 ec 0c             	sub    esp,0xc
c001ae42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae46:	e8 5c e9 fe ff       	call   c00097a7 <free>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae52:	85 c0                	test   eax,eax
c001ae54:	75 0a                	jne    c001ae60 <FAT::close(void*)+0x48>
c001ae56:	b8 00 00 00 00       	mov    eax,0x0
c001ae5b:	eb 0b                	jmp    c001ae68 <FAT::close(void*)+0x50>
c001ae5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae60:	b8 01 00 00 00       	mov    eax,0x1
c001ae65:	8d 76 00             	lea    esi,[esi+0x0]
c001ae68:	83 c4 1c             	add    esp,0x1c
c001ae6b:	c3                   	ret    

c001ae6c <FAT::closeDir(void*)>:
c001ae6c:	83 ec 1c             	sub    esp,0x1c
c001ae6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae74:	75 0a                	jne    c001ae80 <FAT::closeDir(void*)+0x14>
c001ae76:	b8 04 00 00 00       	mov    eax,0x4
c001ae7b:	eb 3f                	jmp    c001aebc <FAT::closeDir(void*)+0x50>
c001ae7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae80:	83 ec 0c             	sub    esp,0xc
c001ae83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae87:	e8 5d af fe ff       	call   c0005de9 <f_closedir>
c001ae8c:	83 c4 10             	add    esp,0x10
c001ae8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae93:	83 ec 0c             	sub    esp,0xc
c001ae96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae9a:	e8 08 e9 fe ff       	call   c00097a7 <free>
c001ae9f:	83 c4 10             	add    esp,0x10
c001aea2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aea6:	85 c0                	test   eax,eax
c001aea8:	75 0a                	jne    c001aeb4 <FAT::closeDir(void*)+0x48>
c001aeaa:	b8 00 00 00 00       	mov    eax,0x0
c001aeaf:	eb 0b                	jmp    c001aebc <FAT::closeDir(void*)+0x50>
c001aeb1:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb4:	b8 01 00 00 00       	mov    eax,0x1
c001aeb9:	8d 76 00             	lea    esi,[esi+0x0]
c001aebc:	83 c4 1c             	add    esp,0x1c
c001aebf:	c3                   	ret    

c001aec0 <FAT::seek(void*, unsigned long long)>:
c001aec0:	83 ec 2c             	sub    esp,0x2c
c001aec3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aec7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aecb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aecf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aed3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001aed8:	75 0a                	jne    c001aee4 <FAT::seek(void*, unsigned long long)+0x24>
c001aeda:	b8 04 00 00 00       	mov    eax,0x4
c001aedf:	eb 37                	jmp    c001af18 <FAT::seek(void*, unsigned long long)+0x58>
c001aee1:	8d 76 00             	lea    esi,[esi+0x0]
c001aee4:	83 ec 04             	sub    esp,0x4
c001aee7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aeeb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aeef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001aef3:	e8 38 a9 fe ff       	call   c0005830 <f_lseek>
c001aef8:	83 c4 10             	add    esp,0x10
c001aefb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aeff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af03:	85 c0                	test   eax,eax
c001af05:	75 09                	jne    c001af10 <FAT::seek(void*, unsigned long long)+0x50>
c001af07:	b8 00 00 00 00       	mov    eax,0x0
c001af0c:	eb 0a                	jmp    c001af18 <FAT::seek(void*, unsigned long long)+0x58>
c001af0e:	66 90                	xchg   ax,ax
c001af10:	b8 01 00 00 00       	mov    eax,0x1
c001af15:	8d 76 00             	lea    esi,[esi+0x0]
c001af18:	83 c4 2c             	add    esp,0x2c
c001af1b:	c3                   	ret    

c001af1c <fatWrapperReadDisk>:
c001af1c:	83 ec 1c             	sub    esp,0x1c
c001af1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af23:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001af27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af2b:	89 04 24             	mov    DWORD PTR [esp],eax
c001af2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af36:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af3b:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c001af42:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001af46:	83 ec 0c             	sub    esp,0xc
c001af49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af4d:	52                   	push   edx
c001af4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af56:	50                   	push   eax
c001af57:	e8 6e 3f ff ff       	call   c000eeca <LogicalDisk::read(unsigned long long, int, void*)>
c001af5c:	83 c4 20             	add    esp,0x20
c001af5f:	83 c4 1c             	add    esp,0x1c
c001af62:	c3                   	ret    
c001af63:	90                   	nop

c001af64 <fatWrapperWriteDisk>:
c001af64:	83 ec 1c             	sub    esp,0x1c
c001af67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af6b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001af6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af73:	89 04 24             	mov    DWORD PTR [esp],eax
c001af76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af7e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af83:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c001af8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001af8e:	83 ec 0c             	sub    esp,0xc
c001af91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af95:	52                   	push   edx
c001af96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af9e:	50                   	push   eax
c001af9f:	e8 92 3f ff ff       	call   c000ef36 <LogicalDisk::write(unsigned long long, int, void*)>
c001afa4:	83 c4 20             	add    esp,0x20
c001afa7:	83 c4 1c             	add    esp,0x1c
c001afaa:	c3                   	ret    
c001afab:	90                   	nop

c001afac <fatWrapperIoctl>:
c001afac:	53                   	push   ebx
c001afad:	83 ec 28             	sub    esp,0x28
c001afb0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001afb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afb8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001afbc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001afc0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001afc5:	75 31                	jne    c001aff8 <fatWrapperIoctl+0x4c>
c001afc7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afcf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afd4:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c001afdb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001afe1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001afe7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001afeb:	66 89 02             	mov    WORD PTR [edx],ax
c001afee:	b8 00 00 00 00       	mov    eax,0x0
c001aff3:	e9 bc 00 00 00       	jmp    c001b0b4 <fatWrapperIoctl+0x108>
c001aff8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001affd:	75 6d                	jne    c001b06c <fatWrapperIoctl+0xc0>
c001afff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b003:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b007:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b00c:	8b 04 85 c0 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7640]
c001b013:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b019:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b01f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b025:	89 c8                	mov    eax,ecx
c001b027:	89 da                	mov    edx,ebx
c001b029:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b02d:	c1 e0 0a             	shl    eax,0xa
c001b030:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b035:	8b 0c 8d c0 89 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7640]
c001b03c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b042:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b048:	89 cb                	mov    ebx,ecx
c001b04a:	c1 fb 1f             	sar    ebx,0x1f
c001b04d:	53                   	push   ebx
c001b04e:	51                   	push   ecx
c001b04f:	52                   	push   edx
c001b050:	50                   	push   eax
c001b051:	e8 5a 65 00 00       	call   c00215b0 <__udivdi3>
c001b056:	83 c4 10             	add    esp,0x10
c001b059:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b05d:	89 01                	mov    DWORD PTR [ecx],eax
c001b05f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b062:	b8 00 00 00 00       	mov    eax,0x0
c001b067:	eb 4b                	jmp    c001b0b4 <fatWrapperIoctl+0x108>
c001b069:	8d 76 00             	lea    esi,[esi+0x0]
c001b06c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b071:	75 09                	jne    c001b07c <fatWrapperIoctl+0xd0>
c001b073:	b8 00 00 00 00       	mov    eax,0x0
c001b078:	eb 3a                	jmp    c001b0b4 <fatWrapperIoctl+0x108>
c001b07a:	66 90                	xchg   ax,ax
c001b07c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b081:	75 19                	jne    c001b09c <fatWrapperIoctl+0xf0>
c001b083:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b087:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b08b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b08f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b095:	b8 00 00 00 00       	mov    eax,0x0
c001b09a:	eb 18                	jmp    c001b0b4 <fatWrapperIoctl+0x108>
c001b09c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b0a1:	75 09                	jne    c001b0ac <fatWrapperIoctl+0x100>
c001b0a3:	b8 00 00 00 00       	mov    eax,0x0
c001b0a8:	eb 0a                	jmp    c001b0b4 <fatWrapperIoctl+0x108>
c001b0aa:	66 90                	xchg   ax,ax
c001b0ac:	b8 04 00 00 00       	mov    eax,0x4
c001b0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b4:	83 c4 28             	add    esp,0x28
c001b0b7:	5b                   	pop    ebx
c001b0b8:	c3                   	ret    
c001b0b9:	90                   	nop
c001b0ba:	66 90                	xchg   ax,ax

c001b0bc <FAT::FAT()>:
c001b0bc:	83 ec 1c             	sub    esp,0x1c
c001b0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0c3:	83 ec 0c             	sub    esp,0xc
c001b0c6:	50                   	push   eax
c001b0c7:	e8 6c 19 ff ff       	call   c000ca38 <Filesystem::Filesystem()>
c001b0cc:	83 c4 10             	add    esp,0x10
c001b0cf:	ba 60 4d 02 c0       	mov    edx,0xc0024d60
c001b0d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0d8:	89 10                	mov    DWORD PTR [eax],edx
c001b0da:	c7 05 40 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a40,0x0
c001b0e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0ec:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b0f1:	7f 15                	jg     c001b108 <FAT::FAT()+0x4c>
c001b0f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0f7:	c7 04 85 60 9a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd65a0],0xffffffff
c001b102:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b106:	eb e4                	jmp    c001b0ec <FAT::FAT()+0x30>
c001b108:	90                   	nop
c001b109:	83 c4 1c             	add    esp,0x1c
c001b10c:	c3                   	ret    
c001b10d:	90                   	nop
c001b10e:	66 90                	xchg   ax,ax

c001b110 <FAT::fixFilepath(char*)>:
c001b110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b114:	8a 00                	mov    al,BYTE PTR [eax]
c001b116:	3c 40                	cmp    al,0x40
c001b118:	7e 2e                	jle    c001b148 <FAT::fixFilepath(char*)+0x38>
c001b11a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b11e:	8a 00                	mov    al,BYTE PTR [eax]
c001b120:	83 e8 41             	sub    eax,0x41
c001b123:	88 c2                	mov    dl,al
c001b125:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b129:	88 10                	mov    BYTE PTR [eax],dl
c001b12b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b12f:	8a 00                	mov    al,BYTE PTR [eax]
c001b131:	0f be c0             	movsx  eax,al
c001b134:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001b13b:	83 c0 30             	add    eax,0x30
c001b13e:	88 c2                	mov    dl,al
c001b140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b144:	88 10                	mov    BYTE PTR [eax],dl
c001b146:	66 90                	xchg   ax,ax
c001b148:	90                   	nop
c001b149:	c3                   	ret    
c001b14a:	66 90                	xchg   ax,ax

c001b14c <FAT::open(char const*, void**, FileOpenMode)>:
c001b14c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b152:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b15a:	74 0c                	je     c001b168 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b15c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b164:	75 0e                	jne    c001b174 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b166:	66 90                	xchg   ax,ax
c001b168:	b8 04 00 00 00       	mov    eax,0x4
c001b16d:	e9 06 01 00 00       	jmp    c001b278 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b172:	66 90                	xchg   ax,ax
c001b174:	83 ec 08             	sub    esp,0x8
c001b177:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b17e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b182:	50                   	push   eax
c001b183:	e8 dc 53 fe ff       	call   c0000564 <strcpy>
c001b188:	83 c4 10             	add    esp,0x10
c001b18b:	83 ec 08             	sub    esp,0x8
c001b18e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b192:	50                   	push   eax
c001b193:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b19a:	e8 71 ff ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b19f:	83 c4 10             	add    esp,0x10
c001b1a2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b1aa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1b1:	83 e0 01             	and    eax,0x1
c001b1b4:	74 0a                	je     c001b1c0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b1b6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b1be:	66 90                	xchg   ax,ax
c001b1c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1c7:	83 e0 04             	and    eax,0x4
c001b1ca:	74 10                	je     c001b1dc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b1cc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b1d4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b1dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1e3:	83 e0 02             	and    eax,0x2
c001b1e6:	74 08                	je     c001b1f0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b1e8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b1f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1f7:	83 e0 08             	and    eax,0x8
c001b1fa:	74 08                	je     c001b204 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b1fc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b204:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b20b:	83 e0 10             	and    eax,0x10
c001b20e:	74 08                	je     c001b218 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b210:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b218:	83 ec 0c             	sub    esp,0xc
c001b21b:	68 50 02 00 00       	push   0x250
c001b220:	e8 72 e5 fe ff       	call   c0009797 <malloc>
c001b225:	83 c4 10             	add    esp,0x10
c001b228:	89 c2                	mov    edx,eax
c001b22a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b231:	89 10                	mov    DWORD PTR [eax],edx
c001b233:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b23b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b242:	8b 00                	mov    eax,DWORD PTR [eax]
c001b244:	83 ec 04             	sub    esp,0x4
c001b247:	52                   	push   edx
c001b248:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b24c:	52                   	push   edx
c001b24d:	50                   	push   eax
c001b24e:	e8 5c 9a fe ff       	call   c0004caf <f_open>
c001b253:	83 c4 10             	add    esp,0x10
c001b256:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b25d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b265:	74 09                	je     c001b270 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b267:	b8 01 00 00 00       	mov    eax,0x1
c001b26c:	eb 0a                	jmp    c001b278 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b26e:	66 90                	xchg   ax,ax
c001b270:	b8 00 00 00 00       	mov    eax,0x0
c001b275:	8d 76 00             	lea    esi,[esi+0x0]
c001b278:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b27e:	c3                   	ret    
c001b27f:	90                   	nop

c001b280 <FAT::openDir(char const*, void**)>:
c001b280:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b286:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b28e:	74 0c                	je     c001b29c <FAT::openDir(char const*, void**)+0x1c>
c001b290:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b298:	75 0e                	jne    c001b2a8 <FAT::openDir(char const*, void**)+0x28>
c001b29a:	66 90                	xchg   ax,ax
c001b29c:	b8 04 00 00 00       	mov    eax,0x4
c001b2a1:	e9 82 00 00 00       	jmp    c001b328 <FAT::openDir(char const*, void**)+0xa8>
c001b2a6:	66 90                	xchg   ax,ax
c001b2a8:	83 ec 08             	sub    esp,0x8
c001b2ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b2b6:	50                   	push   eax
c001b2b7:	e8 a8 52 fe ff       	call   c0000564 <strcpy>
c001b2bc:	83 c4 10             	add    esp,0x10
c001b2bf:	83 ec 08             	sub    esp,0x8
c001b2c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b2c6:	50                   	push   eax
c001b2c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2ce:	e8 3d fe ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b2d3:	83 c4 10             	add    esp,0x10
c001b2d6:	83 ec 0c             	sub    esp,0xc
c001b2d9:	6a 4c                	push   0x4c
c001b2db:	e8 b7 e4 fe ff       	call   c0009797 <malloc>
c001b2e0:	83 c4 10             	add    esp,0x10
c001b2e3:	89 c2                	mov    edx,eax
c001b2e5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2ec:	89 10                	mov    DWORD PTR [eax],edx
c001b2ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2f7:	83 ec 08             	sub    esp,0x8
c001b2fa:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b2fe:	52                   	push   edx
c001b2ff:	50                   	push   eax
c001b300:	e8 e2 a9 fe ff       	call   c0005ce7 <f_opendir>
c001b305:	83 c4 10             	add    esp,0x10
c001b308:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b30f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b317:	74 07                	je     c001b320 <FAT::openDir(char const*, void**)+0xa0>
c001b319:	b8 01 00 00 00       	mov    eax,0x1
c001b31e:	eb 08                	jmp    c001b328 <FAT::openDir(char const*, void**)+0xa8>
c001b320:	b8 00 00 00 00       	mov    eax,0x0
c001b325:	8d 76 00             	lea    esi,[esi+0x0]
c001b328:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b32e:	c3                   	ret    
c001b32f:	90                   	nop

c001b330 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b330:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b336:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b33e:	75 0c                	jne    c001b34c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b340:	b8 04 00 00 00       	mov    eax,0x4
c001b345:	e9 d2 00 00 00       	jmp    c001b41c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b34a:	66 90                	xchg   ax,ax
c001b34c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b354:	75 0a                	jne    c001b360 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b356:	b8 04 00 00 00       	mov    eax,0x4
c001b35b:	e9 bc 00 00 00       	jmp    c001b41c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b360:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b368:	75 0a                	jne    c001b374 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b36a:	b8 04 00 00 00       	mov    eax,0x4
c001b36f:	e9 a8 00 00 00       	jmp    c001b41c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b374:	83 ec 08             	sub    esp,0x8
c001b377:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b37e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b385:	50                   	push   eax
c001b386:	e8 d9 51 fe ff       	call   c0000564 <strcpy>
c001b38b:	83 c4 10             	add    esp,0x10
c001b38e:	83 ec 08             	sub    esp,0x8
c001b391:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b398:	50                   	push   eax
c001b399:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b3a0:	e8 6b fd ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b3a5:	83 c4 10             	add    esp,0x10
c001b3a8:	83 ec 08             	sub    esp,0x8
c001b3ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b3af:	50                   	push   eax
c001b3b0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b3b7:	50                   	push   eax
c001b3b8:	e8 e9 aa fe ff       	call   c0005ea6 <f_stat>
c001b3bd:	83 c4 10             	add    esp,0x10
c001b3c0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b3c7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b3ce:	85 c0                	test   eax,eax
c001b3d0:	74 0a                	je     c001b3dc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b3d2:	83 f8 04             	cmp    eax,0x4
c001b3d5:	74 35                	je     c001b40c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b3d7:	eb 3b                	jmp    c001b414 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b3d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b3e0:	0f b6 c0             	movzx  eax,al
c001b3e3:	83 e0 10             	and    eax,0x10
c001b3e6:	0f 95 c2             	setne  dl
c001b3e9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b3f0:	88 10                	mov    BYTE PTR [eax],dl
c001b3f2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b3f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b3f9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b400:	89 01                	mov    DWORD PTR [ecx],eax
c001b402:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b405:	b8 00 00 00 00       	mov    eax,0x0
c001b40a:	eb 10                	jmp    c001b41c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b40c:	b8 02 00 00 00       	mov    eax,0x2
c001b411:	eb 09                	jmp    c001b41c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b413:	90                   	nop
c001b414:	b8 01 00 00 00       	mov    eax,0x1
c001b419:	8d 76 00             	lea    esi,[esi+0x0]
c001b41c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b422:	c3                   	ret    
c001b423:	90                   	nop

c001b424 <FAT::unlink(char const*)>:
c001b424:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b42a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b432:	75 08                	jne    c001b43c <FAT::unlink(char const*)+0x18>
c001b434:	b8 04 00 00 00       	mov    eax,0x4
c001b439:	eb 61                	jmp    c001b49c <FAT::unlink(char const*)+0x78>
c001b43b:	90                   	nop
c001b43c:	83 ec 08             	sub    esp,0x8
c001b43f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b446:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b44a:	50                   	push   eax
c001b44b:	e8 14 51 fe ff       	call   c0000564 <strcpy>
c001b450:	83 c4 10             	add    esp,0x10
c001b453:	83 ec 08             	sub    esp,0x8
c001b456:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b45a:	50                   	push   eax
c001b45b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b462:	e8 a9 fc ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b467:	83 c4 10             	add    esp,0x10
c001b46a:	83 ec 0c             	sub    esp,0xc
c001b46d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b471:	50                   	push   eax
c001b472:	e8 81 ad fe ff       	call   c00061f8 <f_unlink>
c001b477:	83 c4 10             	add    esp,0x10
c001b47a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b481:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b488:	85 c0                	test   eax,eax
c001b48a:	75 08                	jne    c001b494 <FAT::unlink(char const*)+0x70>
c001b48c:	b8 00 00 00 00       	mov    eax,0x0
c001b491:	eb 09                	jmp    c001b49c <FAT::unlink(char const*)+0x78>
c001b493:	90                   	nop
c001b494:	b8 01 00 00 00       	mov    eax,0x1
c001b499:	8d 76 00             	lea    esi,[esi+0x0]
c001b49c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b4a2:	c3                   	ret    
c001b4a3:	90                   	nop

c001b4a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b4a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b4aa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b4b1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b4b8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b4bc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b4c0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b4c8:	75 0a                	jne    c001b4d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b4ca:	b8 04 00 00 00       	mov    eax,0x4
c001b4cf:	e9 30 01 00 00       	jmp    c001b604 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b4d4:	83 ec 08             	sub    esp,0x8
c001b4d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b4de:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b4e2:	50                   	push   eax
c001b4e3:	e8 7c 50 fe ff       	call   c0000564 <strcpy>
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	83 ec 08             	sub    esp,0x8
c001b4ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b4f2:	50                   	push   eax
c001b4f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b4fa:	e8 11 fc ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b50a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b512:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b517:	83 e0 01             	and    eax,0x1
c001b51a:	74 08                	je     c001b524 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b51c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b524:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b529:	83 e0 02             	and    eax,0x2
c001b52c:	74 0a                	je     c001b538 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b52e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b536:	66 90                	xchg   ax,ax
c001b538:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b53d:	83 e0 04             	and    eax,0x4
c001b540:	74 0a                	je     c001b54c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b542:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b54a:	66 90                	xchg   ax,ax
c001b54c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b551:	83 e0 08             	and    eax,0x8
c001b554:	74 0a                	je     c001b560 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b556:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b55e:	66 90                	xchg   ax,ax
c001b560:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b565:	83 e0 01             	and    eax,0x1
c001b568:	74 0a                	je     c001b574 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b56a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b572:	66 90                	xchg   ax,ax
c001b574:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b579:	83 e0 02             	and    eax,0x2
c001b57c:	74 0a                	je     c001b588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b57e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b586:	66 90                	xchg   ax,ax
c001b588:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b58d:	83 e0 04             	and    eax,0x4
c001b590:	74 0a                	je     c001b59c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b592:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b59a:	66 90                	xchg   ax,ax
c001b59c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b5a1:	83 e0 08             	and    eax,0x8
c001b5a4:	74 0a                	je     c001b5b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b5a6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b5ae:	66 90                	xchg   ax,ax
c001b5b0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b5b7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b5be:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b5c6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b5ce:	83 ec 04             	sub    esp,0x4
c001b5d1:	52                   	push   edx
c001b5d2:	50                   	push   eax
c001b5d3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5d7:	50                   	push   eax
c001b5d8:	e8 bd b2 fe ff       	call   c000689a <f_chmod>
c001b5dd:	83 c4 10             	add    esp,0x10
c001b5e0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b5e7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b5ee:	85 c0                	test   eax,eax
c001b5f0:	75 0a                	jne    c001b5fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b5f2:	b8 00 00 00 00       	mov    eax,0x0
c001b5f7:	eb 0b                	jmp    c001b604 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5fc:	b8 01 00 00 00       	mov    eax,0x1
c001b601:	8d 76 00             	lea    esi,[esi+0x0]
c001b604:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b60a:	c3                   	ret    
c001b60b:	90                   	nop

c001b60c <FAT::rename(char const*, char const*)>:
c001b60c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b612:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b61a:	74 0c                	je     c001b628 <FAT::rename(char const*, char const*)+0x1c>
c001b61c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b624:	75 0e                	jne    c001b634 <FAT::rename(char const*, char const*)+0x28>
c001b626:	66 90                	xchg   ax,ax
c001b628:	b8 04 00 00 00       	mov    eax,0x4
c001b62d:	e9 9e 00 00 00       	jmp    c001b6d0 <FAT::rename(char const*, char const*)+0xc4>
c001b632:	66 90                	xchg   ax,ax
c001b634:	83 ec 08             	sub    esp,0x8
c001b637:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b63e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b645:	50                   	push   eax
c001b646:	e8 19 4f fe ff       	call   c0000564 <strcpy>
c001b64b:	83 c4 10             	add    esp,0x10
c001b64e:	83 ec 08             	sub    esp,0x8
c001b651:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b658:	50                   	push   eax
c001b659:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b660:	e8 ab fa ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b665:	83 c4 10             	add    esp,0x10
c001b668:	83 ec 08             	sub    esp,0x8
c001b66b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b672:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b676:	50                   	push   eax
c001b677:	e8 e8 4e fe ff       	call   c0000564 <strcpy>
c001b67c:	83 c4 10             	add    esp,0x10
c001b67f:	83 ec 08             	sub    esp,0x8
c001b682:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b686:	50                   	push   eax
c001b687:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b68e:	e8 7d fa ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b693:	83 c4 10             	add    esp,0x10
c001b696:	83 ec 08             	sub    esp,0x8
c001b699:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b69d:	50                   	push   eax
c001b69e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b6a5:	50                   	push   eax
c001b6a6:	e8 fc ae fe ff       	call   c00065a7 <f_rename>
c001b6ab:	83 c4 10             	add    esp,0x10
c001b6ae:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b6b5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b6bc:	85 c0                	test   eax,eax
c001b6be:	75 08                	jne    c001b6c8 <FAT::rename(char const*, char const*)+0xbc>
c001b6c0:	b8 00 00 00 00       	mov    eax,0x0
c001b6c5:	eb 09                	jmp    c001b6d0 <FAT::rename(char const*, char const*)+0xc4>
c001b6c7:	90                   	nop
c001b6c8:	b8 01 00 00 00       	mov    eax,0x1
c001b6cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b6d0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b6d6:	c3                   	ret    
c001b6d7:	90                   	nop

c001b6d8 <FAT::mkdir(char const*)>:
c001b6d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b6de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b6e6:	75 08                	jne    c001b6f0 <FAT::mkdir(char const*)+0x18>
c001b6e8:	b8 04 00 00 00       	mov    eax,0x4
c001b6ed:	eb 61                	jmp    c001b750 <FAT::mkdir(char const*)+0x78>
c001b6ef:	90                   	nop
c001b6f0:	83 ec 08             	sub    esp,0x8
c001b6f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b6fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b6fe:	50                   	push   eax
c001b6ff:	e8 60 4e fe ff       	call   c0000564 <strcpy>
c001b704:	83 c4 10             	add    esp,0x10
c001b707:	83 ec 08             	sub    esp,0x8
c001b70a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b70e:	50                   	push   eax
c001b70f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b716:	e8 f5 f9 ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b71b:	83 c4 10             	add    esp,0x10
c001b71e:	83 ec 0c             	sub    esp,0xc
c001b721:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b725:	50                   	push   eax
c001b726:	e8 50 ac fe ff       	call   c000637b <f_mkdir>
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b735:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b73c:	85 c0                	test   eax,eax
c001b73e:	75 08                	jne    c001b748 <FAT::mkdir(char const*)+0x70>
c001b740:	b8 00 00 00 00       	mov    eax,0x0
c001b745:	eb 09                	jmp    c001b750 <FAT::mkdir(char const*)+0x78>
c001b747:	90                   	nop
c001b748:	b8 01 00 00 00       	mov    eax,0x1
c001b74d:	8d 76 00             	lea    esi,[esi+0x0]
c001b750:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b756:	c3                   	ret    
c001b757:	90                   	nop

c001b758 <FAT::exists(char const*)>:
c001b758:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b75e:	83 ec 08             	sub    esp,0x8
c001b761:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b768:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b76c:	50                   	push   eax
c001b76d:	e8 f2 4d fe ff       	call   c0000564 <strcpy>
c001b772:	83 c4 10             	add    esp,0x10
c001b775:	83 ec 08             	sub    esp,0x8
c001b778:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b77c:	50                   	push   eax
c001b77d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b784:	e8 87 f9 ff ff       	call   c001b110 <FAT::fixFilepath(char*)>
c001b789:	83 c4 10             	add    esp,0x10
c001b78c:	83 ec 08             	sub    esp,0x8
c001b78f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b796:	50                   	push   eax
c001b797:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b79b:	50                   	push   eax
c001b79c:	e8 05 a7 fe ff       	call   c0005ea6 <f_stat>
c001b7a1:	83 c4 10             	add    esp,0x10
c001b7a4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b7ab:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b7b2:	85 c0                	test   eax,eax
c001b7b4:	75 06                	jne    c001b7bc <FAT::exists(char const*)+0x64>
c001b7b6:	b0 01                	mov    al,0x1
c001b7b8:	eb 06                	jmp    c001b7c0 <FAT::exists(char const*)+0x68>
c001b7ba:	66 90                	xchg   ax,ax
c001b7bc:	b0 00                	mov    al,0x0
c001b7be:	66 90                	xchg   ax,ax
c001b7c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b7c6:	c3                   	ret    
c001b7c7:	90                   	nop

c001b7c8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b7c8:	b8 08 00 00 00       	mov    eax,0x8
c001b7cd:	c3                   	ret    

c001b7ce <ISO9660::seek(void*, unsigned long long)>:
c001b7ce:	53                   	push   ebx
c001b7cf:	b8 04 00 00 00       	mov    eax,0x4
c001b7d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b7d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b7e0:	85 d2                	test   edx,edx
c001b7e2:	74 17                	je     c001b7fb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b7e4:	89 c8                	mov    eax,ecx
c001b7e6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b7e9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b7ec:	b8 01 00 00 00       	mov    eax,0x1
c001b7f1:	73 08                	jae    c001b7fb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b7f3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b7f6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b7f9:	31 c0                	xor    eax,eax
c001b7fb:	5b                   	pop    ebx
c001b7fc:	c3                   	ret    
c001b7fd:	90                   	nop

c001b7fe <ISO9660::tell(void*, unsigned long long*)>:
c001b7fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b802:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b806:	85 d2                	test   edx,edx
c001b808:	74 12                	je     c001b81c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b80a:	85 c0                	test   eax,eax
c001b80c:	74 0e                	je     c001b81c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b80e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b811:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b814:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b817:	89 10                	mov    DWORD PTR [eax],edx
c001b819:	31 c0                	xor    eax,eax
c001b81b:	c3                   	ret    
c001b81c:	b8 04 00 00 00       	mov    eax,0x4
c001b821:	c3                   	ret    

c001b822 <ISO9660::getName()>:
c001b822:	b8 c0 4d 02 c0       	mov    eax,0xc0024dc0
c001b827:	c3                   	ret    

c001b828 <ISO9660::stat(void*, unsigned long long*)>:
c001b828:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b82c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b830:	85 d2                	test   edx,edx
c001b832:	74 12                	je     c001b846 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b834:	85 c0                	test   eax,eax
c001b836:	74 0e                	je     c001b846 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b838:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b83b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b83e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b841:	89 10                	mov    DWORD PTR [eax],edx
c001b843:	31 c0                	xor    eax,eax
c001b845:	c3                   	ret    
c001b846:	b8 04 00 00 00       	mov    eax,0x4
c001b84b:	c3                   	ret    

c001b84c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b84c:	b8 01 00 00 00       	mov    eax,0x1
c001b851:	c3                   	ret    

c001b852 <ISO9660::unlink(char const*)>:
c001b852:	b8 01 00 00 00       	mov    eax,0x1
c001b857:	c3                   	ret    

c001b858 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b858:	b8 01 00 00 00       	mov    eax,0x1
c001b85d:	c3                   	ret    

c001b85e <ISO9660::rename(char const*, char const*)>:
c001b85e:	b8 01 00 00 00       	mov    eax,0x1
c001b863:	c3                   	ret    

c001b864 <ISO9660::mkdir(char const*)>:
c001b864:	b8 01 00 00 00       	mov    eax,0x1
c001b869:	c3                   	ret    

c001b86a <ISO9660::close(void*)>:
c001b86a:	83 ec 0c             	sub    esp,0xc
c001b86d:	b8 04 00 00 00       	mov    eax,0x4
c001b872:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b876:	85 d2                	test   edx,edx
c001b878:	74 0e                	je     c001b888 <ISO9660::close(void*)+0x1e>
c001b87a:	83 ec 0c             	sub    esp,0xc
c001b87d:	52                   	push   edx
c001b87e:	e8 24 df fe ff       	call   c00097a7 <free>
c001b883:	83 c4 10             	add    esp,0x10
c001b886:	31 c0                	xor    eax,eax
c001b888:	83 c4 0c             	add    esp,0xc
c001b88b:	c3                   	ret    

c001b88c <ISO9660::closeDir(void*)>:
c001b88c:	83 ec 0c             	sub    esp,0xc
c001b88f:	b8 04 00 00 00       	mov    eax,0x4
c001b894:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b898:	85 d2                	test   edx,edx
c001b89a:	74 0e                	je     c001b8aa <ISO9660::closeDir(void*)+0x1e>
c001b89c:	83 ec 0c             	sub    esp,0xc
c001b89f:	52                   	push   edx
c001b8a0:	e8 02 df fe ff       	call   c00097a7 <free>
c001b8a5:	83 c4 10             	add    esp,0x10
c001b8a8:	31 c0                	xor    eax,eax
c001b8aa:	83 c4 0c             	add    esp,0xc
c001b8ad:	c3                   	ret    

c001b8ae <ISO9660::~ISO9660()>:
c001b8ae:	83 ec 0c             	sub    esp,0xc
c001b8b1:	ba e4 4d 02 c0       	mov    edx,0xc0024de4
c001b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ba:	89 10                	mov    DWORD PTR [eax],edx
c001b8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c0:	83 ec 0c             	sub    esp,0xc
c001b8c3:	50                   	push   eax
c001b8c4:	e8 93 11 ff ff       	call   c000ca5c <Filesystem::~Filesystem()>
c001b8c9:	83 c4 10             	add    esp,0x10
c001b8cc:	90                   	nop
c001b8cd:	83 c4 0c             	add    esp,0xc
c001b8d0:	c3                   	ret    
c001b8d1:	90                   	nop

c001b8d2 <ISO9660::~ISO9660()>:
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	83 ec 0c             	sub    esp,0xc
c001b8d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8dc:	e8 cd ff ff ff       	call   c001b8ae <ISO9660::~ISO9660()>
c001b8e1:	83 c4 10             	add    esp,0x10
c001b8e4:	83 ec 08             	sub    esp,0x8
c001b8e7:	6a 08                	push   0x8
c001b8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8ed:	e8 4e 0d ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c001b8f2:	83 c4 10             	add    esp,0x10
c001b8f5:	83 c4 0c             	add    esp,0xc
c001b8f8:	c3                   	ret    

c001b8f9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b8f9:	55                   	push   ebp
c001b8fa:	31 c9                	xor    ecx,ecx
c001b8fc:	57                   	push   edi
c001b8fd:	56                   	push   esi
c001b8fe:	53                   	push   ebx
c001b8ff:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b903:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b907:	89 eb                	mov    ebx,ebp
c001b909:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b90d:	39 ce                	cmp    esi,ecx
c001b90f:	7e 17                	jle    c001b928 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b911:	31 d2                	xor    edx,edx
c001b913:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b917:	7d 13                	jge    c001b92c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b919:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b91d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b920:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b923:	75 0d                	jne    c001b932 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b925:	42                   	inc    edx
c001b926:	eb eb                	jmp    c001b913 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b928:	31 c0                	xor    eax,eax
c001b92a:	eb 0a                	jmp    c001b936 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b92c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b930:	eb 04                	jmp    c001b936 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b932:	41                   	inc    ecx
c001b933:	43                   	inc    ebx
c001b934:	eb d7                	jmp    c001b90d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b936:	5b                   	pop    ebx
c001b937:	5e                   	pop    esi
c001b938:	5f                   	pop    edi
c001b939:	5d                   	pop    ebp
c001b93a:	c3                   	ret    

c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b93b:	57                   	push   edi
c001b93c:	56                   	push   esi
c001b93d:	53                   	push   ebx
c001b93e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b942:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b946:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b94a:	39 35 40 9b 02 c0    	cmp    DWORD PTR ds:0xc0029b40,esi
c001b950:	75 08                	jne    c001b95a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b952:	38 1d 80 5e 02 c0    	cmp    BYTE PTR ds:0xc0025e80,bl
c001b958:	74 4a                	je     c001b9a4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001b95a:	83 ec 0c             	sub    esp,0xc
c001b95d:	31 d2                	xor    edx,edx
c001b95f:	68 60 9b 02 c0       	push   0xc0029b60
c001b964:	0f be c3             	movsx  eax,bl
c001b967:	6a 01                	push   0x1
c001b969:	52                   	push   edx
c001b96a:	56                   	push   esi
c001b96b:	ff 34 85 bc 88 02 c0 	push   DWORD PTR [eax*4-0x3ffd7744]
c001b972:	e8 53 35 ff ff       	call   c000eeca <LogicalDisk::read(unsigned long long, int, void*)>
c001b977:	83 c4 20             	add    esp,0x20
c001b97a:	85 c0                	test   eax,eax
c001b97c:	75 0e                	jne    c001b98c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001b97e:	89 35 40 9b 02 c0    	mov    DWORD PTR ds:0xc0029b40,esi
c001b984:	88 1d 80 5e 02 c0    	mov    BYTE PTR ds:0xc0025e80,bl
c001b98a:	eb 18                	jmp    c001b9a4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001b98c:	50                   	push   eax
c001b98d:	68 00 08 00 00       	push   0x800
c001b992:	6a 00                	push   0x0
c001b994:	57                   	push   edi
c001b995:	e8 0e 4b fe ff       	call   c00004a8 <memset>
c001b99a:	83 c4 10             	add    esp,0x10
c001b99d:	b8 01 00 00 00       	mov    eax,0x1
c001b9a2:	eb 0e                	jmp    c001b9b2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001b9a4:	be 60 9b 02 c0       	mov    esi,0xc0029b60
c001b9a9:	b9 00 08 00 00       	mov    ecx,0x800
c001b9ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b9b0:	31 c0                	xor    eax,eax
c001b9b2:	5b                   	pop    ebx
c001b9b3:	5e                   	pop    esi
c001b9b4:	5f                   	pop    edi
c001b9b5:	c3                   	ret    

c001b9b6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b9b6:	81 ec 10 08 00 00    	sub    esp,0x810
c001b9bc:	c7 05 40 9b 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029b40,0xdeadbeef
c001b9c6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b9cd:	83 c0 41             	add    eax,0x41
c001b9d0:	0f be c0             	movsx  eax,al
c001b9d3:	50                   	push   eax
c001b9d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9d8:	50                   	push   eax
c001b9d9:	6a 10                	push   0x10
c001b9db:	e8 5b ff ff ff       	call   c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b9e0:	83 c4 10             	add    esp,0x10
c001b9e3:	31 d2                	xor    edx,edx
c001b9e5:	85 c0                	test   eax,eax
c001b9e7:	75 24                	jne    c001ba0d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b9e9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b9ee:	75 1d                	jne    c001ba0d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b9f0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b9f5:	75 16                	jne    c001ba0d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b9f7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b9fc:	75 0f                	jne    c001ba0d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b9fe:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ba03:	75 08                	jne    c001ba0d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001ba05:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ba0a:	0f 94 c2             	sete   dl
c001ba0d:	88 d0                	mov    al,dl
c001ba0f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001ba15:	c3                   	ret    

c001ba16 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ba16:	55                   	push   ebp
c001ba17:	57                   	push   edi
c001ba18:	56                   	push   esi
c001ba19:	53                   	push   ebx
c001ba1a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001ba20:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001ba27:	85 ed                	test   ebp,ebp
c001ba29:	0f 84 da 01 00 00    	je     c001bc09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ba2f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001ba37:	0f 84 cc 01 00 00    	je     c001bc09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ba3d:	b8 01 00 00 00       	mov    eax,0x1
c001ba42:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001ba46:	0f 85 c2 01 00 00    	jne    c001bc0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001ba4c:	31 d2                	xor    edx,edx
c001ba4e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001ba55:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ba58:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001ba5b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ba5e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba61:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba65:	01 c8                	add    eax,ecx
c001ba67:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ba6a:	11 da                	adc    edx,ebx
c001ba6c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001ba70:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ba74:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ba78:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ba7c:	19 d7                	sbb    edi,edx
c001ba7e:	72 11                	jb     c001ba91 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001ba80:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001ba83:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001ba87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ba8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ba8f:	eb 0c                	jmp    c001ba9d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001ba91:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001ba95:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ba99:	29 ce                	sub    esi,ecx
c001ba9b:	19 df                	sbb    edi,ebx
c001ba9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001baa0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001baa3:	0f a4 c2 0b          	shld   edx,eax,0xb
c001baa7:	c1 e0 0b             	shl    eax,0xb
c001baaa:	01 c8                	add    eax,ecx
c001baac:	11 da                	adc    edx,ebx
c001baae:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bab5:	51                   	push   ecx
c001bab6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001baba:	50                   	push   eax
c001babb:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001babf:	53                   	push   ebx
c001bac0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bac4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bac8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bacc:	50                   	push   eax
c001bacd:	e8 69 fe ff ff       	call   c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bad2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bad5:	b8 00 08 00 00       	mov    eax,0x800
c001bada:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bae0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bae4:	29 d0                	sub    eax,edx
c001bae6:	83 c4 10             	add    esp,0x10
c001bae9:	89 f9                	mov    ecx,edi
c001baeb:	39 c6                	cmp    esi,eax
c001baed:	83 d9 00             	sbb    ecx,0x0
c001baf0:	7d 1b                	jge    c001bb0d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001baf2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001baf7:	75 12                	jne    c001bb0b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001baf9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb06:	e9 fa 00 00 00       	jmp    c001bc05 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bb0b:	89 f0                	mov    eax,esi
c001bb0d:	01 d3                	add    ebx,edx
c001bb0f:	31 d2                	xor    edx,edx
c001bb11:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bb15:	39 c2                	cmp    edx,eax
c001bb17:	7d 14                	jge    c001bb2d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bb19:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bb20:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bb24:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bb27:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bb2a:	42                   	inc    edx
c001bb2b:	eb e8                	jmp    c001bb15 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bb2d:	89 c2                	mov    edx,eax
c001bb2f:	85 c0                	test   eax,eax
c001bb31:	79 02                	jns    c001bb35 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bb33:	31 d2                	xor    edx,edx
c001bb35:	01 c2                	add    edx,eax
c001bb37:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bb3a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bb41:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bb45:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bb49:	99                   	cdq    
c001bb4a:	01 c1                	add    ecx,eax
c001bb4c:	11 d3                	adc    ebx,edx
c001bb4e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bb52:	29 c6                	sub    esi,eax
c001bb54:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bb58:	19 d7                	sbb    edi,edx
c001bb5a:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bb61:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bb66:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bb69:	b8 00 00 00 00       	mov    eax,0x0
c001bb6e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bb72:	7d 43                	jge    c001bbb7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bb74:	52                   	push   edx
c001bb75:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb79:	50                   	push   eax
c001bb7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bb7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb82:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bb86:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb8a:	50                   	push   eax
c001bb8b:	e8 ab fd ff ff       	call   c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb90:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bb98:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bb9d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bba5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bbad:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bbb2:	83 c4 10             	add    esp,0x10
c001bbb5:	eb aa                	jmp    c001bb61 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bbb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbbb:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bbbe:	74 2a                	je     c001bbea <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bbc0:	50                   	push   eax
c001bbc1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbc5:	50                   	push   eax
c001bbc6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bbca:	56                   	push   esi
c001bbcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bbcf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbd3:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bbd7:	51                   	push   ecx
c001bbd8:	e8 5e fd ff ff       	call   c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbdd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bbe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bbe5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bbe7:	83 c4 10             	add    esp,0x10
c001bbea:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bbf1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bbf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bbf9:	89 18                	mov    DWORD PTR [eax],ebx
c001bbfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbff:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc02:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc05:	31 c0                	xor    eax,eax
c001bc07:	eb 05                	jmp    c001bc0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bc09:	b8 04 00 00 00       	mov    eax,0x4
c001bc0e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bc14:	5b                   	pop    ebx
c001bc15:	5e                   	pop    esi
c001bc16:	5f                   	pop    edi
c001bc17:	5d                   	pop    ebp
c001bc18:	c3                   	ret    
c001bc19:	90                   	nop

c001bc1a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bc1a:	55                   	push   ebp
c001bc1b:	57                   	push   edi
c001bc1c:	56                   	push   esi
c001bc1d:	53                   	push   ebx
c001bc1e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bc24:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bc2b:	85 ed                	test   ebp,ebp
c001bc2d:	0f 84 51 02 00 00    	je     c001be84 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bc33:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bc3b:	0f 84 43 02 00 00    	je     c001be84 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bc41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bc44:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bc47:	75 0a                	jne    c001bc53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bc49:	b8 07 00 00 00       	mov    eax,0x7
c001bc4e:	e9 36 02 00 00       	jmp    c001be89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bc53:	50                   	push   eax
c001bc54:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc58:	50                   	push   eax
c001bc59:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bc60:	53                   	push   ebx
c001bc61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bc64:	c1 e0 0b             	shl    eax,0xb
c001bc67:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bc6a:	c1 e8 0b             	shr    eax,0xb
c001bc6d:	50                   	push   eax
c001bc6e:	e8 c8 fc ff ff       	call   c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc76:	83 c4 10             	add    esp,0x10
c001bc79:	89 c1                	mov    ecx,eax
c001bc7b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bc7e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bc84:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bc87:	84 db                	test   bl,bl
c001bc89:	0f 85 8b 00 00 00    	jne    c001bd1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bc8f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bc95:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bc98:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bc9e:	29 c6                	sub    esi,eax
c001bca0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bca4:	89 f3                	mov    ebx,esi
c001bca6:	89 f1                	mov    ecx,esi
c001bca8:	c1 fb 1f             	sar    ebx,0x1f
c001bcab:	01 f0                	add    eax,esi
c001bcad:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bcb0:	11 da                	adc    edx,ebx
c001bcb2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bcb9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bcbc:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bcbf:	89 d8                	mov    eax,ebx
c001bcc1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bcc5:	ba 00 00 00 00       	mov    edx,0x0
c001bcca:	19 f8                	sbb    eax,edi
c001bccc:	b8 00 00 00 00       	mov    eax,0x0
c001bcd1:	73 08                	jae    c001bcdb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bcd3:	89 f0                	mov    eax,esi
c001bcd5:	89 fa                	mov    edx,edi
c001bcd7:	29 c8                	sub    eax,ecx
c001bcd9:	19 da                	sbb    edx,ebx
c001bcdb:	89 d7                	mov    edi,edx
c001bcdd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bce0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bce3:	09 c7                	or     edi,eax
c001bce5:	0f 84 5e ff ff ff    	je     c001bc49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bceb:	57                   	push   edi
c001bcec:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcf0:	50                   	push   eax
c001bcf1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bcf8:	53                   	push   ebx
c001bcf9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bcfc:	c1 e0 0b             	shl    eax,0xb
c001bcff:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bd03:	c1 e8 0b             	shr    eax,0xb
c001bd06:	50                   	push   eax
c001bd07:	e8 2f fc ff ff       	call   c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd0c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd0f:	83 c4 10             	add    esp,0x10
c001bd12:	25 ff 07 00 00       	and    eax,0x7ff
c001bd17:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bd1a:	31 ff                	xor    edi,edi
c001bd1c:	56                   	push   esi
c001bd1d:	6a 28                	push   0x28
c001bd1f:	6a 00                	push   0x0
c001bd21:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bd25:	50                   	push   eax
c001bd26:	e8 7d 47 fe ff       	call   c00004a8 <memset>
c001bd2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd2e:	25 ff 07 00 00       	and    eax,0x7ff
c001bd33:	89 c6                	mov    esi,eax
c001bd35:	83 c6 21             	add    esi,0x21
c001bd38:	83 d7 00             	adc    edi,0x0
c001bd3b:	83 c4 10             	add    esp,0x10
c001bd3e:	31 c9                	xor    ecx,ecx
c001bd40:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bd47:	83 f9 28             	cmp    ecx,0x28
c001bd4a:	88 04 24             	mov    BYTE PTR [esp],al
c001bd4d:	0f 94 c2             	sete   dl
c001bd50:	88 d0                	mov    al,dl
c001bd52:	ba ff 07 00 00       	mov    edx,0x7ff
c001bd57:	39 f2                	cmp    edx,esi
c001bd59:	ba 00 00 00 00       	mov    edx,0x0
c001bd5e:	19 fa                	sbb    edx,edi
c001bd60:	0f 92 c2             	setb   dl
c001bd63:	09 c2                	or     edx,eax
c001bd65:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bd69:	0f 94 c0             	sete   al
c001bd6c:	08 d0                	or     al,dl
c001bd6e:	75 16                	jne    c001bd86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bd70:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bd74:	74 10                	je     c001bd86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bd76:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bd79:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bd7d:	41                   	inc    ecx
c001bd7e:	83 c6 01             	add    esi,0x1
c001bd81:	83 d7 00             	adc    edi,0x0
c001bd84:	eb ba                	jmp    c001bd40 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bd86:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001bd8d:	83 ec 0c             	sub    esp,0xc
c001bd90:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bd94:	56                   	push   esi
c001bd95:	e8 2a 47 fe ff       	call   c00004c4 <strlen>
c001bd9a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bda1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bda5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001bdad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdb0:	5a                   	pop    edx
c001bdb1:	25 ff 07 00 00       	and    eax,0x7ff
c001bdb6:	59                   	pop    ecx
c001bdb7:	01 f8                	add    eax,edi
c001bdb9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001bdbf:	83 e0 02             	and    eax,0x2
c001bdc2:	3c 01                	cmp    al,0x1
c001bdc4:	19 c0                	sbb    eax,eax
c001bdc6:	83 c0 02             	add    eax,0x2
c001bdc9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bdcd:	56                   	push   esi
c001bdce:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bdd2:	50                   	push   eax
c001bdd3:	e8 8c 47 fe ff       	call   c0000564 <strcpy>
c001bdd8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	84 c0                	test   al,al
c001bde1:	75 21                	jne    c001be04 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001bde3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bdeb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bdf3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bdfb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001be02:	eb 28                	jmp    c001be2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be04:	fe c8                	dec    al
c001be06:	75 24                	jne    c001be2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be08:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001be10:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be18:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be20:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001be27:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001be2c:	8d 74 24 40          	lea    esi,[esp+0x40]
c001be30:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001be37:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001be3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be40:	0f b6 f3             	movzx  esi,bl
c001be43:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001be4a:	31 db                	xor    ebx,ebx
c001be4c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001be52:	89 df                	mov    edi,ebx
c001be54:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001be57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be5a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001be5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001be60:	39 c6                	cmp    esi,eax
c001be62:	19 d7                	sbb    edi,edx
c001be64:	72 10                	jb     c001be76 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001be66:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001be6d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001be74:	eb 0a                	jmp    c001be80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001be76:	29 f0                	sub    eax,esi
c001be78:	19 da                	sbb    edx,ebx
c001be7a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001be7d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001be80:	31 c0                	xor    eax,eax
c001be82:	eb 05                	jmp    c001be89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001be84:	b8 04 00 00 00       	mov    eax,0x4
c001be89:	81 c4 5c 09 00 00    	add    esp,0x95c
c001be8f:	5b                   	pop    ebx
c001be90:	5e                   	pop    esi
c001be91:	5f                   	pop    edi
c001be92:	5d                   	pop    ebp
c001be93:	c3                   	ret    

c001be94 <readRoot(unsigned int*, unsigned int*, char)>:
c001be94:	57                   	push   edi
c001be95:	56                   	push   esi
c001be96:	81 ec 38 08 00 00    	sub    esp,0x838
c001be9c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bea4:	50                   	push   eax
c001bea5:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bea9:	50                   	push   eax
c001beaa:	6a 10                	push   0x10
c001beac:	e8 8a fa ff ff       	call   c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001beb1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001beb8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bebc:	b9 22 00 00 00       	mov    ecx,0x22
c001bec1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bec3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001beca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bece:	89 10                	mov    DWORD PTR [eax],edx
c001bed0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bed7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bedb:	89 10                	mov    DWORD PTR [eax],edx
c001bedd:	81 c4 44 08 00 00    	add    esp,0x844
c001bee3:	b0 01                	mov    al,0x1
c001bee5:	5e                   	pop    esi
c001bee6:	5f                   	pop    edi
c001bee7:	c3                   	ret    

c001bee8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bee8:	55                   	push   ebp
c001bee9:	57                   	push   edi
c001beea:	56                   	push   esi
c001beeb:	53                   	push   ebx
c001beec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bef2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bef9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bf00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf04:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bf08:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf10:	75 03                	jne    c001bf15 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bf12:	83 c3 02             	add    ebx,0x2
c001bf15:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bf18:	75 03                	jne    c001bf1d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bf1a:	43                   	inc    ebx
c001bf1b:	eb f8                	jmp    c001bf15 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bf1d:	52                   	push   edx
c001bf1e:	68 00 01 00 00       	push   0x100
c001bf23:	6a 00                	push   0x0
c001bf25:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bf29:	50                   	push   eax
c001bf2a:	e8 79 45 fe ff       	call   c00004a8 <memset>
c001bf2f:	83 c4 10             	add    esp,0x10
c001bf32:	31 d2                	xor    edx,edx
c001bf34:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bf37:	84 c0                	test   al,al
c001bf39:	74 21                	je     c001bf5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bf3b:	3c 2f                	cmp    al,0x2f
c001bf3d:	75 0b                	jne    c001bf4a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bf3f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bf43:	bd 01 00 00 00       	mov    ebp,0x1
c001bf48:	eb 14                	jmp    c001bf5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bf4a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bf4d:	80 f9 19             	cmp    cl,0x19
c001bf50:	77 03                	ja     c001bf55 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bf52:	83 e8 20             	sub    eax,0x20
c001bf55:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bf59:	42                   	inc    edx
c001bf5a:	eb d8                	jmp    c001bf34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bf5c:	31 ed                	xor    ebp,ebp
c001bf5e:	83 ec 0c             	sub    esp,0xc
c001bf61:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bf68:	e8 2a d8 fe ff       	call   c0009797 <malloc>
c001bf6d:	89 c6                	mov    esi,eax
c001bf6f:	89 c2                	mov    edx,eax
c001bf71:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001bf78:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001bf7e:	c1 ef 0b             	shr    edi,0xb
c001bf81:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001bf88:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001bf8c:	83 c4 10             	add    esp,0x10
c001bf8f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001bf94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf98:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001bf9f:	74 29                	je     c001bfca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001bfa1:	50                   	push   eax
c001bfa2:	57                   	push   edi
c001bfa3:	52                   	push   edx
c001bfa4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bfa8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001bfaf:	e8 87 f9 ff ff       	call   c001b93b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bfb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfb8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001bfbf:	81 c2 00 08 00 00    	add    edx,0x800
c001bfc5:	83 c4 10             	add    esp,0x10
c001bfc8:	eb ca                	jmp    c001bf94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001bfca:	83 ec 0c             	sub    esp,0xc
c001bfcd:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001bfd1:	57                   	push   edi
c001bfd2:	e8 ed 44 fe ff       	call   c00004c4 <strlen>
c001bfd7:	50                   	push   eax
c001bfd8:	57                   	push   edi
c001bfd9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001bfe0:	56                   	push   esi
c001bfe1:	e8 13 f9 ff ff       	call   c001b8f9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001bfe6:	83 c4 20             	add    esp,0x20
c001bfe9:	85 c0                	test   eax,eax
c001bfeb:	75 13                	jne    c001c000 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001bfed:	83 ec 0c             	sub    esp,0xc
c001bff0:	56                   	push   esi
c001bff1:	e8 b1 d7 fe ff       	call   c00097a7 <free>
c001bff6:	83 c4 10             	add    esp,0x10
c001bff9:	31 c0                	xor    eax,eax
c001bffb:	e9 b3 00 00 00       	jmp    c001c0b3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c000:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c004:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c008:	c1 e7 08             	shl    edi,0x8
c001c00b:	c1 e2 10             	shl    edx,0x10
c001c00e:	09 d7                	or     edi,edx
c001c010:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c014:	09 d7                	or     edi,edx
c001c016:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c01a:	c1 e2 18             	shl    edx,0x18
c001c01d:	09 d7                	or     edi,edx
c001c01f:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c023:	89 d1                	mov    ecx,edx
c001c025:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c029:	c1 e1 08             	shl    ecx,0x8
c001c02c:	c1 e2 10             	shl    edx,0x10
c001c02f:	09 ca                	or     edx,ecx
c001c031:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c035:	09 ca                	or     edx,ecx
c001c037:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c03b:	c1 e1 18             	shl    ecx,0x18
c001c03e:	09 ca                	or     edx,ecx
c001c040:	89 e9                	mov    ecx,ebp
c001c042:	84 c9                	test   cl,cl
c001c044:	74 3c                	je     c001c082 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001c046:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c04a:	83 ec 0c             	sub    esp,0xc
c001c04d:	56                   	push   esi
c001c04e:	e8 54 d7 fe ff       	call   c00097a7 <free>
c001c053:	83 c4 0c             	add    esp,0xc
c001c056:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c05d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c062:	50                   	push   eax
c001c063:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c06a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c071:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c075:	52                   	push   edx
c001c076:	57                   	push   edi
c001c077:	53                   	push   ebx
c001c078:	e8 6b fe ff ff       	call   c001bee8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c07d:	83 c4 20             	add    esp,0x20
c001c080:	eb 31                	jmp    c001c0b3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c082:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c085:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c08c:	d0 e8                	shr    al,1
c001c08e:	89 3b                	mov    DWORD PTR [ebx],edi
c001c090:	83 e0 01             	and    eax,0x1
c001c093:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c09a:	83 ec 0c             	sub    esp,0xc
c001c09d:	89 13                	mov    DWORD PTR [ebx],edx
c001c09f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c0a6:	89 03                	mov    DWORD PTR [ebx],eax
c001c0a8:	56                   	push   esi
c001c0a9:	e8 f9 d6 fe ff       	call   c00097a7 <free>
c001c0ae:	83 c4 10             	add    esp,0x10
c001c0b1:	b0 01                	mov    al,0x1
c001c0b3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c0b9:	5b                   	pop    ebx
c001c0ba:	5e                   	pop    esi
c001c0bb:	5f                   	pop    edi
c001c0bc:	5d                   	pop    ebp
c001c0bd:	c3                   	ret    

c001c0be <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c0be:	55                   	push   ebp
c001c0bf:	57                   	push   edi
c001c0c0:	56                   	push   esi
c001c0c1:	53                   	push   ebx
c001c0c2:	83 ec 20             	sub    esp,0x20
c001c0c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c0c9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0cd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c0d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c0d9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0e1:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c0e6:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c0ec:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c0f2:	57                   	push   edi
c001c0f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c0f7:	50                   	push   eax
c001c0f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c0fc:	50                   	push   eax
c001c0fd:	e8 92 fd ff ff       	call   c001be94 <readRoot(unsigned int*, unsigned int*, char)>
c001c102:	5a                   	pop    edx
c001c103:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c107:	e8 b8 43 fe ff       	call   c00004c4 <strlen>
c001c10c:	83 c4 10             	add    esp,0x10
c001c10f:	83 f8 03             	cmp    eax,0x3
c001c112:	77 17                	ja     c001c12b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c118:	89 03                	mov    DWORD PTR [ebx],eax
c001c11a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c11e:	89 06                	mov    DWORD PTR [esi],eax
c001c120:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c127:	b0 01                	mov    al,0x1
c001c129:	eb 19                	jmp    c001c144 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c12b:	50                   	push   eax
c001c12c:	55                   	push   ebp
c001c12d:	57                   	push   edi
c001c12e:	56                   	push   esi
c001c12f:	53                   	push   ebx
c001c130:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c138:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c13c:	e8 a7 fd ff ff       	call   c001bee8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c141:	83 c4 20             	add    esp,0x20
c001c144:	83 c4 1c             	add    esp,0x1c
c001c147:	5b                   	pop    ebx
c001c148:	5e                   	pop    esi
c001c149:	5f                   	pop    edi
c001c14a:	5d                   	pop    ebp
c001c14b:	c3                   	ret    

c001c14c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c14c:	57                   	push   edi
c001c14d:	56                   	push   esi
c001c14e:	53                   	push   ebx
c001c14f:	83 ec 10             	sub    esp,0x10
c001c152:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c156:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c15a:	85 ff                	test   edi,edi
c001c15c:	0f 84 8b 00 00 00    	je     c001c1ed <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c162:	85 f6                	test   esi,esi
c001c164:	0f 84 83 00 00 00    	je     c001c1ed <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c16a:	b8 03 00 00 00       	mov    eax,0x3
c001c16f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c174:	75 7c                	jne    c001c1f2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c176:	83 ec 0c             	sub    esp,0xc
c001c179:	6a 1c                	push   0x1c
c001c17b:	e8 17 d6 fe ff       	call   c0009797 <malloc>
c001c180:	89 07                	mov    DWORD PTR [edi],eax
c001c182:	89 c3                	mov    ebx,eax
c001c184:	58                   	pop    eax
c001c185:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c189:	50                   	push   eax
c001c18a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c18d:	50                   	push   eax
c001c18e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c192:	50                   	push   eax
c001c193:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c197:	50                   	push   eax
c001c198:	56                   	push   esi
c001c199:	e8 20 ff ff ff       	call   c001c0be <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c19e:	83 c4 20             	add    esp,0x20
c001c1a1:	84 c0                	test   al,al
c001c1a3:	74 07                	je     c001c1ac <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c1a5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c1aa:	74 0b                	je     c001c1b7 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c1ac:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c1b0:	b8 01 00 00 00       	mov    eax,0x1
c001c1b5:	eb 3b                	jmp    c001c1f2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c1b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1bb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c1bf:	89 03                	mov    DWORD PTR [ebx],eax
c001c1c1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c1c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c1d3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c1da:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c1dd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c1e4:	8a 06                	mov    al,BYTE PTR [esi]
c001c1e6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c1e9:	31 c0                	xor    eax,eax
c001c1eb:	eb 05                	jmp    c001c1f2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c1ed:	b8 04 00 00 00       	mov    eax,0x4
c001c1f2:	83 c4 10             	add    esp,0x10
c001c1f5:	5b                   	pop    ebx
c001c1f6:	5e                   	pop    esi
c001c1f7:	5f                   	pop    edi
c001c1f8:	c3                   	ret    
c001c1f9:	90                   	nop

c001c1fa <ISO9660::exists(char const*)>:
c001c1fa:	83 ec 28             	sub    esp,0x28
c001c1fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c201:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c205:	52                   	push   edx
c001c206:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c209:	52                   	push   edx
c001c20a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c20e:	52                   	push   edx
c001c20f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c213:	52                   	push   edx
c001c214:	50                   	push   eax
c001c215:	e8 a4 fe ff ff       	call   c001c0be <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c21a:	83 c4 3c             	add    esp,0x3c
c001c21d:	c3                   	ret    

c001c21e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c21e:	56                   	push   esi
c001c21f:	53                   	push   ebx
c001c220:	83 ec 14             	sub    esp,0x14
c001c223:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c227:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c22b:	85 db                	test   ebx,ebx
c001c22d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c231:	0f 94 c2             	sete   dl
c001c234:	85 f6                	test   esi,esi
c001c236:	0f 94 c0             	sete   al
c001c239:	08 c2                	or     dl,al
c001c23b:	75 68                	jne    c001c2a5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c23d:	85 c9                	test   ecx,ecx
c001c23f:	74 64                	je     c001c2a5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c241:	83 ec 0c             	sub    esp,0xc
c001c244:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c247:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c24b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c251:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c258:	50                   	push   eax
c001c259:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c25c:	50                   	push   eax
c001c25d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c261:	50                   	push   eax
c001c262:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c266:	50                   	push   eax
c001c267:	51                   	push   ecx
c001c268:	e8 51 fe ff ff       	call   c001c0be <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c26d:	83 c4 20             	add    esp,0x20
c001c270:	ba 01 00 00 00       	mov    edx,0x1
c001c275:	84 c0                	test   al,al
c001c277:	74 31                	je     c001c2aa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c279:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c27d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c284:	89 03                	mov    DWORD PTR [ebx],eax
c001c286:	ba 00 00 00 00       	mov    edx,0x0
c001c28b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c28f:	85 c0                	test   eax,eax
c001c291:	0f 95 06             	setne  BYTE PTR [esi]
c001c294:	74 14                	je     c001c2aa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c296:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c29c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2a3:	eb 05                	jmp    c001c2aa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c2a5:	ba 04 00 00 00       	mov    edx,0x4
c001c2aa:	83 c4 14             	add    esp,0x14
c001c2ad:	89 d0                	mov    eax,edx
c001c2af:	5b                   	pop    ebx
c001c2b0:	5e                   	pop    esi
c001c2b1:	c3                   	ret    

c001c2b2 <ISO9660::openDir(char const*, void**)>:
c001c2b2:	57                   	push   edi
c001c2b3:	56                   	push   esi
c001c2b4:	53                   	push   ebx
c001c2b5:	83 ec 10             	sub    esp,0x10
c001c2b8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c2bc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c2c0:	85 ff                	test   edi,edi
c001c2c2:	74 7b                	je     c001c33f <ISO9660::openDir(char const*, void**)+0x8d>
c001c2c4:	85 f6                	test   esi,esi
c001c2c6:	74 77                	je     c001c33f <ISO9660::openDir(char const*, void**)+0x8d>
c001c2c8:	83 ec 0c             	sub    esp,0xc
c001c2cb:	6a 1c                	push   0x1c
c001c2cd:	e8 c5 d4 fe ff       	call   c0009797 <malloc>
c001c2d2:	89 07                	mov    DWORD PTR [edi],eax
c001c2d4:	89 c3                	mov    ebx,eax
c001c2d6:	58                   	pop    eax
c001c2d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2db:	50                   	push   eax
c001c2dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c2df:	50                   	push   eax
c001c2e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2e4:	50                   	push   eax
c001c2e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2e9:	50                   	push   eax
c001c2ea:	56                   	push   esi
c001c2eb:	e8 ce fd ff ff       	call   c001c0be <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2f0:	83 c4 20             	add    esp,0x20
c001c2f3:	84 c0                	test   al,al
c001c2f5:	74 07                	je     c001c2fe <ISO9660::openDir(char const*, void**)+0x4c>
c001c2f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c2fc:	75 0b                	jne    c001c309 <ISO9660::openDir(char const*, void**)+0x57>
c001c2fe:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c302:	b8 01 00 00 00       	mov    eax,0x1
c001c307:	eb 3b                	jmp    c001c344 <ISO9660::openDir(char const*, void**)+0x92>
c001c309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c30d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c311:	89 03                	mov    DWORD PTR [ebx],eax
c001c313:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c31a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c31e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c325:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c32c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c32f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c336:	8a 06                	mov    al,BYTE PTR [esi]
c001c338:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c33b:	31 c0                	xor    eax,eax
c001c33d:	eb 05                	jmp    c001c344 <ISO9660::openDir(char const*, void**)+0x92>
c001c33f:	b8 04 00 00 00       	mov    eax,0x4
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	5b                   	pop    ebx
c001c348:	5e                   	pop    esi
c001c349:	5f                   	pop    edi
c001c34a:	c3                   	ret    
c001c34b:	90                   	nop

c001c34c <ISO9660::ISO9660()>:
c001c34c:	83 ec 0c             	sub    esp,0xc
c001c34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c353:	83 ec 0c             	sub    esp,0xc
c001c356:	50                   	push   eax
c001c357:	e8 dc 06 ff ff       	call   c000ca38 <Filesystem::Filesystem()>
c001c35c:	83 c4 10             	add    esp,0x10
c001c35f:	ba e4 4d 02 c0       	mov    edx,0xc0024de4
c001c364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c368:	89 10                	mov    DWORD PTR [eax],edx
c001c36a:	90                   	nop
c001c36b:	83 c4 0c             	add    esp,0xc
c001c36e:	c3                   	ret    
c001c36f:	90                   	nop

c001c370 <SoundCard::beginPlayback()>:
c001c370:	c7 44 24 04 44 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e44
c001c378:	e9 0e 67 ff ff       	jmp    c0012a8b <Krnl::panic(char const*)>
c001c37d:	90                   	nop

c001c37e <SoundCard::stopPlayback()>:
c001c37e:	c7 44 24 04 78 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e78
c001c386:	e9 00 67 ff ff       	jmp    c0012a8b <Krnl::panic(char const*)>
c001c38b:	90                   	nop

c001c38c <SoundCard::SoundCard(char const*)>:
c001c38c:	83 ec 1c             	sub    esp,0x1c
c001c38f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c393:	83 ec 08             	sub    esp,0x8
c001c396:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c39a:	50                   	push   eax
c001c39b:	e8 02 1a ff ff       	call   c000dda2 <Device::Device(char const*)>
c001c3a0:	83 c4 10             	add    esp,0x10
c001c3a3:	ba 10 4f 02 c0       	mov    edx,0xc0024f10
c001c3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3ac:	89 10                	mov    DWORD PTR [eax],edx
c001c3ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3b2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3bd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c3c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3cb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c3d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3d9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c3e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3e7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c3f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c3f9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c3fe:	7f 19                	jg     c001c419 <SoundCard::SoundCard(char const*)+0x8d>
c001c400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c404:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c408:	83 c2 54             	add    edx,0x54
c001c40b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c417:	eb e0                	jmp    c001c3f9 <SoundCard::SoundCard(char const*)+0x6d>
c001c419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c41d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c424:	90                   	nop
c001c425:	83 c4 1c             	add    esp,0x1c
c001c428:	c3                   	ret    
c001c429:	90                   	nop

c001c42a <SoundCard::~SoundCard()>:
c001c42a:	83 ec 0c             	sub    esp,0xc
c001c42d:	ba 10 4f 02 c0       	mov    edx,0xc0024f10
c001c432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c436:	89 10                	mov    DWORD PTR [eax],edx
c001c438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43c:	83 ec 0c             	sub    esp,0xc
c001c43f:	50                   	push   eax
c001c440:	e8 5b 16 ff ff       	call   c000daa0 <Device::~Device()>
c001c445:	83 c4 10             	add    esp,0x10
c001c448:	90                   	nop
c001c449:	83 c4 0c             	add    esp,0xc
c001c44c:	c3                   	ret    
c001c44d:	90                   	nop

c001c44e <SoundCard::~SoundCard()>:
c001c44e:	83 ec 0c             	sub    esp,0xc
c001c451:	83 ec 0c             	sub    esp,0xc
c001c454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c458:	e8 cd ff ff ff       	call   c001c42a <SoundCard::~SoundCard()>
c001c45d:	83 c4 10             	add    esp,0x10
c001c460:	83 ec 08             	sub    esp,0x8
c001c463:	68 e8 01 00 00       	push   0x1e8
c001c468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c46c:	e8 cf 01 ff ff       	call   c000c640 <operator delete(void*, unsigned long)>
c001c471:	83 c4 10             	add    esp,0x10
c001c474:	83 c4 0c             	add    esp,0xc
c001c477:	c3                   	ret    

c001c478 <SoundCard::configureRates(int, int, int)>:
c001c478:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c47c:	31 c0                	xor    eax,eax
c001c47e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c485:	75 20                	jne    c001c4a7 <SoundCard::configureRates(int, int, int)+0x2f>
c001c487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c48b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c491:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c495:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c4a5:	b0 01                	mov    al,0x1
c001c4a7:	c3                   	ret    

c001c4a8 <SoundCard::getSamples16(int, short*)>:
c001c4a8:	55                   	push   ebp
c001c4a9:	57                   	push   edi
c001c4aa:	31 ff                	xor    edi,edi
c001c4ac:	56                   	push   esi
c001c4ad:	53                   	push   ebx
c001c4ae:	31 db                	xor    ebx,ebx
c001c4b0:	83 ec 18             	sub    esp,0x18
c001c4b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4bb:	68 ab 4e 02 c0       	push   0xc0024eab
c001c4c0:	e8 5c 02 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001c4c5:	83 c4 0c             	add    esp,0xc
c001c4c8:	8d 04 36             	lea    eax,[esi+esi*1]
c001c4cb:	50                   	push   eax
c001c4cc:	6a 00                	push   0x0
c001c4ce:	55                   	push   ebp
c001c4cf:	e8 d4 3f fe ff       	call   c00004a8 <memset>
c001c4d4:	83 c4 10             	add    esp,0x10
c001c4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4db:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c4e2:	85 c0                	test   eax,eax
c001c4e4:	74 1b                	je     c001c501 <SoundCard::getSamples16(int, short*)+0x59>
c001c4e6:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c4ea:	75 15                	jne    c001c501 <SoundCard::getSamples16(int, short*)+0x59>
c001c4ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4f0:	55                   	push   ebp
c001c4f1:	56                   	push   esi
c001c4f2:	50                   	push   eax
c001c4f3:	e8 58 03 00 00       	call   c001c850 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c4f8:	83 c4 10             	add    esp,0x10
c001c4fb:	39 c7                	cmp    edi,eax
c001c4fd:	7d 02                	jge    c001c501 <SoundCard::getSamples16(int, short*)+0x59>
c001c4ff:	89 c7                	mov    edi,eax
c001c501:	43                   	inc    ebx
c001c502:	83 fb 20             	cmp    ebx,0x20
c001c505:	75 d0                	jne    c001c4d7 <SoundCard::getSamples16(int, short*)+0x2f>
c001c507:	83 c4 0c             	add    esp,0xc
c001c50a:	89 f8                	mov    eax,edi
c001c50c:	5b                   	pop    ebx
c001c50d:	5e                   	pop    esi
c001c50e:	5f                   	pop    edi
c001c50f:	5d                   	pop    ebp
c001c510:	c3                   	ret    
c001c511:	90                   	nop

c001c512 <SoundCard::getSamples32(int, int*)>:
c001c512:	55                   	push   ebp
c001c513:	57                   	push   edi
c001c514:	31 ff                	xor    edi,edi
c001c516:	56                   	push   esi
c001c517:	31 f6                	xor    esi,esi
c001c519:	53                   	push   ebx
c001c51a:	83 ec 10             	sub    esp,0x10
c001c51d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c521:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c525:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c529:	c1 e0 02             	shl    eax,0x2
c001c52c:	50                   	push   eax
c001c52d:	6a 00                	push   0x0
c001c52f:	55                   	push   ebp
c001c530:	e8 73 3f fe ff       	call   c00004a8 <memset>
c001c535:	83 c4 10             	add    esp,0x10
c001c538:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c53f:	85 c0                	test   eax,eax
c001c541:	74 1b                	je     c001c55e <SoundCard::getSamples32(int, int*)+0x4c>
c001c543:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c547:	75 15                	jne    c001c55e <SoundCard::getSamples32(int, int*)+0x4c>
c001c549:	53                   	push   ebx
c001c54a:	55                   	push   ebp
c001c54b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c54f:	50                   	push   eax
c001c550:	e8 f7 03 00 00       	call   c001c94c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c555:	83 c4 10             	add    esp,0x10
c001c558:	39 c6                	cmp    esi,eax
c001c55a:	7d 02                	jge    c001c55e <SoundCard::getSamples32(int, int*)+0x4c>
c001c55c:	89 c6                	mov    esi,eax
c001c55e:	47                   	inc    edi
c001c55f:	83 ff 20             	cmp    edi,0x20
c001c562:	75 d4                	jne    c001c538 <SoundCard::getSamples32(int, int*)+0x26>
c001c564:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c56a:	85 f6                	test   esi,esi
c001c56c:	75 0f                	jne    c001c57d <SoundCard::getSamples32(int, int*)+0x6b>
c001c56e:	84 c0                	test   al,al
c001c570:	74 1b                	je     c001c58d <SoundCard::getSamples32(int, int*)+0x7b>
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c577:	53                   	push   ebx
c001c578:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c57b:	eb 0d                	jmp    c001c58a <SoundCard::getSamples32(int, int*)+0x78>
c001c57d:	84 c0                	test   al,al
c001c57f:	75 0c                	jne    c001c58d <SoundCard::getSamples32(int, int*)+0x7b>
c001c581:	83 ec 0c             	sub    esp,0xc
c001c584:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c586:	53                   	push   ebx
c001c587:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c58a:	83 c4 10             	add    esp,0x10
c001c58d:	83 c4 0c             	add    esp,0xc
c001c590:	89 f0                	mov    eax,esi
c001c592:	5b                   	pop    ebx
c001c593:	5e                   	pop    esi
c001c594:	5f                   	pop    edi
c001c595:	5d                   	pop    ebp
c001c596:	c3                   	ret    
c001c597:	90                   	nop

c001c598 <SoundCard::addChannel(SoundPort*)>:
c001c598:	56                   	push   esi
c001c599:	53                   	push   ebx
c001c59a:	53                   	push   ebx
c001c59b:	31 db                	xor    ebx,ebx
c001c59d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c5a1:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c5a9:	74 27                	je     c001c5d2 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c5ab:	43                   	inc    ebx
c001c5ac:	83 fb 20             	cmp    ebx,0x20
c001c5af:	75 f0                	jne    c001c5a1 <SoundCard::addChannel(SoundPort*)+0x9>
c001c5b1:	83 ec 0c             	sub    esp,0xc
c001c5b4:	83 cb ff             	or     ebx,0xffffffff
c001c5b7:	68 d1 4e 02 c0       	push   0xc0024ed1
c001c5bc:	e8 60 01 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001c5c1:	c7 04 24 ca 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eca
c001c5c8:	e8 be 64 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001c5cd:	83 c4 10             	add    esp,0x10
c001c5d0:	eb 1b                	jmp    c001c5ed <SoundCard::addChannel(SoundPort*)+0x55>
c001c5d2:	51                   	push   ecx
c001c5d3:	51                   	push   ecx
c001c5d4:	53                   	push   ebx
c001c5d5:	68 e9 4e 02 c0       	push   0xc0024ee9
c001c5da:	e8 42 01 ff ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001c5df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c5ed:	89 d8                	mov    eax,ebx
c001c5ef:	5a                   	pop    edx
c001c5f0:	5b                   	pop    ebx
c001c5f1:	5e                   	pop    esi
c001c5f2:	c3                   	ret    
c001c5f3:	90                   	nop

c001c5f4 <SoundCard::removeChannel(int)>:
c001c5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c5fc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c607:	c3                   	ret    

c001c608 <SoundPort::SoundPort(int, int, int, int)>:
c001c608:	83 ec 0c             	sub    esp,0xc
c001c60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c622:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c626:	89 10                	mov    DWORD PTR [eax],edx
c001c628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c630:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c63b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c63e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c643:	75 13                	jne    c001c658 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c649:	8b 00                	mov    eax,DWORD PTR [eax]
c001c64b:	05 a0 0f 00 00       	add    eax,0xfa0
c001c650:	01 c0                	add    eax,eax
c001c652:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c656:	66 90                	xchg   ax,ax
c001c658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c660:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c667:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c672:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c675:	c1 e0 02             	shl    eax,0x2
c001c678:	83 ec 0c             	sub    esp,0xc
c001c67b:	50                   	push   eax
c001c67c:	e8 16 d1 fe ff       	call   c0009797 <malloc>
c001c681:	83 c4 10             	add    esp,0x10
c001c684:	89 c2                	mov    edx,eax
c001c686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c68d:	90                   	nop
c001c68e:	83 c4 0c             	add    esp,0xc
c001c691:	c3                   	ret    
c001c692:	66 90                	xchg   ax,ax

c001c694 <SoundPort::~SoundPort()>:
c001c694:	83 ec 0c             	sub    esp,0xc
c001c697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c69e:	85 c0                	test   eax,eax
c001c6a0:	74 1e                	je     c001c6c0 <SoundPort::~SoundPort()+0x2c>
c001c6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c6a9:	83 ec 0c             	sub    esp,0xc
c001c6ac:	50                   	push   eax
c001c6ad:	e8 f5 d0 fe ff       	call   c00097a7 <free>
c001c6b2:	83 c4 10             	add    esp,0x10
c001c6b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c6c0:	90                   	nop
c001c6c1:	83 c4 0c             	add    esp,0xc
c001c6c4:	c3                   	ret    
c001c6c5:	90                   	nop
c001c6c6:	66 90                	xchg   ax,ax

c001c6c8 <SoundPort::unpause()>:
c001c6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6cc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c6d0:	c3                   	ret    
c001c6d1:	90                   	nop
c001c6d2:	66 90                	xchg   ax,ax

c001c6d4 <SoundPort::pause()>:
c001c6d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6d8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c6dc:	c3                   	ret    
c001c6dd:	90                   	nop
c001c6de:	66 90                	xchg   ax,ax

c001c6e0 <SoundPort::getBufferUsed()>:
c001c6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c6e7:	c3                   	ret    

c001c6e8 <SoundPort::getBufferSize()>:
c001c6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c6ef:	c3                   	ret    

c001c6f0 <SoundPort::buffer16(short*, int)>:
c001c6f0:	55                   	push   ebp
c001c6f1:	57                   	push   edi
c001c6f2:	56                   	push   esi
c001c6f3:	53                   	push   ebx
c001c6f4:	83 ec 1c             	sub    esp,0x1c
c001c6f7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6fb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c6ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c702:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c705:	0f 84 85 00 00 00    	je     c001c790 <SoundPort::buffer16(short*, int)+0xa0>
c001c70b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c70f:	85 c9                	test   ecx,ecx
c001c711:	7e 7d                	jle    c001c790 <SoundPort::buffer16(short*, int)+0xa0>
c001c713:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c717:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c71a:	c1 e1 0f             	shl    ecx,0xf
c001c71d:	8d 70 01             	lea    esi,[eax+0x1]
c001c720:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c723:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c726:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c729:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c72c:	74 6e                	je     c001c79c <SoundPort::buffer16(short*, int)+0xac>
c001c72e:	31 f6                	xor    esi,esi
c001c730:	eb 22                	jmp    c001c754 <SoundPort::buffer16(short*, int)+0x64>
c001c732:	66 90                	xchg   ax,ax
c001c734:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c739:	8d 79 01             	lea    edi,[ecx+0x1]
c001c73c:	c1 e3 0f             	shl    ebx,0xf
c001c73f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c742:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c745:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c748:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c74b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c74e:	74 1c                	je     c001c76c <SoundPort::buffer16(short*, int)+0x7c>
c001c750:	89 c6                	mov    esi,eax
c001c752:	66 90                	xchg   ax,ax
c001c754:	8d 46 01             	lea    eax,[esi+0x1]
c001c757:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c75b:	75 d7                	jne    c001c734 <SoundPort::buffer16(short*, int)+0x44>
c001c75d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c761:	83 c4 1c             	add    esp,0x1c
c001c764:	5b                   	pop    ebx
c001c765:	5e                   	pop    esi
c001c766:	5f                   	pop    edi
c001c767:	5d                   	pop    ebp
c001c768:	c3                   	ret    
c001c769:	8d 76 00             	lea    esi,[esi+0x0]
c001c76c:	8d 46 02             	lea    eax,[esi+0x2]
c001c76f:	90                   	nop
c001c770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c774:	83 ec 0c             	sub    esp,0xc
c001c777:	68 3c 4f 02 c0       	push   0xc0024f3c
c001c77c:	e8 a0 ff fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001c781:	83 c4 10             	add    esp,0x10
c001c784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c788:	83 c4 1c             	add    esp,0x1c
c001c78b:	5b                   	pop    ebx
c001c78c:	5e                   	pop    esi
c001c78d:	5f                   	pop    edi
c001c78e:	5d                   	pop    ebp
c001c78f:	c3                   	ret    
c001c790:	83 c4 1c             	add    esp,0x1c
c001c793:	31 c0                	xor    eax,eax
c001c795:	5b                   	pop    ebx
c001c796:	5e                   	pop    esi
c001c797:	5f                   	pop    edi
c001c798:	5d                   	pop    ebp
c001c799:	c3                   	ret    
c001c79a:	66 90                	xchg   ax,ax
c001c79c:	b8 01 00 00 00       	mov    eax,0x1
c001c7a1:	eb cd                	jmp    c001c770 <SoundPort::buffer16(short*, int)+0x80>
c001c7a3:	90                   	nop

c001c7a4 <SoundPort::buffer32(int*, int)>:
c001c7a4:	55                   	push   ebp
c001c7a5:	57                   	push   edi
c001c7a6:	56                   	push   esi
c001c7a7:	53                   	push   ebx
c001c7a8:	83 ec 1c             	sub    esp,0x1c
c001c7ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7b3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7b6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c7ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7be:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7c1:	74 79                	je     c001c83c <SoundPort::buffer32(int*, int)+0x98>
c001c7c3:	85 c0                	test   eax,eax
c001c7c5:	7e 75                	jle    c001c83c <SoundPort::buffer32(int*, int)+0x98>
c001c7c7:	8d 71 01             	lea    esi,[ecx+0x1]
c001c7ca:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c7cd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c7d0:	8b 37                	mov    esi,DWORD PTR [edi]
c001c7d2:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c7d5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7d8:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7db:	74 6b                	je     c001c848 <SoundPort::buffer32(int*, int)+0xa4>
c001c7dd:	31 f6                	xor    esi,esi
c001c7df:	eb 1f                	jmp    c001c800 <SoundPort::buffer32(int*, int)+0x5c>
c001c7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7e4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c7e7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c7ea:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c7ed:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c7f0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c7f4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7f7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7fa:	74 1c                	je     c001c818 <SoundPort::buffer32(int*, int)+0x74>
c001c7fc:	89 de                	mov    esi,ebx
c001c7fe:	66 90                	xchg   ax,ax
c001c800:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c803:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c807:	75 db                	jne    c001c7e4 <SoundPort::buffer32(int*, int)+0x40>
c001c809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c80d:	83 c4 1c             	add    esp,0x1c
c001c810:	5b                   	pop    ebx
c001c811:	5e                   	pop    esi
c001c812:	5f                   	pop    edi
c001c813:	5d                   	pop    ebp
c001c814:	c3                   	ret    
c001c815:	8d 76 00             	lea    esi,[esi+0x0]
c001c818:	8d 46 02             	lea    eax,[esi+0x2]
c001c81b:	90                   	nop
c001c81c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c820:	83 ec 0c             	sub    esp,0xc
c001c823:	68 57 4f 02 c0       	push   0xc0024f57
c001c828:	e8 f4 fe fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001c82d:	83 c4 10             	add    esp,0x10
c001c830:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c834:	83 c4 1c             	add    esp,0x1c
c001c837:	5b                   	pop    ebx
c001c838:	5e                   	pop    esi
c001c839:	5f                   	pop    edi
c001c83a:	5d                   	pop    ebp
c001c83b:	c3                   	ret    
c001c83c:	83 c4 1c             	add    esp,0x1c
c001c83f:	31 c0                	xor    eax,eax
c001c841:	5b                   	pop    ebx
c001c842:	5e                   	pop    esi
c001c843:	5f                   	pop    edi
c001c844:	5d                   	pop    ebp
c001c845:	c3                   	ret    
c001c846:	66 90                	xchg   ax,ax
c001c848:	b8 01 00 00 00       	mov    eax,0x1
c001c84d:	eb cd                	jmp    c001c81c <SoundPort::buffer32(int*, int)+0x78>
c001c84f:	90                   	nop

c001c850 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c850:	57                   	push   edi
c001c851:	56                   	push   esi
c001c852:	53                   	push   ebx
c001c853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c857:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c85b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c861:	39 03                	cmp    DWORD PTR [ebx],eax
c001c863:	74 13                	je     c001c878 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c865:	83 ec 0c             	sub    esp,0xc
c001c868:	68 ac 4f 02 c0       	push   0xc0024fac
c001c86d:	e8 19 62 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001c872:	83 c4 10             	add    esp,0x10
c001c875:	8d 76 00             	lea    esi,[esi+0x0]
c001c878:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c87e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c881:	74 11                	je     c001c894 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c883:	83 ec 0c             	sub    esp,0xc
c001c886:	68 72 4f 02 c0       	push   0xc0024f72
c001c88b:	e8 fb 61 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001c890:	83 c4 10             	add    esp,0x10
c001c893:	90                   	nop
c001c894:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c89a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c89d:	74 11                	je     c001c8b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c89f:	83 ec 0c             	sub    esp,0xc
c001c8a2:	68 72 4f 02 c0       	push   0xc0024f72
c001c8a7:	e8 df 61 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001c8ac:	83 c4 10             	add    esp,0x10
c001c8af:	90                   	nop
c001c8b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c8b3:	89 c6                	mov    esi,eax
c001c8b5:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c8b9:	7e 05                	jle    c001c8c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c8bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c8bf:	90                   	nop
c001c8c0:	85 f6                	test   esi,esi
c001c8c2:	7e 30                	jle    c001c8f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c8c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c8c8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c8cb:	31 c9                	xor    ecx,ecx
c001c8cd:	01 d7                	add    edi,edx
c001c8cf:	90                   	nop
c001c8d0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c8d3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c8d6:	85 c0                	test   eax,eax
c001c8d8:	79 06                	jns    c001c8e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c8da:	05 ff 7f 00 00       	add    eax,0x7fff
c001c8df:	90                   	nop
c001c8e0:	c1 f8 0f             	sar    eax,0xf
c001c8e3:	83 c1 04             	add    ecx,0x4
c001c8e6:	66 01 02             	add    WORD PTR [edx],ax
c001c8e9:	83 c2 02             	add    edx,0x2
c001c8ec:	39 d7                	cmp    edi,edx
c001c8ee:	75 e0                	jne    c001c8d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c8f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c8f3:	90                   	nop
c001c8f4:	56                   	push   esi
c001c8f5:	89 c2                	mov    edx,eax
c001c8f7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c8fe:	29 f2                	sub    edx,esi
c001c900:	52                   	push   edx
c001c901:	50                   	push   eax
c001c902:	68 cc 4f 02 c0       	push   0xc0024fcc
c001c907:	e8 15 fe fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001c90c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c90f:	50                   	push   eax
c001c910:	01 f8                	add    eax,edi
c001c912:	50                   	push   eax
c001c913:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c916:	29 f0                	sub    eax,esi
c001c918:	c1 e0 02             	shl    eax,0x2
c001c91b:	50                   	push   eax
c001c91c:	68 fc 4f 02 c0       	push   0xc0024ffc
c001c921:	e8 fb fd fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001c926:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c929:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c92c:	83 c4 1c             	add    esp,0x1c
c001c92f:	01 d7                	add    edi,edx
c001c931:	29 f0                	sub    eax,esi
c001c933:	c1 e0 02             	shl    eax,0x2
c001c936:	50                   	push   eax
c001c937:	57                   	push   edi
c001c938:	52                   	push   edx
c001c939:	e8 a2 3a fe ff       	call   c00003e0 <memmove>
c001c93e:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c941:	83 c4 10             	add    esp,0x10
c001c944:	89 f0                	mov    eax,esi
c001c946:	5b                   	pop    ebx
c001c947:	5e                   	pop    esi
c001c948:	5f                   	pop    edi
c001c949:	c3                   	ret    
c001c94a:	66 90                	xchg   ax,ax

c001c94c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c94c:	57                   	push   edi
c001c94d:	56                   	push   esi
c001c94e:	53                   	push   ebx
c001c94f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c953:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c957:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c95b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c961:	39 06                	cmp    DWORD PTR [esi],eax
c001c963:	74 13                	je     c001c978 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001c965:	83 ec 0c             	sub    esp,0xc
c001c968:	68 20 50 02 c0       	push   0xc0025020
c001c96d:	e8 19 61 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001c972:	83 c4 10             	add    esp,0x10
c001c975:	8d 76 00             	lea    esi,[esi+0x0]
c001c978:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c97e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c981:	74 11                	je     c001c994 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001c983:	83 ec 0c             	sub    esp,0xc
c001c986:	68 8e 4f 02 c0       	push   0xc0024f8e
c001c98b:	e8 fb 60 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001c990:	83 c4 10             	add    esp,0x10
c001c993:	90                   	nop
c001c994:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001c99a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001c99d:	74 11                	je     c001c9b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001c99f:	83 ec 0c             	sub    esp,0xc
c001c9a2:	68 8e 4f 02 c0       	push   0xc0024f8e
c001c9a7:	e8 df 60 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001c9ac:	83 c4 10             	add    esp,0x10
c001c9af:	90                   	nop
c001c9b0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001c9b3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001c9b7:	7e 07                	jle    c001c9c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001c9b9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c9c0:	85 ff                	test   edi,edi
c001c9c2:	7e 1c                	jle    c001c9e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001c9c4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c9cb:	31 c0                	xor    eax,eax
c001c9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c9d0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c9d3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c9d6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001c9d9:	83 c0 04             	add    eax,0x4
c001c9dc:	39 c1                	cmp    ecx,eax
c001c9de:	75 f0                	jne    c001c9d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001c9e0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c9e3:	50                   	push   eax
c001c9e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c9e7:	29 f8                	sub    eax,edi
c001c9e9:	c1 e0 02             	shl    eax,0x2
c001c9ec:	50                   	push   eax
c001c9ed:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c9f0:	50                   	push   eax
c001c9f1:	52                   	push   edx
c001c9f2:	e8 e9 39 fe ff       	call   c00003e0 <memmove>
c001c9f7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001c9fa:	83 c4 10             	add    esp,0x10
c001c9fd:	89 f8                	mov    eax,edi
c001c9ff:	5b                   	pop    ebx
c001ca00:	5e                   	pop    esi
c001ca01:	5f                   	pop    edi
c001ca02:	c3                   	ret    
c001ca03:	90                   	nop

c001ca04 <PCI::open(int, int, void*)>:
c001ca04:	83 ec 18             	sub    esp,0x18
c001ca07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca15:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca17:	50                   	push   eax
c001ca18:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ca1b:	31 c0                	xor    eax,eax
c001ca1d:	83 c4 1c             	add    esp,0x1c
c001ca20:	c3                   	ret    
c001ca21:	90                   	nop

c001ca22 <PCI::close(int, int, void*)>:
c001ca22:	31 c0                	xor    eax,eax
c001ca24:	c3                   	ret    
c001ca25:	90                   	nop

c001ca26 <PCI::PCI()>:
c001ca26:	83 ec 0c             	sub    esp,0xc
c001ca29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca2d:	83 ec 08             	sub    esp,0x8
c001ca30:	68 3f 50 02 c0       	push   0xc002503f
c001ca35:	50                   	push   eax
c001ca36:	e8 bd 0a ff ff       	call   c000d4f8 <Bus::Bus(char const*)>
c001ca3b:	83 c4 10             	add    esp,0x10
c001ca3e:	ba 14 52 02 c0       	mov    edx,0xc0025214
c001ca43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca47:	89 10                	mov    DWORD PTR [eax],edx
c001ca49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ca57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5b:	a3 60 a3 02 c0       	mov    ds:0xc002a360,eax
c001ca60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ca6a:	0f b6 d0             	movzx  edx,al
c001ca6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca71:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ca78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ca82:	0f b6 d0             	movzx  edx,al
c001ca85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca89:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ca8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ca98:	8d 50 01             	lea    edx,[eax+0x1]
c001ca9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca9f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001caa5:	0f b6 d0             	movzx  edx,al
c001caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caac:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cab0:	83 c9 c0             	or     ecx,0xffffffc0
c001cab3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cab7:	90                   	nop
c001cab8:	83 c4 0c             	add    esp,0xc
c001cabb:	c3                   	ret    

c001cabc <PCI::readBAR8(unsigned int, int)>:
c001cabc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cac0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cac4:	f6 c2 01             	test   dl,0x1
c001cac7:	74 07                	je     c001cad0 <PCI::readBAR8(unsigned int, int)+0x14>
c001cac9:	83 e2 fc             	and    edx,0xfffffffc
c001cacc:	01 c2                	add    edx,eax
c001cace:	ec                   	in     al,dx
c001cacf:	c3                   	ret    
c001cad0:	83 e2 f0             	and    edx,0xfffffff0
c001cad3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cad6:	c3                   	ret    
c001cad7:	90                   	nop

c001cad8 <PCI::readBAR16(unsigned int, int)>:
c001cad8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cadc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cae0:	f6 c2 01             	test   dl,0x1
c001cae3:	74 08                	je     c001caed <PCI::readBAR16(unsigned int, int)+0x15>
c001cae5:	83 e2 fc             	and    edx,0xfffffffc
c001cae8:	01 c2                	add    edx,eax
c001caea:	66 ed                	in     ax,dx
c001caec:	c3                   	ret    
c001caed:	83 e2 f0             	and    edx,0xfffffff0
c001caf0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001caf4:	c3                   	ret    
c001caf5:	90                   	nop

c001caf6 <PCI::readBAR32(unsigned int, int)>:
c001caf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cafa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cafe:	f6 c2 01             	test   dl,0x1
c001cb01:	74 07                	je     c001cb0a <PCI::readBAR32(unsigned int, int)+0x14>
c001cb03:	83 e2 fc             	and    edx,0xfffffffc
c001cb06:	01 c2                	add    edx,eax
c001cb08:	ed                   	in     eax,dx
c001cb09:	c3                   	ret    
c001cb0a:	83 e2 f0             	and    edx,0xfffffff0
c001cb0d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cb10:	c3                   	ret    
c001cb11:	90                   	nop

c001cb12 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cb12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb1e:	f6 c2 01             	test   dl,0x1
c001cb21:	74 07                	je     c001cb2a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cb23:	83 e2 fc             	and    edx,0xfffffffc
c001cb26:	01 ca                	add    edx,ecx
c001cb28:	ee                   	out    dx,al
c001cb29:	c3                   	ret    
c001cb2a:	83 e2 f0             	and    edx,0xfffffff0
c001cb2d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cb30:	c3                   	ret    
c001cb31:	90                   	nop

c001cb32 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cb32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb3e:	f6 c2 01             	test   dl,0x1
c001cb41:	74 08                	je     c001cb4b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cb43:	83 e2 fc             	and    edx,0xfffffffc
c001cb46:	01 ca                	add    edx,ecx
c001cb48:	66 ef                	out    dx,ax
c001cb4a:	c3                   	ret    
c001cb4b:	83 e2 f0             	and    edx,0xfffffff0
c001cb4e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cb52:	c3                   	ret    
c001cb53:	90                   	nop

c001cb54 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cb54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb60:	f6 c2 01             	test   dl,0x1
c001cb63:	74 07                	je     c001cb6c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cb65:	83 e2 fc             	and    edx,0xfffffffc
c001cb68:	01 ca                	add    edx,ecx
c001cb6a:	ef                   	out    dx,eax
c001cb6b:	c3                   	ret    
c001cb6c:	83 e2 f0             	and    edx,0xfffffff0
c001cb6f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cb72:	c3                   	ret    
c001cb73:	90                   	nop

c001cb74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cb74:	55                   	push   ebp
c001cb75:	57                   	push   edi
c001cb76:	56                   	push   esi
c001cb77:	53                   	push   ebx
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cb7f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cb83:	89 f0                	mov    eax,esi
c001cb85:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cb89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cb8d:	3c 07                	cmp    al,0x7
c001cb8f:	76 10                	jbe    c001cba1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cb91:	83 ec 0c             	sub    esp,0xc
c001cb94:	68 47 50 02 c0       	push   0xc0025047
c001cb99:	e8 ed 5e ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001cb9e:	83 c4 10             	add    esp,0x10
c001cba1:	80 fb 0f             	cmp    bl,0xf
c001cba4:	76 10                	jbe    c001cbb6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cba6:	83 ec 0c             	sub    esp,0xc
c001cba9:	68 77 50 02 c0       	push   0xc0025077
c001cbae:	e8 d8 5e ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001cbb3:	83 c4 10             	add    esp,0x10
c001cbb6:	8d 04 36             	lea    eax,[esi+esi*1]
c001cbb9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cbbe:	83 c8 f0             	or     eax,0xfffffff0
c001cbc1:	ee                   	out    dx,al
c001cbc2:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cbc7:	89 e8                	mov    eax,ebp
c001cbc9:	ee                   	out    dx,al
c001cbca:	83 c4 0c             	add    esp,0xc
c001cbcd:	89 d8                	mov    eax,ebx
c001cbcf:	66 81 e7 fc 00       	and    di,0xfc
c001cbd4:	5b                   	pop    ebx
c001cbd5:	c1 e0 08             	shl    eax,0x8
c001cbd8:	5e                   	pop    esi
c001cbd9:	09 f8                	or     eax,edi
c001cbdb:	5f                   	pop    edi
c001cbdc:	66 0d 00 c0          	or     ax,0xc000
c001cbe0:	5d                   	pop    ebp
c001cbe1:	c3                   	ret    

c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cbe2:	57                   	push   edi
c001cbe3:	56                   	push   esi
c001cbe4:	53                   	push   ebx
c001cbe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cbe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbed:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cbf3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cbf7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cbfb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cbff:	83 ff 01             	cmp    edi,0x1
c001cc02:	75 3e                	jne    c001cc42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cc04:	89 de                	mov    esi,ebx
c001cc06:	0f b6 c0             	movzx  eax,al
c001cc09:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cc0f:	c1 e0 10             	shl    eax,0x10
c001cc12:	0f b6 c9             	movzx  ecx,cl
c001cc15:	09 f0                	or     eax,esi
c001cc17:	c1 e1 08             	shl    ecx,0x8
c001cc1a:	0f b6 d2             	movzx  edx,dl
c001cc1d:	09 c8                	or     eax,ecx
c001cc1f:	c1 e2 0b             	shl    edx,0xb
c001cc22:	09 d0                	or     eax,edx
c001cc24:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc29:	0d 00 00 00 80       	or     eax,0x80000000
c001cc2e:	ef                   	out    dx,eax
c001cc2f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cc34:	ed                   	in     eax,dx
c001cc35:	83 e3 02             	and    ebx,0x2
c001cc38:	0f b6 cb             	movzx  ecx,bl
c001cc3b:	c1 e1 03             	shl    ecx,0x3
c001cc3e:	d3 e8                	shr    eax,cl
c001cc40:	eb 43                	jmp    c001cc85 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cc42:	83 ff 02             	cmp    edi,0x2
c001cc45:	75 2c                	jne    c001cc73 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cc47:	83 ec 0c             	sub    esp,0xc
c001cc4a:	0f b6 c9             	movzx  ecx,cl
c001cc4d:	0f b6 d2             	movzx  edx,dl
c001cc50:	0f b6 fb             	movzx  edi,bl
c001cc53:	0f b6 c0             	movzx  eax,al
c001cc56:	57                   	push   edi
c001cc57:	51                   	push   ecx
c001cc58:	52                   	push   edx
c001cc59:	50                   	push   eax
c001cc5a:	56                   	push   esi
c001cc5b:	e8 14 ff ff ff       	call   c001cb74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc60:	89 c2                	mov    edx,eax
c001cc62:	ed                   	in     eax,dx
c001cc63:	83 e3 02             	and    ebx,0x2
c001cc66:	83 c4 20             	add    esp,0x20
c001cc69:	0f b6 cb             	movzx  ecx,bl
c001cc6c:	c1 e1 03             	shl    ecx,0x3
c001cc6f:	d3 e8                	shr    eax,cl
c001cc71:	eb 12                	jmp    c001cc85 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	68 a7 50 02 c0       	push   0xc00250a7
c001cc7b:	e8 0b 5e ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001cc80:	83 c4 10             	add    esp,0x10
c001cc83:	31 c0                	xor    eax,eax
c001cc85:	5b                   	pop    ebx
c001cc86:	5e                   	pop    esi
c001cc87:	5f                   	pop    edi
c001cc88:	c3                   	ret    
c001cc89:	90                   	nop

c001cc8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cc8a:	83 ec 18             	sub    esp,0x18
c001cc8d:	6a 00                	push   0x0
c001cc8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc94:	50                   	push   eax
c001cc95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc9a:	50                   	push   eax
c001cc9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cca0:	50                   	push   eax
c001cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cca5:	e8 38 ff ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccaa:	83 c4 2c             	add    esp,0x2c
c001ccad:	c3                   	ret    

c001ccae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ccae:	83 ec 18             	sub    esp,0x18
c001ccb1:	6a 0e                	push   0xe
c001ccb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccb8:	50                   	push   eax
c001ccb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccbe:	50                   	push   eax
c001ccbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccc4:	50                   	push   eax
c001ccc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccc9:	e8 14 ff ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccce:	83 c4 2c             	add    esp,0x2c
c001ccd1:	0f b6 c0             	movzx  eax,al
c001ccd4:	c3                   	ret    
c001ccd5:	90                   	nop

c001ccd6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ccd6:	55                   	push   ebp
c001ccd7:	57                   	push   edi
c001ccd8:	56                   	push   esi
c001ccd9:	53                   	push   ebx
c001ccda:	83 ec 18             	sub    esp,0x18
c001ccdd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cce2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cce7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ccec:	6a 0a                	push   0xa
c001ccee:	56                   	push   esi
c001ccef:	55                   	push   ebp
c001ccf0:	57                   	push   edi
c001ccf1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccf5:	e8 e8 fe ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccfa:	83 c4 14             	add    esp,0x14
c001ccfd:	89 c3                	mov    ebx,eax
c001ccff:	6a 0a                	push   0xa
c001cd01:	0f b6 db             	movzx  ebx,bl
c001cd04:	56                   	push   esi
c001cd05:	55                   	push   ebp
c001cd06:	57                   	push   edi
c001cd07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd0b:	e8 d2 fe ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd10:	83 c4 2c             	add    esp,0x2c
c001cd13:	25 00 ff 00 00       	and    eax,0xff00
c001cd18:	09 d8                	or     eax,ebx
c001cd1a:	5b                   	pop    ebx
c001cd1b:	5e                   	pop    esi
c001cd1c:	5f                   	pop    edi
c001cd1d:	5d                   	pop    ebp
c001cd1e:	c3                   	ret    
c001cd1f:	90                   	nop

c001cd20 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cd20:	83 ec 18             	sub    esp,0x18
c001cd23:	6a 08                	push   0x8
c001cd25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd2a:	50                   	push   eax
c001cd2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd30:	50                   	push   eax
c001cd31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd36:	50                   	push   eax
c001cd37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd3b:	e8 a2 fe ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd40:	83 c4 2c             	add    esp,0x2c
c001cd43:	0f b6 c4             	movzx  eax,ah
c001cd46:	c3                   	ret    
c001cd47:	90                   	nop

c001cd48 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cd48:	83 ec 18             	sub    esp,0x18
c001cd4b:	6a 08                	push   0x8
c001cd4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd52:	50                   	push   eax
c001cd53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd58:	50                   	push   eax
c001cd59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd5e:	50                   	push   eax
c001cd5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd63:	e8 7a fe ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd68:	83 c4 2c             	add    esp,0x2c
c001cd6b:	c3                   	ret    

c001cd6c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cd6c:	83 ec 18             	sub    esp,0x18
c001cd6f:	6a 3c                	push   0x3c
c001cd71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd76:	50                   	push   eax
c001cd77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd7c:	50                   	push   eax
c001cd7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd82:	50                   	push   eax
c001cd83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd87:	e8 56 fe ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd8c:	83 c4 2c             	add    esp,0x2c
c001cd8f:	c3                   	ret    

c001cd90 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cd90:	83 ec 18             	sub    esp,0x18
c001cd93:	6a 18                	push   0x18
c001cd95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd9a:	50                   	push   eax
c001cd9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda0:	50                   	push   eax
c001cda1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda6:	50                   	push   eax
c001cda7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdab:	e8 32 fe ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdb0:	83 c4 2c             	add    esp,0x2c
c001cdb3:	0f b6 c4             	movzx  eax,ah
c001cdb6:	c3                   	ret    
c001cdb7:	90                   	nop

c001cdb8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cdb8:	55                   	push   ebp
c001cdb9:	57                   	push   edi
c001cdba:	56                   	push   esi
c001cdbb:	53                   	push   ebx
c001cdbc:	83 ec 28             	sub    esp,0x28
c001cdbf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cdc3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cdc8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cdcd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cdd2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cdd9:	8d 43 12             	lea    eax,[ebx+0x12]
c001cddc:	83 c3 10             	add    ebx,0x10
c001cddf:	0f b6 c0             	movzx  eax,al
c001cde2:	0f b6 db             	movzx  ebx,bl
c001cde5:	50                   	push   eax
c001cde6:	51                   	push   ecx
c001cde7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cdeb:	57                   	push   edi
c001cdec:	55                   	push   ebp
c001cded:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cdf1:	e8 ec fd ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdf6:	83 c4 14             	add    esp,0x14
c001cdf9:	89 c6                	mov    esi,eax
c001cdfb:	53                   	push   ebx
c001cdfc:	c1 e6 10             	shl    esi,0x10
c001cdff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce03:	51                   	push   ecx
c001ce04:	57                   	push   edi
c001ce05:	55                   	push   ebp
c001ce06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce0a:	e8 d3 fd ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce0f:	83 c4 3c             	add    esp,0x3c
c001ce12:	0f b7 c0             	movzx  eax,ax
c001ce15:	5b                   	pop    ebx
c001ce16:	09 f0                	or     eax,esi
c001ce18:	5e                   	pop    esi
c001ce19:	5f                   	pop    edi
c001ce1a:	5d                   	pop    ebp
c001ce1b:	c3                   	ret    

c001ce1c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ce1c:	55                   	push   ebp
c001ce1d:	57                   	push   edi
c001ce1e:	56                   	push   esi
c001ce1f:	53                   	push   ebx
c001ce20:	83 ec 0c             	sub    esp,0xc
c001ce23:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce27:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ce2b:	89 f5                	mov    ebp,esi
c001ce2d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001ce33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce43:	83 f9 01             	cmp    ecx,0x1
c001ce46:	75 5d                	jne    c001cea5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001ce48:	0f b6 c8             	movzx  ecx,al
c001ce4b:	0f b6 d2             	movzx  edx,dl
c001ce4e:	c1 e1 10             	shl    ecx,0x10
c001ce51:	c1 e2 0b             	shl    edx,0xb
c001ce54:	89 f0                	mov    eax,esi
c001ce56:	25 fc 00 00 00       	and    eax,0xfc
c001ce5b:	09 c1                	or     ecx,eax
c001ce5d:	89 e8                	mov    eax,ebp
c001ce5f:	0f b6 c0             	movzx  eax,al
c001ce62:	c1 e0 08             	shl    eax,0x8
c001ce65:	09 c1                	or     ecx,eax
c001ce67:	09 d1                	or     ecx,edx
c001ce69:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ce6e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001ce74:	89 c8                	mov    eax,ecx
c001ce76:	ef                   	out    dx,eax
c001ce77:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ce7c:	ed                   	in     eax,dx
c001ce7d:	0f b7 db             	movzx  ebx,bx
c001ce80:	83 e6 02             	and    esi,0x2
c001ce83:	74 0a                	je     c001ce8f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001ce85:	0f b7 d0             	movzx  edx,ax
c001ce88:	c1 e3 10             	shl    ebx,0x10
c001ce8b:	09 d3                	or     ebx,edx
c001ce8d:	eb 05                	jmp    c001ce94 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001ce8f:	66 31 c0             	xor    ax,ax
c001ce92:	09 c3                	or     ebx,eax
c001ce94:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ce99:	89 c8                	mov    eax,ecx
c001ce9b:	ef                   	out    dx,eax
c001ce9c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cea1:	89 d8                	mov    eax,ebx
c001cea3:	eb 41                	jmp    c001cee6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cea5:	83 f9 02             	cmp    ecx,0x2
c001cea8:	75 45                	jne    c001ceef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001ceaa:	83 ec 0c             	sub    esp,0xc
c001cead:	0f b6 d2             	movzx  edx,dl
c001ceb0:	89 f1                	mov    ecx,esi
c001ceb2:	0f b6 c0             	movzx  eax,al
c001ceb5:	0f b6 f1             	movzx  esi,cl
c001ceb8:	89 e9                	mov    ecx,ebp
c001ceba:	56                   	push   esi
c001cebb:	0f b6 c9             	movzx  ecx,cl
c001cebe:	51                   	push   ecx
c001cebf:	52                   	push   edx
c001cec0:	50                   	push   eax
c001cec1:	57                   	push   edi
c001cec2:	e8 ad fc ff ff       	call   c001cb74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cec7:	89 c2                	mov    edx,eax
c001cec9:	ed                   	in     eax,dx
c001ceca:	83 c4 20             	add    esp,0x20
c001cecd:	0f b7 db             	movzx  ebx,bx
c001ced0:	f6 c2 02             	test   dl,0x2
c001ced3:	74 0c                	je     c001cee1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001ced5:	0f b7 c8             	movzx  ecx,ax
c001ced8:	89 d8                	mov    eax,ebx
c001ceda:	c1 e0 10             	shl    eax,0x10
c001cedd:	09 c8                	or     eax,ecx
c001cedf:	eb 05                	jmp    c001cee6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cee1:	66 31 c0             	xor    ax,ax
c001cee4:	09 d8                	or     eax,ebx
c001cee6:	ef                   	out    dx,eax
c001cee7:	83 c4 0c             	add    esp,0xc
c001ceea:	5b                   	pop    ebx
c001ceeb:	5e                   	pop    esi
c001ceec:	5f                   	pop    edi
c001ceed:	5d                   	pop    ebp
c001ceee:	c3                   	ret    
c001ceef:	c7 44 24 20 a7 50 02 c0 	mov    DWORD PTR [esp+0x20],0xc00250a7
c001cef7:	83 c4 0c             	add    esp,0xc
c001cefa:	5b                   	pop    ebx
c001cefb:	5e                   	pop    esi
c001cefc:	5f                   	pop    edi
c001cefd:	5d                   	pop    ebp
c001cefe:	e9 88 5b ff ff       	jmp    c0012a8b <Krnl::panic(char const*)>
c001cf03:	90                   	nop

c001cf04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cf04:	55                   	push   ebp
c001cf05:	57                   	push   edi
c001cf06:	56                   	push   esi
c001cf07:	53                   	push   ebx
c001cf08:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cf0e:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001cf15:	75 0f                	jne    c001cf26 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001cf17:	80 3d 6c a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a36c,0x0
c001cf1e:	0f 85 fa 00 00 00    	jne    c001d01e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001cf24:	eb 2f                	jmp    c001cf55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001cf26:	83 ec 0c             	sub    esp,0xc
c001cf29:	68 ad 50 02 c0       	push   0xc00250ad
c001cf2e:	e8 be c8 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001cf33:	83 c4 10             	add    esp,0x10
c001cf36:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001cf3d:	75 d8                	jne    c001cf17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001cf3f:	e4 60                	in     al,0x60
c001cf41:	3c 1c                	cmp    al,0x1c
c001cf43:	74 04                	je     c001cf49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001cf45:	3c 5a                	cmp    al,0x5a
c001cf47:	75 f6                	jne    c001cf3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001cf49:	e4 60                	in     al,0x60
c001cf4b:	3c 5a                	cmp    al,0x5a
c001cf4d:	74 fa                	je     c001cf49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001cf4f:	3c 1c                	cmp    al,0x1c
c001cf51:	74 f6                	je     c001cf49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001cf53:	eb c2                	jmp    c001cf17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001cf55:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001cf5c:	0f 85 86 00 00 00    	jne    c001cfe8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001cf62:	83 ec 0c             	sub    esp,0xc
c001cf65:	68 14 01 00 00       	push   0x114
c001cf6a:	e8 28 c8 fe ff       	call   c0009797 <malloc>
c001cf6f:	83 c4 0c             	add    esp,0xc
c001cf72:	89 c3                	mov    ebx,eax
c001cf74:	ff 35 50 99 02 c0    	push   DWORD PTR ds:0xc0029950
c001cf7a:	68 c7 50 02 c0       	push   0xc00250c7
c001cf7f:	50                   	push   eax
c001cf80:	e8 07 fd fe ff       	call   c000cc8c <File::File(char const*, Process*)>
c001cf85:	5a                   	pop    edx
c001cf86:	59                   	pop    ecx
c001cf87:	6a 01                	push   0x1
c001cf89:	53                   	push   ebx
c001cf8a:	e8 d7 fd fe ff       	call   c000cd66 <File::open(FileOpenMode)>
c001cf8f:	83 c4 0c             	add    esp,0xc
c001cf92:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001cf96:	50                   	push   eax
c001cf97:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cf9b:	50                   	push   eax
c001cf9c:	53                   	push   ebx
c001cf9d:	e8 70 00 ff ff       	call   c000d012 <File::stat(unsigned long long*, bool*)>
c001cfa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfa6:	40                   	inc    eax
c001cfa7:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfaa:	e8 e8 c7 fe ff       	call   c0009797 <malloc>
c001cfaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfb3:	a3 68 a3 02 c0       	mov    ds:0xc002a368,eax
c001cfb8:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cfbc:	5e                   	pop    esi
c001cfbd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cfbf:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001cfc3:	51                   	push   ecx
c001cfc4:	50                   	push   eax
c001cfc5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cfc9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cfcd:	53                   	push   ebx
c001cfce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cfd1:	83 c4 14             	add    esp,0x14
c001cfd4:	53                   	push   ebx
c001cfd5:	e8 ea fd fe ff       	call   c000cdc4 <File::close()>
c001cfda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfde:	83 c4 10             	add    esp,0x10
c001cfe1:	a3 64 a3 02 c0       	mov    ds:0xc002a364,eax
c001cfe6:	eb 36                	jmp    c001d01e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001cfe8:	83 ec 0c             	sub    esp,0xc
c001cfeb:	68 e0 50 02 c0       	push   0xc00250e0
c001cff0:	e8 fc c7 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001cff5:	83 c4 10             	add    esp,0x10
c001cff8:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001cfff:	0f 85 5d ff ff ff    	jne    c001cf62 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d005:	e4 60                	in     al,0x60
c001d007:	3c 1c                	cmp    al,0x1c
c001d009:	74 04                	je     c001d00f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d00b:	3c 5a                	cmp    al,0x5a
c001d00d:	75 f6                	jne    c001d005 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d00f:	e4 60                	in     al,0x60
c001d011:	3c 5a                	cmp    al,0x5a
c001d013:	74 fa                	je     c001d00f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d015:	3c 1c                	cmp    al,0x1c
c001d017:	74 f6                	je     c001d00f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d019:	e9 44 ff ff ff       	jmp    c001cf62 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d01e:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d025:	75 0b                	jne    c001d032 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d027:	31 f6                	xor    esi,esi
c001d029:	31 db                	xor    ebx,ebx
c001d02b:	31 ed                	xor    ebp,ebp
c001d02d:	e9 a3 01 00 00       	jmp    c001d1d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d032:	83 ec 0c             	sub    esp,0xc
c001d035:	68 f2 50 02 c0       	push   0xc00250f2
c001d03a:	e8 b2 c7 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d03f:	8b 15 60 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026460
c001d045:	83 c4 10             	add    esp,0x10
c001d048:	f6 c2 80             	test   dl,0x80
c001d04b:	74 0c                	je     c001d059 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d04d:	0f ba e2 0b          	bt     edx,0xb
c001d051:	72 1a                	jb     c001d06d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d053:	eb d2                	jmp    c001d027 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d055:	3c 5a                	cmp    al,0x5a
c001d057:	74 0c                	je     c001d065 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d059:	e4 60                	in     al,0x60
c001d05b:	3c 1c                	cmp    al,0x1c
c001d05d:	75 f6                	jne    c001d055 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d05f:	eb 04                	jmp    c001d065 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d061:	3c 1c                	cmp    al,0x1c
c001d063:	75 e8                	jne    c001d04d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d065:	e4 60                	in     al,0x60
c001d067:	3c 5a                	cmp    al,0x5a
c001d069:	74 fa                	je     c001d065 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d06b:	eb f4                	jmp    c001d061 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d06d:	83 ec 0c             	sub    esp,0xc
c001d070:	68 f7 50 02 c0       	push   0xc00250f7
c001d075:	e8 77 c7 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d07a:	83 c4 10             	add    esp,0x10
c001d07d:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d084:	75 a1                	jne    c001d027 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d086:	e4 60                	in     al,0x60
c001d088:	3c 5a                	cmp    al,0x5a
c001d08a:	74 04                	je     c001d090 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d08c:	3c 1c                	cmp    al,0x1c
c001d08e:	75 f6                	jne    c001d086 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d090:	e4 60                	in     al,0x60
c001d092:	3c 5a                	cmp    al,0x5a
c001d094:	74 fa                	je     c001d090 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d096:	3c 1c                	cmp    al,0x1c
c001d098:	74 f6                	je     c001d090 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d09a:	eb 8b                	jmp    c001d027 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d09c:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d0a3:	0f 85 3d 01 00 00    	jne    c001d1e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d0a9:	a1 68 a3 02 c0       	mov    eax,ds:0xc002a368
c001d0ae:	8d 7e 01             	lea    edi,[esi+0x1]
c001d0b1:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d0b4:	d4 40                	aam    0x40
c001d0b6:	d5 39                	aad    0x39
c001d0b8:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d0bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0c3:	0f 85 53 01 00 00    	jne    c001d21c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d0c9:	8b 15 68 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a368
c001d0cf:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d0d2:	d4 40                	aam    0x40
c001d0d4:	d5 39                	aad    0x39
c001d0d6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d0da:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d0de:	d4 40                	aam    0x40
c001d0e0:	d5 39                	aad    0x39
c001d0e2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d0e6:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d0ea:	d4 40                	aam    0x40
c001d0ec:	d5 39                	aad    0x39
c001d0ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d0f2:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d0f6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d0fa:	3c 56                	cmp    al,0x56
c001d0fc:	74 49                	je     c001d147 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d0fe:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d102:	d4 40                	aam    0x40
c001d104:	d5 39                	aad    0x39
c001d106:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d109:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d10d:	0f b6 c9             	movzx  ecx,cl
c001d110:	c1 e1 04             	shl    ecx,0x4
c001d113:	d4 40                	aam    0x40
c001d115:	d5 39                	aad    0x39
c001d117:	83 e8 30             	sub    eax,0x30
c001d11a:	0f b6 c0             	movzx  eax,al
c001d11d:	09 c1                	or     ecx,eax
c001d11f:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d123:	c1 e1 04             	shl    ecx,0x4
c001d126:	d4 40                	aam    0x40
c001d128:	d5 39                	aad    0x39
c001d12a:	83 e8 30             	sub    eax,0x30
c001d12d:	0f b6 c0             	movzx  eax,al
c001d130:	09 c1                	or     ecx,eax
c001d132:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d136:	c1 e1 04             	shl    ecx,0x4
c001d139:	d4 40                	aam    0x40
c001d13b:	d5 39                	aad    0x39
c001d13d:	83 e8 30             	sub    eax,0x30
c001d140:	0f b6 c0             	movzx  eax,al
c001d143:	09 c8                	or     eax,ecx
c001d145:	89 c5                	mov    ebp,eax
c001d147:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d14b:	80 f9 44             	cmp    cl,0x44
c001d14e:	74 47                	je     c001d197 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d150:	88 c8                	mov    al,cl
c001d152:	d4 40                	aam    0x40
c001d154:	d5 39                	aad    0x39
c001d156:	83 e8 30             	sub    eax,0x30
c001d159:	0f b6 f8             	movzx  edi,al
c001d15c:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d160:	c1 e7 04             	shl    edi,0x4
c001d163:	d4 40                	aam    0x40
c001d165:	d5 39                	aad    0x39
c001d167:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d16a:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d16e:	0f b6 db             	movzx  ebx,bl
c001d171:	09 fb                	or     ebx,edi
c001d173:	c1 e3 04             	shl    ebx,0x4
c001d176:	d4 40                	aam    0x40
c001d178:	d5 39                	aad    0x39
c001d17a:	83 e8 30             	sub    eax,0x30
c001d17d:	0f b6 f8             	movzx  edi,al
c001d180:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d184:	09 fb                	or     ebx,edi
c001d186:	89 df                	mov    edi,ebx
c001d188:	c1 e7 04             	shl    edi,0x4
c001d18b:	d4 40                	aam    0x40
c001d18d:	d5 39                	aad    0x39
c001d18f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d192:	0f b6 db             	movzx  ebx,bl
c001d195:	09 fb                	or     ebx,edi
c001d197:	a1 64 a3 02 c0       	mov    eax,ds:0xc002a364
c001d19c:	83 c6 10             	add    esi,0x10
c001d19f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d1a3:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d1a7:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d1aa:	3c 0a                	cmp    al,0xa
c001d1ac:	0f 85 a0 00 00 00    	jne    c001d252 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d1b2:	3c 0a                	cmp    al,0xa
c001d1b4:	0f 94 c0             	sete   al
c001d1b7:	0f b6 c0             	movzx  eax,al
c001d1ba:	01 c6                	add    esi,eax
c001d1bc:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d1c1:	0f 84 a2 00 00 00    	je     c001d269 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d1c7:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d1cf:	0f 84 94 00 00 00    	je     c001d269 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d1d5:	39 35 64 a3 02 c0    	cmp    DWORD PTR ds:0xc002a364,esi
c001d1db:	0f 8f bb fe ff ff    	jg     c001d09c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d1e1:	e9 e8 00 00 00       	jmp    c001d2ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d1e6:	83 ec 0c             	sub    esp,0xc
c001d1e9:	68 fe 50 02 c0       	push   0xc00250fe
c001d1ee:	e8 fe c5 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d1f3:	83 c4 10             	add    esp,0x10
c001d1f6:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d1fd:	0f 85 a6 fe ff ff    	jne    c001d0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d203:	e4 60                	in     al,0x60
c001d205:	3c 5a                	cmp    al,0x5a
c001d207:	74 04                	je     c001d20d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d209:	3c 1c                	cmp    al,0x1c
c001d20b:	75 f6                	jne    c001d203 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d20d:	e4 60                	in     al,0x60
c001d20f:	3c 5a                	cmp    al,0x5a
c001d211:	74 fa                	je     c001d20d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d213:	3c 1c                	cmp    al,0x1c
c001d215:	74 f6                	je     c001d20d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d217:	e9 8d fe ff ff       	jmp    c001d0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d21c:	83 ec 0c             	sub    esp,0xc
c001d21f:	68 06 51 02 c0       	push   0xc0025106
c001d224:	e8 c8 c5 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d229:	83 c4 10             	add    esp,0x10
c001d22c:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d233:	0f 85 90 fe ff ff    	jne    c001d0c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d239:	e4 60                	in     al,0x60
c001d23b:	3c 5a                	cmp    al,0x5a
c001d23d:	74 04                	je     c001d243 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d23f:	3c 1c                	cmp    al,0x1c
c001d241:	75 f6                	jne    c001d239 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d243:	e4 60                	in     al,0x60
c001d245:	3c 5a                	cmp    al,0x5a
c001d247:	74 fa                	je     c001d243 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d249:	3c 1c                	cmp    al,0x1c
c001d24b:	74 f6                	je     c001d243 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d24d:	e9 77 fe ff ff       	jmp    c001d0c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d252:	47                   	inc    edi
c001d253:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d257:	0f 84 55 ff ff ff    	je     c001d1b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d25d:	46                   	inc    esi
c001d25e:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d261:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d264:	e9 3e ff ff ff       	jmp    c001d1a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d269:	80 f9 44             	cmp    cl,0x44
c001d26c:	74 0e                	je     c001d27c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d26e:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d276:	0f 85 59 ff ff ff    	jne    c001d1d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d27c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d280:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d284:	c1 e0 04             	shl    eax,0x4
c001d287:	83 ea 30             	sub    edx,0x30
c001d28a:	09 d0                	or     eax,edx
c001d28c:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d293:	0f 85 3c ff ff ff    	jne    c001d1d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d299:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d29d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d2a1:	c1 e2 04             	shl    edx,0x4
c001d2a4:	83 e8 30             	sub    eax,0x30
c001d2a7:	09 d0                	or     eax,edx
c001d2a9:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d2b0:	0f 85 1f ff ff ff    	jne    c001d1d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d2b6:	50                   	push   eax
c001d2b7:	50                   	push   eax
c001d2b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d2bc:	50                   	push   eax
c001d2bd:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d2c4:	e8 9b 32 fe ff       	call   c0000564 <strcpy>
c001d2c9:	83 c4 10             	add    esp,0x10
c001d2cc:	eb 15                	jmp    c001d2e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001d2ce:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2d5:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d2e0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d2e3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2ea:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2f0:	5b                   	pop    ebx
c001d2f1:	5e                   	pop    esi
c001d2f2:	5f                   	pop    edi
c001d2f3:	5d                   	pop    ebp
c001d2f4:	c3                   	ret    
c001d2f5:	90                   	nop

c001d2f6 <PCI::checkBus(unsigned char)>:
c001d2f6:	56                   	push   esi
c001d2f7:	53                   	push   ebx
c001d2f8:	31 db                	xor    ebx,ebx
c001d2fa:	51                   	push   ecx
c001d2fb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d300:	52                   	push   edx
c001d301:	53                   	push   ebx
c001d302:	43                   	inc    ebx
c001d303:	56                   	push   esi
c001d304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d308:	e8 bf 07 00 00       	call   c001dacc <PCI::checkDevice(unsigned char, unsigned char)>
c001d30d:	83 c4 10             	add    esp,0x10
c001d310:	83 fb 20             	cmp    ebx,0x20
c001d313:	75 eb                	jne    c001d300 <PCI::checkBus(unsigned char)+0xa>
c001d315:	58                   	pop    eax
c001d316:	5b                   	pop    ebx
c001d317:	5e                   	pop    esi
c001d318:	c3                   	ret    
c001d319:	90                   	nop

c001d31a <PCI::foundDevice(PCIDeviceInfo)>:
c001d31a:	55                   	push   ebp
c001d31b:	57                   	push   edi
c001d31c:	56                   	push   esi
c001d31d:	53                   	push   ebx
c001d31e:	83 ec 1c             	sub    esp,0x1c
c001d321:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d325:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d32b:	0f 84 20 04 00 00    	je     c001d751 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d331:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d338:	75 37                	jne    c001d371 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001d33a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d33e:	66 81 f9 06 04       	cmp    cx,0x406
c001d343:	75 5b                	jne    c001d3a0 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001d345:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d34a:	50                   	push   eax
c001d34b:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d350:	50                   	push   eax
c001d351:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d356:	50                   	push   eax
c001d357:	53                   	push   ebx
c001d358:	e8 33 fa ff ff       	call   c001cd90 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d35d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001d361:	0f b6 c0             	movzx  eax,al
c001d364:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d368:	83 c4 2c             	add    esp,0x2c
c001d36b:	5b                   	pop    ebx
c001d36c:	5e                   	pop    esi
c001d36d:	5f                   	pop    edi
c001d36e:	5d                   	pop    ebp
c001d36f:	eb 85                	jmp    c001d2f6 <PCI::checkBus(unsigned char)>
c001d371:	83 ec 0c             	sub    esp,0xc
c001d374:	68 0f 51 02 c0       	push   0xc002510f
c001d379:	e8 73 c4 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d37e:	83 c4 10             	add    esp,0x10
c001d381:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d388:	75 b0                	jne    c001d33a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d38a:	e4 60                	in     al,0x60
c001d38c:	3c 5a                	cmp    al,0x5a
c001d38e:	74 04                	je     c001d394 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d390:	3c 1c                	cmp    al,0x1c
c001d392:	75 f6                	jne    c001d38a <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001d394:	e4 60                	in     al,0x60
c001d396:	3c 5a                	cmp    al,0x5a
c001d398:	74 fa                	je     c001d394 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d39a:	3c 1c                	cmp    al,0x1c
c001d39c:	74 f6                	je     c001d394 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d39e:	eb 9a                	jmp    c001d33a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d3a0:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d3a6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d3aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3ae:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d3b2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d3b6:	88 d0                	mov    al,dl
c001d3b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d3bd:	74 3b                	je     c001d3fa <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001d3bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3c3:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001d3c6:	85 d2                	test   edx,edx
c001d3c8:	74 24                	je     c001d3ee <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d3ca:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d3d0:	31 ef                	xor    edi,ebp
c001d3d2:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d3d8:	75 14                	jne    c001d3ee <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d3da:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d3e0:	75 0c                	jne    c001d3ee <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d3e2:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001d3e8:	0f 84 63 03 00 00    	je     c001d751 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d3ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3f2:	8b 12                	mov    edx,DWORD PTR [edx]
c001d3f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d3f8:	eb be                	jmp    c001d3b8 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001d3fa:	66 81 f9 01 06       	cmp    cx,0x601
c001d3ff:	0f 85 81 01 00 00    	jne    c001d586 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001d405:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d40c:	75 25                	jne    c001d433 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001d40e:	83 ec 0c             	sub    esp,0xc
c001d411:	68 64 01 00 00       	push   0x164
c001d416:	e8 7c c3 fe ff       	call   c0009797 <malloc>
c001d41b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d41e:	89 c5                	mov    ebp,eax
c001d420:	e8 d3 12 00 00       	call   c001e6f8 <SATABus::SATABus()>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d42f:	74 4a                	je     c001d47b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d431:	eb 2f                	jmp    c001d462 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d433:	83 ec 0c             	sub    esp,0xc
c001d436:	68 1f 51 02 c0       	push   0xc002511f
c001d43b:	e8 b1 c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d440:	83 c4 10             	add    esp,0x10
c001d443:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d44a:	75 c2                	jne    c001d40e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d44c:	e4 60                	in     al,0x60
c001d44e:	3c 1c                	cmp    al,0x1c
c001d450:	74 04                	je     c001d456 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d452:	3c 5a                	cmp    al,0x5a
c001d454:	75 f6                	jne    c001d44c <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001d456:	e4 60                	in     al,0x60
c001d458:	3c 5a                	cmp    al,0x5a
c001d45a:	74 fa                	je     c001d456 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d45c:	3c 1c                	cmp    al,0x1c
c001d45e:	74 f6                	je     c001d456 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d460:	eb ac                	jmp    c001d40e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d462:	83 ec 0c             	sub    esp,0xc
c001d465:	68 25 51 02 c0       	push   0xc0025125
c001d46a:	e8 82 c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d46f:	83 c4 10             	add    esp,0x10
c001d472:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d479:	74 1b                	je     c001d496 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001d47b:	50                   	push   eax
c001d47c:	50                   	push   eax
c001d47d:	55                   	push   ebp
c001d47e:	53                   	push   ebx
c001d47f:	e8 1a 07 ff ff       	call   c000db9e <Device::addChild(Device*)>
c001d484:	83 c4 10             	add    esp,0x10
c001d487:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d48e:	74 33                	je     c001d4c3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d490:	eb 18                	jmp    c001d4aa <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001d492:	3c 1c                	cmp    al,0x1c
c001d494:	74 0c                	je     c001d4a2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d496:	e4 60                	in     al,0x60
c001d498:	3c 5a                	cmp    al,0x5a
c001d49a:	75 f6                	jne    c001d492 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001d49c:	eb 04                	jmp    c001d4a2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d49e:	3c 1c                	cmp    al,0x1c
c001d4a0:	75 d9                	jne    c001d47b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d4a2:	e4 60                	in     al,0x60
c001d4a4:	3c 5a                	cmp    al,0x5a
c001d4a6:	74 fa                	je     c001d4a2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d4a8:	eb f4                	jmp    c001d49e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	68 2d 51 02 c0       	push   0xc002512d
c001d4b2:	e8 3a c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d4b7:	83 c4 10             	add    esp,0x10
c001d4ba:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d4c1:	74 29                	je     c001d4ec <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001d4c3:	83 ec 2c             	sub    esp,0x2c
c001d4c6:	b9 09 00 00 00       	mov    ecx,0x9
c001d4cb:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d4cf:	fc                   	cld    
c001d4d0:	89 e7                	mov    edi,esp
c001d4d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d4d4:	55                   	push   ebp
c001d4d5:	e8 0a 06 ff ff       	call   c000dae4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d4da:	83 c4 30             	add    esp,0x30
c001d4dd:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d4e4:	74 33                	je     c001d519 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d4e6:	eb 18                	jmp    c001d500 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001d4e8:	3c 1c                	cmp    al,0x1c
c001d4ea:	74 0c                	je     c001d4f8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d4ec:	e4 60                	in     al,0x60
c001d4ee:	3c 5a                	cmp    al,0x5a
c001d4f0:	75 f6                	jne    c001d4e8 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001d4f2:	eb 04                	jmp    c001d4f8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d4f4:	3c 1c                	cmp    al,0x1c
c001d4f6:	75 cb                	jne    c001d4c3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d4f8:	e4 60                	in     al,0x60
c001d4fa:	3c 5a                	cmp    al,0x5a
c001d4fc:	74 fa                	je     c001d4f8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d4fe:	eb f4                	jmp    c001d4f4 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d500:	83 ec 0c             	sub    esp,0xc
c001d503:	68 35 51 02 c0       	push   0xc0025135
c001d508:	e8 e4 c2 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d50d:	83 c4 10             	add    esp,0x10
c001d510:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d517:	74 23                	je     c001d53c <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001d519:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d51c:	6a 00                	push   0x0
c001d51e:	6a 00                	push   0x0
c001d520:	6a 00                	push   0x0
c001d522:	55                   	push   ebp
c001d523:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d530:	0f 84 1b 02 00 00    	je     c001d751 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d536:	eb 18                	jmp    c001d550 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001d538:	3c 1c                	cmp    al,0x1c
c001d53a:	74 0c                	je     c001d548 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d53c:	e4 60                	in     al,0x60
c001d53e:	3c 5a                	cmp    al,0x5a
c001d540:	75 f6                	jne    c001d538 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001d542:	eb 04                	jmp    c001d548 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d544:	3c 1c                	cmp    al,0x1c
c001d546:	75 d1                	jne    c001d519 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d548:	e4 60                	in     al,0x60
c001d54a:	3c 5a                	cmp    al,0x5a
c001d54c:	74 fa                	je     c001d548 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d54e:	eb f4                	jmp    c001d544 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	68 3d 51 02 c0       	push   0xc002513d
c001d558:	e8 94 c2 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d567:	0f 85 e4 01 00 00    	jne    c001d751 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d56d:	e4 60                	in     al,0x60
c001d56f:	3c 5a                	cmp    al,0x5a
c001d571:	74 04                	je     c001d577 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d573:	3c 1c                	cmp    al,0x1c
c001d575:	75 f6                	jne    c001d56d <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001d577:	e4 60                	in     al,0x60
c001d579:	3c 5a                	cmp    al,0x5a
c001d57b:	74 fa                	je     c001d577 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d57d:	3c 1c                	cmp    al,0x1c
c001d57f:	74 f6                	je     c001d577 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d581:	e9 cb 01 00 00       	jmp    c001d751 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d586:	66 81 f9 01 01       	cmp    cx,0x101
c001d58b:	0f 85 7a 01 00 00    	jne    c001d70b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001d591:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d598:	75 25                	jne    c001d5bf <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	68 70 02 00 00       	push   0x270
c001d5a2:	e8 f0 c1 fe ff       	call   c0009797 <malloc>
c001d5a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5aa:	89 c5                	mov    ebp,eax
c001d5ac:	e8 df 05 00 00       	call   c001db90 <IDE::IDE()>
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d5bb:	74 4a                	je     c001d607 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d5bd:	eb 2f                	jmp    c001d5ee <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001d5bf:	83 ec 0c             	sub    esp,0xc
c001d5c2:	68 45 51 02 c0       	push   0xc0025145
c001d5c7:	e8 25 c2 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d5cc:	83 c4 10             	add    esp,0x10
c001d5cf:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d5d6:	75 c2                	jne    c001d59a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d5d8:	e4 60                	in     al,0x60
c001d5da:	3c 5a                	cmp    al,0x5a
c001d5dc:	74 04                	je     c001d5e2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d5de:	3c 1c                	cmp    al,0x1c
c001d5e0:	75 f6                	jne    c001d5d8 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001d5e2:	e4 60                	in     al,0x60
c001d5e4:	3c 5a                	cmp    al,0x5a
c001d5e6:	74 fa                	je     c001d5e2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d5e8:	3c 1c                	cmp    al,0x1c
c001d5ea:	74 f6                	je     c001d5e2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d5ec:	eb ac                	jmp    c001d59a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d5ee:	83 ec 0c             	sub    esp,0xc
c001d5f1:	68 4c 51 02 c0       	push   0xc002514c
c001d5f6:	e8 f6 c1 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d5fb:	83 c4 10             	add    esp,0x10
c001d5fe:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d605:	74 1b                	je     c001d622 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001d607:	57                   	push   edi
c001d608:	57                   	push   edi
c001d609:	55                   	push   ebp
c001d60a:	53                   	push   ebx
c001d60b:	e8 8e 05 ff ff       	call   c000db9e <Device::addChild(Device*)>
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d61a:	74 33                	je     c001d64f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d61c:	eb 18                	jmp    c001d636 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001d61e:	3c 1c                	cmp    al,0x1c
c001d620:	74 0c                	je     c001d62e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d622:	e4 60                	in     al,0x60
c001d624:	3c 5a                	cmp    al,0x5a
c001d626:	75 f6                	jne    c001d61e <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001d628:	eb 04                	jmp    c001d62e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d62a:	3c 1c                	cmp    al,0x1c
c001d62c:	75 d9                	jne    c001d607 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d62e:	e4 60                	in     al,0x60
c001d630:	3c 5a                	cmp    al,0x5a
c001d632:	74 fa                	je     c001d62e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d634:	eb f4                	jmp    c001d62a <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001d636:	83 ec 0c             	sub    esp,0xc
c001d639:	68 53 51 02 c0       	push   0xc0025153
c001d63e:	e8 ae c1 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d643:	83 c4 10             	add    esp,0x10
c001d646:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d64d:	74 29                	je     c001d678 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001d64f:	83 ec 2c             	sub    esp,0x2c
c001d652:	b9 09 00 00 00       	mov    ecx,0x9
c001d657:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d65b:	fc                   	cld    
c001d65c:	89 e7                	mov    edi,esp
c001d65e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d660:	55                   	push   ebp
c001d661:	e8 7e 04 ff ff       	call   c000dae4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d666:	83 c4 30             	add    esp,0x30
c001d669:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d670:	74 33                	je     c001d6a5 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d672:	eb 18                	jmp    c001d68c <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001d674:	3c 1c                	cmp    al,0x1c
c001d676:	74 0c                	je     c001d684 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d678:	e4 60                	in     al,0x60
c001d67a:	3c 5a                	cmp    al,0x5a
c001d67c:	75 f6                	jne    c001d674 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001d67e:	eb 04                	jmp    c001d684 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d680:	3c 1c                	cmp    al,0x1c
c001d682:	75 cb                	jne    c001d64f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d684:	e4 60                	in     al,0x60
c001d686:	3c 5a                	cmp    al,0x5a
c001d688:	74 fa                	je     c001d684 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d68a:	eb f4                	jmp    c001d680 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001d68c:	83 ec 0c             	sub    esp,0xc
c001d68f:	68 5a 51 02 c0       	push   0xc002515a
c001d694:	e8 58 c1 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d699:	83 c4 10             	add    esp,0x10
c001d69c:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d6a3:	74 23                	je     c001d6c8 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001d6a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6a8:	6a 00                	push   0x0
c001d6aa:	6a 00                	push   0x0
c001d6ac:	6a 00                	push   0x0
c001d6ae:	55                   	push   ebp
c001d6af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6b2:	83 c4 10             	add    esp,0x10
c001d6b5:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d6bc:	0f 84 8f 00 00 00    	je     c001d751 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d6c2:	eb 18                	jmp    c001d6dc <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001d6c4:	3c 1c                	cmp    al,0x1c
c001d6c6:	74 0c                	je     c001d6d4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d6c8:	e4 60                	in     al,0x60
c001d6ca:	3c 5a                	cmp    al,0x5a
c001d6cc:	75 f6                	jne    c001d6c4 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001d6ce:	eb 04                	jmp    c001d6d4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d6d0:	3c 1c                	cmp    al,0x1c
c001d6d2:	75 d1                	jne    c001d6a5 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d6d4:	e4 60                	in     al,0x60
c001d6d6:	3c 5a                	cmp    al,0x5a
c001d6d8:	74 fa                	je     c001d6d4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d6da:	eb f4                	jmp    c001d6d0 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	68 61 51 02 c0       	push   0xc0025161
c001d6e4:	e8 08 c1 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d6f3:	75 5c                	jne    c001d751 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d6f5:	e4 60                	in     al,0x60
c001d6f7:	3c 5a                	cmp    al,0x5a
c001d6f9:	74 04                	je     c001d6ff <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d6fb:	3c 1c                	cmp    al,0x1c
c001d6fd:	75 f6                	jne    c001d6f5 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001d6ff:	e4 60                	in     al,0x60
c001d701:	3c 5a                	cmp    al,0x5a
c001d703:	74 fa                	je     c001d6ff <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d705:	3c 1c                	cmp    al,0x1c
c001d707:	74 f6                	je     c001d6ff <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d709:	eb 46                	jmp    c001d751 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d70b:	83 ec 0c             	sub    esp,0xc
c001d70e:	68 58 01 00 00       	push   0x158
c001d713:	e8 7f c0 fe ff       	call   c0009797 <malloc>
c001d718:	89 c5                	mov    ebp,eax
c001d71a:	58                   	pop    eax
c001d71b:	5a                   	pop    edx
c001d71c:	68 68 51 02 c0       	push   0xc0025168
c001d721:	55                   	push   ebp
c001d722:	e8 81 07 ff ff       	call   c000dea8 <DriverlessDevice::DriverlessDevice(char const*)>
c001d727:	59                   	pop    ecx
c001d728:	5e                   	pop    esi
c001d729:	55                   	push   ebp
c001d72a:	53                   	push   ebx
c001d72b:	e8 6e 04 ff ff       	call   c000db9e <Device::addChild(Device*)>
c001d730:	83 c4 10             	add    esp,0x10
c001d733:	b9 09 00 00 00       	mov    ecx,0x9
c001d738:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001d73c:	fc                   	cld    
c001d73d:	89 fe                	mov    esi,edi
c001d73f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d741:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001d745:	83 c4 1c             	add    esp,0x1c
c001d748:	5b                   	pop    ebx
c001d749:	5e                   	pop    esi
c001d74a:	5f                   	pop    edi
c001d74b:	5d                   	pop    ebp
c001d74c:	e9 93 03 ff ff       	jmp    c000dae4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d751:	83 c4 1c             	add    esp,0x1c
c001d754:	5b                   	pop    ebx
c001d755:	5e                   	pop    esi
c001d756:	5f                   	pop    edi
c001d757:	5d                   	pop    ebp
c001d758:	c3                   	ret    
c001d759:	90                   	nop

c001d75a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d75a:	55                   	push   ebp
c001d75b:	57                   	push   edi
c001d75c:	56                   	push   esi
c001d75d:	53                   	push   ebx
c001d75e:	81 ec b4 00 00 00    	sub    esp,0xb4
c001d764:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001d76b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001d772:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d776:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001d77d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d781:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001d788:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d78c:	68 82 51 02 c0       	push   0xc0025182
c001d791:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001d795:	53                   	push   ebx
c001d796:	e8 c9 2d fe ff       	call   c0000564 <strcpy>
c001d79b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001d7a0:	b2 64                	mov    dl,0x64
c001d7a2:	89 c8                	mov    eax,ecx
c001d7a4:	f6 f2                	div    dl
c001d7a6:	b2 0a                	mov    dl,0xa
c001d7a8:	83 c0 30             	add    eax,0x30
c001d7ab:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001d7af:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001d7b3:	83 c4 10             	add    esp,0x10
c001d7b6:	89 c8                	mov    eax,ecx
c001d7b8:	f6 f2                	div    dl
c001d7ba:	89 c1                	mov    ecx,eax
c001d7bc:	0f b6 c0             	movzx  eax,al
c001d7bf:	88 e9                	mov    cl,ch
c001d7c1:	f6 f2                	div    dl
c001d7c3:	88 e0                	mov    al,ah
c001d7c5:	83 c0 30             	add    eax,0x30
c001d7c8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d7cc:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001d7d0:	8d 41 30             	lea    eax,[ecx+0x30]
c001d7d3:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001d7d7:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001d7db:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001d7e0:	f6 f2                	div    dl
c001d7e2:	89 c1                	mov    ecx,eax
c001d7e4:	0f b6 c0             	movzx  eax,al
c001d7e7:	88 e9                	mov    cl,ch
c001d7e9:	f6 f2                	div    dl
c001d7eb:	88 e0                	mov    al,ah
c001d7ed:	83 c0 30             	add    eax,0x30
c001d7f0:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001d7f4:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001d7f8:	8d 41 30             	lea    eax,[ecx+0x30]
c001d7fb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001d7ff:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001d803:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001d808:	f6 f2                	div    dl
c001d80a:	89 c1                	mov    ecx,eax
c001d80c:	0f b6 c0             	movzx  eax,al
c001d80f:	88 e9                	mov    cl,ch
c001d811:	f6 f2                	div    dl
c001d813:	88 e0                	mov    al,ah
c001d815:	83 c0 30             	add    eax,0x30
c001d818:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d81f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001d823:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d827:	8d 41 30             	lea    eax,[ecx+0x30]
c001d82a:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001d82e:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001d832:	74 29                	je     c001d85d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001d834:	83 ec 0c             	sub    esp,0xc
c001d837:	53                   	push   ebx
c001d838:	e8 b4 bf fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d847:	75 14                	jne    c001d85d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001d849:	e4 60                	in     al,0x60
c001d84b:	3c 1c                	cmp    al,0x1c
c001d84d:	74 04                	je     c001d853 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d84f:	3c 5a                	cmp    al,0x5a
c001d851:	75 f6                	jne    c001d849 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001d853:	e4 60                	in     al,0x60
c001d855:	3c 5a                	cmp    al,0x5a
c001d857:	74 fa                	je     c001d853 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d859:	3c 1c                	cmp    al,0x1c
c001d85b:	74 f6                	je     c001d853 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d85d:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001d862:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001d867:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d86c:	83 ec 0c             	sub    esp,0xc
c001d86f:	6a 0c                	push   0xc
c001d871:	56                   	push   esi
c001d872:	53                   	push   ebx
c001d873:	57                   	push   edi
c001d874:	55                   	push   ebp
c001d875:	e8 68 f3 ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d87a:	83 c4 20             	add    esp,0x20
c001d87d:	56                   	push   esi
c001d87e:	53                   	push   ebx
c001d87f:	57                   	push   edi
c001d880:	55                   	push   ebp
c001d881:	e8 50 f4 ff ff       	call   c001ccd6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d886:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001d88b:	56                   	push   esi
c001d88c:	53                   	push   ebx
c001d88d:	57                   	push   edi
c001d88e:	55                   	push   ebp
c001d88f:	e8 d8 f4 ff ff       	call   c001cd6c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d894:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001d898:	83 c4 14             	add    esp,0x14
c001d89b:	6a 3c                	push   0x3c
c001d89d:	56                   	push   esi
c001d89e:	53                   	push   ebx
c001d89f:	57                   	push   edi
c001d8a0:	55                   	push   ebp
c001d8a1:	e8 3c f3 ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8a6:	0f b6 c4             	movzx  eax,ah
c001d8a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d8ad:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d8b1:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001d8b8:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001d8bd:	83 c4 20             	add    esp,0x20
c001d8c0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d8c6:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d8cd:	0f 84 38 01 00 00    	je     c001da0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001d8d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d8db:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001d8e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d8e4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d8ea:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001d8f0:	0f 8e 15 01 00 00    	jle    c001da0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001d8f6:	50                   	push   eax
c001d8f7:	50                   	push   eax
c001d8f8:	68 9d 51 02 c0       	push   0xc002519d
c001d8fd:	8d 44 24 68          	lea    eax,[esp+0x68]
c001d901:	50                   	push   eax
c001d902:	e8 5d 2c fe ff       	call   c0000564 <strcpy>
c001d907:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001d90b:	b9 0a 00 00 00       	mov    ecx,0xa
c001d910:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d914:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d918:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d91c:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001d920:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001d924:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001d928:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001d92c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001d930:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001d934:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d938:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001d93c:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001d940:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001d944:	83 c4 10             	add    esp,0x10
c001d947:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d94b:	99                   	cdq    
c001d94c:	f7 f9                	idiv   ecx
c001d94e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001d952:	99                   	cdq    
c001d953:	f7 f9                	idiv   ecx
c001d955:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d959:	83 c2 30             	add    edx,0x30
c001d95c:	83 c0 30             	add    eax,0x30
c001d95f:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001d963:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001d967:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001d96e:	74 2d                	je     c001d99d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	8d 44 24 68          	lea    eax,[esp+0x68]
c001d977:	50                   	push   eax
c001d978:	e8 74 be fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d97d:	83 c4 10             	add    esp,0x10
c001d980:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001d987:	75 14                	jne    c001d99d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001d989:	e4 60                	in     al,0x60
c001d98b:	3c 5a                	cmp    al,0x5a
c001d98d:	74 04                	je     c001d993 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d98f:	3c 1c                	cmp    al,0x1c
c001d991:	75 f6                	jne    c001d989 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001d993:	e4 60                	in     al,0x60
c001d995:	3c 5a                	cmp    al,0x5a
c001d997:	74 fa                	je     c001d993 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d999:	3c 1c                	cmp    al,0x1c
c001d99b:	74 f6                	je     c001d993 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d99d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d9a1:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001d9a6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d9ac:	8d 04 d0             	lea    eax,[eax+edx*8]
c001d9af:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001d9b6:	39 d3                	cmp    ebx,edx
c001d9b8:	75 48                	jne    c001da02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001d9ba:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001d9c1:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001d9c5:	75 3b                	jne    c001da02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001d9c7:	83 ec 0c             	sub    esp,0xc
c001d9ca:	68 cc 51 02 c0       	push   0xc00251cc
c001d9cf:	e8 4d ed fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001d9d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9d8:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001d9dd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d9e3:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001d9eb:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001d9ef:	50                   	push   eax
c001d9f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d9f4:	53                   	push   ebx
c001d9f5:	68 f1 51 02 c0       	push   0xc00251f1
c001d9fa:	e8 22 ed fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001d9ff:	83 c4 20             	add    esp,0x20
c001da02:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001da06:	e9 d0 fe ff ff       	jmp    c001d8db <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001da0b:	31 d2                	xor    edx,edx
c001da0d:	83 ec 0c             	sub    esp,0xc
c001da10:	56                   	push   esi
c001da11:	53                   	push   ebx
c001da12:	57                   	push   edi
c001da13:	52                   	push   edx
c001da14:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001da18:	55                   	push   ebp
c001da19:	e8 9a f3 ff ff       	call   c001cdb8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da1e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001da22:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001da29:	42                   	inc    edx
c001da2a:	83 c4 20             	add    esp,0x20
c001da2d:	83 fa 06             	cmp    edx,0x6
c001da30:	75 db                	jne    c001da0d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001da32:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001da37:	83 ec 0c             	sub    esp,0xc
c001da3a:	86 e0                	xchg   al,ah
c001da3c:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001da44:	6a 02                	push   0x2
c001da46:	56                   	push   esi
c001da47:	53                   	push   ebx
c001da48:	57                   	push   edi
c001da49:	55                   	push   ebp
c001da4a:	e8 93 f1 ff ff       	call   c001cbe2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da4f:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001da57:	83 c4 20             	add    esp,0x20
c001da5a:	56                   	push   esi
c001da5b:	53                   	push   ebx
c001da5c:	57                   	push   edi
c001da5d:	55                   	push   ebp
c001da5e:	e8 bd f2 ff ff       	call   c001cd20 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001da63:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001da6a:	56                   	push   esi
c001da6b:	53                   	push   ebx
c001da6c:	57                   	push   edi
c001da6d:	55                   	push   ebp
c001da6e:	e8 17 f2 ff ff       	call   c001cc8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001da73:	b9 09 00 00 00       	mov    ecx,0x9
c001da78:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001da80:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001da84:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001da8b:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001da8f:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001da96:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001da9a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001daa1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001daa5:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001daac:	83 ec 0c             	sub    esp,0xc
c001daaf:	fc                   	cld    
c001dab0:	89 e7                	mov    edi,esp
c001dab2:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001dab9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dabb:	55                   	push   ebp
c001dabc:	e8 59 f8 ff ff       	call   c001d31a <PCI::foundDevice(PCIDeviceInfo)>
c001dac1:	81 c4 dc 00 00 00    	add    esp,0xdc
c001dac7:	5b                   	pop    ebx
c001dac8:	5e                   	pop    esi
c001dac9:	5f                   	pop    edi
c001daca:	5d                   	pop    ebp
c001dacb:	c3                   	ret    

c001dacc <PCI::checkDevice(unsigned char, unsigned char)>:
c001dacc:	55                   	push   ebp
c001dacd:	57                   	push   edi
c001dace:	56                   	push   esi
c001dacf:	53                   	push   ebx
c001dad0:	83 ec 0c             	sub    esp,0xc
c001dad3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001dad7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001dadc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001dae1:	6a 00                	push   0x0
c001dae3:	56                   	push   esi
c001dae4:	57                   	push   edi
c001dae5:	55                   	push   ebp
c001dae6:	e8 9f f1 ff ff       	call   c001cc8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001daeb:	6a 00                	push   0x0
c001daed:	56                   	push   esi
c001daee:	57                   	push   edi
c001daef:	55                   	push   ebp
c001daf0:	e8 65 fc ff ff       	call   c001d75a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001daf5:	83 c4 20             	add    esp,0x20
c001daf8:	6a 00                	push   0x0
c001dafa:	56                   	push   esi
c001dafb:	57                   	push   edi
c001dafc:	55                   	push   ebp
c001dafd:	e8 ac f1 ff ff       	call   c001ccae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	84 c0                	test   al,al
c001db07:	79 27                	jns    c001db30 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001db09:	bb 01 00 00 00       	mov    ebx,0x1
c001db0e:	53                   	push   ebx
c001db0f:	56                   	push   esi
c001db10:	57                   	push   edi
c001db11:	55                   	push   ebp
c001db12:	e8 73 f1 ff ff       	call   c001cc8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001db17:	83 c4 10             	add    esp,0x10
c001db1a:	66 40                	inc    ax
c001db1c:	74 0c                	je     c001db2a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001db1e:	53                   	push   ebx
c001db1f:	56                   	push   esi
c001db20:	57                   	push   edi
c001db21:	55                   	push   ebp
c001db22:	e8 33 fc ff ff       	call   c001d75a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001db27:	83 c4 10             	add    esp,0x10
c001db2a:	43                   	inc    ebx
c001db2b:	83 fb 08             	cmp    ebx,0x8
c001db2e:	75 de                	jne    c001db0e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001db30:	83 c4 0c             	add    esp,0xc
c001db33:	5b                   	pop    ebx
c001db34:	5e                   	pop    esi
c001db35:	5f                   	pop    edi
c001db36:	5d                   	pop    ebp
c001db37:	c3                   	ret    

c001db38 <PCI::detect()>:
c001db38:	56                   	push   esi
c001db39:	53                   	push   ebx
c001db3a:	53                   	push   ebx
c001db3b:	31 db                	xor    ebx,ebx
c001db3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db41:	6a 00                	push   0x0
c001db43:	6a 00                	push   0x0
c001db45:	6a 00                	push   0x0
c001db47:	56                   	push   esi
c001db48:	e8 61 f1 ff ff       	call   c001ccae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001db4d:	83 c4 10             	add    esp,0x10
c001db50:	a8 80                	test   al,0x80
c001db52:	75 21                	jne    c001db75 <PCI::detect()+0x3d>
c001db54:	51                   	push   ecx
c001db55:	51                   	push   ecx
c001db56:	6a 00                	push   0x0
c001db58:	56                   	push   esi
c001db59:	e8 98 f7 ff ff       	call   c001d2f6 <PCI::checkBus(unsigned char)>
c001db5e:	83 c4 10             	add    esp,0x10
c001db61:	eb 24                	jmp    c001db87 <PCI::detect()+0x4f>
c001db63:	52                   	push   edx
c001db64:	52                   	push   edx
c001db65:	53                   	push   ebx
c001db66:	43                   	inc    ebx
c001db67:	56                   	push   esi
c001db68:	e8 89 f7 ff ff       	call   c001d2f6 <PCI::checkBus(unsigned char)>
c001db6d:	83 c4 10             	add    esp,0x10
c001db70:	83 fb 08             	cmp    ebx,0x8
c001db73:	74 12                	je     c001db87 <PCI::detect()+0x4f>
c001db75:	53                   	push   ebx
c001db76:	6a 00                	push   0x0
c001db78:	6a 00                	push   0x0
c001db7a:	56                   	push   esi
c001db7b:	e8 0a f1 ff ff       	call   c001cc8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001db80:	83 c4 10             	add    esp,0x10
c001db83:	66 40                	inc    ax
c001db85:	74 dc                	je     c001db63 <PCI::detect()+0x2b>
c001db87:	58                   	pop    eax
c001db88:	5b                   	pop    ebx
c001db89:	5e                   	pop    esi
c001db8a:	c3                   	ret    
c001db8b:	90                   	nop

c001db8c <IDE::close(int, int, void*)>:
c001db8c:	83 c8 ff             	or     eax,0xffffffff
c001db8f:	c3                   	ret    

c001db90 <IDE::IDE()>:
c001db90:	83 ec 0c             	sub    esp,0xc
c001db93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db97:	83 ec 08             	sub    esp,0x8
c001db9a:	68 38 52 02 c0       	push   0xc0025238
c001db9f:	50                   	push   eax
c001dba0:	e8 a7 03 ff ff       	call   c000df4c <HardDiskController::HardDiskController(char const*)>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	ba e4 52 02 c0       	mov    edx,0xc00252e4
c001dbad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbb1:	89 10                	mov    DWORD PTR [eax],edx
c001dbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbb7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001dbbe:	90                   	nop
c001dbbf:	83 c4 0c             	add    esp,0xc
c001dbc2:	c3                   	ret    
c001dbc3:	90                   	nop

c001dbc4 <IDE::prepareInterrupt(unsigned char)>:
c001dbc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dbc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dbcd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001dbd5:	c3                   	ret    

c001dbd6 <selectDrive(unsigned char, unsigned char)>:
c001dbd6:	c3                   	ret    
c001dbd7:	90                   	nop

c001dbd8 <IDE::getBase(unsigned char)>:
c001dbd8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dbdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbe1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001dbe9:	c3                   	ret    

c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001dbea:	55                   	push   ebp
c001dbeb:	57                   	push   edi
c001dbec:	56                   	push   esi
c001dbed:	53                   	push   ebx
c001dbee:	83 ec 1c             	sub    esp,0x1c
c001dbf1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dbf5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dbf9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001dbfc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dc00:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dc04:	80 f9 03             	cmp    cl,0x3
c001dc07:	77 51                	ja     c001dc5a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001dc09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc0d:	0f b6 f2             	movzx  esi,dl
c001dc10:	0f b6 db             	movzx  ebx,bl
c001dc13:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001dc16:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001dc1a:	83 ca 80             	or     edx,0xffffff80
c001dc1d:	0f b6 d2             	movzx  edx,dl
c001dc20:	52                   	push   edx
c001dc21:	6a 0c                	push   0xc
c001dc23:	56                   	push   esi
c001dc24:	57                   	push   edi
c001dc25:	e8 c0 ff ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc2a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001dc2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc33:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001dc37:	ee                   	out    dx,al
c001dc38:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001dc3d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001dc41:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001dc45:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dc49:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dc51:	83 c4 2c             	add    esp,0x2c
c001dc54:	5b                   	pop    ebx
c001dc55:	5e                   	pop    esi
c001dc56:	5f                   	pop    edi
c001dc57:	5d                   	pop    ebp
c001dc58:	eb 90                	jmp    c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc5a:	80 fb 07             	cmp    bl,0x7
c001dc5d:	77 12                	ja     c001dc71 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001dc5f:	0f b6 d2             	movzx  edx,dl
c001dc62:	0f b6 db             	movzx  ebx,bl
c001dc65:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001dc6d:	89 da                	mov    edx,ebx
c001dc6f:	eb 2f                	jmp    c001dca0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001dc71:	80 fb 0d             	cmp    bl,0xd
c001dc74:	77 13                	ja     c001dc89 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001dc76:	0f b6 d2             	movzx  edx,dl
c001dc79:	0f b6 db             	movzx  ebx,bl
c001dc7c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001dc83:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001dc87:	eb 17                	jmp    c001dca0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001dc89:	80 fb 15             	cmp    bl,0x15
c001dc8c:	77 13                	ja     c001dca1 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001dc8e:	0f b6 d2             	movzx  edx,dl
c001dc91:	0f b6 db             	movzx  ebx,bl
c001dc94:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001dc9c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001dca0:	ee                   	out    dx,al
c001dca1:	83 c4 1c             	add    esp,0x1c
c001dca4:	5b                   	pop    ebx
c001dca5:	5e                   	pop    esi
c001dca6:	5f                   	pop    edi
c001dca7:	5d                   	pop    ebp
c001dca8:	c3                   	ret    
c001dca9:	90                   	nop

c001dcaa <IDE::read(unsigned char, unsigned char)>:
c001dcaa:	55                   	push   ebp
c001dcab:	57                   	push   edi
c001dcac:	56                   	push   esi
c001dcad:	53                   	push   ebx
c001dcae:	83 ec 1c             	sub    esp,0x1c
c001dcb1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dcb5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dcb9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001dcbc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dcc0:	3c 03                	cmp    al,0x3
c001dcc2:	77 43                	ja     c001dd07 <IDE::read(unsigned char, unsigned char)+0x5d>
c001dcc4:	0f b6 f2             	movzx  esi,dl
c001dcc7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001dcca:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001dcce:	83 c8 80             	or     eax,0xffffff80
c001dcd1:	0f b6 c0             	movzx  eax,al
c001dcd4:	50                   	push   eax
c001dcd5:	6a 0c                	push   0xc
c001dcd7:	56                   	push   esi
c001dcd8:	57                   	push   edi
c001dcd9:	e8 0c ff ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcde:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001dce3:	0f b6 c3             	movzx  eax,bl
c001dce6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001dcea:	ec                   	in     al,dx
c001dceb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dcef:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001dcf4:	52                   	push   edx
c001dcf5:	6a 0c                	push   0xc
c001dcf7:	56                   	push   esi
c001dcf8:	57                   	push   edi
c001dcf9:	e8 ec fe ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcfe:	83 c4 20             	add    esp,0x20
c001dd01:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dd05:	eb 49                	jmp    c001dd50 <IDE::read(unsigned char, unsigned char)+0xa6>
c001dd07:	80 fb 07             	cmp    bl,0x7
c001dd0a:	77 12                	ja     c001dd1e <IDE::read(unsigned char, unsigned char)+0x74>
c001dd0c:	0f b6 d2             	movzx  edx,dl
c001dd0f:	0f b6 c3             	movzx  eax,bl
c001dd12:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001dd1a:	89 c2                	mov    edx,eax
c001dd1c:	eb 31                	jmp    c001dd4f <IDE::read(unsigned char, unsigned char)+0xa5>
c001dd1e:	80 fb 0d             	cmp    bl,0xd
c001dd21:	77 13                	ja     c001dd36 <IDE::read(unsigned char, unsigned char)+0x8c>
c001dd23:	0f b6 d2             	movzx  edx,dl
c001dd26:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001dd2d:	0f b6 d3             	movzx  edx,bl
c001dd30:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001dd34:	eb 19                	jmp    c001dd4f <IDE::read(unsigned char, unsigned char)+0xa5>
c001dd36:	31 c0                	xor    eax,eax
c001dd38:	80 fb 15             	cmp    bl,0x15
c001dd3b:	77 13                	ja     c001dd50 <IDE::read(unsigned char, unsigned char)+0xa6>
c001dd3d:	0f b6 d2             	movzx  edx,dl
c001dd40:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001dd48:	0f b6 d3             	movzx  edx,bl
c001dd4b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001dd4f:	ec                   	in     al,dx
c001dd50:	83 c4 1c             	add    esp,0x1c
c001dd53:	5b                   	pop    ebx
c001dd54:	5e                   	pop    esi
c001dd55:	5f                   	pop    edi
c001dd56:	5d                   	pop    ebp
c001dd57:	c3                   	ret    

c001dd58 <IDE::waitInterrupt(unsigned char)>:
c001dd58:	55                   	push   ebp
c001dd59:	57                   	push   edi
c001dd5a:	56                   	push   esi
c001dd5b:	53                   	push   ebx
c001dd5c:	31 db                	xor    ebx,ebx
c001dd5e:	83 ec 0c             	sub    esp,0xc
c001dd61:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dd65:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001dd6a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001dd72:	89 e8                	mov    eax,ebp
c001dd74:	84 c0                	test   al,al
c001dd76:	75 30                	jne    c001dda8 <IDE::waitInterrupt(unsigned char)+0x50>
c001dd78:	50                   	push   eax
c001dd79:	6a 0c                	push   0xc
c001dd7b:	56                   	push   esi
c001dd7c:	57                   	push   edi
c001dd7d:	e8 28 ff ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001dd82:	83 c4 10             	add    esp,0x10
c001dd85:	a8 01                	test   al,0x1
c001dd87:	75 27                	jne    c001ddb0 <IDE::waitInterrupt(unsigned char)+0x58>
c001dd89:	f6 c3 04             	test   bl,0x4
c001dd8c:	75 12                	jne    c001dda0 <IDE::waitInterrupt(unsigned char)+0x48>
c001dd8e:	83 fb 32             	cmp    ebx,0x32
c001dd91:	7e 0d                	jle    c001dda0 <IDE::waitInterrupt(unsigned char)+0x48>
c001dd93:	83 ec 0c             	sub    esp,0xc
c001dd96:	6a 64                	push   0x64
c001dd98:	e8 4b 86 ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001dd9d:	83 c4 10             	add    esp,0x10
c001dda0:	83 fb 3c             	cmp    ebx,0x3c
c001dda3:	74 0b                	je     c001ddb0 <IDE::waitInterrupt(unsigned char)+0x58>
c001dda5:	43                   	inc    ebx
c001dda6:	eb c2                	jmp    c001dd6a <IDE::waitInterrupt(unsigned char)+0x12>
c001dda8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ddb0:	83 c4 0c             	add    esp,0xc
c001ddb3:	89 e8                	mov    eax,ebp
c001ddb5:	5b                   	pop    ebx
c001ddb6:	5e                   	pop    esi
c001ddb7:	5f                   	pop    edi
c001ddb8:	5d                   	pop    ebp
c001ddb9:	c3                   	ret    

c001ddba <ideChannel0IRQHandler(regs*, void*)>:
c001ddba:	83 ec 10             	sub    esp,0x10
c001ddbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddc1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ddc8:	6a 07                	push   0x7
c001ddca:	6a 00                	push   0x0
c001ddcc:	50                   	push   eax
c001ddcd:	e8 d8 fe ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001ddd2:	83 c4 1c             	add    esp,0x1c
c001ddd5:	c3                   	ret    

c001ddd6 <ideChannel1IRQHandler(regs*, void*)>:
c001ddd6:	83 ec 10             	sub    esp,0x10
c001ddd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dddd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001dde4:	6a 07                	push   0x7
c001dde6:	6a 01                	push   0x1
c001dde8:	50                   	push   eax
c001dde9:	e8 bc fe ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001ddee:	83 c4 1c             	add    esp,0x1c
c001ddf1:	c3                   	ret    

c001ddf2 <IDE::enableIRQs(unsigned char, bool)>:
c001ddf2:	57                   	push   edi
c001ddf3:	56                   	push   esi
c001ddf4:	be 04 00 00 00       	mov    esi,0x4
c001ddf9:	53                   	push   ebx
c001ddfa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ddff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de03:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001de08:	0f 94 c0             	sete   al
c001de0b:	d1 e0                	shl    eax,1
c001de0d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001de14:	0f b6 c0             	movzx  eax,al
c001de17:	50                   	push   eax
c001de18:	6a 0c                	push   0xc
c001de1a:	57                   	push   edi
c001de1b:	53                   	push   ebx
c001de1c:	e8 c9 fd ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	50                   	push   eax
c001de25:	6a 0c                	push   0xc
c001de27:	57                   	push   edi
c001de28:	53                   	push   ebx
c001de29:	e8 7c fe ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001de2e:	83 c4 10             	add    esp,0x10
c001de31:	4e                   	dec    esi
c001de32:	75 f0                	jne    c001de24 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001de34:	5b                   	pop    ebx
c001de35:	5e                   	pop    esi
c001de36:	5f                   	pop    edi
c001de37:	c3                   	ret    

c001de38 <IDE::open(int, int, void*)>:
c001de38:	55                   	push   ebp
c001de39:	57                   	push   edi
c001de3a:	56                   	push   esi
c001de3b:	53                   	push   ebx
c001de3c:	83 ec 1c             	sub    esp,0x1c
c001de3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de43:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001de4c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001de55:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001de5c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001de63:	0f 85 cb 02 00 00    	jne    c001e134 <IDE::open(int, int, void*)+0x2fc>
c001de69:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001de6f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001de73:	83 e0 7f             	and    eax,0x7f
c001de76:	3c 05                	cmp    al,0x5
c001de78:	74 04                	je     c001de7e <IDE::open(int, int, void*)+0x46>
c001de7a:	3c 0f                	cmp    al,0xf
c001de7c:	75 32                	jne    c001deb0 <IDE::open(int, int, void*)+0x78>
c001de7e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001de84:	83 e0 fc             	and    eax,0xfffffffc
c001de87:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001de8e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001de94:	83 e0 fc             	and    eax,0xfffffffc
c001de97:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001de9e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001dea4:	83 e0 fc             	and    eax,0xfffffffc
c001dea7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001deae:	eb 14                	jmp    c001dec4 <IDE::open(int, int, void*)+0x8c>
c001deb0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001deba:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001dec4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001decb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ded2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ded6:	89 c6                	mov    esi,eax
c001ded8:	bf f8 0c 00 00       	mov    edi,0xcf8
c001dedd:	c1 e6 10             	shl    esi,0x10
c001dee0:	89 e8                	mov    eax,ebp
c001dee2:	89 fa                	mov    edx,edi
c001dee4:	c1 e0 0b             	shl    eax,0xb
c001dee7:	09 f0                	or     eax,esi
c001dee9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001def0:	c1 e6 08             	shl    esi,0x8
c001def3:	09 c6                	or     esi,eax
c001def5:	89 f0                	mov    eax,esi
c001def7:	0d 08 00 00 80       	or     eax,0x80000008
c001defc:	ef                   	out    dx,eax
c001defd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001df02:	89 ca                	mov    edx,ecx
c001df04:	ed                   	in     eax,dx
c001df05:	c1 e8 10             	shr    eax,0x10
c001df08:	3d ff ff 00 00       	cmp    eax,0xffff
c001df0d:	0f 84 f5 00 00 00    	je     c001e008 <IDE::open(int, int, void*)+0x1d0>
c001df13:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001df19:	89 fa                	mov    edx,edi
c001df1b:	89 f0                	mov    eax,esi
c001df1d:	ef                   	out    dx,eax
c001df1e:	b0 fe                	mov    al,0xfe
c001df20:	89 ca                	mov    edx,ecx
c001df22:	ee                   	out    dx,al
c001df23:	89 f0                	mov    eax,esi
c001df25:	89 fa                	mov    edx,edi
c001df27:	ef                   	out    dx,eax
c001df28:	89 ca                	mov    edx,ecx
c001df2a:	ed                   	in     eax,dx
c001df2b:	3c fe                	cmp    al,0xfe
c001df2d:	0f 85 a9 00 00 00    	jne    c001dfdc <IDE::open(int, int, void*)+0x1a4>
c001df33:	8b 15 48 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026448
c001df39:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001df40:	74 33                	je     c001df75 <IDE::open(int, int, void*)+0x13d>
c001df42:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001df48:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001df4c:	40                   	inc    eax
c001df4d:	83 ec 0c             	sub    esp,0xc
c001df50:	0f b6 c0             	movzx  eax,al
c001df53:	50                   	push   eax
c001df54:	55                   	push   ebp
c001df55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001df59:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001df5f:	51                   	push   ecx
c001df60:	e8 13 2b ff ff       	call   c0010a78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001df65:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001df6a:	83 c4 1c             	add    esp,0x1c
c001df6d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001df73:	eb 0a                	jmp    c001df7f <IDE::open(int, int, void*)+0x147>
c001df75:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001df7f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001df86:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001df8d:	c1 e1 10             	shl    ecx,0x10
c001df90:	c1 e0 08             	shl    eax,0x8
c001df93:	bf f8 0c 00 00       	mov    edi,0xcf8
c001df98:	09 c1                	or     ecx,eax
c001df9a:	89 fa                	mov    edx,edi
c001df9c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001dfa3:	c1 e0 0b             	shl    eax,0xb
c001dfa6:	09 c1                	or     ecx,eax
c001dfa8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001dfae:	89 c8                	mov    eax,ecx
c001dfb0:	ef                   	out    dx,eax
c001dfb1:	be fc 0c 00 00       	mov    esi,0xcfc
c001dfb6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001dfbc:	89 f2                	mov    edx,esi
c001dfbe:	ee                   	out    dx,al
c001dfbf:	89 c8                	mov    eax,ecx
c001dfc1:	89 fa                	mov    edx,edi
c001dfc3:	ef                   	out    dx,eax
c001dfc4:	89 f2                	mov    edx,esi
c001dfc6:	ed                   	in     eax,dx
c001dfc7:	0f b6 c0             	movzx  eax,al
c001dfca:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001dfd0:	74 46                	je     c001e018 <IDE::open(int, int, void*)+0x1e0>
c001dfd2:	83 ec 0c             	sub    esp,0xc
c001dfd5:	68 50 52 02 c0       	push   0xc0025250
c001dfda:	eb 34                	jmp    c001e010 <IDE::open(int, int, void*)+0x1d8>
c001dfdc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001dfe5:	75 17                	jne    c001dffe <IDE::open(int, int, void*)+0x1c6>
c001dfe7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001dfec:	74 07                	je     c001dff5 <IDE::open(int, int, void*)+0x1bd>
c001dfee:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001dff3:	75 09                	jne    c001dffe <IDE::open(int, int, void*)+0x1c6>
c001dff5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dffc:	eb 1a                	jmp    c001e018 <IDE::open(int, int, void*)+0x1e0>
c001dffe:	83 ec 0c             	sub    esp,0xc
c001e001:	68 58 52 02 c0       	push   0xc0025258
c001e006:	eb 08                	jmp    c001e010 <IDE::open(int, int, void*)+0x1d8>
c001e008:	83 ec 0c             	sub    esp,0xc
c001e00b:	68 89 52 02 c0       	push   0xc0025289
c001e010:	e8 76 4a ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001e015:	83 c4 10             	add    esp,0x10
c001e018:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e01f:	79 1a                	jns    c001e03b <IDE::open(int, int, void*)+0x203>
c001e021:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e027:	83 e0 fc             	and    eax,0xfffffffc
c001e02a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e031:	83 c0 08             	add    eax,0x8
c001e034:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e03b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e041:	89 c2                	mov    edx,eax
c001e043:	83 e2 0f             	and    edx,0xf
c001e046:	66 83 fa 08          	cmp    dx,0x8
c001e04a:	75 0a                	jne    c001e056 <IDE::open(int, int, void*)+0x21e>
c001e04c:	83 e8 02             	sub    eax,0x2
c001e04f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e056:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e05c:	89 c2                	mov    edx,eax
c001e05e:	83 e2 0f             	and    edx,0xf
c001e061:	66 83 fa 08          	cmp    dx,0x8
c001e065:	75 0a                	jne    c001e071 <IDE::open(int, int, void*)+0x239>
c001e067:	83 e8 02             	sub    eax,0x2
c001e06a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e071:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001e078:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e07f:	89 c8                	mov    eax,ecx
c001e081:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e084:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e088:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e08c:	8d 51 01             	lea    edx,[ecx+0x1]
c001e08f:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e094:	0f b6 d2             	movzx  edx,dl
c001e097:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e09e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e0a1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e0a5:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e0a9:	8d 48 02             	lea    ecx,[eax+0x2]
c001e0ac:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e0b1:	0f b6 c9             	movzx  ecx,cl
c001e0b4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e0ba:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e0bd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e0c1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e0c5:	8d 50 03             	lea    edx,[eax+0x3]
c001e0c8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e0cd:	0f b6 d2             	movzx  edx,dl
c001e0d0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e0d6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e0d9:	83 c0 04             	add    eax,0x4
c001e0dc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e0e0:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e0e4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e0ea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e0ef:	56                   	push   esi
c001e0f0:	56                   	push   esi
c001e0f1:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001e0f8:	50                   	push   eax
c001e0f9:	68 b3 52 02 c0       	push   0xc00252b3
c001e0fe:	e8 1e e6 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001e103:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e10a:	83 c4 10             	add    esp,0x10
c001e10d:	66 85 f6             	test   si,si
c001e110:	74 5f                	je     c001e171 <IDE::open(int, int, void*)+0x339>
c001e112:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e119:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e11c:	89 d0                	mov    eax,edx
c001e11e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e122:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e126:	40                   	inc    eax
c001e127:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e12d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e132:	eb 3d                	jmp    c001e171 <IDE::open(int, int, void*)+0x339>
c001e134:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e13a:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e141:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e148:	66 05 06 02          	add    ax,0x206
c001e14c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e153:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e15a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e161:	66 05 06 02          	add    ax,0x206
c001e165:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e16c:	e9 ca fe ff ff       	jmp    c001e03b <IDE::open(int, int, void*)+0x203>
c001e171:	50                   	push   eax
c001e172:	50                   	push   eax
c001e173:	6a 00                	push   0x0
c001e175:	53                   	push   ebx
c001e176:	e8 49 fa ff ff       	call   c001dbc4 <IDE::prepareInterrupt(unsigned char)>
c001e17b:	5a                   	pop    edx
c001e17c:	59                   	pop    ecx
c001e17d:	6a 01                	push   0x1
c001e17f:	53                   	push   ebx
c001e180:	e8 3f fa ff ff       	call   c001dbc4 <IDE::prepareInterrupt(unsigned char)>
c001e185:	83 c4 0c             	add    esp,0xc
c001e188:	6a 00                	push   0x0
c001e18a:	6a 00                	push   0x0
c001e18c:	53                   	push   ebx
c001e18d:	e8 60 fc ff ff       	call   c001ddf2 <IDE::enableIRQs(unsigned char, bool)>
c001e192:	83 c4 0c             	add    esp,0xc
c001e195:	6a 00                	push   0x0
c001e197:	6a 01                	push   0x1
c001e199:	53                   	push   ebx
c001e19a:	e8 53 fc ff ff       	call   c001ddf2 <IDE::enableIRQs(unsigned char, bool)>
c001e19f:	83 c4 10             	add    esp,0x10
c001e1a2:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e1a9:	74 34                	je     c001e1df <IDE::open(int, int, void*)+0x3a7>
c001e1ab:	83 ec 0c             	sub    esp,0xc
c001e1ae:	53                   	push   ebx
c001e1af:	6a 01                	push   0x1
c001e1b1:	68 ba dd 01 c0       	push   0xc001ddba
c001e1b6:	6a 0e                	push   0xe
c001e1b8:	53                   	push   ebx
c001e1b9:	e8 8c f9 fe ff       	call   c000db4a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1be:	83 c4 14             	add    esp,0x14
c001e1c1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e1c7:	53                   	push   ebx
c001e1c8:	6a 01                	push   0x1
c001e1ca:	68 d6 dd 01 c0       	push   0xc001ddd6
c001e1cf:	6a 0f                	push   0xf
c001e1d1:	53                   	push   ebx
c001e1d2:	e8 73 f9 fe ff       	call   c000db4a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1d7:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e1dd:	eb 38                	jmp    c001e217 <IDE::open(int, int, void*)+0x3df>
c001e1df:	83 ec 0c             	sub    esp,0xc
c001e1e2:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e1ec:	53                   	push   ebx
c001e1ed:	6a 00                	push   0x0
c001e1ef:	68 ba dd 01 c0       	push   0xc001ddba
c001e1f4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e1fa:	53                   	push   ebx
c001e1fb:	e8 4a f9 fe ff       	call   c000db4a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e200:	83 c4 14             	add    esp,0x14
c001e203:	53                   	push   ebx
c001e204:	6a 00                	push   0x0
c001e206:	68 d6 dd 01 c0       	push   0xc001ddd6
c001e20b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e211:	53                   	push   ebx
c001e212:	e8 33 f9 fe ff       	call   c000db4a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e217:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e219:	83 c4 20             	add    esp,0x20
c001e21c:	83 ec 0c             	sub    esp,0xc
c001e21f:	53                   	push   ebx
c001e220:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e223:	83 c4 0c             	add    esp,0xc
c001e226:	6a 07                	push   0x7
c001e228:	6a 00                	push   0x0
c001e22a:	53                   	push   ebx
c001e22b:	e8 7a fa ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e230:	83 c4 0c             	add    esp,0xc
c001e233:	6a 07                	push   0x7
c001e235:	6a 01                	push   0x1
c001e237:	53                   	push   ebx
c001e238:	e8 6d fa ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e23d:	83 c4 0c             	add    esp,0xc
c001e240:	6a 01                	push   0x1
c001e242:	6a 00                	push   0x0
c001e244:	53                   	push   ebx
c001e245:	e8 a8 fb ff ff       	call   c001ddf2 <IDE::enableIRQs(unsigned char, bool)>
c001e24a:	83 c4 0c             	add    esp,0xc
c001e24d:	6a 01                	push   0x1
c001e24f:	6a 01                	push   0x1
c001e251:	53                   	push   ebx
c001e252:	e8 9b fb ff ff       	call   c001ddf2 <IDE::enableIRQs(unsigned char, bool)>
c001e257:	83 c4 2c             	add    esp,0x2c
c001e25a:	31 c0                	xor    eax,eax
c001e25c:	5b                   	pop    ebx
c001e25d:	5e                   	pop    esi
c001e25e:	5f                   	pop    edi
c001e25f:	5d                   	pop    ebp
c001e260:	c3                   	ret    
c001e261:	90                   	nop

c001e262 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e262:	55                   	push   ebp
c001e263:	57                   	push   edi
c001e264:	56                   	push   esi
c001e265:	53                   	push   ebx
c001e266:	83 ec 1c             	sub    esp,0x1c
c001e269:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e26d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e271:	8d 50 f8             	lea    edx,[eax-0x8]
c001e274:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e278:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e27c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e280:	80 fa 03             	cmp    dl,0x3
c001e283:	77 5d                	ja     c001e2e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001e285:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e289:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e28d:	0f b6 db             	movzx  ebx,bl
c001e290:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e293:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001e297:	83 ca 80             	or     edx,0xffffff80
c001e29a:	0f b6 d2             	movzx  edx,dl
c001e29d:	52                   	push   edx
c001e29e:	6a 0c                	push   0xc
c001e2a0:	53                   	push   ebx
c001e2a1:	56                   	push   esi
c001e2a2:	e8 43 f9 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2a7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e2ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e2b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e2b4:	0f b6 c0             	movzx  eax,al
c001e2b7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001e2bb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e2bd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e2c2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e2c6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e2ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e2ce:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e2d6:	83 c4 2c             	add    esp,0x2c
c001e2d9:	5b                   	pop    ebx
c001e2da:	5e                   	pop    esi
c001e2db:	5f                   	pop    edi
c001e2dc:	5d                   	pop    ebp
c001e2dd:	e9 08 f9 ff ff       	jmp    c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2e2:	3c 07                	cmp    al,0x7
c001e2e4:	77 10                	ja     c001e2f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001e2e6:	0f b6 db             	movzx  ebx,bl
c001e2e9:	0f b6 d0             	movzx  edx,al
c001e2ec:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001e2f4:	eb 2d                	jmp    c001e323 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e2f6:	3c 0d                	cmp    al,0xd
c001e2f8:	77 13                	ja     c001e30d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001e2fa:	0f b6 db             	movzx  ebx,bl
c001e2fd:	0f b6 c0             	movzx  eax,al
c001e300:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001e307:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001e30b:	eb 16                	jmp    c001e323 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e30d:	3c 15                	cmp    al,0x15
c001e30f:	77 14                	ja     c001e325 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001e311:	0f b6 db             	movzx  ebx,bl
c001e314:	0f b6 c0             	movzx  eax,al
c001e317:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001e31f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001e323:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e325:	83 c4 1c             	add    esp,0x1c
c001e328:	5b                   	pop    ebx
c001e329:	5e                   	pop    esi
c001e32a:	5f                   	pop    edi
c001e32b:	5d                   	pop    ebp
c001e32c:	c3                   	ret    
c001e32d:	90                   	nop

c001e32e <IDE::detect()>:
c001e32e:	55                   	push   ebp
c001e32f:	57                   	push   edi
c001e330:	56                   	push   esi
c001e331:	53                   	push   ebx
c001e332:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001e338:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001e33f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001e346:	0f 85 97 02 00 00    	jne    c001e5e3 <IDE::detect()+0x2b5>
c001e34c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e353:	31 f6                	xor    esi,esi
c001e355:	31 ed                	xor    ebp,ebp
c001e357:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e35f:	89 e8                	mov    eax,ebp
c001e361:	c1 e0 06             	shl    eax,0x6
c001e364:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e36c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e370:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e374:	c1 e0 04             	shl    eax,0x4
c001e377:	83 c8 a0             	or     eax,0xffffffa0
c001e37a:	0f b6 c0             	movzx  eax,al
c001e37d:	50                   	push   eax
c001e37e:	6a 06                	push   0x6
c001e380:	56                   	push   esi
c001e381:	53                   	push   ebx
c001e382:	e8 63 f8 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e387:	83 c4 0c             	add    esp,0xc
c001e38a:	6a 0c                	push   0xc
c001e38c:	56                   	push   esi
c001e38d:	53                   	push   ebx
c001e38e:	e8 17 f9 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e393:	83 c4 0c             	add    esp,0xc
c001e396:	6a 0c                	push   0xc
c001e398:	56                   	push   esi
c001e399:	53                   	push   ebx
c001e39a:	e8 0b f9 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e39f:	83 c4 0c             	add    esp,0xc
c001e3a2:	6a 0c                	push   0xc
c001e3a4:	56                   	push   esi
c001e3a5:	53                   	push   ebx
c001e3a6:	e8 ff f8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e3ab:	83 c4 0c             	add    esp,0xc
c001e3ae:	6a 0c                	push   0xc
c001e3b0:	56                   	push   esi
c001e3b1:	53                   	push   ebx
c001e3b2:	e8 f3 f8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e3b7:	68 ec 00 00 00       	push   0xec
c001e3bc:	6a 07                	push   0x7
c001e3be:	56                   	push   esi
c001e3bf:	53                   	push   ebx
c001e3c0:	e8 25 f8 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3c5:	83 c4 1c             	add    esp,0x1c
c001e3c8:	6a 0c                	push   0xc
c001e3ca:	56                   	push   esi
c001e3cb:	53                   	push   ebx
c001e3cc:	e8 d9 f8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e3d1:	83 c4 0c             	add    esp,0xc
c001e3d4:	6a 0c                	push   0xc
c001e3d6:	56                   	push   esi
c001e3d7:	53                   	push   ebx
c001e3d8:	e8 cd f8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e3dd:	83 c4 0c             	add    esp,0xc
c001e3e0:	6a 0c                	push   0xc
c001e3e2:	56                   	push   esi
c001e3e3:	53                   	push   ebx
c001e3e4:	e8 c1 f8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e3e9:	83 c4 0c             	add    esp,0xc
c001e3ec:	6a 0c                	push   0xc
c001e3ee:	56                   	push   esi
c001e3ef:	53                   	push   ebx
c001e3f0:	e8 b5 f8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e3f5:	83 c4 0c             	add    esp,0xc
c001e3f8:	6a 0c                	push   0xc
c001e3fa:	56                   	push   esi
c001e3fb:	53                   	push   ebx
c001e3fc:	e8 a9 f8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e401:	83 c4 10             	add    esp,0x10
c001e404:	84 c0                	test   al,al
c001e406:	0f 84 5f 01 00 00    	je     c001e56b <IDE::detect()+0x23d>
c001e40c:	31 ff                	xor    edi,edi
c001e40e:	50                   	push   eax
c001e40f:	6a 0c                	push   0xc
c001e411:	56                   	push   esi
c001e412:	53                   	push   ebx
c001e413:	e8 92 f8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e418:	83 c4 10             	add    esp,0x10
c001e41b:	a8 01                	test   al,0x1
c001e41d:	0f 85 69 01 00 00    	jne    c001e58c <IDE::detect()+0x25e>
c001e423:	84 c0                	test   al,al
c001e425:	78 04                	js     c001e42b <IDE::detect()+0xfd>
c001e427:	a8 08                	test   al,0x8
c001e429:	75 23                	jne    c001e44e <IDE::detect()+0x120>
c001e42b:	47                   	inc    edi
c001e42c:	81 ff 17 01 00 00    	cmp    edi,0x117
c001e432:	7e da                	jle    c001e40e <IDE::detect()+0xe0>
c001e434:	83 ec 0c             	sub    esp,0xc
c001e437:	6a 32                	push   0x32
c001e439:	e8 aa 7f ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001e43e:	83 c4 10             	add    esp,0x10
c001e441:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001e447:	75 c5                	jne    c001e40e <IDE::detect()+0xe0>
c001e449:	e9 3e 01 00 00       	jmp    c001e58c <IDE::detect()+0x25e>
c001e44e:	31 c9                	xor    ecx,ecx
c001e450:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001e454:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001e458:	83 ec 0c             	sub    esp,0xc
c001e45b:	68 80 00 00 00       	push   0x80
c001e460:	57                   	push   edi
c001e461:	6a 00                	push   0x0
c001e463:	56                   	push   esi
c001e464:	53                   	push   ebx
c001e465:	e8 f8 fd ff ff       	call   c001e262 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e46a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001e46f:	89 e8                	mov    eax,ebp
c001e471:	89 d1                	mov    ecx,edx
c001e473:	c1 e0 06             	shl    eax,0x6
c001e476:	01 d8                	add    eax,ebx
c001e478:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001e47f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001e486:	89 f2                	mov    edx,esi
c001e488:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001e48e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001e492:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001e498:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e49c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001e4a3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001e4ab:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001e4b2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001e4ba:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001e4c0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001e4c7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001e4cd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001e4d1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e4d5:	83 c4 20             	add    esp,0x20
c001e4d8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e4db:	83 c0 02             	add    eax,0x2
c001e4de:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e4e4:	83 c7 02             	add    edi,0x2
c001e4e7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e4ea:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e4f0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e4f4:	75 e2                	jne    c001e4d8 <IDE::detect()+0x1aa>
c001e4f6:	89 e8                	mov    eax,ebp
c001e4f8:	c1 e0 06             	shl    eax,0x6
c001e4fb:	01 d8                	add    eax,ebx
c001e4fd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e503:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e50a:	66 c1 ea 09          	shr    dx,0x9
c001e50e:	83 e2 01             	and    edx,0x1
c001e511:	84 c9                	test   cl,cl
c001e513:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e519:	75 22                	jne    c001e53d <IDE::detect()+0x20f>
c001e51b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e522:	74 46                	je     c001e56a <IDE::detect()+0x23c>
c001e524:	83 ec 0c             	sub    esp,0xc
c001e527:	68 7c 01 00 00       	push   0x17c
c001e52c:	e8 66 b2 fe ff       	call   c0009797 <malloc>
c001e531:	89 c7                	mov    edi,eax
c001e533:	89 04 24             	mov    DWORD PTR [esp],eax
c001e536:	e8 49 06 00 00       	call   c001eb84 <ATA::ATA()>
c001e53b:	eb 17                	jmp    c001e554 <IDE::detect()+0x226>
c001e53d:	83 ec 0c             	sub    esp,0xc
c001e540:	68 84 01 00 00       	push   0x184
c001e545:	e8 4d b2 fe ff       	call   c0009797 <malloc>
c001e54a:	89 c7                	mov    edi,eax
c001e54c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e54f:	e8 b8 0c 00 00       	call   c001f20c <ATAPI::ATAPI()>
c001e554:	5a                   	pop    edx
c001e555:	59                   	pop    ecx
c001e556:	57                   	push   edi
c001e557:	53                   	push   ebx
c001e558:	e8 41 f6 fe ff       	call   c000db9e <Device::addChild(Device*)>
c001e55d:	8b 07                	mov    eax,DWORD PTR [edi]
c001e55f:	53                   	push   ebx
c001e560:	55                   	push   ebp
c001e561:	6a 00                	push   0x0
c001e563:	57                   	push   edi
c001e564:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e567:	83 c4 20             	add    esp,0x20
c001e56a:	45                   	inc    ebp
c001e56b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e570:	74 0d                	je     c001e57f <IDE::detect()+0x251>
c001e572:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e57a:	e9 e0 fd ff ff       	jmp    c001e35f <IDE::detect()+0x31>
c001e57f:	4e                   	dec    esi
c001e580:	74 61                	je     c001e5e3 <IDE::detect()+0x2b5>
c001e582:	be 01 00 00 00       	mov    esi,0x1
c001e587:	e9 cb fd ff ff       	jmp    c001e357 <IDE::detect()+0x29>
c001e58c:	50                   	push   eax
c001e58d:	6a 04                	push   0x4
c001e58f:	56                   	push   esi
c001e590:	53                   	push   ebx
c001e591:	e8 14 f7 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e596:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e59a:	83 c4 0c             	add    esp,0xc
c001e59d:	6a 05                	push   0x5
c001e59f:	56                   	push   esi
c001e5a0:	53                   	push   ebx
c001e5a1:	e8 04 f7 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e5a6:	83 c4 10             	add    esp,0x10
c001e5a9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e5ad:	80 fa 14             	cmp    dl,0x14
c001e5b0:	75 04                	jne    c001e5b6 <IDE::detect()+0x288>
c001e5b2:	3c eb                	cmp    al,0xeb
c001e5b4:	eb 07                	jmp    c001e5bd <IDE::detect()+0x28f>
c001e5b6:	3c 96                	cmp    al,0x96
c001e5b8:	75 b1                	jne    c001e56b <IDE::detect()+0x23d>
c001e5ba:	80 fa 69             	cmp    dl,0x69
c001e5bd:	75 ac                	jne    c001e56b <IDE::detect()+0x23d>
c001e5bf:	68 a1 00 00 00       	push   0xa1
c001e5c4:	6a 07                	push   0x7
c001e5c6:	56                   	push   esi
c001e5c7:	53                   	push   ebx
c001e5c8:	e8 1d f6 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5cd:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e5d4:	e8 0f 7e ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001e5d9:	83 c4 10             	add    esp,0x10
c001e5dc:	b1 01                	mov    cl,0x1
c001e5de:	e9 6d fe ff ff       	jmp    c001e450 <IDE::detect()+0x122>
c001e5e3:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e5e9:	5b                   	pop    ebx
c001e5ea:	5e                   	pop    esi
c001e5eb:	5f                   	pop    edi
c001e5ec:	5d                   	pop    ebp
c001e5ed:	c3                   	ret    

c001e5ee <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e5ee:	55                   	push   ebp
c001e5ef:	57                   	push   edi
c001e5f0:	56                   	push   esi
c001e5f1:	53                   	push   ebx
c001e5f2:	83 ec 1c             	sub    esp,0x1c
c001e5f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e5f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e5fd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e601:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e605:	88 c3                	mov    bl,al
c001e607:	84 c0                	test   al,al
c001e609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e60d:	0f 84 81 00 00 00    	je     c001e694 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e613:	83 ec 0c             	sub    esp,0xc
c001e616:	68 cf 52 02 c0       	push   0xc00252cf
c001e61b:	e8 01 e1 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001e620:	83 c4 10             	add    esp,0x10
c001e623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e627:	3c 01                	cmp    al,0x1
c001e629:	74 63                	je     c001e68e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e62b:	3c 02                	cmp    al,0x2
c001e62d:	75 53                	jne    c001e682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e62f:	d1 e6                	shl    esi,1
c001e631:	09 ee                	or     esi,ebp
c001e633:	50                   	push   eax
c001e634:	89 f0                	mov    eax,esi
c001e636:	6a 01                	push   0x1
c001e638:	0f b6 f0             	movzx  esi,al
c001e63b:	c1 e6 06             	shl    esi,0x6
c001e63e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e646:	50                   	push   eax
c001e647:	57                   	push   edi
c001e648:	e8 5d f6 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e64d:	83 c4 10             	add    esp,0x10
c001e650:	a8 01                	test   al,0x1
c001e652:	74 02                	je     c001e656 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e654:	b3 07                	mov    bl,0x7
c001e656:	a8 02                	test   al,0x2
c001e658:	74 02                	je     c001e65c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e65a:	b3 03                	mov    bl,0x3
c001e65c:	a8 04                	test   al,0x4
c001e65e:	74 02                	je     c001e662 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e660:	b3 14                	mov    bl,0x14
c001e662:	a8 08                	test   al,0x8
c001e664:	74 02                	je     c001e668 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e666:	b3 03                	mov    bl,0x3
c001e668:	a8 10                	test   al,0x10
c001e66a:	74 02                	je     c001e66e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e66c:	b3 15                	mov    bl,0x15
c001e66e:	a8 20                	test   al,0x20
c001e670:	74 02                	je     c001e674 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e672:	b3 03                	mov    bl,0x3
c001e674:	a8 40                	test   al,0x40
c001e676:	74 02                	je     c001e67a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e678:	b3 16                	mov    bl,0x16
c001e67a:	84 c0                	test   al,al
c001e67c:	79 16                	jns    c001e694 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e67e:	b3 0d                	mov    bl,0xd
c001e680:	eb 12                	jmp    c001e694 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e682:	3c 03                	cmp    al,0x3
c001e684:	74 0c                	je     c001e692 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e686:	3c 04                	cmp    al,0x4
c001e688:	75 0a                	jne    c001e694 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e68a:	b3 08                	mov    bl,0x8
c001e68c:	eb 06                	jmp    c001e694 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e68e:	b3 13                	mov    bl,0x13
c001e690:	eb 02                	jmp    c001e694 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e692:	b3 17                	mov    bl,0x17
c001e694:	83 c4 1c             	add    esp,0x1c
c001e697:	88 d8                	mov    al,bl
c001e699:	5b                   	pop    ebx
c001e69a:	5e                   	pop    esi
c001e69b:	5f                   	pop    edi
c001e69c:	5d                   	pop    ebp
c001e69d:	c3                   	ret    

c001e69e <IDE::polling(unsigned char, unsigned int)>:
c001e69e:	57                   	push   edi
c001e69f:	56                   	push   esi
c001e6a0:	53                   	push   ebx
c001e6a1:	bb 04 00 00 00       	mov    ebx,0x4
c001e6a6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e6aa:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e6af:	52                   	push   edx
c001e6b0:	6a 0c                	push   0xc
c001e6b2:	56                   	push   esi
c001e6b3:	57                   	push   edi
c001e6b4:	e8 f1 f5 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e6b9:	83 c4 10             	add    esp,0x10
c001e6bc:	4b                   	dec    ebx
c001e6bd:	75 f0                	jne    c001e6af <IDE::polling(unsigned char, unsigned int)+0x11>
c001e6bf:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e6c4:	50                   	push   eax
c001e6c5:	6a 0c                	push   0xc
c001e6c7:	56                   	push   esi
c001e6c8:	57                   	push   edi
c001e6c9:	e8 dc f5 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001e6ce:	83 c4 10             	add    esp,0x10
c001e6d1:	a8 01                	test   al,0x1
c001e6d3:	75 17                	jne    c001e6ec <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e6d5:	a8 20                	test   al,0x20
c001e6d7:	75 0f                	jne    c001e6e8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e6d9:	4b                   	dec    ebx
c001e6da:	74 10                	je     c001e6ec <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e6dc:	84 c0                	test   al,al
c001e6de:	78 e4                	js     c001e6c4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e6e0:	a8 08                	test   al,0x8
c001e6e2:	74 e0                	je     c001e6c4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e6e4:	31 c0                	xor    eax,eax
c001e6e6:	eb 06                	jmp    c001e6ee <IDE::polling(unsigned char, unsigned int)+0x50>
c001e6e8:	b0 01                	mov    al,0x1
c001e6ea:	eb 02                	jmp    c001e6ee <IDE::polling(unsigned char, unsigned int)+0x50>
c001e6ec:	b0 02                	mov    al,0x2
c001e6ee:	5b                   	pop    ebx
c001e6ef:	5e                   	pop    esi
c001e6f0:	5f                   	pop    edi
c001e6f1:	c3                   	ret    

c001e6f2 <SATABus::close(int, int, void*)>:
c001e6f2:	31 c0                	xor    eax,eax
c001e6f4:	c3                   	ret    
c001e6f5:	90                   	nop

c001e6f6 <SATABus::detect()>:
c001e6f6:	c3                   	ret    
c001e6f7:	90                   	nop

c001e6f8 <SATABus::SATABus()>:
c001e6f8:	83 ec 0c             	sub    esp,0xc
c001e6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ff:	83 ec 08             	sub    esp,0x8
c001e702:	68 08 53 02 c0       	push   0xc0025308
c001e707:	50                   	push   eax
c001e708:	e8 3f f8 fe ff       	call   c000df4c <HardDiskController::HardDiskController(char const*)>
c001e70d:	83 c4 10             	add    esp,0x10
c001e710:	ba b0 53 02 c0       	mov    edx,0xc00253b0
c001e715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e719:	89 10                	mov    DWORD PTR [eax],edx
c001e71b:	83 ec 0c             	sub    esp,0xc
c001e71e:	6a 50                	push   0x50
c001e720:	e8 8e b5 fe ff       	call   c0009cb3 <Phys::allocateContiguousPages(int)>
c001e725:	83 c4 10             	add    esp,0x10
c001e728:	89 c2                	mov    edx,eax
c001e72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e72e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e734:	83 ec 0c             	sub    esp,0xc
c001e737:	6a 50                	push   0x50
c001e739:	e8 87 cc fe ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c001e73e:	83 c4 10             	add    esp,0x10
c001e741:	89 c2                	mov    edx,eax
c001e743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e747:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e74d:	a1 34 65 02 c0       	mov    eax,ds:0xc0026534
c001e752:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e756:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e75c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e760:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e766:	83 ec 0c             	sub    esp,0xc
c001e769:	6a 03                	push   0x3
c001e76b:	6a 50                	push   0x50
c001e76d:	51                   	push   ecx
c001e76e:	52                   	push   edx
c001e76f:	50                   	push   eax
c001e770:	e8 b3 d5 fe ff       	call   c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e775:	83 c4 20             	add    esp,0x20
c001e778:	90                   	nop
c001e779:	83 c4 0c             	add    esp,0xc
c001e77c:	c3                   	ret    
c001e77d:	90                   	nop

c001e77e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e77e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e782:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e785:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e788:	09 c2                	or     edx,eax
c001e78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e78e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e794:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e796:	31 c0                	xor    eax,eax
c001e798:	c1 e9 08             	shr    ecx,0x8
c001e79b:	83 e1 0f             	and    ecx,0xf
c001e79e:	39 c8                	cmp    eax,ecx
c001e7a0:	74 0a                	je     c001e7ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001e7a2:	f6 c2 01             	test   dl,0x1
c001e7a5:	74 08                	je     c001e7af <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e7a7:	d1 ea                	shr    edx,1
c001e7a9:	40                   	inc    eax
c001e7aa:	eb f2                	jmp    c001e79e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001e7ac:	83 c8 ff             	or     eax,0xffffffff
c001e7af:	c3                   	ret    

c001e7b0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e7b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7b4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e7b7:	89 c2                	mov    edx,eax
c001e7b9:	c1 ea 08             	shr    edx,0x8
c001e7bc:	83 e2 0f             	and    edx,0xf
c001e7bf:	fe ca                	dec    dl
c001e7c1:	75 31                	jne    c001e7f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e7c3:	83 e0 0f             	and    eax,0xf
c001e7c6:	3c 03                	cmp    al,0x3
c001e7c8:	75 2a                	jne    c001e7f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e7ca:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e7cd:	b8 02 00 00 00       	mov    eax,0x2
c001e7d2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e7d8:	74 1c                	je     c001e7f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e7da:	b8 04 00 00 00       	mov    eax,0x4
c001e7df:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e7e5:	74 0f                	je     c001e7f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e7e7:	31 c0                	xor    eax,eax
c001e7e9:	83 fa 03             	cmp    edx,0x3
c001e7ec:	0f 94 c0             	sete   al
c001e7ef:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e7f3:	c3                   	ret    
c001e7f4:	31 c0                	xor    eax,eax
c001e7f6:	c3                   	ret    
c001e7f7:	90                   	nop

c001e7f8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e7f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7fc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e7ff:	0f ba e2 0f          	bt     edx,0xf
c001e803:	72 f7                	jb     c001e7fc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e805:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e808:	83 ca 10             	or     edx,0x10
c001e80b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e80e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e811:	83 ca 01             	or     edx,0x1
c001e814:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e817:	c3                   	ret    

c001e818 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e81c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e81f:	83 e2 fe             	and    edx,0xfffffffe
c001e822:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e825:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e828:	83 e2 ef             	and    edx,0xffffffef
c001e82b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e82e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e831:	0f ba e2 0e          	bt     edx,0xe
c001e835:	72 f7                	jb     c001e82e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e837:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e83a:	0f ba e2 0f          	bt     edx,0xf
c001e83e:	72 ee                	jb     c001e82e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e840:	c3                   	ret    
c001e841:	90                   	nop

c001e842 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e842:	55                   	push   ebp
c001e843:	57                   	push   edi
c001e844:	56                   	push   esi
c001e845:	53                   	push   ebx
c001e846:	83 ec 1c             	sub    esp,0x1c
c001e849:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e84d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e851:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e855:	53                   	push   ebx
c001e856:	89 fd                	mov    ebp,edi
c001e858:	56                   	push   esi
c001e859:	c1 e5 0a             	shl    ebp,0xa
c001e85c:	e8 b7 ff ff ff       	call   c001e818 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e861:	83 ec 0c             	sub    esp,0xc
c001e864:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e86a:	01 e8                	add    eax,ebp
c001e86c:	89 03                	mov    DWORD PTR [ebx],eax
c001e86e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e870:	68 00 04 00 00       	push   0x400
c001e875:	6a 00                	push   0x0
c001e877:	50                   	push   eax
c001e878:	e8 2b 1c fe ff       	call   c00004a8 <memset>
c001e87d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e883:	89 fa                	mov    edx,edi
c001e885:	01 e8                	add    eax,ebp
c001e887:	c1 e7 0d             	shl    edi,0xd
c001e88a:	89 03                	mov    DWORD PTR [ebx],eax
c001e88c:	c1 e2 08             	shl    edx,0x8
c001e88f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e896:	81 c2 00 80 00 00    	add    edx,0x8000
c001e89c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e8a0:	89 d0                	mov    eax,edx
c001e8a2:	83 c4 1c             	add    esp,0x1c
c001e8a5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e8ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e8ae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e8b1:	68 00 01 00 00       	push   0x100
c001e8b6:	6a 00                	push   0x0
c001e8b8:	50                   	push   eax
c001e8b9:	e8 ea 1b fe ff       	call   c00004a8 <memset>
c001e8be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e8c2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e8c8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e8ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e8d2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e8d5:	83 c4 10             	add    esp,0x10
c001e8d8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e8df:	31 ff                	xor    edi,edi
c001e8e1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e8e7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e8ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8f1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e8f7:	83 c5 20             	add    ebp,0x20
c001e8fa:	01 f8                	add    eax,edi
c001e8fc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e8ff:	52                   	push   edx
c001e900:	68 00 01 00 00       	push   0x100
c001e905:	6a 00                	push   0x0
c001e907:	50                   	push   eax
c001e908:	e8 9b 1b fe ff       	call   c00004a8 <memset>
c001e90d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e911:	83 c4 10             	add    esp,0x10
c001e914:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e91a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e921:	01 f8                	add    eax,edi
c001e923:	81 c7 00 01 00 00    	add    edi,0x100
c001e929:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e92c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e932:	75 b3                	jne    c001e8e7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e934:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e938:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e93c:	83 c4 1c             	add    esp,0x1c
c001e93f:	5b                   	pop    ebx
c001e940:	5e                   	pop    esi
c001e941:	5f                   	pop    edi
c001e942:	5d                   	pop    ebp
c001e943:	e9 b0 fe ff ff       	jmp    c001e7f8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e948 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e948:	55                   	push   ebp
c001e949:	57                   	push   edi
c001e94a:	56                   	push   esi
c001e94b:	53                   	push   ebx
c001e94c:	83 ec 0c             	sub    esp,0xc
c001e94f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e953:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001e95a:	74 2d                	je     c001e989 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001e95c:	83 ec 0c             	sub    esp,0xc
c001e95f:	68 2c 53 02 c0       	push   0xc002532c
c001e964:	e8 88 ae fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e969:	83 c4 10             	add    esp,0x10
c001e96c:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001e973:	75 14                	jne    c001e989 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001e975:	e4 60                	in     al,0x60
c001e977:	3c 1c                	cmp    al,0x1c
c001e979:	74 04                	je     c001e97f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e97b:	3c 5a                	cmp    al,0x5a
c001e97d:	75 f6                	jne    c001e975 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001e97f:	e4 60                	in     al,0x60
c001e981:	3c 5a                	cmp    al,0x5a
c001e983:	74 fa                	je     c001e97f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e985:	3c 1c                	cmp    al,0x1c
c001e987:	74 f6                	je     c001e97f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e989:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e98d:	31 db                	xor    ebx,ebx
c001e98f:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001e992:	f7 c5 01 00 00 00    	test   ebp,0x1
c001e998:	0f 84 78 01 00 00    	je     c001eb16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e99e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9a2:	89 d8                	mov    eax,ebx
c001e9a4:	c1 e0 07             	shl    eax,0x7
c001e9a7:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001e9ae:	50                   	push   eax
c001e9af:	50                   	push   eax
c001e9b0:	57                   	push   edi
c001e9b1:	56                   	push   esi
c001e9b2:	e8 f9 fd ff ff       	call   c001e7b0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e9b7:	83 c4 10             	add    esp,0x10
c001e9ba:	83 f8 01             	cmp    eax,0x1
c001e9bd:	0f 85 19 01 00 00    	jne    c001eadc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001e9c3:	50                   	push   eax
c001e9c4:	53                   	push   ebx
c001e9c5:	57                   	push   edi
c001e9c6:	56                   	push   esi
c001e9c7:	e8 76 fe ff ff       	call   c001e842 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e9cc:	83 c4 10             	add    esp,0x10
c001e9cf:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001e9d6:	74 2d                	je     c001ea05 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001e9d8:	83 ec 0c             	sub    esp,0xc
c001e9db:	68 41 53 02 c0       	push   0xc0025341
c001e9e0:	e8 0c ae fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e9e5:	83 c4 10             	add    esp,0x10
c001e9e8:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001e9ef:	75 14                	jne    c001ea05 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001e9f1:	e4 60                	in     al,0x60
c001e9f3:	3c 1c                	cmp    al,0x1c
c001e9f5:	74 04                	je     c001e9fb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e9f7:	3c 5a                	cmp    al,0x5a
c001e9f9:	75 f6                	jne    c001e9f1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001e9fb:	e4 60                	in     al,0x60
c001e9fd:	3c 5a                	cmp    al,0x5a
c001e9ff:	74 fa                	je     c001e9fb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001ea01:	3c 1c                	cmp    al,0x1c
c001ea03:	74 f6                	je     c001e9fb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001ea05:	83 ec 0c             	sub    esp,0xc
c001ea08:	68 7c 01 00 00       	push   0x17c
c001ea0d:	e8 85 ad fe ff       	call   c0009797 <malloc>
c001ea12:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea15:	89 c7                	mov    edi,eax
c001ea17:	e8 28 10 00 00       	call   c001fa44 <SATA::SATA()>
c001ea1c:	83 c4 10             	add    esp,0x10
c001ea1f:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001ea26:	74 2d                	je     c001ea55 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001ea28:	83 ec 0c             	sub    esp,0xc
c001ea2b:	68 56 53 02 c0       	push   0xc0025356
c001ea30:	e8 bc ad fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ea35:	83 c4 10             	add    esp,0x10
c001ea38:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001ea3f:	75 14                	jne    c001ea55 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001ea41:	e4 60                	in     al,0x60
c001ea43:	3c 5a                	cmp    al,0x5a
c001ea45:	74 04                	je     c001ea4b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001ea47:	3c 1c                	cmp    al,0x1c
c001ea49:	75 f6                	jne    c001ea41 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001ea4b:	e4 60                	in     al,0x60
c001ea4d:	3c 5a                	cmp    al,0x5a
c001ea4f:	74 fa                	je     c001ea4b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001ea51:	3c 1c                	cmp    al,0x1c
c001ea53:	74 f6                	je     c001ea4b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001ea55:	50                   	push   eax
c001ea56:	50                   	push   eax
c001ea57:	57                   	push   edi
c001ea58:	56                   	push   esi
c001ea59:	e8 40 f1 fe ff       	call   c000db9e <Device::addChild(Device*)>
c001ea5e:	83 c4 10             	add    esp,0x10
c001ea61:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001ea68:	74 2d                	je     c001ea97 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001ea6a:	83 ec 0c             	sub    esp,0xc
c001ea6d:	68 6b 53 02 c0       	push   0xc002536b
c001ea72:	e8 7a ad fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ea77:	83 c4 10             	add    esp,0x10
c001ea7a:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001ea81:	75 14                	jne    c001ea97 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001ea83:	e4 60                	in     al,0x60
c001ea85:	3c 1c                	cmp    al,0x1c
c001ea87:	74 04                	je     c001ea8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001ea89:	3c 5a                	cmp    al,0x5a
c001ea8b:	75 f6                	jne    c001ea83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001ea8d:	e4 60                	in     al,0x60
c001ea8f:	3c 5a                	cmp    al,0x5a
c001ea91:	74 fa                	je     c001ea8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001ea93:	3c 1c                	cmp    al,0x1c
c001ea95:	74 f6                	je     c001ea8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001ea97:	8b 07                	mov    eax,DWORD PTR [edi]
c001ea99:	56                   	push   esi
c001ea9a:	6a 00                	push   0x0
c001ea9c:	53                   	push   ebx
c001ea9d:	57                   	push   edi
c001ea9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eaa1:	83 c4 10             	add    esp,0x10
c001eaa4:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001eaab:	74 69                	je     c001eb16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001eaad:	83 ec 0c             	sub    esp,0xc
c001eab0:	68 80 53 02 c0       	push   0xc0025380
c001eab5:	e8 37 ad fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001eaba:	83 c4 10             	add    esp,0x10
c001eabd:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001eac4:	75 50                	jne    c001eb16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001eac6:	e4 60                	in     al,0x60
c001eac8:	3c 1c                	cmp    al,0x1c
c001eaca:	74 04                	je     c001ead0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001eacc:	3c 5a                	cmp    al,0x5a
c001eace:	75 f6                	jne    c001eac6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001ead0:	e4 60                	in     al,0x60
c001ead2:	3c 5a                	cmp    al,0x5a
c001ead4:	74 fa                	je     c001ead0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001ead6:	3c 1c                	cmp    al,0x1c
c001ead8:	74 f6                	je     c001ead0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001eada:	eb 3a                	jmp    c001eb16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001eadc:	83 f8 04             	cmp    eax,0x4
c001eadf:	75 35                	jne    c001eb16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001eae1:	50                   	push   eax
c001eae2:	53                   	push   ebx
c001eae3:	57                   	push   edi
c001eae4:	56                   	push   esi
c001eae5:	e8 58 fd ff ff       	call   c001e842 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001eaea:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001eaf1:	e8 a1 ac fe ff       	call   c0009797 <malloc>
c001eaf6:	89 04 24             	mov    DWORD PTR [esp],eax
c001eaf9:	89 c7                	mov    edi,eax
c001eafb:	e8 ba 17 00 00       	call   c00202ba <SATAPI::SATAPI()>
c001eb00:	5a                   	pop    edx
c001eb01:	59                   	pop    ecx
c001eb02:	57                   	push   edi
c001eb03:	56                   	push   esi
c001eb04:	e8 95 f0 fe ff       	call   c000db9e <Device::addChild(Device*)>
c001eb09:	8b 07                	mov    eax,DWORD PTR [edi]
c001eb0b:	56                   	push   esi
c001eb0c:	6a 00                	push   0x0
c001eb0e:	53                   	push   ebx
c001eb0f:	57                   	push   edi
c001eb10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb13:	83 c4 20             	add    esp,0x20
c001eb16:	d1 ed                	shr    ebp,1
c001eb18:	43                   	inc    ebx
c001eb19:	83 fb 20             	cmp    ebx,0x20
c001eb1c:	0f 85 70 fe ff ff    	jne    c001e992 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001eb22:	83 c4 0c             	add    esp,0xc
c001eb25:	5b                   	pop    ebx
c001eb26:	5e                   	pop    esi
c001eb27:	5f                   	pop    edi
c001eb28:	5d                   	pop    ebp
c001eb29:	c3                   	ret    

c001eb2a <SATABus::open(int, int, void*)>:
c001eb2a:	53                   	push   ebx
c001eb2b:	83 ec 10             	sub    esp,0x10
c001eb2e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eb32:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001eb38:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eb3e:	50                   	push   eax
c001eb3f:	68 95 53 02 c0       	push   0xc0025395
c001eb44:	e8 d8 db fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001eb49:	58                   	pop    eax
c001eb4a:	5a                   	pop    edx
c001eb4b:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001eb51:	53                   	push   ebx
c001eb52:	e8 f1 fd ff ff       	call   c001e948 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001eb57:	31 c0                	xor    eax,eax
c001eb59:	83 c4 18             	add    esp,0x18
c001eb5c:	5b                   	pop    ebx
c001eb5d:	c3                   	ret    

c001eb5e <ATA::close(int, int, void*)>:
c001eb5e:	83 ec 0c             	sub    esp,0xc
c001eb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb65:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb6b:	85 c0                	test   eax,eax
c001eb6d:	74 0c                	je     c001eb7b <ATA::close(int, int, void*)+0x1d>
c001eb6f:	83 ec 0c             	sub    esp,0xc
c001eb72:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb74:	50                   	push   eax
c001eb75:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eb78:	83 c4 10             	add    esp,0x10
c001eb7b:	31 c0                	xor    eax,eax
c001eb7d:	83 c4 0c             	add    esp,0xc
c001eb80:	c3                   	ret    
c001eb81:	90                   	nop

c001eb82 <ATA::powerSaving(PowerSavingLevel)>:
c001eb82:	c3                   	ret    
c001eb83:	90                   	nop

c001eb84 <ATA::ATA()>:
c001eb84:	83 ec 0c             	sub    esp,0xc
c001eb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8b:	83 ec 04             	sub    esp,0x4
c001eb8e:	68 00 02 00 00       	push   0x200
c001eb93:	68 33 55 02 c0       	push   0xc0025533
c001eb98:	50                   	push   eax
c001eb99:	e8 38 f4 fe ff       	call   c000dfd6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001eb9e:	83 c4 10             	add    esp,0x10
c001eba1:	ba 28 54 02 c0       	mov    edx,0xc0025428
c001eba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebaa:	89 10                	mov    DWORD PTR [eax],edx
c001ebac:	90                   	nop
c001ebad:	83 c4 0c             	add    esp,0xc
c001ebb0:	c3                   	ret    
c001ebb1:	90                   	nop

c001ebb2 <ATA::flush(bool)>:
c001ebb2:	53                   	push   ebx
c001ebb3:	83 ec 08             	sub    esp,0x8
c001ebb6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001ebbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebbf:	19 c0                	sbb    eax,eax
c001ebc1:	83 e0 fd             	and    eax,0xfffffffd
c001ebc4:	05 ea 00 00 00       	add    eax,0xea
c001ebc9:	50                   	push   eax
c001ebca:	6a 07                	push   0x7
c001ebcc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebd3:	50                   	push   eax
c001ebd4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebda:	e8 0b f0 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebdf:	83 c4 0c             	add    esp,0xc
c001ebe2:	6a 00                	push   0x0
c001ebe4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebeb:	50                   	push   eax
c001ebec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebf2:	e8 a7 fa ff ff       	call   c001e69e <IDE::polling(unsigned char, unsigned int)>
c001ebf7:	83 c4 18             	add    esp,0x18
c001ebfa:	5b                   	pop    ebx
c001ebfb:	c3                   	ret    

c001ebfc <ATA::readyForCommand()>:
c001ebfc:	56                   	push   esi
c001ebfd:	53                   	push   ebx
c001ebfe:	53                   	push   ebx
c001ebff:	31 db                	xor    ebx,ebx
c001ec01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ec05:	51                   	push   ecx
c001ec06:	6a 0c                	push   0xc
c001ec08:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ec0f:	50                   	push   eax
c001ec10:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ec16:	e8 8f f0 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001ec1b:	83 c4 10             	add    esp,0x10
c001ec1e:	a8 88                	test   al,0x88
c001ec20:	74 1f                	je     c001ec41 <ATA::readyForCommand()+0x45>
c001ec22:	43                   	inc    ebx
c001ec23:	83 fb 63             	cmp    ebx,0x63
c001ec26:	7e dd                	jle    c001ec05 <ATA::readyForCommand()+0x9>
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	6a 0a                	push   0xa
c001ec2d:	e8 b6 77 ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001ec32:	83 c4 10             	add    esp,0x10
c001ec35:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec3b:	75 c8                	jne    c001ec05 <ATA::readyForCommand()+0x9>
c001ec3d:	31 c0                	xor    eax,eax
c001ec3f:	eb 02                	jmp    c001ec43 <ATA::readyForCommand()+0x47>
c001ec41:	b0 01                	mov    al,0x1
c001ec43:	5a                   	pop    edx
c001ec44:	5b                   	pop    ebx
c001ec45:	5e                   	pop    esi
c001ec46:	c3                   	ret    
c001ec47:	90                   	nop

c001ec48 <ATA::access(unsigned long long, int, void*, bool)>:
c001ec48:	55                   	push   ebp
c001ec49:	57                   	push   edi
c001ec4a:	56                   	push   esi
c001ec4b:	53                   	push   ebx
c001ec4c:	83 ec 38             	sub    esp,0x38
c001ec4f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ec53:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ec57:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ec5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ec5f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ec63:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ec67:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ec6b:	68 d4 53 02 c0       	push   0xc00253d4
c001ec70:	e8 ac da fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001ec75:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ec7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ec7f:	83 c4 10             	add    esp,0x10
c001ec82:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ec88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ec8c:	c1 e0 06             	shl    eax,0x6
c001ec8f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ec97:	74 5d                	je     c001ecf6 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001ec99:	89 fa                	mov    edx,edi
c001ec9b:	89 f0                	mov    eax,esi
c001ec9d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001eca1:	c1 ea 1c             	shr    edx,0x1c
c001eca4:	89 d1                	mov    ecx,edx
c001eca6:	09 c1                	or     ecx,eax
c001eca8:	74 25                	je     c001eccf <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001ecaa:	31 ed                	xor    ebp,ebp
c001ecac:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ecb3:	89 fa                	mov    edx,edi
c001ecb5:	89 f0                	mov    eax,esi
c001ecb7:	0f ad d0             	shrd   eax,edx,cl
c001ecba:	d3 ea                	shr    edx,cl
c001ecbc:	f6 c1 20             	test   cl,0x20
c001ecbf:	74 02                	je     c001ecc3 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001ecc1:	89 d0                	mov    eax,edx
c001ecc3:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ecc7:	45                   	inc    ebp
c001ecc8:	83 fd 06             	cmp    ebp,0x6
c001eccb:	75 df                	jne    c001ecac <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001eccd:	eb 76                	jmp    c001ed45 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001eccf:	89 f0                	mov    eax,esi
c001ecd1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ecd6:	89 fa                	mov    edx,edi
c001ecd8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ecdf:	0f ac d0 10          	shrd   eax,edx,0x10
c001ece3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ece8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ecec:	c1 ee 18             	shr    esi,0x18
c001ecef:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ecf4:	eb 56                	jmp    c001ed4c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ecf6:	6a 00                	push   0x0
c001ecf8:	6a 3f                	push   0x3f
c001ecfa:	57                   	push   edi
c001ecfb:	56                   	push   esi
c001ecfc:	e8 af 29 00 00       	call   c00216b0 <__umoddi3>
c001ed01:	83 c4 10             	add    esp,0x10
c001ed04:	40                   	inc    eax
c001ed05:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ed09:	6a 00                	push   0x0
c001ed0b:	68 f0 03 00 00       	push   0x3f0
c001ed10:	57                   	push   edi
c001ed11:	56                   	push   esi
c001ed12:	e8 99 28 00 00       	call   c00215b0 <__udivdi3>
c001ed17:	83 c4 10             	add    esp,0x10
c001ed1a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ed1f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ed26:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ed2b:	6a 00                	push   0x0
c001ed2d:	6a 3f                	push   0x3f
c001ed2f:	57                   	push   edi
c001ed30:	56                   	push   esi
c001ed31:	e8 7a 28 00 00       	call   c00215b0 <__udivdi3>
c001ed36:	83 c4 10             	add    esp,0x10
c001ed39:	89 c6                	mov    esi,eax
c001ed3b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ed40:	83 e6 0f             	and    esi,0xf
c001ed43:	eb 07                	jmp    c001ed4c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ed45:	31 f6                	xor    esi,esi
c001ed47:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ed4c:	bf 01 00 00 00       	mov    edi,0x1
c001ed51:	50                   	push   eax
c001ed52:	6a 00                	push   0x0
c001ed54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed5b:	50                   	push   eax
c001ed5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ed60:	e8 8d f0 ff ff       	call   c001ddf2 <IDE::enableIRQs(unsigned char, bool)>
c001ed65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed68:	e8 8f fe ff ff       	call   c001ebfc <ATA::readyForCommand()>
c001ed6d:	83 c4 10             	add    esp,0x10
c001ed70:	84 c0                	test   al,al
c001ed72:	0f 84 bc 02 00 00    	je     c001f034 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ed78:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ed7e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ed84:	c1 e0 04             	shl    eax,0x4
c001ed87:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ed8e:	09 c6                	or     esi,eax
c001ed90:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed95:	75 05                	jne    c001ed9c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ed97:	83 ce a0             	or     esi,0xffffffa0
c001ed9a:	eb 03                	jmp    c001ed9f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ed9c:	83 ce e0             	or     esi,0xffffffe0
c001ed9f:	89 f0                	mov    eax,esi
c001eda1:	0f b6 f0             	movzx  esi,al
c001eda4:	56                   	push   esi
c001eda5:	6a 06                	push   0x6
c001eda7:	51                   	push   ecx
c001eda8:	52                   	push   edx
c001eda9:	e8 3c ee ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edae:	83 c4 10             	add    esp,0x10
c001edb1:	6a 00                	push   0x0
c001edb3:	6a 01                	push   0x1
c001edb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edbc:	50                   	push   eax
c001edbd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edc3:	e8 22 ee ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edc8:	83 c4 10             	add    esp,0x10
c001edcb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001edd0:	75 6e                	jne    c001ee40 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001edd2:	6a 00                	push   0x0
c001edd4:	6a 08                	push   0x8
c001edd6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eddd:	50                   	push   eax
c001edde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ede4:	e8 01 ee ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ede9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001edee:	50                   	push   eax
c001edef:	6a 09                	push   0x9
c001edf1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edf8:	50                   	push   eax
c001edf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edff:	e8 e6 ed ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee04:	83 c4 20             	add    esp,0x20
c001ee07:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ee0c:	50                   	push   eax
c001ee0d:	6a 0a                	push   0xa
c001ee0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee16:	50                   	push   eax
c001ee17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee1d:	e8 c8 ed ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee22:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ee27:	50                   	push   eax
c001ee28:	6a 0b                	push   0xb
c001ee2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee31:	50                   	push   eax
c001ee32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee38:	e8 ad ed ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee3d:	83 c4 20             	add    esp,0x20
c001ee40:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ee45:	50                   	push   eax
c001ee46:	6a 02                	push   0x2
c001ee48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee4f:	50                   	push   eax
c001ee50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee56:	e8 8f ed ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee5b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ee60:	50                   	push   eax
c001ee61:	6a 03                	push   0x3
c001ee63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee6a:	50                   	push   eax
c001ee6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee71:	e8 74 ed ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee76:	83 c4 20             	add    esp,0x20
c001ee79:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ee7e:	50                   	push   eax
c001ee7f:	6a 04                	push   0x4
c001ee81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee88:	50                   	push   eax
c001ee89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee8f:	e8 56 ed ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee94:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ee99:	50                   	push   eax
c001ee9a:	6a 05                	push   0x5
c001ee9c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eea3:	50                   	push   eax
c001eea4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eeaa:	e8 3b ed ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eeaf:	83 c4 20             	add    esp,0x20
c001eeb2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001eeb7:	0f 94 c0             	sete   al
c001eeba:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001eebf:	74 09                	je     c001eeca <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001eec1:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001eec8:	eb 07                	jmp    c001eed1 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001eeca:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001eed1:	0f b6 c0             	movzx  eax,al
c001eed4:	50                   	push   eax
c001eed5:	6a 07                	push   0x7
c001eed7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eede:	50                   	push   eax
c001eedf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eee5:	e8 00 ed ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eeea:	c7 04 24 e1 53 02 c0 	mov    DWORD PTR [esp],0xc00253e1
c001eef1:	e8 2b d8 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001eef6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001eefa:	83 c4 10             	add    esp,0x10
c001eefd:	85 f6                	test   esi,esi
c001eeff:	0f 84 f7 00 00 00    	je     c001effc <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001ef05:	83 ec 0c             	sub    esp,0xc
c001ef08:	68 e4 53 02 c0       	push   0xc00253e4
c001ef0d:	e8 0f d8 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001ef12:	83 c4 0c             	add    esp,0xc
c001ef15:	6a 01                	push   0x1
c001ef17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef1e:	50                   	push   eax
c001ef1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef25:	e8 74 f7 ff ff       	call   c001e69e <IDE::polling(unsigned char, unsigned int)>
c001ef2a:	c7 04 24 e7 53 02 c0 	mov    DWORD PTR [esp],0xc00253e7
c001ef31:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ef35:	e8 e7 d7 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001ef3a:	83 c4 10             	add    esp,0x10
c001ef3d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ef41:	84 c0                	test   al,al
c001ef43:	74 2b                	je     c001ef70 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001ef45:	0f b6 f8             	movzx  edi,al
c001ef48:	57                   	push   edi
c001ef49:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ef50:	50                   	push   eax
c001ef51:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef58:	50                   	push   eax
c001ef59:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef5f:	e8 8a f6 ff ff       	call   c001e5ee <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ef64:	c7 04 24 ea 53 02 c0 	mov    DWORD PTR [esp],0xc00253ea
c001ef6b:	e9 bc 00 00 00       	jmp    c001f02c <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001ef70:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ef75:	74 50                	je     c001efc7 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001ef77:	83 ec 0c             	sub    esp,0xc
c001ef7a:	31 ed                	xor    ebp,ebp
c001ef7c:	68 f5 53 02 c0       	push   0xc00253f5
c001ef81:	e8 9b d7 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001ef86:	83 c4 10             	add    esp,0x10
c001ef89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ef8d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001ef91:	50                   	push   eax
c001ef92:	50                   	push   eax
c001ef93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef9a:	50                   	push   eax
c001ef9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001efa1:	e8 32 ec ff ff       	call   c001dbd8 <IDE::getBase(unsigned char)>
c001efa6:	89 c2                	mov    edx,eax
c001efa8:	89 f8                	mov    eax,edi
c001efaa:	66 ef                	out    dx,ax
c001efac:	45                   	inc    ebp
c001efad:	83 c4 10             	add    esp,0x10
c001efb0:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001efb6:	75 d1                	jne    c001ef89 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	68 f8 53 02 c0       	push   0xc00253f8
c001efc0:	e8 5c d7 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001efc5:	eb 24                	jmp    c001efeb <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001efc7:	51                   	push   ecx
c001efc8:	51                   	push   ecx
c001efc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001efd0:	50                   	push   eax
c001efd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001efd7:	e8 fc eb ff ff       	call   c001dbd8 <IDE::getBase(unsigned char)>
c001efdc:	b9 00 01 00 00       	mov    ecx,0x100
c001efe1:	89 c2                	mov    edx,eax
c001efe3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001efe7:	fc                   	cld    
c001efe8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001efeb:	83 c4 10             	add    esp,0x10
c001efee:	4e                   	dec    esi
c001efef:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001eff7:	e9 01 ff ff ff       	jmp    c001eefd <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001effc:	31 ff                	xor    edi,edi
c001effe:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f003:	74 2f                	je     c001f034 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f005:	83 ec 0c             	sub    esp,0xc
c001f008:	68 fb 53 02 c0       	push   0xc00253fb
c001f00d:	e8 0f d7 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001f012:	58                   	pop    eax
c001f013:	31 c0                	xor    eax,eax
c001f015:	5a                   	pop    edx
c001f016:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f01b:	0f 94 c0             	sete   al
c001f01e:	50                   	push   eax
c001f01f:	53                   	push   ebx
c001f020:	e8 8d fb ff ff       	call   c001ebb2 <ATA::flush(bool)>
c001f025:	c7 04 24 fe 53 02 c0 	mov    DWORD PTR [esp],0xc00253fe
c001f02c:	e8 f0 d6 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	83 c4 2c             	add    esp,0x2c
c001f037:	89 f8                	mov    eax,edi
c001f039:	5b                   	pop    ebx
c001f03a:	5e                   	pop    esi
c001f03b:	5f                   	pop    edi
c001f03c:	5d                   	pop    ebp
c001f03d:	c3                   	ret    

c001f03e <ATA::read(unsigned long long, int, void*)>:
c001f03e:	57                   	push   edi
c001f03f:	b8 04 00 00 00       	mov    eax,0x4
c001f044:	56                   	push   esi
c001f045:	53                   	push   ebx
c001f046:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f04a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f04e:	8d 7a ff             	lea    edi,[edx-0x1]
c001f051:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f055:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f059:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f05f:	77 25                	ja     c001f086 <ATA::read(unsigned long long, int, void*)+0x48>
c001f061:	b8 06 00 00 00       	mov    eax,0x6
c001f066:	85 f6                	test   esi,esi
c001f068:	74 1c                	je     c001f086 <ATA::read(unsigned long long, int, void*)+0x48>
c001f06a:	50                   	push   eax
c001f06b:	50                   	push   eax
c001f06c:	6a 00                	push   0x0
c001f06e:	56                   	push   esi
c001f06f:	52                   	push   edx
c001f070:	53                   	push   ebx
c001f071:	51                   	push   ecx
c001f072:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f076:	e8 cd fb ff ff       	call   c001ec48 <ATA::access(unsigned long long, int, void*, bool)>
c001f07b:	83 c4 20             	add    esp,0x20
c001f07e:	85 c0                	test   eax,eax
c001f080:	0f 95 c0             	setne  al
c001f083:	0f b6 c0             	movzx  eax,al
c001f086:	5b                   	pop    ebx
c001f087:	5e                   	pop    esi
c001f088:	5f                   	pop    edi
c001f089:	c3                   	ret    

c001f08a <ATA::write(unsigned long long, int, void*)>:
c001f08a:	55                   	push   ebp
c001f08b:	57                   	push   edi
c001f08c:	56                   	push   esi
c001f08d:	53                   	push   ebx
c001f08e:	83 ec 18             	sub    esp,0x18
c001f091:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f095:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f099:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f09d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f0a1:	68 01 54 02 c0       	push   0xc0025401
c001f0a6:	e8 76 d6 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001f0ab:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f0ae:	83 c4 10             	add    esp,0x10
c001f0b1:	b8 04 00 00 00       	mov    eax,0x4
c001f0b6:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f0bc:	77 25                	ja     c001f0e3 <ATA::write(unsigned long long, int, void*)+0x59>
c001f0be:	b8 06 00 00 00       	mov    eax,0x6
c001f0c3:	85 f6                	test   esi,esi
c001f0c5:	74 1c                	je     c001f0e3 <ATA::write(unsigned long long, int, void*)+0x59>
c001f0c7:	50                   	push   eax
c001f0c8:	50                   	push   eax
c001f0c9:	6a 01                	push   0x1
c001f0cb:	56                   	push   esi
c001f0cc:	53                   	push   ebx
c001f0cd:	55                   	push   ebp
c001f0ce:	57                   	push   edi
c001f0cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f0d3:	e8 70 fb ff ff       	call   c001ec48 <ATA::access(unsigned long long, int, void*, bool)>
c001f0d8:	83 c4 20             	add    esp,0x20
c001f0db:	85 c0                	test   eax,eax
c001f0dd:	0f 95 c0             	setne  al
c001f0e0:	0f b6 c0             	movzx  eax,al
c001f0e3:	83 c4 0c             	add    esp,0xc
c001f0e6:	5b                   	pop    ebx
c001f0e7:	5e                   	pop    esi
c001f0e8:	5f                   	pop    edi
c001f0e9:	5d                   	pop    ebp
c001f0ea:	c3                   	ret    
c001f0eb:	90                   	nop

c001f0ec <ATA::detectCHS()>:
c001f0ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f0f0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f0f6:	c1 e0 06             	shl    eax,0x6
c001f0f9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f0ff:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f109:	c7 44 24 04 0d 54 02 c0 	mov    DWORD PTR [esp+0x4],0xc002540d
c001f111:	e9 75 39 ff ff       	jmp    c0012a8b <Krnl::panic(char const*)>

c001f116 <ATA::open(int, int, void*)>:
c001f116:	53                   	push   ebx
c001f117:	83 ec 08             	sub    esp,0x8
c001f11a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f11e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f122:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f126:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f12c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f132:	c1 e0 06             	shl    eax,0x6
c001f135:	01 d0                	add    eax,edx
c001f137:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f13e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f144:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f14b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f155:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f15b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f162:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f169:	75 0c                	jne    c001f177 <ATA::open(int, int, void*)+0x61>
c001f16b:	83 ec 0c             	sub    esp,0xc
c001f16e:	53                   	push   ebx
c001f16f:	e8 78 ff ff ff       	call   c001f0ec <ATA::detectCHS()>
c001f174:	83 c4 10             	add    esp,0x10
c001f177:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f17d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f183:	c1 e0 06             	shl    eax,0x6
c001f186:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f18d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f197:	d1 e8                	shr    eax,1
c001f199:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f19f:	6a 04                	push   0x4
c001f1a1:	6a 0c                	push   0xc
c001f1a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1aa:	50                   	push   eax
c001f1ab:	52                   	push   edx
c001f1ac:	e8 39 ea ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1b1:	90                   	nop
c001f1b2:	90                   	nop
c001f1b3:	6a 00                	push   0x0
c001f1b5:	6a 0c                	push   0xc
c001f1b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1be:	50                   	push   eax
c001f1bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1c5:	e8 20 ea ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1ca:	83 c4 14             	add    esp,0x14
c001f1cd:	53                   	push   ebx
c001f1ce:	e8 6b ee fe ff       	call   c000e03e <PhysicalDisk::startCache()>
c001f1d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1d6:	e8 f7 fe fe ff       	call   c000f0d2 <createPartitionsForDisk(PhysicalDisk*)>
c001f1db:	31 c0                	xor    eax,eax
c001f1dd:	83 c4 18             	add    esp,0x18
c001f1e0:	5b                   	pop    ebx
c001f1e1:	c3                   	ret    

c001f1e2 <ATAPI::write(unsigned long long, int, void*)>:
c001f1e2:	b8 03 00 00 00       	mov    eax,0x3
c001f1e7:	c3                   	ret    

c001f1e8 <ATAPI::close(int, int, void*)>:
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f1f5:	85 c0                	test   eax,eax
c001f1f7:	74 0c                	je     c001f205 <ATAPI::close(int, int, void*)+0x1d>
c001f1f9:	83 ec 0c             	sub    esp,0xc
c001f1fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001f1fe:	50                   	push   eax
c001f1ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f202:	83 c4 10             	add    esp,0x10
c001f205:	31 c0                	xor    eax,eax
c001f207:	83 c4 0c             	add    esp,0xc
c001f20a:	c3                   	ret    
c001f20b:	90                   	nop

c001f20c <ATAPI::ATAPI()>:
c001f20c:	83 ec 0c             	sub    esp,0xc
c001f20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f213:	83 ec 04             	sub    esp,0x4
c001f216:	68 00 08 00 00       	push   0x800
c001f21b:	68 0d 57 02 c0       	push   0xc002570d
c001f220:	50                   	push   eax
c001f221:	e8 b0 ed fe ff       	call   c000dfd6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f226:	83 c4 10             	add    esp,0x10
c001f229:	ba a0 54 02 c0       	mov    edx,0xc00254a0
c001f22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f232:	89 10                	mov    DWORD PTR [eax],edx
c001f234:	90                   	nop
c001f235:	83 c4 0c             	add    esp,0xc
c001f238:	c3                   	ret    
c001f239:	90                   	nop

c001f23a <ATAPI::readyForCommand()>:
c001f23a:	56                   	push   esi
c001f23b:	53                   	push   ebx
c001f23c:	53                   	push   ebx
c001f23d:	31 db                	xor    ebx,ebx
c001f23f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f243:	51                   	push   ecx
c001f244:	6a 0c                	push   0xc
c001f246:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f24d:	50                   	push   eax
c001f24e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f254:	e8 51 ea ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001f259:	83 c4 10             	add    esp,0x10
c001f25c:	a8 88                	test   al,0x88
c001f25e:	74 25                	je     c001f285 <ATAPI::readyForCommand()+0x4b>
c001f260:	43                   	inc    ebx
c001f261:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f267:	7e da                	jle    c001f243 <ATAPI::readyForCommand()+0x9>
c001f269:	83 ec 0c             	sub    esp,0xc
c001f26c:	68 5e 01 00 00       	push   0x15e
c001f271:	e8 72 71 ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001f276:	83 c4 10             	add    esp,0x10
c001f279:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f27f:	75 c2                	jne    c001f243 <ATAPI::readyForCommand()+0x9>
c001f281:	31 c0                	xor    eax,eax
c001f283:	eb 02                	jmp    c001f287 <ATAPI::readyForCommand()+0x4d>
c001f285:	b0 01                	mov    al,0x1
c001f287:	5a                   	pop    edx
c001f288:	5b                   	pop    ebx
c001f289:	5e                   	pop    esi
c001f28a:	c3                   	ret    
c001f28b:	90                   	nop

c001f28c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f28c:	55                   	push   ebp
c001f28d:	57                   	push   edi
c001f28e:	56                   	push   esi
c001f28f:	53                   	push   ebx
c001f290:	83 ec 20             	sub    esp,0x20
c001f293:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f297:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f29b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f29f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f2a3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f2a7:	6a 01                	push   0x1
c001f2a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2b0:	50                   	push   eax
c001f2b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2b7:	e8 36 eb ff ff       	call   c001ddf2 <IDE::enableIRQs(unsigned char, bool)>
c001f2bc:	5e                   	pop    esi
c001f2bd:	58                   	pop    eax
c001f2be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2c5:	50                   	push   eax
c001f2c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2cc:	e8 f3 e8 ff ff       	call   c001dbc4 <IDE::prepareInterrupt(unsigned char)>
c001f2d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f2d4:	e8 61 ff ff ff       	call   c001f23a <ATAPI::readyForCommand()>
c001f2d9:	83 c4 10             	add    esp,0x10
c001f2dc:	84 c0                	test   al,al
c001f2de:	75 0a                	jne    c001f2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001f2e0:	bb 01 00 00 00       	mov    ebx,0x1
c001f2e5:	e9 57 02 00 00       	jmp    c001f541 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f2ea:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001f2f0:	c1 e0 04             	shl    eax,0x4
c001f2f3:	0f b6 c0             	movzx  eax,al
c001f2f6:	50                   	push   eax
c001f2f7:	6a 06                	push   0x6
c001f2f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f300:	50                   	push   eax
c001f301:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f307:	e8 de e8 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f30c:	6a 00                	push   0x0
c001f30e:	6a 01                	push   0x1
c001f310:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f317:	50                   	push   eax
c001f318:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f31e:	e8 c7 e8 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f323:	83 c4 20             	add    esp,0x20
c001f326:	0f b6 c3             	movzx  eax,bl
c001f329:	0f b6 df             	movzx  ebx,bh
c001f32c:	50                   	push   eax
c001f32d:	6a 04                	push   0x4
c001f32f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f336:	50                   	push   eax
c001f337:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f33d:	e8 a8 e8 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f342:	53                   	push   ebx
c001f343:	6a 05                	push   0x5
c001f345:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f34c:	50                   	push   eax
c001f34d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f353:	e8 92 e8 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f358:	83 c4 20             	add    esp,0x20
c001f35b:	68 a0 00 00 00       	push   0xa0
c001f360:	6a 07                	push   0x7
c001f362:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f369:	50                   	push   eax
c001f36a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f370:	e8 75 e8 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f375:	83 c4 0c             	add    esp,0xc
c001f378:	6a 01                	push   0x1
c001f37a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f381:	50                   	push   eax
c001f382:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f388:	e8 11 f3 ff ff       	call   c001e69e <IDE::polling(unsigned char, unsigned int)>
c001f38d:	83 c4 10             	add    esp,0x10
c001f390:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001f396:	84 c0                	test   al,al
c001f398:	74 23                	je     c001f3bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001f39a:	0f b6 d8             	movzx  ebx,al
c001f39d:	0f b6 d2             	movzx  edx,dl
c001f3a0:	53                   	push   ebx
c001f3a1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001f3a8:	50                   	push   eax
c001f3a9:	52                   	push   edx
c001f3aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f3b0:	e8 39 f2 ff ff       	call   c001e5ee <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f3b5:	83 c4 10             	add    esp,0x10
c001f3b8:	e9 84 01 00 00       	jmp    c001f541 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f3bd:	0f b6 d2             	movzx  edx,dl
c001f3c0:	53                   	push   ebx
c001f3c1:	53                   	push   ebx
c001f3c2:	52                   	push   edx
c001f3c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f3c9:	e8 0a e8 ff ff       	call   c001dbd8 <IDE::getBase(unsigned char)>
c001f3ce:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f3d2:	b9 06 00 00 00       	mov    ecx,0x6
c001f3d7:	89 c2                	mov    edx,eax
c001f3d9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f3dc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f3e0:	83 c4 10             	add    esp,0x10
c001f3e3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f3e9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f3f0:	85 db                	test   ebx,ebx
c001f3f2:	0f 84 ec 00 00 00    	je     c001f4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001f3f8:	51                   	push   ecx
c001f3f9:	51                   	push   ecx
c001f3fa:	52                   	push   edx
c001f3fb:	50                   	push   eax
c001f3fc:	e8 57 e9 ff ff       	call   c001dd58 <IDE::waitInterrupt(unsigned char)>
c001f401:	83 c4 10             	add    esp,0x10
c001f404:	84 c0                	test   al,al
c001f406:	0f 84 d4 fe ff ff    	je     c001f2e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f40c:	56                   	push   esi
c001f40d:	56                   	push   esi
c001f40e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f415:	50                   	push   eax
c001f416:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f41c:	e8 a3 e7 ff ff       	call   c001dbc4 <IDE::prepareInterrupt(unsigned char)>
c001f421:	83 c4 0c             	add    esp,0xc
c001f424:	6a 04                	push   0x4
c001f426:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f42d:	50                   	push   eax
c001f42e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f434:	e8 71 e8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001f439:	83 c4 0c             	add    esp,0xc
c001f43c:	89 c6                	mov    esi,eax
c001f43e:	6a 05                	push   0x5
c001f440:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f447:	50                   	push   eax
c001f448:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f44e:	e8 57 e8 ff ff       	call   c001dcaa <IDE::read(unsigned char, unsigned char)>
c001f453:	89 f1                	mov    ecx,esi
c001f455:	0f b6 c0             	movzx  eax,al
c001f458:	0f b6 f1             	movzx  esi,cl
c001f45b:	c1 e0 08             	shl    eax,0x8
c001f45e:	09 c6                	or     esi,eax
c001f460:	d1 fe                	sar    esi,1
c001f462:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001f466:	83 c4 10             	add    esp,0x10
c001f469:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001f46e:	74 41                	je     c001f4b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001f470:	31 c9                	xor    ecx,ecx
c001f472:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f478:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f47f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001f483:	75 0a                	jne    c001f48f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001f485:	01 c9                	add    ecx,ecx
c001f487:	01 cd                	add    ebp,ecx
c001f489:	4b                   	dec    ebx
c001f48a:	e9 54 ff ff ff       	jmp    c001f3e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001f48f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001f494:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f498:	51                   	push   ecx
c001f499:	51                   	push   ecx
c001f49a:	52                   	push   edx
c001f49b:	50                   	push   eax
c001f49c:	e8 37 e7 ff ff       	call   c001dbd8 <IDE::getBase(unsigned char)>
c001f4a1:	89 c2                	mov    edx,eax
c001f4a3:	89 f0                	mov    eax,esi
c001f4a5:	66 ef                	out    dx,ax
c001f4a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f4ab:	83 c4 10             	add    esp,0x10
c001f4ae:	41                   	inc    ecx
c001f4af:	eb c1                	jmp    c001f472 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001f4b1:	31 f6                	xor    esi,esi
c001f4b3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f4b9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f4c0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001f4c4:	75 06                	jne    c001f4cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001f4c6:	01 f6                	add    esi,esi
c001f4c8:	01 f5                	add    ebp,esi
c001f4ca:	eb bd                	jmp    c001f489 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001f4cc:	51                   	push   ecx
c001f4cd:	51                   	push   ecx
c001f4ce:	52                   	push   edx
c001f4cf:	50                   	push   eax
c001f4d0:	e8 03 e7 ff ff       	call   c001dbd8 <IDE::getBase(unsigned char)>
c001f4d5:	89 c2                	mov    edx,eax
c001f4d7:	66 ed                	in     ax,dx
c001f4d9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001f4de:	83 c4 10             	add    esp,0x10
c001f4e1:	46                   	inc    esi
c001f4e2:	eb cf                	jmp    c001f4b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001f4e4:	51                   	push   ecx
c001f4e5:	51                   	push   ecx
c001f4e6:	52                   	push   edx
c001f4e7:	50                   	push   eax
c001f4e8:	e8 6b e8 ff ff       	call   c001dd58 <IDE::waitInterrupt(unsigned char)>
c001f4ed:	83 c4 10             	add    esp,0x10
c001f4f0:	84 c0                	test   al,al
c001f4f2:	0f 84 e8 fd ff ff    	je     c001f2e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f4f8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f4fd:	52                   	push   edx
c001f4fe:	52                   	push   edx
c001f4ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f506:	50                   	push   eax
c001f507:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f50d:	e8 b2 e6 ff ff       	call   c001dbc4 <IDE::prepareInterrupt(unsigned char)>
c001f512:	83 c4 10             	add    esp,0x10
c001f515:	50                   	push   eax
c001f516:	50                   	push   eax
c001f517:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f51e:	50                   	push   eax
c001f51f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f525:	e8 ae e6 ff ff       	call   c001dbd8 <IDE::getBase(unsigned char)>
c001f52a:	8d 50 07             	lea    edx,[eax+0x7]
c001f52d:	ec                   	in     al,dx
c001f52e:	83 c4 10             	add    esp,0x10
c001f531:	a8 88                	test   al,0x88
c001f533:	74 0a                	je     c001f53f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001f535:	4b                   	dec    ebx
c001f536:	75 dd                	jne    c001f515 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001f538:	bb 02 00 00 00       	mov    ebx,0x2
c001f53d:	eb 02                	jmp    c001f541 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f53f:	31 db                	xor    ebx,ebx
c001f541:	83 c4 1c             	add    esp,0x1c
c001f544:	89 d8                	mov    eax,ebx
c001f546:	5b                   	pop    ebx
c001f547:	5e                   	pop    esi
c001f548:	5f                   	pop    edi
c001f549:	5d                   	pop    ebp
c001f54a:	c3                   	ret    
c001f54b:	90                   	nop

c001f54c <ATAPI::diskRemoved()>:
c001f54c:	53                   	push   ebx
c001f54d:	83 ec 14             	sub    esp,0x14
c001f550:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f554:	68 58 54 02 c0       	push   0xc0025458
c001f559:	e8 c3 d1 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001f55e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f565:	c7 04 24 6e 54 02 c0 	mov    DWORD PTR [esp],0xc002546e
c001f56c:	e8 b0 d1 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001f571:	58                   	pop    eax
c001f572:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f578:	e8 d3 f8 fe ff       	call   c000ee50 <LogicalDisk::unmount()>
c001f57d:	c7 04 24 7d 54 02 c0 	mov    DWORD PTR [esp],0xc002547d
c001f584:	e8 98 d1 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001f589:	5a                   	pop    edx
c001f58a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f590:	e8 03 02 ff ff       	call   c000f798 <VCache::writeWriteBuffer()>
c001f595:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f59b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f59f:	83 c4 18             	add    esp,0x18
c001f5a2:	5b                   	pop    ebx
c001f5a3:	e9 e0 01 ff ff       	jmp    c000f788 <VCache::invalidateReadBuffer()>

c001f5a8 <ATAPI::eject()>:
c001f5a8:	57                   	push   edi
c001f5a9:	b9 03 00 00 00       	mov    ecx,0x3
c001f5ae:	53                   	push   ebx
c001f5af:	83 ec 14             	sub    esp,0x14
c001f5b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f5b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f5ba:	fc                   	cld    
c001f5bb:	31 c0                	xor    eax,eax
c001f5bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f5bf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f5c4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f5c9:	50                   	push   eax
c001f5ca:	50                   	push   eax
c001f5cb:	6a 00                	push   0x0
c001f5cd:	6a 00                	push   0x0
c001f5cf:	6a 00                	push   0x0
c001f5d1:	6a 02                	push   0x2
c001f5d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f5d7:	50                   	push   eax
c001f5d8:	53                   	push   ebx
c001f5d9:	e8 ae fc ff ff       	call   c001f28c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f5de:	83 c4 14             	add    esp,0x14
c001f5e1:	53                   	push   ebx
c001f5e2:	e8 65 ff ff ff       	call   c001f54c <ATAPI::diskRemoved()>
c001f5e7:	83 c4 24             	add    esp,0x24
c001f5ea:	31 c0                	xor    eax,eax
c001f5ec:	5b                   	pop    ebx
c001f5ed:	5f                   	pop    edi
c001f5ee:	c3                   	ret    
c001f5ef:	90                   	nop

c001f5f0 <ATAPI::diskInserted()>:
c001f5f0:	83 ec 18             	sub    esp,0x18
c001f5f3:	68 19 57 02 c0       	push   0xc0025719
c001f5f8:	e8 24 d1 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001f5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f601:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f608:	83 c4 1c             	add    esp,0x1c
c001f60b:	c3                   	ret    

c001f60c <ATAPI::detectMedia()>:
c001f60c:	56                   	push   esi
c001f60d:	53                   	push   ebx
c001f60e:	83 ec 28             	sub    esp,0x28
c001f611:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f615:	6a 0c                	push   0xc
c001f617:	6a 00                	push   0x0
c001f619:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f61d:	56                   	push   esi
c001f61e:	e8 85 0e fe ff       	call   c00004a8 <memset>
c001f623:	58                   	pop    eax
c001f624:	5a                   	pop    edx
c001f625:	6a 00                	push   0x0
c001f627:	6a 00                	push   0x0
c001f629:	6a 00                	push   0x0
c001f62b:	6a 00                	push   0x0
c001f62d:	56                   	push   esi
c001f62e:	53                   	push   ebx
c001f62f:	e8 58 fc ff ff       	call   c001f28c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f634:	83 c4 1c             	add    esp,0x1c
c001f637:	6a 0c                	push   0xc
c001f639:	6a 00                	push   0x0
c001f63b:	56                   	push   esi
c001f63c:	e8 67 0e fe ff       	call   c00004a8 <memset>
c001f641:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f646:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f64b:	59                   	pop    ecx
c001f64c:	58                   	pop    eax
c001f64d:	6a 01                	push   0x1
c001f64f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f653:	50                   	push   eax
c001f654:	6a 00                	push   0x0
c001f656:	6a 12                	push   0x12
c001f658:	56                   	push   esi
c001f659:	53                   	push   ebx
c001f65a:	e8 2d fc ff ff       	call   c001f28c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f65f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f663:	83 c4 20             	add    esp,0x20
c001f666:	83 e0 7f             	and    eax,0x7f
c001f669:	3c 70                	cmp    al,0x70
c001f66b:	74 15                	je     c001f682 <ATAPI::detectMedia()+0x76>
c001f66d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f674:	75 0c                	jne    c001f682 <ATAPI::detectMedia()+0x76>
c001f676:	83 ec 0c             	sub    esp,0xc
c001f679:	53                   	push   ebx
c001f67a:	e8 71 ff ff ff       	call   c001f5f0 <ATAPI::diskInserted()>
c001f67f:	83 c4 10             	add    esp,0x10
c001f682:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f686:	83 e0 0f             	and    eax,0xf
c001f689:	3c 02                	cmp    al,0x2
c001f68b:	75 1b                	jne    c001f6a8 <ATAPI::detectMedia()+0x9c>
c001f68d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f692:	75 2d                	jne    c001f6c1 <ATAPI::detectMedia()+0xb5>
c001f694:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f69b:	74 24                	je     c001f6c1 <ATAPI::detectMedia()+0xb5>
c001f69d:	83 ec 0c             	sub    esp,0xc
c001f6a0:	53                   	push   ebx
c001f6a1:	e8 a6 fe ff ff       	call   c001f54c <ATAPI::diskRemoved()>
c001f6a6:	eb 16                	jmp    c001f6be <ATAPI::detectMedia()+0xb2>
c001f6a8:	84 c0                	test   al,al
c001f6aa:	75 15                	jne    c001f6c1 <ATAPI::detectMedia()+0xb5>
c001f6ac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f6b3:	75 0c                	jne    c001f6c1 <ATAPI::detectMedia()+0xb5>
c001f6b5:	83 ec 0c             	sub    esp,0xc
c001f6b8:	53                   	push   ebx
c001f6b9:	e8 32 ff ff ff       	call   c001f5f0 <ATAPI::diskInserted()>
c001f6be:	83 c4 10             	add    esp,0x10
c001f6c1:	83 c4 24             	add    esp,0x24
c001f6c4:	5b                   	pop    ebx
c001f6c5:	5e                   	pop    esi
c001f6c6:	c3                   	ret    
c001f6c7:	90                   	nop

c001f6c8 <ATAPI::open(int, int, void*)>:
c001f6c8:	56                   	push   esi
c001f6c9:	53                   	push   ebx
c001f6ca:	50                   	push   eax
c001f6cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f6d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6d7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f6dd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f6e3:	c1 e0 06             	shl    eax,0x6
c001f6e6:	01 d0                	add    eax,edx
c001f6e8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f6ef:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f6f5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f6fc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f706:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f70c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f713:	6a 04                	push   0x4
c001f715:	6a 0c                	push   0xc
c001f717:	51                   	push   ecx
c001f718:	52                   	push   edx
c001f719:	e8 cc e4 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f71e:	90                   	nop
c001f71f:	90                   	nop
c001f720:	6a 00                	push   0x0
c001f722:	6a 0c                	push   0xc
c001f724:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f72b:	50                   	push   eax
c001f72c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f732:	e8 b3 e4 ff ff       	call   c001dbea <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f737:	83 c4 14             	add    esp,0x14
c001f73a:	68 74 01 00 00       	push   0x174
c001f73f:	e8 53 a0 fe ff       	call   c0009797 <malloc>
c001f744:	83 c4 0c             	add    esp,0xc
c001f747:	89 c6                	mov    esi,eax
c001f749:	6a 00                	push   0x0
c001f74b:	68 ff ff ff 7f       	push   0x7fffffff
c001f750:	6a 00                	push   0x0
c001f752:	6a 00                	push   0x0
c001f754:	53                   	push   ebx
c001f755:	68 f6 57 02 c0       	push   0xc00257f6
c001f75a:	50                   	push   eax
c001f75b:	e8 fc f4 fe ff       	call   c000ec5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f760:	83 c4 14             	add    esp,0x14
c001f763:	56                   	push   esi
c001f764:	e8 a9 f5 fe ff       	call   c000ed12 <LogicalDisk::assignDriveLetter()>
c001f769:	5a                   	pop    edx
c001f76a:	0f be c0             	movsx  eax,al
c001f76d:	59                   	pop    ecx
c001f76e:	50                   	push   eax
c001f76f:	68 8b 54 02 c0       	push   0xc002548b
c001f774:	e8 a8 cf fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001f779:	58                   	pop    eax
c001f77a:	5a                   	pop    edx
c001f77b:	56                   	push   esi
c001f77c:	53                   	push   ebx
c001f77d:	e8 1c e4 fe ff       	call   c000db9e <Device::addChild(Device*)>
c001f782:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001f788:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f78b:	e8 ae e8 fe ff       	call   c000e03e <PhysicalDisk::startCache()>
c001f790:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f797:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f79a:	e8 6d fe ff ff       	call   c001f60c <ATAPI::detectMedia()>
c001f79f:	83 c4 14             	add    esp,0x14
c001f7a2:	31 c0                	xor    eax,eax
c001f7a4:	5b                   	pop    ebx
c001f7a5:	5e                   	pop    esi
c001f7a6:	c3                   	ret    
c001f7a7:	90                   	nop

c001f7a8 <ATAPI::read(unsigned long long, int, void*)>:
c001f7a8:	55                   	push   ebp
c001f7a9:	57                   	push   edi
c001f7aa:	56                   	push   esi
c001f7ab:	53                   	push   ebx
c001f7ac:	83 ec 1c             	sub    esp,0x1c
c001f7af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f7b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f7bb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f7c2:	74 41                	je     c001f805 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f7c4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f7c8:	b9 03 00 00 00       	mov    ecx,0x3
c001f7cd:	fc                   	cld    
c001f7ce:	31 c0                	xor    eax,eax
c001f7d0:	86 fb                	xchg   bl,bh
c001f7d2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f7d4:	c1 c3 10             	rol    ebx,0x10
c001f7d7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f7dc:	89 e8                	mov    eax,ebp
c001f7de:	86 fb                	xchg   bl,bh
c001f7e0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f7e4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f7e8:	50                   	push   eax
c001f7e9:	50                   	push   eax
c001f7ea:	55                   	push   ebp
c001f7eb:	c1 e5 0b             	shl    ebp,0xb
c001f7ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f7f2:	6a 00                	push   0x0
c001f7f4:	55                   	push   ebp
c001f7f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7f9:	50                   	push   eax
c001f7fa:	56                   	push   esi
c001f7fb:	e8 8c fa ff ff       	call   c001f28c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f800:	83 c4 20             	add    esp,0x20
c001f803:	eb 1a                	jmp    c001f81f <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f805:	83 ec 0c             	sub    esp,0xc
c001f808:	56                   	push   esi
c001f809:	e8 fe fd ff ff       	call   c001f60c <ATAPI::detectMedia()>
c001f80e:	83 c4 10             	add    esp,0x10
c001f811:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f818:	75 aa                	jne    c001f7c4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f81a:	b8 02 00 00 00       	mov    eax,0x2
c001f81f:	83 c4 1c             	add    esp,0x1c
c001f822:	5b                   	pop    ebx
c001f823:	5e                   	pop    esi
c001f824:	5f                   	pop    edi
c001f825:	5d                   	pop    ebp
c001f826:	c3                   	ret    
c001f827:	90                   	nop

c001f828 <SATA::close(int, int, void*)>:
c001f828:	83 ec 0c             	sub    esp,0xc
c001f82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f835:	85 c0                	test   eax,eax
c001f837:	74 0c                	je     c001f845 <SATA::close(int, int, void*)+0x1d>
c001f839:	83 ec 0c             	sub    esp,0xc
c001f83c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f83e:	50                   	push   eax
c001f83f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f842:	83 c4 10             	add    esp,0x10
c001f845:	31 c0                	xor    eax,eax
c001f847:	83 c4 0c             	add    esp,0xc
c001f84a:	c3                   	ret    
c001f84b:	90                   	nop

c001f84c <SATA::powerSaving(PowerSavingLevel)>:
c001f84c:	c3                   	ret    
c001f84d:	90                   	nop

c001f84e <SATA::open(int, int, void*)>:
c001f84e:	56                   	push   esi
c001f84f:	53                   	push   ebx
c001f850:	51                   	push   ecx
c001f851:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f855:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001f85c:	74 2d                	je     c001f88b <SATA::open(int, int, void*)+0x3d>
c001f85e:	83 ec 0c             	sub    esp,0xc
c001f861:	68 d0 54 02 c0       	push   0xc00254d0
c001f866:	e8 86 9f fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f86b:	83 c4 10             	add    esp,0x10
c001f86e:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001f875:	75 14                	jne    c001f88b <SATA::open(int, int, void*)+0x3d>
c001f877:	e4 60                	in     al,0x60
c001f879:	3c 5a                	cmp    al,0x5a
c001f87b:	74 04                	je     c001f881 <SATA::open(int, int, void*)+0x33>
c001f87d:	3c 1c                	cmp    al,0x1c
c001f87f:	75 f6                	jne    c001f877 <SATA::open(int, int, void*)+0x29>
c001f881:	e4 60                	in     al,0x60
c001f883:	3c 5a                	cmp    al,0x5a
c001f885:	74 fa                	je     c001f881 <SATA::open(int, int, void*)+0x33>
c001f887:	3c 1c                	cmp    al,0x1c
c001f889:	74 f6                	je     c001f881 <SATA::open(int, int, void*)+0x33>
c001f88b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f88f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f899:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f89f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f8a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f8b7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f8bd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f8c4:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001f8cb:	74 2d                	je     c001f8fa <SATA::open(int, int, void*)+0xac>
c001f8cd:	83 ec 0c             	sub    esp,0xc
c001f8d0:	68 dd 54 02 c0       	push   0xc00254dd
c001f8d5:	e8 17 9f fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f8da:	83 c4 10             	add    esp,0x10
c001f8dd:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001f8e4:	75 14                	jne    c001f8fa <SATA::open(int, int, void*)+0xac>
c001f8e6:	e4 60                	in     al,0x60
c001f8e8:	3c 1c                	cmp    al,0x1c
c001f8ea:	74 04                	je     c001f8f0 <SATA::open(int, int, void*)+0xa2>
c001f8ec:	3c 5a                	cmp    al,0x5a
c001f8ee:	75 f6                	jne    c001f8e6 <SATA::open(int, int, void*)+0x98>
c001f8f0:	e4 60                	in     al,0x60
c001f8f2:	3c 5a                	cmp    al,0x5a
c001f8f4:	74 fa                	je     c001f8f0 <SATA::open(int, int, void*)+0xa2>
c001f8f6:	3c 1c                	cmp    al,0x1c
c001f8f8:	74 f6                	je     c001f8f0 <SATA::open(int, int, void*)+0xa2>
c001f8fa:	e8 c9 a2 fe ff       	call   c0009bc8 <Phys::allocatePage()>
c001f8ff:	89 c6                	mov    esi,eax
c001f901:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f907:	81 c6 00 10 00 00    	add    esi,0x1000
c001f90d:	e8 b6 a2 fe ff       	call   c0009bc8 <Phys::allocatePage()>
c001f912:	39 c6                	cmp    esi,eax
c001f914:	74 10                	je     c001f926 <SATA::open(int, int, void*)+0xd8>
c001f916:	83 ec 0c             	sub    esp,0xc
c001f919:	68 ea 54 02 c0       	push   0xc00254ea
c001f91e:	e8 68 31 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001f923:	83 c4 10             	add    esp,0x10
c001f926:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001f92d:	74 2d                	je     c001f95c <SATA::open(int, int, void*)+0x10e>
c001f92f:	83 ec 0c             	sub    esp,0xc
c001f932:	68 fe 54 02 c0       	push   0xc00254fe
c001f937:	e8 b5 9e fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f93c:	83 c4 10             	add    esp,0x10
c001f93f:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001f946:	75 14                	jne    c001f95c <SATA::open(int, int, void*)+0x10e>
c001f948:	e4 60                	in     al,0x60
c001f94a:	3c 1c                	cmp    al,0x1c
c001f94c:	74 04                	je     c001f952 <SATA::open(int, int, void*)+0x104>
c001f94e:	3c 5a                	cmp    al,0x5a
c001f950:	75 f6                	jne    c001f948 <SATA::open(int, int, void*)+0xfa>
c001f952:	e4 60                	in     al,0x60
c001f954:	3c 5a                	cmp    al,0x5a
c001f956:	74 fa                	je     c001f952 <SATA::open(int, int, void*)+0x104>
c001f958:	3c 1c                	cmp    al,0x1c
c001f95a:	74 f6                	je     c001f952 <SATA::open(int, int, void*)+0x104>
c001f95c:	83 ec 0c             	sub    esp,0xc
c001f95f:	6a 02                	push   0x2
c001f961:	e8 5f ba fe ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c001f966:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f96c:	6a 03                	push   0x3
c001f96e:	50                   	push   eax
c001f96f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f975:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c001f97b:	e8 b0 c0 fe ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f980:	83 c4 20             	add    esp,0x20
c001f983:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001f98a:	74 2d                	je     c001f9b9 <SATA::open(int, int, void*)+0x16b>
c001f98c:	83 ec 0c             	sub    esp,0xc
c001f98f:	68 0b 55 02 c0       	push   0xc002550b
c001f994:	e8 58 9e fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f999:	83 c4 10             	add    esp,0x10
c001f99c:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001f9a3:	75 14                	jne    c001f9b9 <SATA::open(int, int, void*)+0x16b>
c001f9a5:	e4 60                	in     al,0x60
c001f9a7:	3c 1c                	cmp    al,0x1c
c001f9a9:	74 04                	je     c001f9af <SATA::open(int, int, void*)+0x161>
c001f9ab:	3c 5a                	cmp    al,0x5a
c001f9ad:	75 f6                	jne    c001f9a5 <SATA::open(int, int, void*)+0x157>
c001f9af:	e4 60                	in     al,0x60
c001f9b1:	3c 5a                	cmp    al,0x5a
c001f9b3:	74 fa                	je     c001f9af <SATA::open(int, int, void*)+0x161>
c001f9b5:	3c 1c                	cmp    al,0x1c
c001f9b7:	74 f6                	je     c001f9af <SATA::open(int, int, void*)+0x161>
c001f9b9:	83 ec 0c             	sub    esp,0xc
c001f9bc:	53                   	push   ebx
c001f9bd:	e8 7c e6 fe ff       	call   c000e03e <PhysicalDisk::startCache()>
c001f9c2:	83 c4 10             	add    esp,0x10
c001f9c5:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001f9cc:	74 2d                	je     c001f9fb <SATA::open(int, int, void*)+0x1ad>
c001f9ce:	83 ec 0c             	sub    esp,0xc
c001f9d1:	68 18 55 02 c0       	push   0xc0025518
c001f9d6:	e8 16 9e fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f9db:	83 c4 10             	add    esp,0x10
c001f9de:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001f9e5:	75 14                	jne    c001f9fb <SATA::open(int, int, void*)+0x1ad>
c001f9e7:	e4 60                	in     al,0x60
c001f9e9:	3c 1c                	cmp    al,0x1c
c001f9eb:	74 04                	je     c001f9f1 <SATA::open(int, int, void*)+0x1a3>
c001f9ed:	3c 5a                	cmp    al,0x5a
c001f9ef:	75 f6                	jne    c001f9e7 <SATA::open(int, int, void*)+0x199>
c001f9f1:	e4 60                	in     al,0x60
c001f9f3:	3c 5a                	cmp    al,0x5a
c001f9f5:	74 fa                	je     c001f9f1 <SATA::open(int, int, void*)+0x1a3>
c001f9f7:	3c 1c                	cmp    al,0x1c
c001f9f9:	74 f6                	je     c001f9f1 <SATA::open(int, int, void*)+0x1a3>
c001f9fb:	83 ec 0c             	sub    esp,0xc
c001f9fe:	53                   	push   ebx
c001f9ff:	e8 ce f6 fe ff       	call   c000f0d2 <createPartitionsForDisk(PhysicalDisk*)>
c001fa04:	83 c4 10             	add    esp,0x10
c001fa07:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fa0e:	74 2d                	je     c001fa3d <SATA::open(int, int, void*)+0x1ef>
c001fa10:	83 ec 0c             	sub    esp,0xc
c001fa13:	68 25 55 02 c0       	push   0xc0025525
c001fa18:	e8 d4 9d fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fa1d:	83 c4 10             	add    esp,0x10
c001fa20:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fa27:	75 14                	jne    c001fa3d <SATA::open(int, int, void*)+0x1ef>
c001fa29:	e4 60                	in     al,0x60
c001fa2b:	3c 1c                	cmp    al,0x1c
c001fa2d:	74 04                	je     c001fa33 <SATA::open(int, int, void*)+0x1e5>
c001fa2f:	3c 5a                	cmp    al,0x5a
c001fa31:	75 f6                	jne    c001fa29 <SATA::open(int, int, void*)+0x1db>
c001fa33:	e4 60                	in     al,0x60
c001fa35:	3c 5a                	cmp    al,0x5a
c001fa37:	74 fa                	je     c001fa33 <SATA::open(int, int, void*)+0x1e5>
c001fa39:	3c 1c                	cmp    al,0x1c
c001fa3b:	74 f6                	je     c001fa33 <SATA::open(int, int, void*)+0x1e5>
c001fa3d:	5a                   	pop    edx
c001fa3e:	31 c0                	xor    eax,eax
c001fa40:	5b                   	pop    ebx
c001fa41:	5e                   	pop    esi
c001fa42:	c3                   	ret    
c001fa43:	90                   	nop

c001fa44 <SATA::SATA()>:
c001fa44:	83 ec 0c             	sub    esp,0xc
c001fa47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4b:	83 ec 04             	sub    esp,0x4
c001fa4e:	68 00 02 00 00       	push   0x200
c001fa53:	68 32 55 02 c0       	push   0xc0025532
c001fa58:	50                   	push   eax
c001fa59:	e8 78 e5 fe ff       	call   c000dfd6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fa5e:	83 c4 10             	add    esp,0x10
c001fa61:	ba dc 56 02 c0       	mov    edx,0xc00256dc
c001fa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6a:	89 10                	mov    DWORD PTR [eax],edx
c001fa6c:	90                   	nop
c001fa6d:	83 c4 0c             	add    esp,0xc
c001fa70:	c3                   	ret    
c001fa71:	90                   	nop

c001fa72 <SATA::access(unsigned long long, int, void*, bool)>:
c001fa72:	55                   	push   ebp
c001fa73:	57                   	push   edi
c001fa74:	56                   	push   esi
c001fa75:	53                   	push   ebx
c001fa76:	83 ec 2c             	sub    esp,0x2c
c001fa79:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001fa7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fa81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fa85:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fa8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fa90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fa94:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fa98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa9c:	75 19                	jne    c001fab7 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c001fa9e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001faa3:	7e 41                	jle    c001fae6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001faa5:	83 ec 0c             	sub    esp,0xc
c001faa8:	68 51 55 02 c0       	push   0xc0025551
c001faad:	e8 d9 2f ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c001fab2:	83 c4 10             	add    esp,0x10
c001fab5:	eb 2f                	jmp    c001fae6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001fab7:	83 ec 0c             	sub    esp,0xc
c001faba:	68 42 55 02 c0       	push   0xc0025542
c001fabf:	e8 2d 9d fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fac4:	83 c4 10             	add    esp,0x10
c001fac7:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001face:	75 ce                	jne    c001fa9e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001fad0:	e4 60                	in     al,0x60
c001fad2:	3c 1c                	cmp    al,0x1c
c001fad4:	74 04                	je     c001fada <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fad6:	3c 5a                	cmp    al,0x5a
c001fad8:	75 f6                	jne    c001fad0 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c001fada:	e4 60                	in     al,0x60
c001fadc:	3c 5a                	cmp    al,0x5a
c001fade:	74 fa                	je     c001fada <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fae0:	3c 1c                	cmp    al,0x1c
c001fae2:	74 f6                	je     c001fada <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fae4:	eb b8                	jmp    c001fa9e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001fae6:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001faed:	75 29                	jne    c001fb18 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c001faef:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001faf5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001fafb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fb01:	8d 75 02             	lea    esi,[ebp+0x2]
c001fb04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fb08:	c1 e6 07             	shl    esi,0x7
c001fb0b:	01 c6                	add    esi,eax
c001fb0d:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fb14:	74 4a                	je     c001fb60 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001fb16:	eb 2f                	jmp    c001fb47 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c001fb18:	83 ec 0c             	sub    esp,0xc
c001fb1b:	68 8a 55 02 c0       	push   0xc002558a
c001fb20:	e8 cc 9c fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fb25:	83 c4 10             	add    esp,0x10
c001fb28:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fb2f:	75 be                	jne    c001faef <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001fb31:	e4 60                	in     al,0x60
c001fb33:	3c 1c                	cmp    al,0x1c
c001fb35:	74 04                	je     c001fb3b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fb37:	3c 5a                	cmp    al,0x5a
c001fb39:	75 f6                	jne    c001fb31 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c001fb3b:	e4 60                	in     al,0x60
c001fb3d:	3c 5a                	cmp    al,0x5a
c001fb3f:	74 fa                	je     c001fb3b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fb41:	3c 1c                	cmp    al,0x1c
c001fb43:	74 f6                	je     c001fb3b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fb45:	eb a8                	jmp    c001faef <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001fb47:	83 ec 0c             	sub    esp,0xc
c001fb4a:	68 99 55 02 c0       	push   0xc0025599
c001fb4f:	e8 9d 9c fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fb5e:	74 3d                	je     c001fb9d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c001fb60:	89 e8                	mov    eax,ebp
c001fb62:	c1 e0 07             	shl    eax,0x7
c001fb65:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fb69:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001fb73:	52                   	push   edx
c001fb74:	52                   	push   edx
c001fb75:	56                   	push   esi
c001fb76:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001fb7c:	e8 fd eb ff ff       	call   c001e77e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fb85:	83 c4 10             	add    esp,0x10
c001fb88:	b8 01 00 00 00       	mov    eax,0x1
c001fb8d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001fb92:	75 1d                	jne    c001fbb1 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c001fb94:	e9 c8 04 00 00       	jmp    c0020061 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001fb99:	3c 5a                	cmp    al,0x5a
c001fb9b:	74 0c                	je     c001fba9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fb9d:	e4 60                	in     al,0x60
c001fb9f:	3c 1c                	cmp    al,0x1c
c001fba1:	75 f6                	jne    c001fb99 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c001fba3:	eb 04                	jmp    c001fba9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fba5:	3c 1c                	cmp    al,0x1c
c001fba7:	75 b7                	jne    c001fb60 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001fba9:	e4 60                	in     al,0x60
c001fbab:	3c 5a                	cmp    al,0x5a
c001fbad:	74 fa                	je     c001fba9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fbaf:	eb f4                	jmp    c001fba5 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c001fbb1:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fbb8:	74 3a                	je     c001fbf4 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c001fbba:	83 ec 0c             	sub    esp,0xc
c001fbbd:	68 a8 55 02 c0       	push   0xc00255a8
c001fbc2:	e8 2a 9c fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fbd1:	74 0d                	je     c001fbe0 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c001fbd3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fbd8:	74 34                	je     c001fc0e <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c001fbda:	eb 1f                	jmp    c001fbfb <SATA::access(unsigned long long, int, void*, bool)+0x189>
c001fbdc:	3c 1c                	cmp    al,0x1c
c001fbde:	74 0c                	je     c001fbec <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fbe0:	e4 60                	in     al,0x60
c001fbe2:	3c 5a                	cmp    al,0x5a
c001fbe4:	75 f6                	jne    c001fbdc <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c001fbe6:	eb 04                	jmp    c001fbec <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fbe8:	3c 1c                	cmp    al,0x1c
c001fbea:	75 e7                	jne    c001fbd3 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c001fbec:	e4 60                	in     al,0x60
c001fbee:	3c 5a                	cmp    al,0x5a
c001fbf0:	74 fa                	je     c001fbec <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fbf2:	eb f4                	jmp    c001fbe8 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c001fbf4:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fbf9:	74 1c                	je     c001fc17 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fbfb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001fbff:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001fc05:	c1 e1 09             	shl    ecx,0x9
c001fc08:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fc0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc0e:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fc15:	75 55                	jne    c001fc6c <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c001fc17:	8d 45 02             	lea    eax,[ebp+0x2]
c001fc1a:	c1 e0 07             	shl    eax,0x7
c001fc1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fc21:	8b 38                	mov    edi,DWORD PTR [eax]
c001fc23:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fc29:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001fc2f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001fc35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc39:	c1 e0 05             	shl    eax,0x5
c001fc3c:	01 c7                	add    edi,eax
c001fc3e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fc42:	83 e0 01             	and    eax,0x1
c001fc45:	c1 e0 06             	shl    eax,0x6
c001fc48:	88 c2                	mov    dl,al
c001fc4a:	8a 07                	mov    al,BYTE PTR [edi]
c001fc4c:	83 e0 bf             	and    eax,0xffffffbf
c001fc4f:	09 d0                	or     eax,edx
c001fc51:	88 07                	mov    BYTE PTR [edi],al
c001fc53:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc55:	25 e0 ff 00 00       	and    eax,0xffe0
c001fc5a:	0d 05 00 01 00       	or     eax,0x10005
c001fc5f:	89 07                	mov    DWORD PTR [edi],eax
c001fc61:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fc68:	74 4d                	je     c001fcb7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001fc6a:	eb 32                	jmp    c001fc9e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	68 b7 55 02 c0       	push   0xc00255b7
c001fc74:	e8 78 9b fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fc83:	75 92                	jne    c001fc17 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fc85:	e4 60                	in     al,0x60
c001fc87:	3c 1c                	cmp    al,0x1c
c001fc89:	74 04                	je     c001fc8f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fc8b:	3c 5a                	cmp    al,0x5a
c001fc8d:	75 f6                	jne    c001fc85 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c001fc8f:	e4 60                	in     al,0x60
c001fc91:	3c 5a                	cmp    al,0x5a
c001fc93:	74 fa                	je     c001fc8f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fc95:	3c 1c                	cmp    al,0x1c
c001fc97:	74 f6                	je     c001fc8f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fc99:	e9 79 ff ff ff       	jmp    c001fc17 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fc9e:	83 ec 0c             	sub    esp,0xc
c001fca1:	68 c6 55 02 c0       	push   0xc00255c6
c001fca6:	e8 46 9b fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fcab:	83 c4 10             	add    esp,0x10
c001fcae:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fcb5:	74 3b                	je     c001fcf2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001fcb7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fcbd:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001fcc3:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001fcc9:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001fccc:	50                   	push   eax
c001fccd:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c001fcd1:	83 c0 08             	add    eax,0x8
c001fcd4:	c1 e0 04             	shl    eax,0x4
c001fcd7:	50                   	push   eax
c001fcd8:	6a 00                	push   0x0
c001fcda:	56                   	push   esi
c001fcdb:	e8 c8 07 fe ff       	call   c00004a8 <memset>
c001fce0:	83 c4 10             	add    esp,0x10
c001fce3:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fcea:	74 33                	je     c001fd1f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001fcec:	eb 18                	jmp    c001fd06 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c001fcee:	3c 1c                	cmp    al,0x1c
c001fcf0:	74 0c                	je     c001fcfe <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fcf2:	e4 60                	in     al,0x60
c001fcf4:	3c 5a                	cmp    al,0x5a
c001fcf6:	75 f6                	jne    c001fcee <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001fcf8:	eb 04                	jmp    c001fcfe <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fcfa:	3c 1c                	cmp    al,0x1c
c001fcfc:	75 b9                	jne    c001fcb7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001fcfe:	e4 60                	in     al,0x60
c001fd00:	3c 5a                	cmp    al,0x5a
c001fd02:	74 fa                	je     c001fcfe <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fd04:	eb f4                	jmp    c001fcfa <SATA::access(unsigned long long, int, void*, bool)+0x288>
c001fd06:	83 ec 0c             	sub    esp,0xc
c001fd09:	68 d5 55 02 c0       	push   0xc00255d5
c001fd0e:	e8 de 9a fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fd1d:	74 48                	je     c001fd67 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c001fd1f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fd25:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001fd2b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fd2f:	c1 e0 09             	shl    eax,0x9
c001fd32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fd36:	48                   	dec    eax
c001fd37:	25 ff ff 3f 00       	and    eax,0x3fffff
c001fd3c:	89 c2                	mov    edx,eax
c001fd3e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001fd44:	25 00 00 c0 ff       	and    eax,0xffc00000
c001fd49:	09 d0                	or     eax,edx
c001fd4b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001fd51:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001fd58:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fd5f:	74 33                	je     c001fd94 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c001fd61:	eb 18                	jmp    c001fd7b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c001fd63:	3c 1c                	cmp    al,0x1c
c001fd65:	74 0c                	je     c001fd73 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fd67:	e4 60                	in     al,0x60
c001fd69:	3c 5a                	cmp    al,0x5a
c001fd6b:	75 f6                	jne    c001fd63 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c001fd6d:	eb 04                	jmp    c001fd73 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fd6f:	3c 1c                	cmp    al,0x1c
c001fd71:	75 ac                	jne    c001fd1f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001fd73:	e4 60                	in     al,0x60
c001fd75:	3c 5a                	cmp    al,0x5a
c001fd77:	74 fa                	je     c001fd73 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fd79:	eb f4                	jmp    c001fd6f <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c001fd7b:	83 ec 0c             	sub    esp,0xc
c001fd7e:	68 e4 55 02 c0       	push   0xc00255e4
c001fd83:	e8 69 9a fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fd88:	83 c4 10             	add    esp,0x10
c001fd8b:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fd92:	74 63                	je     c001fdf7 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c001fd94:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fd97:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001fd9b:	66 25 00 7f          	and    ax,0x7f00
c001fd9f:	66 0d 27 80          	or     ax,0x8027
c001fda3:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001fda8:	66 89 06             	mov    WORD PTR [esi],ax
c001fdab:	19 c0                	sbb    eax,eax
c001fdad:	83 e0 f0             	and    eax,0xfffffff0
c001fdb0:	83 c0 35             	add    eax,0x35
c001fdb3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001fdb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fdba:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001fdbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fdc2:	c1 e8 10             	shr    eax,0x10
c001fdc5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001fdc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fdcc:	c1 e8 18             	shr    eax,0x18
c001fdcf:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fdd6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001fdd9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001fddd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001fde0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fde4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001fde7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fdeb:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001fdef:	74 33                	je     c001fe24 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c001fdf1:	eb 18                	jmp    c001fe0b <SATA::access(unsigned long long, int, void*, bool)+0x399>
c001fdf3:	3c 1c                	cmp    al,0x1c
c001fdf5:	74 0c                	je     c001fe03 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fdf7:	e4 60                	in     al,0x60
c001fdf9:	3c 5a                	cmp    al,0x5a
c001fdfb:	75 f6                	jne    c001fdf3 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c001fdfd:	eb 04                	jmp    c001fe03 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fdff:	3c 1c                	cmp    al,0x1c
c001fe01:	75 91                	jne    c001fd94 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c001fe03:	e4 60                	in     al,0x60
c001fe05:	3c 5a                	cmp    al,0x5a
c001fe07:	74 fa                	je     c001fe03 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fe09:	eb f4                	jmp    c001fdff <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c001fe0b:	83 ec 0c             	sub    esp,0xc
c001fe0e:	68 f3 55 02 c0       	push   0xc00255f3
c001fe13:	e8 d9 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fe18:	83 c4 10             	add    esp,0x10
c001fe1b:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fe22:	74 11                	je     c001fe35 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001fe24:	89 e8                	mov    eax,ebp
c001fe26:	31 f6                	xor    esi,esi
c001fe28:	c1 e0 07             	shl    eax,0x7
c001fe2b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fe2f:	eb 21                	jmp    c001fe52 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c001fe31:	3c 1c                	cmp    al,0x1c
c001fe33:	74 0c                	je     c001fe41 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fe35:	e4 60                	in     al,0x60
c001fe37:	3c 5a                	cmp    al,0x5a
c001fe39:	75 f6                	jne    c001fe31 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c001fe3b:	eb 04                	jmp    c001fe41 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fe3d:	3c 1c                	cmp    al,0x1c
c001fe3f:	75 e3                	jne    c001fe24 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c001fe41:	e4 60                	in     al,0x60
c001fe43:	3c 5a                	cmp    al,0x5a
c001fe45:	74 fa                	je     c001fe41 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fe47:	eb f4                	jmp    c001fe3d <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c001fe49:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fe4f:	74 0c                	je     c001fe5d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c001fe51:	46                   	inc    esi
c001fe52:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c001fe58:	80 e2 88             	and    dl,0x88
c001fe5b:	75 ec                	jne    c001fe49 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c001fe5d:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fe64:	74 3d                	je     c001fea3 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c001fe66:	83 ec 0c             	sub    esp,0xc
c001fe69:	68 02 56 02 c0       	push   0xc0025602
c001fe6e:	e8 7e 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fe73:	8b 15 60 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026460
c001fe79:	83 c4 10             	add    esp,0x10
c001fe7c:	f6 c2 80             	test   dl,0x80
c001fe7f:	74 0e                	je     c001fe8f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c001fe81:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fe87:	75 2f                	jne    c001feb8 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c001fe89:	eb 20                	jmp    c001feab <SATA::access(unsigned long long, int, void*, bool)+0x439>
c001fe8b:	3c 1c                	cmp    al,0x1c
c001fe8d:	74 0c                	je     c001fe9b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fe8f:	e4 60                	in     al,0x60
c001fe91:	3c 5a                	cmp    al,0x5a
c001fe93:	75 f6                	jne    c001fe8b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c001fe95:	eb 04                	jmp    c001fe9b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fe97:	3c 1c                	cmp    al,0x1c
c001fe99:	75 e6                	jne    c001fe81 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c001fe9b:	e4 60                	in     al,0x60
c001fe9d:	3c 5a                	cmp    al,0x5a
c001fe9f:	74 fa                	je     c001fe9b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fea1:	eb f4                	jmp    c001fe97 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c001fea3:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fea9:	75 13                	jne    c001febe <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001feab:	83 ec 0c             	sub    esp,0xc
c001feae:	68 12 56 02 c0       	push   0xc0025612
c001feb3:	e9 d2 00 00 00       	jmp    c001ff8a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c001feb8:	0f ba e2 0b          	bt     edx,0xb
c001febc:	72 25                	jb     c001fee3 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c001febe:	be 01 00 00 00       	mov    esi,0x1
c001fec3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001fec7:	89 e8                	mov    eax,ebp
c001fec9:	d3 e6                	shl    esi,cl
c001fecb:	c1 e0 07             	shl    eax,0x7
c001fece:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fed2:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001fed9:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c001fedf:	74 4a                	je     c001ff2b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c001fee1:	eb 2f                	jmp    c001ff12 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c001fee3:	83 ec 0c             	sub    esp,0xc
c001fee6:	68 20 56 02 c0       	push   0xc0025620
c001feeb:	e8 01 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fef0:	83 c4 10             	add    esp,0x10
c001fef3:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001fefa:	75 c2                	jne    c001febe <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fefc:	e4 60                	in     al,0x60
c001fefe:	3c 5a                	cmp    al,0x5a
c001ff00:	74 04                	je     c001ff06 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001ff02:	3c 1c                	cmp    al,0x1c
c001ff04:	75 f6                	jne    c001fefc <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c001ff06:	e4 60                	in     al,0x60
c001ff08:	3c 5a                	cmp    al,0x5a
c001ff0a:	74 fa                	je     c001ff06 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001ff0c:	3c 1c                	cmp    al,0x1c
c001ff0e:	74 f6                	je     c001ff06 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001ff10:	eb ac                	jmp    c001febe <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001ff12:	83 ec 0c             	sub    esp,0xc
c001ff15:	68 30 56 02 c0       	push   0xc0025630
c001ff1a:	e8 d2 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ff1f:	83 c4 10             	add    esp,0x10
c001ff22:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001ff29:	74 0f                	je     c001ff3a <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c001ff2b:	89 e8                	mov    eax,ebp
c001ff2d:	c1 e0 07             	shl    eax,0x7
c001ff30:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ff34:	eb 24                	jmp    c001ff5a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c001ff36:	3c 1c                	cmp    al,0x1c
c001ff38:	74 0c                	je     c001ff46 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001ff3a:	e4 60                	in     al,0x60
c001ff3c:	3c 5a                	cmp    al,0x5a
c001ff3e:	75 f6                	jne    c001ff36 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c001ff40:	eb 04                	jmp    c001ff46 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001ff42:	3c 1c                	cmp    al,0x1c
c001ff44:	75 e5                	jne    c001ff2b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c001ff46:	e4 60                	in     al,0x60
c001ff48:	3c 5a                	cmp    al,0x5a
c001ff4a:	74 fa                	je     c001ff46 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001ff4c:	eb f4                	jmp    c001ff42 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c001ff4e:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c001ff54:	0f ba e2 1e          	bt     edx,0x1e
c001ff58:	72 28                	jb     c001ff82 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c001ff5a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c001ff60:	85 d6                	test   esi,edx
c001ff62:	75 ea                	jne    c001ff4e <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c001ff64:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001ff6b:	75 2f                	jne    c001ff9c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c001ff6d:	89 e8                	mov    eax,ebp
c001ff6f:	c1 e0 07             	shl    eax,0x7
c001ff72:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ff76:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ff7c:	0f ba e0 1e          	bt     eax,0x1e
c001ff80:	73 49                	jae    c001ffcb <SATA::access(unsigned long long, int, void*, bool)+0x559>
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	68 40 56 02 c0       	push   0xc0025640
c001ff8a:	e8 92 c7 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	b8 01 00 00 00       	mov    eax,0x1
c001ff97:	e9 c5 00 00 00       	jmp    c0020061 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001ff9c:	83 ec 0c             	sub    esp,0xc
c001ff9f:	68 51 56 02 c0       	push   0xc0025651
c001ffa4:	e8 48 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ffa9:	83 c4 10             	add    esp,0x10
c001ffac:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001ffb3:	75 b8                	jne    c001ff6d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c001ffb5:	e4 60                	in     al,0x60
c001ffb7:	3c 5a                	cmp    al,0x5a
c001ffb9:	74 04                	je     c001ffbf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001ffbb:	3c 1c                	cmp    al,0x1c
c001ffbd:	75 f6                	jne    c001ffb5 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c001ffbf:	e4 60                	in     al,0x60
c001ffc1:	3c 5a                	cmp    al,0x5a
c001ffc3:	74 fa                	je     c001ffbf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001ffc5:	3c 1c                	cmp    al,0x1c
c001ffc7:	74 f6                	je     c001ffbf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001ffc9:	eb a2                	jmp    c001ff6d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c001ffcb:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c001ffd2:	74 3a                	je     c002000e <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c001ffd4:	83 ec 0c             	sub    esp,0xc
c001ffd7:	68 61 56 02 c0       	push   0xc0025661
c001ffdc:	e8 10 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ffe1:	83 c4 10             	add    esp,0x10
c001ffe4:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c001ffeb:	74 0d                	je     c001fffa <SATA::access(unsigned long long, int, void*, bool)+0x588>
c001ffed:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fff2:	75 31                	jne    c0020025 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c001fff4:	eb 1f                	jmp    c0020015 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c001fff6:	3c 1c                	cmp    al,0x1c
c001fff8:	74 0c                	je     c0020006 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001fffa:	e4 60                	in     al,0x60
c001fffc:	3c 5a                	cmp    al,0x5a
c001fffe:	75 f6                	jne    c001fff6 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020000:	eb 04                	jmp    c0020006 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020002:	3c 1c                	cmp    al,0x1c
c0020004:	75 e7                	jne    c001ffed <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020006:	e4 60                	in     al,0x60
c0020008:	3c 5a                	cmp    al,0x5a
c002000a:	74 fa                	je     c0020006 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002000c:	eb f4                	jmp    c0020002 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c002000e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020013:	75 19                	jne    c002002e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020015:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002001b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002001f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020023:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020025:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c002002c:	75 04                	jne    c0020032 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c002002e:	31 c0                	xor    eax,eax
c0020030:	eb 2f                	jmp    c0020061 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020032:	83 ec 0c             	sub    esp,0xc
c0020035:	68 71 56 02 c0       	push   0xc0025671
c002003a:	e8 b2 97 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c002003f:	83 c4 10             	add    esp,0x10
c0020042:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c0020049:	75 e3                	jne    c002002e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002004b:	e4 60                	in     al,0x60
c002004d:	3c 1c                	cmp    al,0x1c
c002004f:	74 04                	je     c0020055 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020051:	3c 5a                	cmp    al,0x5a
c0020053:	75 f6                	jne    c002004b <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020055:	e4 60                	in     al,0x60
c0020057:	3c 5a                	cmp    al,0x5a
c0020059:	74 fa                	je     c0020055 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002005b:	3c 1c                	cmp    al,0x1c
c002005d:	74 f6                	je     c0020055 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002005f:	eb cd                	jmp    c002002e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020061:	83 c4 2c             	add    esp,0x2c
c0020064:	5b                   	pop    ebx
c0020065:	5e                   	pop    esi
c0020066:	5f                   	pop    edi
c0020067:	5d                   	pop    ebp
c0020068:	c3                   	ret    
c0020069:	90                   	nop

c002006a <SATA::read(unsigned long long, int, void*)>:
c002006a:	55                   	push   ebp
c002006b:	57                   	push   edi
c002006c:	56                   	push   esi
c002006d:	53                   	push   ebx
c002006e:	83 ec 0c             	sub    esp,0xc
c0020071:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020075:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020079:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002007d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020081:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c0020088:	74 2d                	je     c00200b7 <SATA::read(unsigned long long, int, void*)+0x4d>
c002008a:	83 ec 0c             	sub    esp,0xc
c002008d:	68 81 56 02 c0       	push   0xc0025681
c0020092:	e8 5a 97 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0020097:	83 c4 10             	add    esp,0x10
c002009a:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c00200a1:	75 14                	jne    c00200b7 <SATA::read(unsigned long long, int, void*)+0x4d>
c00200a3:	e4 60                	in     al,0x60
c00200a5:	3c 1c                	cmp    al,0x1c
c00200a7:	74 04                	je     c00200ad <SATA::read(unsigned long long, int, void*)+0x43>
c00200a9:	3c 5a                	cmp    al,0x5a
c00200ab:	75 f6                	jne    c00200a3 <SATA::read(unsigned long long, int, void*)+0x39>
c00200ad:	e4 60                	in     al,0x60
c00200af:	3c 5a                	cmp    al,0x5a
c00200b1:	74 fa                	je     c00200ad <SATA::read(unsigned long long, int, void*)+0x43>
c00200b3:	3c 1c                	cmp    al,0x1c
c00200b5:	74 f6                	je     c00200ad <SATA::read(unsigned long long, int, void*)+0x43>
c00200b7:	8d 53 ff             	lea    edx,[ebx-0x1]
c00200ba:	b8 04 00 00 00       	mov    eax,0x4
c00200bf:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00200c5:	0f 87 96 00 00 00    	ja     c0020161 <SATA::read(unsigned long long, int, void*)+0xf7>
c00200cb:	b8 06 00 00 00       	mov    eax,0x6
c00200d0:	85 ed                	test   ebp,ebp
c00200d2:	0f 84 89 00 00 00    	je     c0020161 <SATA::read(unsigned long long, int, void*)+0xf7>
c00200d8:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c00200df:	74 2d                	je     c002010e <SATA::read(unsigned long long, int, void*)+0xa4>
c00200e1:	83 ec 0c             	sub    esp,0xc
c00200e4:	68 8e 56 02 c0       	push   0xc002568e
c00200e9:	e8 03 97 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00200ee:	83 c4 10             	add    esp,0x10
c00200f1:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c00200f8:	75 14                	jne    c002010e <SATA::read(unsigned long long, int, void*)+0xa4>
c00200fa:	e4 60                	in     al,0x60
c00200fc:	3c 5a                	cmp    al,0x5a
c00200fe:	74 04                	je     c0020104 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020100:	3c 1c                	cmp    al,0x1c
c0020102:	75 f6                	jne    c00200fa <SATA::read(unsigned long long, int, void*)+0x90>
c0020104:	e4 60                	in     al,0x60
c0020106:	3c 5a                	cmp    al,0x5a
c0020108:	74 fa                	je     c0020104 <SATA::read(unsigned long long, int, void*)+0x9a>
c002010a:	3c 1c                	cmp    al,0x1c
c002010c:	74 f6                	je     c0020104 <SATA::read(unsigned long long, int, void*)+0x9a>
c002010e:	50                   	push   eax
c002010f:	50                   	push   eax
c0020110:	6a 00                	push   0x0
c0020112:	55                   	push   ebp
c0020113:	53                   	push   ebx
c0020114:	57                   	push   edi
c0020115:	56                   	push   esi
c0020116:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002011a:	e8 53 f9 ff ff       	call   c001fa72 <SATA::access(unsigned long long, int, void*, bool)>
c002011f:	83 c4 20             	add    esp,0x20
c0020122:	89 c3                	mov    ebx,eax
c0020124:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c002012b:	74 2d                	je     c002015a <SATA::read(unsigned long long, int, void*)+0xf0>
c002012d:	83 ec 0c             	sub    esp,0xc
c0020130:	68 9b 56 02 c0       	push   0xc002569b
c0020135:	e8 b7 96 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c002013a:	83 c4 10             	add    esp,0x10
c002013d:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c0020144:	75 14                	jne    c002015a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020146:	e4 60                	in     al,0x60
c0020148:	3c 5a                	cmp    al,0x5a
c002014a:	74 04                	je     c0020150 <SATA::read(unsigned long long, int, void*)+0xe6>
c002014c:	3c 1c                	cmp    al,0x1c
c002014e:	75 f6                	jne    c0020146 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020150:	e4 60                	in     al,0x60
c0020152:	3c 5a                	cmp    al,0x5a
c0020154:	74 fa                	je     c0020150 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020156:	3c 1c                	cmp    al,0x1c
c0020158:	74 f6                	je     c0020150 <SATA::read(unsigned long long, int, void*)+0xe6>
c002015a:	31 c0                	xor    eax,eax
c002015c:	85 db                	test   ebx,ebx
c002015e:	0f 95 c0             	setne  al
c0020161:	83 c4 0c             	add    esp,0xc
c0020164:	5b                   	pop    ebx
c0020165:	5e                   	pop    esi
c0020166:	5f                   	pop    edi
c0020167:	5d                   	pop    ebp
c0020168:	c3                   	ret    
c0020169:	90                   	nop

c002016a <SATA::write(unsigned long long, int, void*)>:
c002016a:	55                   	push   ebp
c002016b:	57                   	push   edi
c002016c:	56                   	push   esi
c002016d:	53                   	push   ebx
c002016e:	83 ec 1c             	sub    esp,0x1c
c0020171:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020175:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020179:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002017d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020181:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c0020188:	74 2d                	je     c00201b7 <SATA::write(unsigned long long, int, void*)+0x4d>
c002018a:	83 ec 0c             	sub    esp,0xc
c002018d:	68 a8 56 02 c0       	push   0xc00256a8
c0020192:	e8 5a 96 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0020197:	83 c4 10             	add    esp,0x10
c002019a:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c00201a1:	75 14                	jne    c00201b7 <SATA::write(unsigned long long, int, void*)+0x4d>
c00201a3:	e4 60                	in     al,0x60
c00201a5:	3c 1c                	cmp    al,0x1c
c00201a7:	74 04                	je     c00201ad <SATA::write(unsigned long long, int, void*)+0x43>
c00201a9:	3c 5a                	cmp    al,0x5a
c00201ab:	75 f6                	jne    c00201a3 <SATA::write(unsigned long long, int, void*)+0x39>
c00201ad:	e4 60                	in     al,0x60
c00201af:	3c 5a                	cmp    al,0x5a
c00201b1:	74 fa                	je     c00201ad <SATA::write(unsigned long long, int, void*)+0x43>
c00201b3:	3c 1c                	cmp    al,0x1c
c00201b5:	74 f6                	je     c00201ad <SATA::write(unsigned long long, int, void*)+0x43>
c00201b7:	8d 55 ff             	lea    edx,[ebp-0x1]
c00201ba:	b8 04 00 00 00       	mov    eax,0x4
c00201bf:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00201c5:	0f 87 bd 00 00 00    	ja     c0020288 <SATA::write(unsigned long long, int, void*)+0x11e>
c00201cb:	b8 06 00 00 00       	mov    eax,0x6
c00201d0:	85 db                	test   ebx,ebx
c00201d2:	0f 84 b0 00 00 00    	je     c0020288 <SATA::write(unsigned long long, int, void*)+0x11e>
c00201d8:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c00201df:	74 2d                	je     c002020e <SATA::write(unsigned long long, int, void*)+0xa4>
c00201e1:	83 ec 0c             	sub    esp,0xc
c00201e4:	68 b6 56 02 c0       	push   0xc00256b6
c00201e9:	e8 03 96 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00201ee:	83 c4 10             	add    esp,0x10
c00201f1:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c00201f8:	75 14                	jne    c002020e <SATA::write(unsigned long long, int, void*)+0xa4>
c00201fa:	e4 60                	in     al,0x60
c00201fc:	3c 1c                	cmp    al,0x1c
c00201fe:	74 04                	je     c0020204 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020200:	3c 5a                	cmp    al,0x5a
c0020202:	75 f6                	jne    c00201fa <SATA::write(unsigned long long, int, void*)+0x90>
c0020204:	e4 60                	in     al,0x60
c0020206:	3c 5a                	cmp    al,0x5a
c0020208:	74 fa                	je     c0020204 <SATA::write(unsigned long long, int, void*)+0x9a>
c002020a:	3c 1c                	cmp    al,0x1c
c002020c:	74 f6                	je     c0020204 <SATA::write(unsigned long long, int, void*)+0x9a>
c002020e:	c1 e5 09             	shl    ebp,0x9
c0020211:	01 dd                	add    ebp,ebx
c0020213:	89 f0                	mov    eax,esi
c0020215:	89 fa                	mov    edx,edi
c0020217:	83 c0 01             	add    eax,0x1
c002021a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002021e:	83 d2 00             	adc    edx,0x0
c0020221:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020225:	50                   	push   eax
c0020226:	50                   	push   eax
c0020227:	6a 01                	push   0x1
c0020229:	53                   	push   ebx
c002022a:	81 c3 00 02 00 00    	add    ebx,0x200
c0020230:	6a 01                	push   0x1
c0020232:	57                   	push   edi
c0020233:	56                   	push   esi
c0020234:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020238:	e8 35 f8 ff ff       	call   c001fa72 <SATA::access(unsigned long long, int, void*, bool)>
c002023d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020241:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020245:	83 c4 20             	add    esp,0x20
c0020248:	39 dd                	cmp    ebp,ebx
c002024a:	75 c7                	jne    c0020213 <SATA::write(unsigned long long, int, void*)+0xa9>
c002024c:	f6 05 61 64 02 c0 08 	test   BYTE PTR ds:0xc0026461,0x8
c0020253:	75 04                	jne    c0020259 <SATA::write(unsigned long long, int, void*)+0xef>
c0020255:	31 c0                	xor    eax,eax
c0020257:	eb 2f                	jmp    c0020288 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020259:	83 ec 0c             	sub    esp,0xc
c002025c:	68 c4 56 02 c0       	push   0xc00256c4
c0020261:	e8 8b 95 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0020266:	83 c4 10             	add    esp,0x10
c0020269:	f6 05 60 64 02 c0 80 	test   BYTE PTR ds:0xc0026460,0x80
c0020270:	75 e3                	jne    c0020255 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020272:	e4 60                	in     al,0x60
c0020274:	3c 5a                	cmp    al,0x5a
c0020276:	74 04                	je     c002027c <SATA::write(unsigned long long, int, void*)+0x112>
c0020278:	3c 1c                	cmp    al,0x1c
c002027a:	75 f6                	jne    c0020272 <SATA::write(unsigned long long, int, void*)+0x108>
c002027c:	e4 60                	in     al,0x60
c002027e:	3c 5a                	cmp    al,0x5a
c0020280:	74 fa                	je     c002027c <SATA::write(unsigned long long, int, void*)+0x112>
c0020282:	3c 1c                	cmp    al,0x1c
c0020284:	74 f6                	je     c002027c <SATA::write(unsigned long long, int, void*)+0x112>
c0020286:	eb cd                	jmp    c0020255 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020288:	83 c4 1c             	add    esp,0x1c
c002028b:	5b                   	pop    ebx
c002028c:	5e                   	pop    esi
c002028d:	5f                   	pop    edi
c002028e:	5d                   	pop    ebp
c002028f:	c3                   	ret    

c0020290 <SATAPI::write(unsigned long long, int, void*)>:
c0020290:	b8 03 00 00 00       	mov    eax,0x3
c0020295:	c3                   	ret    

c0020296 <SATAPI::close(int, int, void*)>:
c0020296:	83 ec 0c             	sub    esp,0xc
c0020299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00202a3:	85 c0                	test   eax,eax
c00202a5:	74 0c                	je     c00202b3 <SATAPI::close(int, int, void*)+0x1d>
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00202ac:	50                   	push   eax
c00202ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00202b0:	83 c4 10             	add    esp,0x10
c00202b3:	31 c0                	xor    eax,eax
c00202b5:	83 c4 0c             	add    esp,0xc
c00202b8:	c3                   	ret    
c00202b9:	90                   	nop

c00202ba <SATAPI::SATAPI()>:
c00202ba:	83 ec 0c             	sub    esp,0xc
c00202bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c1:	83 ec 04             	sub    esp,0x4
c00202c4:	68 00 08 00 00       	push   0x800
c00202c9:	68 0c 57 02 c0       	push   0xc002570c
c00202ce:	50                   	push   eax
c00202cf:	e8 02 dd fe ff       	call   c000dfd6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00202d4:	83 c4 10             	add    esp,0x10
c00202d7:	ba 48 58 02 c0       	mov    edx,0xc0025848
c00202dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e0:	89 10                	mov    DWORD PTR [eax],edx
c00202e2:	90                   	nop
c00202e3:	83 c4 0c             	add    esp,0xc
c00202e6:	c3                   	ret    
c00202e7:	90                   	nop

c00202e8 <SATAPI::diskRemoved()>:
c00202e8:	c3                   	ret    
c00202e9:	90                   	nop

c00202ea <SATAPI::diskInserted()>:
c00202ea:	83 ec 18             	sub    esp,0x18
c00202ed:	68 18 57 02 c0       	push   0xc0025718
c00202f2:	e8 2a c4 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00202f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202fb:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020302:	83 c4 1c             	add    esp,0x1c
c0020305:	c3                   	ret    

c0020306 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020306:	55                   	push   ebp
c0020307:	57                   	push   edi
c0020308:	56                   	push   esi
c0020309:	53                   	push   ebx
c002030a:	83 ec 38             	sub    esp,0x38
c002030d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020311:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020315:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020319:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002031d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020321:	68 30 57 02 c0       	push   0xc0025730
c0020326:	e8 f6 c3 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c002032b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020331:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020337:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002033b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020341:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020345:	c1 e0 07             	shl    eax,0x7
c0020348:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c002034c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020350:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002035a:	5a                   	pop    edx
c002035b:	59                   	pop    ecx
c002035c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020360:	8d 58 02             	lea    ebx,[eax+0x2]
c0020363:	c1 e3 07             	shl    ebx,0x7
c0020366:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002036a:	53                   	push   ebx
c002036b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020371:	e8 08 e4 ff ff       	call   c001e77e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020376:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002037a:	83 c4 10             	add    esp,0x10
c002037d:	b8 01 00 00 00       	mov    eax,0x1
c0020382:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020387:	0f 84 ff 01 00 00    	je     c002058c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c002038d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020393:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020395:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002039b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00203a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00203a5:	c1 e1 05             	shl    ecx,0x5
c00203a8:	01 c8                	add    eax,ecx
c00203aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00203ac:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00203b2:	81 c9 25 00 01 00    	or     ecx,0x10025
c00203b8:	89 08                	mov    DWORD PTR [eax],ecx
c00203ba:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00203c0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00203c6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00203cc:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00203cf:	8d 7b 40             	lea    edi,[ebx+0x40]
c00203d2:	50                   	push   eax
c00203d3:	68 90 00 00 00       	push   0x90
c00203d8:	6a 00                	push   0x0
c00203da:	53                   	push   ebx
c00203db:	e8 c8 00 fe ff       	call   c00004a8 <memset>
c00203e0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00203e4:	b9 0c 00 00 00       	mov    ecx,0xc
c00203e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00203eb:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00203f1:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00203f5:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00203fb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00203ff:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020403:	48                   	dec    eax
c0020404:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020409:	89 c1                	mov    ecx,eax
c002040b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020411:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020416:	09 c8                	or     eax,ecx
c0020418:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002041e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020421:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020428:	66 25 00 7f          	and    ax,0x7f00
c002042c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020430:	66 0d 27 80          	or     ax,0x8027
c0020434:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020438:	66 89 03             	mov    WORD PTR [ebx],ax
c002043b:	89 d0                	mov    eax,edx
c002043d:	c1 ea 18             	shr    edx,0x18
c0020440:	c1 e8 10             	shr    eax,0x10
c0020443:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020446:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020449:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002044d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020450:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020454:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020457:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002045b:	83 c4 10             	add    esp,0x10
c002045e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020466:	31 c0                	xor    eax,eax
c0020468:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002046e:	80 e1 88             	and    cl,0x88
c0020471:	74 0a                	je     c002047d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020473:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020478:	74 0a                	je     c0020484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c002047a:	40                   	inc    eax
c002047b:	eb eb                	jmp    c0020468 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c002047d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020482:	75 0a                	jne    c002048e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020484:	83 ec 0c             	sub    esp,0xc
c0020487:	68 4a 57 02 c0       	push   0xc002574a
c002048c:	eb 43                	jmp    c00204d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002048e:	be 01 00 00 00       	mov    esi,0x1
c0020493:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020497:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002049b:	d3 e6                	shl    esi,cl
c002049d:	c1 e7 07             	shl    edi,0x7
c00204a0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00204a6:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c00204ab:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00204af:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00204b5:	85 c6                	test   esi,eax
c00204b7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00204bd:	0f 84 96 00 00 00    	je     c0020559 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c00204c3:	0f ba e0 1e          	bt     eax,0x1e
c00204c7:	73 1a                	jae    c00204e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c00204c9:	83 ec 0c             	sub    esp,0xc
c00204cc:	68 5f 57 02 c0       	push   0xc002575f
c00204d1:	e8 4b c2 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00204d6:	83 c4 10             	add    esp,0x10
c00204d9:	b8 01 00 00 00       	mov    eax,0x1
c00204de:	e9 a9 00 00 00       	jmp    c002058c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c00204e3:	83 fb 0d             	cmp    ebx,0xd
c00204e6:	77 12                	ja     c00204fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c00204e8:	83 ec 0c             	sub    esp,0xc
c00204eb:	68 c8 00 00 00       	push   0xc8
c00204f0:	e8 f3 5e ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c00204f5:	83 c4 10             	add    esp,0x10
c00204f8:	eb 2a                	jmp    c0020524 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00204fa:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020500:	83 f8 0d             	cmp    eax,0xd
c0020503:	77 0a                	ja     c002050f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0020505:	83 ec 0c             	sub    esp,0xc
c0020508:	68 58 02 00 00       	push   0x258
c002050d:	eb 28                	jmp    c0020537 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c002050f:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020515:	83 f8 0d             	cmp    eax,0xd
c0020518:	77 0a                	ja     c0020524 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c002051a:	83 ec 0c             	sub    esp,0xc
c002051d:	68 dc 05 00 00       	push   0x5dc
c0020522:	eb 13                	jmp    c0020537 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020524:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c002052a:	83 f8 0d             	cmp    eax,0xd
c002052d:	77 10                	ja     c002053f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c002052f:	83 ec 0c             	sub    esp,0xc
c0020532:	68 c4 09 00 00       	push   0x9c4
c0020537:	e8 ac 5e ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c002053c:	83 c4 10             	add    esp,0x10
c002053f:	43                   	inc    ebx
c0020540:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020546:	0f 85 63 ff ff ff    	jne    c00204af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c002054c:	83 ec 0c             	sub    esp,0xc
c002054f:	68 72 57 02 c0       	push   0xc0025772
c0020554:	e9 78 ff ff ff       	jmp    c00204d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020559:	0f ba e0 1e          	bt     eax,0x1e
c002055d:	73 0d                	jae    c002056c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c002055f:	83 ec 0c             	sub    esp,0xc
c0020562:	68 86 57 02 c0       	push   0xc0025786
c0020567:	e9 65 ff ff ff       	jmp    c00204d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002056c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020571:	74 17                	je     c002058a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020573:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020578:	74 10                	je     c002058a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c002057a:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020580:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020584:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020588:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002058a:	31 c0                	xor    eax,eax
c002058c:	83 c4 2c             	add    esp,0x2c
c002058f:	5b                   	pop    ebx
c0020590:	5e                   	pop    esi
c0020591:	5f                   	pop    edi
c0020592:	5d                   	pop    ebp
c0020593:	c3                   	ret    

c0020594 <SATAPI::eject()>:
c0020594:	57                   	push   edi
c0020595:	b9 03 00 00 00       	mov    ecx,0x3
c002059a:	83 ec 18             	sub    esp,0x18
c002059d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00205a1:	fc                   	cld    
c00205a2:	31 c0                	xor    eax,eax
c00205a4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00205a6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00205ab:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00205b0:	50                   	push   eax
c00205b1:	6a 00                	push   0x0
c00205b3:	6a 00                	push   0x0
c00205b5:	6a 00                	push   0x0
c00205b7:	6a 00                	push   0x0
c00205b9:	6a 02                	push   0x2
c00205bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00205bf:	50                   	push   eax
c00205c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00205c4:	e8 3d fd ff ff       	call   c0020306 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00205c9:	31 c0                	xor    eax,eax
c00205cb:	83 c4 38             	add    esp,0x38
c00205ce:	5f                   	pop    edi
c00205cf:	c3                   	ret    

c00205d0 <SATAPI::detectMedia()>:
c00205d0:	56                   	push   esi
c00205d1:	53                   	push   ebx
c00205d2:	83 ec 30             	sub    esp,0x30
c00205d5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00205d9:	68 9b 57 02 c0       	push   0xc002579b
c00205de:	e8 3e c1 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00205e3:	83 c4 0c             	add    esp,0xc
c00205e6:	6a 0c                	push   0xc
c00205e8:	6a 00                	push   0x0
c00205ea:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00205ee:	56                   	push   esi
c00205ef:	e8 b4 fe fd ff       	call   c00004a8 <memset>
c00205f4:	83 c4 0c             	add    esp,0xc
c00205f7:	6a 00                	push   0x0
c00205f9:	6a 00                	push   0x0
c00205fb:	6a 00                	push   0x0
c00205fd:	6a 00                	push   0x0
c00205ff:	6a 00                	push   0x0
c0020601:	56                   	push   esi
c0020602:	53                   	push   ebx
c0020603:	e8 fe fc ff ff       	call   c0020306 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020608:	83 c4 20             	add    esp,0x20
c002060b:	48                   	dec    eax
c002060c:	74 34                	je     c0020642 <SATAPI::detectMedia()+0x72>
c002060e:	50                   	push   eax
c002060f:	6a 0c                	push   0xc
c0020611:	6a 00                	push   0x0
c0020613:	56                   	push   esi
c0020614:	e8 8f fe fd ff       	call   c00004a8 <memset>
c0020619:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002061e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020623:	83 c4 0c             	add    esp,0xc
c0020626:	6a 01                	push   0x1
c0020628:	8d 44 24 16          	lea    eax,[esp+0x16]
c002062c:	50                   	push   eax
c002062d:	6a 00                	push   0x0
c002062f:	6a 00                	push   0x0
c0020631:	6a 12                	push   0x12
c0020633:	56                   	push   esi
c0020634:	53                   	push   ebx
c0020635:	e8 cc fc ff ff       	call   c0020306 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002063a:	83 c4 20             	add    esp,0x20
c002063d:	48                   	dec    eax
c002063e:	75 39                	jne    c0020679 <SATAPI::detectMedia()+0xa9>
c0020640:	eb 1e                	jmp    c0020660 <SATAPI::detectMedia()+0x90>
c0020642:	83 ec 0c             	sub    esp,0xc
c0020645:	68 af 57 02 c0       	push   0xc00257af
c002064a:	e8 d2 c0 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c002064f:	83 c4 10             	add    esp,0x10
c0020652:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020659:	74 b3                	je     c002060e <SATAPI::detectMedia()+0x3e>
c002065b:	e9 93 00 00 00       	jmp    c00206f3 <SATAPI::detectMedia()+0x123>
c0020660:	83 ec 0c             	sub    esp,0xc
c0020663:	68 b9 57 02 c0       	push   0xc00257b9
c0020668:	e8 b4 c0 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c002066d:	83 c4 10             	add    esp,0x10
c0020670:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020677:	75 7a                	jne    c00206f3 <SATAPI::detectMedia()+0x123>
c0020679:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c002067d:	83 e0 7f             	and    eax,0x7f
c0020680:	3c 70                	cmp    al,0x70
c0020682:	74 25                	je     c00206a9 <SATAPI::detectMedia()+0xd9>
c0020684:	83 ec 0c             	sub    esp,0xc
c0020687:	68 c3 57 02 c0       	push   0xc00257c3
c002068c:	e8 90 c0 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0020691:	83 c4 10             	add    esp,0x10
c0020694:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002069b:	75 0c                	jne    c00206a9 <SATAPI::detectMedia()+0xd9>
c002069d:	83 ec 0c             	sub    esp,0xc
c00206a0:	53                   	push   ebx
c00206a1:	e8 44 fc ff ff       	call   c00202ea <SATAPI::diskInserted()>
c00206a6:	83 c4 10             	add    esp,0x10
c00206a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00206ad:	83 e0 0f             	and    eax,0xf
c00206b0:	3c 02                	cmp    al,0x2
c00206b2:	75 16                	jne    c00206ca <SATAPI::detectMedia()+0xfa>
c00206b4:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00206b9:	75 38                	jne    c00206f3 <SATAPI::detectMedia()+0x123>
c00206bb:	83 ec 0c             	sub    esp,0xc
c00206be:	68 cc 57 02 c0       	push   0xc00257cc
c00206c3:	e8 59 c0 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00206c8:	eb 26                	jmp    c00206f0 <SATAPI::detectMedia()+0x120>
c00206ca:	84 c0                	test   al,al
c00206cc:	75 25                	jne    c00206f3 <SATAPI::detectMedia()+0x123>
c00206ce:	83 ec 0c             	sub    esp,0xc
c00206d1:	68 d5 57 02 c0       	push   0xc00257d5
c00206d6:	e8 46 c0 fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00206db:	83 c4 10             	add    esp,0x10
c00206de:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00206e5:	75 0c                	jne    c00206f3 <SATAPI::detectMedia()+0x123>
c00206e7:	83 ec 0c             	sub    esp,0xc
c00206ea:	53                   	push   ebx
c00206eb:	e8 fa fb ff ff       	call   c00202ea <SATAPI::diskInserted()>
c00206f0:	83 c4 10             	add    esp,0x10
c00206f3:	83 c4 24             	add    esp,0x24
c00206f6:	5b                   	pop    ebx
c00206f7:	5e                   	pop    esi
c00206f8:	c3                   	ret    
c00206f9:	90                   	nop

c00206fa <SATAPI::open(int, int, void*)>:
c00206fa:	56                   	push   esi
c00206fb:	53                   	push   ebx
c00206fc:	51                   	push   ecx
c00206fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020701:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020705:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002070f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020715:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002071f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020723:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002072d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020733:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002073a:	e8 89 94 fe ff       	call   c0009bc8 <Phys::allocatePage()>
c002073f:	89 c6                	mov    esi,eax
c0020741:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020747:	81 c6 00 10 00 00    	add    esi,0x1000
c002074d:	e8 76 94 fe ff       	call   c0009bc8 <Phys::allocatePage()>
c0020752:	39 c6                	cmp    esi,eax
c0020754:	74 10                	je     c0020766 <SATAPI::open(int, int, void*)+0x6c>
c0020756:	83 ec 0c             	sub    esp,0xc
c0020759:	68 df 57 02 c0       	push   0xc00257df
c002075e:	e8 28 23 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	83 ec 0c             	sub    esp,0xc
c0020769:	6a 02                	push   0x2
c002076b:	e8 55 ac fe ff       	call   c000b3c5 <Virt::allocateKernelVirtualPages(int)>
c0020770:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020776:	6a 03                	push   0x3
c0020778:	50                   	push   eax
c0020779:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002077f:	ff 35 34 65 02 c0    	push   DWORD PTR ds:0xc0026534
c0020785:	e8 a6 b2 fe ff       	call   c000ba30 <VAS::mapPage(unsigned long, unsigned long, int)>
c002078a:	83 c4 14             	add    esp,0x14
c002078d:	68 74 01 00 00       	push   0x174
c0020792:	e8 00 90 fe ff       	call   c0009797 <malloc>
c0020797:	83 c4 0c             	add    esp,0xc
c002079a:	89 c6                	mov    esi,eax
c002079c:	6a 00                	push   0x0
c002079e:	68 ff ff ff 7f       	push   0x7fffffff
c00207a3:	6a 00                	push   0x0
c00207a5:	6a 00                	push   0x0
c00207a7:	53                   	push   ebx
c00207a8:	68 f5 57 02 c0       	push   0xc00257f5
c00207ad:	50                   	push   eax
c00207ae:	e8 a9 e4 fe ff       	call   c000ec5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00207b3:	83 c4 14             	add    esp,0x14
c00207b6:	56                   	push   esi
c00207b7:	e8 56 e5 fe ff       	call   c000ed12 <LogicalDisk::assignDriveLetter()>
c00207bc:	5a                   	pop    edx
c00207bd:	0f be c0             	movsx  eax,al
c00207c0:	59                   	pop    ecx
c00207c1:	50                   	push   eax
c00207c2:	68 8b 54 02 c0       	push   0xc002548b
c00207c7:	e8 55 bf fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c00207cc:	58                   	pop    eax
c00207cd:	5a                   	pop    edx
c00207ce:	56                   	push   esi
c00207cf:	53                   	push   ebx
c00207d0:	e8 c9 d3 fe ff       	call   c000db9e <Device::addChild(Device*)>
c00207d5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00207db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00207de:	e8 5b d8 fe ff       	call   c000e03e <PhysicalDisk::startCache()>
c00207e3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00207ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00207ed:	e8 de fd ff ff       	call   c00205d0 <SATAPI::detectMedia()>
c00207f2:	83 c4 14             	add    esp,0x14
c00207f5:	31 c0                	xor    eax,eax
c00207f7:	5b                   	pop    ebx
c00207f8:	5e                   	pop    esi
c00207f9:	c3                   	ret    

c00207fa <SATAPI::read(unsigned long long, int, void*)>:
c00207fa:	55                   	push   ebp
c00207fb:	57                   	push   edi
c00207fc:	56                   	push   esi
c00207fd:	53                   	push   ebx
c00207fe:	83 ec 48             	sub    esp,0x48
c0020801:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0020805:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0020809:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c002080d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0020811:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020815:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020819:	68 03 58 02 c0       	push   0xc0025803
c002081e:	e8 fe be fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0020823:	83 c4 10             	add    esp,0x10
c0020826:	83 fb 04             	cmp    ebx,0x4
c0020829:	7e 10                	jle    c002083b <SATAPI::read(unsigned long long, int, void*)+0x41>
c002082b:	83 ec 0c             	sub    esp,0xc
c002082e:	68 14 58 02 c0       	push   0xc0025814
c0020833:	e8 53 22 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0020838:	83 c4 10             	add    esp,0x10
c002083b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c002083f:	31 ed                	xor    ebp,ebp
c0020841:	b9 03 00 00 00       	mov    ecx,0x3
c0020846:	fc                   	cld    
c0020847:	89 e8                	mov    eax,ebp
c0020849:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002084b:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0020850:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0020855:	50                   	push   eax
c0020856:	6a 00                	push   0x0
c0020858:	6a 00                	push   0x0
c002085a:	6a 00                	push   0x0
c002085c:	6a 00                	push   0x0
c002085e:	6a 02                	push   0x2
c0020860:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020864:	50                   	push   eax
c0020865:	56                   	push   esi
c0020866:	e8 9b fa ff ff       	call   c0020306 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002086b:	8d 7c 24 44          	lea    edi,[esp+0x44]
c002086f:	89 e8                	mov    eax,ebp
c0020871:	b9 03 00 00 00       	mov    ecx,0x3
c0020876:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020878:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002087c:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0020880:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0020885:	86 e0                	xchg   al,ah
c0020887:	c1 c0 10             	rol    eax,0x10
c002088a:	86 e0                	xchg   al,ah
c002088c:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0020890:	83 c4 1c             	add    esp,0x1c
c0020893:	53                   	push   ebx
c0020894:	c1 e3 0b             	shl    ebx,0xb
c0020897:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002089b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002089f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208a3:	53                   	push   ebx
c00208a4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00208a8:	50                   	push   eax
c00208a9:	56                   	push   esi
c00208aa:	e8 57 fa ff ff       	call   c0020306 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00208af:	83 c4 20             	add    esp,0x20
c00208b2:	85 c0                	test   eax,eax
c00208b4:	74 14                	je     c00208ca <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00208b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208ba:	83 ec 0c             	sub    esp,0xc
c00208bd:	56                   	push   esi
c00208be:	e8 0d fd ff ff       	call   c00205d0 <SATAPI::detectMedia()>
c00208c3:	83 c4 10             	add    esp,0x10
c00208c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208ca:	83 c4 3c             	add    esp,0x3c
c00208cd:	5b                   	pop    ebx
c00208ce:	5e                   	pop    esi
c00208cf:	5f                   	pop    edi
c00208d0:	5d                   	pop    ebp
c00208d1:	c3                   	ret    

c00208d2 <IOAPIC::close(int, int, void*)>:
c00208d2:	b8 00 00 00 00       	mov    eax,0x0
c00208d7:	c3                   	ret    

c00208d8 <apicGetBase()>:
c00208d8:	55                   	push   ebp
c00208d9:	89 e5                	mov    ebp,esp
c00208db:	83 ec 18             	sub    esp,0x18
c00208de:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00208e3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00208e9:	83 e0 08             	and    eax,0x8
c00208ec:	84 c0                	test   al,al
c00208ee:	75 07                	jne    c00208f7 <apicGetBase()+0x1f>
c00208f0:	b8 00 00 00 00       	mov    eax,0x0
c00208f5:	eb 21                	jmp    c0020918 <apicGetBase()+0x40>
c00208f7:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00208fc:	83 ec 08             	sub    esp,0x8
c00208ff:	6a 1b                	push   0x1b
c0020901:	50                   	push   eax
c0020902:	e8 47 84 fe ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c0020907:	83 c4 10             	add    esp,0x10
c002090a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002090d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0020910:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020913:	25 00 f0 ff ff       	and    eax,0xfffff000
c0020918:	c9                   	leave  
c0020919:	c3                   	ret    

c002091a <IOAPIC::IOAPIC()>:
c002091a:	83 ec 0c             	sub    esp,0xc
c002091d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020921:	83 ec 08             	sub    esp,0x8
c0020924:	68 78 58 02 c0       	push   0xc0025878
c0020929:	50                   	push   eax
c002092a:	e8 73 d4 fe ff       	call   c000dda2 <Device::Device(char const*)>
c002092f:	83 c4 10             	add    esp,0x10
c0020932:	ba 9c 58 02 c0       	mov    edx,0xc002589c
c0020937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002093b:	89 10                	mov    DWORD PTR [eax],edx
c002093d:	90                   	nop
c002093e:	83 c4 0c             	add    esp,0xc
c0020941:	c3                   	ret    

c0020942 <apicOpen()>:
c0020942:	55                   	push   ebp
c0020943:	89 e5                	mov    ebp,esp
c0020945:	53                   	push   ebx
c0020946:	83 ec 34             	sub    esp,0x34
c0020949:	a0 c0 a3 02 c0       	mov    al,ds:0xc002a3c0
c002094e:	83 f0 01             	xor    eax,0x1
c0020951:	84 c0                	test   al,al
c0020953:	0f 84 91 00 00 00    	je     c00209ea <apicOpen()+0xa8>
c0020959:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002095d:	a0 20 8d 02 c0       	mov    al,ds:0xc0028d20
c0020962:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c0020965:	73 7c                	jae    c00209e3 <apicOpen()+0xa1>
c0020967:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002096e:	83 ec 0c             	sub    esp,0xc
c0020971:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020974:	e8 1e 8e fe ff       	call   c0009797 <malloc>
c0020979:	83 c4 10             	add    esp,0x10
c002097c:	89 c3                	mov    ebx,eax
c002097e:	83 ec 0c             	sub    esp,0xc
c0020981:	53                   	push   ebx
c0020982:	e8 93 ff ff ff       	call   c002091a <IOAPIC::IOAPIC()>
c0020987:	83 c4 10             	add    esp,0x10
c002098a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002098d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020991:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020994:	89 14 85 a0 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5c60],edx
c002099b:	a1 80 a3 02 c0       	mov    eax,ds:0xc002a380
c00209a0:	40                   	inc    eax
c00209a1:	a3 80 a3 02 c0       	mov    ds:0xc002a380,eax
c00209a6:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00209ab:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00209b1:	83 ec 08             	sub    esp,0x8
c00209b4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00209b7:	50                   	push   eax
c00209b8:	e8 e1 d1 fe ff       	call   c000db9e <Device::addChild(Device*)>
c00209bd:	83 c4 10             	add    esp,0x10
c00209c0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00209c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00209c5:	83 c0 08             	add    eax,0x8
c00209c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00209ca:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00209ce:	6a 00                	push   0x0
c00209d0:	6a 00                	push   0x0
c00209d2:	52                   	push   edx
c00209d3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00209d6:	ff d0                	call   eax
c00209d8:	83 c4 10             	add    esp,0x10
c00209db:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c00209de:	e9 7a ff ff ff       	jmp    c002095d <apicOpen()+0x1b>
c00209e3:	c6 05 c0 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a3c0,0x1
c00209ea:	e8 e9 fe ff ff       	call   c00208d8 <apicGetBase()>
c00209ef:	05 f0 00 00 00       	add    eax,0xf0
c00209f4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00209f7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00209fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00209fc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00209ff:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020a06:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020a0d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020a10:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020a13:	89 10                	mov    DWORD PTR [eax],edx
c0020a15:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020a1c:	a1 70 8c 02 c0       	mov    eax,ds:0xc0028c70
c0020a21:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020a24:	7d 70                	jge    c0020a96 <apicOpen()+0x154>
c0020a26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020a29:	8b 04 85 80 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7380]
c0020a30:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020a33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020a36:	8b 04 85 80 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7380]
c0020a3d:	c1 e8 08             	shr    eax,0x8
c0020a40:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020a44:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020a47:	8b 04 85 80 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7380]
c0020a4e:	c1 e8 18             	shr    eax,0x18
c0020a51:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020a54:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c0020a58:	75 37                	jne    c0020a91 <apicOpen()+0x14f>
c0020a5a:	e8 79 fe ff ff       	call   c00208d8 <apicGetBase()>
c0020a5f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0020a63:	75 07                	jne    c0020a6c <apicOpen()+0x12a>
c0020a65:	ba 60 03 00 00       	mov    edx,0x360
c0020a6a:	eb 05                	jmp    c0020a71 <apicOpen()+0x12f>
c0020a6c:	ba 50 03 00 00       	mov    edx,0x350
c0020a71:	01 d0                	add    eax,edx
c0020a73:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020a76:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a7b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020a7e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020a85:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020a89:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020a8c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020a8f:	89 10                	mov    DWORD PTR [eax],edx
c0020a91:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0020a94:	eb 86                	jmp    c0020a1c <apicOpen()+0xda>
c0020a96:	90                   	nop
c0020a97:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020a9a:	c9                   	leave  
c0020a9b:	c3                   	ret    

c0020a9c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020a9c:	55                   	push   ebp
c0020a9d:	89 e5                	mov    ebp,esp
c0020a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020aa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020aa8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020aab:	72 1d                	jb     c0020aca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ab0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ab9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020abf:	01 d0                	add    eax,edx
c0020ac1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020ac4:	73 04                	jae    c0020aca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020ac6:	b0 01                	mov    al,0x1
c0020ac8:	eb 02                	jmp    c0020acc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020aca:	b0 00                	mov    al,0x0
c0020acc:	5d                   	pop    ebp
c0020acd:	c3                   	ret    

c0020ace <IOAPIC::read(int)>:
c0020ace:	55                   	push   ebp
c0020acf:	89 e5                	mov    ebp,esp
c0020ad1:	83 ec 10             	sub    esp,0x10
c0020ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ad7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020add:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020ae0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020ae3:	0f b6 d0             	movzx  edx,al
c0020ae6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020ae9:	89 10                	mov    DWORD PTR [eax],edx
c0020aeb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020aee:	83 c0 10             	add    eax,0x10
c0020af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0020af3:	c9                   	leave  
c0020af4:	c3                   	ret    
c0020af5:	90                   	nop

c0020af6 <IOAPIC::open(int, int, void*)>:
c0020af6:	55                   	push   ebp
c0020af7:	89 e5                	mov    ebp,esp
c0020af9:	57                   	push   edi
c0020afa:	56                   	push   esi
c0020afb:	53                   	push   ebx
c0020afc:	83 ec 0c             	sub    esp,0xc
c0020aff:	83 ec 0c             	sub    esp,0xc
c0020b02:	68 80 58 02 c0       	push   0xc0025880
c0020b07:	e8 15 bc fe ff       	call   c000c721 <Dbg::kprintf(char const*, ...)>
c0020b0c:	83 c4 10             	add    esp,0x10
c0020b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020b15:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b24:	8b 14 85 60 8d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd72a0]
c0020b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b2e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b37:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b3d:	8b 14 85 e0 8d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7220]
c0020b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b47:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b59:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020b5f:	0f b6 f8             	movzx  edi,al
c0020b62:	89 d0                	mov    eax,edx
c0020b64:	ba 00 00 00 00       	mov    edx,0x0
c0020b69:	89 c1                	mov    ecx,eax
c0020b6b:	80 e5 ff             	and    ch,0xff
c0020b6e:	89 cb                	mov    ebx,ecx
c0020b70:	0f b6 f2             	movzx  esi,dl
c0020b73:	89 d8                	mov    eax,ebx
c0020b75:	89 f2                	mov    edx,esi
c0020b77:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020b7a:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020b7d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020b81:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020b85:	83 e0 00             	and    eax,0x0
c0020b88:	09 d0                	or     eax,edx
c0020b8a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b91:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020b97:	8d 50 01             	lea    edx,[eax+0x1]
c0020b9a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020b9d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020ba3:	0f b6 d0             	movzx  edx,al
c0020ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ba9:	83 c2 08             	add    edx,0x8
c0020bac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020bb0:	0f b6 c9             	movzx  ecx,cl
c0020bb3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020bb9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020bbd:	83 ec 08             	sub    esp,0x8
c0020bc0:	6a 01                	push   0x1
c0020bc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020bc5:	e8 04 ff ff ff       	call   c0020ace <IOAPIC::read(int)>
c0020bca:	83 c4 10             	add    esp,0x10
c0020bcd:	c1 f8 10             	sar    eax,0x10
c0020bd0:	0f b6 c0             	movzx  eax,al
c0020bd3:	8d 50 01             	lea    edx,[eax+0x1]
c0020bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020bd9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020bdf:	b8 00 00 00 00       	mov    eax,0x0
c0020be4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020be7:	5b                   	pop    ebx
c0020be8:	5e                   	pop    esi
c0020be9:	5f                   	pop    edi
c0020bea:	5d                   	pop    ebp
c0020beb:	c3                   	ret    

c0020bec <IOAPIC::write(int, int)>:
c0020bec:	55                   	push   ebp
c0020bed:	89 e5                	mov    ebp,esp
c0020bef:	83 ec 10             	sub    esp,0x10
c0020bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020bf5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020bfb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020bfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020c01:	0f b6 d0             	movzx  edx,al
c0020c04:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020c07:	89 10                	mov    DWORD PTR [eax],edx
c0020c09:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020c0c:	8d 50 10             	lea    edx,[eax+0x10]
c0020c0f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020c12:	89 02                	mov    DWORD PTR [edx],eax
c0020c14:	90                   	nop
c0020c15:	c9                   	leave  
c0020c16:	c3                   	ret    
c0020c17:	90                   	nop

c0020c18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020c18:	55                   	push   ebp
c0020c19:	89 e5                	mov    ebp,esp
c0020c1b:	53                   	push   ebx
c0020c1c:	83 ec 2c             	sub    esp,0x2c
c0020c1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020c22:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020c25:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020c28:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020c2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020c2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020c31:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020c34:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020c37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020c3a:	88 d8                	mov    al,bl
c0020c3c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020c3f:	88 c8                	mov    al,cl
c0020c41:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020c44:	88 d0                	mov    al,dl
c0020c46:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020c49:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020c4d:	83 c0 08             	add    eax,0x8
c0020c50:	01 c0                	add    eax,eax
c0020c52:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020c55:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020c59:	83 c0 08             	add    eax,0x8
c0020c5c:	01 c0                	add    eax,eax
c0020c5e:	40                   	inc    eax
c0020c5f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020c62:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020c65:	50                   	push   eax
c0020c66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020c69:	e8 60 fe ff ff       	call   c0020ace <IOAPIC::read(int)>
c0020c6e:	83 c4 08             	add    esp,0x8
c0020c71:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020c74:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020c7b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020c7e:	c1 e0 18             	shl    eax,0x18
c0020c81:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020c84:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020c87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020c8a:	52                   	push   edx
c0020c8b:	50                   	push   eax
c0020c8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020c8f:	e8 58 ff ff ff       	call   c0020bec <IOAPIC::write(int, int)>
c0020c94:	83 c4 0c             	add    esp,0xc
c0020c97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c9a:	50                   	push   eax
c0020c9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020c9e:	e8 2b fe ff ff       	call   c0020ace <IOAPIC::read(int)>
c0020ca3:	83 c4 08             	add    esp,0x8
c0020ca6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020ca9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020cb0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020cb7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020cbe:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020cc2:	74 09                	je     c0020ccd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0020cc4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020ccb:	eb 07                	jmp    c0020cd4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020ccd:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020cd4:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0020cd8:	74 09                	je     c0020ce3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020cda:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020ce1:	eb 07                	jmp    c0020cea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020ce3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020cea:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020cf1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020cf5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020cf8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020cfb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020cfe:	52                   	push   edx
c0020cff:	50                   	push   eax
c0020d00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020d03:	e8 e4 fe ff ff       	call   c0020bec <IOAPIC::write(int, int)>
c0020d08:	83 c4 0c             	add    esp,0xc
c0020d0b:	90                   	nop
c0020d0c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020d0f:	c9                   	leave  
c0020d10:	c3                   	ret    
c0020d11:	66 90                	xchg   ax,ax
c0020d13:	90                   	nop

c0020d14 <APICTimer::close(int, int, void*)>:
c0020d14:	b8 00 00 00 00       	mov    eax,0x0
c0020d19:	c3                   	ret    
c0020d1a:	66 90                	xchg   ax,ax

c0020d1c <apicTimerHandler(regs*, void*)>:
c0020d1c:	83 ec 0c             	sub    esp,0xc
c0020d1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d23:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020d25:	b8 10 27 00 00       	mov    eax,0x2710
c0020d2a:	ba 00 00 00 00       	mov    edx,0x0
c0020d2f:	f7 f1                	div    ecx
c0020d31:	83 ec 0c             	sub    esp,0xc
c0020d34:	50                   	push   eax
c0020d35:	e8 7e e7 fe ff       	call   c000f4b8 <timerHandler(unsigned int)>
c0020d3a:	83 c4 10             	add    esp,0x10
c0020d3d:	90                   	nop
c0020d3e:	83 c4 0c             	add    esp,0xc
c0020d41:	c3                   	ret    
c0020d42:	66 90                	xchg   ax,ax

c0020d44 <APICTimer::open(int, int, void*)>:
c0020d44:	83 ec 0c             	sub    esp,0xc
c0020d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d4d:	83 c0 24             	add    eax,0x24
c0020d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d52:	83 ec 08             	sub    esp,0x8
c0020d55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d5d:	ff d0                	call   eax
c0020d5f:	83 c4 10             	add    esp,0x10
c0020d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020d6a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020d78:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020d7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020d82:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020d88:	83 ec 0c             	sub    esp,0xc
c0020d8b:	51                   	push   ecx
c0020d8c:	6a 01                	push   0x1
c0020d8e:	68 1c 0d 02 c0       	push   0xc0020d1c
c0020d93:	52                   	push   edx
c0020d94:	50                   	push   eax
c0020d95:	e8 b0 cd fe ff       	call   c000db4a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d9a:	83 c4 20             	add    esp,0x20
c0020d9d:	89 c2                	mov    edx,eax
c0020d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020da3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020da9:	b8 00 00 00 00       	mov    eax,0x0
c0020dae:	83 c4 0c             	add    esp,0xc
c0020db1:	c3                   	ret    
c0020db2:	66 90                	xchg   ax,ax

c0020db4 <APICTimer::write(int)>:
c0020db4:	83 ec 0c             	sub    esp,0xc
c0020db7:	83 ec 0c             	sub    esp,0xc
c0020dba:	68 c0 58 02 c0       	push   0xc00258c0
c0020dbf:	e8 c7 1c ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0020dc4:	83 c4 10             	add    esp,0x10
c0020dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020dcf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020dd5:	90                   	nop
c0020dd6:	83 c4 0c             	add    esp,0xc
c0020dd9:	c3                   	ret    
c0020dda:	66 90                	xchg   ax,ax

c0020ddc <APICTimer::APICTimer()>:
c0020ddc:	83 ec 0c             	sub    esp,0xc
c0020ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020de3:	83 ec 08             	sub    esp,0x8
c0020de6:	68 d0 58 02 c0       	push   0xc00258d0
c0020deb:	50                   	push   eax
c0020dec:	e8 fb e5 fe ff       	call   c000f3ec <Timer::Timer(char const*)>
c0020df1:	83 c4 10             	add    esp,0x10
c0020df4:	ba e4 58 02 c0       	mov    edx,0xc00258e4
c0020df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dfd:	89 10                	mov    DWORD PTR [eax],edx
c0020dff:	90                   	nop
c0020e00:	83 c4 0c             	add    esp,0xc
c0020e03:	c3                   	ret    

c0020e04 <PIT::write(int)>:
c0020e04:	83 ec 10             	sub    esp,0x10
c0020e07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020e0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020e15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e19:	a3 c4 a3 02 c0       	mov    ds:0xc002a3c4,eax
c0020e1e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020e23:	99                   	cdq    
c0020e24:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020e28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e2c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020e33:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020e38:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020e3c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020e41:	ee                   	out    dx,al
c0020e42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e46:	0f b6 c0             	movzx  eax,al
c0020e49:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020e50:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020e54:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020e58:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020e5d:	ee                   	out    dx,al
c0020e5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e62:	c1 f8 08             	sar    eax,0x8
c0020e65:	0f b6 c0             	movzx  eax,al
c0020e68:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020e6f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020e73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020e7c:	ee                   	out    dx,al
c0020e7d:	90                   	nop
c0020e7e:	83 c4 10             	add    esp,0x10
c0020e81:	c3                   	ret    
c0020e82:	66 90                	xchg   ax,ax

c0020e84 <pitHandler(regs*, void*)>:
c0020e84:	83 ec 0c             	sub    esp,0xc
c0020e87:	8b 0d c4 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a3c4
c0020e8d:	b8 10 27 00 00       	mov    eax,0x2710
c0020e92:	99                   	cdq    
c0020e93:	f7 f9                	idiv   ecx
c0020e95:	83 ec 0c             	sub    esp,0xc
c0020e98:	50                   	push   eax
c0020e99:	e8 1a e6 fe ff       	call   c000f4b8 <timerHandler(unsigned int)>
c0020e9e:	83 c4 10             	add    esp,0x10
c0020ea1:	90                   	nop
c0020ea2:	83 c4 0c             	add    esp,0xc
c0020ea5:	c3                   	ret    
c0020ea6:	66 90                	xchg   ax,ax

c0020ea8 <PIT::open(int, int, void*)>:
c0020ea8:	83 ec 0c             	sub    esp,0xc
c0020eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0020eb1:	83 c0 24             	add    eax,0x24
c0020eb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0020eb6:	83 ec 08             	sub    esp,0x8
c0020eb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ebd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ec1:	ff d0                	call   eax
c0020ec3:	83 c4 10             	add    esp,0x10
c0020ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eca:	83 ec 0c             	sub    esp,0xc
c0020ecd:	6a 00                	push   0x0
c0020ecf:	6a 01                	push   0x1
c0020ed1:	68 84 0e 02 c0       	push   0xc0020e84
c0020ed6:	6a 00                	push   0x0
c0020ed8:	50                   	push   eax
c0020ed9:	e8 6c cc fe ff       	call   c000db4a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020ede:	83 c4 20             	add    esp,0x20
c0020ee1:	89 c2                	mov    edx,eax
c0020ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ee7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020eed:	b8 00 00 00 00       	mov    eax,0x0
c0020ef2:	83 c4 0c             	add    esp,0xc
c0020ef5:	c3                   	ret    
c0020ef6:	66 90                	xchg   ax,ax

c0020ef8 <PIT::close(int, int, void*)>:
c0020ef8:	83 ec 0c             	sub    esp,0xc
c0020efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eff:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f0d:	6a 01                	push   0x1
c0020f0f:	68 84 0e 02 c0       	push   0xc0020e84
c0020f14:	6a 00                	push   0x0
c0020f16:	50                   	push   eax
c0020f17:	e8 64 cc fe ff       	call   c000db80 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020f1c:	83 c4 10             	add    esp,0x10
c0020f1f:	b8 00 00 00 00       	mov    eax,0x0
c0020f24:	83 c4 0c             	add    esp,0xc
c0020f27:	c3                   	ret    

c0020f28 <PIT::PIT()>:
c0020f28:	83 ec 0c             	sub    esp,0xc
c0020f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f2f:	83 ec 08             	sub    esp,0x8
c0020f32:	68 0c 59 02 c0       	push   0xc002590c
c0020f37:	50                   	push   eax
c0020f38:	e8 af e4 fe ff       	call   c000f3ec <Timer::Timer(char const*)>
c0020f3d:	83 c4 10             	add    esp,0x10
c0020f40:	ba 34 59 02 c0       	mov    edx,0xc0025934
c0020f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f49:	89 10                	mov    DWORD PTR [eax],edx
c0020f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020f55:	0f b6 d0             	movzx  edx,al
c0020f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f5c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020f6d:	0f b6 d0             	movzx  edx,al
c0020f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f74:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020f83:	8d 50 01             	lea    edx,[eax+0x1]
c0020f86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020f8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020f90:	0f b6 d0             	movzx  edx,al
c0020f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020f9b:	83 e1 3f             	and    ecx,0x3f
c0020f9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020fa2:	90                   	nop
c0020fa3:	83 c4 0c             	add    esp,0xc
c0020fa6:	c3                   	ret    
c0020fa7:	66 90                	xchg   ax,ax
c0020fa9:	66 90                	xchg   ax,ax
c0020fab:	66 90                	xchg   ax,ax
c0020fad:	66 90                	xchg   ax,ax
c0020faf:	90                   	nop

c0020fb0 <avxDetect>:
c0020fb0:	b8 01 00 00 00       	mov    eax,0x1
c0020fb5:	0f a2                	cpuid  
c0020fb7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0020fbd:	74 15                	je     c0020fd4 <avxDetect.noAVX>
c0020fbf:	b8 01 00 00 00       	mov    eax,0x1
c0020fc4:	0f a2                	cpuid  
c0020fc6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0020fcc:	74 06                	je     c0020fd4 <avxDetect.noAVX>
c0020fce:	b8 01 00 00 00       	mov    eax,0x1
c0020fd3:	c3                   	ret    

c0020fd4 <avxDetect.noAVX>:
c0020fd4:	b8 00 00 00 00       	mov    eax,0x0
c0020fd9:	c3                   	ret    

c0020fda <avxSave>:
c0020fda:	53                   	push   ebx
c0020fdb:	52                   	push   edx
c0020fdc:	31 c0                	xor    eax,eax
c0020fde:	48                   	dec    eax
c0020fdf:	89 c2                	mov    edx,eax
c0020fe1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020fe5:	0f ae 23             	xsave  [ebx]
c0020fe8:	5a                   	pop    edx
c0020fe9:	5b                   	pop    ebx
c0020fea:	c3                   	ret    

c0020feb <avxLoad>:
c0020feb:	53                   	push   ebx
c0020fec:	52                   	push   edx
c0020fed:	31 c0                	xor    eax,eax
c0020fef:	48                   	dec    eax
c0020ff0:	89 c2                	mov    edx,eax
c0020ff2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020ff6:	0f ae 2b             	xrstor [ebx]
c0020ff9:	5a                   	pop    edx
c0020ffa:	5b                   	pop    ebx
c0020ffb:	c3                   	ret    

c0020ffc <avxInit>:
c0020ffc:	e8 57 02 00 00       	call   c0021258 <sseInit>
c0021001:	50                   	push   eax
c0021002:	51                   	push   ecx
c0021003:	0f 20 e0             	mov    eax,cr4
c0021006:	0d 00 00 04 00       	or     eax,0x40000
c002100b:	0f 22 e0             	mov    cr4,eax
c002100e:	31 c9                	xor    ecx,ecx
c0021010:	0f 01 d0             	xgetbv 
c0021013:	0d 07 00 00 00       	or     eax,0x7
c0021018:	0f 01 d1             	xsetbv 
c002101b:	59                   	pop    ecx
c002101c:	58                   	pop    eax
c002101d:	c3                   	ret    

c002101e <avxClose>:
c002101e:	c3                   	ret    

c002101f <wouldSheSayYes>:
c002101f:	c3                   	ret    
c0021020:	49                   	dec    ecx
c0021021:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0021025:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0021029:	75 20                	jne    c002104b <isr0+0xb>
c002102b:	4e                   	dec    esi
c002102c:	79 61                	jns    c002108f <isr7+0x3>
c002102e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0021033:	66 90                	xchg   ax,ax
c0021035:	66 90                	xchg   ax,ax
c0021037:	66 90                	xchg   ax,ax
c0021039:	66 90                	xchg   ax,ax
c002103b:	66 90                	xchg   ax,ax
c002103d:	66 90                	xchg   ax,ax
c002103f:	90                   	nop

c0021040 <isr0>:
c0021040:	fa                   	cli    
c0021041:	68 00 00 00 00       	push   0x0
c0021046:	68 00 00 00 00       	push   0x0
c002104b:	e9 44 01 00 00       	jmp    c0021194 <int_common_stub>

c0021050 <isr1>:
c0021050:	fa                   	cli    
c0021051:	6a 00                	push   0x0
c0021053:	6a 01                	push   0x1
c0021055:	e9 3a 01 00 00       	jmp    c0021194 <int_common_stub>

c002105a <isr2>:
c002105a:	fa                   	cli    
c002105b:	6a 00                	push   0x0
c002105d:	6a 02                	push   0x2
c002105f:	e9 30 01 00 00       	jmp    c0021194 <int_common_stub>

c0021064 <isr3>:
c0021064:	fa                   	cli    
c0021065:	6a 00                	push   0x0
c0021067:	6a 03                	push   0x3
c0021069:	e9 26 01 00 00       	jmp    c0021194 <int_common_stub>

c002106e <isr4>:
c002106e:	fa                   	cli    
c002106f:	6a 00                	push   0x0
c0021071:	6a 04                	push   0x4
c0021073:	e9 1c 01 00 00       	jmp    c0021194 <int_common_stub>

c0021078 <isr5>:
c0021078:	fa                   	cli    
c0021079:	6a 00                	push   0x0
c002107b:	6a 05                	push   0x5
c002107d:	e9 12 01 00 00       	jmp    c0021194 <int_common_stub>

c0021082 <isr6>:
c0021082:	fa                   	cli    
c0021083:	6a 00                	push   0x0
c0021085:	6a 06                	push   0x6
c0021087:	e9 08 01 00 00       	jmp    c0021194 <int_common_stub>

c002108c <isr7>:
c002108c:	fa                   	cli    
c002108d:	6a 00                	push   0x0
c002108f:	6a 07                	push   0x7
c0021091:	e9 fe 00 00 00       	jmp    c0021194 <int_common_stub>

c0021096 <isr8>:
c0021096:	fa                   	cli    
c0021097:	6a 08                	push   0x8
c0021099:	e9 f6 00 00 00       	jmp    c0021194 <int_common_stub>

c002109e <isr9>:
c002109e:	fa                   	cli    
c002109f:	6a 00                	push   0x0
c00210a1:	6a 09                	push   0x9
c00210a3:	e9 ec 00 00 00       	jmp    c0021194 <int_common_stub>

c00210a8 <isr10>:
c00210a8:	fa                   	cli    
c00210a9:	6a 0a                	push   0xa
c00210ab:	e9 e4 00 00 00       	jmp    c0021194 <int_common_stub>

c00210b0 <isr11>:
c00210b0:	fa                   	cli    
c00210b1:	6a 0b                	push   0xb
c00210b3:	e9 dc 00 00 00       	jmp    c0021194 <int_common_stub>

c00210b8 <isr12>:
c00210b8:	fa                   	cli    
c00210b9:	6a 0c                	push   0xc
c00210bb:	e9 d4 00 00 00       	jmp    c0021194 <int_common_stub>

c00210c0 <isr13>:
c00210c0:	fa                   	cli    
c00210c1:	6a 0d                	push   0xd
c00210c3:	e9 cc 00 00 00       	jmp    c0021194 <int_common_stub>

c00210c8 <isr14>:
c00210c8:	fa                   	cli    
c00210c9:	6a 0e                	push   0xe
c00210cb:	e9 c4 00 00 00       	jmp    c0021194 <int_common_stub>

c00210d0 <isr15>:
c00210d0:	fa                   	cli    
c00210d1:	6a 00                	push   0x0
c00210d3:	6a 0f                	push   0xf
c00210d5:	e9 ba 00 00 00       	jmp    c0021194 <int_common_stub>

c00210da <isr16>:
c00210da:	fa                   	cli    
c00210db:	6a 00                	push   0x0
c00210dd:	6a 10                	push   0x10
c00210df:	e9 b0 00 00 00       	jmp    c0021194 <int_common_stub>

c00210e4 <isr17>:
c00210e4:	fa                   	cli    
c00210e5:	6a 00                	push   0x0
c00210e7:	6a 11                	push   0x11
c00210e9:	e9 a6 00 00 00       	jmp    c0021194 <int_common_stub>

c00210ee <isr18>:
c00210ee:	fa                   	cli    
c00210ef:	6a 00                	push   0x0
c00210f1:	6a 12                	push   0x12
c00210f3:	e9 9c 00 00 00       	jmp    c0021194 <int_common_stub>

c00210f8 <irq3>:
c00210f8:	fa                   	cli    
c00210f9:	6a 00                	push   0x0
c00210fb:	6a 23                	push   0x23
c00210fd:	e9 92 00 00 00       	jmp    c0021194 <int_common_stub>

c0021102 <irq4>:
c0021102:	fa                   	cli    
c0021103:	6a 00                	push   0x0
c0021105:	6a 24                	push   0x24
c0021107:	e9 88 00 00 00       	jmp    c0021194 <int_common_stub>

c002110c <irq5>:
c002110c:	fa                   	cli    
c002110d:	6a 00                	push   0x0
c002110f:	6a 25                	push   0x25
c0021111:	e9 7e 00 00 00       	jmp    c0021194 <int_common_stub>

c0021116 <irq6>:
c0021116:	fa                   	cli    
c0021117:	6a 00                	push   0x0
c0021119:	6a 26                	push   0x26
c002111b:	e9 74 00 00 00       	jmp    c0021194 <int_common_stub>

c0021120 <irq7>:
c0021120:	fa                   	cli    
c0021121:	6a 00                	push   0x0
c0021123:	6a 27                	push   0x27
c0021125:	e9 6a 00 00 00       	jmp    c0021194 <int_common_stub>

c002112a <irq8>:
c002112a:	fa                   	cli    
c002112b:	6a 00                	push   0x0
c002112d:	6a 28                	push   0x28
c002112f:	e9 60 00 00 00       	jmp    c0021194 <int_common_stub>

c0021134 <irq9>:
c0021134:	fa                   	cli    
c0021135:	6a 00                	push   0x0
c0021137:	6a 29                	push   0x29
c0021139:	e9 56 00 00 00       	jmp    c0021194 <int_common_stub>

c002113e <irq10>:
c002113e:	fa                   	cli    
c002113f:	6a 00                	push   0x0
c0021141:	6a 2a                	push   0x2a
c0021143:	e9 4c 00 00 00       	jmp    c0021194 <int_common_stub>

c0021148 <irq11>:
c0021148:	fa                   	cli    
c0021149:	6a 00                	push   0x0
c002114b:	6a 2b                	push   0x2b
c002114d:	e9 42 00 00 00       	jmp    c0021194 <int_common_stub>

c0021152 <irq12>:
c0021152:	fa                   	cli    
c0021153:	6a 00                	push   0x0
c0021155:	6a 2c                	push   0x2c
c0021157:	e9 38 00 00 00       	jmp    c0021194 <int_common_stub>

c002115c <irq13>:
c002115c:	fa                   	cli    
c002115d:	6a 00                	push   0x0
c002115f:	6a 2d                	push   0x2d
c0021161:	e9 2e 00 00 00       	jmp    c0021194 <int_common_stub>

c0021166 <irq14>:
c0021166:	fa                   	cli    
c0021167:	6a 00                	push   0x0
c0021169:	6a 2e                	push   0x2e
c002116b:	e9 24 00 00 00       	jmp    c0021194 <int_common_stub>

c0021170 <irq15>:
c0021170:	fa                   	cli    
c0021171:	6a 00                	push   0x0
c0021173:	6a 2f                	push   0x2f
c0021175:	e9 1a 00 00 00       	jmp    c0021194 <int_common_stub>

c002117a <irq1>:
c002117a:	fa                   	cli    
c002117b:	6a 00                	push   0x0
c002117d:	6a 21                	push   0x21
c002117f:	eb 13                	jmp    c0021194 <int_common_stub>

c0021181 <irq2>:
c0021181:	fa                   	cli    
c0021182:	6a 00                	push   0x0
c0021184:	6a 22                	push   0x22
c0021186:	eb 0c                	jmp    c0021194 <int_common_stub>

c0021188 <isr96>:
c0021188:	6a 00                	push   0x0
c002118a:	6a 60                	push   0x60
c002118c:	fb                   	sti    
c002118d:	eb 05                	jmp    c0021194 <int_common_stub>

c002118f <irq0>:
c002118f:	fa                   	cli    
c0021190:	6a 00                	push   0x0
c0021192:	6a 20                	push   0x20

c0021194 <int_common_stub>:
c0021194:	60                   	pusha  
c0021195:	1e                   	push   ds
c0021196:	06                   	push   es
c0021197:	0f a0                	push   fs
c0021199:	0f a8                	push   gs
c002119b:	66 b8 10 00          	mov    ax,0x10
c002119f:	66 8e d8             	mov    ds,ax
c00211a2:	66 8e c0             	mov    es,ax
c00211a5:	66 8e e0             	mov    fs,ax
c00211a8:	66 8e e8             	mov    gs,ax
c00211ab:	54                   	push   esp
c00211ac:	fc                   	cld    
c00211ad:	e8 02 cf fe ff       	call   c000e0b4 <int_handler>
c00211b2:	81 c4 04 00 00 00    	add    esp,0x4
c00211b8:	0f a9                	pop    gs
c00211ba:	0f a1                	pop    fs
c00211bc:	07                   	pop    es
c00211bd:	1f                   	pop    ds
c00211be:	61                   	popa   
c00211bf:	81 c4 08 00 00 00    	add    esp,0x8
c00211c5:	cf                   	iret   

c00211c6 <irq16>:
c00211c6:	fa                   	cli    
c00211c7:	6a 00                	push   0x0
c00211c9:	6a 30                	push   0x30
c00211cb:	e9 c4 ff ff ff       	jmp    c0021194 <int_common_stub>

c00211d0 <irq17>:
c00211d0:	fa                   	cli    
c00211d1:	6a 00                	push   0x0
c00211d3:	6a 31                	push   0x31
c00211d5:	e9 ba ff ff ff       	jmp    c0021194 <int_common_stub>

c00211da <irq18>:
c00211da:	fa                   	cli    
c00211db:	6a 00                	push   0x0
c00211dd:	6a 32                	push   0x32
c00211df:	e9 b0 ff ff ff       	jmp    c0021194 <int_common_stub>

c00211e4 <irq19>:
c00211e4:	fa                   	cli    
c00211e5:	6a 00                	push   0x0
c00211e7:	6a 33                	push   0x33
c00211e9:	e9 a6 ff ff ff       	jmp    c0021194 <int_common_stub>

c00211ee <irq20>:
c00211ee:	fa                   	cli    
c00211ef:	6a 00                	push   0x0
c00211f1:	6a 34                	push   0x34
c00211f3:	e9 9c ff ff ff       	jmp    c0021194 <int_common_stub>

c00211f8 <irq21>:
c00211f8:	fa                   	cli    
c00211f9:	6a 00                	push   0x0
c00211fb:	6a 35                	push   0x35
c00211fd:	e9 92 ff ff ff       	jmp    c0021194 <int_common_stub>

c0021202 <irq22>:
c0021202:	fa                   	cli    
c0021203:	6a 00                	push   0x0
c0021205:	6a 36                	push   0x36
c0021207:	e9 88 ff ff ff       	jmp    c0021194 <int_common_stub>

c002120c <irq23>:
c002120c:	fa                   	cli    
c002120d:	6a 00                	push   0x0
c002120f:	6a 37                	push   0x37
c0021211:	e9 7e ff ff ff       	jmp    c0021194 <int_common_stub>
c0021216:	66 90                	xchg   ax,ax
c0021218:	66 90                	xchg   ax,ax
c002121a:	66 90                	xchg   ax,ax
c002121c:	66 90                	xchg   ax,ax
c002121e:	66 90                	xchg   ax,ax

c0021220 <i386GetRDRAND>:
c0021220:	b9 64 00 00 00       	mov    ecx,0x64

c0021225 <retry>:
c0021225:	0f c7 f0             	rdrand eax
c0021228:	72 05                	jb     c002122f <retry.done>
c002122a:	e2 f9                	loop   c0021225 <retry>

c002122c <retry.fail>:
c002122c:	31 c0                	xor    eax,eax
c002122e:	c3                   	ret    

c002122f <retry.done>:
c002122f:	c3                   	ret    

c0021230 <absolutelyNoChanceInHell>:
c0021230:	b8 01 00 00 00       	mov    eax,0x1
c0021235:	0f a2                	cpuid  
c0021237:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002123d:	74 06                	je     c0021245 <sseDetect.noSSE>
c002123f:	b8 01 00 00 00       	mov    eax,0x1
c0021244:	c3                   	ret    

c0021245 <sseDetect.noSSE>:
c0021245:	31 c0                	xor    eax,eax
c0021247:	c3                   	ret    

c0021248 <sseSave>:
c0021248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002124c:	0f ae 00             	fxsave [eax]
c002124f:	c3                   	ret    

c0021250 <sseLoad>:
c0021250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021254:	0f ae 08             	fxrstor [eax]
c0021257:	c3                   	ret    

c0021258 <sseInit>:
c0021258:	e8 42 00 00 00       	call   c002129f <x87Init>
c002125d:	0f 20 e0             	mov    eax,cr4
c0021260:	66 0d 00 06          	or     ax,0x600
c0021264:	0f 22 e0             	mov    cr4,eax
c0021267:	c3                   	ret    

c0021268 <sseClose>:
c0021268:	c3                   	ret    
c0021269:	66 90                	xchg   ax,ax
c002126b:	66 90                	xchg   ax,ax
c002126d:	66 90                	xchg   ax,ax
c002126f:	90                   	nop

c0021270 <value_37F>:
c0021270:	7f 03                	jg     c0021275 <value_37A+0x1>

c0021272 <value_37E>:
c0021272:	7e 03                	jle    c0021277 <x87Detect+0x1>

c0021274 <value_37A>:
c0021274:	7a 03                	jp     c0021279 <x87Detect+0x3>

c0021276 <x87Detect>:
c0021276:	b8 01 00 00 00       	mov    eax,0x1
c002127b:	0f a2                	cpuid  
c002127d:	f7 c2 01 00 00 00    	test   edx,0x1
c0021283:	74 06                	je     c002128b <x87Detect.nox87>
c0021285:	b8 01 00 00 00       	mov    eax,0x1
c002128a:	c3                   	ret    

c002128b <x87Detect.nox87>:
c002128b:	b8 00 00 00 00       	mov    eax,0x0
c0021290:	c3                   	ret    

c0021291 <x87Save>:
c0021291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021295:	dd 30                	fnsave [eax]
c0021297:	c3                   	ret    

c0021298 <x87Load>:
c0021298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002129c:	dd 20                	frstor [eax]
c002129e:	c3                   	ret    

c002129f <x87Init>:
c002129f:	0f 20 c0             	mov    eax,cr0
c00212a2:	66 25 fb ff          	and    ax,0xfffb
c00212a6:	66 0d 22 00          	or     ax,0x22
c00212aa:	0f 22 c0             	mov    cr0,eax
c00212ad:	db e3                	fninit 
c00212af:	0f 06                	clts   
c00212b1:	d9 2d 74 12 02 c0    	fldcw  WORD PTR ds:0xc0021274
c00212b7:	c3                   	ret    

c00212b8 <x87Close>:
c00212b8:	c3                   	ret    
c00212b9:	66 90                	xchg   ax,ax
c00212bb:	90                   	nop

c00212bc <__do_global_ctors_aux>:
c00212bc:	a1 80 22 02 c0       	mov    eax,ds:0xc0022280
c00212c1:	83 f8 ff             	cmp    eax,0xffffffff
c00212c4:	74 1a                	je     c00212e0 <__do_global_ctors_aux+0x24>
c00212c6:	55                   	push   ebp
c00212c7:	89 e5                	mov    ebp,esp
c00212c9:	53                   	push   ebx
c00212ca:	52                   	push   edx
c00212cb:	bb 80 22 02 c0       	mov    ebx,0xc0022280
c00212d0:	ff d0                	call   eax
c00212d2:	83 eb 04             	sub    ebx,0x4
c00212d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00212d7:	83 f8 ff             	cmp    eax,0xffffffff
c00212da:	75 f4                	jne    c00212d0 <__do_global_ctors_aux+0x14>
c00212dc:	58                   	pop    eax
c00212dd:	5b                   	pop    ebx
c00212de:	5d                   	pop    ebp
c00212df:	c3                   	ret    
c00212e0:	c3                   	ret    
c00212e1:	66 90                	xchg   ax,ax
c00212e3:	90                   	nop

c00212e4 <__divdi3>:
c00212e4:	55                   	push   ebp
c00212e5:	57                   	push   edi
c00212e6:	56                   	push   esi
c00212e7:	53                   	push   ebx
c00212e8:	83 ec 1c             	sub    esp,0x1c
c00212eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00212ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00212f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00212f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00212fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00212fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021302:	85 db                	test   ebx,ebx
c0021304:	0f 88 8e 00 00 00    	js     c0021398 <__divdi3+0xb4>
c002130a:	89 dd                	mov    ebp,ebx
c002130c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021314:	89 d3                	mov    ebx,edx
c0021316:	85 d2                	test   edx,edx
c0021318:	79 0d                	jns    c0021327 <__divdi3+0x43>
c002131a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002131e:	f7 d8                	neg    eax
c0021320:	83 d2 00             	adc    edx,0x0
c0021323:	f7 da                	neg    edx
c0021325:	89 d3                	mov    ebx,edx
c0021327:	89 c7                	mov    edi,eax
c0021329:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002132c:	85 db                	test   ebx,ebx
c002132e:	75 48                	jne    c0021378 <__divdi3+0x94>
c0021330:	39 ef                	cmp    edi,ebp
c0021332:	76 24                	jbe    c0021358 <__divdi3+0x74>
c0021334:	89 ea                	mov    edx,ebp
c0021336:	f7 f7                	div    edi
c0021338:	89 c1                	mov    ecx,eax
c002133a:	31 f6                	xor    esi,esi
c002133c:	89 c8                	mov    eax,ecx
c002133e:	89 f2                	mov    edx,esi
c0021340:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021344:	85 c9                	test   ecx,ecx
c0021346:	74 07                	je     c002134f <__divdi3+0x6b>
c0021348:	f7 d8                	neg    eax
c002134a:	83 d2 00             	adc    edx,0x0
c002134d:	f7 da                	neg    edx
c002134f:	83 c4 1c             	add    esp,0x1c
c0021352:	5b                   	pop    ebx
c0021353:	5e                   	pop    esi
c0021354:	5f                   	pop    edi
c0021355:	5d                   	pop    ebp
c0021356:	c3                   	ret    
c0021357:	90                   	nop
c0021358:	85 ff                	test   edi,edi
c002135a:	75 0b                	jne    c0021367 <__divdi3+0x83>
c002135c:	b8 01 00 00 00       	mov    eax,0x1
c0021361:	31 d2                	xor    edx,edx
c0021363:	f7 f3                	div    ebx
c0021365:	89 c7                	mov    edi,eax
c0021367:	31 d2                	xor    edx,edx
c0021369:	89 e8                	mov    eax,ebp
c002136b:	f7 f7                	div    edi
c002136d:	89 c6                	mov    esi,eax
c002136f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021372:	f7 f7                	div    edi
c0021374:	89 c1                	mov    ecx,eax
c0021376:	eb c4                	jmp    c002133c <__divdi3+0x58>
c0021378:	39 eb                	cmp    ebx,ebp
c002137a:	77 3c                	ja     c00213b8 <__divdi3+0xd4>
c002137c:	0f bd f3             	bsr    esi,ebx
c002137f:	83 f6 1f             	xor    esi,0x1f
c0021382:	75 40                	jne    c00213c4 <__divdi3+0xe0>
c0021384:	39 eb                	cmp    ebx,ebp
c0021386:	72 09                	jb     c0021391 <__divdi3+0xad>
c0021388:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002138b:	0f 87 97 00 00 00    	ja     c0021428 <__divdi3+0x144>
c0021391:	b9 01 00 00 00       	mov    ecx,0x1
c0021396:	eb a4                	jmp    c002133c <__divdi3+0x58>
c0021398:	f7 d9                	neg    ecx
c002139a:	83 d3 00             	adc    ebx,0x0
c002139d:	f7 db                	neg    ebx
c002139f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00213a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00213a6:	89 dd                	mov    ebp,ebx
c00213a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00213b0:	e9 5f ff ff ff       	jmp    c0021314 <__divdi3+0x30>
c00213b5:	8d 76 00             	lea    esi,[esi+0x0]
c00213b8:	31 f6                	xor    esi,esi
c00213ba:	31 c9                	xor    ecx,ecx
c00213bc:	e9 7b ff ff ff       	jmp    c002133c <__divdi3+0x58>
c00213c1:	8d 76 00             	lea    esi,[esi+0x0]
c00213c4:	b8 20 00 00 00       	mov    eax,0x20
c00213c9:	29 f0                	sub    eax,esi
c00213cb:	89 f1                	mov    ecx,esi
c00213cd:	d3 e3                	shl    ebx,cl
c00213cf:	89 fa                	mov    edx,edi
c00213d1:	88 c1                	mov    cl,al
c00213d3:	d3 ea                	shr    edx,cl
c00213d5:	09 da                	or     edx,ebx
c00213d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213db:	89 f1                	mov    ecx,esi
c00213dd:	d3 e7                	shl    edi,cl
c00213df:	89 eb                	mov    ebx,ebp
c00213e1:	88 c1                	mov    cl,al
c00213e3:	d3 eb                	shr    ebx,cl
c00213e5:	89 f1                	mov    ecx,esi
c00213e7:	d3 e5                	shl    ebp,cl
c00213e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00213ec:	88 c1                	mov    cl,al
c00213ee:	d3 ea                	shr    edx,cl
c00213f0:	09 d5                	or     ebp,edx
c00213f2:	89 e8                	mov    eax,ebp
c00213f4:	89 da                	mov    edx,ebx
c00213f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00213fa:	89 d3                	mov    ebx,edx
c00213fc:	89 c5                	mov    ebp,eax
c00213fe:	f7 e7                	mul    edi
c0021400:	39 d3                	cmp    ebx,edx
c0021402:	72 18                	jb     c002141c <__divdi3+0x138>
c0021404:	74 0a                	je     c0021410 <__divdi3+0x12c>
c0021406:	89 e9                	mov    ecx,ebp
c0021408:	31 f6                	xor    esi,esi
c002140a:	e9 2d ff ff ff       	jmp    c002133c <__divdi3+0x58>
c002140f:	90                   	nop
c0021410:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021413:	89 f1                	mov    ecx,esi
c0021415:	d3 e7                	shl    edi,cl
c0021417:	39 c7                	cmp    edi,eax
c0021419:	73 eb                	jae    c0021406 <__divdi3+0x122>
c002141b:	90                   	nop
c002141c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002141f:	31 f6                	xor    esi,esi
c0021421:	e9 16 ff ff ff       	jmp    c002133c <__divdi3+0x58>
c0021426:	66 90                	xchg   ax,ax
c0021428:	31 c9                	xor    ecx,ecx
c002142a:	e9 0d ff ff ff       	jmp    c002133c <__divdi3+0x58>
c002142f:	90                   	nop

c0021430 <__moddi3>:
c0021430:	55                   	push   ebp
c0021431:	57                   	push   edi
c0021432:	56                   	push   esi
c0021433:	53                   	push   ebx
c0021434:	83 ec 2c             	sub    esp,0x2c
c0021437:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002143b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002143f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021443:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021447:	85 db                	test   ebx,ebx
c0021449:	0f 88 85 00 00 00    	js     c00214d4 <__moddi3+0xa4>
c002144f:	89 de                	mov    esi,ebx
c0021451:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021459:	89 d7                	mov    edi,edx
c002145b:	85 d2                	test   edx,edx
c002145d:	79 09                	jns    c0021468 <__moddi3+0x38>
c002145f:	f7 d8                	neg    eax
c0021461:	83 d2 00             	adc    edx,0x0
c0021464:	f7 da                	neg    edx
c0021466:	89 d7                	mov    edi,edx
c0021468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002146c:	89 cd                	mov    ebp,ecx
c002146e:	85 ff                	test   edi,edi
c0021470:	75 52                	jne    c00214c4 <__moddi3+0x94>
c0021472:	89 c3                	mov    ebx,eax
c0021474:	39 f0                	cmp    eax,esi
c0021476:	76 24                	jbe    c002149c <__moddi3+0x6c>
c0021478:	89 c8                	mov    eax,ecx
c002147a:	89 f2                	mov    edx,esi
c002147c:	f7 f3                	div    ebx
c002147e:	89 d6                	mov    esi,edx
c0021480:	89 f0                	mov    eax,esi
c0021482:	31 d2                	xor    edx,edx
c0021484:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021488:	85 c9                	test   ecx,ecx
c002148a:	74 07                	je     c0021493 <__moddi3+0x63>
c002148c:	f7 d8                	neg    eax
c002148e:	83 d2 00             	adc    edx,0x0
c0021491:	f7 da                	neg    edx
c0021493:	83 c4 2c             	add    esp,0x2c
c0021496:	5b                   	pop    ebx
c0021497:	5e                   	pop    esi
c0021498:	5f                   	pop    edi
c0021499:	5d                   	pop    ebp
c002149a:	c3                   	ret    
c002149b:	90                   	nop
c002149c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00214a0:	85 db                	test   ebx,ebx
c00214a2:	75 0d                	jne    c00214b1 <__moddi3+0x81>
c00214a4:	b8 01 00 00 00       	mov    eax,0x1
c00214a9:	31 d2                	xor    edx,edx
c00214ab:	f7 f7                	div    edi
c00214ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214b1:	89 f0                	mov    eax,esi
c00214b3:	31 d2                	xor    edx,edx
c00214b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00214b9:	f7 f7                	div    edi
c00214bb:	89 e8                	mov    eax,ebp
c00214bd:	f7 f7                	div    edi
c00214bf:	89 d6                	mov    esi,edx
c00214c1:	eb bd                	jmp    c0021480 <__moddi3+0x50>
c00214c3:	90                   	nop
c00214c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00214c8:	39 f7                	cmp    edi,esi
c00214ca:	76 20                	jbe    c00214ec <__moddi3+0xbc>
c00214cc:	89 c8                	mov    eax,ecx
c00214ce:	89 f2                	mov    edx,esi
c00214d0:	eb b2                	jmp    c0021484 <__moddi3+0x54>
c00214d2:	66 90                	xchg   ax,ax
c00214d4:	f7 d9                	neg    ecx
c00214d6:	83 d3 00             	adc    ebx,0x0
c00214d9:	f7 db                	neg    ebx
c00214db:	89 de                	mov    esi,ebx
c00214dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00214e5:	e9 6f ff ff ff       	jmp    c0021459 <__moddi3+0x29>
c00214ea:	66 90                	xchg   ax,ax
c00214ec:	0f bd c7             	bsr    eax,edi
c00214ef:	83 f0 1f             	xor    eax,0x1f
c00214f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214f6:	75 24                	jne    c002151c <__moddi3+0xec>
c00214f8:	39 f7                	cmp    edi,esi
c00214fa:	72 06                	jb     c0021502 <__moddi3+0xd2>
c00214fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021500:	77 0c                	ja     c002150e <__moddi3+0xde>
c0021502:	89 e9                	mov    ecx,ebp
c0021504:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021508:	19 fe                	sbb    esi,edi
c002150a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002150e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021512:	89 f2                	mov    edx,esi
c0021514:	e9 6b ff ff ff       	jmp    c0021484 <__moddi3+0x54>
c0021519:	8d 76 00             	lea    esi,[esi+0x0]
c002151c:	b8 20 00 00 00       	mov    eax,0x20
c0021521:	89 c2                	mov    edx,eax
c0021523:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021527:	29 da                	sub    edx,ebx
c0021529:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002152d:	88 d9                	mov    cl,bl
c002152f:	d3 e7                	shl    edi,cl
c0021531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021535:	88 d1                	mov    cl,dl
c0021537:	d3 e8                	shr    eax,cl
c0021539:	09 c7                	or     edi,eax
c002153b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002153f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021543:	89 d8                	mov    eax,ebx
c0021545:	88 d9                	mov    cl,bl
c0021547:	d3 e7                	shl    edi,cl
c0021549:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002154d:	89 f3                	mov    ebx,esi
c002154f:	88 d1                	mov    cl,dl
c0021551:	d3 eb                	shr    ebx,cl
c0021553:	89 c7                	mov    edi,eax
c0021555:	88 c1                	mov    cl,al
c0021557:	d3 e6                	shl    esi,cl
c0021559:	89 e8                	mov    eax,ebp
c002155b:	88 d1                	mov    cl,dl
c002155d:	d3 e8                	shr    eax,cl
c002155f:	09 f0                	or     eax,esi
c0021561:	89 f9                	mov    ecx,edi
c0021563:	d3 e5                	shl    ebp,cl
c0021565:	89 da                	mov    edx,ebx
c0021567:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002156b:	89 d3                	mov    ebx,edx
c002156d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021571:	89 c6                	mov    esi,eax
c0021573:	89 d1                	mov    ecx,edx
c0021575:	39 d3                	cmp    ebx,edx
c0021577:	72 27                	jb     c00215a0 <__moddi3+0x170>
c0021579:	74 21                	je     c002159c <__moddi3+0x16c>
c002157b:	29 f5                	sub    ebp,esi
c002157d:	19 cb                	sbb    ebx,ecx
c002157f:	89 de                	mov    esi,ebx
c0021581:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021585:	d3 e6                	shl    esi,cl
c0021587:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002158b:	89 f9                	mov    ecx,edi
c002158d:	d3 ed                	shr    ebp,cl
c002158f:	09 ee                	or     esi,ebp
c0021591:	89 f0                	mov    eax,esi
c0021593:	d3 eb                	shr    ebx,cl
c0021595:	89 da                	mov    edx,ebx
c0021597:	e9 e8 fe ff ff       	jmp    c0021484 <__moddi3+0x54>
c002159c:	39 c5                	cmp    ebp,eax
c002159e:	73 db                	jae    c002157b <__moddi3+0x14b>
c00215a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00215a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00215a8:	89 d1                	mov    ecx,edx
c00215aa:	89 c6                	mov    esi,eax
c00215ac:	eb cd                	jmp    c002157b <__moddi3+0x14b>
c00215ae:	66 90                	xchg   ax,ax

c00215b0 <__udivdi3>:
c00215b0:	55                   	push   ebp
c00215b1:	57                   	push   edi
c00215b2:	56                   	push   esi
c00215b3:	53                   	push   ebx
c00215b4:	83 ec 1c             	sub    esp,0x1c
c00215b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00215bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00215bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00215c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00215c7:	85 d2                	test   edx,edx
c00215c9:	75 41                	jne    c002160c <__udivdi3+0x5c>
c00215cb:	39 f7                	cmp    edi,esi
c00215cd:	76 15                	jbe    c00215e4 <__udivdi3+0x34>
c00215cf:	89 e8                	mov    eax,ebp
c00215d1:	89 f2                	mov    edx,esi
c00215d3:	f7 f7                	div    edi
c00215d5:	31 db                	xor    ebx,ebx
c00215d7:	89 da                	mov    edx,ebx
c00215d9:	83 c4 1c             	add    esp,0x1c
c00215dc:	5b                   	pop    ebx
c00215dd:	5e                   	pop    esi
c00215de:	5f                   	pop    edi
c00215df:	5d                   	pop    ebp
c00215e0:	c3                   	ret    
c00215e1:	8d 76 00             	lea    esi,[esi+0x0]
c00215e4:	89 f9                	mov    ecx,edi
c00215e6:	85 ff                	test   edi,edi
c00215e8:	75 0b                	jne    c00215f5 <__udivdi3+0x45>
c00215ea:	b8 01 00 00 00       	mov    eax,0x1
c00215ef:	31 d2                	xor    edx,edx
c00215f1:	f7 f7                	div    edi
c00215f3:	89 c1                	mov    ecx,eax
c00215f5:	31 d2                	xor    edx,edx
c00215f7:	89 f0                	mov    eax,esi
c00215f9:	f7 f1                	div    ecx
c00215fb:	89 c3                	mov    ebx,eax
c00215fd:	89 e8                	mov    eax,ebp
c00215ff:	f7 f1                	div    ecx
c0021601:	89 da                	mov    edx,ebx
c0021603:	83 c4 1c             	add    esp,0x1c
c0021606:	5b                   	pop    ebx
c0021607:	5e                   	pop    esi
c0021608:	5f                   	pop    edi
c0021609:	5d                   	pop    ebp
c002160a:	c3                   	ret    
c002160b:	90                   	nop
c002160c:	39 f2                	cmp    edx,esi
c002160e:	77 1c                	ja     c002162c <__udivdi3+0x7c>
c0021610:	0f bd da             	bsr    ebx,edx
c0021613:	83 f3 1f             	xor    ebx,0x1f
c0021616:	75 24                	jne    c002163c <__udivdi3+0x8c>
c0021618:	39 f2                	cmp    edx,esi
c002161a:	72 08                	jb     c0021624 <__udivdi3+0x74>
c002161c:	39 ef                	cmp    edi,ebp
c002161e:	0f 87 84 00 00 00    	ja     c00216a8 <__udivdi3+0xf8>
c0021624:	b8 01 00 00 00       	mov    eax,0x1
c0021629:	eb ac                	jmp    c00215d7 <__udivdi3+0x27>
c002162b:	90                   	nop
c002162c:	31 db                	xor    ebx,ebx
c002162e:	31 c0                	xor    eax,eax
c0021630:	89 da                	mov    edx,ebx
c0021632:	83 c4 1c             	add    esp,0x1c
c0021635:	5b                   	pop    ebx
c0021636:	5e                   	pop    esi
c0021637:	5f                   	pop    edi
c0021638:	5d                   	pop    ebp
c0021639:	c3                   	ret    
c002163a:	66 90                	xchg   ax,ax
c002163c:	b8 20 00 00 00       	mov    eax,0x20
c0021641:	29 d8                	sub    eax,ebx
c0021643:	88 d9                	mov    cl,bl
c0021645:	d3 e2                	shl    edx,cl
c0021647:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002164b:	89 fa                	mov    edx,edi
c002164d:	88 c1                	mov    cl,al
c002164f:	d3 ea                	shr    edx,cl
c0021651:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021655:	09 d1                	or     ecx,edx
c0021657:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002165b:	88 d9                	mov    cl,bl
c002165d:	d3 e7                	shl    edi,cl
c002165f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021663:	89 f7                	mov    edi,esi
c0021665:	88 c1                	mov    cl,al
c0021667:	d3 ef                	shr    edi,cl
c0021669:	88 d9                	mov    cl,bl
c002166b:	d3 e6                	shl    esi,cl
c002166d:	89 ea                	mov    edx,ebp
c002166f:	88 c1                	mov    cl,al
c0021671:	d3 ea                	shr    edx,cl
c0021673:	09 d6                	or     esi,edx
c0021675:	89 f0                	mov    eax,esi
c0021677:	89 fa                	mov    edx,edi
c0021679:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002167d:	89 d7                	mov    edi,edx
c002167f:	89 c6                	mov    esi,eax
c0021681:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021685:	39 d7                	cmp    edi,edx
c0021687:	72 13                	jb     c002169c <__udivdi3+0xec>
c0021689:	74 09                	je     c0021694 <__udivdi3+0xe4>
c002168b:	89 f0                	mov    eax,esi
c002168d:	31 db                	xor    ebx,ebx
c002168f:	e9 43 ff ff ff       	jmp    c00215d7 <__udivdi3+0x27>
c0021694:	88 d9                	mov    cl,bl
c0021696:	d3 e5                	shl    ebp,cl
c0021698:	39 c5                	cmp    ebp,eax
c002169a:	73 ef                	jae    c002168b <__udivdi3+0xdb>
c002169c:	8d 46 ff             	lea    eax,[esi-0x1]
c002169f:	31 db                	xor    ebx,ebx
c00216a1:	e9 31 ff ff ff       	jmp    c00215d7 <__udivdi3+0x27>
c00216a6:	66 90                	xchg   ax,ax
c00216a8:	31 c0                	xor    eax,eax
c00216aa:	e9 28 ff ff ff       	jmp    c00215d7 <__udivdi3+0x27>
c00216af:	90                   	nop

c00216b0 <__umoddi3>:
c00216b0:	55                   	push   ebp
c00216b1:	57                   	push   edi
c00216b2:	56                   	push   esi
c00216b3:	53                   	push   ebx
c00216b4:	83 ec 1c             	sub    esp,0x1c
c00216b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00216bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00216bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00216c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00216c7:	89 da                	mov    edx,ebx
c00216c9:	85 c0                	test   eax,eax
c00216cb:	75 37                	jne    c0021704 <__umoddi3+0x54>
c00216cd:	39 df                	cmp    edi,ebx
c00216cf:	76 13                	jbe    c00216e4 <__umoddi3+0x34>
c00216d1:	89 f0                	mov    eax,esi
c00216d3:	f7 f7                	div    edi
c00216d5:	89 d0                	mov    eax,edx
c00216d7:	31 d2                	xor    edx,edx
c00216d9:	83 c4 1c             	add    esp,0x1c
c00216dc:	5b                   	pop    ebx
c00216dd:	5e                   	pop    esi
c00216de:	5f                   	pop    edi
c00216df:	5d                   	pop    ebp
c00216e0:	c3                   	ret    
c00216e1:	8d 76 00             	lea    esi,[esi+0x0]
c00216e4:	89 fd                	mov    ebp,edi
c00216e6:	85 ff                	test   edi,edi
c00216e8:	75 0b                	jne    c00216f5 <__umoddi3+0x45>
c00216ea:	b8 01 00 00 00       	mov    eax,0x1
c00216ef:	31 d2                	xor    edx,edx
c00216f1:	f7 f7                	div    edi
c00216f3:	89 c5                	mov    ebp,eax
c00216f5:	89 d8                	mov    eax,ebx
c00216f7:	31 d2                	xor    edx,edx
c00216f9:	f7 f5                	div    ebp
c00216fb:	89 f0                	mov    eax,esi
c00216fd:	f7 f5                	div    ebp
c00216ff:	89 d0                	mov    eax,edx
c0021701:	eb d4                	jmp    c00216d7 <__umoddi3+0x27>
c0021703:	90                   	nop
c0021704:	89 f1                	mov    ecx,esi
c0021706:	39 d8                	cmp    eax,ebx
c0021708:	76 0a                	jbe    c0021714 <__umoddi3+0x64>
c002170a:	89 f0                	mov    eax,esi
c002170c:	83 c4 1c             	add    esp,0x1c
c002170f:	5b                   	pop    ebx
c0021710:	5e                   	pop    esi
c0021711:	5f                   	pop    edi
c0021712:	5d                   	pop    ebp
c0021713:	c3                   	ret    
c0021714:	0f bd e8             	bsr    ebp,eax
c0021717:	83 f5 1f             	xor    ebp,0x1f
c002171a:	75 1c                	jne    c0021738 <__umoddi3+0x88>
c002171c:	39 d8                	cmp    eax,ebx
c002171e:	72 04                	jb     c0021724 <__umoddi3+0x74>
c0021720:	39 f7                	cmp    edi,esi
c0021722:	77 08                	ja     c002172c <__umoddi3+0x7c>
c0021724:	89 da                	mov    edx,ebx
c0021726:	29 fe                	sub    esi,edi
c0021728:	19 c2                	sbb    edx,eax
c002172a:	89 f1                	mov    ecx,esi
c002172c:	89 c8                	mov    eax,ecx
c002172e:	83 c4 1c             	add    esp,0x1c
c0021731:	5b                   	pop    ebx
c0021732:	5e                   	pop    esi
c0021733:	5f                   	pop    edi
c0021734:	5d                   	pop    ebp
c0021735:	c3                   	ret    
c0021736:	66 90                	xchg   ax,ax
c0021738:	ba 20 00 00 00       	mov    edx,0x20
c002173d:	29 ea                	sub    edx,ebp
c002173f:	89 e9                	mov    ecx,ebp
c0021741:	d3 e0                	shl    eax,cl
c0021743:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021747:	89 f8                	mov    eax,edi
c0021749:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002174d:	88 d1                	mov    cl,dl
c002174f:	d3 e8                	shr    eax,cl
c0021751:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021755:	09 c1                	or     ecx,eax
c0021757:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002175b:	89 e9                	mov    ecx,ebp
c002175d:	d3 e7                	shl    edi,cl
c002175f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021763:	89 d8                	mov    eax,ebx
c0021765:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021769:	88 d1                	mov    cl,dl
c002176b:	d3 e8                	shr    eax,cl
c002176d:	89 c7                	mov    edi,eax
c002176f:	89 e9                	mov    ecx,ebp
c0021771:	d3 e3                	shl    ebx,cl
c0021773:	89 f0                	mov    eax,esi
c0021775:	88 d1                	mov    cl,dl
c0021777:	d3 e8                	shr    eax,cl
c0021779:	09 d8                	or     eax,ebx
c002177b:	89 e9                	mov    ecx,ebp
c002177d:	d3 e6                	shl    esi,cl
c002177f:	89 f3                	mov    ebx,esi
c0021781:	89 fa                	mov    edx,edi
c0021783:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021787:	89 d1                	mov    ecx,edx
c0021789:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002178d:	89 c6                	mov    esi,eax
c002178f:	89 d7                	mov    edi,edx
c0021791:	39 d1                	cmp    ecx,edx
c0021793:	72 27                	jb     c00217bc <__umoddi3+0x10c>
c0021795:	74 21                	je     c00217b8 <__umoddi3+0x108>
c0021797:	89 ca                	mov    edx,ecx
c0021799:	29 f3                	sub    ebx,esi
c002179b:	19 fa                	sbb    edx,edi
c002179d:	89 d0                	mov    eax,edx
c002179f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00217a3:	d3 e0                	shl    eax,cl
c00217a5:	89 e9                	mov    ecx,ebp
c00217a7:	d3 eb                	shr    ebx,cl
c00217a9:	09 d8                	or     eax,ebx
c00217ab:	d3 ea                	shr    edx,cl
c00217ad:	83 c4 1c             	add    esp,0x1c
c00217b0:	5b                   	pop    ebx
c00217b1:	5e                   	pop    esi
c00217b2:	5f                   	pop    edi
c00217b3:	5d                   	pop    ebp
c00217b4:	c3                   	ret    
c00217b5:	8d 76 00             	lea    esi,[esi+0x0]
c00217b8:	39 c3                	cmp    ebx,eax
c00217ba:	73 db                	jae    c0021797 <__umoddi3+0xe7>
c00217bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00217c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00217c4:	89 d7                	mov    edi,edx
c00217c6:	89 c6                	mov    esi,eax
c00217c8:	eb cd                	jmp    c0021797 <__umoddi3+0xe7>

Disassembly of section .init:

c00217ca <_init>:
c00217ca:	55                   	push   ebp
c00217cb:	89 e5                	mov    ebp,esp
c00217cd:	e8 46 e9 fd ff       	call   c0000118 <frame_dummy>
c00217d2:	e8 e5 fa ff ff       	call   c00212bc <__do_global_ctors_aux>
c00217d7:	5d                   	pop    ebp
c00217d8:	c3                   	ret    

Disassembly of section .fini:

c00217d9 <_fini>:
c00217d9:	55                   	push   ebp
c00217da:	89 e5                	mov    ebp,esp
c00217dc:	e8 c7 e8 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00217e1:	5d                   	pop    ebp
c00217e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00217e4 <Computer::~Computer()>:
c00217e4:	83 ec 0c             	sub    esp,0xc
c00217e7:	ba 4c 2b 02 c0       	mov    edx,0xc0022b4c
c00217ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f0:	89 10                	mov    DWORD PTR [eax],edx
c00217f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f6:	83 ec 0c             	sub    esp,0xc
c00217f9:	50                   	push   eax
c00217fa:	e8 a1 c2 fe ff       	call   c000daa0 <Device::~Device()>
c00217ff:	83 c4 10             	add    esp,0x10
c0021802:	90                   	nop
c0021803:	83 c4 0c             	add    esp,0xc
c0021806:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021808 <Computer::~Computer()>:
c0021808:	83 ec 0c             	sub    esp,0xc
c002180b:	83 ec 0c             	sub    esp,0xc
c002180e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021812:	e8 cd ff ff ff       	call   c00217e4 <Computer::~Computer()>
c0021817:	83 c4 10             	add    esp,0x10
c002181a:	83 ec 08             	sub    esp,0x8
c002181d:	68 ec 01 00 00       	push   0x1ec
c0021822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021826:	e8 15 ae fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c002182b:	83 c4 10             	add    esp,0x10
c002182e:	83 c4 0c             	add    esp,0xc
c0021831:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021832 <idleCommon()>:
c0021832:	83 ec 0c             	sub    esp,0xc
c0021835:	fa                   	cli    
c0021836:	ff 05 28 99 02 c0    	inc    DWORD PTR ds:0xc0029928
c002183c:	e8 af 48 ff ff       	call   c00160f0 <schedule()>
c0021841:	a1 28 99 02 c0       	mov    eax,ds:0xc0029928
c0021846:	48                   	dec    eax
c0021847:	a3 28 99 02 c0       	mov    ds:0xc0029928,eax
c002184c:	75 01                	jne    c002184f <idleCommon()+0x1d>
c002184e:	fb                   	sti    
c002184f:	83 c4 0c             	add    esp,0xc
c0021852:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021854 <LinkedList<UnixFile>::~LinkedList()>:
c0021854:	90                   	nop
c0021855:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021856 <LinkedList<UnixFile>::LinkedList()>:
c0021856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002185a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021864:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002186b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002186f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002187a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002188b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002188f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021896:	90                   	nop
c0021897:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021898 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021898:	83 ec 0c             	sub    esp,0xc
c002189b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00218a0:	75 10                	jne    c00218b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00218a2:	83 ec 0c             	sub    esp,0xc
c00218a5:	68 98 2e 02 c0       	push   0xc0022e98
c00218aa:	e8 dc 11 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00218af:	83 c4 10             	add    esp,0x10
c00218b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00218b8:	85 c0                	test   eax,eax
c00218ba:	74 34                	je     c00218f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00218bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00218c3:	85 c0                	test   eax,eax
c00218c5:	74 29                	je     c00218f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00218c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00218ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00218d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00218e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00218e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218ee:	eb 65                	jmp    c0021955 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00218f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00218f6:	85 c0                	test   eax,eax
c00218f8:	75 4b                	jne    c0021945 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00218fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021901:	85 c0                	test   eax,eax
c0021903:	75 40                	jne    c0021945 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021909:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002190d:	89 10                	mov    DWORD PTR [eax],edx
c002190f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021913:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021917:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002191a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002191e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021921:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002192c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002192f:	85 c0                	test   eax,eax
c0021931:	74 22                	je     c0021955 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021933:	83 ec 0c             	sub    esp,0xc
c0021936:	68 ba 2e 02 c0       	push   0xc0022eba
c002193b:	e8 4b 11 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021940:	83 c4 10             	add    esp,0x10
c0021943:	eb 10                	jmp    c0021955 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021945:	83 ec 0c             	sub    esp,0xc
c0021948:	68 c4 2e 02 c0       	push   0xc0022ec4
c002194d:	e8 39 11 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021952:	83 c4 10             	add    esp,0x10
c0021955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021959:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002195c:	8d 50 01             	lea    edx,[eax+0x1]
c002195f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021963:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021966:	90                   	nop
c0021967:	83 c4 0c             	add    esp,0xc
c002196a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002196c <LinkedList<UnixFile>::getFirstElement()>:
c002196c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021970:	8b 00                	mov    eax,DWORD PTR [eax]
c0021972:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021974 <LinkedList<UnixFile>::removeFirst()>:
c0021974:	83 ec 0c             	sub    esp,0xc
c0021977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197b:	8b 00                	mov    eax,DWORD PTR [eax]
c002197d:	85 c0                	test   eax,eax
c002197f:	75 12                	jne    c0021993 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021981:	83 ec 0c             	sub    esp,0xc
c0021984:	68 d0 2e 02 c0       	push   0xc0022ed0
c0021989:	e8 fd 10 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c002198e:	83 c4 10             	add    esp,0x10
c0021991:	eb 7e                	jmp    c0021a11 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021997:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002199a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002199d:	85 c0                	test   eax,eax
c002199f:	74 10                	je     c00219b1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00219a1:	83 ec 0c             	sub    esp,0xc
c00219a4:	68 1b 2f 02 c0       	push   0xc0022f1b
c00219a9:	e8 dd 10 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00219ae:	83 c4 10             	add    esp,0x10
c00219b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00219b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00219ba:	85 c0                	test   eax,eax
c00219bc:	75 33                	jne    c00219f1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00219be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00219d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00219da:	83 f8 01             	cmp    eax,0x1
c00219dd:	74 21                	je     c0021a00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00219df:	83 ec 0c             	sub    esp,0xc
c00219e2:	68 f4 2e 02 c0       	push   0xc0022ef4
c00219e7:	e8 9f 10 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c00219ec:	83 c4 10             	add    esp,0x10
c00219ef:	eb 0f                	jmp    c0021a00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00219f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00219f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00219fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219fe:	89 10                	mov    DWORD PTR [eax],edx
c0021a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a07:	8d 50 ff             	lea    edx,[eax-0x1]
c0021a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a11:	83 c4 0c             	add    esp,0xc
c0021a14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0021a16 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0021a16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a1d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021a1e <DriverlessDevice::~DriverlessDevice()>:
c0021a1e:	ba fc 36 02 c0       	mov    edx,0xc00236fc
c0021a23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a27:	89 10                	mov    DWORD PTR [eax],edx
c0021a29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a2d:	50                   	push   eax
c0021a2e:	e8 6d c0 fe ff       	call   c000daa0 <Device::~Device()>
c0021a33:	83 c4 04             	add    esp,0x4
c0021a36:	90                   	nop
c0021a37:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021a38 <DriverlessDevice::~DriverlessDevice()>:
c0021a38:	83 ec 0c             	sub    esp,0xc
c0021a3b:	83 ec 0c             	sub    esp,0xc
c0021a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a42:	e8 d7 ff ff ff       	call   c0021a1e <DriverlessDevice::~DriverlessDevice()>
c0021a47:	83 c4 10             	add    esp,0x10
c0021a4a:	83 ec 08             	sub    esp,0x8
c0021a4d:	68 58 01 00 00       	push   0x158
c0021a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a56:	e8 e5 ab fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c0021a5b:	83 c4 10             	add    esp,0x10
c0021a5e:	83 c4 0c             	add    esp,0xc
c0021a61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021a62 <LinkedList<Device>::addElement(Device*)>:
c0021a62:	83 ec 0c             	sub    esp,0xc
c0021a65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021a6a:	75 10                	jne    c0021a7c <LinkedList<Device>::addElement(Device*)+0x1a>
c0021a6c:	83 ec 0c             	sub    esp,0xc
c0021a6f:	68 98 2e 02 c0       	push   0xc0022e98
c0021a74:	e8 12 10 ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021a79:	83 c4 10             	add    esp,0x10
c0021a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a82:	85 c0                	test   eax,eax
c0021a84:	74 3a                	je     c0021ac0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a8d:	85 c0                	test   eax,eax
c0021a8f:	74 2f                	je     c0021ac0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a9c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021aaa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ab4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021abe:	eb 68                	jmp    c0021b28 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ac6:	85 c0                	test   eax,eax
c0021ac8:	75 4e                	jne    c0021b18 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ad1:	85 c0                	test   eax,eax
c0021ad3:	75 43                	jne    c0021b18 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021add:	89 10                	mov    DWORD PTR [eax],edx
c0021adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ae7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021af1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b02:	85 c0                	test   eax,eax
c0021b04:	74 22                	je     c0021b28 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021b06:	83 ec 0c             	sub    esp,0xc
c0021b09:	68 ba 2e 02 c0       	push   0xc0022eba
c0021b0e:	e8 78 0f ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021b13:	83 c4 10             	add    esp,0x10
c0021b16:	eb 10                	jmp    c0021b28 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021b18:	83 ec 0c             	sub    esp,0xc
c0021b1b:	68 c4 2e 02 c0       	push   0xc0022ec4
c0021b20:	e8 66 0f ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021b25:	83 c4 10             	add    esp,0x10
c0021b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b2f:	8d 50 01             	lea    edx,[eax+0x1]
c0021b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b39:	90                   	nop
c0021b3a:	83 c4 0c             	add    esp,0xc
c0021b3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021b3e <LinkedList<Device>::LinkedList()>:
c0021b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021b53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021b7e:	90                   	nop
c0021b7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021b80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b86:	85 c0                	test   eax,eax
c0021b88:	75 0e                	jne    c0021b98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b91:	85 c0                	test   eax,eax
c0021b93:	75 03                	jne    c0021b98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021b95:	b0 01                	mov    al,0x1
c0021b97:	c3                   	ret    
c0021b98:	b0 00                	mov    al,0x0
c0021b9a:	90                   	nop
c0021b9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021b9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ba2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021ba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021ba4:	83 ec 0c             	sub    esp,0xc
c0021ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bab:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bad:	85 c0                	test   eax,eax
c0021baf:	75 17                	jne    c0021bc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021bb1:	83 ec 0c             	sub    esp,0xc
c0021bb4:	68 d0 2e 02 c0       	push   0xc0022ed0
c0021bb9:	e8 cd 0e ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021bbe:	83 c4 10             	add    esp,0x10
c0021bc1:	e9 92 00 00 00       	jmp    c0021c58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0021bc6:	66 90                	xchg   ax,ax
c0021bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bcf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021bd2:	85 c0                	test   eax,eax
c0021bd4:	0f 95 c0             	setne  al
c0021bd7:	84 c0                	test   al,al
c0021bd9:	74 11                	je     c0021bec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0021bdb:	83 ec 0c             	sub    esp,0xc
c0021bde:	68 1b 2f 02 c0       	push   0xc0022f1b
c0021be3:	e8 a3 0e ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021be8:	83 c4 10             	add    esp,0x10
c0021beb:	90                   	nop
c0021bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bf2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021bf5:	85 c0                	test   eax,eax
c0021bf7:	0f 94 c0             	sete   al
c0021bfa:	84 c0                	test   al,al
c0021bfc:	74 36                	je     c0021c34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c1a:	83 f8 01             	cmp    eax,0x1
c0021c1d:	74 25                	je     c0021c44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021c1f:	83 ec 0c             	sub    esp,0xc
c0021c22:	68 f4 2e 02 c0       	push   0xc0022ef4
c0021c27:	e8 5f 0e ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021c2c:	83 c4 10             	add    esp,0x10
c0021c2f:	eb 13                	jmp    c0021c44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021c31:	8d 76 00             	lea    esi,[esi+0x0]
c0021c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c3a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c41:	89 10                	mov    DWORD PTR [eax],edx
c0021c43:	90                   	nop
c0021c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c4b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c55:	8d 76 00             	lea    esi,[esi+0x0]
c0021c58:	83 c4 0c             	add    esp,0xc
c0021c5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021c5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021c5c:	83 ec 0c             	sub    esp,0xc
c0021c5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021c64:	75 12                	jne    c0021c78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021c66:	83 ec 0c             	sub    esp,0xc
c0021c69:	68 98 2e 02 c0       	push   0xc0022e98
c0021c6e:	e8 18 0e ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021c73:	83 c4 10             	add    esp,0x10
c0021c76:	66 90                	xchg   ax,ax
c0021c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c7e:	85 c0                	test   eax,eax
c0021c80:	74 36                	je     c0021cb8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c89:	85 c0                	test   eax,eax
c0021c8b:	74 2b                	je     c0021cb8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c98:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ca3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021caa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021cb4:	eb 6a                	jmp    c0021d20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021cb6:	66 90                	xchg   ax,ax
c0021cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cbe:	85 c0                	test   eax,eax
c0021cc0:	75 4e                	jne    c0021d10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cc9:	85 c0                	test   eax,eax
c0021ccb:	75 43                	jne    c0021d10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cd5:	89 10                	mov    DWORD PTR [eax],edx
c0021cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cdf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ce9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021cf7:	85 c0                	test   eax,eax
c0021cf9:	74 25                	je     c0021d20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021cfb:	83 ec 0c             	sub    esp,0xc
c0021cfe:	68 ba 2e 02 c0       	push   0xc0022eba
c0021d03:	e8 83 0d ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021d08:	83 c4 10             	add    esp,0x10
c0021d0b:	eb 13                	jmp    c0021d20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0021d10:	83 ec 0c             	sub    esp,0xc
c0021d13:	68 c4 2e 02 c0       	push   0xc0022ec4
c0021d18:	e8 6e 0d ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021d1d:	83 c4 10             	add    esp,0x10
c0021d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d27:	8d 50 01             	lea    edx,[eax+0x1]
c0021d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021d31:	90                   	nop
c0021d32:	83 c4 0c             	add    esp,0xc
c0021d35:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021d38 <ACPI::~ACPI()>:
c0021d38:	83 ec 0c             	sub    esp,0xc
c0021d3b:	ba 70 3e 02 c0       	mov    edx,0xc0023e70
c0021d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d44:	89 10                	mov    DWORD PTR [eax],edx
c0021d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4a:	83 ec 0c             	sub    esp,0xc
c0021d4d:	50                   	push   eax
c0021d4e:	e8 4d bd fe ff       	call   c000daa0 <Device::~Device()>
c0021d53:	83 c4 10             	add    esp,0x10
c0021d56:	90                   	nop
c0021d57:	83 c4 0c             	add    esp,0xc
c0021d5a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021d5c <ACPI::~ACPI()>:
c0021d5c:	83 ec 0c             	sub    esp,0xc
c0021d5f:	83 ec 0c             	sub    esp,0xc
c0021d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d66:	e8 cd ff ff ff       	call   c0021d38 <ACPI::~ACPI()>
c0021d6b:	83 c4 10             	add    esp,0x10
c0021d6e:	83 ec 08             	sub    esp,0x8
c0021d71:	68 64 12 00 00       	push   0x1264
c0021d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d7a:	e8 c1 a8 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c0021d7f:	83 c4 10             	add    esp,0x10
c0021d82:	83 c4 0c             	add    esp,0xc
c0021d85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021d88 <LinkedList<Device>::~LinkedList()>:
c0021d88:	90                   	nop
c0021d89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021d8c <LinkedList<Device>::isEmpty()>:
c0021d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d92:	85 c0                	test   eax,eax
c0021d94:	75 0e                	jne    c0021da4 <LinkedList<Device>::isEmpty()+0x18>
c0021d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d9d:	85 c0                	test   eax,eax
c0021d9f:	75 03                	jne    c0021da4 <LinkedList<Device>::isEmpty()+0x18>
c0021da1:	b0 01                	mov    al,0x1
c0021da3:	c3                   	ret    
c0021da4:	b0 00                	mov    al,0x0
c0021da6:	90                   	nop
c0021da7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021da8 <LinkedList<Device>::getFirstElement()>:
c0021da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021db0 <LinkedList<Device>::removeFirst()>:
c0021db0:	83 ec 0c             	sub    esp,0xc
c0021db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021db7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021db9:	85 c0                	test   eax,eax
c0021dbb:	75 17                	jne    c0021dd4 <LinkedList<Device>::removeFirst()+0x24>
c0021dbd:	83 ec 0c             	sub    esp,0xc
c0021dc0:	68 d0 2e 02 c0       	push   0xc0022ed0
c0021dc5:	e8 c1 0c ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021dca:	83 c4 10             	add    esp,0x10
c0021dcd:	e9 92 00 00 00       	jmp    c0021e64 <LinkedList<Device>::removeFirst()+0xb4>
c0021dd2:	66 90                	xchg   ax,ax
c0021dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ddb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021de1:	85 c0                	test   eax,eax
c0021de3:	74 13                	je     c0021df8 <LinkedList<Device>::removeFirst()+0x48>
c0021de5:	83 ec 0c             	sub    esp,0xc
c0021de8:	68 1b 2f 02 c0       	push   0xc0022f1b
c0021ded:	e8 99 0c ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021df2:	83 c4 10             	add    esp,0x10
c0021df5:	8d 76 00             	lea    esi,[esi+0x0]
c0021df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dfe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021e04:	85 c0                	test   eax,eax
c0021e06:	75 34                	jne    c0021e3c <LinkedList<Device>::removeFirst()+0x8c>
c0021e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e24:	83 f8 01             	cmp    eax,0x1
c0021e27:	74 27                	je     c0021e50 <LinkedList<Device>::removeFirst()+0xa0>
c0021e29:	83 ec 0c             	sub    esp,0xc
c0021e2c:	68 f4 2e 02 c0       	push   0xc0022ef4
c0021e31:	e8 55 0c ff ff       	call   c0012a8b <Krnl::panic(char const*)>
c0021e36:	83 c4 10             	add    esp,0x10
c0021e39:	eb 15                	jmp    c0021e50 <LinkedList<Device>::removeFirst()+0xa0>
c0021e3b:	90                   	nop
c0021e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e40:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e42:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4c:	89 10                	mov    DWORD PTR [eax],edx
c0021e4e:	66 90                	xchg   ax,ax
c0021e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e57:	8d 50 ff             	lea    edx,[eax-0x1]
c0021e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021e61:	8d 76 00             	lea    esi,[esi+0x0]
c0021e64:	83 c4 0c             	add    esp,0xc
c0021e67:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0021e68 <CPU::~CPU()>:
c0021e68:	83 ec 0c             	sub    esp,0xc
c0021e6b:	ba 5c 40 02 c0       	mov    edx,0xc002405c
c0021e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e74:	89 10                	mov    DWORD PTR [eax],edx
c0021e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e7a:	83 ec 0c             	sub    esp,0xc
c0021e7d:	50                   	push   eax
c0021e7e:	e8 1d bc fe ff       	call   c000daa0 <Device::~Device()>
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	90                   	nop
c0021e87:	83 c4 0c             	add    esp,0xc
c0021e8a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021e8c <CPU::~CPU()>:
c0021e8c:	83 ec 0c             	sub    esp,0xc
c0021e8f:	83 ec 0c             	sub    esp,0xc
c0021e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e96:	e8 cd ff ff ff       	call   c0021e68 <CPU::~CPU()>
c0021e9b:	83 c4 10             	add    esp,0x10
c0021e9e:	83 ec 08             	sub    esp,0x8
c0021ea1:	68 94 11 00 00       	push   0x1194
c0021ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021eaa:	e8 91 a7 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c0021eaf:	83 c4 10             	add    esp,0x10
c0021eb2:	83 c4 0c             	add    esp,0xc
c0021eb5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0021eb8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0021eb8:	90                   	nop
c0021eb9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021ebc <ThreadControlBlock::ThreadControlBlock()>:
c0021ebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ec0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021ec7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ecb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ed6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021edd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ee1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0021ee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eec:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021ef3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ef7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0021efb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eff:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021f03:	90                   	nop
c0021f04:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0021f08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0021f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021f28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021f48:	90                   	nop
c0021f49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021f4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021f4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021f53:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021f54 <Vm::_FPUState::_FPUState()>:
c0021f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f58:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021f5f:	90                   	nop
c0021f60:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021f62 <PCI::~PCI()>:
c0021f62:	83 ec 0c             	sub    esp,0xc
c0021f65:	ba 14 52 02 c0       	mov    edx,0xc0025214
c0021f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6e:	89 10                	mov    DWORD PTR [eax],edx
c0021f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f74:	83 ec 0c             	sub    esp,0xc
c0021f77:	50                   	push   eax
c0021f78:	e8 b3 b5 fe ff       	call   c000d530 <Bus::~Bus()>
c0021f7d:	83 c4 10             	add    esp,0x10
c0021f80:	90                   	nop
c0021f81:	83 c4 0c             	add    esp,0xc
c0021f84:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021f86 <PCI::~PCI()>:
c0021f86:	83 ec 0c             	sub    esp,0xc
c0021f89:	83 ec 0c             	sub    esp,0xc
c0021f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f90:	e8 cd ff ff ff       	call   c0021f62 <PCI::~PCI()>
c0021f95:	83 c4 10             	add    esp,0x10
c0021f98:	83 ec 08             	sub    esp,0x8
c0021f9b:	68 5c 01 00 00       	push   0x15c
c0021fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fa4:	e8 97 a6 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c0021fa9:	83 c4 10             	add    esp,0x10
c0021fac:	83 c4 0c             	add    esp,0xc
c0021faf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021fb0 <IDE::~IDE()>:
c0021fb0:	83 ec 0c             	sub    esp,0xc
c0021fb3:	ba e4 52 02 c0       	mov    edx,0xc00252e4
c0021fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fbc:	89 10                	mov    DWORD PTR [eax],edx
c0021fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc2:	83 ec 0c             	sub    esp,0xc
c0021fc5:	50                   	push   eax
c0021fc6:	e8 b9 bf fe ff       	call   c000df84 <HardDiskController::~HardDiskController()>
c0021fcb:	83 c4 10             	add    esp,0x10
c0021fce:	90                   	nop
c0021fcf:	83 c4 0c             	add    esp,0xc
c0021fd2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021fd4 <IDE::~IDE()>:
c0021fd4:	83 ec 0c             	sub    esp,0xc
c0021fd7:	83 ec 0c             	sub    esp,0xc
c0021fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fde:	e8 cd ff ff ff       	call   c0021fb0 <IDE::~IDE()>
c0021fe3:	83 c4 10             	add    esp,0x10
c0021fe6:	83 ec 08             	sub    esp,0x8
c0021fe9:	68 70 02 00 00       	push   0x270
c0021fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ff2:	e8 49 a6 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c0021ff7:	83 c4 10             	add    esp,0x10
c0021ffa:	83 c4 0c             	add    esp,0xc
c0021ffd:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021ffe <SATABus::~SATABus()>:
c0021ffe:	83 ec 0c             	sub    esp,0xc
c0022001:	ba b0 53 02 c0       	mov    edx,0xc00253b0
c0022006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200a:	89 10                	mov    DWORD PTR [eax],edx
c002200c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022010:	83 ec 0c             	sub    esp,0xc
c0022013:	50                   	push   eax
c0022014:	e8 6b bf fe ff       	call   c000df84 <HardDiskController::~HardDiskController()>
c0022019:	83 c4 10             	add    esp,0x10
c002201c:	90                   	nop
c002201d:	83 c4 0c             	add    esp,0xc
c0022020:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0022022 <SATABus::~SATABus()>:
c0022022:	83 ec 0c             	sub    esp,0xc
c0022025:	83 ec 0c             	sub    esp,0xc
c0022028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002202c:	e8 cd ff ff ff       	call   c0021ffe <SATABus::~SATABus()>
c0022031:	83 c4 10             	add    esp,0x10
c0022034:	83 ec 08             	sub    esp,0x8
c0022037:	68 64 01 00 00       	push   0x164
c002203c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022040:	e8 fb a5 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c0022045:	83 c4 10             	add    esp,0x10
c0022048:	83 c4 0c             	add    esp,0xc
c002204b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002204c <ATA::~ATA()>:
c002204c:	83 ec 0c             	sub    esp,0xc
c002204f:	ba 28 54 02 c0       	mov    edx,0xc0025428
c0022054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022058:	89 10                	mov    DWORD PTR [eax],edx
c002205a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205e:	83 ec 0c             	sub    esp,0xc
c0022061:	50                   	push   eax
c0022062:	e8 ff bf fe ff       	call   c000e066 <PhysicalDisk::~PhysicalDisk()>
c0022067:	83 c4 10             	add    esp,0x10
c002206a:	90                   	nop
c002206b:	83 c4 0c             	add    esp,0xc
c002206e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022070 <ATA::~ATA()>:
c0022070:	83 ec 0c             	sub    esp,0xc
c0022073:	83 ec 0c             	sub    esp,0xc
c0022076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002207a:	e8 cd ff ff ff       	call   c002204c <ATA::~ATA()>
c002207f:	83 c4 10             	add    esp,0x10
c0022082:	83 ec 08             	sub    esp,0x8
c0022085:	68 7c 01 00 00       	push   0x17c
c002208a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002208e:	e8 ad a5 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c0022093:	83 c4 10             	add    esp,0x10
c0022096:	83 c4 0c             	add    esp,0xc
c0022099:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002209a <ATAPI::~ATAPI()>:
c002209a:	83 ec 0c             	sub    esp,0xc
c002209d:	ba a0 54 02 c0       	mov    edx,0xc00254a0
c00220a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a6:	89 10                	mov    DWORD PTR [eax],edx
c00220a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ac:	83 ec 0c             	sub    esp,0xc
c00220af:	50                   	push   eax
c00220b0:	e8 b1 bf fe ff       	call   c000e066 <PhysicalDisk::~PhysicalDisk()>
c00220b5:	83 c4 10             	add    esp,0x10
c00220b8:	90                   	nop
c00220b9:	83 c4 0c             	add    esp,0xc
c00220bc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00220be <ATAPI::~ATAPI()>:
c00220be:	83 ec 0c             	sub    esp,0xc
c00220c1:	83 ec 0c             	sub    esp,0xc
c00220c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220c8:	e8 cd ff ff ff       	call   c002209a <ATAPI::~ATAPI()>
c00220cd:	83 c4 10             	add    esp,0x10
c00220d0:	83 ec 08             	sub    esp,0x8
c00220d3:	68 84 01 00 00       	push   0x184
c00220d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220dc:	e8 5f a5 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c00220e1:	83 c4 10             	add    esp,0x10
c00220e4:	83 c4 0c             	add    esp,0xc
c00220e7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00220e8 <SATA::~SATA()>:
c00220e8:	83 ec 0c             	sub    esp,0xc
c00220eb:	ba dc 56 02 c0       	mov    edx,0xc00256dc
c00220f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f4:	89 10                	mov    DWORD PTR [eax],edx
c00220f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220fa:	83 ec 0c             	sub    esp,0xc
c00220fd:	50                   	push   eax
c00220fe:	e8 63 bf fe ff       	call   c000e066 <PhysicalDisk::~PhysicalDisk()>
c0022103:	83 c4 10             	add    esp,0x10
c0022106:	90                   	nop
c0022107:	83 c4 0c             	add    esp,0xc
c002210a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002210c <SATA::~SATA()>:
c002210c:	83 ec 0c             	sub    esp,0xc
c002210f:	83 ec 0c             	sub    esp,0xc
c0022112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022116:	e8 cd ff ff ff       	call   c00220e8 <SATA::~SATA()>
c002211b:	83 c4 10             	add    esp,0x10
c002211e:	83 ec 08             	sub    esp,0x8
c0022121:	68 7c 01 00 00       	push   0x17c
c0022126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002212a:	e8 11 a5 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c002212f:	83 c4 10             	add    esp,0x10
c0022132:	83 c4 0c             	add    esp,0xc
c0022135:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022136 <SATAPI::~SATAPI()>:
c0022136:	83 ec 0c             	sub    esp,0xc
c0022139:	ba 48 58 02 c0       	mov    edx,0xc0025848
c002213e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022142:	89 10                	mov    DWORD PTR [eax],edx
c0022144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022148:	83 ec 0c             	sub    esp,0xc
c002214b:	50                   	push   eax
c002214c:	e8 15 bf fe ff       	call   c000e066 <PhysicalDisk::~PhysicalDisk()>
c0022151:	83 c4 10             	add    esp,0x10
c0022154:	90                   	nop
c0022155:	83 c4 0c             	add    esp,0xc
c0022158:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002215a <SATAPI::~SATAPI()>:
c002215a:	83 ec 0c             	sub    esp,0xc
c002215d:	83 ec 0c             	sub    esp,0xc
c0022160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022164:	e8 cd ff ff ff       	call   c0022136 <SATAPI::~SATAPI()>
c0022169:	83 c4 10             	add    esp,0x10
c002216c:	83 ec 08             	sub    esp,0x8
c002216f:	68 84 01 00 00       	push   0x184
c0022174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022178:	e8 c3 a4 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c002217d:	83 c4 10             	add    esp,0x10
c0022180:	83 c4 0c             	add    esp,0xc
c0022183:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0022184 <IOAPIC::~IOAPIC()>:
c0022184:	83 ec 0c             	sub    esp,0xc
c0022187:	ba 9c 58 02 c0       	mov    edx,0xc002589c
c002218c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022190:	89 10                	mov    DWORD PTR [eax],edx
c0022192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022196:	83 ec 0c             	sub    esp,0xc
c0022199:	50                   	push   eax
c002219a:	e8 01 b9 fe ff       	call   c000daa0 <Device::~Device()>
c002219f:	83 c4 10             	add    esp,0x10
c00221a2:	90                   	nop
c00221a3:	83 c4 0c             	add    esp,0xc
c00221a6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00221a8 <IOAPIC::~IOAPIC()>:
c00221a8:	83 ec 0c             	sub    esp,0xc
c00221ab:	83 ec 0c             	sub    esp,0xc
c00221ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221b2:	e8 cd ff ff ff       	call   c0022184 <IOAPIC::~IOAPIC()>
c00221b7:	83 c4 10             	add    esp,0x10
c00221ba:	83 ec 08             	sub    esp,0x8
c00221bd:	68 68 01 00 00       	push   0x168
c00221c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221c6:	e8 75 a4 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c00221cb:	83 c4 10             	add    esp,0x10
c00221ce:	83 c4 0c             	add    esp,0xc
c00221d1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00221d4 <APICTimer::~APICTimer()>:
c00221d4:	83 ec 0c             	sub    esp,0xc
c00221d7:	ba e4 58 02 c0       	mov    edx,0xc00258e4
c00221dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e0:	89 10                	mov    DWORD PTR [eax],edx
c00221e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e6:	83 ec 0c             	sub    esp,0xc
c00221e9:	50                   	push   eax
c00221ea:	e8 35 d2 fe ff       	call   c000f424 <Timer::~Timer()>
c00221ef:	83 c4 10             	add    esp,0x10
c00221f2:	90                   	nop
c00221f3:	83 c4 0c             	add    esp,0xc
c00221f6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00221f8 <APICTimer::~APICTimer()>:
c00221f8:	83 ec 0c             	sub    esp,0xc
c00221fb:	83 ec 0c             	sub    esp,0xc
c00221fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022202:	e8 cd ff ff ff       	call   c00221d4 <APICTimer::~APICTimer()>
c0022207:	83 c4 10             	add    esp,0x10
c002220a:	83 ec 08             	sub    esp,0x8
c002220d:	68 60 01 00 00       	push   0x160
c0022212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022216:	e8 25 a4 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c002221b:	83 c4 10             	add    esp,0x10
c002221e:	83 c4 0c             	add    esp,0xc
c0022221:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0022224 <PIT::~PIT()>:
c0022224:	83 ec 0c             	sub    esp,0xc
c0022227:	ba 34 59 02 c0       	mov    edx,0xc0025934
c002222c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022230:	89 10                	mov    DWORD PTR [eax],edx
c0022232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022236:	83 ec 0c             	sub    esp,0xc
c0022239:	50                   	push   eax
c002223a:	e8 e5 d1 fe ff       	call   c000f424 <Timer::~Timer()>
c002223f:	83 c4 10             	add    esp,0x10
c0022242:	90                   	nop
c0022243:	83 c4 0c             	add    esp,0xc
c0022246:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022248 <PIT::~PIT()>:
c0022248:	83 ec 0c             	sub    esp,0xc
c002224b:	83 ec 0c             	sub    esp,0xc
c002224e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022252:	e8 cd ff ff ff       	call   c0022224 <PIT::~PIT()>
c0022257:	83 c4 10             	add    esp,0x10
c002225a:	83 ec 08             	sub    esp,0x8
c002225d:	68 5c 01 00 00       	push   0x15c
c0022262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022266:	e8 d5 a3 fe ff       	call   c000c640 <operator delete(void*, unsigned long)>
c002226b:	83 c4 10             	add    esp,0x10
c002226e:	83 c4 0c             	add    esp,0xc
c0022271:	c3                   	ret    
